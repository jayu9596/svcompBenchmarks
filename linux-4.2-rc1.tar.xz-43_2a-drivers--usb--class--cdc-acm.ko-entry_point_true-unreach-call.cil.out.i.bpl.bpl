var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i8;

var $M.8: i32;

var $M.10: [ref]i32;

var $M.12: [ref]ref;

var $M.13: [ref]i32;

var $M.15: [ref]i32;

var $M.16: ref;

var $M.17: [ref]i32;

var $M.18: i32;

var $M.19: ref;

var $M.20: i32;

var $M.21: ref;

var $M.22: i32;

var $M.23: ref;

var $M.24: i32;

var $M.25: ref;

var $M.26: [ref]i8;

var $M.27: [ref]i32;

var $M.28: [ref]ref;

var $M.29: [ref]ref;

var $M.30: [ref]ref;

var $M.31: [ref]ref;

var $M.32: [ref]i64;

var $M.33: [ref]i8;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: i32;

var $M.39: i32;

var $M.40: i32;

var $M.41: i32;

var $M.42: i32;

var $M.43: i32;

var $M.44: i32;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.55: [ref]i16;

var $M.56: [ref]i16;

var $M.57: [ref]i16;

var $M.58: [ref]i16;

var $M.59: [ref]i16;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]i8;

var $M.65: [ref]i8;

var $M.66: [ref]i8;

var $M.67: [ref]i64;

var $M.102: [ref]i8;

var $M.103: [ref]i8;

var $M.104: [ref]i8;

var $M.105: [ref]i8;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 427873);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const ldv_work_1_0: ref;

axiom ldv_work_1_0 == $sub.ref(0, 2056);

const ldv_work_struct_1_0: ref;

axiom ldv_work_struct_1_0 == $sub.ref(0, 3088);

const ldv_work_1_1: ref;

axiom ldv_work_1_1 == $sub.ref(0, 4116);

const ldv_work_struct_1_1: ref;

axiom ldv_work_struct_1_1 == $sub.ref(0, 5148);

const ldv_work_1_2: ref;

axiom ldv_work_1_2 == $sub.ref(0, 6176);

const ldv_work_struct_1_2: ref;

axiom ldv_work_struct_1_2 == $sub.ref(0, 7208);

const ldv_work_1_3: ref;

axiom ldv_work_1_3 == $sub.ref(0, 8236);

const ldv_work_struct_1_3: ref;

axiom ldv_work_struct_1_3 == $sub.ref(0, 9268);

const acm_port_ops_group1: ref;

axiom acm_port_ops_group1 == $sub.ref(0, 10300);

const acm_driver_group1: ref;

axiom acm_driver_group1 == $sub.ref(0, 11332);

const acm_ops_group0: ref;

axiom acm_ops_group0 == $sub.ref(0, 12364);

const acm_ops_group1: ref;

axiom acm_ops_group1 == $sub.ref(0, 13396);

const ldv_state_variable_6: ref;

axiom ldv_state_variable_6 == $sub.ref(0, 14424);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 15452);

const ldv_state_variable_7: ref;

axiom ldv_state_variable_7 == $sub.ref(0, 16480);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 17508);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 18536);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 19564);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 20592);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 21620);

const ldv_state_variable_5: ref;

axiom ldv_state_variable_5 == $sub.ref(0, 22648);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 23676);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 24704);

const usb_counter: ref;

axiom usb_counter == $sub.ref(0, 25732);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 26760);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 27788);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 28816);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 29844);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 30872);

const {:count 102} __mod_usb__acm_ids_device_table: ref;

axiom __mod_usb__acm_ids_device_table == $sub.ref(0, 35160);

const acm_ops: ref;

axiom acm_ops == $sub.ref(0, 36456);

const acm_tty_driver: ref;

axiom acm_tty_driver == $sub.ref(0, 37488);

const {:count 102} acm_ids: ref;

axiom acm_ids == $sub.ref(0, 41776);

const acm_driver: ref;

axiom acm_driver == $sub.ref(0, 43104);

const dev_attr_iCountryCodeRelDate: ref;

axiom dev_attr_iCountryCodeRelDate == $sub.ref(0, 44176);

const dev_attr_wCountryCodes: ref;

axiom dev_attr_wCountryCodes == $sub.ref(0, 45248);

const dev_attr_bmCapabilities: ref;

axiom dev_attr_bmCapabilities == $sub.ref(0, 46320);

const acm_port_ops: ref;

axiom acm_port_ops == $sub.ref(0, 47384);

const acm_minors: ref;

axiom acm_minors == $sub.ref(0, 48520);

const acm_minors_lock: ref;

axiom acm_minors_lock == $sub.ref(0, 49704);

const {:count 26} .str.28: ref;

axiom .str.28 == $sub.ref(0, 50754);

const {:count 16} .str.29: ref;

axiom .str.29 == $sub.ref(0, 51794);

const {:count 16} .str.30: ref;

axiom .str.30 == $sub.ref(0, 52834);

const {:count 8} .str.1: ref;

axiom .str.1 == $sub.ref(0, 53866);

const {:count 18} .str.69: ref;

axiom .str.69 == $sub.ref(0, 54908);

const {:count 206} .str.3: ref;

axiom .str.3 == $sub.ref(0, 56138);

const {:count 4} .str.50: ref;

axiom .str.50 == $sub.ref(0, 57166);

const {:count 18} .str.65: ref;

axiom .str.65 == $sub.ref(0, 58208);

const {:count 38} .str.66: ref;

axiom .str.66 == $sub.ref(0, 59270);

const {:count 32} .str.36: ref;

axiom .str.36 == $sub.ref(0, 60326);

const {:count 20} .str.37: ref;

axiom .str.37 == $sub.ref(0, 61370);

const {:count 20} .str.61: ref;

axiom .str.61 == $sub.ref(0, 62414);

const {:count 28} .str.62: ref;

axiom .str.62 == $sub.ref(0, 63466);

const {:count 13} .str.47: ref;

axiom .str.47 == $sub.ref(0, 64503);

const {:count 45} .str.48: ref;

axiom .str.48 == $sub.ref(0, 65572);

const {:count 18} .str.68: ref;

axiom .str.68 == $sub.ref(0, 66614);

const {:count 23} .str.67: ref;

axiom .str.67 == $sub.ref(0, 67661);

const {:count 15} .str.38: ref;

axiom .str.38 == $sub.ref(0, 68700);

const {:count 3} .str.54: ref;

axiom .str.54 == $sub.ref(0, 69727);

const {:count 14} .str.39: ref;

axiom .str.39 == $sub.ref(0, 70765);

const {:count 20} .str.40: ref;

axiom .str.40 == $sub.ref(0, 71809);

const {:count 44} .str.52: ref;

axiom .str.52 == $sub.ref(0, 72877);

const {:count 13} .str.53: ref;

axiom .str.53 == $sub.ref(0, 73914);

const {:count 18} .str.51: ref;

axiom .str.51 == $sub.ref(0, 74956);

const {:count 15} .str.49: ref;

axiom .str.49 == $sub.ref(0, 75995);

const .str: ref;

axiom .str == $sub.ref(0, 77048);

const {:count 10} .str.2: ref;

axiom .str.2 == $sub.ref(0, 78082);

const {:count 39} .str.4: ref;

axiom .str.4 == $sub.ref(0, 79145);

const {:count 35} .str.5: ref;

axiom .str.5 == $sub.ref(0, 80204);

const {:count 23} .str.6: ref;

axiom .str.6 == $sub.ref(0, 81251);

const {:count 18} .str.7: ref;

axiom .str.7 == $sub.ref(0, 82293);

const {:count 46} .str.8: ref;

axiom .str.8 == $sub.ref(0, 83363);

const {:count 44} .str.9: ref;

axiom .str.9 == $sub.ref(0, 84431);

const {:count 55} .str.10: ref;

axiom .str.10 == $sub.ref(0, 85510);

const {:count 32} .str.11: ref;

axiom .str.11 == $sub.ref(0, 86566);

const {:count 51} .str.12: ref;

axiom .str.12 == $sub.ref(0, 87641);

const {:count 15} .str.13: ref;

axiom .str.13 == $sub.ref(0, 88680);

const {:count 63} .str.14: ref;

axiom .str.14 == $sub.ref(0, 89767);

const {:count 48} .str.15: ref;

axiom .str.15 == $sub.ref(0, 90839);

const {:count 32} .str.16: ref;

axiom .str.16 == $sub.ref(0, 91895);

const {:count 38} .str.17: ref;

axiom .str.17 == $sub.ref(0, 92957);

const {:count 36} .str.18: ref;

axiom .str.18 == $sub.ref(0, 94017);

const {:count 43} .str.19: ref;

axiom .str.19 == $sub.ref(0, 95084);

const {:count 22} .str.20: ref;

axiom .str.20 == $sub.ref(0, 96130);

const {:count 26} .str.21: ref;

axiom .str.21 == $sub.ref(0, 97180);

const {:count 13} .str.22: ref;

axiom .str.22 == $sub.ref(0, 98217);

const {:count 13} .str.23: ref;

axiom .str.23 == $sub.ref(0, 99254);

const {:count 27} .str.24: ref;

axiom .str.24 == $sub.ref(0, 100305);

const {:count 26} .str.25: ref;

axiom .str.25 == $sub.ref(0, 101355);

const {:count 12} .str.26: ref;

axiom .str.26 == $sub.ref(0, 102391);

const {:count 26} .str.27: ref;

axiom .str.27 == $sub.ref(0, 103441);

const {:count 13} .str.41: ref;

axiom .str.41 == $sub.ref(0, 104478);

const {:count 40} .str.42: ref;

axiom .str.42 == $sub.ref(0, 105542);

const {:count 38} .str.43: ref;

axiom .str.43 == $sub.ref(0, 106604);

const {:count 29} .str.44: ref;

axiom .str.44 == $sub.ref(0, 107657);

const {:count 21} .str.45: ref;

axiom .str.45 == $sub.ref(0, 108702);

const {:count 74} .str.46: ref;

axiom .str.46 == $sub.ref(0, 109800);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const system_wq: ref;

axiom system_wq == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 23} .str.33: ref;

axiom .str.33 == $sub.ref(0, 110847);

const {:count 19} .str.34: ref;

axiom .str.34 == $sub.ref(0, 111890);

const {:count 30} .str.35: ref;

axiom .str.35 == $sub.ref(0, 112944);

const {:count 14} .str.31: ref;

axiom .str.31 == $sub.ref(0, 113982);

const {:count 24} .str.32: ref;

axiom .str.32 == $sub.ref(0, 115030);

const {:count 18} .str.59: ref;

axiom .str.59 == $sub.ref(0, 116072);

const {:count 24} .str.60: ref;

axiom .str.60 == $sub.ref(0, 117120);

const {:count 15} .str.56: ref;

axiom .str.56 == $sub.ref(0, 118159);

const {:count 33} .str.63: ref;

axiom .str.63 == $sub.ref(0, 119216);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 16} .str.55: ref;

axiom .str.55 == $sub.ref(0, 120256);

const {:count 14} .str.57: ref;

axiom .str.57 == $sub.ref(0, 121294);

const {:count 13} .str.58: ref;

axiom .str.58 == $sub.ref(0, 122331);

const {:count 16} .str.64: ref;

axiom .str.64 == $sub.ref(0, 123371);

const {:count 4} .str.70: ref;

axiom .str.70 == $sub.ref(0, 124399);

const {:count 7} .str.71: ref;

axiom .str.71 == $sub.ref(0, 125430);

const tty_std_termios: ref;

axiom tty_std_termios == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32800));

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32808));

const {:count 78} .str.72: ref;

axiom .str.72 == $sub.ref(0, 126532);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 127564);

const {:count 3} .str.1.158: ref;

axiom .str.1.158 == $sub.ref(0, 128591);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 129629);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 130657);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 131689);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 132721);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const acm_port_dtr_rts: ref;

axiom acm_port_dtr_rts == $sub.ref(0, 133753);

procedure acm_port_dtr_rts($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_port_dtr_rts($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} {:cexpr "acm_port_dtr_rts:arg:raise"} boogie_si_record_i32($i1);
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 24), 3344));
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i1, 0);
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2940, 1));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $i7 := acm_set_control($p3, $i5);
    call {:si_unique_call 3} {:cexpr "res"} boogie_si_record_i32($i7);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i8 == 1;
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(3140, 1));
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb6;

  $bb7:
    assume $i12 == 1;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} dev_err.ref.ref($p15, .str.67);
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $i5 := 3;
    goto $bb3;
}



const acm_port_shutdown: ref;

axiom acm_port_shutdown == $sub.ref(0, 134785);

procedure acm_port_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.8;



implementation acm_port_shutdown($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i64;
  var $i47: i1;
  var $p48: ref;
  var $p49: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $i58: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i1;
  var $i57: i32;
  var $p67: ref;
  var $p68: ref;
  var $p71: ref;
  var $p72: ref;
  var $p75: ref;
  var $p76: ref;
  var $p79: ref;
  var $p80: ref;
  var $p83: ref;
  var $p84: ref;
  var $p87: ref;
  var $p88: ref;
  var $p91: ref;
  var $p92: ref;
  var $p95: ref;
  var $p96: ref;
  var $p99: ref;
  var $p100: ref;
  var $p103: ref;
  var $p104: ref;
  var $p107: ref;
  var $p108: ref;
  var $p111: ref;
  var $p112: ref;
  var $p115: ref;
  var $p116: ref;
  var $p119: ref;
  var $p120: ref;
  var $p123: ref;
  var $p124: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.1);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.68);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.3);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.50);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 624);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 7} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2608, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} spin_lock_irq($p23);
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2608, 1));
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} spin_unlock_irq($p24);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} usb_autopm_get_interface_no_resume($p26);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, $sub.i8(0, 9));
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i31);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} usb_autopm_put_interface($p33);
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(3152, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p35 := usb_get_from_anchor($p34);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    $i37 := $eq.i64($i36, 0);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume !($i37 == 1);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $p38 := $p35;
    goto $bb7;

  $bb7:
    call $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47 := acm_port_shutdown_loop_$bb7($p2, $p34, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $p45, $i46, $i47);
    goto $bb7_last;

  $bb10:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, 0);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} usb_autopm_put_interface_async($p44);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $p45 := usb_get_from_anchor($p34);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $i46 := $p2i.ref.i64($p45);
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $i47 := $eq.i64($i46, 0);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb11;

  $bb11:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $p38 := $p45;
    goto $bb11_dummy;

  $bb8:
    assume $i47 == 1;
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1064, 1));
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} usb_kill_urb($p49);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} usb_kill_urb($p53);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} usb_kill_urb($p68);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 21} usb_kill_urb($p72);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} usb_kill_urb($p76);
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} usb_kill_urb($p80);
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} usb_kill_urb($p84);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} usb_kill_urb($p88);
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} usb_kill_urb($p92);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.0, $p95);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} usb_kill_urb($p96);
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    $p100 := $load.ref($M.0, $p99);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} usb_kill_urb($p100);
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} usb_kill_urb($p104);
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} usb_kill_urb($p108);
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p111);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} usb_kill_urb($p112);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $p116 := $load.ref($M.0, $p115);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} usb_kill_urb($p116);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} usb_kill_urb($p120);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1104, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $p124 := $load.ref($M.0, $p123);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} usb_kill_urb($p124);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2520, 1));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i56 := $sgt.i32($i55, 0);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i56 == 1;
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $i57 := 0;
    goto $bb19;

  $bb19:
    call $i58, $p60, $p61, $i62, $i63, $i64, $i57 := acm_port_shutdown_loop_$bb19($p2, $p54, $i58, $p60, $p61, $i62, $i63, $i64, $i57);
    goto $bb19_last;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i58 := $sext.i32.i64($i57);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1752, 1)), $mul.ref($i58, 8));
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} usb_kill_urb($p61);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i57, 1);
    call {:si_unique_call 20} {:cexpr "i"} boogie_si_record_i32($i62);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p54);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i64 := $sgt.i32($i63, $i62);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i64 == 1);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb21:
    assume $i64 == 1;
    assume {:verifier.code 0} true;
    $i57 := $i62;
    goto $bb21_dummy;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i37 == 1;
    goto $bb5;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.50, .str.68);
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb11_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb21_dummy:
    assume false;
    return;

  $bb19_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;
}



const acm_port_activate: ref;

axiom acm_port_activate == $sub.ref(0, 135817);

procedure acm_port_activate($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.8, assertsPassed;



implementation acm_port_activate($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i8;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i8;
  var $p58: ref;
  var $i59: i8;
  var $i60: i8;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i71: i32;
  var $p79: ref;
  var $p80: ref;
  var $i53: i32;
  var $p81: ref;
  var $p82: ref;
  var $i33: i32;
  var $i28: i32;
  var $p83: ref;
  var $i84: i32;
  var $i67: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 24), 3344));
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.1);
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.65);
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.3);
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 547);
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 37} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2680, 1));
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} mutex_lock_nested($p24, 0);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2840, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 43} $i31 := usb_autopm_get_interface($p30);
    call {:si_unique_call 44} {:cexpr "retval"} boogie_si_record_i32($i31);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(1336, 1));
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} set_bit(17, $p34);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 1568)), $mul.ref(40, 1));
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    $i39 := $and.i8($i38, $sub.i8(0, 9));
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i40 := $or.i8($i39, 8);
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i40);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1064, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p44, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p42);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1064, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i48 := ldv_usb_submit_urb_31($p47, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 47} {:cexpr "retval"} boogie_si_record_i32($i48);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    $i49 := $ne.i32($i48, 0);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} acm_tty_set_termios($p1, $0.ref);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2528, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} spin_lock_irq($p54);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(3148, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i57 := $and.i8($i56, $sub.i8(0, 5));
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, $i57);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(3148, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $i59 := $load.i8($M.0, $p58);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $i60 := $and.i8($i59, $sub.i8(0, 9));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p58, $i60);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2528, 1));
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} spin_unlock_irq($p61);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 53} $i62 := acm_submit_read_urbs($p4, 208);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    call {:si_unique_call 54} {:cexpr "retval"} boogie_si_record_i32($i62);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i63 := $ne.i32($i62, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} usb_autopm_put_interface($p65);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2680, 1));
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 56} mutex_unlock($p66);
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    $i67 := 0;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    $r := $i67;
    return;

  $bb16:
    assume $i63 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2520, 1));
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $i70 := $sgt.i32($i69, 0);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1064, 1));
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p80 := $load.ref($M.0, $p79);
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} usb_kill_urb($p80);
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i53 := $i62;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} usb_autopm_put_interface($p82);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i33 := $i53;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i28 := $i33;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(2680, 1));
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} mutex_unlock($p83);
    goto corral_source_split_222;

  corral_source_split_222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} $i84 := usb_translate_errors($i28);
    call {:si_unique_call 42} {:cexpr "tmp___0"} boogie_si_record_i32($i84);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i67 := $i84;
    goto $bb20;

  $bb21:
    assume $i70 == 1;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb24;

  $bb24:
    call $i72, $p74, $p75, $i76, $i77, $i78, $i71 := acm_port_activate_loop_$bb24($p3, $p68, $i72, $p74, $p75, $i76, $i77, $i78, $i71);
    goto $bb24_last;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i72 := $sext.i32.i64($i71);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1752, 1)), $mul.ref($i72, 8));
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} usb_kill_urb($p75);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    $i76 := $add.i32($i71, 1);
    call {:si_unique_call 58} {:cexpr "i"} boogie_si_record_i32($i76);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i77 := $load.i32($M.0, $p68);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $i78 := $sgt.i32($i77, $i76);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i78 == 1);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb26:
    assume $i78 == 1;
    assume {:verifier.code 0} true;
    $i71 := $i76;
    goto $bb26_dummy;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i49 == 1;
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_256;

  corral_source_split_256:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} dev_err.ref.ref.ref($p52, .str.66, .str.65);
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $i53 := $i48;
    goto $bb14;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb10;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $i28 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.50, .str.65);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb24_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_297;
}



const acm_port_destruct: ref;

axiom acm_port_destruct == $sub.ref(0, 136849);

procedure acm_port_destruct($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_port_destruct($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 24), 3344));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p4, .str.1);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p5, .str.69);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p6, .str.3);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p7, .str.50);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_324;

  corral_source_split_324:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.5, $p9);
    goto corral_source_split_326;

  corral_source_split_326:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 609);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p9, $i12);
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p13, 0);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.6, $p14);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 62} {:cexpr "tmp"} boogie_si_record_i64($i18);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} acm_release_minor($p3);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} usb_put_intf($p24);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1088, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 66} kfree($p26);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p3);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} kfree($p27);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p22, .str.50, .str.69);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 137881);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 69} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 138913);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32, p.7: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    return;
}



const acm_release_minor: ref;

axiom acm_release_minor == $sub.ref(0, 139945);

procedure acm_release_minor($p0: ref);
  free requires assertsPassed;



implementation acm_release_minor($p0: ref)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} mutex_lock_nested(acm_minors_lock, 0);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3132, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} idr_remove(acm_minors, $i2);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} mutex_unlock(acm_minors_lock);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_intf: ref;

axiom usb_put_intf == $sub.ref(0, 140977);

procedure usb_put_intf($p0: ref);
  free requires assertsPassed;



implementation usb_put_intf($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 142009);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} free_($p0);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 143041);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 74} $free($p0);
    return;
}



const mutex_lock_nested: ref;

axiom mutex_lock_nested == $sub.ref(0, 144073);

procedure mutex_lock_nested($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation mutex_lock_nested($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} {:cexpr "mutex_lock_nested:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    return;
}



const idr_remove: ref;

axiom idr_remove == $sub.ref(0, 145105);

procedure idr_remove($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation idr_remove($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} {:cexpr "idr_remove:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_379;

  corral_source_split_379:
    assume {:verifier.code 0} true;
    return;
}



const mutex_unlock: ref;

axiom mutex_unlock == $sub.ref(0, 146137);

procedure mutex_unlock($p0: ref);
  free requires assertsPassed;



implementation mutex_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    return;
}



const usb_autopm_get_interface: ref;

axiom usb_autopm_get_interface == $sub.ref(0, 147169);

procedure usb_autopm_get_interface($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 1} true;
    call {:si_unique_call 77} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 78} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_384;

  corral_source_split_384:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 148201);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 80} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_31: ref;

axiom ldv_usb_submit_urb_31 == $sub.ref(0, 149233);

procedure ldv_usb_submit_urb_31($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_31($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} {:cexpr "ldv_usb_submit_urb_31:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} ldv_check_alloc_flags($i1);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $p2 := ldv_undef_ptr();
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_7:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 150265);

procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    return;
}



const acm_tty_set_termios: ref;

axiom acm_tty_set_termios == $sub.ref(0, 151297);

procedure acm_tty_set_termios($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_set_termios($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i8;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i32;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i55: i32;
  var $i56: i8;
  var $p57: ref;
  var $p59: ref;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $i75: i32;
  var $i76: i32;
  var $i68: i32;
  var $p77: ref;
  var $i78: i32;
  var $i79: i1;
  var $p80: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i24;
  var $i97: i24;
  var $i98: i24;
  var $p99: ref;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $i105: i1;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $i112: i8;
  var $i113: i32;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $p117: ref;
  var $i118: i8;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_37: i32;
  var vslice_dummy_var_38: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(2940, 1));
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    call {:si_unique_call 86} {:cexpr "newctrl"} boogie_si_record_i32($i9);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $i10 := tty_get_baud_rate($p0);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 64);
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $i16 := (if $i15 == 1 then 2 else 0);
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i16);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i17);
    $p19 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 256);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i38, 48);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i40 := $slt.i32($i39, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i39, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i39, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i42} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, 8);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $i53 := $and.i32($i52, 2048);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $i54 := $ne.i32($i53, 0);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    $i55 := $zext.i1.i32($i54);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i8($i55);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(3136, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p57, $i56);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i61 := $and.i32($i60, 4111);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i61, 0);
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i69 := $p2i.ref.i64($p1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i76 := $i9;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i68 := $i76;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(2940, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i68, $i78);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(2844, 1));
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p2);
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} $i85 := memcmp($p83, $p84, 7);
    call {:si_unique_call 92} {:cexpr "tmp___1"} boogie_si_record_i32($i85);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i86 := $ne.i32($i85, 0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb34:
    assume $i86 == 1;
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(2844, 1));
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p2);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 93} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p88, $p89, 7, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p90, .str.1);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p91, .str.61);
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p92, .str.3);
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p93, .str.62);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i96 := $load.i24($M.5, $p95);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i97 := $and.i24($i96, $sub.i24(0, 262144));
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i98 := $or.i24($i97, 1016);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p95, $i98);
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p99, 0);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.6, $p100);
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i64($i101);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $i103 := $and.i64($i102, 1);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i104 := ldv__builtin_expect($i103, 0);
    call {:si_unique_call 95} {:cexpr "tmp___0"} boogie_si_record_i64($i104);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $i105 := $ne.i64($i104, 0);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i105} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(2844, 1));
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p121 := $bitcast.ref.ref($p120);
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} vslice_dummy_var_38 := acm_ctrl_msg($p6, 32, 0, $p121, 7);
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb36:
    assume $i105 == 1;
    goto corral_source_split_534;

  corral_source_split_534:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p107, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i112);
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(5, 1));
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $i118 := $load.i8($M.0, $p117);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $i119 := $zext.i8.i32($i118);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p3, $p108, .str.62, .str.61, $i110, $i113, $i116, $i119);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb31:
    assume $i79 == 1;
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(2940, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p80, $i68);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} vslice_dummy_var_37 := acm_set_control($p6, $i68);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i70 == 1;
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    $i73 := $and.i32($i72, 4111);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i73, 0);
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i74 == 1);
    goto $bb27;

  $bb28:
    assume $i74 == 1;
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $i75 := $or.i32($i9, 1);
    call {:si_unique_call 89} {:cexpr "newctrl"} boogie_si_record_i32($i75);
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $i76 := $i75;
    goto $bb30;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(2844, 1)), $mul.ref(0, 1));
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p66, $i65);
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i9, $sub.i32(0, 2));
    call {:si_unique_call 88} {:cexpr "newctrl"} boogie_si_record_i32($i67);
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb24;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i39, 32);
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i43 == 1);
    goto $bb11;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_443;

  corral_source_split_443:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p49, 7);
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb5:
    assume $i40 == 1;
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i39, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i39, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb11;

  $bb16:
    assume $i45 == 1;
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 6);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i44 == 1;
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i39, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb11;

  $bb18:
    assume $i46 == 1;
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 5);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb1:
    assume $i22 == 1;
    $p23 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 512);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $i27 := (if $i26 == 1 then 1 else 2);
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 1073741824);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 2 else 0);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i27, $i32);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb3;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 152329);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} ldv_spin_lock();
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} ldv_spin_lock_irq_8($p0);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 153361);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.8;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} ldv_spin_unlock();
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} ldv_spin_unlock_irq_11($p0);
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    return;
}



const acm_submit_read_urbs: ref;

axiom acm_submit_read_urbs == $sub.ref(0, 154393);

procedure acm_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, assertsPassed;



implementation acm_submit_read_urbs($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i5: i32;
  var $i9: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} {:cexpr "acm_submit_read_urbs:arg:mem_flags"} boogie_si_record_i32($i1);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2520, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $i4 := $sgt.i32($i3, 0);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i9 := 0;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb4;

  $bb4:
    call $i6, $i7, $i8, $i10, $i11, $i12, $i5 := acm_submit_read_urbs_loop_$bb4($p0, $i1, $p2, $i6, $i7, $i8, $i10, $i11, $i12, $i5);
    goto $bb4_last;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} $i6 := acm_submit_read_urb($p0, $i5, $i1);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 104} {:cexpr "res"} boogie_si_record_i32($i6);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $i8 := $i6;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i5, 1);
    call {:si_unique_call 105} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p2);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i11, $i10);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i12 == 1);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb10:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    $i5 := $i10;
    goto $bb10_dummy;

  $bb6:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb8;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_570;
}



const usb_autopm_put_interface: ref;

axiom usb_autopm_put_interface == $sub.ref(0, 155425);

procedure usb_autopm_put_interface($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 156457);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    return;
}



const usb_translate_errors: ref;

axiom usb_translate_errors == $sub.ref(0, 157489);

procedure usb_translate_errors($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_translate_errors($i0: i32) returns ($r: i32)
{
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    call {:si_unique_call 106} {:cexpr "usb_translate_errors:arg:error_code"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 5);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i8 := $i0;
    goto $bb20;

  $bb4:
    assume $i2 == 1;
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i0, $sub.i32(0, 12));
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb10;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i0, $sub.i32(0, 19));
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb14, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb15;

  $bb12:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i0, $sub.i32(0, 95));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb18;
}



const acm_submit_read_urb: ref;

axiom acm_submit_read_urb == $sub.ref(0, 158521);

procedure acm_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr, assertsPassed;



implementation acm_submit_read_urb($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i64;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} {:cexpr "acm_submit_read_urb:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 108} {:cexpr "acm_submit_read_urb:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i3 := $sext.i32.i64($i1);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1744, 1));
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} $i5 := test_and_clear_bit($i3, $p4);
    call {:si_unique_call 110} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref($i8, 8));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} $i12 := ldv_usb_submit_urb_30($p11, $i2);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 112} {:cexpr "res"} boogie_si_record_i32($i12);
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i12, $sub.i32(0, 1));
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i1);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1744, 1));
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} set_bit($i18, $p19);
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb7:
    assume $i14 == 1;
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(16, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} dev_err.ref.ref.ref.i32($p17, .str.36, .str.37, $i12);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const test_and_clear_bit: ref;

axiom test_and_clear_bit == $sub.ref(0, 159553);

procedure test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_clear_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 116} {:cexpr "test_and_clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 117} devirtbounce.1(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.7, $p2);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_usb_submit_urb_30: ref;

axiom ldv_usb_submit_urb_30 == $sub.ref(0, 160585);

procedure ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 118} {:cexpr "ldv_usb_submit_urb_30:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} ldv_check_alloc_flags($i1);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $p2 := ldv_undef_ptr();
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 161617);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $i1 := $M.8;
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} ldv_error();
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 162649);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 1} true;
    call {:si_unique_call 123} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 124} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 163681);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 125} __VERIFIER_error();
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 164713);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $M.8 := 0;
    call {:si_unique_call 126} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_11: ref;

axiom ldv_spin_unlock_irq_11 == $sub.ref(0, 165745);

procedure ldv_spin_unlock_irq_11($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_11($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} _raw_spin_unlock_irq($p2);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 166777);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 167809);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.8;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $M.8 := 1;
    call {:si_unique_call 128} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_8: ref;

axiom ldv_spin_lock_irq_8 == $sub.ref(0, 168841);

procedure ldv_spin_lock_irq_8($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_8($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} _raw_spin_lock_irq($p2);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 169873);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    return;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 170905);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 131} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acm_set_control: ref;

axiom acm_set_control == $sub.ref(0, 171937);

procedure acm_set_control($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_set_control($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i7: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "acm_set_control:arg:control"} boogie_si_record_i32($i1);
    goto corral_source_split_676;

  corral_source_split_676:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $i4 := $and.i64($i3, 64);
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i7 := acm_ctrl_msg($p0, 34, $i1, $0.ref, 0);
    call {:si_unique_call 134} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i6 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 95);
    goto $bb3;
}



const memcmp: ref;

axiom memcmp == $sub.ref(0, 172969);

procedure memcmp($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 174001);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const acm_ctrl_msg: ref;

axiom acm_ctrl_msg == $sub.ref(0, 175033);

procedure acm_ctrl_msg($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_ctrl_msg($p0: ref, $i1: i32, $i2: i32, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i8;
  var $i18: i32;
  var $i19: i8;
  var $i20: i16;
  var $i21: i32;
  var $i22: i16;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i32;
  var $i31: i16;
  var $i32: i16;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $i57: i1;
  var $i58: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 136} {:cexpr "acm_ctrl_msg:arg:request"} boogie_si_record_i32($i1);
    call {:si_unique_call 137} {:cexpr "acm_ctrl_msg:arg:value"} boogie_si_record_i32($i2);
    call {:si_unique_call 138} {:cexpr "acm_ctrl_msg:arg:len"} boogie_si_record_i32($i4);
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $i8 := usb_autopm_get_interface($p7);
    call {:si_unique_call 140} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i13 := __create_pipe($p12, 0);
    call {:si_unique_call 142} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i13, $sub.i32(0, 2147483648));
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i8($i1);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i20 := $trunc.i32.i16($i2);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i20);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i32.i16($i21);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p26, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i29);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i32.i16($i30);
    goto corral_source_split_717;

  corral_source_split_717:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i4);
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i34 := $trunc.i32.i16($i33);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} $i35 := usb_control_msg($p15, $i16, $i19, 33, $i22, $i31, $p3, $i34, 5000);
    call {:si_unique_call 144} {:cexpr "retval"} boogie_si_record_i32($i35);
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, .str.1);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p37, .str.47);
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p38, .str.3);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p39, .str.48);
    goto corral_source_split_729;

  corral_source_split_729:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.5, $p41);
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 137);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p41, $i44);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p45, 0);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.6, $p46);
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 146} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 148} usb_autopm_put_interface($p56);
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32(0, $i35);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i57 == 1);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $i58 := $i35;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $i10 := $i58;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb8:
    assume $i57 == 1;
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    $i58 := 0;
    goto $bb10;

  $bb5:
    assume $i51 == 1;
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32.i32($p5, $p54, .str.48, .str.47, $i1, $i2, $i4, $i35);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 176065);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 177097);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 150} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 151} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 152} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 153} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 154} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 155} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 156} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 1} true;
    call {:si_unique_call 157} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 158} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 178129);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 159} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 160} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_autopm_get_interface_no_resume: ref;

axiom usb_autopm_get_interface_no_resume == $sub.ref(0, 179161);

procedure usb_autopm_get_interface_no_resume($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_get_interface_no_resume($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_from_anchor: ref;

axiom usb_get_from_anchor == $sub.ref(0, 180193);

procedure usb_get_from_anchor($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_from_anchor($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p1 := external_alloc();
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_autopm_put_interface_async: ref;

axiom usb_autopm_put_interface_async == $sub.ref(0, 181225);

procedure usb_autopm_put_interface_async($p0: ref);
  free requires assertsPassed;



implementation usb_autopm_put_interface_async($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 182257);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 1} true;
    call {:si_unique_call 162} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 163} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const show_caps: ref;

axiom show_caps == $sub.ref(0, 183289);

procedure show_caps($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_caps($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1568));
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $p5 := usb_get_intfdata($p4);
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(3140, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.10, $p7);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i9 := sprintf.ref.ref.i32($p2, .str.54, $i8);
    call {:si_unique_call 166} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const usb_get_intfdata: ref;

axiom usb_get_intfdata == $sub.ref(0, 184321);

procedure usb_get_intfdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intfdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const sprintf: ref;

axiom sprintf == $sub.ref(0, 185353);

procedure sprintf.ref.ref.i32($p0: ref, $p1: ref, p.2: i32) returns ($r: i32);



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 186385);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const show_country_codes: ref;

axiom show_country_codes == $sub.ref(0, 187417);

procedure show_country_codes($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_country_codes($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1568));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p5 := usb_get_intfdata($p4);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.12, $p7);
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(1096, 1));
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.13, $p9);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $i11 := $zext.i32.i64($i10);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} llvm.memmove.p0i8.p0i8.i64($p2, $p8, $i11, 1, 0);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(1096, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.13, $p12);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $i14 := $zext.i32.i64($i13);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;
}



const llvm.memmove.p0i8.p0i8.i64: ref;

axiom llvm.memmove.p0i8.p0i8.i64 == $sub.ref(0, 188449);

procedure llvm.memmove.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const show_country_rel_date: ref;

axiom show_country_rel_date == $sub.ref(0, 189481);

procedure show_country_rel_date($p0: ref, $p1: ref, $p2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation show_country_rel_date($p0: ref, $p1: ref, $p2: ref) returns ($r: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 48), 1568));
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} $p5 := usb_get_intfdata($p4);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3344)), $mul.ref(1100, 1));
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.15, $p7);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} $i9 := sprintf.ref.ref.i32($p2, .str.54, $i8);
    call {:si_unique_call 172} {:cexpr "tmp___0"} boogie_si_record_i32($i9);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const acm_probe: ref;

axiom acm_probe == $sub.ref(0, 190513);

procedure acm_probe($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, assertsPassed;



implementation acm_probe($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $i95: i32;
  var $p96: ref;
  var $i97: i1;
  var $i108: i8;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $p118: ref;
  var $i119: i8;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i64;
  var $i135: i1;
  var $p136: ref;
  var $i143: i1;
  var $i145: i1;
  var $p146: ref;
  var $i147: i8;
  var $i148: i1;
  var $p149: ref;
  var $i150: i8;
  var $i151: i32;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $i158: i24;
  var $i159: i24;
  var $i160: i24;
  var $p161: ref;
  var $p162: ref;
  var $i163: i8;
  var $i164: i64;
  var $i165: i64;
  var $i166: i64;
  var $i167: i1;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $p141: ref;
  var $p142: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $p116: ref;
  var $p117: ref;
  var $i172: i32;
  var $i173: i64;
  var $p174: ref;
  var $i175: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $i176: i8;
  var $i177: i32;
  var $p178: ref;
  var $p179: ref;
  var $i98: i8;
  var $i99: i32;
  var $p100: ref;
  var $p101: ref;
  var $i180: i64;
  var $i181: i1;
  var $i182: i1;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $i189: i24;
  var $i190: i24;
  var $i191: i24;
  var $p192: ref;
  var $p193: ref;
  var $i194: i8;
  var $i195: i64;
  var $i196: i64;
  var $i197: i64;
  var $i198: i1;
  var $p199: ref;
  var $i200: i64;
  var $i201: i1;
  var $p202: ref;
  var $p205: ref;
  var $i203: i32;
  var $p204: ref;
  var $p206: ref;
  var $p207: ref;
  var $p209: ref;
  var $i210: i8;
  var $i211: i32;
  var $i212: i1;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $i219: i24;
  var $i220: i24;
  var $i221: i24;
  var $p222: ref;
  var $p223: ref;
  var $i224: i8;
  var $i225: i64;
  var $i226: i64;
  var $i227: i64;
  var $i228: i1;
  var $p229: ref;
  var $p230: ref;
  var $p240: ref;
  var $i241: i8;
  var $i242: i32;
  var $p243: ref;
  var $p244: ref;
  var $i245: i8;
  var $i246: i32;
  var $p247: ref;
  var $i236: i32;
  var $i237: i32;
  var $p238: ref;
  var $p239: ref;
  var $i248: i64;
  var $i249: i1;
  var $i250: i64;
  var $i251: i1;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i24;
  var $i259: i24;
  var $i260: i24;
  var $p261: ref;
  var $p262: ref;
  var $i263: i8;
  var $i264: i64;
  var $i265: i64;
  var $i266: i64;
  var $i267: i1;
  var $p268: ref;
  var $i269: i1;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $p275: ref;
  var $i276: i24;
  var $i277: i24;
  var $i278: i24;
  var $p279: ref;
  var $p280: ref;
  var $i281: i8;
  var $i282: i64;
  var $i283: i64;
  var $i284: i64;
  var $i285: i1;
  var $p286: ref;
  var $i287: i64;
  var $i288: i64;
  var $i289: i1;
  var $p290: ref;
  var $i291: i64;
  var $p292: ref;
  var $p293: ref;
  var $p295: ref;
  var $i296: i8;
  var $i297: i32;
  var $i298: i1;
  var $p299: ref;
  var $i231: i8;
  var $p232: ref;
  var $i233: i64;
  var $p234: ref;
  var $p235: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $i308: i64;
  var $p310: ref;
  var $i311: i32;
  var $i312: i1;
  var $i316: i32;
  var $i317: i1;
  var $i320: i32;
  var $i321: i1;
  var $p318: ref;
  var $p319: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $i322: i32;
  var $i323: i1;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $i303: i32;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i64;
  var $i328: i1;
  var $i329: i64;
  var $i330: i1;
  var $i331: i64;
  var $i332: i1;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p342: ref;
  var $p343: ref;
  var $p345: ref;
  var $i346: i8;
  var $i347: i32;
  var $i348: i1;
  var $p349: ref;
  var $p350: ref;
  var $p352: ref;
  var $i353: i8;
  var $i354: i32;
  var $i355: i1;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $i362: i24;
  var $i363: i24;
  var $i364: i24;
  var $p365: ref;
  var $p366: ref;
  var $i367: i8;
  var $i368: i64;
  var $i369: i64;
  var $i370: i64;
  var $i371: i1;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $i375: i1;
  var $i376: i64;
  var $i377: i64;
  var $i378: i1;
  var $i379: i1;
  var $i380: i32;
  var $i381: i1;
  var $p382: ref;
  var $p383: ref;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $i388: i24;
  var $i389: i24;
  var $i390: i24;
  var $p391: ref;
  var $p392: ref;
  var $i393: i8;
  var $i394: i64;
  var $i395: i64;
  var $i396: i64;
  var $i397: i1;
  var $p398: ref;
  var $p399: ref;
  var $p400: ref;
  var $p402: ref;
  var $i403: i8;
  var $i404: i32;
  var $i405: i1;
  var $p406: ref;
  var $p407: ref;
  var $p409: ref;
  var $i410: i8;
  var $i411: i32;
  var $i412: i1;
  var $p413: ref;
  var $p414: ref;
  var $p415: ref;
  var $p416: ref;
  var $p418: ref;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $p424: ref;
  var $p425: ref;
  var $p426: ref;
  var $p428: ref;
  var $i429: i32;
  var $i430: i1;
  var $p431: ref;
  var $p432: ref;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $p436: ref;
  var $i437: i24;
  var $i438: i24;
  var $i439: i24;
  var $p440: ref;
  var $p441: ref;
  var $i442: i8;
  var $i443: i64;
  var $i444: i64;
  var $i445: i64;
  var $i446: i1;
  var $p447: ref;
  var $p448: ref;
  var $p449: ref;
  var $i333: i8;
  var $i334: i64;
  var $p335: ref;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $p340: ref;
  var $i341: i32;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $p455: ref;
  var $i456: i24;
  var $i457: i24;
  var $i458: i24;
  var $p459: ref;
  var $p460: ref;
  var $i461: i8;
  var $i462: i64;
  var $i463: i64;
  var $i464: i64;
  var $i465: i1;
  var $p466: ref;
  var $p467: ref;
  var $p468: ref;
  var $i469: i64;
  var $i470: i1;
  var $i472: i32;
  var $i473: i1;
  var $p474: ref;
  var $p475: ref;
  var $i476: i32;
  var $i477: i32;
  var $i478: i1;
  var $i479: i32;
  var $i480: i32;
  var $i481: i8;
  var $p482: ref;
  var $i483: i8;
  var $i484: i8;
  var $i485: i8;
  var $i486: i8;
  var $i487: i32;
  var $i488: i32;
  var $p489: ref;
  var $p490: ref;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $i494: i32;
  var $p495: ref;
  var $i496: i64;
  var $i497: i1;
  var $p498: ref;
  var $i499: i32;
  var $i500: i32;
  var $p501: ref;
  var $p502: ref;
  var $p503: ref;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $p508: ref;
  var $p509: ref;
  var $p510: ref;
  var $p512: ref;
  var $p514: ref;
  var $p516: ref;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $p527: ref;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $i531: i8;
  var $i532: i32;
  var $i533: i32;
  var $i534: i32;
  var $p535: ref;
  var $i536: i32;
  var $i537: i8;
  var $p538: ref;
  var $i539: i8;
  var $i540: i8;
  var $i541: i8;
  var $i542: i8;
  var $i543: i8;
  var $p544: ref;
  var $p545: ref;
  var $i546: i8;
  var $i547: i32;
  var $i548: i1;
  var $p549: ref;
  var $i550: i8;
  var $p551: ref;
  var $p552: ref;
  var $p554: ref;
  var $p555: ref;
  var $p556: ref;
  var $i557: i64;
  var $p558: ref;
  var $p559: ref;
  var $i560: i64;
  var $i561: i1;
  var $p563: ref;
  var $i564: i32;
  var $i565: i1;
  var $p567: ref;
  var $p568: ref;
  var $p569: ref;
  var $p570: ref;
  var $i571: i64;
  var $i572: i1;
  var $p575: ref;
  var $p576: ref;
  var $i577: i64;
  var $p578: ref;
  var $p579: ref;
  var $p580: ref;
  var $i581: i64;
  var $p582: ref;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $p586: ref;
  var $i587: i64;
  var $i588: i1;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $i593: i64;
  var $i594: i1;
  var $p595: ref;
  var $i596: i32;
  var $i597: i32;
  var $p598: ref;
  var $p599: ref;
  var $i600: i64;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $i604: i8;
  var $i605: i32;
  var $i606: i1;
  var $p607: ref;
  var $p608: ref;
  var $p609: ref;
  var $i610: i32;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $i614: i32;
  var $p615: ref;
  var $p616: ref;
  var $i617: i8;
  var $i618: i32;
  var $p619: ref;
  var $p620: ref;
  var $p621: ref;
  var $i622: i32;
  var $p623: ref;
  var $p624: ref;
  var $p625: ref;
  var $i626: i32;
  var $p627: ref;
  var $i628: i64;
  var $p630: ref;
  var $i631: i64;
  var $p632: ref;
  var $i633: i32;
  var $i634: i1;
  var $i574: i32;
  var $p636: ref;
  var $p637: ref;
  var $i638: i64;
  var $p639: ref;
  var $p640: ref;
  var $p641: ref;
  var $p642: ref;
  var $p643: ref;
  var $i644: i64;
  var $i645: i1;
  var $i647: i32;
  var $i648: i1;
  var $p649: ref;
  var $i650: i8;
  var $i651: i32;
  var $i652: i32;
  var $p653: ref;
  var $p654: ref;
  var $i655: i32;
  var $p656: ref;
  var $i657: i32;
  var $p658: ref;
  var $p659: ref;
  var $i660: i8;
  var $i661: i32;
  var $p662: ref;
  var $i663: i8;
  var $i664: i32;
  var $i665: i32;
  var $p666: ref;
  var $p667: ref;
  var $i668: i32;
  var $p669: ref;
  var $i670: i32;
  var $p671: ref;
  var $p672: ref;
  var $p673: ref;
  var $p674: ref;
  var $i675: i32;
  var $i676: i32;
  var $p677: ref;
  var $p678: ref;
  var $p679: ref;
  var $p680: ref;
  var $i681: i32;
  var $i682: i1;
  var $i635: i32;
  var $p683: ref;
  var $p684: ref;
  var $i685: i32;
  var $i686: i1;
  var $i687: i64;
  var $i688: i1;
  var $p689: ref;
  var $i690: i8;
  var $i691: i32;
  var $i692: i32;
  var $i693: i64;
  var $p694: ref;
  var $p695: ref;
  var $p696: ref;
  var $p697: ref;
  var $i698: i64;
  var $i699: i1;
  var $p700: ref;
  var $i701: i8;
  var $i702: i32;
  var $i703: i32;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $i710: i8;
  var $i711: i32;
  var $i712: i32;
  var $i713: i64;
  var $p714: ref;
  var $i715: i8;
  var $i716: i32;
  var $p717: ref;
  var $p718: ref;
  var $i719: i32;
  var $i720: i1;
  var $p721: ref;
  var $p722: ref;
  var $p723: ref;
  var $p724: ref;
  var $p725: ref;
  var $i726: i32;
  var $i727: i1;
  var $p728: ref;
  var $p729: ref;
  var $p730: ref;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $i734: i8;
  var $i735: i32;
  var $i736: i32;
  var $p737: ref;
  var $p738: ref;
  var $i739: i32;
  var $p740: ref;
  var $p741: ref;
  var $p742: ref;
  var $p743: ref;
  var $i744: i8;
  var $i745: i32;
  var $i746: i1;
  var $p747: ref;
  var $i748: i8;
  var $i749: i32;
  var $i750: i32;
  var $p751: ref;
  var $p752: ref;
  var $p753: ref;
  var $i754: i32;
  var $i755: i32;
  var $p756: ref;
  var $p757: ref;
  var $p758: ref;
  var $p759: ref;
  var $i760: i64;
  var $p761: ref;
  var $p762: ref;
  var $p763: ref;
  var $p764: ref;
  var $p766: ref;
  var $p768: ref;
  var $p769: ref;
  var $p770: ref;
  var $p772: ref;
  var $p774: ref;
  var $p776: ref;
  var $p777: ref;
  var $p778: ref;
  var $p779: ref;
  var $p780: ref;
  var $i781: i1;
  var $i782: i8;
  var $i783: i1;
  var $p784: ref;
  var $i785: i64;
  var $i786: i32;
  var $i787: i64;
  var $i788: i1;
  var $p789: ref;
  var $i790: i8;
  var $i791: i32;
  var $i792: i32;
  var $i793: i32;
  var $p795: ref;
  var $i796: i8;
  var $i797: i32;
  var $i798: i32;
  var $i799: i32;
  var $p801: ref;
  var $p802: ref;
  var $i803: i64;
  var $i804: i1;
  var $p805: ref;
  var $p806: ref;
  var $p807: ref;
  var $p808: ref;
  var $p809: ref;
  var $p810: ref;
  var $p811: ref;
  var $p812: ref;
  var $p813: ref;
  var $p814: ref;
  var $p815: ref;
  var $i646: i32;
  var $p818: ref;
  var $p819: ref;
  var $i589: i32;
  var $i821: i64;
  var $p823: ref;
  var $p824: ref;
  var $i825: i32;
  var $i826: i1;
  var $i820: i32;
  var $p827: ref;
  var $p828: ref;
  var $i573: i32;
  var $i566: i32;
  var $i829: i64;
  var $p830: ref;
  var $p831: ref;
  var $p832: ref;
  var $i833: i64;
  var $i562: i32;
  var $p834: ref;
  var $i471: i32;
  var $i30: i32;
  var $p837: ref;
  var $p838: ref;
  var $p841: ref;
  var $p842: ref;
  var $p845: ref;
  var $p846: ref;
  var $p849: ref;
  var $p850: ref;
  var $p853: ref;
  var $p854: ref;
  var $p857: ref;
  var $p858: ref;
  var $p861: ref;
  var $p862: ref;
  var $p865: ref;
  var $p866: ref;
  var $p869: ref;
  var $p870: ref;
  var $p873: ref;
  var $p874: ref;
  var $p877: ref;
  var $p878: ref;
  var $p881: ref;
  var $p882: ref;
  var $p885: ref;
  var $p886: ref;
  var $p889: ref;
  var $p890: ref;
  var $p893: ref;
  var $p894: ref;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;
  var vslice_dummy_var_39: ref;
  var vslice_dummy_var_40: ref;
  var vslice_dummy_var_41: i32;
  var vslice_dummy_var_42: i32;
  var vslice_dummy_var_43: ref;
  var vslice_dummy_var_44: i32;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 175} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 180} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $p12 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} $p13 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $p14 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 186} $p15 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p17 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_832;

  corral_source_split_832:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    call {:si_unique_call 189} {:cexpr "buflen"} boogie_si_record_i32($i25);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p26 := interface_to_usbdev($p0);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 32)), $mul.ref(24, 1));
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i28 := $load.i64($M.0, $p27);
    call {:si_unique_call 191} {:cexpr "quirks"} boogie_si_record_i64($i28);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 32);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i28, 2);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $i32 := (if $i31 == 1 then 1 else 16);
    call {:si_unique_call 192} {:cexpr "num_rx_buf"} boogie_si_record_i32($i32);
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i28, 1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p21);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i41 := $eq.i64($i40, 0);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i41} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i25, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    assume {:branchcond $i43} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i95, $p96 := $i25, $p21;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $i97 := $sgt.i32($i95, 0);
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    $i98, $i99, $p100, $p101 := 0, $sub.i32(0, 1), $0.ref, $0.ref;
    assume {:branchcond $i97} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i97 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i180 := $p2i.ref.i64($p101);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i181 := $eq.i64($i180, 0);
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i181 == 1);
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p101, $mul.ref(0, 5)), $mul.ref(3, 1));
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i241 := $load.i8($M.0, $p240);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i242 := $zext.i8.i32($i241);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p243 := usb_ifnum_to_if($p26, $i242);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p101, $mul.ref(0, 5)), $mul.ref(4, 1));
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    $i245 := $load.i8($M.0, $p244);
    goto corral_source_split_1062;

  corral_source_split_1062:
    assume {:verifier.code 0} true;
    $i246 := $zext.i8.i32($i245);
    call {:si_unique_call 212} {:cexpr "data_interface_num"} boogie_si_record_i32($i246);
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p247 := usb_ifnum_to_if($p26, $i246);
    assume {:verifier.code 0} true;
    $i236, $i237, $p238, $p239 := $i99, $i246, $p247, $p243;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $i248 := $p2i.ref.i64($p239);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    $i249 := $eq.i64($i248, 0);
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb95, $bb97;

  $bb97:
    assume !($i249 == 1);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i250 := $p2i.ref.i64($p238);
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i251 := $eq.i64($i250, 0);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume {:branchcond $i251} true;
    goto $bb98, $bb99;

  $bb99:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i269 := $ne.i32($i237, $i236);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i287 := $p2i.ref.i64($p239);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i288 := $p2i.ref.i64($p238);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i289 := $eq.i64($i287, $i288);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    assume {:branchcond $i289} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i289 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i36, $p37, $p38, $p39 := $i98, $p238, $p239, $p100;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p37, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $p343 := $load.ref($M.0, $p342);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($add.ref($p343, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $i346 := $load.i8($M.0, $p345);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $i347 := $zext.i8.i32($i346);
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $i348 := $ne.i32($i347, 10);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    assume {:branchcond $i348} true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i348 == 1);
    assume {:verifier.code 0} true;
    $p373, $p374 := $p37, $p38;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $i375 := $eq.i32(0, 0);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb147, $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    assume !($i375 == 1);
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    $i379 := $eq.i32(0, 0);
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    assume {:branchcond $i379} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i379 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $p399 := $add.ref($add.ref($p373, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1380;

  corral_source_split_1380:
    assume {:verifier.code 0} true;
    $p400 := $load.ref($M.0, $p399);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $p402 := $add.ref($add.ref($add.ref($p400, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i403 := $load.i8($M.0, $p402);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    $i404 := $zext.i8.i32($i403);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $i405 := $ule.i32($i404, 1);
    goto corral_source_split_1385;

  corral_source_split_1385:
    assume {:verifier.code 0} true;
    assume {:branchcond $i405} true;
    goto $bb162, $bb164;

  $bb164:
    assume !($i405 == 1);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p374, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    $p407 := $load.ref($M.0, $p406);
    goto corral_source_split_1389;

  corral_source_split_1389:
    assume {:verifier.code 0} true;
    $p409 := $add.ref($add.ref($add.ref($p407, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i410 := $load.i8($M.0, $p409);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i411 := $zext.i8.i32($i410);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 0);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    assume {:branchcond $i412} true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p374, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p414 := $load.ref($M.0, $p413);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $p415 := $add.ref($add.ref($p414, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p416 := $load.ref($M.0, $p415);
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p418 := $add.ref($add.ref($p373, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $p419 := $load.ref($M.0, $p418);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p420 := $add.ref($add.ref($p419, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $p421 := $load.ref($M.0, $p420);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p422 := $add.ref($add.ref($p421, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p423 := $add.ref($add.ref($p373, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $p424 := $load.ref($M.0, $p423);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $p425 := $add.ref($add.ref($p424, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $p426 := $load.ref($M.0, $p425);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($add.ref($p426, $mul.ref(1, 72)), $mul.ref(0, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} $i429 := usb_endpoint_dir_in($p422);
    call {:si_unique_call 250} {:cexpr "tmp___13"} boogie_si_record_i32($i429);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $i430 := $eq.i32($i429, 0);
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    assume {:branchcond $i430} true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i430 == 1);
    assume {:verifier.code 0} true;
    $p448, $p449 := $p428, $p421;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i333, $i334, $p335, $p336, $p337, $p338, $p339, $p340, $i341 := $i36, $i28, $p448, $p449, $p416, $p373, $p374, $p39, 0;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $p450 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p450, .str.1);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p451 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p451, .str.2);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $p452 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p452, .str.3);
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $p453 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p453, .str.20);
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p455 := $bitcast.ref.ref($p454);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i456 := $load.i24($M.5, $p455);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i457 := $and.i24($i456, $sub.i24(0, 262144));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i458 := $or.i24($i457, 1302);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p455, $i458);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $p459 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p459, 0);
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p460 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i461 := $load.i8($M.6, $p460);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i462 := $zext.i8.i64($i461);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i463 := $and.i64($i462, 1);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i464 := ldv__builtin_expect($i463, 0);
    call {:si_unique_call 240} {:cexpr "tmp___14"} boogie_si_record_i64($i464);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i465 := $ne.i64($i464, 0);
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    assume {:branchcond $i465} true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $p467 := kmalloc(3336, 208);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $p468 := $bitcast.ref.ref($p467);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $i469 := $p2i.ref.i64($p468);
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i470 := $eq.i64($i469, 0);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i470} true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i470 == 1);
    assume {:verifier.code 0} true;
    goto $bb180;

  $bb180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} $i472 := acm_alloc_minor($p468);
    call {:si_unique_call 257} {:cexpr "minor"} boogie_si_record_i32($i472);
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i473 := $slt.i32($i472, 0);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    assume {:branchcond $i473} true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $i476 := usb_endpoint_maxp($p337);
    call {:si_unique_call 261} {:cexpr "ctrlsize"} boogie_si_record_i32($i476);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} $i477 := usb_endpoint_maxp($p336);
    call {:si_unique_call 263} {:cexpr "tmp___16"} boogie_si_record_i32($i477);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $i478 := $eq.i64($i334, 2);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $i479 := (if $i478 == 1 then 1 else 2);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i480 := $mul.i32($i477, $i479);
    call {:si_unique_call 264} {:cexpr "readsize"} boogie_si_record_i32($i480);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $i481 := $trunc.i32.i8($i341);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3148, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $i483 := $load.i8($M.0, $p482);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $i484 := $and.i8($i481, 1);
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $i485 := $and.i8($i483, $sub.i8(0, 2));
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i486 := $or.i8($i485, $i484);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p482, $i486);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} $i487 := usb_endpoint_maxp($p335);
    call {:si_unique_call 266} {:cexpr "tmp___17"} boogie_si_record_i32($i487);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i488 := $mul.i32($i487, 20);
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $p489 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p489, $i488);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p490 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p490, $p339);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(16, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p491, $p338);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3132, 1));
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p492, $i472);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p493, $p26);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $i494 := $zext.i8.i32($i333);
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3140, 1));
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p495, $i494);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i496 := $and.i64($i334, 4);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    $i497 := $ne.i64($i496, 0);
    goto corral_source_split_1494;

  corral_source_split_1494:
    assume {:verifier.code 0} true;
    assume {:branchcond $i497} true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i497 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    $p502 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3128, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p502, $i476);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    $p503 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3124, 1));
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p503, $i480);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p504 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2520, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p504, $i32);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $p505 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2856, 1));
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} __init_work($p505, 0);
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p506 := $add.ref($add.ref($p13, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p506, 137438953408);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p508 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2856, 1)), $mul.ref(0, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $p509 := $bitcast.ref.ref($p508);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p510 := $bitcast.ref.ref($p13);
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 268} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p509, $p510, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p512 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2856, 1)), $mul.ref(32, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} lockdep_init_map($p512, .str.22, $p12, 0);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p514 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2856, 1)), $mul.ref(8, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} INIT_LIST_HEAD($p514);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p516 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2856, 1)), $mul.ref(24, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p517 := $bitcast.ref.ref($p516);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p517, acm_softint);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $p518 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3032, 1));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} __init_waitqueue_head($p518, .str.23, $p14);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $p519 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} vslice_dummy_var_39 := spinlock_check($p519);
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $p522 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2608, 1)), $mul.ref(0, 1));
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p523 := $bitcast.ref.ref($p522);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} __raw_spin_lock_init($p523, .str.24, $p15);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $p524 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} vslice_dummy_var_40 := spinlock_check($p524);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $p527 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2528, 1)), $mul.ref(0, 1));
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p528 := $bitcast.ref.ref($p527);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} __raw_spin_lock_init($p528, .str.25, $p16);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p529 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2680, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} __mutex_init($p529, .str.26, $p17);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p530 := $add.ref($add.ref($p336, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i531 := $load.i8($M.0, $p530);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $i532 := $zext.i8.i32($i531);
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 277} $i533 := __create_pipe($p26, $i532);
    call {:si_unique_call 278} {:cexpr "tmp___18"} boogie_si_record_i32($i533);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $i534 := $or.i32($i533, $sub.i32(0, 1073741696));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p535 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2524, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p535, $i534);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i536 := usb_endpoint_xfer_int($p336);
    call {:si_unique_call 280} {:cexpr "tmp___19"} boogie_si_record_i32($i536);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i537 := $trunc.i32.i8($i536);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $p538 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3148, 1));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i539 := $load.i8($M.0, $p538);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $i540 := $and.i8($i537, 1);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $i541 := $shl.i8($i540, 1);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $i542 := $and.i8($i539, $sub.i8(0, 3));
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $i543 := $or.i8($i542, $i541);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p538, $i543);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $p544 := $bitcast.ref.ref($p468);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $p545 := $add.ref($p544, $mul.ref(3140, 1));
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    $i546 := $load.i8($M.0, $p545);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i547 := $zext.i8.i32($i546);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    $i548 := $ne.i32($i547, 0);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i548} true;
    goto $bb187, $bb188;

  $bb188:
    assume !($i548 == 1);
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    $p552 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_1566;

  corral_source_split_1566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} tty_port_init($p552);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p554 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(328, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p554, acm_port_ops);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $p555 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3152, 1));
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} init_usb_anchor($p555);
    goto corral_source_split_1571;

  corral_source_split_1571:
    assume {:verifier.code 0} true;
    $p556 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3336, 1));
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p556, $i334);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i557 := $sext.i32.i64($i476);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $p558 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1080, 1));
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p559 := ldv_usb_alloc_coherent_33($p26, $i557, 208, $p558);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i560 := $p2i.ref.i64($p559);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    $i561 := $eq.i64($i560, 0);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    assume {:branchcond $i561} true;
    goto $bb190, $bb191;

  $bb191:
    assume !($i561 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $p563 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1072, 1));
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p563, $p559);
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i564 := acm_write_buffers_alloc($p468);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 287} {:cexpr "tmp___21"} boogie_si_record_i32($i564);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i565 := $slt.i32($i564, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume {:branchcond $i565} true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i565 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p567 := ldv_usb_alloc_urb_34(0, 208);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $p568 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p568, $p567);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $p569 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p570 := $load.ref($M.0, $p569);
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i571 := $p2i.ref.i64($p570);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i572 := $eq.i64($i571, 0);
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    assume {:branchcond $i572} true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i572 == 1);
    assume {:verifier.code 0} true;
    goto $bb201;

  $bb201:
    assume {:verifier.code 0} true;
    $i574 := 0;
    goto $bb202;

  $bb202:
    call $p575, $p576, $i577, $p578, $p579, $p580, $i581, $p582, $p583, $p584, $p585, $p586, $i587, $i588, $p590, $p591, $p592, $i593, $i594, $p595, $i596, $i597, $p598, $p599, $i600, $p601, $p602, $p603, $i604, $i605, $i606, $p607, $p608, $p609, $i610, $p611, $p612, $p613, $i614, $p615, $p616, $i617, $i618, $p619, $p620, $p621, $i622, $p623, $p624, $p625, $i626, $p627, $i628, $p630, $i631, $p632, $i633, $i634, $i574 := acm_probe_loop_$bb202($i32, $p467, $p468, $i480, $p575, $p576, $i577, $p578, $p579, $p580, $i581, $p582, $p583, $p584, $p585, $p586, $i587, $i588, $p590, $p591, $p592, $i593, $i594, $p595, $i596, $i597, $p598, $p599, $i600, $p601, $p602, $p603, $i604, $i605, $i606, $p607, $p608, $p609, $i610, $p611, $p612, $p613, $i614, $p615, $p616, $i617, $i618, $p619, $p620, $p621, $i622, $p623, $p624, $p625, $i626, $p627, $i628, $p630, $i631, $p632, $i633, $i634, $i574);
    goto $bb202_last;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    $p575 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1880, 1));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p576 := $bitcast.ref.ref($p575);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $i577 := $sext.i32.i64($i574);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p578 := $add.ref($p576, $mul.ref($i577, 40));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p579 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $p580 := $load.ref($M.0, $p579);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i581 := $sext.i32.i64($i480);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    $p582 := $add.ref($add.ref($p576, $mul.ref($i577, 40)), $mul.ref(16, 1));
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} $p583 := ldv_usb_alloc_coherent_35($p580, $i581, 208, $p582);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $p584 := $add.ref($add.ref($p576, $mul.ref($i577, 40)), $mul.ref(8, 1));
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p584, $p583);
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p585 := $add.ref($add.ref($p576, $mul.ref($i577, 40)), $mul.ref(8, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p586 := $load.ref($M.0, $p585);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $i587 := $p2i.ref.i64($p586);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $i588 := $eq.i64($i587, 0);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb204, $bb205;

  $bb205:
    assume !($i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    $p590 := $add.ref($add.ref($p576, $mul.ref($i577, 40)), $mul.ref(24, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p590, $i574);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p591 := $add.ref($add.ref($p576, $mul.ref($i577, 40)), $mul.ref(32, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p591, $p467);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} $p592 := ldv_usb_alloc_urb_36(0, 208);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i593 := $p2i.ref.i64($p592);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i594 := $eq.i64($i593, 0);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $p595 := $add.ref($add.ref($p592, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $i596 := $load.i32($M.0, $p595);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $i597 := $or.i32($i596, 4);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p598 := $add.ref($add.ref($p592, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p598, $i597);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p599 := $add.ref($add.ref($p576, $mul.ref($i577, 40)), $mul.ref(16, 1));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i600 := $load.i64($M.0, $p599);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $p601 := $add.ref($add.ref($p592, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p601, $i600);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $p602 := $bitcast.ref.ref($p468);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p603 := $add.ref($p602, $mul.ref(3140, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i604 := $load.i8($M.0, $p603);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i605 := $zext.i8.i32($i604);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i606 := $ne.i32($i605, 0);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i606 == 1);
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $p619 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p620 := $load.ref($M.0, $p619);
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $p621 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2524, 1));
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i622 := $load.i32($M.0, $p621);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $p623 := $add.ref($add.ref($p576, $mul.ref($i577, 40)), $mul.ref(8, 1));
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $p624 := $load.ref($M.0, $p623);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    $p625 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3124, 1));
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i626 := $load.i32($M.0, $p625);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $p627 := $bitcast.ref.ref($p578);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} usb_fill_bulk_urb($p592, $p620, $i622, $p624, $i626, acm_read_bulk_callback, $p627);
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb213:
    assume {:verifier.code 0} true;
    $i628 := $sext.i32.i64($i574);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $p630 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref($i628, 8));
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p630, $p592);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    $i631 := $sext.i32.i64($i574);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p632 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1744, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} __set_bit($i631, $p632);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i633 := $add.i32($i574, 1);
    call {:si_unique_call 296} {:cexpr "i"} boogie_si_record_i32($i633);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $i634 := $slt.i32($i633, $i32);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i634 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    $i635 := 0;
    goto $bb217;

  $bb217:
    call $p636, $p637, $i638, $p639, $p640, $p641, $p642, $p643, $i644, $i645, $i647, $i648, $p649, $i650, $i651, $i652, $p653, $p654, $i655, $p656, $i657, $p658, $p659, $i660, $i661, $p662, $i663, $i664, $i665, $p666, $p667, $i668, $p669, $i670, $p671, $p672, $p673, $p674, $i675, $i676, $p677, $p678, $p679, $p680, $i681, $i682, $i635 := acm_probe_loop_$bb217($p26, $p335, $p467, $p468, $p636, $p637, $i638, $p639, $p640, $p641, $p642, $p643, $i644, $i645, $i647, $i648, $p649, $i650, $i651, $i652, $p653, $p654, $i655, $p656, $i657, $p658, $p659, $i660, $i661, $p662, $i663, $i664, $i665, $p666, $p667, $i668, $p669, $i670, $p671, $p672, $p673, $p674, $i675, $i676, $p677, $p678, $p679, $p680, $i681, $i682, $i635);
    goto $bb217_last;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $p636 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1));
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p637 := $bitcast.ref.ref($p636);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i638 := $sext.i32.i64($i635);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $p639 := $add.ref($p637, $mul.ref($i638, 40));
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} $p640 := ldv_usb_alloc_urb_37(0, 208);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $p641 := $add.ref($add.ref($p637, $mul.ref($i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p641, $p640);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p642 := $add.ref($add.ref($p637, $mul.ref($i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $p643 := $load.ref($M.0, $p642);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $i644 := $p2i.ref.i64($p643);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i645 := $eq.i64($i644, 0);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i647 := usb_endpoint_xfer_int($p335);
    call {:si_unique_call 300} {:cexpr "tmp___25"} boogie_si_record_i32($i647);
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    $i648 := $ne.i32($i647, 0);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i648 == 1);
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $p662 := $add.ref($add.ref($p335, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i663 := $load.i8($M.0, $p662);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $i664 := $zext.i8.i32($i663);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} $i665 := __create_pipe($p26, $i664);
    call {:si_unique_call 305} {:cexpr "tmp___24"} boogie_si_record_i32($i665);
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $p666 := $add.ref($add.ref($p637, $mul.ref($i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p667 := $load.ref($M.0, $p666);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i668 := $or.i32($i665, $sub.i32(0, 1073741824));
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p669 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $i670 := $load.i32($M.0, $p669);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $p671 := $bitcast.ref.ref($p639);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} usb_fill_bulk_urb($p667, $p26, $i668, $0.ref, $i670, acm_write_bulk, $p671);
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb225:
    assume {:verifier.code 0} true;
    $p672 := $add.ref($add.ref($p637, $mul.ref($i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p673 := $load.ref($M.0, $p672);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p674 := $add.ref($add.ref($p673, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $i675 := $load.i32($M.0, $p674);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $i676 := $or.i32($i675, 4);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p677 := $add.ref($add.ref($p637, $mul.ref($i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $p678 := $load.ref($M.0, $p677);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p679 := $add.ref($add.ref($p678, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p679, $i676);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p680 := $add.ref($add.ref($p637, $mul.ref($i638, 40)), $mul.ref(32, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p680, $p467);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i681 := $add.i32($i635, 1);
    call {:si_unique_call 307} {:cexpr "i"} boogie_si_record_i32($i681);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i682 := $sle.i32($i681, 15);
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226, $bb227;

  $bb227:
    assume !($i682 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    $p683 := $bitcast.ref.ref($p468);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} usb_set_intfdata($p0, $p683);
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p684 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $i685 := device_create_file($p684, dev_attr_bmCapabilities);
    call {:si_unique_call 310} {:cexpr "i"} boogie_si_record_i32($i685);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i686 := $slt.i32($i685, 0);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    assume {:branchcond $i686} true;
    goto $bb229, $bb230;

  $bb230:
    assume !($i686 == 1);
    assume {:verifier.code 0} true;
    goto $bb231;

  $bb231:
    assume {:verifier.code 0} true;
    $i687 := $p2i.ref.i64($p340);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    $i688 := $ne.i64($i687, 0);
    goto corral_source_split_1770;

  corral_source_split_1770:
    assume {:verifier.code 0} true;
    assume {:branchcond $i688} true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i688 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    $p733 := $add.ref($add.ref($p337, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i734 := $load.i8($M.0, $p733);
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i735 := $zext.i8.i32($i734);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i736 := __create_pipe($p26, $i735);
    call {:si_unique_call 313} {:cexpr "tmp___27"} boogie_si_record_i32($i736);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p737 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $p738 := $load.ref($M.0, $p737);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i739 := $or.i32($i736, 1073741952);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $p740 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1072, 1));
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $p741 := $load.ref($M.0, $p740);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $p742 := $bitcast.ref.ref($p468);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p743 := $add.ref($add.ref($p337, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i744 := $load.i8($M.0, $p743);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    $i745 := $zext.i8.i32($i744);
    goto corral_source_split_1800;

  corral_source_split_1800:
    assume {:verifier.code 0} true;
    $i746 := $ne.i32($i745, 0);
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i746} true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i746 == 1);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $i750 := 16;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} usb_fill_int_urb($p738, $p26, $i739, $p741, $i476, acm_ctrl_irq, $p742, $i750);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $p751 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p752 := $load.ref($M.0, $p751);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $p753 := $add.ref($add.ref($p752, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $i754 := $load.i32($M.0, $p753);
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i755 := $or.i32($i754, 4);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $p756 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $p757 := $load.ref($M.0, $p756);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $p758 := $add.ref($add.ref($p757, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p758, $i755);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p759 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1080, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $i760 := $load.i64($M.0, $p759);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p761 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p762 := $load.ref($M.0, $p761);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $p763 := $add.ref($add.ref($p762, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p763, $i760);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    $p764 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 323} _dev_info.ref.ref.i32($p764, .str.27, $i472);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    $p766 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2844, 1)), $mul.ref(0, 1));
    goto corral_source_split_1878;

  corral_source_split_1878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p766, 9600);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p768 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2844, 1)), $mul.ref(6, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p768, 8);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    $p769 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2844, 1));
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    $p770 := $bitcast.ref.ref($p769);
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} vslice_dummy_var_41 := acm_ctrl_msg($p468, 32, 0, $p770, 7);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $p772 := $bitcast.ref.ref($p468);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} vslice_dummy_var_42 := usb_driver_claim_interface(acm_driver, $p338, $p772);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p774 := $bitcast.ref.ref($p468);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} usb_set_intfdata($p338, $p774);
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} vslice_dummy_var_43 := usb_get_intf($p339);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $p776 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $p777 := $M.16;
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    $p778 := $add.ref($add.ref($p339, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} $p779 := tty_port_register_device($p776, $p777, $i472, $p778);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $p780 := $bitcast.ref.ref($p779);
    goto corral_source_split_1894;

  corral_source_split_1894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} $i781 := IS_ERR($p780);
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i782 := $zext.i1.i8($i781);
    call {:si_unique_call 330} {:cexpr "tmp___29"} boogie_si_record_i8($i782);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    $i783 := $trunc.i8.i1($i782);
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    assume {:branchcond $i783} true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i783 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i787 := $and.i64($i334, 128);
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i788 := $ne.i64($i787, 0);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    assume {:branchcond $i788} true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i788 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $r := $i30;
    return;

  $bb252:
    assume $i788 == 1;
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $p789 := $add.ref($add.ref($p336, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i790 := $load.i8($M.0, $p789);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $i791 := $zext.i8.i32($i790);
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $i792 := __create_pipe($p26, $i791);
    call {:si_unique_call 335} {:cexpr "tmp___30"} boogie_si_record_i32($i792);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $i793 := $or.i32($i792, $sub.i32(0, 1073741696));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} vslice_dummy_var_44 := usb_clear_halt($p26, $i793);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $p795 := $add.ref($add.ref($p335, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $i796 := $load.i8($M.0, $p795);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $i797 := $zext.i8.i32($i796);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 337} $i798 := __create_pipe($p26, $i797);
    call {:si_unique_call 338} {:cexpr "tmp___31"} boogie_si_record_i32($i798);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i799 := $or.i32($i798, $sub.i32(0, 1073741824));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} vslice_dummy_var_45 := usb_clear_halt($p26, $i799);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb248:
    assume $i783 == 1;
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $p784 := $bitcast.ref.ref($p779);
    goto corral_source_split_1900;

  corral_source_split_1900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} $i785 := PTR_ERR($p784);
    call {:si_unique_call 332} {:cexpr "tmp___28"} boogie_si_record_i64($i785);
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $i786 := $trunc.i64.i32($i785);
    call {:si_unique_call 333} {:cexpr "rv"} boogie_si_record_i32($i786);
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $p801 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p802 := $load.ref($M.0, $p801);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i803 := $p2i.ref.i64($p802);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $i804 := $ne.i64($i803, 0);
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    assume {:branchcond $i804} true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i804 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $p813 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p814 := $load.ref($M.0, $p813);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $p815 := $add.ref($add.ref($p814, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} device_remove_file($p815, dev_attr_bmCapabilities);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i646 := $i786;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    call {:si_unique_call 298} usb_set_intfdata($p0, $0.ref);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    goto $bb258;

  $bb258:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $p818 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $p819 := $load.ref($M.0, $p818);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} usb_free_urb($p819);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $p837 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $p838 := $load.ref($M.0, $p837);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} usb_free_urb($p838);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    goto $bb267;

  $bb267:
    assume {:verifier.code 0} true;
    $p841 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $p842 := $load.ref($M.0, $p841);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} usb_free_urb($p842);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $p845 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p846 := $load.ref($M.0, $p845);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} usb_free_urb($p846);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $p849 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p850 := $load.ref($M.0, $p849);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} usb_free_urb($p850);
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    goto $bb270;

  $bb270:
    assume {:verifier.code 0} true;
    $p853 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p854 := $load.ref($M.0, $p853);
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 353} usb_free_urb($p854);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $p857 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p858 := $load.ref($M.0, $p857);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} usb_free_urb($p858);
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $p861 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p862 := $load.ref($M.0, $p861);
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 355} usb_free_urb($p862);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    $p865 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $p866 := $load.ref($M.0, $p865);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} usb_free_urb($p866);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $p869 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p870 := $load.ref($M.0, $p869);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} usb_free_urb($p870);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $p873 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p874 := $load.ref($M.0, $p873);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    call {:si_unique_call 358} usb_free_urb($p874);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    goto $bb276;

  $bb276:
    assume {:verifier.code 0} true;
    $p877 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p878 := $load.ref($M.0, $p877);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} usb_free_urb($p878);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    $p881 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $p882 := $load.ref($M.0, $p881);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} usb_free_urb($p882);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    $p885 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $p886 := $load.ref($M.0, $p885);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} usb_free_urb($p886);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    goto $bb279;

  $bb279:
    assume {:verifier.code 0} true;
    $p889 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 0} true;
    $p890 := $load.ref($M.0, $p889);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} usb_free_urb($p890);
    goto corral_source_split_2016;

  corral_source_split_2016:
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $p893 := $add.ref($add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p894 := $load.ref($M.0, $p893);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} usb_free_urb($p894);
    assume {:verifier.code 0} true;
    goto $bb261;

  $bb261:
    assume {:verifier.code 0} true;
    $i589 := $i646;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i820 := 0;
    goto $bb262;

  $bb262:
    call $i821, $p823, $p824, $i825, $i826, $i820 := acm_probe_loop_$bb262($i32, $p468, $i821, $p823, $p824, $i825, $i826, $i820);
    goto $bb262_last;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i821 := $sext.i32.i64($i820);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $p823 := $add.ref($add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref($i821, 8));
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p824 := $load.ref($M.0, $p823);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} usb_free_urb($p824);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i825 := $add.i32($i820, 1);
    call {:si_unique_call 347} {:cexpr "i"} boogie_si_record_i32($i825);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i826 := $slt.i32($i825, $i32);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} acm_read_buffers_free($p468);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    $p827 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p828 := $load.ref($M.0, $p827);
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} usb_free_urb($p828);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i573 := $i589;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} acm_write_buffers_free($p468);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i566 := $i573;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $i829 := $sext.i32.i64($i476);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p830 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1072, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $p831 := $load.ref($M.0, $p830);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $p832 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1080, 1));
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i833 := $load.i64($M.0, $p832);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} usb_free_coherent($p26, $i829, $p831, $i833);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i562 := $i566;
    goto $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} acm_release_minor($p468);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p834 := $bitcast.ref.ref($p468);
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} kfree($p834);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i471 := $i562;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i30 := $i471;
    goto $bb3;

  $bb264:
    assume $i826 == 1;
    assume {:verifier.code 0} true;
    $i820 := $i825;
    goto $bb264_dummy;

  $bb255:
    assume $i804 == 1;
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $p805 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $p806 := $load.ref($M.0, $p805);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $p807 := $add.ref($add.ref($p806, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} device_remove_file($p807, dev_attr_wCountryCodes);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $p808 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $p809 := $load.ref($M.0, $p808);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p810 := $add.ref($add.ref($p809, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} device_remove_file($p810, dev_attr_iCountryCodeRelDate);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p811 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p812 := $load.ref($M.0, $p811);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 342} kfree($p812);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb245:
    assume $i746 == 1;
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p747 := $add.ref($add.ref($p337, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    $i748 := $load.i8($M.0, $p747);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i749 := $zext.i8.i32($i748);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $i750 := $i749;
    goto $bb247;

  $bb232:
    assume $i688 == 1;
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p689 := $add.ref($add.ref($p340, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i690 := $load.i8($M.0, $p689);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i691 := $zext.i8.i32($i690);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    $i692 := $add.i32($i691, $sub.i32(0, 4));
    goto corral_source_split_1776;

  corral_source_split_1776:
    assume {:verifier.code 0} true;
    $i693 := $sext.i32.i64($i692);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p694 := kmalloc($i693, 208);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $p695 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p695, $p694);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $p696 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p697 := $load.ref($M.0, $p696);
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $i698 := $p2i.ref.i64($p697);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $i699 := $eq.i64($i698, 0);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i699} true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb237;

  $bb237:
    assume {:verifier.code 0} true;
    $p700 := $add.ref($add.ref($p340, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $i701 := $load.i8($M.0, $p700);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    $i702 := $zext.i8.i32($i701);
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i703 := $add.i32($i702, $sub.i32(0, 4));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $p704 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1096, 1));
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p704, $i703);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p705 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $p706 := $load.ref($M.0, $p705);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p707 := $add.ref($add.ref($p340, $mul.ref(0, 6)), $mul.ref(4, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $p708 := $bitcast.ref.ref($p707);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $p709 := $add.ref($add.ref($p340, $mul.ref(0, 6)), $mul.ref(0, 1));
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $i710 := $load.i8($M.0, $p709);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i711 := $zext.i8.i32($i710);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i712 := $add.i32($i711, $sub.i32(0, 4));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i713 := $sext.i32.i64($i712);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 314} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p706, $p708, $i713, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    $p714 := $add.ref($add.ref($p340, $mul.ref(0, 6)), $mul.ref(3, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i715 := $load.i8($M.0, $p714);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i716 := $zext.i8.i32($i715);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $p717 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1100, 1));
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p717, $i716);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p718 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    call {:si_unique_call 315} $i719 := device_create_file($p718, dev_attr_wCountryCodes);
    call {:si_unique_call 316} {:cexpr "i"} boogie_si_record_i32($i719);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i720 := $slt.i32($i719, 0);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    assume {:branchcond $i720} true;
    goto $bb238, $bb239;

  $bb239:
    assume !($i720 == 1);
    assume {:verifier.code 0} true;
    goto $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    $p725 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} $i726 := device_create_file($p725, dev_attr_iCountryCodeRelDate);
    call {:si_unique_call 319} {:cexpr "i"} boogie_si_record_i32($i726);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i727 := $slt.i32($i726, 0);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    assume {:branchcond $i727} true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i727 == 1);
    assume {:verifier.code 0} true;
    goto $bb243;

  $bb243:
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb241:
    assume $i727 == 1;
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p728 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} device_remove_file($p728, dev_attr_wCountryCodes);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $p729 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p730 := $load.ref($M.0, $p729);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} kfree($p730);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $p731 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p731, $0.ref);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    $p732 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1096, 1));
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p732, 0);
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb238:
    assume $i720 == 1;
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p721 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $p722 := $load.ref($M.0, $p721);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} kfree($p722);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p723 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p723, $0.ref);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $p724 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(1096, 1));
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p724, 0);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb234:
    assume $i699 == 1;
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    goto $bb236;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb229:
    assume $i686 == 1;
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i646 := $sub.i32(0, 12);
    goto $bb221;

  $bb226:
    assume $i682 == 1;
    assume {:verifier.code 0} true;
    $i635 := $i681;
    goto $bb226_dummy;

  $bb223:
    assume $i648 == 1;
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p649 := $add.ref($add.ref($p335, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i650 := $load.i8($M.0, $p649);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i651 := $zext.i8.i32($i650);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} $i652 := __create_pipe($p26, $i651);
    call {:si_unique_call 302} {:cexpr "tmp___23"} boogie_si_record_i32($i652);
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $p653 := $add.ref($add.ref($p637, $mul.ref($i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $p654 := $load.ref($M.0, $p653);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i655 := $or.i32($i652, 1073741824);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p656 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i657 := $load.i32($M.0, $p656);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $p658 := $bitcast.ref.ref($p639);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p659 := $add.ref($add.ref($p335, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $i660 := $load.i8($M.0, $p659);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i661 := $zext.i8.i32($i660);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} usb_fill_int_urb($p654, $p26, $i655, $0.ref, $i657, acm_write_bulk, $p658, $i661);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb225;

  $bb219:
    assume $i645 == 1;
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $i646 := $sub.i32(0, 12);
    goto $bb221;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  $bb214:
    assume $i634 == 1;
    assume {:verifier.code 0} true;
    $i574 := $i633;
    goto $bb214_dummy;

  $bb211:
    assume $i606 == 1;
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    $p607 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $p608 := $load.ref($M.0, $p607);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p609 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(2524, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $i610 := $load.i32($M.0, $p609);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    $p611 := $add.ref($add.ref($p576, $mul.ref($i577, 40)), $mul.ref(8, 1));
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $p612 := $load.ref($M.0, $p611);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p613 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3124, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.0, $p613);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p615 := $bitcast.ref.ref($p578);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $p616 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3149, 1));
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $i617 := $load.i8($M.0, $p616);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i618 := $zext.i8.i32($i617);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} usb_fill_int_urb($p592, $p608, $i610, $p612, $i614, acm_read_bulk_callback, $p615, $i618);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb213;

  $bb208:
    assume $i594 == 1;
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i589 := $sub.i32(0, 12);
    goto $bb206;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb204:
    assume $i588 == 1;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i589 := $sub.i32(0, 12);
    goto $bb206;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb198:
    assume $i572 == 1;
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i573 := $sub.i32(0, 12);
    goto $bb200;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb194:
    assume $i565 == 1;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i566 := $sub.i32(0, 12);
    goto $bb196;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  $bb190:
    assume $i561 == 1;
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $i562 := $sub.i32(0, 12);
    goto $bb192;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb187:
    assume $i548 == 1;
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p549 := $add.ref($add.ref($p336, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i550 := $load.i8($M.0, $p549);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $p551 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3149, 1));
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p551, $i550);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb184:
    assume $i497 == 1;
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $p498 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3140, 1));
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i499 := $load.i32($M.0, $p498);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $i500 := $and.i32($i499, $sub.i32(0, 3));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p468, $mul.ref(0, 3344)), $mul.ref(3140, 1));
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p501, $i500);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb181:
    assume $i473 == 1;
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p474 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} dev_err.ref.ref($p474, .str.21);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p475 := $bitcast.ref.ref($p468);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} kfree($p475);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb177:
    assume $i470 == 1;
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $i471 := $sub.i32(0, 12);
    goto $bb179;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb174:
    assume $i465 == 1;
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} __dynamic_dev_dbg.ref.ref.ref($p11, $p466, .str.20);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb168:
    assume $i430 == 1;
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $p431 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p431, .str.1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $p432 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p432, .str.2);
    goto corral_source_split_1418;

  corral_source_split_1418:
    assume {:verifier.code 0} true;
    $p433 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p433, .str.3);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p434 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p434, .str.19);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $p436 := $bitcast.ref.ref($p435);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i437 := $load.i24($M.5, $p436);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $i438 := $and.i24($i437, $sub.i24(0, 262144));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i439 := $or.i24($i438, 1298);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p436, $i439);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p440 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p440, 0);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p441 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i442 := $load.i8($M.6, $p441);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i443 := $zext.i8.i64($i442);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i444 := $and.i64($i443, 1);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 251} $i445 := ldv__builtin_expect($i444, 0);
    call {:si_unique_call 252} {:cexpr "tmp___12"} boogie_si_record_i64($i445);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $i446 := $ne.i64($i445, 0);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    assume {:branchcond $i446} true;
    goto $bb170, $bb171;

  $bb171:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    $p448, $p449 := $p421, $p428;
    goto $bb173;

  $bb170:
    assume $i446 == 1;
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p447 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} __dynamic_dev_dbg.ref.ref.ref($p10, $p447, .str.19);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb165:
    assume {:verifier.code 0} true;
    assume $i412 == 1;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i405 == 1;
    goto $bb163;

  $bb153:
    assume $i379 == 1;
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} $i380 := usb_interface_claimed($p373);
    call {:si_unique_call 245} {:cexpr "tmp___11"} boogie_si_record_i32($i380);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    $i381 := $ne.i32($i380, 0);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    assume {:branchcond $i381} true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb155:
    assume $i381 == 1;
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p382 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p382, .str.1);
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p383 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p383, .str.2);
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p384, .str.3);
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p385, .str.18);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p387 := $bitcast.ref.ref($p386);
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $i388 := $load.i24($M.5, $p387);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i389 := $and.i24($i388, $sub.i24(0, 262144));
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i390 := $or.i24($i389, 1280);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p387, $i390);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $p391 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p391, 0);
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $p392 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i393 := $load.i8($M.6, $p392);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i394 := $zext.i8.i64($i393);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i395 := $and.i64($i394, 1);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} $i396 := ldv__builtin_expect($i395, 0);
    call {:si_unique_call 247} {:cexpr "tmp___10"} boogie_si_record_i64($i396);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i397 := $ne.i64($i396, 0);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    assume {:branchcond $i397} true;
    goto $bb157, $bb158;

  $bb158:
    assume !($i397 == 1);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 16);
    goto $bb3;

  $bb157:
    assume $i397 == 1;
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $p398 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} __dynamic_dev_dbg.ref.ref.ref($p9, $p398, .str.18);
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb147:
    assume $i375 == 1;
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i376 := $p2i.ref.i64($p0);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i377 := $p2i.ref.i64($p374);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i378 := $ne.i64($i376, $i377);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i378} true;
    goto $bb150, $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    assume !($i378 == 1);
    goto $bb149;

  $bb150:
    assume $i378 == 1;
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb138:
    assume $i348 == 1;
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p38, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $p350 := $load.ref($M.0, $p349);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $p352 := $add.ref($add.ref($add.ref($p350, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(5, 1));
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $i353 := $load.i8($M.0, $p352);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i354 := $zext.i8.i32($i353);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $i355 := $eq.i32($i354, 10);
    goto corral_source_split_1304;

  corral_source_split_1304:
    assume {:verifier.code 0} true;
    assume {:branchcond $i355} true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i355 == 1);
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb140:
    assume $i355 == 1;
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $p356 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p356, .str.1);
    goto corral_source_split_1308;

  corral_source_split_1308:
    assume {:verifier.code 0} true;
    $p357 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p357, .str.2);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p358, .str.3);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p359, .str.17);
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $p361 := $bitcast.ref.ref($p360);
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i362 := $load.i24($M.5, $p361);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $i363 := $and.i24($i362, $sub.i24(0, 262144));
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $i364 := $or.i24($i363, 1267);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p361, $i364);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p365 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p365, 0);
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $p366 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i367 := $load.i8($M.6, $p366);
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i368 := $zext.i8.i64($i367);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $i369 := $and.i64($i368, 1);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} $i370 := ldv__builtin_expect($i369, 0);
    call {:si_unique_call 242} {:cexpr "tmp___9"} boogie_si_record_i64($i370);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $i371 := $ne.i64($i370, 0);
    goto corral_source_split_1328;

  corral_source_split_1328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i371} true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i371 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    $p373, $p374 := $p38, $p37;
    goto $bb146;

  $bb142:
    assume $i371 == 1;
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} __dynamic_dev_dbg.ref.ref.ref($p8, $p372, .str.17);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb110:
    assume $i289 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 229} dev_warn.ref.ref($p290, .str.15);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i291 := $or.i64($i28, 4);
    call {:si_unique_call 230} {:cexpr "quirks"} boogie_si_record_i64($i291);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p238, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.0, $p292);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($add.ref($p293, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i296 := $load.i8($M.0, $p295);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i32($i296);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i298 := $ne.i32($i297, 3);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    assume {:branchcond $i298} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i298 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i231, $p232, $i233, $p234, $p235 := $i98, $p100, $i291, $p238, $p239;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $p300, $p301, $p302, $i303 := $0.ref, $0.ref, $0.ref, 0;
    goto $bb115;

  $bb115:
    call $p304, $p305, $p306, $p307, $i308, $p310, $i311, $i312, $i316, $i317, $i320, $i321, $p318, $p319, $p313, $p314, $p315, $i322, $i323, $p300, $p301, $p302, $i303, $p324, $p325, $p326 := acm_probe_loop_$bb115($p234, $p304, $p305, $p306, $p307, $i308, $p310, $i311, $i312, $i316, $i317, $i320, $i321, $p318, $p319, $p313, $p314, $p315, $i322, $i323, $p300, $p301, $p302, $i303, $p324, $p325, $p326);
    goto $bb115_last;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p234, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $p305 := $load.ref($M.0, $p304);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p305, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $p307 := $load.ref($M.0, $p306);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i308 := $sext.i32.i64($i303);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p307, $mul.ref($i308, 72)), $mul.ref(0, 1));
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $i311 := usb_endpoint_is_int_in($p310);
    call {:si_unique_call 233} {:cexpr "tmp___8"} boogie_si_record_i32($i311);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $i312 := $ne.i32($i311, 0);
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i312 == 1);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $i316 := usb_endpoint_is_bulk_out($p310);
    call {:si_unique_call 235} {:cexpr "tmp___7"} boogie_si_record_i32($i316);
    goto corral_source_split_1244;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i317 == 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $i320 := usb_endpoint_is_bulk_in($p310);
    call {:si_unique_call 238} {:cexpr "tmp___6"} boogie_si_record_i32($i320);
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i321 == 1);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb123:
    assume $i321 == 1;
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $p318, $p319 := $p302, $p310;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p313, $p314, $p315 := $p318, $p319, $p300;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $i322 := $add.i32($i303, 1);
    call {:si_unique_call 236} {:cexpr "i"} boogie_si_record_i32($i322);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i323 := $sle.i32($i322, 2);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p324, $p325, $p326 := $p313, $p314, $p315;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i327 := $p2i.ref.i64($p326);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $i328 := $eq.i64($i327, 0);
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb129, $bb131;

  $bb131:
    assume !($i328 == 1);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i329 := $p2i.ref.i64($p325);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i330 := $eq.i64($i329, 0);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i330} true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i330 == 1);
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    $i331 := $p2i.ref.i64($p324);
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i332 := $eq.i64($i331, 0);
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i332 == 1);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i333, $i334, $p335, $p336, $p337, $p338, $p339, $p340, $i341 := $i231, $i233, $p324, $p325, $p326, $p234, $p235, $p232, 1;
    goto $bb136;

  $bb134:
    assume {:verifier.code 0} true;
    assume $i332 == 1;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb132:
    assume {:verifier.code 0} true;
    assume $i330 == 1;
    goto $bb130;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i328 == 1;
    goto $bb130;

  $bb126:
    assume $i323 == 1;
    assume {:verifier.code 0} true;
    $p300, $p301, $p302, $i303 := $p315, $p314, $p313, $i322;
    goto $bb126_dummy;

  $bb120:
    assume $i317 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p318, $p319 := $p310, $p301;
    goto $bb122;

  $bb117:
    assume $i312 == 1;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $p313, $p314, $p315 := $p302, $p301, $p310;
    goto $bb119;

  $bb112:
    assume $i298 == 1;
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} dev_err.ref.ref($p299, .str.16);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb104:
    assume $i269 == 1;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p270, .str.1);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p271, .str.2);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p272, .str.3);
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p273, .str.14);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    $p275 := $bitcast.ref.ref($p274);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i276 := $load.i24($M.5, $p275);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i277 := $and.i24($i276, $sub.i24(0, 262144));
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i278 := $or.i24($i277, 1227);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p275, $i278);
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p279, 0);
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $p280 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    $i281 := $load.i8($M.6, $p280);
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $i282 := $zext.i8.i64($i281);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i283 := $and.i64($i282, 1);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 226} $i284 := ldv__builtin_expect($i283, 0);
    call {:si_unique_call 227} {:cexpr "tmp___5"} boogie_si_record_i64($i284);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i285 := $ne.i64($i284, 0);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb106:
    assume $i285 == 1;
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} __dynamic_dev_dbg.ref.ref.ref($p7, $p286, .str.14);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i251 == 1;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p252, .str.1);
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p253, .str.2);
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p254, .str.3);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p255, .str.13);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p256);
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $i258 := $load.i24($M.5, $p257);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $i259 := $and.i24($i258, $sub.i24(0, 262144));
    goto corral_source_split_1160;

  corral_source_split_1160:
    assume {:verifier.code 0} true;
    $i260 := $or.i24($i259, 1222);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p257, $i260);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p261, 0);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.6, $p262);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i64($i263);
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $i265 := $and.i64($i264, 1);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i266 := ldv__builtin_expect($i265, 0);
    call {:si_unique_call 224} {:cexpr "tmp___4"} boogie_si_record_i64($i266);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i267 := $ne.i64($i266, 0);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb100:
    assume $i267 == 1;
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} __dynamic_dev_dbg.ref.ref.ref($p6, $p268, .str.13);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb95:
    assume {:verifier.code 0} true;
    assume $i249 == 1;
    goto $bb96;

  $bb77:
    assume $i181 == 1;
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $i182 := $sgt.i32($i99, 0);
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i182 == 1);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($add.ref($p207, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i210 := $load.i8($M.0, $p209);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $i211 := $zext.i8.i32($i210);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i212 := $ne.i32($i211, 3);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume {:branchcond $i212} true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i212 == 1);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} dev_warn.ref.ref($p230, .str.12);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i231, $p232, $i233, $p234, $p235 := $i98, $p100, $i28, $p0, $p0;
    goto $bb93;

  $bb88:
    assume $i212 == 1;
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p213, .str.1);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p214, .str.2);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p215, .str.3);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p216, .str.11);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p218 := $bitcast.ref.ref($p217);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $i219 := $load.i24($M.5, $p218);
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $i220 := $and.i24($i219, $sub.i24(0, 262144));
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $i221 := $or.i24($i220, 1207);
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p218, $i221);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p222, 0);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i224 := $load.i8($M.6, $p223);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $i225 := $zext.i8.i64($i224);
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i226 := $and.i64($i225, 1);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i227 := ldv__builtin_expect($i226, 0);
    call {:si_unique_call 220} {:cexpr "tmp___3"} boogie_si_record_i64($i227);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $i228 := $ne.i64($i227, 0);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    assume {:branchcond $i228} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i228 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb90:
    assume $i228 == 1;
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} __dynamic_dev_dbg.ref.ref.ref($p5, $p229, .str.11);
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb79:
    assume $i182 == 1;
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p183, .str.1);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p184, .str.2);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p185, .str.3);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p186, .str.10);
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $p188 := $bitcast.ref.ref($p187);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i189 := $load.i24($M.5, $p188);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i190 := $and.i24($i189, $sub.i24(0, 262144));
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $i191 := $or.i24($i190, 1198);
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p188, $i191);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p192, 0);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $i194 := $load.i8($M.6, $p193);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i195 := $zext.i8.i64($i194);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i196 := $and.i64($i195, 1);
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} $i197 := ldv__builtin_expect($i196, 0);
    call {:si_unique_call 215} {:cexpr "tmp___2"} boogie_si_record_i64($i197);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $i198 := $ne.i64($i197, 0);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    assume {:branchcond $i198} true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i198 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i200 := $and.i64($i28, 16);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    $i201 := $ne.i64($i200, 0);
    goto corral_source_split_1102;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i201 == 1);
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p205 := usb_ifnum_to_if($p26, $i99);
    assume {:verifier.code 0} true;
    $i203, $p204 := $i99, $p205;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i236, $i237, $p238, $p239 := $i99, $i203, $p204, $p0;
    goto $bb94;

  $bb84:
    assume $i201 == 1;
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} $p202 := usb_ifnum_to_if($p26, 0);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i203, $p204 := $sub.i32(0, 1), $p202;
    goto $bb86;

  $bb81:
    assume $i198 == 1;
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} __dynamic_dev_dbg.ref.ref.ref($p4, $p199, .str.10);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb26:
    assume $i97 == 1;
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    $p102, $p103, $p104, $i105, $i106, $i107 := $0.ref, $0.ref, $p96, $i95, $sub.i32(0, 1), 0;
    goto $bb29;

  $bb29:
    call $i108, $i109, $i110, $p111, $p118, $i119, $i120, $i121, $p122, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $p136, $i143, $i145, $p146, $i147, $i148, $p149, $i150, $i151, $p152, $p153, $p154, $p155, $p156, $p157, $i158, $i159, $i160, $p161, $p162, $i163, $i164, $i165, $i166, $i167, $p168, $p169, $i170, $i171, $p138, $i139, $i140, $p141, $p142, $p112, $i113, $i114, $i115, $p116, $p117, $i172, $i173, $p174, $i175, $p102, $p103, $p104, $i105, $i106, $i107, $i176, $i177, $p178, $p179 := acm_probe_loop_$bb29($p0, $p3, $i108, $i109, $i110, $p111, $p118, $i119, $i120, $i121, $p122, $p123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $p136, $i143, $i145, $p146, $i147, $i148, $p149, $i150, $i151, $p152, $p153, $p154, $p155, $p156, $p157, $i158, $i159, $i160, $p161, $p162, $i163, $i164, $i165, $i166, $i167, $p168, $p169, $i170, $i171, $p138, $i139, $i140, $p141, $p142, $p112, $i113, $i114, $i115, $p116, $p117, $i172, $i173, $p174, $i175, $p102, $p103, $p104, $i105, $i106, $i107, $i176, $i177, $p178, $p179);
    goto $bb29_last;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.0, $p104);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i32($i108);
    call {:si_unique_call 201} {:cexpr "elength"} boogie_si_record_i32($i109);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i109, 0);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($p104, $mul.ref(1, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $i119 := $load.i8($M.0, $p118);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $i120 := $zext.i8.i32($i119);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 36);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($p104, $mul.ref(2, 1));
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_974;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i125, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i125, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i125, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $eq.i32($i125, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    assume !($i129 == 1);
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p152, .str.1);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p153, .str.2);
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p154, .str.3);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p155, .str.9);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $p157 := $bitcast.ref.ref($p156);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i158 := $load.i24($M.5, $p157);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $i159 := $and.i24($i158, $sub.i24(0, 262144));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $i160 := $or.i24($i159, 1188);
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p157, $i160);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p161, 0);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    $i163 := $load.i8($M.6, $p162);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    $i164 := $zext.i8.i64($i163);
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $i165 := $and.i64($i164, 1);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i166 := ldv__builtin_expect($i165, 0);
    call {:si_unique_call 209} {:cexpr "tmp___1"} boogie_si_record_i64($i166);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    $i167 := $ne.i64($i166, 0);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p138, $i139, $i140, $p141, $p142 := $p104, $i107, $i106, $p103, $p102;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $p112, $i113, $i114, $i115, $p116, $p117 := $p138, $i139, $i140, $i109, $p141, $p142;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $i172 := $sub.i32($i105, $i115);
    call {:si_unique_call 203} {:cexpr "buflen"} boogie_si_record_i32($i172);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i173 := $zext.i32.i64($i115);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($p112, $mul.ref($i173, 1));
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i175 := $sgt.i32($i172, 0);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i176, $i177, $p178, $p179 := $i113, $i114, $p116, $p117;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i98, $i99, $p100, $p101 := $i176, $i177, $p178, $p179;
    goto $bb28;

  $bb74:
    assume $i175 == 1;
    assume {:verifier.code 0} true;
    $p102, $p103, $p104, $i105, $i106, $i107 := $p117, $p116, $p174, $i172, $i114, $i113;
    goto $bb74_dummy;

  $bb71:
    assume $i167 == 1;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($p104, $mul.ref(2, 1));
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.0, $p169);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __dynamic_dev_dbg.ref.ref.ref.i32.i32($p3, $p168, .str.9, $i171, $i109);
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb45:
    assume $i129 == 1;
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    $i143 := $ule.i32($i109, 5);
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $p138, $i139, $i140, $p141, $p142 := $p104, $i107, $i106, $p104, $p102;
    goto $bb60;

  $bb61:
    assume $i143 == 1;
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $p112, $i113, $i114, $i115, $p116, $p117 := $p104, $i107, $i106, $i109, $p103, $p102;
    goto $bb33;

  $bb43:
    assume $i128 == 1;
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    $i133 := $ule.i32($i109, 4);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p102);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $p138, $i139, $i140, $p141, $p142 := $p104, $i107, $i106, $p103, $p104;
    goto $bb60;

  $bb57:
    assume $i135 == 1;
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} dev_err.ref.ref($p136, .str.8);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p112, $i113, $i114, $i115, $p116, $p117 := $p104, $i107, $i106, $i109, $p103, $p102;
    goto $bb33;

  $bb54:
    assume $i133 == 1;
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p112, $i113, $i114, $i115, $p116, $p117 := $p104, $i107, $i106, $i109, $p103, $p102;
    goto $bb33;

  $bb41:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i130 := $eq.i32($i125, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i130 == 1);
    goto $bb47;

  $bb48:
    assume $i130 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $i145 := $ule.i32($i109, 3);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($p104, $mul.ref(3, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.0, $p146);
    call {:si_unique_call 206} {:cexpr "ac_management_function"} boogie_si_record_i8($i147);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p138, $i139, $i140, $p141, $p142 := $p104, $i147, $i106, $p103, $p102;
    goto $bb60;

  $bb64:
    assume $i145 == 1;
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $p112, $i113, $i114, $i115, $p116, $p117 := $p104, $i107, $i106, $i109, $p103, $p102;
    goto $bb33;

  $bb39:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i125, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i131 == 1);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    $i148 := $ule.i32($i109, 4);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($p104, $mul.ref(4, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.0, $p149);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i32($i150);
    call {:si_unique_call 207} {:cexpr "call_interface_num"} boogie_si_record_i32($i151);
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $p138, $i139, $i140, $p141, $p142 := $p104, $i107, $i151, $p103, $p102;
    goto $bb60;

  $bb67:
    assume $i148 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p112, $i113, $i114, $i115, $p116, $p117 := $p104, $i107, $i106, $i109, $p103, $p102;
    goto $bb33;

  $bb50:
    assume $i131 == 1;
    assume {:verifier.code 0} true;
    $i132 := $eq.i32($i125, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb47;

  $bb52:
    assume $i132 == 1;
    goto corral_source_split_988;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    $p138, $i139, $i140, $p141, $p142 := $p104, $i107, $i106, $p103, $p102;
    goto $bb60;

  $bb35:
    assume $i121 == 1;
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} dev_err.ref.ref($p122, .str.7);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p112, $i113, $i114, $i115, $p116, $p117 := $p104, $i107, $i106, $i109, $p103, $p102;
    goto $bb33;

  $bb31:
    assume $i110 == 1;
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} dev_err.ref.ref($p111, .str.6);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    $p112, $i113, $i114, $i115, $p116, $p117 := $p104, $i107, $i106, 1, $p103, $p102;
    goto $bb33;

  $bb12:
    assume $i43 == 1;
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i48 := $p2i.ref.i64($p47);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} dev_err.ref.ref($p94, .str.5);
    goto corral_source_split_890;

  corral_source_split_890:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb14:
    assume $i49 == 1;
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb16;

  $bb17:
    assume $i56 == 1;
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb16;

  $bb19:
    assume $i64 == 1;
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_903;

  corral_source_split_903:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p65, .str.1);
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p66, .str.2);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p67, .str.3);
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str.4);
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.5, $p70);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 1130);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p70, $i73);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p74, 0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.6, $p75);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 198} {:cexpr "tmp___0"} boogie_si_record_i64($i79);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 72)), $mul.ref(56, 1));
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    call {:si_unique_call 200} {:cexpr "buflen"} boogie_si_record_i32($i87);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p89, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p91, $mul.ref(0, 72)), $mul.ref(48, 1));
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i95, $p96 := $i87, $p93;
    goto $bb25;

  $bb21:
    assume $i80 == 1;
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} __dynamic_dev_dbg.ref.ref.ref($p2, $p81, .str.4);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb9:
    assume $i41 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} dev_err.ref.ref($p42, .str);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 22);
    goto $bb3;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p34 := usb_ifnum_to_if($p26, 1);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} $p35 := usb_ifnum_to_if($p26, 0);
    goto corral_source_split_853;

  corral_source_split_853:
    assume {:verifier.code 0} true;
    $i36, $p37, $p38, $p39 := 0, $p34, $p35, $0.ref;
    goto $bb7;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i30 := $sub.i32(0, 19);
    goto $bb3;

  $bb264_dummy:
    assume false;
    return;

  $bb262_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1952;

  $bb226_dummy:
    assume false;
    return;

  $bb217_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  $bb214_dummy:
    assume false;
    return;

  $bb202_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1615;

  $bb126_dummy:
    assume false;
    return;

  $bb115_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1229;

  $bb74_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_948;
}



const acm_disconnect: ref;

axiom acm_disconnect == $sub.ref(0, 191545);

procedure acm_disconnect($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.18, $M.20, $M.22, $M.24;



implementation acm_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $i62: i64;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i61: i32;
  var $p69: ref;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $i80: i1;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i1;
  var $p86: ref;
  var $p87: ref;
  var $p89: ref;
  var $p90: ref;
  var $p88: ref;
  var $p91: ref;
  var $p94: ref;
  var $p95: ref;
  var $p98: ref;
  var $p99: ref;
  var $p102: ref;
  var $p103: ref;
  var $p106: ref;
  var $p107: ref;
  var $p110: ref;
  var $p111: ref;
  var $p114: ref;
  var $p115: ref;
  var $p118: ref;
  var $p119: ref;
  var $p122: ref;
  var $p123: ref;
  var $p126: ref;
  var $p127: ref;
  var $p130: ref;
  var $p131: ref;
  var $p134: ref;
  var $p135: ref;
  var $p138: ref;
  var $p139: ref;
  var $p142: ref;
  var $p143: ref;
  var $p146: ref;
  var $p147: ref;
  var $p150: ref;
  var $p151: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} $p2 := usb_get_intfdata($p0);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} $p4 := interface_to_usbdev($p0);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.1);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.49);
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.3);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 1527);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 368} {:cexpr "tmp___1"} boogie_si_record_i64($i19);
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p3);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2680, 1));
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} mutex_lock_nested($p24, 0);
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2840, 1));
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1088, 1));
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3032, 1));
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} __wake_up($p36, 3, 0, $0.ref);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} device_remove_file($p39, dev_attr_bmCapabilities);
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} usb_set_intfdata($p41, $0.ref);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(16, 1));
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} usb_set_intfdata($p43, $0.ref);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2680, 1));
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    call {:si_unique_call 377} mutex_unlock($p44);
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $p46 := tty_port_tty_get($p45);
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} stop_data_traffic($p3);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $p49 := $M.16;
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3132, 1));
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} tty_unregister_device($p49, $i51);
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 383} usb_free_urb($p53);
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} usb_free_urb($p57);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} usb_free_urb($p95);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} usb_free_urb($p99);
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.0, $p102);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} usb_free_urb($p103);
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.0, $p106);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} usb_free_urb($p107);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} usb_free_urb($p111);
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $p115 := $load.ref($M.0, $p114);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 397} usb_free_urb($p115);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_2191;

  corral_source_split_2191:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} usb_free_urb($p119);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 399} usb_free_urb($p123);
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $p127 := $load.ref($M.0, $p126);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 400} usb_free_urb($p127);
    goto corral_source_split_2201;

  corral_source_split_2201:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 401} usb_free_urb($p131);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} usb_free_urb($p135);
    goto corral_source_split_2209;

  corral_source_split_2209:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} usb_free_urb($p139);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_2215;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p143 := $load.ref($M.0, $p142);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} usb_free_urb($p143);
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $p147 := $load.ref($M.0, $p146);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 405} usb_free_urb($p147);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} usb_free_urb($p151);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2520, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i60 := $sgt.i32($i59, 0);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    assume {:branchcond $i60} true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} acm_write_buffers_free($p3);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3128, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i70 := $load.i32($M.0, $p69);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i71 := $zext.i32.i64($i70);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1072, 1));
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1080, 1));
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, $p74);
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} usb_free_coherent($p4, $i71, $p73, $i75);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} acm_read_buffers_free($p3);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p3);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p76, $mul.ref(3140, 1));
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 0);
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 392} tty_port_put($p91);
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i80 == 1;
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i83 := $p2i.ref.i64($p82);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i84 := $p2i.ref.i64($p0);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i85 := $eq.i64($i83, $i84);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i85} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i85 == 1);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p88 := $p90;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} usb_driver_release_interface(acm_driver, $p88);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb28:
    assume $i85 == 1;
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(16, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $p88 := $p87;
    goto $bb30;

  $bb18:
    assume $i60 == 1;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb21;

  $bb21:
    call $i62, $p64, $p65, $i66, $i67, $i68, $i61 := acm_disconnect_loop_$bb21($p3, $p58, $i62, $p64, $p65, $i66, $i67, $i68, $i61);
    goto $bb21_last;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i62 := $sext.i32.i64($i61);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref($i62, 8));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} usb_free_urb($p65);
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i61, 1);
    call {:si_unique_call 387} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p58);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $i68 := $sgt.i32($i67, $i66);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i68 == 1);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb23:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i61 := $i66;
    goto $bb23_dummy;

  $bb11:
    assume $i48 == 1;
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} tty_vhangup($p46);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} tty_kref_put($p46);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 371} device_remove_file($p32, dev_attr_wCountryCodes);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} device_remove_file($p35, dev_attr_iCountryCodeRelDate);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p21, .str.50, .str.49);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb23_dummy:
    assume false;
    return;

  $bb21_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;
}



const acm_suspend: ref;

axiom acm_suspend == $sub.ref(0, 192577);

procedure acm_suspend($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.17, $M.0, $M.8, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.18, $M.20, $M.22, $M.24;



implementation acm_suspend($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i1;
  var $i15: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    assume {:verifier.code 0} true;
    $M.17 := $store.i32($M.17, $p3, $i1);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 408} $p4 := usb_get_intfdata($p0);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} spin_lock_irq($p6);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.17, $p7);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1024);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2234;

  corral_source_split_2234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(3144, 1));
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    call {:si_unique_call 411} {:cexpr "tmp___0"} boogie_si_record_i32($i17);
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(3144, 1));
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(3144, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} spin_unlock_irq($p22);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i17, 0);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 413} stop_data_traffic($p5);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb5;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2604, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} spin_unlock_irq($p14);
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32(0, 16);
    goto $bb5;
}



const acm_resume: ref;

axiom acm_resume == $sub.ref(0, 193609);

procedure acm_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, assertsPassed, $CurrAddr;



implementation acm_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i11: i32;
  var $p34: ref;
  var vslice_dummy_var_46: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} spin_lock_irq($p3);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(3144, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32($i5, 1);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(3144, 1));
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(3144, 1));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(680, 1));
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} $i14 := constant_test_bit(31, $p13);
    call {:si_unique_call 418} {:cexpr "tmp___0"} boogie_si_record_i32($i14);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i11 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} spin_unlock_irq($p34);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $i18 := ldv_usb_submit_urb_39($p17, 32);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 420} {:cexpr "rv"} boogie_si_record_i32($i18);
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(3152, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $p20 := usb_get_from_anchor($p19);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p20);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    $i22 := $eq.i64($i21, 0);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb9;

  $bb9:
    assume !($i22 == 1);
    goto corral_source_split_2295;

  corral_source_split_2295:
    assume {:verifier.code 0} true;
    $p23 := $p20;
    goto $bb10;

  $bb10:
    call $p23, $p24, $p25, $p26, $p28, $i29, $i30, vslice_dummy_var_46 := acm_resume_loop_$bb10($p2, $p19, $p23, $p24, $p25, $p26, $p28, $i29, $i30, vslice_dummy_var_46);
    goto $bb10_last;

  $bb13:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} vslice_dummy_var_46 := acm_start_wb($p2, $p26);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $p28 := usb_get_from_anchor($p19);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb14;

  $bb14:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $p23 := $p28;
    goto $bb14_dummy;

  $bb11:
    assume $i30 == 1;
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i18, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} $i32 := acm_submit_read_urbs($p2, 32);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 425} {:cexpr "rv"} boogie_si_record_i32($i32);
    goto corral_source_split_2311;

  corral_source_split_2311:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb18;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i31 == 1;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    $i11 := $i18;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb8;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;
}



const acm_reset_resume: ref;

axiom acm_reset_resume == $sub.ref(0, 194641);

procedure acm_reset_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, assertsPassed, $CurrAddr;



implementation acm_reset_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 426} $p1 := usb_get_intfdata($p0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(680, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $i5 := constant_test_bit(31, $p4);
    call {:si_unique_call 428} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} $i8 := acm_resume($p0);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    call {:si_unique_call 431} {:cexpr "tmp___1"} boogie_si_record_i32($i8);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} tty_port_tty_hangup($p7, 0);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 195673);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const tty_port_tty_hangup: ref;

axiom tty_port_tty_hangup == $sub.ref(0, 196705);

procedure tty_port_tty_hangup($p0: ref, $i1: i1);
  free requires assertsPassed;



implementation tty_port_tty_hangup($p0: ref, $i1: i1)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} {:cexpr "tty_port_tty_hangup:arg:arg1"} boogie_si_record_i1($i1);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_39: ref;

axiom ldv_usb_submit_urb_39 == $sub.ref(0, 197737);

procedure ldv_usb_submit_urb_39($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_39($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} {:cexpr "ldv_usb_submit_urb_39:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} ldv_check_alloc_flags($i1);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} $p2 := ldv_undef_ptr();
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;
}



const acm_start_wb: ref;

axiom acm_start_wb == $sub.ref(0, 198769);

procedure acm_start_wb($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation acm_start_wb($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2604, 1));
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, 1);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2604, 1));
    goto corral_source_split_2351;

  corral_source_split_2351:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, $i4);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p7);
    goto corral_source_split_2358;

  corral_source_split_2358:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p15, $i12);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i17);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p22);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} $i28 := ldv_usb_submit_urb_28($p27, 32);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 438} {:cexpr "rc"} boogie_si_record_i32($i28);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i28, 0);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i29 == 1;
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(16, 1));
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 439} dev_err.ref.ref.ref.i32($p32, .str.52, .str.53, $i28);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 440} acm_write_done($p0, $p1);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const ldv_usb_submit_urb_28: ref;

axiom ldv_usb_submit_urb_28 == $sub.ref(0, 199801);

procedure ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} {:cexpr "ldv_usb_submit_urb_28:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 442} ldv_check_alloc_flags($i1);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $p2 := ldv_undef_ptr();
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_67:
    assume !assertsPassed;
    return;
}



const acm_write_done: ref;

axiom acm_write_done == $sub.ref(0, 200833);

procedure acm_write_done($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation acm_write_done($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2604, 1));
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i4, 1);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2604, 1));
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, $i5);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} usb_autopm_put_interface_async($p8);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    return;
}



const stop_data_traffic: ref;

axiom stop_data_traffic == $sub.ref(0, 201865);

procedure stop_data_traffic($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.18, $M.20, $M.22, $M.24;



implementation stop_data_traffic($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i24;
  var $i9: i24;
  var $i10: i24;
  var $p11: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i1;
  var $i31: i64;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i30: i32;
  var $p38: ref;
  var $p42: ref;
  var $p43: ref;
  var $p46: ref;
  var $p47: ref;
  var $p50: ref;
  var $p51: ref;
  var $p54: ref;
  var $p55: ref;
  var $p58: ref;
  var $p59: ref;
  var $p62: ref;
  var $p63: ref;
  var $p66: ref;
  var $p67: ref;
  var $p70: ref;
  var $p71: ref;
  var $p74: ref;
  var $p75: ref;
  var $p78: ref;
  var $p79: ref;
  var $p82: ref;
  var $p83: ref;
  var $p86: ref;
  var $p87: ref;
  var $p90: ref;
  var $p91: ref;
  var $p94: ref;
  var $p95: ref;
  var $p98: ref;
  var $p99: ref;
  var vslice_dummy_var_47: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p2, .str.1);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, .str.51);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.3);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str.50);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $i8 := $load.i24($M.5, $p7);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i9 := $and.i24($i8, $sub.i24(0, 262144));
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $i10 := $or.i24($i9, 1509);
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p7, $i10);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p11, 0);
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.6, $p12);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i64($i13);
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i14, 1);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 447} {:cexpr "tmp"} boogie_si_record_i64($i16);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1064, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} usb_kill_urb($p22);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} usb_kill_urb($p26);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(1, 40)), $mul.ref(24, 1));
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} usb_kill_urb($p43);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(2, 40)), $mul.ref(24, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} usb_kill_urb($p47);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(3, 40)), $mul.ref(24, 1));
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 456} usb_kill_urb($p51);
    goto corral_source_split_2476;

  corral_source_split_2476:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(4, 40)), $mul.ref(24, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_2479;

  corral_source_split_2479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} usb_kill_urb($p55);
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(5, 40)), $mul.ref(24, 1));
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 458} usb_kill_urb($p59);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(6, 40)), $mul.ref(24, 1));
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} usb_kill_urb($p63);
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(7, 40)), $mul.ref(24, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} usb_kill_urb($p67);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(8, 40)), $mul.ref(24, 1));
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} usb_kill_urb($p71);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(9, 40)), $mul.ref(24, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} usb_kill_urb($p75);
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(10, 40)), $mul.ref(24, 1));
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} usb_kill_urb($p79);
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(11, 40)), $mul.ref(24, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} usb_kill_urb($p83);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(12, 40)), $mul.ref(24, 1));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} usb_kill_urb($p87);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(13, 40)), $mul.ref(24, 1));
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p91 := $load.ref($M.0, $p90);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} usb_kill_urb($p91);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(14, 40)), $mul.ref(24, 1));
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} usb_kill_urb($p95);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(15, 40)), $mul.ref(24, 1));
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} usb_kill_urb($p99);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2520, 1));
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i29 := $sgt.i32($i28, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2856, 1));
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} vslice_dummy_var_47 := ldv_cancel_work_sync_38($p38);
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i30 := 0;
    goto $bb11;

  $bb11:
    call $i31, $p33, $p34, $i35, $i36, $i37, $i30 := stop_data_traffic_loop_$bb11($p0, $p27, $i31, $p33, $p34, $i35, $i36, $i37, $i30);
    goto $bb11_last;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i30);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref($i31, 8));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} usb_kill_urb($p34);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i30, 1);
    call {:si_unique_call 453} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p27);
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $i37 := $sgt.i32($i36, $i35);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i37 == 1);
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i30 := $i35;
    goto $bb13_dummy;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p20, .str.50, .str.51);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;
}



const ldv_cancel_work_sync_38: ref;

axiom ldv_cancel_work_sync_38 == $sub.ref(0, 202897);

procedure ldv_cancel_work_sync_38($p0: ref) returns ($r: i1);
  free requires assertsPassed;
  modifies $M.18, $M.20, $M.22, $M.24;



implementation ldv_cancel_work_sync_38($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} $i1 := cancel_work_sync($p0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 470} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_2527;

  corral_source_split_2527:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 471} {:cexpr "ldv_func_res"} boogie_si_record_i8($i4);
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} disable_work_1($p0);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const cancel_work_sync: ref;

axiom cancel_work_sync == $sub.ref(0, 203929);

procedure cancel_work_sync($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation cancel_work_sync($p0: ref) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 1} true;
    call {:si_unique_call 473} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 474} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_work_1: ref;

axiom disable_work_1 == $sub.ref(0, 204961);

procedure disable_work_1($p0: ref);
  free requires assertsPassed;
  modifies $M.18, $M.20, $M.22, $M.24;



implementation disable_work_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i1 := $M.18;
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 3);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i2 == 1);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $i3 := $M.18;
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, 2);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $M.20;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i9, 3);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i10 == 1);
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $i11 := $M.20;
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i17 := $M.22;
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 3);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i18 == 1);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    $i19 := $M.22;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 2);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i25 := $M.24;
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i26} true;
    goto $bb28, $bb30;

  $bb30:
    assume !($i26 == 1);
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i27 := $M.24;
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 2);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    return;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p29 := $M.25;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p29);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p0);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i32 := $eq.i64($i30, $i31);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    assume {:branchcond $i32} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb33;

  $bb34:
    assume $i32 == 1;
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 478} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb29;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p21 := $M.23;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb24;

  $bb25:
    assume $i24 == 1;
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 477} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb20;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p13 := $M.21;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i14, $i15);
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb15;

  $bb16:
    assume $i16 == 1;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 476} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb11;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $M.19;
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p0);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i6, $i7);
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb6;

  $bb7:
    assume $i8 == 1;
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 475} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb2;
}



const interface_to_usbdev: ref;

axiom interface_to_usbdev == $sub.ref(0, 205993);

procedure interface_to_usbdev($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation interface_to_usbdev($p0: ref) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($sub.ref(0, 144), 2040));
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const device_remove_file: ref;

axiom device_remove_file == $sub.ref(0, 207025);

procedure device_remove_file($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation device_remove_file($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 208057);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 480} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_intfdata: ref;

axiom usb_set_intfdata == $sub.ref(0, 209089);

procedure usb_set_intfdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_intfdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} dev_set_drvdata($p2, $p1);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 210121);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p1 := external_alloc();
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_vhangup: ref;

axiom tty_vhangup == $sub.ref(0, 211153);

procedure tty_vhangup($p0: ref);
  free requires assertsPassed;



implementation tty_vhangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    return;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 212185);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    return;
}



const tty_unregister_device: ref;

axiom tty_unregister_device == $sub.ref(0, 213217);

procedure tty_unregister_device($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation tty_unregister_device($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} {:cexpr "tty_unregister_device:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 214249);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    return;
}



const acm_write_buffers_free: ref;

axiom acm_write_buffers_free == $sub.ref(0, 215281);

procedure acm_write_buffers_free($p0: ref);
  free requires assertsPassed;



implementation acm_write_buffers_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p14: ref;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p32: ref;
  var $i33: i32;
  var $i34: i64;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $p41: ref;
  var $i42: i32;
  var $i43: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $p59: ref;
  var $i60: i32;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $p68: ref;
  var $i69: i32;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i64;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $i92: i64;
  var $i93: i64;
  var $p95: ref;
  var $i96: i32;
  var $i97: i64;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i64;
  var $i102: i64;
  var $p104: ref;
  var $i105: i32;
  var $i106: i64;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i64;
  var $i111: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $p122: ref;
  var $i123: i32;
  var $i124: i64;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $i128: i64;
  var $i129: i64;
  var $p131: ref;
  var $i132: i32;
  var $i133: i64;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i64;
  var $i138: i64;
  var $p140: ref;
  var $i141: i32;
  var $i142: i64;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1));
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    $i8 := $zext.i32.i64($i7);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} usb_free_coherent($p3, $i8, $p10, $i12);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(1, 40)), $mul.ref(0, 1));
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p5, $mul.ref(1, 40)), $mul.ref(8, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} usb_free_coherent($p3, $i16, $p18, $i20);
    $i21 := $add.i64(1, 1);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    $i25 := $zext.i32.i64($i24);
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref($i21, 40)), $mul.ref(0, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p5, $mul.ref($i21, 40)), $mul.ref(8, 1));
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} usb_free_coherent($p3, $i25, $p27, $i29);
    $i30 := $add.i64($i21, 1);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $i34 := $zext.i32.i64($i33);
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref($i30, 40)), $mul.ref(0, 1));
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p36 := $load.ref($M.0, $p35);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref($i30, 40)), $mul.ref(8, 1));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, $p37);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} usb_free_coherent($p3, $i34, $p36, $i38);
    $i39 := $add.i64($i30, 1);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i43 := $zext.i32.i64($i42);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref($i39, 40)), $mul.ref(0, 1));
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref($i39, 40)), $mul.ref(8, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i47 := $load.i64($M.0, $p46);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} usb_free_coherent($p3, $i43, $p45, $i47);
    $i48 := $add.i64($i39, 1);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i52 := $zext.i32.i64($i51);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p5, $mul.ref($i48, 40)), $mul.ref(0, 1));
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref($i48, 40)), $mul.ref(8, 1));
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $i56 := $load.i64($M.0, $p55);
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} usb_free_coherent($p3, $i52, $p54, $i56);
    $i57 := $add.i64($i48, 1);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $i60 := $load.i32($M.0, $p59);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i61 := $zext.i32.i64($i60);
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p5, $mul.ref($i57, 40)), $mul.ref(0, 1));
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p5, $mul.ref($i57, 40)), $mul.ref(8, 1));
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    $i65 := $load.i64($M.0, $p64);
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} usb_free_coherent($p3, $i61, $p63, $i65);
    $i66 := $add.i64($i57, 1);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i70 := $zext.i32.i64($i69);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p5, $mul.ref($i66, 40)), $mul.ref(0, 1));
    goto corral_source_split_2703;

  corral_source_split_2703:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref($i66, 40)), $mul.ref(8, 1));
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $i74 := $load.i64($M.0, $p73);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} usb_free_coherent($p3, $i70, $p72, $i74);
    $i75 := $add.i64($i66, 1);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i79 := $zext.i32.i64($i78);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref($i75, 40)), $mul.ref(0, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref($i75, 40)), $mul.ref(8, 1));
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i83 := $load.i64($M.0, $p82);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} usb_free_coherent($p3, $i79, $p81, $i83);
    $i84 := $add.i64($i75, 1);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i88 := $zext.i32.i64($i87);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref($i84, 40)), $mul.ref(0, 1));
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref($i84, 40)), $mul.ref(8, 1));
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i92 := $load.i64($M.0, $p91);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} usb_free_coherent($p3, $i88, $p90, $i92);
    $i93 := $add.i64($i84, 1);
    goto corral_source_split_2727;

  corral_source_split_2727:
    assume {:verifier.code 0} true;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i96 := $load.i32($M.0, $p95);
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $i97 := $zext.i32.i64($i96);
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref($i93, 40)), $mul.ref(0, 1));
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $p99 := $load.ref($M.0, $p98);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref($i93, 40)), $mul.ref(8, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i101 := $load.i64($M.0, $p100);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} usb_free_coherent($p3, $i97, $p99, $i101);
    $i102 := $add.i64($i93, 1);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i105 := $load.i32($M.0, $p104);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i106 := $zext.i32.i64($i105);
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref($i102, 40)), $mul.ref(0, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref($i102, 40)), $mul.ref(8, 1));
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i110 := $load.i64($M.0, $p109);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} usb_free_coherent($p3, $i106, $p108, $i110);
    $i111 := $add.i64($i102, 1);
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i115 := $zext.i32.i64($i114);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref($i111, 40)), $mul.ref(0, 1));
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p5, $mul.ref($i111, 40)), $mul.ref(8, 1));
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, $p118);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} usb_free_coherent($p3, $i115, $p117, $i119);
    $i120 := $add.i64($i111, 1);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.0, $p122);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i124 := $zext.i32.i64($i123);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p5, $mul.ref($i120, 40)), $mul.ref(0, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $p126 := $load.ref($M.0, $p125);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p5, $mul.ref($i120, 40)), $mul.ref(8, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.0, $p127);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} usb_free_coherent($p3, $i124, $p126, $i128);
    $i129 := $add.i64($i120, 1);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i133 := $zext.i32.i64($i132);
    goto corral_source_split_2772;

  corral_source_split_2772:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p5, $mul.ref($i129, 40)), $mul.ref(0, 1));
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p5, $mul.ref($i129, 40)), $mul.ref(8, 1));
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i137 := $load.i64($M.0, $p136);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} usb_free_coherent($p3, $i133, $p135, $i137);
    $i138 := $add.i64($i129, 1);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $i141 := $load.i32($M.0, $p140);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $i142 := $zext.i32.i64($i141);
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref($i138, 40)), $mul.ref(0, 1));
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p144 := $load.ref($M.0, $p143);
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p5, $mul.ref($i138, 40)), $mul.ref(8, 1));
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i146 := $load.i64($M.0, $p145);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} usb_free_coherent($p3, $i142, $p144, $i146);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_coherent: ref;

axiom usb_free_coherent == $sub.ref(0, 216313);

procedure usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64);
  free requires assertsPassed;



implementation usb_free_coherent($p0: ref, $i1: i64, $p2: ref, $i3: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} {:cexpr "usb_free_coherent:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 502} {:cexpr "usb_free_coherent:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    return;
}



const acm_read_buffers_free: ref;

axiom acm_read_buffers_free == $sub.ref(0, 217345);

procedure acm_read_buffers_free($p0: ref);
  free requires assertsPassed;



implementation acm_read_buffers_free($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} $p3 := interface_to_usbdev($p2);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2520, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $i6 := $sgt.i32($i5, 0);
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb4;

  $bb4:
    call $p8, $i9, $i10, $i11, $p14, $p15, $i16, $p19, $i20, $i21, $i22, $i23, $i7 := acm_read_buffers_free_loop_$bb4($p0, $p3, $p4, $p8, $i9, $i10, $i11, $p14, $p15, $i16, $p19, $i20, $i21, $i22, $i23, $i7);
    goto $bb4_last;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3124, 1));
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i7);
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1880, 1)), $mul.ref($i11, 40)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i7);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1880, 1)), $mul.ref($i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $i20 := $load.i64($M.0, $p19);
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} usb_free_coherent($p3, $i10, $p15, $i20);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $i21 := $add.i32($i7, 1);
    call {:si_unique_call 505} {:cexpr "i"} boogie_si_record_i32($i21);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p4);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    $i23 := $sgt.i32($i22, $i21);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i7 := $i21;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;
}



const usb_driver_release_interface: ref;

axiom usb_driver_release_interface == $sub.ref(0, 218377);

procedure usb_driver_release_interface($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_driver_release_interface($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_put: ref;

axiom tty_port_put == $sub.ref(0, 219409);

procedure tty_port_put($p0: ref);
  free requires assertsPassed;



implementation tty_port_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 220441);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    return;
}



const usb_ifnum_to_if: ref;

axiom usb_ifnum_to_if == $sub.ref(0, 221473);

procedure usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation usb_ifnum_to_if($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 506} {:cexpr "usb_ifnum_to_if:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $p2 := external_alloc();
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 222505);

procedure dev_warn.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_warn.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_is_int_in: ref;

axiom usb_endpoint_is_int_in == $sub.ref(0, 223537);

procedure usb_endpoint_is_int_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 508} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 509} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 511} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 224569);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 513} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 515} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 225601);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 517} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 519} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const usb_interface_claimed: ref;

axiom usb_interface_claimed == $sub.ref(0, 226633);

procedure usb_interface_claimed($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_interface_claimed($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1568)), $mul.ref(48, 1)), $mul.ref(496, 1));
    goto corral_source_split_2875;

  corral_source_split_2875:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 227665);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_2882;

  corral_source_split_2882:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 228697);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 521} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} ldv_check_alloc_flags($i1);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $p2 := ldv_undef_ptr();
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;
}



const acm_alloc_minor: ref;

axiom acm_alloc_minor == $sub.ref(0, 229729);

procedure acm_alloc_minor($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acm_alloc_minor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2892;

  corral_source_split_2892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} mutex_lock_nested(acm_minors_lock, 0);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $i2 := idr_alloc(acm_minors, $p1, 0, 256, 208);
    call {:si_unique_call 526} {:cexpr "minor"} boogie_si_record_i32($i2);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} mutex_unlock(acm_minors_lock);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 230761);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __init_work: ref;

axiom __init_work == $sub.ref(0, 231793);

procedure __init_work($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __init_work($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} {:cexpr "__init_work:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    return;
}



const lockdep_init_map: ref;

axiom lockdep_init_map == $sub.ref(0, 232825);

procedure lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32);
  free requires assertsPassed;



implementation lockdep_init_map($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} {:cexpr "lockdep_init_map:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 233857);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    return;
}



const acm_softint: ref;

axiom acm_softint == $sub.ref(0, 234889);

procedure acm_softint($p0: ref);
  free requires assertsPassed;



implementation acm_softint($p0: ref)
{
  var $p1: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref($sub.ref(0, 2848), 3344)), $mul.ref(24, 1));
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} tty_port_tty_wakeup($p3);
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 235921);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 236953);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 237985);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    return;
}



const __mutex_init: ref;

axiom __mutex_init == $sub.ref(0, 239017);

procedure __mutex_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __mutex_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 240049);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const tty_port_init: ref;

axiom tty_port_init == $sub.ref(0, 241081);

procedure tty_port_init($p0: ref);
  free requires assertsPassed;



implementation tty_port_init($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    return;
}



const init_usb_anchor: ref;

axiom init_usb_anchor == $sub.ref(0, 242113);

procedure init_usb_anchor($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation init_usb_anchor($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_48: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 533} cmdloc_dummy_var_10 := $memset.i8(cmdloc_dummy_var_9, $p3, 0, 184, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(0, 1));
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} INIT_LIST_HEAD($p4);
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(16, 1));
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} __init_waitqueue_head($p5, .str.31, $p1);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} vslice_dummy_var_48 := spinlock_check($p6);
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 184)), $mul.ref(104, 1)), $mul.ref(0, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} __raw_spin_lock_init($p10, .str.32, $p2);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_coherent_33: ref;

axiom ldv_usb_alloc_coherent_33 == $sub.ref(0, 243145);

procedure ldv_usb_alloc_coherent_33($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_coherent_33($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} {:cexpr "ldv_usb_alloc_coherent_33:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 539} {:cexpr "ldv_usb_alloc_coherent_33:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} ldv_check_alloc_flags($i2);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p4 := ldv_undef_ptr();
    goto corral_source_split_2954;

  corral_source_split_2954:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_73:
    assume !assertsPassed;
    return;
}



const acm_write_buffers_alloc: ref;

axiom acm_write_buffers_alloc == $sub.ref(0, 244177);

procedure acm_write_buffers_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation acm_write_buffers_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i1;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i64;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p20: ref;
  var $i21: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i1;
  var $p3: ref;
  var $i4: i32;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1));
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    $p3, $i4 := $p1, 0;
    goto $bb1;

  $bb1:
    call $p5, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $i17, $p18, $i35, $p36, $i37, $p3, $i4 := acm_write_buffers_alloc_loop_$bb1($p0, $p5, $p6, $p7, $i8, $i9, $p10, $p11, $p12, $p13, $p14, $i15, $i16, $i17, $p18, $i35, $p36, $i37, $p3, $i4);
    goto $bb1_last;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i8);
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p11 := ldv_usb_alloc_coherent_32($p6, $i9, 208, $p10);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p11);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2972;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i17, $p18 := $i4, $p3;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i4, 1);
    call {:si_unique_call 545} {:cexpr "i"} boogie_si_record_i32($i35);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($p3, $mul.ref(1, 40));
    goto corral_source_split_3002;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    $i37 := $sle.i32($i35, 15);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i34 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;

  $bb15:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $p3, $i4 := $p36, $i35;
    goto $bb15_dummy;

  $bb3:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i17, 0);
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32(0, 12);
    goto $bb13;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $p20, $i21 := $p18, $i17;
    goto $bb8;

  $bb8:
    call $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $i32, $i33, $p20, $i21 := acm_write_buffers_alloc_loop_$bb8($p0, $i22, $p23, $p24, $p25, $p26, $i27, $i28, $p29, $p30, $p31, $i32, $i33, $p20, $i21);
    goto $bb8_last;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i21, 1);
    call {:si_unique_call 543} {:cexpr "i"} boogie_si_record_i32($i22);
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p20, $mul.ref($sub.ref(0, 1), 40));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i28 := $zext.i32.i64($i27);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(0, 1));
    goto corral_source_split_2990;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p20, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(8, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $i32 := $load.i64($M.0, $p31);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} usb_free_coherent($p25, $i28, $p30, $i32);
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i22, 0);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i33 == 1);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb10:
    assume $i33 == 1;
    assume {:verifier.code 0} true;
    $p20, $i21 := $p23, $i22;
    goto $bb10_dummy;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  $bb15_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2960;
}



const ldv_usb_alloc_urb_34: ref;

axiom ldv_usb_alloc_urb_34 == $sub.ref(0, 245209);

procedure ldv_usb_alloc_urb_34($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_34($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} {:cexpr "ldv_usb_alloc_urb_34:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 547} {:cexpr "ldv_usb_alloc_urb_34:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} ldv_check_alloc_flags($i1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    goto corral_source_split_3006;

  corral_source_split_3006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p2 := ldv_undef_ptr();
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_79:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_coherent_35: ref;

axiom ldv_usb_alloc_coherent_35 == $sub.ref(0, 246241);

procedure ldv_usb_alloc_coherent_35($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_coherent_35($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} {:cexpr "ldv_usb_alloc_coherent_35:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 551} {:cexpr "ldv_usb_alloc_coherent_35:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} ldv_check_alloc_flags($i2);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p4 := ldv_undef_ptr();
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_36: ref;

axiom ldv_usb_alloc_urb_36 == $sub.ref(0, 247273);

procedure ldv_usb_alloc_urb_36($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_36($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} {:cexpr "ldv_usb_alloc_urb_36:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 555} {:cexpr "ldv_usb_alloc_urb_36:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} ldv_check_alloc_flags($i1);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p2 := ldv_undef_ptr();
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;
}



const acm_read_bulk_callback: ref;

axiom acm_read_bulk_callback == $sub.ref(0, 248305);

procedure acm_read_bulk_callback($p0: ref);



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 249337);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 559} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 560} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 561} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i7, 1);
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 16);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 250369);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 563} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    return;
}



const __set_bit: ref;

axiom __set_bit == $sub.ref(0, 251401);

procedure __set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation __set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} {:cexpr "__set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 565} devirtbounce(0, $p1, $i0, $p1);
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_alloc_urb_37: ref;

axiom ldv_usb_alloc_urb_37 == $sub.ref(0, 252433);

procedure ldv_usb_alloc_urb_37($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_37($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} {:cexpr "ldv_usb_alloc_urb_37:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 567} {:cexpr "ldv_usb_alloc_urb_37:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} ldv_check_alloc_flags($i1);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p2 := ldv_undef_ptr();
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const acm_write_bulk: ref;

axiom acm_write_bulk == $sub.ref(0, 253465);

procedure acm_write_bulk($p0: ref);



const device_create_file: ref;

axiom device_create_file == $sub.ref(0, 254497);

procedure device_create_file($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_create_file($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 1} true;
    call {:si_unique_call 570} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 571} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const acm_ctrl_irq: ref;

axiom acm_ctrl_irq == $sub.ref(0, 255529);

procedure acm_ctrl_irq($p0: ref);



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 256561);

procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    return;
}



const usb_driver_claim_interface: ref;

axiom usb_driver_claim_interface == $sub.ref(0, 257593);

procedure usb_driver_claim_interface($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_driver_claim_interface($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 1} true;
    call {:si_unique_call 572} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 573} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_get_intf: ref;

axiom usb_get_intf == $sub.ref(0, 258625);

procedure usb_get_intf($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_intf($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $p1 := external_alloc();
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const tty_port_register_device: ref;

axiom tty_port_register_device == $sub.ref(0, 259657);

procedure tty_port_register_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_register_device($p0: ref, $p1: ref, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} {:cexpr "tty_port_register_device:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $p4 := external_alloc();
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 260689);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 577} $i1 := ldv_is_err($p0);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 578} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 261721);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 579} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 580} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_clear_halt: ref;

axiom usb_clear_halt == $sub.ref(0, 262753);

procedure usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_clear_halt($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 581} {:cexpr "usb_clear_halt:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 582} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 583} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 263785);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 264817);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_mark_last_busy: ref;

axiom usb_mark_last_busy == $sub.ref(0, 265849);

procedure usb_mark_last_busy($p0: ref);



const get_unaligned_le16: ref;

axiom get_unaligned_le16 == $sub.ref(0, 266881);

procedure get_unaligned_le16($p0: ref) returns ($r: i16);



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 267913);

procedure spin_lock($p0: ref);



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 268945);

procedure spin_unlock($p0: ref);



const ldv_usb_submit_urb_29: ref;

axiom ldv_usb_submit_urb_29 == $sub.ref(0, 269977);

procedure ldv_usb_submit_urb_29($p0: ref, $i1: i32) returns ($r: i32);



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 271009);

procedure ldv_spin_unlock_9($p0: ref);



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 272041);

procedure _raw_spin_unlock($p0: ref);



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 273073);

procedure ldv_spin_lock_5($p0: ref);



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 274105);

procedure _raw_spin_lock($p0: ref);



const __le16_to_cpup: ref;

axiom __le16_to_cpup == $sub.ref(0, 275137);

procedure __le16_to_cpup($p0: ref) returns ($r: i16);



const pm_runtime_mark_last_busy: ref;

axiom pm_runtime_mark_last_busy == $sub.ref(0, 276169);

procedure pm_runtime_mark_last_busy($p0: ref);



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 277201);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.8;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 585} ldv_spin_unlock();
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    return;
}



const schedule_work: ref;

axiom schedule_work == $sub.ref(0, 278233);

procedure schedule_work($p0: ref) returns ($r: i1);



const queue_work: ref;

axiom queue_work == $sub.ref(0, 279265);

procedure queue_work($p0: ref, $p1: ref) returns ($r: i1);



const ldv_queue_work_on_15: ref;

axiom ldv_queue_work_on_15 == $sub.ref(0, 280297);

procedure ldv_queue_work_on_15($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);



const queue_work_on: ref;

axiom queue_work_on == $sub.ref(0, 281329);

procedure queue_work_on($i0: i32, $p1: ref, $p2: ref) returns ($r: i1);



const activate_work_1: ref;

axiom activate_work_1 == $sub.ref(0, 282361);

procedure activate_work_1($p0: ref, $i1: i32);



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 283393);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 284425);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    return;
}



const acm_process_read_urb: ref;

axiom acm_process_read_urb == $sub.ref(0, 285457);

procedure acm_process_read_urb($p0: ref, $p1: ref);



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 286489);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 287521);

procedure tty_flip_buffer_push($p0: ref);



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 288553);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);



const ldv_usb_alloc_coherent_32: ref;

axiom ldv_usb_alloc_coherent_32 == $sub.ref(0, 289585);

procedure ldv_usb_alloc_coherent_32($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_coherent_32($p0: ref, $i1: i64, $i2: i32, $p3: ref) returns ($r: ref)
{
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} {:cexpr "ldv_usb_alloc_coherent_32:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    call {:si_unique_call 591} {:cexpr "ldv_usb_alloc_coherent_32:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} ldv_check_alloc_flags($i2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} $p4 := ldv_undef_ptr();
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  SeqInstr_91:
    assume !assertsPassed;
    return;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 290617);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 291649);

procedure tty_port_tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_port_tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    return;
}



const idr_alloc: ref;

axiom idr_alloc == $sub.ref(0, 292681);

procedure idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation idr_alloc($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 594} {:cexpr "idr_alloc:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 595} {:cexpr "idr_alloc:arg:arg3"} boogie_si_record_i32($i3);
    call {:si_unique_call 596} {:cexpr "idr_alloc:arg:arg4"} boogie_si_record_i32($i4);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 1} true;
    call {:si_unique_call 597} $i5 := __VERIFIER_nondet_int();
    call {:si_unique_call 598} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i5);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 293713);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 294745);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const acm_tty_install: ref;

axiom acm_tty_install == $sub.ref(0, 295777);

procedure acm_tty_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation acm_tty_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $p31: ref;
  var $i26: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p3, .str.1);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.64);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.3);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str.50);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.5, $p8);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 494);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p8, $i11);
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p12, 0);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.6, $p13);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 600} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 601} {:cexpr "tmp"} boogie_si_record_i64($i17);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(32, 1));
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} $p23 := acm_get_by_minor($i22);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $i27 := tty_standard_install($p0, $p1);
    call {:si_unique_call 605} {:cexpr "retval"} boogie_si_record_i32($i27);
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p30, $p23);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $r := $i26;
    return;

  $bb8:
    assume $i28 == 1;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p23, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} tty_port_put($p31);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i26 := $i27;
    goto $bb6;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $i26 := $sub.i32(0, 19);
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p20, .str.50, .str.64);
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_open: ref;

axiom acm_tty_open == $sub.ref(0, 296809);

procedure acm_tty_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3212;

  corral_source_split_3212:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.1);
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.58);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.3);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.50);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3221;

  corral_source_split_3221:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 517);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 609} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i25 := tty_port_open($p24, $p0, $p1);
    call {:si_unique_call 612} {:cexpr "tmp___0"} boogie_si_record_i32($i25);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(8, 1));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p23, .str.50, .str.58);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_close: ref;

axiom acm_tty_close == $sub.ref(0, 297841);

procedure acm_tty_close($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_close($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str.1);
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.57);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.3);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.50);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 670);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 615} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} tty_port_close($p25, $p0, $p1);
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 616} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p24, .str.50, .str.57);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_cleanup: ref;

axiom acm_tty_cleanup == $sub.ref(0, 298873);

procedure acm_tty_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 618} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.1);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.55);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.3);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 656);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 620} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} tty_port_put($p24);
    goto corral_source_split_3314;

  corral_source_split_3314:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p23, .str.50, .str.55);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_write: ref;

axiom acm_tty_write == $sub.ref(0, 299905);

procedure acm_tty_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $M.0, assertsPassed;



implementation acm_tty_write($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $i46: i1;
  var $i7: i32;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} {:cexpr "acm_tty_write:arg:count"} boogie_si_record_i32($i2);
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 0);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 624} ldv_spin_lock();
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i8 := acm_wb_alloc($p5);
    call {:si_unique_call 626} {:cexpr "wbn"} boogie_si_record_i32($i8);
    goto corral_source_split_3327;

  corral_source_split_3327:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(1104, 1));
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i8);
    goto corral_source_split_3336;

  corral_source_split_3336:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p12, $mul.ref($i13, 40));
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i17, 0);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i23 := $ult.i32($i22, $i2);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i23 == 1);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $i26 := $i2;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(0, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i29 := $sext.i32.i64($i26);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 629} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p28, $p1, $i29, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(16, 1));
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p30, $i26);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    call {:si_unique_call 630} $i33 := usb_autopm_get_interface_async($p32);
    call {:si_unique_call 631} {:cexpr "stat"} boogie_si_record_i32($i33);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(3144, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i39} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $i44 := acm_start_wb($p5, $p14);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 636} {:cexpr "stat"} boogie_si_record_i32($i44);
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} spin_unlock_irqrestore($p45, $u0);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i44, 0);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    assume {:branchcond $i46} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb20:
    assume $i46 == 1;
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    $i7 := $i44;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i39 == 1;
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(24, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(3152, 1));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 633} usb_anchor_urb($p41, $p42);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} spin_unlock_irqrestore($p43, $u0);
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $i7 := $i26;
    goto $bb3;

  $bb14:
    assume $i34 == 1;
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(20, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 0);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} spin_unlock_irqrestore($p36, $u0);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $i7 := $i33;
    goto $bb3;

  $bb11:
    assume $i23 == 1;
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_3354;

  corral_source_split_3354:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb13;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref($i13, 40)), $mul.ref(20, 1));
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} spin_unlock_irqrestore($p20, $u0);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 19);
    goto $bb3;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} spin_unlock_irqrestore($p10, $u0);
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const acm_tty_write_room: ref;

axiom acm_tty_write_room == $sub.ref(0, 300937);

procedure acm_tty_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8;



implementation acm_tty_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} $i4 := acm_wb_is_avail($p3);
    call {:si_unique_call 639} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb3;
}



const acm_tty_chars_in_buffer: ref;

axiom acm_tty_chars_in_buffer == $sub.ref(0, 301969);

procedure acm_tty_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8;



implementation acm_tty_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i1;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2840, 1));
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i8.i1($i5);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 640} $i8 := acm_wb_is_avail($p3);
    call {:si_unique_call 641} {:cexpr "tmp"} boogie_si_record_i32($i8);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i9 := $sub.i32(16, $i8);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i12 := $mul.i32($i9, $i11);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i7 := $i12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;
}



const acm_tty_ioctl: ref;

axiom acm_tty_ioctl == $sub.ref(0, 303001);

procedure acm_tty_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.28, $M.29, $M.30, $M.31, $M.26, $M.32, $M.8, $CurrAddr;



implementation acm_tty_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} {:cexpr "acm_tty_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 643} {:cexpr "acm_tty_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 21596);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 21597);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 21597);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 515);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $p24 := $i2p.i64.ref($i2);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 646} $i25 := get_serial_usage($p5, $p24);
    call {:si_unique_call 647} {:cexpr "rv"} boogie_si_record_i32($i25);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    $i14 := $i25;
    goto $bb15;

  $bb4:
    assume $i7 == 1;
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 644} $i19 := usb_autopm_get_interface($p18);
    call {:si_unique_call 645} {:cexpr "rv"} boogie_si_record_i32($i19);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 0);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $i21 := wait_serial_change($p5, $i2);
    call {:si_unique_call 653} {:cexpr "rv"} boogie_si_record_i32($i21);
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 654} usb_autopm_put_interface($p23);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $i14 := $i21;
    goto $bb15;

  $bb16:
    assume $i20 == 1;
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 5);
    goto $bb15;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 21535);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $p15 := $i2p.i64.ref($i2);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 648} $i16 := set_serial_info($p5, $p15);
    call {:si_unique_call 649} {:cexpr "rv"} boogie_si_record_i32($i16);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb15;

  $bb9:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i1, 21534);
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb8;

  $bb13:
    assume $i11 == 1;
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p12 := $i2p.i64.ref($i2);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $i13 := get_serial_info($p5, $p12);
    call {:si_unique_call 651} {:cexpr "rv"} boogie_si_record_i32($i13);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb15;
}



const acm_tty_throttle: ref;

axiom acm_tty_throttle == $sub.ref(0, 304033);

procedure acm_tty_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8;



implementation acm_tty_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} spin_lock_irq($p4);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3148, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $i7 := $and.i8($i6, $sub.i8(0, 9));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $i8 := $or.i8($i7, 8);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, $i8);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} spin_unlock_irq($p9);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    return;
}



const acm_tty_unthrottle: ref;

axiom acm_tty_unthrottle == $sub.ref(0, 305065);

procedure acm_tty_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr, assertsPassed;



implementation acm_tty_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i8;
  var $i7: i8;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $i11: i8;
  var $i12: i8;
  var $p13: ref;
  var $i14: i8;
  var $i15: i8;
  var $p16: ref;
  var $i17: i1;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} spin_lock_irq($p4);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3148, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i8($i6, 2);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i8 := $and.i8($i7, 1);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 658} {:cexpr "was_throttled"} boogie_si_record_i32($i9);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3148, 1));
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    $i12 := $and.i8($i11, $sub.i8(0, 5));
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p10, $i12);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(3148, 1));
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.0, $p13);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i15 := $and.i8($i14, $sub.i8(0, 9));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, $i15);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} spin_unlock_irq($p16);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i9, 0);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i17 == 1;
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} vslice_dummy_var_49 := acm_submit_read_urbs($p3, 208);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_97:
    assume !assertsPassed;
    return;
}



const acm_tty_hangup: ref;

axiom acm_tty_hangup == $sub.ref(0, 306097);

procedure acm_tty_hangup($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_hangup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str.1);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.56);
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.3);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.50);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3513;

  corral_source_split_3513:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 663);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 663} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} tty_port_hangup($p24);
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p4, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p23, .str.50, .str.56);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const acm_tty_break_ctl: ref;

axiom acm_tty_break_ctl == $sub.ref(0, 307129);

procedure acm_tty_break_ctl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_break_ctl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i24;
  var $i17: i24;
  var $i18: i24;
  var $p19: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 667} {:cexpr "acm_tty_break_ctl:arg:state"} boogie_si_record_i32($i1);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i1, 0);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i7 := (if $i6 == 1 then 65535 else 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} $i8 := acm_ctrl_msg($p5, 35, $i7, $0.ref, 0);
    call {:si_unique_call 669} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i8, 0);
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p10, .str.1);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.59);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.3);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str.60);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i16 := $load.i24($M.5, $p15);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $i17 := $and.i24($i16, $sub.i24(0, 262144));
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $i18 := $or.i24($i17, 785);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p15, $i18);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p19, 0);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.6, $p20);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i64($i21);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i23 := $and.i64($i22, 1);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 671} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i25 == 1;
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(8, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p28, .str.60, .str.59);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const acm_tty_tiocmget: ref;

axiom acm_tty_tiocmget == $sub.ref(0, 308161);

procedure acm_tty_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation acm_tty_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2940, 1));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 1);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 2 else 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2940, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 2);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 4 else 0);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i8, $i13);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2936, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 2);
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i19 := (if $i18 == 1 then 256 else 0);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i20 := $or.i32($i14, $i19);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2936, 1));
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 8);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 128 else 0);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i20, $i25);
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 3344)), $mul.ref(2936, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $i28 := $load.i32($M.0, $p27);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i31 := (if $i30 == 1 then 64 else 0);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i32 := $or.i32($i26, $i31);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    $i33 := $or.i32($i32, 32);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $r := $i33;
    return;
}



const acm_tty_tiocmset: ref;

axiom acm_tty_tiocmset == $sub.ref(0, 309193);

procedure acm_tty_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation acm_tty_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i28: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} {:cexpr "acm_tty_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 674} {:cexpr "acm_tty_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2940, 1));
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    $i7 := $load.i32($M.0, $p6);
    call {:si_unique_call 675} {:cexpr "newctrl"} boogie_si_record_i32($i7);
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i1, 2);
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i1, 4);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $i13 := (if $i12 == 1 then 2 else 0);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i10, $i13);
    call {:si_unique_call 676} {:cexpr "set"} boogie_si_record_i32($i14);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i2, 2);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i2, 4);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i20 := (if $i19 == 1 then 2 else 0);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i17, $i20);
    call {:si_unique_call 677} {:cexpr "clear"} boogie_si_record_i32($i21);
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $i22 := $xor.i32($i21, $sub.i32(0, 1));
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, $i7);
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i23, $i14);
    call {:si_unique_call 678} {:cexpr "newctrl"} boogie_si_record_i32($i24);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2940, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $i24);
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 3344)), $mul.ref(2940, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i24);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 679} $i30 := acm_set_control($p5, $i24);
    call {:si_unique_call 680} {:cexpr "tmp___0"} boogie_si_record_i32($i30);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i28 := $i30;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $r := $i28;
    return;

  $bb1:
    assume $i27 == 1;
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i28 := 0;
    goto $bb3;
}



const tty_port_hangup: ref;

axiom tty_port_hangup == $sub.ref(0, 310225);

procedure tty_port_hangup($p0: ref);
  free requires assertsPassed;



implementation tty_port_hangup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    return;
}



const get_serial_info: ref;

axiom get_serial_info == $sub.ref(0, 311257);

procedure get_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation get_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $p10: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $p20: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i32;
  var $i32: i16;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $i5: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    call {:si_unique_call 682} cmdloc_dummy_var_15 := $memset.i8(cmdloc_dummy_var_14, $p6, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_15;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_3657;

  corral_source_split_3657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 8192);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i9);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2844, 1)), $mul.ref(0, 1));
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(1024, 1));
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $i18 := $udiv.i32($i17, 10);
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i16($i18);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p20, $i19);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(1028, 1));
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p22);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 65535);
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i24 == 1);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i31 := 65535;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i32 := $trunc.i32.i16($i31);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p33, $i32);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p2);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i36 := copy_to_user($p34, $p35, 72);
    call {:si_unique_call 684} {:cexpr "tmp___0"} boogie_si_record_i64($i36);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb5:
    assume $i24 == 1;
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(1028, 1));
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $i28 := $udiv.i32($i27, 10);
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i32($i29);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i31 := $i30;
    goto $bb7;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 22);
    goto $bb3;
}



const set_serial_info: ref;

axiom set_serial_info == $sub.ref(0, 312289);

procedure set_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation set_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $p12: ref;
  var $i13: i16;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i16;
  var $i18: i32;
  var $i19: i32;
  var $i20: i32;
  var $p22: ref;
  var $i23: i1;
  var $i24: i8;
  var $i25: i1;
  var $i26: i32;
  var $i27: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $p39: ref;
  var $p41: ref;
  var $i37: i32;
  var $p43: ref;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p1);
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} $i5 := copy_from_user($p3, $p4, 72);
    call {:si_unique_call 687} {:cexpr "tmp"} boogie_si_record_i64($i5);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $i6 := $ne.i64($i5, 0);
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $i11 := $mul.i32($i10, 10);
    call {:si_unique_call 688} {:cexpr "close_delay"} boogie_si_record_i32($i11);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i13 := $load.i16($M.0, $p12);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i14 := $zext.i16.i32($i13);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 65535);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $i20 := 65535;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(696, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 689} mutex_lock_nested($p22, 0);
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    call {:si_unique_call 690} $i23 := capable(21);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i8($i23);
    call {:si_unique_call 691} {:cexpr "tmp___0"} boogie_si_record_i8($i24);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    assume {:branchcond $i27} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i27 == 1);
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(1024, 1));
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i11);
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(1028, 1));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i20);
    assume {:verifier.code 0} true;
    $i37 := 0;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(696, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} mutex_unlock($p43);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i7 := $i37;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb11:
    assume $i27 == 1;
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(1024, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, $i11);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i31 == 1);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(24, 1)), $mul.ref(1028, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, $i20);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 95);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $i37 := $i36;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 1);
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb14;

  $bb8:
    assume $i25 == 1;
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i26 := 0;
    goto $bb10;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i17 := $load.i16($M.0, $p16);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i32($i17);
    goto corral_source_split_3721;

  corral_source_split_3721:
    assume {:verifier.code 0} true;
    $i19 := $mul.i32($i18, 10);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(0, 14);
    goto $bb3;
}



const wait_serial_change: ref;

axiom wait_serial_change == $sub.ref(0, 313321);

procedure wait_serial_change($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.28, $M.29, $M.30, $M.31, $M.0, $M.26, $M.32, $M.8, $CurrAddr;



implementation wait_serial_change($p0: ref, $i1: i64) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i32;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i1;
  var $i66: i64;
  var $i67: i1;
  var $i68: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i69: i32;
  var $i74: i1;
  var $i75: i32;
  var $i38: i32;
  var $i17: i32;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 693} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} $p3 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 695} $p4 := $alloc($mul.ref(44, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} $p5 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 697} {:cexpr "wait_serial_change:arg:arg"} boogie_si_record_i64($i1);
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} $p6 := get_current();
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $M.27 := $store.i32($M.27, $p7, 0);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $M.28 := $store.ref($M.28, $p9, $p6);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.29 := $store.ref($M.29, $p10, default_wake_function);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.30 := $store.ref($M.30, $p12, $0.ref);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.31 := $store.ref($M.31, $p14, $0.ref);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $i15 := $and.i64($i1, 448);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb5;

  $bb5:
    call $i18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $i33, $p34, $i35, $i36, $i37, $i39, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $p51, $i52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $p60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $p70, $i71, $i72, $i73, $i69, $i74, $i75, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24 := wait_serial_change_loop_$bb5($p0, $i1, $p2, $p3, $p4, $p5, $i18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p29, $i30, $i31, $p32, $i33, $p34, $i35, $i36, $i37, $i39, $i40, $p41, $i42, $p43, $i44, $i45, $i46, $i47, $i48, $p49, $i50, $p51, $i52, $i53, $i54, $p55, $p56, $p57, $p58, $i59, $p60, $i61, $p62, $p63, $i64, $i65, $i66, $i67, $i68, $p70, $i71, $i72, $i73, $i69, $i74, $i75, cmdloc_dummy_var_16, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19, cmdloc_dummy_var_20, cmdloc_dummy_var_21, cmdloc_dummy_var_22, cmdloc_dummy_var_23, cmdloc_dummy_var_24);
    goto $bb5_last;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} spin_lock_irq($p19);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2988, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p3);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p20);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_16 := $M.0;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 700} cmdloc_dummy_var_18 := $memcpy.i8(cmdloc_dummy_var_16, cmdloc_dummy_var_17, $p21, $p22, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2944, 1));
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p4);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p23);
    goto corral_source_split_3788;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 701} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p24, $p25, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2988, 1));
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 702} cmdloc_dummy_var_24 := $memcpy.i8(cmdloc_dummy_var_22, cmdloc_dummy_var_23, $p27, $p28, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_24;
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} spin_unlock_irq($p29);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i1, 256);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i1, 64);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i1, 128);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3032, 1));
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} add_wait_queue($p55, $p2);
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p56 := get_current();
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, $p57, 0);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p5, 1);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} $p58 := get_current();
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.32, $p5);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p58, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 707} $i61 := devirtbounce.3(0, $p60, $i59, $p60);
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, $p5, $i61);
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} schedule();
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(3032, 1));
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} remove_wait_queue($p62, $p2);
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2840, 1));
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i8.i1($i64);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i65 == 1);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} $p70 := get_current();
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i71 := signal_pending($p70);
    call {:si_unique_call 712} {:cexpr "tmp___6"} boogie_si_record_i32($i71);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i73 := $i18;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i69 := $i73;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i74 := $eq.i32($i69, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    $i75 := $i69;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i38 := $i75;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i17 := $i38;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $r := $i17;
    return;

  $bb35:
    assume $i74 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i69;
    goto $bb35_dummy;

  $bb32:
    assume $i72 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $i73 := $sub.i32(0, 512);
    goto $bb34;

  $bb26:
    assume $i65 == 1;
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i1, 64);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i67 := $ne.i64($i66, 0);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i68 := $i18;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32(0, 19);
    goto $bb31;

  $bb28:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i38 := $i68;
    goto $bb11;

  $bb19:
    assume $i48 == 1;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i50, $i52);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i54 := $i18;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb21;

  $bb22:
    assume $i53 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $i38 := $i54;
    goto $bb11;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i42, $i44);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $i46 := $i18;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb15;

  $bb16:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $i38 := $i46;
    goto $bb11;

  $bb6:
    assume $i31 == 1;
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i33, $i35);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i37 := $i18;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb8;

  $bb9:
    assume $i36 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb11;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32(0, 22);
    goto $bb3;

  $bb35_dummy:
    assume false;
    return;

  $bb5_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;
}



const get_serial_usage: ref;

axiom get_serial_usage == $sub.ref(0, 314353);

procedure get_serial_usage($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation get_serial_usage($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $p17: ref;
  var $i18: i32;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $p25: ref;
  var $i26: i32;
  var $p27: ref;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i64;
  var $i35: i1;
  var $i36: i32;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p2 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 714} cmdloc_dummy_var_26 := $memset.i8(cmdloc_dummy_var_25, $p3, 0, 80, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2944, 1)), $mul.ref(4, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(4, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i6);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2944, 1)), $mul.ref(8, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(8, 1));
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2944, 1)), $mul.ref(12, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(12, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, $i14);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2944, 1)), $mul.ref(24, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(24, 1));
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2944, 1)), $mul.ref(32, 1));
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.0, $p21);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(28, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, $i22);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2944, 1)), $mul.ref(28, 1));
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(32, 1));
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2944, 1)), $mul.ref(36, 1));
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 80)), $mul.ref(36, 1));
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p31, $i30);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_3899;

  corral_source_split_3899:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p2);
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} $i34 := copy_to_user($p32, $p33, 80);
    call {:si_unique_call 716} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $r := $i36;
    return;

  $bb1:
    assume $i35 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $i36 := $sub.i32(0, 14);
    goto $bb3;
}



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 315385);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_3909;

  corral_source_split_3909:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 719} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 720} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} __might_fault(.str.63, 732);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 723} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 725} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 316417);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 317449);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 318481);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 728} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 1} true;
    call {:si_unique_call 729} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 730} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 319513);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    return;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 320545);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} $p0 := devirtbounce.4(0, current_task);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const default_wake_function: ref;

axiom default_wake_function == $sub.ref(0, 321577);

procedure default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation default_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 732} {:cexpr "default_wake_function:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 733} {:cexpr "default_wake_function:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 734} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 735} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const add_wait_queue: ref;

axiom add_wait_queue == $sub.ref(0, 322609);

procedure add_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation add_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    return;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 323641);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    return;
}



const remove_wait_queue: ref;

axiom remove_wait_queue == $sub.ref(0, 324673);

procedure remove_wait_queue($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation remove_wait_queue($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    return;
}



const signal_pending: ref;

axiom signal_pending == $sub.ref(0, 325705);

procedure signal_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation signal_pending($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i64;
  var $i5: i64;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} $i1 := test_tsk_thread_flag($p0, 2);
    call {:si_unique_call 737} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i3 := $zext.i1.i32($i2);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} $i5 := ldv__builtin_expect($i4, 0);
    call {:si_unique_call 739} {:cexpr "tmp___0"} boogie_si_record_i64($i5);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $i6 := $trunc.i64.i32($i5);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const test_tsk_thread_flag: ref;

axiom test_tsk_thread_flag == $sub.ref(0, 326737);

procedure test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_tsk_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "test_tsk_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 11744)), $mul.ref(8, 1));
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.26, $p2);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} $i5 := test_ti_thread_flag($p4, $i1);
    call {:si_unique_call 742} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const test_ti_thread_flag: ref;

axiom test_ti_thread_flag == $sub.ref(0, 327769);

procedure test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation test_ti_thread_flag($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} {:cexpr "test_ti_thread_flag:arg:flag"} boogie_si_record_i32($i1);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    $i2 := $sext.i32.i64($i1);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 48)), $mul.ref(8, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $i5 := variable_test_bit($i2, $p4);
    call {:si_unique_call 745} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 328801);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 747} $i2 := devirtbounce.5(0, $p1, $i0);
    call {:si_unique_call 748} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const copy_from_user: ref;

axiom copy_from_user == $sub.ref(0, 329833);

procedure copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_from_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} {:cexpr "copy_from_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i3 := __builtinx_object_size.ref.i32($p0, 0);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 751} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 752} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} __might_fault(.str.63, 697);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 755} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} __copy_from_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} $i15 := _copy_from_user($p0, $p1, $i14);
    call {:si_unique_call 757} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const capable: ref;

axiom capable == $sub.ref(0, 330865);

procedure capable($i0: i32) returns ($r: i1);
  free requires assertsPassed;



implementation capable($i0: i32) returns ($r: i1)
{
  var $i1: i1;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 759} {:cexpr "capable:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 1} true;
    call {:si_unique_call 760} $i1 := __VERIFIER_nondet_bool();
    call {:si_unique_call 761} {:cexpr "smack:ext:__VERIFIER_nondet_bool"} boogie_si_record_i1($i1);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const _copy_from_user: ref;

axiom _copy_from_user == $sub.ref(0, 331897);

procedure _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_from_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 762} {:cexpr "_copy_from_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 1} true;
    call {:si_unique_call 763} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 764} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_from_user_overflow: ref;

axiom __copy_from_user_overflow == $sub.ref(0, 332929);

procedure __copy_from_user_overflow();
  free requires assertsPassed;



implementation __copy_from_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    return;
}



const acm_wb_is_avail: ref;

axiom acm_wb_is_avail == $sub.ref(0, 333961);

procedure acm_wb_is_avail($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8;



implementation acm_wb_is_avail($p0: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $p6: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p45: ref;
  var $i46: i32;
  var $i47: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $p75: ref;
  var $i76: i32;
  var $i77: i32;
  var $p80: ref;
  var $i81: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} ldv_spin_lock();
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(16, $i4);
    call {:si_unique_call 766} {:cexpr "n"} boogie_si_record_i32($i5);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(1, 40)), $mul.ref(20, 1));
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32($i5, $i11);
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(2, 40)), $mul.ref(20, 1));
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i12, $i16);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(3, 40)), $mul.ref(20, 1));
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32($i17, $i21);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(4, 40)), $mul.ref(20, 1));
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i27 := $sub.i32($i22, $i26);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(5, 40)), $mul.ref(20, 1));
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $i32 := $sub.i32($i27, $i31);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(6, 40)), $mul.ref(20, 1));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i32, $i36);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(7, 40)), $mul.ref(20, 1));
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i42 := $sub.i32($i37, $i41);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(8, 40)), $mul.ref(20, 1));
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $i46 := $load.i32($M.0, $p45);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i47 := $sub.i32($i42, $i46);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(9, 40)), $mul.ref(20, 1));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i47, $i51);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(10, 40)), $mul.ref(20, 1));
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i57 := $sub.i32($i52, $i56);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(11, 40)), $mul.ref(20, 1));
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i62 := $sub.i32($i57, $i61);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(12, 40)), $mul.ref(20, 1));
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $i67 := $sub.i32($i62, $i66);
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(13, 40)), $mul.ref(20, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $i71 := $load.i32($M.0, $p70);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $i72 := $sub.i32($i67, $i71);
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(14, 40)), $mul.ref(20, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.0, $p75);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i77 := $sub.i32($i72, $i76);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1)), $mul.ref(15, 40)), $mul.ref(20, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i81 := $load.i32($M.0, $p80);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32($i77, $i81);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(2608, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} spin_unlock_irqrestore($p6, $u0);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const acm_wb_alloc: ref;

axiom acm_wb_alloc == $sub.ref(0, 334993);

procedure acm_wb_alloc($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation acm_wb_alloc($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i10: i32;
  var $p11: ref;
  var $i6: i32;
  var $p7: ref;
  var $p12: ref;
  var $i8: i32;
  var $i9: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3344)), $mul.ref(1104, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i6, $p7 := 0, $p1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $i8, $i9 := 0, 0;
    goto $bb4;

  $bb4:
    call $i10, $p11, $i8, $i9, $i14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22 := acm_wb_alloc_loop_$bb4($p2, $i10, $p11, $i8, $i9, $i14, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $i22);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i14 := $add.i32($i8, 1);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i15 := $srem.i32($i14, 16);
    call {:si_unique_call 768} {:cexpr "wbn"} boogie_si_record_i32($i15);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i9, 1);
    call {:si_unique_call 769} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $i17 := $sgt.i32($i16, 15);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i15);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p2, $mul.ref($i18, 40));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref($i18, 40)), $mul.ref(20, 1));
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i10, $p11 := $i15, $p19;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i8, $i9 := $i15, $i16;
    goto $bb11_dummy;

  $bb5:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $i6, $p7 := $i10, $p11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1);
    goto corral_source_split_4084;

  corral_source_split_4084:
    assume {:verifier.code 0} true;
    $i13 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 1);
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const usb_autopm_get_interface_async: ref;

axiom usb_autopm_get_interface_async == $sub.ref(0, 336025);

procedure usb_autopm_get_interface_async($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_autopm_get_interface_async($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 770} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 771} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_anchor_urb: ref;

axiom usb_anchor_urb == $sub.ref(0, 337057);

procedure usb_anchor_urb($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation usb_anchor_urb($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_close: ref;

axiom tty_port_close == $sub.ref(0, 338089);

procedure tty_port_close($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation tty_port_close($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_open: ref;

axiom tty_port_open == $sub.ref(0, 339121);

procedure tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_port_open($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 1} true;
    call {:si_unique_call 772} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 773} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const acm_get_by_minor: ref;

axiom acm_get_by_minor == $sub.ref(0, 340153);

procedure acm_get_by_minor($i0: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation acm_get_by_minor($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $p13: ref;
  var $p10: ref;
  var $p14: ref;
  var vslice_dummy_var_50: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} {:cexpr "acm_get_by_minor:arg:minor"} boogie_si_record_i32($i0);
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} mutex_lock_nested(acm_minors_lock, 0);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} $p1 := idr_find(acm_minors, $i0);
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $p14 := $p1;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 781} mutex_unlock(acm_minors_lock);
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $r := $p14;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(2680, 1));
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} mutex_lock_nested($p5, 0);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(2840, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i8.i1($i7);
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i8 == 1);
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(24, 1));
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    call {:si_unique_call 779} vslice_dummy_var_50 := tty_port_get($p11);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(2680, 1));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} mutex_unlock($p13);
    assume {:verifier.code 0} true;
    $p10 := $p1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p14 := $p10;
    goto $bb6;

  $bb3:
    assume $i8 == 1;
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 3344)), $mul.ref(2680, 1));
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} mutex_unlock($p9);
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $p10 := $0.ref;
    goto $bb5;
}



const tty_standard_install: ref;

axiom tty_standard_install == $sub.ref(0, 341185);

procedure tty_standard_install($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_standard_install($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 1} true;
    call {:si_unique_call 782} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 783} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const idr_find: ref;

axiom idr_find == $sub.ref(0, 342217);

procedure idr_find($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation idr_find($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i64;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $p29: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 786} {:cexpr "idr_find:arg:id"} boogie_si_record_i32($i1);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 112)), $mul.ref(0, 1));
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} __read_once_size($p5, $p7, 8);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p2);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} $i10 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 789} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} $p29 := idr_find_slowpath($p0, $i1);
    goto corral_source_split_4180;

  corral_source_split_4180:
    assume {:verifier.code 0} true;
    $p28 := $p29;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $r := $p28;
    return;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i1, $sub.i32(0, 256));
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(0, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, $i15);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p9, $mul.ref(0, 2096)), $mul.ref(8, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i1);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 255);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p18, $mul.ref($i20, 1));
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p3);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} __read_once_size($p21, $p23, 8);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p3);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_4174;

  corral_source_split_4174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i26 := debug_lockdep_rcu_enabled();
    call {:si_unique_call 792} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $p28 := $p25;
    goto $bb6;
}



const tty_port_get: ref;

axiom tty_port_get == $sub.ref(0, 343249);

procedure tty_port_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_get($p0: ref) returns ($r: ref)
{
  var $i1: i64;
  var $i2: i1;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_4183;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    $i2 := $ne.i64($i1, 0);
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1040)), $mul.ref(1036, 1));
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i4 := kref_get_unless_zero($p3);
    call {:si_unique_call 795} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb3:
    assume $i5 == 1;
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $p6 := $p0;
    goto $bb5;
}



const kref_get_unless_zero: ref;

axiom kref_get_unless_zero == $sub.ref(0, 344281);

procedure kref_get_unless_zero($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation kref_get_unless_zero($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i2 := atomic_add_unless($p1, 1, 0);
    call {:si_unique_call 797} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_add_unless: ref;

axiom atomic_add_unless == $sub.ref(0, 345313);

procedure atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} {:cexpr "atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 799} {:cexpr "atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i3 := __atomic_add_unless($p0, $i1, $i2);
    call {:si_unique_call 801} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, $i2);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const __atomic_add_unless: ref;

axiom __atomic_add_unless == $sub.ref(0, 346345);

procedure __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __atomic_add_unless($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $i7: i64;
  var $i8: i1;
  var $i11: i32;
  var $i9: i32;
  var $i10: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} {:cexpr "__atomic_add_unless:arg:a"} boogie_si_record_i32($i1);
    call {:si_unique_call 803} {:cexpr "__atomic_add_unless:arg:u"} boogie_si_record_i32($i2);
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i3 := atomic_read($p0);
    call {:si_unique_call 805} {:cexpr "c"} boogie_si_record_i32($i3);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32($i3, $i2);
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} $i7 := ldv__builtin_expect($i6, 0);
    call {:si_unique_call 807} {:cexpr "tmp"} boogie_si_record_i64($i7);
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $i9 := $i3;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i10 := $i3;
    goto $bb4;

  $bb4:
    call $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25 := __atomic_add_unless_loop_$bb4($p0, $i1, $i2, $i11, $i10, $i13, $i14, $i15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i10, $i1);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $i14 := atomic_cmpxchg($p0, $i10, $i13);
    call {:si_unique_call 809} {:cexpr "old"} boogie_si_record_i32($i14);
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, $i10);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i18 := ldv__builtin_expect($i17, 1);
    call {:si_unique_call 811} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i20 := $i10;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $i2);
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $i22 := $zext.i1.i32($i21);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} $i24 := ldv__builtin_expect($i23, 0);
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i64($i24);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $i11 := $i14;
    assume true;
    goto $bb5, $bb11;

  $bb11:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i10 := $i14;
    goto $bb11_dummy;

  $bb5:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $i9 := $i11;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i12 := $i9;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb8:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $i12 := $i20;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb11_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 347377);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_cmpxchg: ref;

axiom atomic_cmpxchg == $sub.ref(0, 348409);

procedure atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_cmpxchg($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} {:cexpr "atomic_cmpxchg:arg:old"} boogie_si_record_i32($i1);
    call {:si_unique_call 815} {:cexpr "atomic_cmpxchg:arg:new"} boogie_si_record_i32($i2);
    call {:si_unique_call 816} {:cexpr "atomic_cmpxchg:arg:__old"} boogie_si_record_i32($i1);
    call {:si_unique_call 817} {:cexpr "atomic_cmpxchg:arg:__new"} boogie_si_record_i32($i2);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 818} $i4 := devirtbounce.6(0, $p3, $i2, $i1, $p3);
    call {:si_unique_call 819} {:cexpr "__ret"} boogie_si_record_i32($i4);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const __read_once_size: ref;

axiom __read_once_size == $sub.ref(0, 349441);

procedure __read_once_size($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation __read_once_size($p0: ref, $p1: ref, $i2: i32)
{
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i8;
  var $p11: ref;
  var $i12: i16;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    call {:si_unique_call 820} {:cexpr "__read_once_size:arg:size"} boogie_si_record_i32($i2);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i3 := $slt.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i2, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    call {:si_unique_call 821} devirtbounce.2(0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i2);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 822} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p1, $p0, $i20, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    call {:si_unique_call 823} devirtbounce.2(0);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i5 == 1;
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p0);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i18 := $load.i64($M.0, $p17);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p1);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i18);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb4:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i2, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb9:
    assume $i6 == 1;
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p0);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p1);
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, $i15);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb2:
    assume $i3 == 1;
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i2, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb13:
    assume $i8 == 1;
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p0);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p1);
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb11:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i2, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb15:
    assume $i9 == 1;
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p0);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i10);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    goto $bb17;
}



const debug_lockdep_rcu_enabled: ref;

axiom debug_lockdep_rcu_enabled == $sub.ref(0, 350473);

procedure debug_lockdep_rcu_enabled() returns ($r: i32);
  free requires assertsPassed;



implementation debug_lockdep_rcu_enabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 824} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 825} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const idr_find_slowpath: ref;

axiom idr_find_slowpath == $sub.ref(0, 351505);

procedure idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation idr_find_slowpath($p0: ref, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 826} {:cexpr "idr_find_slowpath:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $p2 := external_alloc();
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 352537);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 828} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p1 := calloc(1, $i0);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 1} true;
    call {:si_unique_call 830} __VERIFIER_assume($i4);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 353569);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.33;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 832} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.33;
    call {:si_unique_call 833} cmdloc_dummy_var_31 := $memset.i8(cmdloc_dummy_var_30, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.33 := cmdloc_dummy_var_31;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_tty_port_operations_4: ref;

axiom ldv_tty_port_operations_4 == $sub.ref(0, 354601);

procedure ldv_tty_port_operations_4();
  free requires assertsPassed;
  modifies $M.34, $M.0, $CurrAddr;



implementation ldv_tty_port_operations_4()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4286;

  corral_source_split_4286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $p0 := ldv_init_zalloc(1040);
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_driver_3: ref;

axiom ldv_usb_driver_3 == $sub.ref(0, 355633);

procedure ldv_usb_driver_3();
  free requires assertsPassed;
  modifies $M.35, $M.0, $CurrAddr;



implementation ldv_usb_driver_3()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $p0 := ldv_init_zalloc(1560);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.35 := $p0;
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_tty_operations_2: ref;

axiom ldv_initialize_tty_operations_2 == $sub.ref(0, 356665);

procedure ldv_initialize_tty_operations_2();
  free requires assertsPassed;
  modifies $M.36, $M.37, $M.0, $CurrAddr;



implementation ldv_initialize_tty_operations_2()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 1} true;
    call {:si_unique_call 836} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 837} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $M.36 := $p0;
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p2 := ldv_init_zalloc(1816);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $M.37 := $p2;
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    return;
}



const work_init_1: ref;

axiom work_init_1 == $sub.ref(0, 357697);

procedure work_init_1();
  free requires assertsPassed;
  modifies $M.18, $M.20, $M.22, $M.24;



implementation work_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $M.18 := 0;
    call {:si_unique_call 839} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.20 := 0;
    call {:si_unique_call 840} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 841} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $M.24 := 0;
    call {:si_unique_call 842} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    return;
}



const invoke_work_1: ref;

axiom invoke_work_1 == $sub.ref(0, 358729);

procedure invoke_work_1();
  free requires assertsPassed;
  modifies $M.18, $M.20, $M.22, $M.24;



implementation invoke_work_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 1} true;
    call {:si_unique_call 843} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 844} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 845} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} ldv_stop();
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i21 := $M.24;
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 2);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb34;

  $bb34:
    assume !($i22 == 1);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    $i23 := $M.24;
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $M.24 := 4;
    call {:si_unique_call 855} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(4);
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    $p25 := $M.19;
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    call {:si_unique_call 856} acm_softint($p25);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $M.24 := 1;
    call {:si_unique_call 857} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb33;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $i16 := $M.22;
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb28;

  $bb28:
    assume !($i17 == 1);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i18 := $M.22;
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 3);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $M.22 := 4;
    call {:si_unique_call 852} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(4);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    $p20 := $M.19;
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} acm_softint($p20);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 854} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb27;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $i11 := $M.20;
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 2);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i12 == 1);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    $i13 := $M.20;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 3);
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i14 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.20 := 4;
    call {:si_unique_call 849} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(4);
    goto corral_source_split_4337;

  corral_source_split_4337:
    assume {:verifier.code 0} true;
    $p15 := $M.19;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} acm_softint($p15);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $M.20 := 1;
    call {:si_unique_call 851} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb21;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i6 := $M.18;
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 2);
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i7 == 1);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i8 := $M.18;
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 3);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.18 := 4;
    call {:si_unique_call 846} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(4);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p10 := $M.19;
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} acm_softint($p10);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $M.18 := 1;
    call {:si_unique_call 848} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb14;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 359761);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const main: ref;

axiom main == $sub.ref(0, 360793);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.33, $M.38, $M.39, $M.40, $M.41, $M.18, $M.20, $M.22, $M.24, $M.42, $M.43, $M.44, $M.45, $M.46, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.47, $M.48, $M.17, $M.50, $M.8, $M.51, $M.52, $M.53, $M.36, $M.37, $M.34, $M.19, $M.21, $M.23, $M.25, $M.35, $M.49, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.16, $M.102, $M.103, $M.104, $M.105, $CurrAddr, $M.27, $M.28, $M.29, $M.30, $M.31, $M.26, $M.32, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $p44: ref;
  var $p46: ref;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $i62: i32;
  var $i63: i1;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $i77: i32;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i1;
  var $i88: i32;
  var $i89: i1;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $p104: ref;
  var $p105: ref;
  var $i106: i32;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i1;
  var $i118: i32;
  var $i119: i1;
  var $i121: i32;
  var $i122: i1;
  var $i123: i32;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $i143: i32;
  var $i145: i32;
  var $i146: i1;
  var $p147: ref;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i1;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i163: i32;
  var $i164: i1;
  var $p165: ref;
  var $p166: ref;
  var $i167: i32;
  var $i168: i1;
  var $p169: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i173: i32;
  var $i174: i1;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $i178: i32;
  var $i179: i1;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $i186: i32;
  var $i187: i1;
  var $p188: ref;
  var $i190: i32;
  var $i191: i1;
  var $p192: ref;
  var $i193: i32;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $i203: i32;
  var $i204: i1;
  var $p205: ref;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $i209: i32;
  var $i210: i64;
  var $i212: i32;
  var $i213: i1;
  var $p214: ref;
  var $i215: i32;
  var $i216: i64;
  var $i218: i32;
  var $i219: i1;
  var $p220: ref;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i230: i32;
  var $i231: i1;
  var $p232: ref;
  var $i234: i32;
  var $i235: i1;
  var $p236: ref;
  var $i238: i32;
  var $i239: i1;
  var $p240: ref;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i245: i32;
  var $i246: i32;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $i251: i32;
  var $i252: i32;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i1;
  var $i261: i1;
  var $i262: i1;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $p266: ref;
  var $i267: i32;
  var $i268: i32;
  var $i269: i1;
  var $i270: i32;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $i275: i32;
  var $i276: i32;
  var $i277: i1;
  var $p278: ref;
  var $i279: i32;
  var $i280: i32;
  var $i281: i1;
  var $p282: ref;
  var $i283: i32;
  var $i284: i32;
  var $i285: i1;
  var $p286: ref;
  var $i287: i32;
  var $i288: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $i292: i32;
  var $i293: i1;
  var $i294: i32;
  var $i295: i1;
  var $i296: i1;
  var $i297: i1;
  var $i298: i32;
  var $i299: i1;
  var $i300: i32;
  var $i301: i1;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i305: i32;
  var $i306: i1;
  var $i307: i32;
  var $i308: i1;
  var $i309: i32;
  var $i310: i1;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var vslice_dummy_var_51: ref;
  var vslice_dummy_var_52: ref;
  var vslice_dummy_var_53: ref;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: ref;
  var vslice_dummy_var_58: ref;
  var vslice_dummy_var_59: i64;
  var vslice_dummy_var_60: i32;
  var vslice_dummy_var_61: i64;
  var vslice_dummy_var_62: i32;
  var vslice_dummy_var_63: i32;
  var vslice_dummy_var_64: i32;
  var vslice_dummy_var_65: i32;
  var vslice_dummy_var_66: i32;
  var vslice_dummy_var_67: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;
  var vslice_dummy_var_75: i32;
  var vslice_dummy_var_76: i32;
  var vslice_dummy_var_77: i64;

  $bb0:
    call {:si_unique_call 859} $initialize();
    goto corral_source_split_4368;

  corral_source_split_4368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} $p4 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 867} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} $p7 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $p8 := ldv_init_zalloc(1);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 870} $p9 := ldv_init_zalloc(1416);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} $p11 := ldv_init_zalloc(48);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $p13 := ldv_init_zalloc(32);
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $p15 := ldv_init_zalloc(48);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} $p17 := ldv_init_zalloc(1416);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p19 := ldv_init_zalloc(1);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p20 := ldv_init_zalloc(1);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} $p21 := ldv_init_zalloc(44);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $p23 := ldv_init_zalloc(184);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 879} $p25 := ldv_init_zalloc(1816);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $p27 := ldv_init_zalloc(48);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $p29 := ldv_init_zalloc(1);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} $p30 := ldv_init_zalloc(1416);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} ldv_initialize();
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} vslice_dummy_var_51 := ldv_memset($p32, 0, 4);
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 885} vslice_dummy_var_52 := ldv_memset($p34, 0, 8);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} vslice_dummy_var_53 := ldv_memset($p36, 0, 4);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p3);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} vslice_dummy_var_54 := ldv_memset($p38, 0, 4);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p4);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 888} vslice_dummy_var_55 := ldv_memset($p40, 0, 4);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p5);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} vslice_dummy_var_56 := ldv_memset($p42, 0, 4);
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p6);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} vslice_dummy_var_57 := ldv_memset($p44, 0, 4);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p7);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 891} vslice_dummy_var_58 := ldv_memset($p46, 0, 4);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $M.38 := 0;
    call {:si_unique_call 892} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 893} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $M.40 := 0;
    call {:si_unique_call 894} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $M.41 := 0;
    call {:si_unique_call 895} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} work_init_1();
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $M.42 := 1;
    call {:si_unique_call 897} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $M.43 := 0;
    call {:si_unique_call 898} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $M.44 := 0;
    call {:si_unique_call 899} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 900} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 901} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $p104, $p105, $i106, $i108, $i109, $p110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $p142, $i143, $i145, $i146, $p147, $i148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $i167, $i168, $p169, $i170, $i171, $p172, $i173, $i174, $p175, $p176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $p184, $i186, $i187, $p188, $i190, $i191, $p192, $i193, $i195, $i196, $p197, $i198, $i200, $i201, $p202, $i203, $i204, $p205, $i206, $i207, $p208, $i209, $i210, $i212, $i213, $p214, $i215, $i216, $i218, $i219, $p220, $i222, $i223, $p224, $i226, $i227, $p228, $i230, $i231, $p232, $i234, $i235, $p236, $i238, $i239, $p240, $i242, $i243, $p244, $i245, $i246, $i248, $i249, $p250, $i251, $i252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $p266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $p274, $i275, $i276, $i277, $p278, $i279, $i280, $i281, $p282, $i283, $i284, $i285, $p286, $i287, $i288, $i289, $i290, $p291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p10, $p12, $p14, $p16, $p18, $p19, $p20, $p22, $p24, $p26, $p28, $p29, $p31, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $i72, $i73, $i74, $i75, $p76, $i77, $i78, $i79, $i80, $i81, $i82, $i83, $p84, $i85, $i86, $i87, $i88, $i89, $i90, $i91, $p92, $i93, $i94, $i95, $i96, $i97, $i98, $p99, $i100, $i101, $i102, $i103, $p104, $p105, $i106, $i108, $i109, $p110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $i140, $i141, $p142, $i143, $i145, $i146, $p147, $i148, $i149, $p150, $i151, $i152, $p153, $i154, $i155, $p156, $i157, $i158, $p159, $i160, $i161, $p162, $i163, $i164, $p165, $p166, $i167, $i168, $p169, $i170, $i171, $p172, $i173, $i174, $p175, $p176, $i177, $i178, $i179, $i180, $i181, $i182, $i183, $p184, $i186, $i187, $p188, $i190, $i191, $p192, $i193, $i195, $i196, $p197, $i198, $i200, $i201, $p202, $i203, $i204, $p205, $i206, $i207, $p208, $i209, $i210, $i212, $i213, $p214, $i215, $i216, $i218, $i219, $p220, $i222, $i223, $p224, $i226, $i227, $p228, $i230, $i231, $p232, $i234, $i235, $p236, $i238, $i239, $p240, $i242, $i243, $p244, $i245, $i246, $i248, $i249, $p250, $i251, $i252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $p266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $p274, $i275, $i276, $i277, $p278, $i279, $i280, $i281, $p282, $i283, $i284, $i285, $p286, $i287, $i288, $i289, $i290, $p291, $i292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $i300, $i301, $i302, $i303, $i304, $i305, $i306, $i307, $i308, $i309, $i310, $i311, $i312, $i313, $i314, vslice_dummy_var_59, vslice_dummy_var_60, vslice_dummy_var_61, vslice_dummy_var_62, vslice_dummy_var_63, vslice_dummy_var_64, vslice_dummy_var_65, vslice_dummy_var_66, vslice_dummy_var_67, vslice_dummy_var_68, vslice_dummy_var_69, vslice_dummy_var_70, vslice_dummy_var_71, vslice_dummy_var_72, vslice_dummy_var_73, vslice_dummy_var_74, vslice_dummy_var_75, vslice_dummy_var_76, vslice_dummy_var_77);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i48, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i48, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i48, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_stop();
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb34_dummy;

  $bb9:
    assume $i52 == 1;
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i309 := $M.46;
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i310 := $ne.i32($i309, 0);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb296:
    assume $i310 == 1;
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} $i311 := __VERIFIER_nondet_int();
    call {:si_unique_call 1038} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i311);
    call {:si_unique_call 1039} {:cexpr "tmp___20"} boogie_si_record_i32($i311);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} ldv_stop();
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb299:
    assume $i312 == 1;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $i313 := $M.46;
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 1);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  $bb302:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb301:
    assume $i314 == 1;
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} vslice_dummy_var_77 := show_country_rel_date($p31, $p28, $p29);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1041} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb303;

  $bb7:
    assume $i51 == 1;
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    $i292 := $M.45;
    goto corral_source_split_4423;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    $i293 := $ne.i32($i292, 0);
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb266:
    assume $i293 == 1;
    goto corral_source_split_4898;

  corral_source_split_4898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} $i294 := __VERIFIER_nondet_int();
    call {:si_unique_call 1020} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i294);
    call {:si_unique_call 1021} {:cexpr "tmp___19"} boogie_si_record_i32($i294);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    $i295 := $slt.i32($i294, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i294, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    assume !($i296 == 1);
    goto $bb273;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_stop();
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb271:
    assume $i296 == 1;
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i302 := $M.45;
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i303 := $eq.i32($i302, 1);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb284:
    assume $i303 == 1;
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} $i304 := acm_init();
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $M.53 := $i304;
    call {:si_unique_call 1026} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i304);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $i305 := $M.53;
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $i306 := $ne.i32($i305, 0);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $i307 := $M.53;
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 0);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb289:
    assume $i308 == 1;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1028} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1029} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ldv_initialize_tty_operations_2();
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_tty_port_operations_4();
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb291;

  $bb286:
    assume $i306 == 1;
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1027} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} ldv_check_final_state();
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb269:
    assume $i295 == 1;
    assume {:verifier.code 0} true;
    $i297 := $eq.i32($i294, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    assume !($i297 == 1);
    goto $bb273;

  $bb274:
    assume $i297 == 1;
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i298 := $M.45;
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 2);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    assume !($i299 == 1);
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb276:
    assume $i299 == 1;
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $i300 := $M.44;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $i301 := $eq.i32($i300, 0);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    assume !($i301 == 1);
    goto $bb278;

  $bb279:
    assume $i301 == 1;
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} acm_exit();
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1023} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb5:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i48, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i53 == 1);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i256 := $M.43;
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  $bb228:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb227:
    assume $i257 == 1;
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} $i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 1001} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i258);
    call {:si_unique_call 1002} {:cexpr "tmp___18"} boogie_si_record_i32($i258);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    $i259 := $slt.i32($i258, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    $i260 := $slt.i32($i258, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb233:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i258, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ldv_stop();
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb234:
    assume $i261 == 1;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i289 := $M.43;
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 1);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb260:
    assume $i290 == 1;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p291 := $M.34;
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} acm_port_destruct($p291);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb232:
    assume $i260 == 1;
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i284 := $M.43;
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i285 := $eq.i32($i284, 2);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb257:
    assume $i285 == 1;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p286 := $M.34;
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} acm_port_shutdown($p286);
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i287 := $M.44;
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i288 := $sub.i32($i287, 1);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $M.44 := $i288;
    call {:si_unique_call 1015} {:cexpr "ref_cnt"} boogie_si_record_i32($i288);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb230:
    assume $i259 == 1;
    assume {:verifier.code 0} true;
    $i262 := $slt.i32($i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i262 == 1);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i272 := $M.43;
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i273 := $eq.i32($i272, 1);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i276 := $M.43;
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $i277 := $eq.i32($i276, 3);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i280 := $M.43;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    $i281 := $eq.i32($i280, 2);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb254:
    assume $i281 == 1;
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    $p282 := $M.34;
    goto corral_source_split_4878;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    $i283 := $load.i32($M.33, $p7);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} acm_port_dtr_rts($p282, $i283);
    goto corral_source_split_4880;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb251:
    assume $i277 == 1;
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p278 := $M.34;
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $i279 := $load.i32($M.33, $p7);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} acm_port_dtr_rts($p278, $i279);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb248:
    assume $i273 == 1;
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $p274 := $M.34;
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.33, $p7);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} acm_port_dtr_rts($p274, $i275);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb237:
    assume $i262 == 1;
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb236;

  $bb239:
    assume $i263 == 1;
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i264 := $M.43;
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 1);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  $bb242:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb241:
    assume $i265 == 1;
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $p266 := $M.34;
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} $i267 := acm_port_activate($p266, $p26);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.52 := $i267;
    call {:si_unique_call 1004} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i267);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i268 := $M.52;
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i269 := $eq.i32($i268, 0);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb243:
    assume $i269 == 1;
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i270 := $M.44;
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $i271 := $add.i32($i270, 1);
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.44 := $i271;
    call {:si_unique_call 1006} {:cexpr "ref_cnt"} boogie_si_record_i32($i271);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    goto $bb245;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i53 == 1;
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i254 := $M.42;
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_4432;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  $bb225:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb224:
    assume $i255 == 1;
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} invoke_work_1();
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb226;

  $bb3:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i48, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i121 := $M.41;
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    $i122 := $ne.i32($i121, 0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb100:
    assume $i122 == 1;
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} $i123 := __VERIFIER_nondet_int();
    call {:si_unique_call 940} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i123);
    call {:si_unique_call 941} {:cexpr "tmp___17"} boogie_si_record_i32($i123);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i123, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i123, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i126 == 1);
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i123, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i123, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    assume !($i128 == 1);
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_stop();
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb111:
    assume $i128 == 1;
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $i242 := $M.41;
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 1);
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    $i248 := $M.41;
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i249 := $eq.i32($i248, 2);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  $bb219:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb218:
    assume $i249 == 1;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    $p250 := $M.37;
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i251 := $load.i32($M.33, $p6);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i252 := $load.i32($M.33, $p4);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} vslice_dummy_var_76 := acm_tty_tiocmset($p250, $i251, $i252);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb220;

  $bb215:
    assume $i243 == 1;
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    $p244 := $M.37;
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i245 := $load.i32($M.33, $p6);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i246 := $load.i32($M.33, $p4);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} vslice_dummy_var_75 := acm_tty_tiocmset($p244, $i245, $i246);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb109:
    assume $i127 == 1;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    $i234 := $M.41;
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    $i235 := $eq.i32($i234, 1);
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb211:
    assume {:verifier.code 0} true;
    $i238 := $M.41;
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i238, 2);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  $bb213:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb212:
    assume $i239 == 1;
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $p240 := $M.37;
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} vslice_dummy_var_74 := acm_tty_install($p24, $p240);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb214;

  $bb209:
    assume $i235 == 1;
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $p236 := $M.37;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} vslice_dummy_var_73 := acm_tty_install($p24, $p236);
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb211;

  $bb107:
    assume $i126 == 1;
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i123, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i129 == 1);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $i226 := $M.41;
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 1);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    $i230 := $M.41;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i231 := $eq.i32($i230, 2);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  $bb207:
    assume !($i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb206:
    assume $i231 == 1;
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p232 := $M.37;
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} vslice_dummy_var_72 := acm_tty_tiocmget($p232);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 989} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb208;

  $bb203:
    assume $i227 == 1;
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p228 := $M.37;
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} vslice_dummy_var_71 := acm_tty_tiocmget($p228);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb114:
    assume $i129 == 1;
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $i218 := $M.41;
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $i219 := $eq.i32($i218, 1);
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  $bb198:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb199:
    assume {:verifier.code 0} true;
    $i222 := $M.41;
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $i223 := $eq.i32($i222, 2);
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb200:
    assume $i223 == 1;
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $p224 := $M.37;
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} vslice_dummy_var_70 := acm_tty_chars_in_buffer($p224);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb202;

  $bb197:
    assume $i219 == 1;
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p220 := $M.37;
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} vslice_dummy_var_69 := acm_tty_chars_in_buffer($p220);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb199;

  $bb105:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i123, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i123, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i131 == 1);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $i206 := $M.41;
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $i207 := $eq.i32($i206, 1);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i212 := $M.41;
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $i213 := $eq.i32($i212, 2);
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb194:
    assume $i213 == 1;
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p214 := $M.37;
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i215 := $load.i32($M.33, $p2);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $i216 := $load.i64($M.33, $p1);
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} vslice_dummy_var_68 := acm_tty_ioctl($p214, $i215, $i216);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto $bb196;

  $bb191:
    assume $i207 == 1;
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p208 := $M.37;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $i209 := $load.i32($M.33, $p2);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $i210 := $load.i64($M.33, $p1);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} vslice_dummy_var_67 := acm_tty_ioctl($p208, $i209, $i210);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb118:
    assume $i131 == 1;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $i200 := $M.41;
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $i201 := $eq.i32($i200, 1);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  $bb186:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    $i203 := $M.41;
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $i204 := $eq.i32($i203, 2);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  $bb189:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb188:
    assume $i204 == 1;
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $p205 := $M.37;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} acm_tty_set_termios($p205, $p22);
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb185:
    assume $i201 == 1;
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p202 := $M.37;
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} acm_tty_set_termios($p202, $p22);
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb116:
    assume $i130 == 1;
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i123, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i132 == 1);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $i190 := $M.41;
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i191 := $eq.i32($i190, 1);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb181:
    assume {:verifier.code 0} true;
    $i195 := $M.41;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 2);
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb182:
    assume $i196 == 1;
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p197 := $M.37;
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $i198 := $load.i32($M.33, $p5);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} vslice_dummy_var_66 := acm_tty_break_ctl($p197, $i198);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb184;

  $bb179:
    assume $i191 == 1;
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $p192 := $M.37;
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    $i193 := $load.i32($M.33, $p5);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_65 := acm_tty_break_ctl($p192, $i193);
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb181;

  $bb120:
    assume $i132 == 1;
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i182 := $M.41;
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 1);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i186 := $M.41;
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i187 := $eq.i32($i186, 2);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb176:
    assume $i187 == 1;
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p188 := $M.37;
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} vslice_dummy_var_64 := acm_tty_write_room($p188);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume $i183 == 1;
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $p184 := $M.37;
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} vslice_dummy_var_63 := acm_tty_write_room($p184);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb103:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i123, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb123:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i123, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i123, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i135 == 1);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i173 := $M.41;
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i174 := $eq.i32($i173, 1);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  $bb168:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb167:
    assume $i174 == 1;
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $p175 := $M.37;
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    $p176 := $M.36;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i177 := acm_tty_open($p175, $p176);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.51 := $i177;
    call {:si_unique_call 963} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i177);
    goto corral_source_split_4699;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    $i178 := $M.51;
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 0);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb169:
    assume $i179 == 1;
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i180 := $M.44;
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $i181 := $add.i32($i180, 1);
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.44 := $i181;
    call {:si_unique_call 965} {:cexpr "ref_cnt"} boogie_si_record_i32($i181);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb171;

  $bb126:
    assume $i135 == 1;
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $i167 := $M.41;
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 1);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i170 := $M.41;
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 2);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb164:
    assume $i171 == 1;
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $p172 := $M.37;
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} acm_tty_unthrottle($p172);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb166;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb161:
    assume $i168 == 1;
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p169 := $M.37;
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} acm_tty_unthrottle($p169);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb163;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  $bb124:
    assume $i134 == 1;
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i123, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb129:
    assume !($i136 == 1);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i163 := $M.41;
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i164 := $eq.i32($i163, 2);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb158:
    assume $i164 == 1;
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $p165 := $M.37;
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p166 := $M.36;
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} acm_tty_close($p165, $p166);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb128:
    assume $i136 == 1;
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    $i157 := $M.41;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 1);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    $i160 := $M.41;
    goto corral_source_split_4668;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 2);
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  $bb156:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb155:
    assume $i161 == 1;
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p162 := $M.37;
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} acm_tty_hangup($p162);
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb152:
    assume $i158 == 1;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p159 := $M.37;
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} acm_tty_hangup($p159);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb122:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i123, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $slt.i32($i123, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i138 == 1);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    $i151 := $M.41;
    goto corral_source_split_4624;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i151, 1);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    $i154 := $M.41;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 2);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb149:
    assume $i155 == 1;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p156 := $M.37;
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} acm_tty_throttle($p156);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb151;

  $bb146:
    assume $i152 == 1;
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p153 := $M.37;
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} acm_tty_throttle($p153);
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    goto $bb148;

  $bb132:
    assume $i138 == 1;
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $i145 := $M.41;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i146 := $eq.i32($i145, 1);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    $i148 := $M.41;
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i148, 2);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb143:
    assume $i149 == 1;
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p150 := $M.37;
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} acm_tty_cleanup($p150);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb145;

  $bb140:
    assume $i146 == 1;
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p147 := $M.37;
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} acm_tty_cleanup($p147);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb142;

  $bb130:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i123, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb113;

  $bb134:
    assume $i139 == 1;
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i140 := $M.41;
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i141 := $eq.i32($i140, 2);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb136:
    assume $i141 == 1;
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p142 := $M.37;
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i143 := $load.i32($M.33, $p3);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} vslice_dummy_var_62 := acm_tty_write($p142, $p20, $i143);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i55 == 1;
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $i114 := $M.40;
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $i115 := $ne.i32($i114, 0);
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb88:
    assume $i115 == 1;
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} $i116 := __VERIFIER_nondet_int();
    call {:si_unique_call 934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i116);
    call {:si_unique_call 935} {:cexpr "tmp___16"} boogie_si_record_i32($i116);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $i117 := $eq.i32($i116, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_stop();
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb91:
    assume $i117 == 1;
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i118 := $M.40;
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i118, 1);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb93:
    assume $i119 == 1;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} vslice_dummy_var_61 := show_caps($p18, $p16, $p19);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb14:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i48, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i56 == 1);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i65 := $M.39;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb35:
    assume $i66 == 1;
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 911} $i67 := __VERIFIER_nondet_int();
    call {:si_unique_call 912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i67);
    call {:si_unique_call 913} {:cexpr "tmp___15"} boogie_si_record_i32($i67);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i67, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} ldv_stop();
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb44:
    assume $i71 == 1;
    goto corral_source_split_4476;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    $i108 := $M.39;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i108, 3);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb79:
    assume $i109 == 1;
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p110 := $M.35;
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i111 := acm_resume($p110);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $M.50 := $i111;
    call {:si_unique_call 930} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i111);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i112 := $M.50;
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb81:
    assume $i113 == 1;
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb83;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i70 == 1;
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    $i102 := $M.39;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 2);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb76:
    assume $i103 == 1;
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $p104 := $M.35;
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i106 := $load.i32($M.33, $p105);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} vslice_dummy_var_60 := acm_suspend($p104, $i106);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 928} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb40:
    assume $i69 == 1;
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i88 := $M.39;
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 3);
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i89 == 1);
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i95 := $M.39;
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i96 := $eq.i32($i95, 2);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb70:
    assume $i96 == 1;
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $i97 := $M.49;
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    assume !($i98 == 1);
    goto $bb72;

  $bb73:
    assume $i98 == 1;
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $p99 := $M.35;
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} acm_disconnect($p99);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i100 := $M.44;
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32($i100, 1);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.44 := $i101;
    call {:si_unique_call 926} {:cexpr "ref_cnt"} boogie_si_record_i32($i101);
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb64:
    assume $i89 == 1;
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i90 := $M.49;
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    $i91 := $eq.i32($i90, 0);
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    assume !($i91 == 1);
    goto $bb66;

  $bb67:
    assume $i91 == 1;
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $p92 := $M.35;
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} acm_disconnect($p92);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i93 := $M.44;
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i94 := $sub.i32($i93, 1);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.44 := $i94;
    call {:si_unique_call 923} {:cexpr "ref_cnt"} boogie_si_record_i32($i94);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb38:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i72 := $slt.i32($i67, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i72 == 1);
    goto corral_source_split_4480;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    $i82 := $M.39;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 3);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb58:
    assume $i83 == 1;
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $p84 := $M.35;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} $i85 := acm_reset_resume($p84);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.48 := $i85;
    call {:si_unique_call 919} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i85);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    $i86 := $M.48;
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    $i87 := $eq.i32($i86, 0);
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb60:
    assume $i87 == 1;
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i72 == 1;
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i67, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb46;

  $bb49:
    assume $i73 == 1;
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i74 := $M.39;
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 1);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb51:
    assume $i75 == 1;
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $p76 := $M.35;
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i77 := acm_probe($p76, $p14);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.47 := $i77;
    call {:si_unique_call 915} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i77);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    $i78 := $M.47;
    goto corral_source_split_4492;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    $i79 := $eq.i32($i78, 0);
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i79 == 1;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i80 := $M.44;
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i80, 1);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.44 := $i81;
    call {:si_unique_call 917} {:cexpr "ref_cnt"} boogie_si_record_i32($i81);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    goto $bb55;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i48, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb11;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i58 := $M.38;
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb22:
    assume $i59 == 1;
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} $i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i60);
    call {:si_unique_call 907} {:cexpr "tmp___14"} boogie_si_record_i32($i60);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ldv_stop();
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb25:
    assume $i61 == 1;
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i62 := $M.38;
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 1);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb27:
    assume $i63 == 1;
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} vslice_dummy_var_59 := show_country_codes($p10, $p12, $p8);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb34_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} $i48 := __VERIFIER_nondet_int();
    call {:si_unique_call 903} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i48);
    call {:si_unique_call 904} {:cexpr "tmp___13"} boogie_si_record_i32($i48);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 361825);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    return;
}



const acm_exit: ref;

axiom acm_exit == $sub.ref(0, 362857);

procedure acm_exit();
  free requires assertsPassed;
  modifies $M.39;



implementation acm_exit()
{
  var $p0: ref;
  var $p2: ref;
  var vslice_dummy_var_78: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} ldv_usb_deregister_41(acm_driver);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $p0 := $M.16;
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} vslice_dummy_var_78 := tty_unregister_driver($p0);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $p2 := $M.16;
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} put_tty_driver($p2);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    return;
}



const acm_init: ref;

axiom acm_init == $sub.ref(0, 363889);

procedure acm_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.0, $M.39, $M.49, $M.35, $CurrAddr;



implementation acm_init() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $p34: ref;
  var $i4: i32;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} $p0 := alloc_tty_driver(256);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    $M.16 := $p0;
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $p1 := $M.16;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i2, 0);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p5 := $M.16;
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 184)), $mul.ref(24, 1));
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p6, .str.70);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p7 := $M.16;
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 184)), $mul.ref(32, 1));
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, .str.71);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $p9 := $M.16;
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 184)), $mul.ref(44, 1));
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, 166);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $p11 := $M.16;
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 184)), $mul.ref(48, 1));
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 0);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    $p13 := $M.16;
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 184)), $mul.ref(56, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p14, 3);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p15 := $M.16;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 184)), $mul.ref(58, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p16, 1);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $p17 := $M.16;
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 184)), $mul.ref(104, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, 12);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p19 := $M.16;
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 184)), $mul.ref(60, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 1048} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p21, tty_std_termios, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $p22 := $M.16;
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p22, $mul.ref(0, 184)), $mul.ref(60, 1)), $mul.ref(8, 1));
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, 3261);
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $p25 := $M.16;
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1049} tty_set_operations($p25, acm_ops);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $p26 := $M.16;
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $i27 := tty_register_driver($p26);
    call {:si_unique_call 1051} {:cexpr "retval"} boogie_si_record_i32($i27);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i30 := ldv_usb_register_driver_40(acm_driver, __this_module, .str.1);
    call {:si_unique_call 1054} {:cexpr "retval"} boogie_si_record_i32($i30);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} vslice_dummy_var_80 := printk.ref(.str.72);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $i4 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  $bb8:
    assume $i31 == 1;
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p32 := $M.16;
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} vslice_dummy_var_79 := tty_unregister_driver($p32);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p34 := $M.16;
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} put_tty_driver($p34);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i4 := $i30;
    goto $bb3;

  $bb5:
    assume $i28 == 1;
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $p29 := $M.16;
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1052} put_tty_driver($p29);
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    $i4 := $i27;
    goto $bb3;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32(0, 12);
    goto $bb3;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 364921);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    return;
}



const alloc_tty_driver: ref;

axiom alloc_tty_driver == $sub.ref(0, 365953);

procedure alloc_tty_driver($i0: i32) returns ($r: ref);
  free requires assertsPassed;



implementation alloc_tty_driver($i0: i32) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i1;
  var $i4: i8;
  var $i5: i1;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} {:cexpr "alloc_tty_driver:arg:lines"} boogie_si_record_i32($i0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1059} $p1 := __tty_alloc_driver($i0, __this_module, 0);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} $i3 := IS_ERR($p2);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i8($i3);
    call {:si_unique_call 1061} {:cexpr "tmp___0"} boogie_si_record_i8($i4);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i8.i1($i4);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $p1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $r := $p6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $p6 := $0.ref;
    goto $bb3;
}



const tty_set_operations: ref;

axiom tty_set_operations == $sub.ref(0, 366985);

procedure tty_set_operations($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation tty_set_operations($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    return;
}



const tty_register_driver: ref;

axiom tty_register_driver == $sub.ref(0, 368017);

procedure tty_register_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_register_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1062} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1063} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const put_tty_driver: ref;

axiom put_tty_driver == $sub.ref(0, 369049);

procedure put_tty_driver($p0: ref);
  free requires assertsPassed;



implementation put_tty_driver($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_register_driver_40: ref;

axiom ldv_usb_register_driver_40 == $sub.ref(0, 370081);

procedure ldv_usb_register_driver_40($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.39, $M.49, $M.35, $M.0, $CurrAddr;



implementation ldv_usb_register_driver_40($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $i3 := usb_register_driver($p0, $p1, $p2);
    call {:si_unique_call 1065} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 1066} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1067} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1068} ldv_usb_driver_3();
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_unregister_driver: ref;

axiom tty_unregister_driver == $sub.ref(0, 371113);

procedure tty_unregister_driver($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_unregister_driver($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1069} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1070} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const printk: ref;

axiom printk == $sub.ref(0, 372145);

procedure printk.ref($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation printk.ref($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1071} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1072} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const usb_register_driver: ref;

axiom usb_register_driver == $sub.ref(0, 373177);

procedure usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_register_driver($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1073} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1074} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __tty_alloc_driver: ref;

axiom __tty_alloc_driver == $sub.ref(0, 374209);

procedure __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref);
  free requires assertsPassed;



implementation __tty_alloc_driver($i0: i32, $p1: ref, $i2: i64) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} {:cexpr "__tty_alloc_driver:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1076} {:cexpr "__tty_alloc_driver:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p3 := external_alloc();
    goto corral_source_split_5061;

  corral_source_split_5061:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ldv_usb_deregister_41: ref;

axiom ldv_usb_deregister_41 == $sub.ref(0, 375241);

procedure ldv_usb_deregister_41($p0: ref);
  free requires assertsPassed;
  modifies $M.39;



implementation ldv_usb_deregister_41($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} usb_deregister($p0);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $M.39 := 0;
    call {:si_unique_call 1079} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    return;
}



const usb_deregister: ref;

axiom usb_deregister == $sub.ref(0, 376273);

procedure usb_deregister($p0: ref);
  free requires assertsPassed;



implementation usb_deregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 377305);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1080} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 1} true;
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 378337);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 379369);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 380401);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 381433);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 382465);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 383497);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 384529);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 385561);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 386593);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 387625);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 388657);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 389689);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 390721);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1081} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1082} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1083} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1084} __VERIFIER_assume($i4);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 391753);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 392785);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 393817);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 394849);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1085} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1086} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1087} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1088} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1089} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1090} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1091} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1092} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1093} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1094} __VERIFIER_assume($i7);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1095} __VERIFIER_assume($i11);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 395881);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 396913);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 397945);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 398977);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 400009);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 401041);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1096} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1097} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1098} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1099} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1100} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1101} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1102} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1103} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1104} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1105} __VERIFIER_assume($i7);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1106} __VERIFIER_assume($i11);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 402073);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 403105);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 404137);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 405169);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 406201);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 407233);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 408265);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 409297);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_bool: ref;

axiom __VERIFIER_nondet_bool == $sub.ref(0, 410329);

procedure __VERIFIER_nondet_bool() returns ($r: i1);
  free requires assertsPassed;



implementation __VERIFIER_nondet_bool() returns ($r: i1)
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i6: i1;
  var $i10: i32;
  var $i11: i1;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1107} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1108} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i1 := $ne.i32($i0, 0);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 1109} {:cexpr "x"} boogie_si_record_i8($i2);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $i6 := 1;
    assume {:branchcond $i5} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i5 == 1);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 1} true;
    $i7 := $trunc.i8.i1($i2);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 1} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 1} true;
    $i9 := $eq.i32($i8, 1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i6 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 1} true;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 1} true;
    $i10 := $zext.i1.i32($i6);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1110} __VERIFIER_assume($i10);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i2);
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;
}



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 411361);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1111} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1112} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1113} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 412393);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1114} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1115} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1116} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 413425);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1117} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1118} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 414457);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 415489);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1119} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1120} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 416521);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 417553);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 418585);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1121} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1122} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1123} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1124} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p6 := malloc($i5);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    call {:si_unique_call 1126} cmdloc_dummy_var_36 := $memset.i8(cmdloc_dummy_var_35, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_36;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 419617);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 420649);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.8, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.16, $M.102, $M.103, $M.104, $M.0, $M.105;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1127} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.18 := 0;
    call {:si_unique_call 1128} {:cexpr "ldv_work_1_0"} boogie_si_record_i32(0);
    $M.19 := $0.ref;
    $M.20 := 0;
    call {:si_unique_call 1129} {:cexpr "ldv_work_1_1"} boogie_si_record_i32(0);
    $M.21 := $0.ref;
    $M.22 := 0;
    call {:si_unique_call 1130} {:cexpr "ldv_work_1_2"} boogie_si_record_i32(0);
    $M.23 := $0.ref;
    $M.24 := 0;
    call {:si_unique_call 1131} {:cexpr "ldv_work_1_3"} boogie_si_record_i32(0);
    $M.25 := $0.ref;
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := 0;
    call {:si_unique_call 1132} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(0);
    $M.39 := 0;
    call {:si_unique_call 1133} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.40 := 0;
    call {:si_unique_call 1134} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(0);
    $M.41 := 0;
    call {:si_unique_call 1135} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.42 := 0;
    call {:si_unique_call 1136} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.43 := 0;
    call {:si_unique_call 1137} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.44 := 0;
    call {:si_unique_call 1138} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.45 := 0;
    call {:si_unique_call 1139} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 1140} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 1141} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 1142} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 1143} {:cexpr "usb_counter"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 1144} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 1145} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 1146} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 1147} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.8 := 0;
    call {:si_unique_call 1148} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.55 := $store.i16($M.55, __mod_usb__acm_ids_device_table, 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(24, 1)), 0);
    $M.55 := $store.i16($M.55, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(0, 1)), 0);
    $M.56 := $store.i16($M.56, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(2, 1)), 0);
    $M.57 := $store.i16($M.57, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(4, 1)), 0);
    $M.58 := $store.i16($M.58, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(6, 1)), 0);
    $M.59 := $store.i16($M.59, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(8, 1)), 0);
    $M.60 := $store.i8($M.60, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(10, 1)), 0);
    $M.61 := $store.i8($M.61, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(11, 1)), 0);
    $M.62 := $store.i8($M.62, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(12, 1)), 0);
    $M.63 := $store.i8($M.63, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(13, 1)), 0);
    $M.64 := $store.i8($M.64, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(14, 1)), 0);
    $M.65 := $store.i8($M.65, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(15, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(16, 1)), 0);
    $M.67 := $store.i64($M.67, $add.ref($add.ref($add.ref(__mod_usb__acm_ids_device_table, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(24, 1)), 0);
    $M.16 := $0.ref;
    $M.102 := $store.i16($M.102, acm_ids, 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1901);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(4, 1)), 6);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(0, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(2, 1)), 6127);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(4, 1)), 28672);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(1, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(2, 1)), 2160);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(4, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(2, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(2, 1)), 3725);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(4, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(3, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(2, 1)), 3725);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(4, 1)), 13097);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(4, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1154);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(4, 1)), 515);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(5, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1947);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(4, 1)), 15);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(6, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(2, 1)), 2766);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(4, 1)), 5634);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(7, 32)), $mul.ref(24, 1)), 2);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(2, 1)), 2766);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(4, 1)), 5640);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(8, 32)), $mul.ref(24, 1)), 2);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(2, 1)), 2766);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(4, 1)), 5649);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(9, 32)), $mul.ref(24, 1)), 2);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(4, 1)), 28672);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(10, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(2, 1)), 2051);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(4, 1)), 12437);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(11, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(2, 1)), 1394);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(4, 1)), 4897);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(12, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(2, 1)), 1394);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(4, 1)), 4900);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(13, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(2, 1)), 1394);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(4, 1)), 4904);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(14, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(2, 1)), 8415);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(4, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(15, 32)), $mul.ref(24, 1)), 64);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(2, 1)), 8580);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(4, 1)), 28);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(4, 1)), 25637);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(4, 1)), 11665);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(4, 1)), 11666);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(19, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(4, 1)), 11667);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(20, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(4, 1)), 11669);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(21, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(4, 1)), 11670);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(22, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(4, 1)), 11671);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(23, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(4, 1)), 11673);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(24, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(2, 1)), 8888);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(4, 1)), 11674);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(25, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(2, 1)), 1394);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(4, 1)), 4905);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(26, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(2, 1)), 1394);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(4, 1)), 4928);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(27, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(2, 1)), 1529);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(4, 1)), 16386);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(28, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(2, 1)), 7099);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(4, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(29, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(2, 1)), 5494);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(4, 1)), 945);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(30, 32)), $mul.ref(24, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(2, 1)), 10514);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(4, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(31, 32)), $mul.ref(24, 1)), 128);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(4, 1)), 1069);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(32, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(4, 1)), 1240);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(33, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(4, 1)), 1225);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(34, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(4, 1)), 1049);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(35, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(4, 1)), 1101);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(36, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(4, 1)), 1);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(37, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(4, 1)), 1141);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(38, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(4, 1)), 1288);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(39, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(4, 1)), 1048);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(40, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(4, 1)), 1061);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(41, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(4, 1)), 1158);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(42, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(4, 1)), 1247);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(43, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(4, 1)), 14);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(44, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(4, 1)), 1093);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(45, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(4, 1)), 1071);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(46, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(4, 1)), 1166);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(47, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(4, 1)), 1056);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(48, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(4, 1)), 1254);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(49, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(4, 1)), 1202);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(50, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(4, 1)), 308);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(51, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(4, 1)), 1134);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(52, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(4, 1)), 47);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(53, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(4, 1)), 136);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(54, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(4, 1)), 252);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(55, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(4, 1)), 66);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(56, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(4, 1)), 176);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(57, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(4, 1)), 171);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(58, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(4, 1)), 1153);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(59, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(4, 1)), 7);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(60, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(4, 1)), 113);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(61, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(4, 1)), 1264);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(62, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(4, 1)), 112);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(63, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(4, 1)), 233);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(64, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(4, 1)), 153);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(65, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(4, 1)), 296);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(66, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(4, 1)), 143);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(67, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(4, 1)), 160);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(68, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(4, 1)), 123);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(69, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(4, 1)), 148);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(70, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(4, 1)), 58);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(71, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(4, 1)), 233);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(72, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(4, 1)), 264);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(73, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(4, 1)), 501);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(74, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(4, 1)), 739);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(75, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(4, 1)), 376);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(76, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(4, 1)), 270);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(77, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(4, 1)), 729);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(78, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(4, 1)), 464);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(79, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(4, 1)), 547);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(80, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(4, 1)), 629);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(81, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(4, 1)), 620);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(82, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(4, 1)), 340);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(83, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(4, 1)), 1230);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(84, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(4, 1)), 468);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(85, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(4, 1)), 770);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(86, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(4, 1)), 821);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(87, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(2, 1)), 1057);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(4, 1)), 973);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(88, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(0, 1)), 899);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(2, 1)), 1255);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(4, 1)), 26193);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(15, 1)), $sub.i8(0, 1));
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(89, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(2, 1)), 1003);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(4, 1)), 48);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(90, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(2, 1)), 1240);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(4, 1)), 11);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(91, 32)), $mul.ref(24, 1)), 16);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(2, 1)), 1240);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(4, 1)), 130);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(92, 32)), $mul.ref(24, 1)), 32);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(0, 1)), 3);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(2, 1)), 1240);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(4, 1)), 131);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(93, 32)), $mul.ref(24, 1)), 32);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(0, 1)), 896);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(2, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(94, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(0, 1)), 896);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(2, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(15, 1)), 1);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(95, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(0, 1)), 896);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(2, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(15, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(96, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(0, 1)), 896);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(2, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(15, 1)), 3);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(97, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(0, 1)), 896);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(2, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(15, 1)), 4);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(98, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(0, 1)), 896);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(2, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(15, 1)), 5);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(99, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(0, 1)), 896);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(2, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(13, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(14, 1)), 2);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(15, 1)), 6);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(100, 32)), $mul.ref(24, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(0, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(2, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(4, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(6, 1)), 0);
    $M.102 := $store.i16($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(8, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(10, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(11, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(12, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(13, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(14, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(15, 1)), 0);
    $M.102 := $store.i8($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(16, 1)), 0);
    $M.102 := $store.i64($M.102, $add.ref($add.ref($add.ref(acm_ids, $mul.ref(0, 3264)), $mul.ref(101, 32)), $mul.ref(24, 1)), 0);
    $M.103 := $store.ref($M.103, acm_driver, .str.1);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(8, 1)), acm_probe);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(16, 1)), acm_disconnect);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(24, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(32, 1)), acm_suspend);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(40, 1)), acm_resume);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(48, 1)), acm_reset_resume);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(56, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(64, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(72, 1)), acm_ids);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.103 := $store.i64($M.103, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(80, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $0.ref);
    $M.103 := $store.i8($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(32, 1)), 0);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(36, 1)), 0);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(40, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(48, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(56, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(64, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(72, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(80, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(88, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(96, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(104, 1)), $0.ref);
    $M.103 := $store.ref($M.103, $add.ref($add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(112, 1)), $0.ref);
    $M.103 := $store.i32($M.103, $add.ref($add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(168, 1)), $mul.ref(120, 1)), 0);
    $M.103 := $store.i8($M.103, $add.ref($add.ref(acm_driver, $mul.ref(0, 304)), $mul.ref(296, 1)), 6);
    $M.104 := $store.ref($M.104, dev_attr_iCountryCodeRelDate, .str.40);
    $M.104 := $store.i16($M.104, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.104 := $store.ref($M.104, $add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(32, 1)), show_country_rel_date);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(dev_attr_iCountryCodeRelDate, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.104 := $store.ref($M.104, dev_attr_wCountryCodes, .str.39);
    $M.104 := $store.i16($M.104, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.104 := $store.ref($M.104, $add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(32, 1)), show_country_codes);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(dev_attr_wCountryCodes, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.104 := $store.ref($M.104, dev_attr_bmCapabilities, .str.38);
    $M.104 := $store.i16($M.104, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(8, 1)), 292);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(10, 1)), 0);
    $M.104 := $store.ref($M.104, $add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(1, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(2, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(3, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(5, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(6, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.i8($M.104, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(7, 1)), $mul.ref(0, 1)), 0);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(32, 1)), show_caps);
    $M.104 := $store.ref($M.104, $add.ref($add.ref(dev_attr_bmCapabilities, $mul.ref(0, 48)), $mul.ref(40, 1)), $0.ref);
    $M.0 := $store.ref($M.0, acm_port_ops, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 40)), $mul.ref(8, 1)), acm_port_dtr_rts);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 40)), $mul.ref(16, 1)), acm_port_shutdown);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 40)), $mul.ref(24, 1)), acm_port_activate);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_port_ops, $mul.ref(0, 40)), $mul.ref(32, 1)), acm_port_destruct);
    $M.0 := $store.ref($M.0, acm_minors, $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(8, 1)), $0.ref);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.30);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(24, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(96, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_minors, $mul.ref(0, 112)), $mul.ref(104, 1)), $0.ref);
    $M.0 := $store.i32($M.0, acm_minors_lock, 1);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), $sub.i32(0, 559067475));
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), $sub.i32(0, 1));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $i2p.i64.ref($sub.i64(0, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), .str.28);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(8, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(0, 1)), $add.ref(acm_minors_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(80, 1)), $mul.ref(8, 1)), $add.ref(acm_minors_lock, $mul.ref(80, 1)));
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(96, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(104, 1)), acm_minors_lock);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(0, 1)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.0 := $store.ref($M.0, $add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(24, 1)), .str.29);
    $M.0 := $store.i32($M.0, $add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(32, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(acm_minors_lock, $mul.ref(0, 160)), $mul.ref(112, 1)), $mul.ref(40, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(14, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(15, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(16, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(20, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(23, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(24, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(14, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.30, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(10, 1)), 46);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(14, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.30, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.105 := $store.i8($M.105, .str.54, 37);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.54, $mul.ref(0, 3)), $mul.ref(1, 1)), 100);
    $M.105 := $store.i8($M.105, $add.ref($add.ref(.str.54, $mul.ref(0, 3)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i8($M.0, .str.70, 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 4)), $mul.ref(1, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 4)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.70, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.71, 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(1, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(2, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(3, 1)), 65);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(4, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(5, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.71, $mul.ref(0, 7)), $mul.ref(6, 1)), 0);
    call {:si_unique_call 1149} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 421681);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 422713);

procedure devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 423745);

procedure devirtbounce.2(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 424777);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i64, arg2: ref) returns ($r: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 425809);

procedure devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 426841);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 1150} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 427873);

procedure devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref, arg: ref, arg1: i32, arg2: i32, arg3: ref) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i6 := $eq.ref(default_wake_function, $p0);
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    $i5 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i5} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i5 == 1);
    assume false;
    return;

  $bb2:
    assume $i5 == 1;
    call {:si_unique_call 1151} $i1 := __builtinx_object_size();
    $r := $i1;
    return;

  $bb3:
    assume $i6 == 1;
    $p2 := $bitcast.ref.ref(arg);
    $p3 := $bitcast.ref.ref(arg3);
    call {:si_unique_call 1152} $i4 := default_wake_function($p2, arg1, arg2, $p3);
    $r := $i4;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i1(x: i1);



procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.8, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.16, $M.102, $M.103, $M.104, $M.0, $M.105, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1153} __SMACK_static_init();
    call {:si_unique_call 1154} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.33, $M.38, $M.39, $M.40, $M.41, $M.18, $M.20, $M.22, $M.24, $M.42, $M.43, $M.44, $M.45, $M.46, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.47, $M.48, $M.17, $M.50, $M.8, $M.51, $M.52, $M.53, $M.36, $M.37, $M.34, $M.19, $M.21, $M.23, $M.25, $M.35, $M.49, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.16, $M.102, $M.103, $M.104, $M.105, $CurrAddr, $M.27, $M.28, $M.29, $M.30, $M.31, $M.26, $M.32;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation acm_port_shutdown_loop_$bb7(in_$p2: ref, in_$p34: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1)
{

  entry:
    out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47 := in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$p45, in_$i46, in_$i47;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb11:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$p38 := out_$p45;
    goto $bb11_dummy;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    out_$i47 := $eq.i64(out_$i46, 0);
    goto corral_source_split_97;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    out_$i46 := $p2i.ref.i64(out_$p45);
    goto corral_source_split_96;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} out_$p45 := usb_get_from_anchor(in_$p34);
    goto corral_source_split_95;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 15} usb_autopm_put_interface_async(out_$p44);
    goto corral_source_split_94;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_93;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(8, 1));
    goto corral_source_split_92;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p42, 0);
    goto corral_source_split_91;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 40)), $mul.ref(20, 1));
    goto corral_source_split_90;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p40);
    goto corral_source_split_89;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    out_$p40 := $load.ref($M.0, out_$p39);
    goto corral_source_split_88;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p38, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_87;

  $bb11_dummy:
    call {:si_unique_call 1} out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47 := acm_port_shutdown_loop_$bb7(in_$p2, in_$p34, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$p45, out_$i46, out_$i47);
    return;

  exit:
    return;
}



procedure acm_port_shutdown_loop_$bb7(in_$p2: ref, in_$p34: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$i46: i64, in_$i47: i1) returns (out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$i46: i64, out_$i47: i1);
  modifies $M.0;



implementation acm_port_shutdown_loop_$bb19(in_$p2: ref, in_$p54: ref, in_$i58: i64, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i57: i32) returns (out_$i58: i64, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i57: i32)
{

  entry:
    out_$i58, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i57 := in_$i58, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i57;
    goto $bb19, exit;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_113;

  $bb21:
    assume out_$i64 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := out_$i62;
    goto $bb21_dummy;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    out_$i64 := $sgt.i32(out_$i63, out_$i62);
    goto corral_source_split_121;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    out_$i63 := $load.i32($M.0, in_$p54);
    goto corral_source_split_120;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    out_$i62 := $add.i32(out_$i57, 1);
    call {:si_unique_call 20} {:cexpr "i"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_119;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} usb_kill_urb(out_$p61);
    goto corral_source_split_118;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_117;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1752, 1)), $mul.ref(out_$i58, 8));
    goto corral_source_split_116;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i58 := $sext.i32.i64(out_$i57);
    goto corral_source_split_115;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i58, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i57 := acm_port_shutdown_loop_$bb19(in_$p2, in_$p54, out_$i58, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i57);
    return;

  exit:
    return;
}



procedure acm_port_shutdown_loop_$bb19(in_$p2: ref, in_$p54: ref, in_$i58: i64, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i1, in_$i57: i32) returns (out_$i58: i64, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i1, out_$i57: i32);



implementation acm_port_activate_loop_$bb24(in_$p3: ref, in_$p68: ref, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i71: i32) returns (out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i71: i32)
{

  entry:
    out_$i72, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i71 := in_$i72, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i71;
    goto $bb24, exit;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_297;

  $bb26:
    assume out_$i78 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := out_$i76;
    goto $bb26_dummy;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    out_$i78 := $sgt.i32(out_$i77, out_$i76);
    goto corral_source_split_305;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    out_$i77 := $load.i32($M.0, in_$p68);
    goto corral_source_split_304;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    out_$i76 := $add.i32(out_$i71, 1);
    call {:si_unique_call 58} {:cexpr "i"} boogie_si_record_i32(out_$i76);
    goto corral_source_split_303;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} usb_kill_urb(out_$p75);
    goto corral_source_split_302;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref($sub.ref(0, 24), 3344)), $mul.ref(1752, 1)), $mul.ref(out_$i72, 8));
    goto corral_source_split_300;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i72 := $sext.i32.i64(out_$i71);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i72, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i71 := acm_port_activate_loop_$bb24(in_$p3, in_$p68, out_$i72, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i71);
    return;

  exit:
    return;
}



procedure acm_port_activate_loop_$bb24(in_$p3: ref, in_$p68: ref, in_$i72: i64, in_$p74: ref, in_$p75: ref, in_$i76: i32, in_$i77: i32, in_$i78: i1, in_$i71: i32) returns (out_$i72: i64, out_$p74: ref, out_$p75: ref, out_$i76: i32, out_$i77: i32, out_$i78: i1, out_$i71: i32);



implementation acm_submit_read_urbs_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i5: i32)
{

  entry:
    out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5 := in_$i6, in_$i7, in_$i8, in_$i10, in_$i11, in_$i12, in_$i5;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_570;

  $bb10:
    assume out_$i12 == 1;
    assume {:verifier.code 0} true;
    out_$i5 := out_$i10;
    goto $bb10_dummy;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    out_$i12 := $sgt.i32(out_$i11, out_$i10);
    goto corral_source_split_581;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    out_$i11 := $load.i32($M.0, in_$p2);
    goto corral_source_split_580;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i10 := $add.i32(out_$i5, 1);
    call {:si_unique_call 105} {:cexpr "i"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_579;

  $bb7:
    assume !(out_$i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    out_$i8 := out_$i6;
    assume true;
    goto $bb7;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    out_$i7 := $ne.i32(out_$i6, 0);
    goto corral_source_split_573;

  SeqInstr_12:
    call {:si_unique_call 104} {:cexpr "res"} boogie_si_record_i32(out_$i6);
    goto corral_source_split_572;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} out_$i6 := acm_submit_read_urb(in_$p0, out_$i5, in_$i1);
    goto SeqInstr_11;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5 := acm_submit_read_urbs_loop_$bb4(in_$p0, in_$i1, in_$p2, out_$i6, out_$i7, out_$i8, out_$i10, out_$i11, out_$i12, out_$i5);
    return;

  exit:
    return;
}



procedure acm_submit_read_urbs_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$p2: ref, in_$i6: i32, in_$i7: i1, in_$i8: i32, in_$i10: i32, in_$i11: i32, in_$i12: i1, in_$i5: i32) returns (out_$i6: i32, out_$i7: i1, out_$i8: i32, out_$i10: i32, out_$i11: i32, out_$i12: i1, out_$i5: i32);
  modifies $CurrAddr, assertsPassed;



implementation acm_probe_loop_$bb262(in_$i32: i32, in_$p468: ref, in_$i821: i64, in_$p823: ref, in_$p824: ref, in_$i825: i32, in_$i826: i1, in_$i820: i32) returns (out_$i821: i64, out_$p823: ref, out_$p824: ref, out_$i825: i32, out_$i826: i1, out_$i820: i32)
{

  entry:
    out_$i821, out_$p823, out_$p824, out_$i825, out_$i826, out_$i820 := in_$i821, in_$p823, in_$p824, in_$i825, in_$i826, in_$i820;
    goto $bb262, exit;

  $bb262:
    assume {:verifier.code 0} true;
    goto corral_source_split_1952;

  $bb264:
    assume out_$i826 == 1;
    assume {:verifier.code 0} true;
    out_$i820 := out_$i825;
    goto $bb264_dummy;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    out_$i826 := $slt.i32(out_$i825, in_$i32);
    goto corral_source_split_1959;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    out_$i825 := $add.i32(out_$i820, 1);
    call {:si_unique_call 347} {:cexpr "i"} boogie_si_record_i32(out_$i825);
    goto corral_source_split_1958;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 346} usb_free_urb(out_$p824);
    goto corral_source_split_1957;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    out_$p824 := $load.ref($M.0, out_$p823);
    goto corral_source_split_1956;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    out_$p823 := $add.ref($add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref(out_$i821, 8));
    goto corral_source_split_1955;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i821 := $sext.i32.i64(out_$i820);
    goto corral_source_split_1954;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb264_dummy:
    call {:si_unique_call 1} out_$i821, out_$p823, out_$p824, out_$i825, out_$i826, out_$i820 := acm_probe_loop_$bb262(in_$i32, in_$p468, out_$i821, out_$p823, out_$p824, out_$i825, out_$i826, out_$i820);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb262(in_$i32: i32, in_$p468: ref, in_$i821: i64, in_$p823: ref, in_$p824: ref, in_$i825: i32, in_$i826: i1, in_$i820: i32) returns (out_$i821: i64, out_$p823: ref, out_$p824: ref, out_$i825: i32, out_$i826: i1, out_$i820: i32);



implementation acm_probe_loop_$bb217(in_$p26: ref, in_$p335: ref, in_$p467: ref, in_$p468: ref, in_$p636: ref, in_$p637: ref, in_$i638: i64, in_$p639: ref, in_$p640: ref, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$i644: i64, in_$i645: i1, in_$i647: i32, in_$i648: i1, in_$p649: ref, in_$i650: i8, in_$i651: i32, in_$i652: i32, in_$p653: ref, in_$p654: ref, in_$i655: i32, in_$p656: ref, in_$i657: i32, in_$p658: ref, in_$p659: ref, in_$i660: i8, in_$i661: i32, in_$p662: ref, in_$i663: i8, in_$i664: i32, in_$i665: i32, in_$p666: ref, in_$p667: ref, in_$i668: i32, in_$p669: ref, in_$i670: i32, in_$p671: ref, in_$p672: ref, in_$p673: ref, in_$p674: ref, in_$i675: i32, in_$i676: i32, in_$p677: ref, in_$p678: ref, in_$p679: ref, in_$p680: ref, in_$i681: i32, in_$i682: i1, in_$i635: i32) returns (out_$p636: ref, out_$p637: ref, out_$i638: i64, out_$p639: ref, out_$p640: ref, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$i644: i64, out_$i645: i1, out_$i647: i32, out_$i648: i1, out_$p649: ref, out_$i650: i8, out_$i651: i32, out_$i652: i32, out_$p653: ref, out_$p654: ref, out_$i655: i32, out_$p656: ref, out_$i657: i32, out_$p658: ref, out_$p659: ref, out_$i660: i8, out_$i661: i32, out_$p662: ref, out_$i663: i8, out_$i664: i32, out_$i665: i32, out_$p666: ref, out_$p667: ref, out_$i668: i32, out_$p669: ref, out_$i670: i32, out_$p671: ref, out_$p672: ref, out_$p673: ref, out_$p674: ref, out_$i675: i32, out_$i676: i32, out_$p677: ref, out_$p678: ref, out_$p679: ref, out_$p680: ref, out_$i681: i32, out_$i682: i1, out_$i635: i32)
{

  entry:
    out_$p636, out_$p637, out_$i638, out_$p639, out_$p640, out_$p641, out_$p642, out_$p643, out_$i644, out_$i645, out_$i647, out_$i648, out_$p649, out_$i650, out_$i651, out_$i652, out_$p653, out_$p654, out_$i655, out_$p656, out_$i657, out_$p658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$p667, out_$i668, out_$p669, out_$i670, out_$p671, out_$p672, out_$p673, out_$p674, out_$i675, out_$i676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i635 := in_$p636, in_$p637, in_$i638, in_$p639, in_$p640, in_$p641, in_$p642, in_$p643, in_$i644, in_$i645, in_$i647, in_$i648, in_$p649, in_$i650, in_$i651, in_$i652, in_$p653, in_$p654, in_$i655, in_$p656, in_$i657, in_$p658, in_$p659, in_$i660, in_$i661, in_$p662, in_$i663, in_$i664, in_$i665, in_$p666, in_$p667, in_$i668, in_$p669, in_$i670, in_$p671, in_$p672, in_$p673, in_$p674, in_$i675, in_$i676, in_$p677, in_$p678, in_$p679, in_$p680, in_$i681, in_$i682, in_$i635;
    goto $bb217, exit;

  $bb217:
    assume {:verifier.code 0} true;
    goto corral_source_split_1697;

  $bb226:
    assume out_$i682 == 1;
    assume {:verifier.code 0} true;
    out_$i635 := out_$i681;
    goto $bb226_dummy;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb226;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    out_$i682 := $sle.i32(out_$i681, 15);
    goto corral_source_split_1759;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    out_$i681 := $add.i32(out_$i635, 1);
    call {:si_unique_call 307} {:cexpr "i"} boogie_si_record_i32(out_$i681);
    goto corral_source_split_1758;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p680, in_$p467);
    goto corral_source_split_1757;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    out_$p680 := $add.ref($add.ref(out_$p637, $mul.ref(out_$i638, 40)), $mul.ref(32, 1));
    goto corral_source_split_1756;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p679, out_$i676);
    goto corral_source_split_1755;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    out_$p679 := $add.ref($add.ref(out_$p678, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1754;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    out_$p678 := $load.ref($M.0, out_$p677);
    goto corral_source_split_1753;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    out_$p677 := $add.ref($add.ref(out_$p637, $mul.ref(out_$i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1752;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    out_$i676 := $or.i32(out_$i675, 4);
    goto corral_source_split_1751;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    out_$i675 := $load.i32($M.0, out_$p674);
    goto corral_source_split_1750;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    out_$p674 := $add.ref($add.ref(out_$p673, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1749;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    out_$p673 := $load.ref($M.0, out_$p672);
    goto corral_source_split_1748;

  $bb225:
    assume {:verifier.code 0} true;
    out_$p672 := $add.ref($add.ref(out_$p637, $mul.ref(out_$i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1747;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 306} usb_fill_bulk_urb(out_$p667, in_$p26, out_$i668, $0.ref, out_$i670, acm_write_bulk, out_$p671);
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    goto $bb225;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} usb_fill_int_urb(out_$p654, in_$p26, out_$i655, $0.ref, out_$i657, acm_write_bulk, out_$p658, out_$i661);
    goto corral_source_split_1733;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    out_$i661 := $zext.i8.i32(out_$i660);
    goto corral_source_split_1732;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    out_$i660 := $load.i8($M.0, out_$p659);
    goto corral_source_split_1731;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    out_$p659 := $add.ref($add.ref(in_$p335, $mul.ref(0, 10)), $mul.ref(6, 1));
    goto corral_source_split_1730;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    out_$p658 := $bitcast.ref.ref(out_$p639);
    goto corral_source_split_1729;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    out_$i657 := $load.i32($M.0, out_$p656);
    goto corral_source_split_1728;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    out_$p656 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_1727;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    out_$i655 := $or.i32(out_$i652, 1073741824);
    goto corral_source_split_1726;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    out_$p654 := $load.ref($M.0, out_$p653);
    goto corral_source_split_1725;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    out_$p653 := $add.ref($add.ref(out_$p637, $mul.ref(out_$i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1724;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} out_$i652 := __create_pipe(in_$p26, out_$i651);
    call {:si_unique_call 302} {:cexpr "tmp___23"} boogie_si_record_i32(out_$i652);
    goto corral_source_split_1723;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    out_$i651 := $zext.i8.i32(out_$i650);
    goto corral_source_split_1722;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    out_$i650 := $load.i8($M.0, out_$p649);
    goto corral_source_split_1721;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    out_$p649 := $add.ref($add.ref(in_$p335, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1720;

  $bb223:
    assume out_$i648 == 1;
    goto corral_source_split_1719;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    out_$i648 := $ne.i32(out_$i647, 0);
    goto corral_source_split_1717;

  $bb222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} out_$i647 := usb_endpoint_xfer_int(in_$p335);
    call {:si_unique_call 300} {:cexpr "tmp___25"} boogie_si_record_i32(out_$i647);
    goto corral_source_split_1716;

  $bb220:
    assume !(out_$i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb222;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb220;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    out_$i645 := $eq.i64(out_$i644, 0);
    goto corral_source_split_1709;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    out_$i644 := $p2i.ref.i64(out_$p643);
    goto corral_source_split_1708;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    out_$p643 := $load.ref($M.0, out_$p642);
    goto corral_source_split_1707;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    out_$p642 := $add.ref($add.ref(out_$p637, $mul.ref(out_$i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1706;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p641, out_$p640);
    goto corral_source_split_1705;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    out_$p641 := $add.ref($add.ref(out_$p637, $mul.ref(out_$i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1704;

  SeqInstr_45:
    goto corral_source_split_1703;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} out_$p640 := ldv_usb_alloc_urb_37(0, 208);
    goto SeqInstr_44;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    out_$p639 := $add.ref(out_$p637, $mul.ref(out_$i638, 40));
    goto corral_source_split_1702;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    out_$i638 := $sext.i32.i64(out_$i635);
    goto corral_source_split_1701;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    out_$p637 := $bitcast.ref.ref(out_$p636);
    goto corral_source_split_1700;

  $bb218:
    assume {:verifier.code 0} true;
    out_$p636 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(1104, 1));
    goto corral_source_split_1699;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    out_$p671 := $bitcast.ref.ref(out_$p639);
    goto corral_source_split_1745;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    out_$i670 := $load.i32($M.0, out_$p669);
    goto corral_source_split_1744;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    out_$p669 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_1743;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    out_$i668 := $or.i32(out_$i665, $sub.i32(0, 1073741824));
    goto corral_source_split_1742;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    out_$p667 := $load.ref($M.0, out_$p666);
    goto corral_source_split_1741;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    out_$p666 := $add.ref($add.ref(out_$p637, $mul.ref(out_$i638, 40)), $mul.ref(24, 1));
    goto corral_source_split_1740;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} out_$i665 := __create_pipe(in_$p26, out_$i664);
    call {:si_unique_call 305} {:cexpr "tmp___24"} boogie_si_record_i32(out_$i665);
    goto corral_source_split_1739;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    out_$i664 := $zext.i8.i32(out_$i663);
    goto corral_source_split_1738;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    out_$i663 := $load.i8($M.0, out_$p662);
    goto corral_source_split_1737;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    out_$p662 := $add.ref($add.ref(in_$p335, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_1736;

  $bb224:
    assume !(out_$i648 == 1);
    goto corral_source_split_1735;

  $bb226_dummy:
    call {:si_unique_call 1} out_$p636, out_$p637, out_$i638, out_$p639, out_$p640, out_$p641, out_$p642, out_$p643, out_$i644, out_$i645, out_$i647, out_$i648, out_$p649, out_$i650, out_$i651, out_$i652, out_$p653, out_$p654, out_$i655, out_$p656, out_$i657, out_$p658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$p667, out_$i668, out_$p669, out_$i670, out_$p671, out_$p672, out_$p673, out_$p674, out_$i675, out_$i676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i635 := acm_probe_loop_$bb217(in_$p26, in_$p335, in_$p467, in_$p468, out_$p636, out_$p637, out_$i638, out_$p639, out_$p640, out_$p641, out_$p642, out_$p643, out_$i644, out_$i645, out_$i647, out_$i648, out_$p649, out_$i650, out_$i651, out_$i652, out_$p653, out_$p654, out_$i655, out_$p656, out_$i657, out_$p658, out_$p659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$i665, out_$p666, out_$p667, out_$i668, out_$p669, out_$i670, out_$p671, out_$p672, out_$p673, out_$p674, out_$i675, out_$i676, out_$p677, out_$p678, out_$p679, out_$p680, out_$i681, out_$i682, out_$i635);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb217(in_$p26: ref, in_$p335: ref, in_$p467: ref, in_$p468: ref, in_$p636: ref, in_$p637: ref, in_$i638: i64, in_$p639: ref, in_$p640: ref, in_$p641: ref, in_$p642: ref, in_$p643: ref, in_$i644: i64, in_$i645: i1, in_$i647: i32, in_$i648: i1, in_$p649: ref, in_$i650: i8, in_$i651: i32, in_$i652: i32, in_$p653: ref, in_$p654: ref, in_$i655: i32, in_$p656: ref, in_$i657: i32, in_$p658: ref, in_$p659: ref, in_$i660: i8, in_$i661: i32, in_$p662: ref, in_$i663: i8, in_$i664: i32, in_$i665: i32, in_$p666: ref, in_$p667: ref, in_$i668: i32, in_$p669: ref, in_$i670: i32, in_$p671: ref, in_$p672: ref, in_$p673: ref, in_$p674: ref, in_$i675: i32, in_$i676: i32, in_$p677: ref, in_$p678: ref, in_$p679: ref, in_$p680: ref, in_$i681: i32, in_$i682: i1, in_$i635: i32) returns (out_$p636: ref, out_$p637: ref, out_$i638: i64, out_$p639: ref, out_$p640: ref, out_$p641: ref, out_$p642: ref, out_$p643: ref, out_$i644: i64, out_$i645: i1, out_$i647: i32, out_$i648: i1, out_$p649: ref, out_$i650: i8, out_$i651: i32, out_$i652: i32, out_$p653: ref, out_$p654: ref, out_$i655: i32, out_$p656: ref, out_$i657: i32, out_$p658: ref, out_$p659: ref, out_$i660: i8, out_$i661: i32, out_$p662: ref, out_$i663: i8, out_$i664: i32, out_$i665: i32, out_$p666: ref, out_$p667: ref, out_$i668: i32, out_$p669: ref, out_$i670: i32, out_$p671: ref, out_$p672: ref, out_$p673: ref, out_$p674: ref, out_$i675: i32, out_$i676: i32, out_$p677: ref, out_$p678: ref, out_$p679: ref, out_$p680: ref, out_$i681: i32, out_$i682: i1, out_$i635: i32);
  modifies $M.0, assertsPassed;



implementation acm_probe_loop_$bb202(in_$i32: i32, in_$p467: ref, in_$p468: ref, in_$i480: i32, in_$p575: ref, in_$p576: ref, in_$i577: i64, in_$p578: ref, in_$p579: ref, in_$p580: ref, in_$i581: i64, in_$p582: ref, in_$p583: ref, in_$p584: ref, in_$p585: ref, in_$p586: ref, in_$i587: i64, in_$i588: i1, in_$p590: ref, in_$p591: ref, in_$p592: ref, in_$i593: i64, in_$i594: i1, in_$p595: ref, in_$i596: i32, in_$i597: i32, in_$p598: ref, in_$p599: ref, in_$i600: i64, in_$p601: ref, in_$p602: ref, in_$p603: ref, in_$i604: i8, in_$i605: i32, in_$i606: i1, in_$p607: ref, in_$p608: ref, in_$p609: ref, in_$i610: i32, in_$p611: ref, in_$p612: ref, in_$p613: ref, in_$i614: i32, in_$p615: ref, in_$p616: ref, in_$i617: i8, in_$i618: i32, in_$p619: ref, in_$p620: ref, in_$p621: ref, in_$i622: i32, in_$p623: ref, in_$p624: ref, in_$p625: ref, in_$i626: i32, in_$p627: ref, in_$i628: i64, in_$p630: ref, in_$i631: i64, in_$p632: ref, in_$i633: i32, in_$i634: i1, in_$i574: i32) returns (out_$p575: ref, out_$p576: ref, out_$i577: i64, out_$p578: ref, out_$p579: ref, out_$p580: ref, out_$i581: i64, out_$p582: ref, out_$p583: ref, out_$p584: ref, out_$p585: ref, out_$p586: ref, out_$i587: i64, out_$i588: i1, out_$p590: ref, out_$p591: ref, out_$p592: ref, out_$i593: i64, out_$i594: i1, out_$p595: ref, out_$i596: i32, out_$i597: i32, out_$p598: ref, out_$p599: ref, out_$i600: i64, out_$p601: ref, out_$p602: ref, out_$p603: ref, out_$i604: i8, out_$i605: i32, out_$i606: i1, out_$p607: ref, out_$p608: ref, out_$p609: ref, out_$i610: i32, out_$p611: ref, out_$p612: ref, out_$p613: ref, out_$i614: i32, out_$p615: ref, out_$p616: ref, out_$i617: i8, out_$i618: i32, out_$p619: ref, out_$p620: ref, out_$p621: ref, out_$i622: i32, out_$p623: ref, out_$p624: ref, out_$p625: ref, out_$i626: i32, out_$p627: ref, out_$i628: i64, out_$p630: ref, out_$i631: i64, out_$p632: ref, out_$i633: i32, out_$i634: i1, out_$i574: i32)
{

  entry:
    out_$p575, out_$p576, out_$i577, out_$p578, out_$p579, out_$p580, out_$i581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_$i587, out_$i588, out_$p590, out_$p591, out_$p592, out_$i593, out_$i594, out_$p595, out_$i596, out_$i597, out_$p598, out_$p599, out_$i600, out_$p601, out_$p602, out_$p603, out_$i604, out_$i605, out_$i606, out_$p607, out_$p608, out_$p609, out_$i610, out_$p611, out_$p612, out_$p613, out_$i614, out_$p615, out_$p616, out_$i617, out_$i618, out_$p619, out_$p620, out_$p621, out_$i622, out_$p623, out_$p624, out_$p625, out_$i626, out_$p627, out_$i628, out_$p630, out_$i631, out_$p632, out_$i633, out_$i634, out_$i574 := in_$p575, in_$p576, in_$i577, in_$p578, in_$p579, in_$p580, in_$i581, in_$p582, in_$p583, in_$p584, in_$p585, in_$p586, in_$i587, in_$i588, in_$p590, in_$p591, in_$p592, in_$i593, in_$i594, in_$p595, in_$i596, in_$i597, in_$p598, in_$p599, in_$i600, in_$p601, in_$p602, in_$p603, in_$i604, in_$i605, in_$i606, in_$p607, in_$p608, in_$p609, in_$i610, in_$p611, in_$p612, in_$p613, in_$i614, in_$p615, in_$p616, in_$i617, in_$i618, in_$p619, in_$p620, in_$p621, in_$i622, in_$p623, in_$p624, in_$p625, in_$i626, in_$p627, in_$i628, in_$p630, in_$i631, in_$p632, in_$i633, in_$i634, in_$i574;
    goto $bb202, exit;

  $bb202:
    assume {:verifier.code 0} true;
    goto corral_source_split_1615;

  $bb214:
    assume out_$i634 == 1;
    assume {:verifier.code 0} true;
    out_$i574 := out_$i633;
    goto $bb214_dummy;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    out_$i634 := $slt.i32(out_$i633, in_$i32);
    goto corral_source_split_1695;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    out_$i633 := $add.i32(out_$i574, 1);
    call {:si_unique_call 296} {:cexpr "i"} boogie_si_record_i32(out_$i633);
    goto corral_source_split_1694;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} __set_bit(out_$i631, out_$p632);
    goto corral_source_split_1693;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    out_$p632 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(1744, 1));
    goto corral_source_split_1692;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    out_$i631 := $sext.i32.i64(out_$i574);
    goto corral_source_split_1691;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p630, out_$p592);
    goto corral_source_split_1690;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    out_$p630 := $add.ref($add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref(out_$i628, 8));
    goto corral_source_split_1689;

  $bb213:
    assume {:verifier.code 0} true;
    out_$i628 := $sext.i32.i64(out_$i574);
    goto corral_source_split_1688;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    call {:si_unique_call 294} usb_fill_bulk_urb(out_$p592, out_$p620, out_$i622, out_$p624, out_$i626, acm_read_bulk_callback, out_$p627);
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    goto $bb213;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} usb_fill_int_urb(out_$p592, out_$p608, out_$i610, out_$p612, out_$i614, acm_read_bulk_callback, out_$p615, out_$i618);
    goto corral_source_split_1675;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    out_$i618 := $zext.i8.i32(out_$i617);
    goto corral_source_split_1674;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    out_$i617 := $load.i8($M.0, out_$p616);
    goto corral_source_split_1673;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    out_$p616 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(3149, 1));
    goto corral_source_split_1672;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    out_$p615 := $bitcast.ref.ref(out_$p578);
    goto corral_source_split_1671;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    out_$i614 := $load.i32($M.0, out_$p613);
    goto corral_source_split_1670;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    out_$p613 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(3124, 1));
    goto corral_source_split_1669;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    out_$p612 := $load.ref($M.0, out_$p611);
    goto corral_source_split_1668;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    out_$p611 := $add.ref($add.ref(out_$p576, $mul.ref(out_$i577, 40)), $mul.ref(8, 1));
    goto corral_source_split_1667;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    out_$i610 := $load.i32($M.0, out_$p609);
    goto corral_source_split_1666;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    out_$p609 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(2524, 1));
    goto corral_source_split_1665;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    out_$p608 := $load.ref($M.0, out_$p607);
    goto corral_source_split_1664;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    out_$p607 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1663;

  $bb211:
    assume out_$i606 == 1;
    goto corral_source_split_1662;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    out_$i606 := $ne.i32(out_$i605, 0);
    goto corral_source_split_1660;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    out_$i605 := $zext.i8.i32(out_$i604);
    goto corral_source_split_1659;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    out_$i604 := $load.i8($M.0, out_$p603);
    goto corral_source_split_1658;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    out_$p603 := $add.ref(out_$p602, $mul.ref(3140, 1));
    goto corral_source_split_1657;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    out_$p602 := $bitcast.ref.ref(in_$p468);
    goto corral_source_split_1656;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p601, out_$i600);
    goto corral_source_split_1655;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    out_$p601 := $add.ref($add.ref(out_$p592, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_1654;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    out_$i600 := $load.i64($M.0, out_$p599);
    goto corral_source_split_1653;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    out_$p599 := $add.ref($add.ref(out_$p576, $mul.ref(out_$i577, 40)), $mul.ref(16, 1));
    goto corral_source_split_1652;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p598, out_$i597);
    goto corral_source_split_1651;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    out_$p598 := $add.ref($add.ref(out_$p592, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1650;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    out_$i597 := $or.i32(out_$i596, 4);
    goto corral_source_split_1649;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    out_$i596 := $load.i32($M.0, out_$p595);
    goto corral_source_split_1648;

  $bb210:
    assume {:verifier.code 0} true;
    out_$p595 := $add.ref($add.ref(out_$p592, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_1647;

  $bb209:
    assume !(out_$i594 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    out_$i594 := $eq.i64(out_$i593, 0);
    goto corral_source_split_1643;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    out_$i593 := $p2i.ref.i64(out_$p592);
    goto corral_source_split_1642;

  SeqInstr_42:
    goto corral_source_split_1641;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} out_$p592 := ldv_usb_alloc_urb_36(0, 208);
    goto SeqInstr_41;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p591, in_$p467);
    goto corral_source_split_1640;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    out_$p591 := $add.ref($add.ref(out_$p576, $mul.ref(out_$i577, 40)), $mul.ref(32, 1));
    goto corral_source_split_1639;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p590, out_$i574);
    goto corral_source_split_1638;

  $bb207:
    assume {:verifier.code 0} true;
    out_$p590 := $add.ref($add.ref(out_$p576, $mul.ref(out_$i577, 40)), $mul.ref(24, 1));
    goto corral_source_split_1637;

  $bb205:
    assume !(out_$i588 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    out_$i588 := $eq.i64(out_$i587, 0);
    goto corral_source_split_1631;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    out_$i587 := $p2i.ref.i64(out_$p586);
    goto corral_source_split_1630;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    out_$p586 := $load.ref($M.0, out_$p585);
    goto corral_source_split_1629;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    out_$p585 := $add.ref($add.ref(out_$p576, $mul.ref(out_$i577, 40)), $mul.ref(8, 1));
    goto corral_source_split_1628;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p584, out_$p583);
    goto corral_source_split_1627;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    out_$p584 := $add.ref($add.ref(out_$p576, $mul.ref(out_$i577, 40)), $mul.ref(8, 1));
    goto corral_source_split_1626;

  SeqInstr_39:
    goto corral_source_split_1625;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 291} out_$p583 := ldv_usb_alloc_coherent_35(out_$p580, out_$i581, 208, out_$p582);
    goto SeqInstr_38;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    out_$p582 := $add.ref($add.ref(out_$p576, $mul.ref(out_$i577, 40)), $mul.ref(16, 1));
    goto corral_source_split_1624;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    out_$i581 := $sext.i32.i64(in_$i480);
    goto corral_source_split_1623;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    out_$p580 := $load.ref($M.0, out_$p579);
    goto corral_source_split_1622;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    out_$p579 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1621;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    out_$p578 := $add.ref(out_$p576, $mul.ref(out_$i577, 40));
    goto corral_source_split_1620;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    out_$i577 := $sext.i32.i64(out_$i574);
    goto corral_source_split_1619;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    out_$p576 := $bitcast.ref.ref(out_$p575);
    goto corral_source_split_1618;

  $bb203:
    assume {:verifier.code 0} true;
    out_$p575 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(1880, 1));
    goto corral_source_split_1617;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    goto $bb203;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    out_$p627 := $bitcast.ref.ref(out_$p578);
    goto corral_source_split_1686;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    out_$i626 := $load.i32($M.0, out_$p625);
    goto corral_source_split_1685;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    out_$p625 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(3124, 1));
    goto corral_source_split_1684;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    out_$p624 := $load.ref($M.0, out_$p623);
    goto corral_source_split_1683;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    out_$p623 := $add.ref($add.ref(out_$p576, $mul.ref(out_$i577, 40)), $mul.ref(8, 1));
    goto corral_source_split_1682;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    out_$i622 := $load.i32($M.0, out_$p621);
    goto corral_source_split_1681;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    out_$p621 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(2524, 1));
    goto corral_source_split_1680;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    out_$p620 := $load.ref($M.0, out_$p619);
    goto corral_source_split_1679;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    out_$p619 := $add.ref($add.ref(in_$p468, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_1678;

  $bb212:
    assume !(out_$i606 == 1);
    goto corral_source_split_1677;

  $bb214_dummy:
    call {:si_unique_call 1} out_$p575, out_$p576, out_$i577, out_$p578, out_$p579, out_$p580, out_$i581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_$i587, out_$i588, out_$p590, out_$p591, out_$p592, out_$i593, out_$i594, out_$p595, out_$i596, out_$i597, out_$p598, out_$p599, out_$i600, out_$p601, out_$p602, out_$p603, out_$i604, out_$i605, out_$i606, out_$p607, out_$p608, out_$p609, out_$i610, out_$p611, out_$p612, out_$p613, out_$i614, out_$p615, out_$p616, out_$i617, out_$i618, out_$p619, out_$p620, out_$p621, out_$i622, out_$p623, out_$p624, out_$p625, out_$i626, out_$p627, out_$i628, out_$p630, out_$i631, out_$p632, out_$i633, out_$i634, out_$i574 := acm_probe_loop_$bb202(in_$i32, in_$p467, in_$p468, in_$i480, out_$p575, out_$p576, out_$i577, out_$p578, out_$p579, out_$p580, out_$i581, out_$p582, out_$p583, out_$p584, out_$p585, out_$p586, out_$i587, out_$i588, out_$p590, out_$p591, out_$p592, out_$i593, out_$i594, out_$p595, out_$i596, out_$i597, out_$p598, out_$p599, out_$i600, out_$p601, out_$p602, out_$p603, out_$i604, out_$i605, out_$i606, out_$p607, out_$p608, out_$p609, out_$i610, out_$p611, out_$p612, out_$p613, out_$i614, out_$p615, out_$p616, out_$i617, out_$i618, out_$p619, out_$p620, out_$p621, out_$i622, out_$p623, out_$p624, out_$p625, out_$i626, out_$p627, out_$i628, out_$p630, out_$i631, out_$p632, out_$i633, out_$i634, out_$i574);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb202(in_$i32: i32, in_$p467: ref, in_$p468: ref, in_$i480: i32, in_$p575: ref, in_$p576: ref, in_$i577: i64, in_$p578: ref, in_$p579: ref, in_$p580: ref, in_$i581: i64, in_$p582: ref, in_$p583: ref, in_$p584: ref, in_$p585: ref, in_$p586: ref, in_$i587: i64, in_$i588: i1, in_$p590: ref, in_$p591: ref, in_$p592: ref, in_$i593: i64, in_$i594: i1, in_$p595: ref, in_$i596: i32, in_$i597: i32, in_$p598: ref, in_$p599: ref, in_$i600: i64, in_$p601: ref, in_$p602: ref, in_$p603: ref, in_$i604: i8, in_$i605: i32, in_$i606: i1, in_$p607: ref, in_$p608: ref, in_$p609: ref, in_$i610: i32, in_$p611: ref, in_$p612: ref, in_$p613: ref, in_$i614: i32, in_$p615: ref, in_$p616: ref, in_$i617: i8, in_$i618: i32, in_$p619: ref, in_$p620: ref, in_$p621: ref, in_$i622: i32, in_$p623: ref, in_$p624: ref, in_$p625: ref, in_$i626: i32, in_$p627: ref, in_$i628: i64, in_$p630: ref, in_$i631: i64, in_$p632: ref, in_$i633: i32, in_$i634: i1, in_$i574: i32) returns (out_$p575: ref, out_$p576: ref, out_$i577: i64, out_$p578: ref, out_$p579: ref, out_$p580: ref, out_$i581: i64, out_$p582: ref, out_$p583: ref, out_$p584: ref, out_$p585: ref, out_$p586: ref, out_$i587: i64, out_$i588: i1, out_$p590: ref, out_$p591: ref, out_$p592: ref, out_$i593: i64, out_$i594: i1, out_$p595: ref, out_$i596: i32, out_$i597: i32, out_$p598: ref, out_$p599: ref, out_$i600: i64, out_$p601: ref, out_$p602: ref, out_$p603: ref, out_$i604: i8, out_$i605: i32, out_$i606: i1, out_$p607: ref, out_$p608: ref, out_$p609: ref, out_$i610: i32, out_$p611: ref, out_$p612: ref, out_$p613: ref, out_$i614: i32, out_$p615: ref, out_$p616: ref, out_$i617: i8, out_$i618: i32, out_$p619: ref, out_$p620: ref, out_$p621: ref, out_$i622: i32, out_$p623: ref, out_$p624: ref, out_$p625: ref, out_$i626: i32, out_$p627: ref, out_$i628: i64, out_$p630: ref, out_$i631: i64, out_$p632: ref, out_$i633: i32, out_$i634: i1, out_$i574: i32);
  modifies $M.0, assertsPassed;



implementation acm_probe_loop_$bb115(in_$p234: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$p307: ref, in_$i308: i64, in_$p310: ref, in_$i311: i32, in_$i312: i1, in_$i316: i32, in_$i317: i1, in_$i320: i32, in_$i321: i1, in_$p318: ref, in_$p319: ref, in_$p313: ref, in_$p314: ref, in_$p315: ref, in_$i322: i32, in_$i323: i1, in_$p300: ref, in_$p301: ref, in_$p302: ref, in_$i303: i32, in_$p324: ref, in_$p325: ref, in_$p326: ref) returns (out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$p307: ref, out_$i308: i64, out_$p310: ref, out_$i311: i32, out_$i312: i1, out_$i316: i32, out_$i317: i1, out_$i320: i32, out_$i321: i1, out_$p318: ref, out_$p319: ref, out_$p313: ref, out_$p314: ref, out_$p315: ref, out_$i322: i32, out_$i323: i1, out_$p300: ref, out_$p301: ref, out_$p302: ref, out_$i303: i32, out_$p324: ref, out_$p325: ref, out_$p326: ref)
{

  entry:
    out_$p304, out_$p305, out_$p306, out_$p307, out_$i308, out_$p310, out_$i311, out_$i312, out_$i316, out_$i317, out_$i320, out_$i321, out_$p318, out_$p319, out_$p313, out_$p314, out_$p315, out_$i322, out_$i323, out_$p300, out_$p301, out_$p302, out_$i303, out_$p324, out_$p325, out_$p326 := in_$p304, in_$p305, in_$p306, in_$p307, in_$i308, in_$p310, in_$i311, in_$i312, in_$i316, in_$i317, in_$i320, in_$i321, in_$p318, in_$p319, in_$p313, in_$p314, in_$p315, in_$i322, in_$i323, in_$p300, in_$p301, in_$p302, in_$i303, in_$p324, in_$p325, in_$p326;
    goto $bb115, exit;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1229;

  $bb126:
    assume out_$i323 == 1;
    assume {:verifier.code 0} true;
    out_$p300, out_$p301, out_$p302, out_$i303 := out_$p315, out_$p314, out_$p313, out_$i322;
    goto $bb126_dummy;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    out_$p324, out_$p325, out_$p326 := out_$p313, out_$p314, out_$p315;
    assume true;
    goto $bb126;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    out_$i323 := $sle.i32(out_$i322, 2);
    goto corral_source_split_1249;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    out_$i322 := $add.i32(out_$i303, 1);
    call {:si_unique_call 236} {:cexpr "i"} boogie_si_record_i32(out_$i322);
    goto corral_source_split_1248;

  $bb119:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1247;

  $bb122:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$p313, out_$p314, out_$p315 := out_$p318, out_$p319, out_$p300;
    goto $bb119;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$p313, out_$p314, out_$p315 := out_$p302, out_$p301, out_$p310;
    goto $bb119;

  $bb117:
    assume out_$i312 == 1;
    goto corral_source_split_1241;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$i312 := $ne.i32(out_$i311, 0);
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} out_$i311 := usb_endpoint_is_int_in(out_$p310);
    call {:si_unique_call 233} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i311);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$p310 := $add.ref($add.ref(out_$p307, $mul.ref(out_$i308, 72)), $mul.ref(0, 1));
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$i308 := $sext.i32.i64(out_$i303);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$p307 := $load.ref($M.0, out_$p306);
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    out_$p306 := $add.ref($add.ref(out_$p305, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$p305 := $load.ref($M.0, out_$p304);
    goto corral_source_split_1232;

  $bb116:
    assume {:verifier.code 0} true;
    out_$p304 := $add.ref($add.ref(in_$p234, $mul.ref(0, 1568)), $mul.ref(8, 1));
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb125:
    assume {:verifier.code 0} true;
    out_$p318, out_$p319 := out_$p302, out_$p310;
    goto $bb122;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    out_$p318, out_$p319 := out_$p310, out_$p301;
    goto $bb122;

  $bb120:
    assume out_$i317 == 1;
    goto corral_source_split_1251;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_1244:
    assume {:verifier.code 0} true;
    out_$i317 := $ne.i32(out_$i316, 0);
    goto corral_source_split_1245;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} out_$i316 := usb_endpoint_is_bulk_out(out_$p310);
    call {:si_unique_call 235} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i316);
    goto corral_source_split_1244;

  $bb118:
    assume !(out_$i312 == 1);
    goto corral_source_split_1243;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb123:
    assume out_$i321 == 1;
    goto corral_source_split_1257;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    out_$i321 := $ne.i32(out_$i320, 0);
    goto corral_source_split_1255;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} out_$i320 := usb_endpoint_is_bulk_in(out_$p310);
    call {:si_unique_call 238} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i320);
    goto corral_source_split_1254;

  $bb121:
    assume !(out_$i317 == 1);
    goto corral_source_split_1253;

  $bb126_dummy:
    call {:si_unique_call 1} out_$p304, out_$p305, out_$p306, out_$p307, out_$i308, out_$p310, out_$i311, out_$i312, out_$i316, out_$i317, out_$i320, out_$i321, out_$p318, out_$p319, out_$p313, out_$p314, out_$p315, out_$i322, out_$i323, out_$p300, out_$p301, out_$p302, out_$i303, out_$p324, out_$p325, out_$p326 := acm_probe_loop_$bb115(in_$p234, out_$p304, out_$p305, out_$p306, out_$p307, out_$i308, out_$p310, out_$i311, out_$i312, out_$i316, out_$i317, out_$i320, out_$i321, out_$p318, out_$p319, out_$p313, out_$p314, out_$p315, out_$i322, out_$i323, out_$p300, out_$p301, out_$p302, out_$i303, out_$p324, out_$p325, out_$p326);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb115(in_$p234: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$p307: ref, in_$i308: i64, in_$p310: ref, in_$i311: i32, in_$i312: i1, in_$i316: i32, in_$i317: i1, in_$i320: i32, in_$i321: i1, in_$p318: ref, in_$p319: ref, in_$p313: ref, in_$p314: ref, in_$p315: ref, in_$i322: i32, in_$i323: i1, in_$p300: ref, in_$p301: ref, in_$p302: ref, in_$i303: i32, in_$p324: ref, in_$p325: ref, in_$p326: ref) returns (out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$p307: ref, out_$i308: i64, out_$p310: ref, out_$i311: i32, out_$i312: i1, out_$i316: i32, out_$i317: i1, out_$i320: i32, out_$i321: i1, out_$p318: ref, out_$p319: ref, out_$p313: ref, out_$p314: ref, out_$p315: ref, out_$i322: i32, out_$i323: i1, out_$p300: ref, out_$p301: ref, out_$p302: ref, out_$i303: i32, out_$p324: ref, out_$p325: ref, out_$p326: ref);



implementation acm_probe_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$i108: i8, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p118: ref, in_$i119: i8, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$i124: i8, in_$i125: i32, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i64, in_$i135: i1, in_$p136: ref, in_$i143: i1, in_$i145: i1, in_$p146: ref, in_$i147: i8, in_$i148: i1, in_$p149: ref, in_$i150: i8, in_$i151: i32, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$i158: i24, in_$i159: i24, in_$i160: i24, in_$p161: ref, in_$p162: ref, in_$i163: i8, in_$i164: i64, in_$i165: i64, in_$i166: i64, in_$i167: i1, in_$p168: ref, in_$p169: ref, in_$i170: i8, in_$i171: i32, in_$p138: ref, in_$i139: i8, in_$i140: i32, in_$p141: ref, in_$p142: ref, in_$p112: ref, in_$i113: i8, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i172: i32, in_$i173: i64, in_$p174: ref, in_$i175: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i8, in_$i176: i8, in_$i177: i32, in_$p178: ref, in_$p179: ref) returns (out_$i108: i8, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p118: ref, out_$i119: i8, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$i124: i8, out_$i125: i32, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i64, out_$i135: i1, out_$p136: ref, out_$i143: i1, out_$i145: i1, out_$p146: ref, out_$i147: i8, out_$i148: i1, out_$p149: ref, out_$i150: i8, out_$i151: i32, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$i158: i24, out_$i159: i24, out_$i160: i24, out_$p161: ref, out_$p162: ref, out_$i163: i8, out_$i164: i64, out_$i165: i64, out_$i166: i64, out_$i167: i1, out_$p168: ref, out_$p169: ref, out_$i170: i8, out_$i171: i32, out_$p138: ref, out_$i139: i8, out_$i140: i32, out_$p141: ref, out_$p142: ref, out_$p112: ref, out_$i113: i8, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i172: i32, out_$i173: i64, out_$p174: ref, out_$i175: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i8, out_$i176: i8, out_$i177: i32, out_$p178: ref, out_$p179: ref)
{

  entry:
    out_$i108, out_$i109, out_$i110, out_$p111, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i143, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$i171, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i172, out_$i173, out_$p174, out_$i175, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i176, out_$i177, out_$p178, out_$p179 := in_$i108, in_$i109, in_$i110, in_$p111, in_$p118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$p136, in_$i143, in_$i145, in_$p146, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$p152, in_$p153, in_$p154, in_$p155, in_$p156, in_$p157, in_$i158, in_$i159, in_$i160, in_$p161, in_$p162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$p168, in_$p169, in_$i170, in_$i171, in_$p138, in_$i139, in_$i140, in_$p141, in_$p142, in_$p112, in_$i113, in_$i114, in_$i115, in_$p116, in_$p117, in_$i172, in_$i173, in_$p174, in_$i175, in_$p102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i176, in_$i177, in_$p178, in_$p179;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_948;

  $bb74:
    assume out_$i175 == 1;
    assume {:verifier.code 0} true;
    out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107 := out_$p117, out_$p116, out_$p174, out_$i172, out_$i114, out_$i113;
    goto $bb74_dummy;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    out_$i176, out_$i177, out_$p178, out_$p179 := out_$i113, out_$i114, out_$p116, out_$p117;
    assume true;
    goto $bb74;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    out_$i175 := $sgt.i32(out_$i172, 0);
    goto corral_source_split_962;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref(out_$p112, $mul.ref(out_$i173, 1));
    goto corral_source_split_961;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i32.i64(out_$i115);
    goto corral_source_split_960;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    out_$i172 := $sub.i32(out_$i105, out_$i115);
    call {:si_unique_call 203} {:cexpr "buflen"} boogie_si_record_i32(out_$i172);
    goto corral_source_split_959;

  $bb33:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_958;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117 := out_$p138, out_$i139, out_$i140, out_$i109, out_$p141, out_$p142;
    goto $bb33;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117 := out_$p104, out_$i107, out_$i106, out_$i109, out_$p103, out_$p102;
    goto $bb33;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117 := out_$p104, out_$i107, out_$i106, out_$i109, out_$p103, out_$p102;
    goto $bb33;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117 := out_$p104, out_$i107, out_$i106, out_$i109, out_$p103, out_$p102;
    goto $bb33;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117 := out_$p104, out_$i107, out_$i106, out_$i109, out_$p103, out_$p102;
    goto $bb33;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117 := out_$p104, out_$i107, out_$i106, out_$i109, out_$p103, out_$p102;
    goto $bb33;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117 := out_$p104, out_$i107, out_$i106, out_$i109, out_$p103, out_$p102;
    goto $bb33;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117 := out_$p104, out_$i107, out_$i106, 1, out_$p103, out_$p102;
    goto $bb33;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} dev_err.ref.ref(out_$p111, .str.6);
    goto corral_source_split_956;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_955;

  $bb31:
    assume out_$i110 == 1;
    goto corral_source_split_954;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i109, 0);
    goto corral_source_split_952;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    out_$i109 := $zext.i8.i32(out_$i108);
    call {:si_unique_call 201} {:cexpr "elength"} boogie_si_record_i32(out_$i109);
    goto corral_source_split_951;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i108 := $load.i8($M.0, out_$p104);
    goto corral_source_split_950;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} dev_err.ref.ref(out_$p122, .str.7);
    goto corral_source_split_971;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_970;

  $bb35:
    assume out_$i121 == 1;
    goto corral_source_split_969;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i32(out_$i120, 36);
    goto corral_source_split_967;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    out_$i120 := $zext.i8.i32(out_$i119);
    goto corral_source_split_966;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    out_$i119 := $load.i8($M.0, out_$p118);
    goto corral_source_split_965;

  $bb34:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref(out_$p104, $mul.ref(1, 1));
    goto corral_source_split_964;

  $bb32:
    assume !(out_$i110 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb67:
    assume out_$i148 == 1;
    goto corral_source_split_1012;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    out_$i148 := $ule.i32(out_$i109, 4);
    goto corral_source_split_986;

  $bb51:
    assume !(out_$i131 == 1);
    goto corral_source_split_985;

  $bb39:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i125, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i125, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_974:
    assume {:verifier.code 0} true;
    out_$i125 := $zext.i8.i32(out_$i124);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    out_$i124 := $load.i8($M.0, out_$p123);
    goto corral_source_split_974;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p123 := $add.ref(out_$p104, $mul.ref(2, 1));
    goto corral_source_split_973;

  $bb36:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb64:
    assume out_$i145 == 1;
    goto corral_source_split_1007;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    out_$i145 := $ule.i32(out_$i109, 3);
    goto corral_source_split_983;

  $bb48:
    assume out_$i130 == 1;
    goto corral_source_split_982;

  $bb41:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $eq.i32(out_$i125, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb40:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i125, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb54:
    assume out_$i133 == 1;
    goto corral_source_split_990;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    out_$i133 := $ule.i32(out_$i109, 4);
    goto corral_source_split_977;

  $bb43:
    assume out_$i128 == 1;
    goto corral_source_split_976;

  $bb42:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i125, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} dev_err.ref.ref(out_$p136, .str.8);
    goto corral_source_split_997;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    out_$p136 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_996;

  $bb57:
    assume out_$i135 == 1;
    goto corral_source_split_995;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i64(out_$i134, 0);
    goto corral_source_split_993;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i134 := $p2i.ref.i64(out_$p102);
    goto corral_source_split_992;

  $bb55:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb61:
    assume out_$i143 == 1;
    goto corral_source_split_1003;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    out_$i143 := $ule.i32(out_$i109, 5);
    goto corral_source_split_980;

  $bb45:
    assume out_$i129 == 1;
    goto corral_source_split_979;

  $bb44:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $eq.i32(out_$i125, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb60:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1001;

  $bb73:
    assume {:verifier.code 0} true;
    out_$p138, out_$i139, out_$i140, out_$p141, out_$p142 := out_$p104, out_$i107, out_$i106, out_$p103, out_$p102;
    goto $bb60;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    out_$p138, out_$i139, out_$i140, out_$p141, out_$p142 := out_$p104, out_$i107, out_$i106, out_$p104, out_$p102;
    goto $bb60;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    out_$p138, out_$i139, out_$i140, out_$p141, out_$p142 := out_$p104, out_$i107, out_$i106, out_$p103, out_$p104;
    goto $bb60;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    out_$p138, out_$i139, out_$i140, out_$p141, out_$p142 := out_$p104, out_$i147, out_$i106, out_$p103, out_$p102;
    goto $bb60;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    out_$p138, out_$i139, out_$i140, out_$p141, out_$p142 := out_$p104, out_$i107, out_$i151, out_$p103, out_$p102;
    goto $bb60;

  corral_source_split_988:
    assume {:verifier.code 0} true;
    out_$p138, out_$i139, out_$i140, out_$p141, out_$p142 := out_$p104, out_$i107, out_$i106, out_$p103, out_$p102;
    goto $bb60;

  $bb52:
    assume out_$i132 == 1;
    goto corral_source_split_988;

  $bb50:
    assume out_$i131 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i32(out_$i125, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    out_$i151 := $zext.i8.i32(out_$i150);
    call {:si_unique_call 207} {:cexpr "call_interface_num"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_1016;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    out_$i150 := $load.i8($M.0, out_$p149);
    goto corral_source_split_1015;

  $bb69:
    assume {:verifier.code 0} true;
    out_$p149 := $add.ref(out_$p104, $mul.ref(4, 1));
    goto corral_source_split_1014;

  $bb68:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    out_$i147 := $load.i8($M.0, out_$p146);
    call {:si_unique_call 206} {:cexpr "ac_management_function"} boogie_si_record_i8(out_$i147);
    goto corral_source_split_1010;

  $bb66:
    assume {:verifier.code 0} true;
    out_$p146 := $add.ref(out_$p104, $mul.ref(3, 1));
    goto corral_source_split_1009;

  $bb65:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb59:
    assume {:verifier.code 0} true;
    goto corral_source_split_999;

  $bb58:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb63:
    assume {:verifier.code 0} true;
    goto corral_source_split_1005;

  $bb62:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb72:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} __dynamic_dev_dbg.ref.ref.ref.i32.i32(in_$p3, out_$p168, .str.9, out_$i171, out_$i109);
    goto corral_source_split_1046;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    out_$i171 := $zext.i8.i32(out_$i170);
    goto corral_source_split_1045;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    out_$i170 := $load.i8($M.0, out_$p169);
    goto corral_source_split_1044;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref(out_$p104, $mul.ref(2, 1));
    goto corral_source_split_1043;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1568)), $mul.ref(48, 1));
    goto corral_source_split_1042;

  $bb71:
    assume out_$i167 == 1;
    goto corral_source_split_1041;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    out_$i167 := $ne.i64(out_$i166, 0);
    goto corral_source_split_1039;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} out_$i166 := ldv__builtin_expect(out_$i165, 0);
    call {:si_unique_call 209} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i166);
    goto corral_source_split_1038;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    out_$i165 := $and.i64(out_$i164, 1);
    goto corral_source_split_1037;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    out_$i164 := $zext.i8.i64(out_$i163);
    goto corral_source_split_1036;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    out_$i163 := $load.i8($M.6, out_$p162);
    goto corral_source_split_1035;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1034;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p161, 0);
    goto corral_source_split_1033;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1032;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p157, out_$i160);
    goto corral_source_split_1031;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    out_$i160 := $or.i24(out_$i159, 1188);
    goto corral_source_split_1030;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    out_$i159 := $and.i24(out_$i158, $sub.i24(0, 262144));
    goto corral_source_split_1029;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i24($M.5, out_$p157);
    goto corral_source_split_1028;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    out_$p157 := $bitcast.ref.ref(out_$p156);
    goto corral_source_split_1027;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1026;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p155, .str.9);
    goto corral_source_split_1025;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    out_$p155 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1024;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p154, .str.3);
    goto corral_source_split_1023;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1022;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p153, .str.2);
    goto corral_source_split_1021;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1020;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p152, .str.1);
    goto corral_source_split_1019;

  $bb70:
    assume {:verifier.code 0} true;
    out_$p152 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1018;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb46:
    assume {:verifier.code 0} true;
    assume !(out_$i129 == 1);
    goto $bb47;

  $bb49:
    assume {:verifier.code 0} true;
    assume !(out_$i130 == 1);
    goto $bb47;

  $bb53:
    assume {:verifier.code 0} true;
    assume !(out_$i132 == 1);
    goto $bb47;

  $bb74_dummy:
    call {:si_unique_call 1} out_$i108, out_$i109, out_$i110, out_$p111, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i143, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$i171, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i172, out_$i173, out_$p174, out_$i175, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i176, out_$i177, out_$p178, out_$p179 := acm_probe_loop_$bb29(in_$p0, in_$p3, out_$i108, out_$i109, out_$i110, out_$p111, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$p136, out_$i143, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$p153, out_$p154, out_$p155, out_$p156, out_$p157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p169, out_$i170, out_$i171, out_$p138, out_$i139, out_$i140, out_$p141, out_$p142, out_$p112, out_$i113, out_$i114, out_$i115, out_$p116, out_$p117, out_$i172, out_$i173, out_$p174, out_$i175, out_$p102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i176, out_$i177, out_$p178, out_$p179);
    return;

  exit:
    return;
}



procedure acm_probe_loop_$bb29(in_$p0: ref, in_$p3: ref, in_$i108: i8, in_$i109: i32, in_$i110: i1, in_$p111: ref, in_$p118: ref, in_$i119: i8, in_$i120: i32, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$i124: i8, in_$i125: i32, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i64, in_$i135: i1, in_$p136: ref, in_$i143: i1, in_$i145: i1, in_$p146: ref, in_$i147: i8, in_$i148: i1, in_$p149: ref, in_$i150: i8, in_$i151: i32, in_$p152: ref, in_$p153: ref, in_$p154: ref, in_$p155: ref, in_$p156: ref, in_$p157: ref, in_$i158: i24, in_$i159: i24, in_$i160: i24, in_$p161: ref, in_$p162: ref, in_$i163: i8, in_$i164: i64, in_$i165: i64, in_$i166: i64, in_$i167: i1, in_$p168: ref, in_$p169: ref, in_$i170: i8, in_$i171: i32, in_$p138: ref, in_$i139: i8, in_$i140: i32, in_$p141: ref, in_$p142: ref, in_$p112: ref, in_$i113: i8, in_$i114: i32, in_$i115: i32, in_$p116: ref, in_$p117: ref, in_$i172: i32, in_$i173: i64, in_$p174: ref, in_$i175: i1, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$i105: i32, in_$i106: i32, in_$i107: i8, in_$i176: i8, in_$i177: i32, in_$p178: ref, in_$p179: ref) returns (out_$i108: i8, out_$i109: i32, out_$i110: i1, out_$p111: ref, out_$p118: ref, out_$i119: i8, out_$i120: i32, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$i124: i8, out_$i125: i32, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i64, out_$i135: i1, out_$p136: ref, out_$i143: i1, out_$i145: i1, out_$p146: ref, out_$i147: i8, out_$i148: i1, out_$p149: ref, out_$i150: i8, out_$i151: i32, out_$p152: ref, out_$p153: ref, out_$p154: ref, out_$p155: ref, out_$p156: ref, out_$p157: ref, out_$i158: i24, out_$i159: i24, out_$i160: i24, out_$p161: ref, out_$p162: ref, out_$i163: i8, out_$i164: i64, out_$i165: i64, out_$i166: i64, out_$i167: i1, out_$p168: ref, out_$p169: ref, out_$i170: i8, out_$i171: i32, out_$p138: ref, out_$i139: i8, out_$i140: i32, out_$p141: ref, out_$p142: ref, out_$p112: ref, out_$i113: i8, out_$i114: i32, out_$i115: i32, out_$p116: ref, out_$p117: ref, out_$i172: i32, out_$i173: i64, out_$p174: ref, out_$i175: i1, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$i105: i32, out_$i106: i32, out_$i107: i8, out_$i176: i8, out_$i177: i32, out_$p178: ref, out_$p179: ref);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation acm_disconnect_loop_$bb21(in_$p3: ref, in_$p58: ref, in_$i62: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i61: i32) returns (out_$i62: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i61: i32)
{

  entry:
    out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i61 := in_$i62, in_$p64, in_$p65, in_$i66, in_$i67, in_$i68, in_$i61;
    goto $bb21, exit;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2122;

  $bb23:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i61 := out_$i66;
    goto $bb23_dummy;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    out_$i68 := $sgt.i32(out_$i67, out_$i66);
    goto corral_source_split_2130;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    out_$i67 := $load.i32($M.0, in_$p58);
    goto corral_source_split_2129;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i61, 1);
    call {:si_unique_call 387} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_2128;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} usb_free_urb(out_$p65);
    goto corral_source_split_2127;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_2126;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref($add.ref(in_$p3, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref(out_$i62, 8));
    goto corral_source_split_2125;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i62 := $sext.i32.i64(out_$i61);
    goto corral_source_split_2124;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i61 := acm_disconnect_loop_$bb21(in_$p3, in_$p58, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$i68, out_$i61);
    return;

  exit:
    return;
}



procedure acm_disconnect_loop_$bb21(in_$p3: ref, in_$p58: ref, in_$i62: i64, in_$p64: ref, in_$p65: ref, in_$i66: i32, in_$i67: i32, in_$i68: i1, in_$i61: i32) returns (out_$i62: i64, out_$p64: ref, out_$p65: ref, out_$i66: i32, out_$i67: i32, out_$i68: i1, out_$i61: i32);



implementation acm_resume_loop_$bb10(in_$p2: ref, in_$p19: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_vslice_dummy_var_46: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_vslice_dummy_var_46: i32)
{

  entry:
    out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_vslice_dummy_var_46 := in_$p23, in_$p24, in_$p25, in_$p26, in_$p28, in_$i29, in_$i30, in_vslice_dummy_var_46;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb14:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    out_$p23 := out_$p28;
    goto $bb14_dummy;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i64(out_$i29, 0);
    goto corral_source_split_2307;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    out_$i29 := $p2i.ref.i64(out_$p28);
    goto corral_source_split_2306;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} out_$p28 := usb_get_from_anchor(in_$p19);
    goto corral_source_split_2305;

  SeqInstr_54:
    goto corral_source_split_2304;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} out_vslice_dummy_var_46 := acm_start_wb(in_$p2, out_$p26);
    goto SeqInstr_53;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_2303;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2302;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2301;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_vslice_dummy_var_46 := acm_resume_loop_$bb10(in_$p2, in_$p19, out_$p23, out_$p24, out_$p25, out_$p26, out_$p28, out_$i29, out_$i30, out_vslice_dummy_var_46);
    return;

  exit:
    return;
}



procedure acm_resume_loop_$bb10(in_$p2: ref, in_$p19: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p28: ref, in_$i29: i64, in_$i30: i1, in_vslice_dummy_var_46: i32) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p28: ref, out_$i29: i64, out_$i30: i1, out_vslice_dummy_var_46: i32);
  modifies $M.0, assertsPassed;



implementation stop_data_traffic_loop_$bb11(in_$p0: ref, in_$p27: ref, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i30: i32) returns (out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i30: i32)
{

  entry:
    out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i30 := in_$i31, in_$p33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i30;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2455;

  $bb13:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$i30 := out_$i35;
    goto $bb13_dummy;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    out_$i37 := $sgt.i32(out_$i36, out_$i35);
    goto corral_source_split_2463;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    out_$i36 := $load.i32($M.0, in_$p27);
    goto corral_source_split_2462;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i30, 1);
    call {:si_unique_call 453} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_2461;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} usb_kill_urb(out_$p34);
    goto corral_source_split_2460;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    out_$p34 := $load.ref($M.0, out_$p33);
    goto corral_source_split_2459;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(1752, 1)), $mul.ref(out_$i31, 8));
    goto corral_source_split_2458;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i30);
    goto corral_source_split_2457;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i30 := stop_data_traffic_loop_$bb11(in_$p0, in_$p27, out_$i31, out_$p33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i30);
    return;

  exit:
    return;
}



procedure stop_data_traffic_loop_$bb11(in_$p0: ref, in_$p27: ref, in_$i31: i64, in_$p33: ref, in_$p34: ref, in_$i35: i32, in_$i36: i32, in_$i37: i1, in_$i30: i32) returns (out_$i31: i64, out_$p33: ref, out_$p34: ref, out_$i35: i32, out_$i36: i32, out_$i37: i1, out_$i30: i32);



implementation acm_read_buffers_free_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$i9: i32, in_$i10: i64, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p19: ref, in_$i20: i64, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i64, out_$i11: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p19: ref, out_$i20: i64, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i7: i32)
{

  entry:
    out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7 := in_$p8, in_$i9, in_$i10, in_$i11, in_$p14, in_$p15, in_$i16, in_$p19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i7;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2800;

  $bb6:
    assume out_$i23 == 1;
    assume {:verifier.code 0} true;
    out_$i7 := out_$i21;
    goto $bb6_dummy;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    out_$i23 := $sgt.i32(out_$i22, out_$i21);
    goto corral_source_split_2814;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i32($M.0, in_$p4);
    goto corral_source_split_2813;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i32(out_$i7, 1);
    call {:si_unique_call 505} {:cexpr "i"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_2812;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} usb_free_coherent(in_$p3, out_$i10, out_$p15, out_$i20);
    goto corral_source_split_2811;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    out_$i20 := $load.i64($M.0, out_$p19);
    goto corral_source_split_2810;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(1880, 1)), $mul.ref(out_$i16, 40)), $mul.ref(16, 1));
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i7);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p15 := $load.ref($M.0, out_$p14);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(1880, 1)), $mul.ref(out_$i11, 40)), $mul.ref(8, 1));
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i7);
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    out_$i10 := $zext.i32.i64(out_$i9);
    goto corral_source_split_2804;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    out_$i9 := $load.i32($M.0, out_$p8);
    goto corral_source_split_2803;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(3124, 1));
    goto corral_source_split_2802;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7 := acm_read_buffers_free_loop_$bb4(in_$p0, in_$p3, in_$p4, out_$p8, out_$i9, out_$i10, out_$i11, out_$p14, out_$p15, out_$i16, out_$p19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i7);
    return;

  exit:
    return;
}



procedure acm_read_buffers_free_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$p4: ref, in_$p8: ref, in_$i9: i32, in_$i10: i64, in_$i11: i64, in_$p14: ref, in_$p15: ref, in_$i16: i64, in_$p19: ref, in_$i20: i64, in_$i21: i32, in_$i22: i32, in_$i23: i1, in_$i7: i32) returns (out_$p8: ref, out_$i9: i32, out_$i10: i64, out_$i11: i64, out_$p14: ref, out_$p15: ref, out_$i16: i64, out_$p19: ref, out_$i20: i64, out_$i21: i32, out_$i22: i32, out_$i23: i1, out_$i7: i32);



implementation acm_write_buffers_alloc_loop_$bb8(in_$p0: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p20: ref, in_$i21: i32) returns (out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p20: ref, out_$i21: i32)
{

  entry:
    out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p20, out_$i21 := in_$i22, in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$p20, in_$i21;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2981;

  $bb10:
    assume out_$i33 == 1;
    assume {:verifier.code 0} true;
    out_$p20, out_$i21 := out_$p23, out_$i22;
    goto $bb10_dummy;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    out_$i33 := $ne.i32(out_$i22, 0);
    goto corral_source_split_2995;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} usb_free_coherent(out_$p25, out_$i28, out_$p30, out_$i32);
    goto corral_source_split_2994;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i64($M.0, out_$p31);
    goto corral_source_split_2993;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(8, 1));
    goto corral_source_split_2992;

  corral_source_split_2990:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_2991;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(out_$p20, $mul.ref($sub.ref(0, 1), 40)), $mul.ref(0, 1));
    goto corral_source_split_2990;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i32.i64(out_$i27);
    goto corral_source_split_2989;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    out_$i27 := $load.i32($M.0, out_$p26);
    goto corral_source_split_2988;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2987;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    out_$p25 := $load.ref($M.0, out_$p24);
    goto corral_source_split_2986;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2985;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref(out_$p20, $mul.ref($sub.ref(0, 1), 40));
    goto corral_source_split_2984;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i22 := $sub.i32(out_$i21, 1);
    call {:si_unique_call 543} {:cexpr "i"} boogie_si_record_i32(out_$i22);
    goto corral_source_split_2983;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p20, out_$i21 := acm_write_buffers_alloc_loop_$bb8(in_$p0, out_$i22, out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$p20, out_$i21);
    return;

  exit:
    return;
}



procedure acm_write_buffers_alloc_loop_$bb8(in_$p0: ref, in_$i22: i32, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i32, in_$i28: i64, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$i33: i1, in_$p20: ref, in_$i21: i32) returns (out_$i22: i32, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i32, out_$i28: i64, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$i33: i1, out_$p20: ref, out_$i21: i32);



implementation acm_write_buffers_alloc_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$i35: i32, in_$p36: ref, in_$i37: i1, in_$p3: ref, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$i35: i32, out_$p36: ref, out_$i37: i1, out_$p3: ref, out_$i4: i32)
{

  entry:
    out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i35, out_$p36, out_$i37, out_$p3, out_$i4 := in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i35, in_$p36, in_$i37, in_$p3, in_$i4;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2960;

  $bb15:
    assume out_$i37 == 1;
    assume {:verifier.code 0} true;
    out_$p3, out_$i4 := out_$p36, out_$i35;
    goto $bb15_dummy;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15;

  corral_source_split_3002:
    assume {:verifier.code 0} true;
    out_$i37 := $sle.i32(out_$i35, 15);
    goto corral_source_split_3003;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref(out_$p3, $mul.ref(1, 40));
    goto corral_source_split_3002;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i35 := $add.i32(out_$i4, 1);
    call {:si_unique_call 545} {:cexpr "i"} boogie_si_record_i32(out_$i35);
    goto corral_source_split_3001;

  $bb4:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    out_$i17, out_$p18 := out_$i4, out_$p3;
    assume true;
    goto $bb4;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    out_$i16 := $eq.i64(out_$i15, 0);
    goto corral_source_split_2974;

  corral_source_split_2972:
    assume {:verifier.code 0} true;
    out_$i15 := $p2i.ref.i64(out_$p14);
    goto corral_source_split_2973;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    out_$p14 := $load.ref($M.0, out_$p13);
    goto corral_source_split_2972;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref($add.ref(out_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2971;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p12, out_$p11);
    goto corral_source_split_2970;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(out_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2969;

  SeqInstr_78:
    goto corral_source_split_2968;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} out_$p11 := ldv_usb_alloc_coherent_32(out_$p6, out_$i9, 208, out_$p10);
    goto SeqInstr_77;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    out_$p10 := $add.ref($add.ref(out_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2967;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i32.i64(out_$i8);
    goto corral_source_split_2966;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i32($M.0, out_$p7);
    goto corral_source_split_2965;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(3120, 1));
    goto corral_source_split_2964;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    out_$p6 := $load.ref($M.0, out_$p5);
    goto corral_source_split_2963;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(0, 1));
    goto corral_source_split_2962;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb15_dummy:
    call {:si_unique_call 1} out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i35, out_$p36, out_$i37, out_$p3, out_$i4 := acm_write_buffers_alloc_loop_$bb1(in_$p0, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$p10, out_$p11, out_$p12, out_$p13, out_$p14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i35, out_$p36, out_$i37, out_$p3, out_$i4);
    return;

  exit:
    return;
}



procedure acm_write_buffers_alloc_loop_$bb1(in_$p0: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i32, in_$i9: i64, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$i15: i64, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$i35: i32, in_$p36: ref, in_$i37: i1, in_$p3: ref, in_$i4: i32) returns (out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i32, out_$i9: i64, out_$p10: ref, out_$p11: ref, out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$i15: i64, out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$i35: i32, out_$p36: ref, out_$i37: i1, out_$p3: ref, out_$i4: i32);
  modifies $M.0, assertsPassed;



implementation wait_serial_change_loop_$bb5(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i1, in_$i66: i64, in_$i67: i1, in_$i68: i32, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i69: i32, in_$i74: i1, in_$i75: i32, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8) returns (out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i1, out_$i66: i64, out_$i67: i1, out_$i68: i32, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i69: i32, out_$i74: i1, out_$i75: i32, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8)
{

  entry:
    out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i69, out_$i74, out_$i75, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24 := in_$i18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$i30, in_$i31, in_$p32, in_$i33, in_$p34, in_$i35, in_$i36, in_$i37, in_$i39, in_$i40, in_$p41, in_$i42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$p60, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$p70, in_$i71, in_$i72, in_$i73, in_$i69, in_$i74, in_$i75, in_cmdloc_dummy_var_16, in_cmdloc_dummy_var_17, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19, in_cmdloc_dummy_var_20, in_cmdloc_dummy_var_21, in_cmdloc_dummy_var_22, in_cmdloc_dummy_var_23, in_cmdloc_dummy_var_24;
    goto $bb5, exit;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_3779;

  $bb35:
    assume out_$i74 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i69;
    goto $bb35_dummy;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i69;
    assume true;
    goto $bb35;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    out_$i74 := $eq.i32(out_$i69, 0);
    goto corral_source_split_3864;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_3863;

  $bb34:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    out_$i69 := out_$i73;
    goto $bb31;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i69 := $sub.i32(0, 19);
    goto $bb31;

  $bb29:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i18;
    assume true;
    goto $bb29;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    out_$i67 := $ne.i64(out_$i66, 0);
    goto corral_source_split_3854;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i64(in_$i1, 64);
    goto corral_source_split_3853;

  $bb26:
    assume out_$i65 == 1;
    goto corral_source_split_3852;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i8.i1(out_$i64);
    goto corral_source_split_3850;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.0, out_$p63);
    goto corral_source_split_3849;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(2840, 1));
    goto corral_source_split_3848;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} remove_wait_queue(out_$p62, in_$p2);
    goto corral_source_split_3847;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(3032, 1));
    goto corral_source_split_3846;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} schedule();
    goto corral_source_split_3845;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, in_$p5, out_$i61);
    goto corral_source_split_3843;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p58, $mul.ref(0, 11744)), $mul.ref(0, 1));
    call {:si_unique_call 707} out_$i61 := devirtbounce.3(0, out_$p60, out_$i59, out_$p60);
    goto corral_source_split_3842;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i64($M.32, in_$p5);
    goto corral_source_split_3841;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 706} out_$p58 := get_current();
    goto corral_source_split_3840;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.32 := $store.i64($M.32, in_$p5, 1);
    goto corral_source_split_3839;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $M.26 := $store.i64($M.26, out_$p57, 0);
    goto corral_source_split_3838;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 11744)), $mul.ref(11728, 1));
    goto corral_source_split_3837;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} out_$p56 := get_current();
    goto corral_source_split_3836;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} add_wait_queue(out_$p55, in_$p2);
    goto corral_source_split_3835;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(3032, 1));
    goto corral_source_split_3834;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb21;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i53 == 1);
    goto $bb21;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    out_$i54 := out_$i18;
    assume true;
    goto $bb23;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    out_$i53 := $ne.i32(out_$i50, out_$i52);
    goto corral_source_split_3830;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    out_$i52 := $load.i32($M.0, out_$p51);
    goto corral_source_split_3829;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p4, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3828;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i32($M.0, out_$p49);
    goto corral_source_split_3827;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_3826;

  $bb19:
    assume out_$i48 == 1;
    goto corral_source_split_3825;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_3823;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i47 := $and.i64(in_$i1, 128);
    goto corral_source_split_3822;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb14:
    assume {:verifier.code 0} true;
    assume !(out_$i40 == 1);
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb15;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    out_$i46 := out_$i18;
    assume true;
    goto $bb17;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i32(out_$i42, out_$i44);
    goto corral_source_split_3818;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    out_$i44 := $load.i32($M.0, out_$p43);
    goto corral_source_split_3817;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    out_$p43 := $add.ref($add.ref(in_$p4, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3816;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i32($M.0, out_$p41);
    goto corral_source_split_3815;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p3, $mul.ref(0, 44)), $mul.ref(12, 1));
    goto corral_source_split_3814;

  $bb13:
    assume out_$i40 == 1;
    goto corral_source_split_3813;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    out_$i40 := $ne.i64(out_$i39, 0);
    goto corral_source_split_3811;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i64(in_$i1, 64);
    goto corral_source_split_3810;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume {:verifier.code 0} true;
    assume !(out_$i31 == 1);
    goto $bb8;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i36 == 1);
    goto $bb8;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    out_$i37 := out_$i18;
    assume true;
    goto $bb10;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(out_$i33, out_$i35);
    goto corral_source_split_3804;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    out_$i35 := $load.i32($M.0, out_$p34);
    goto corral_source_split_3803;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p4, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3802;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    out_$i33 := $load.i32($M.0, out_$p32);
    goto corral_source_split_3801;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$p32 := $add.ref($add.ref(in_$p3, $mul.ref(0, 44)), $mul.ref(4, 1));
    goto corral_source_split_3800;

  $bb6:
    assume out_$i31 == 1;
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$i31 := $ne.i64(out_$i30, 0);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    out_$i30 := $and.i64(in_$i1, 256);
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} spin_unlock_irq(out_$p29);
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_22 := $M.0;
    out_cmdloc_dummy_var_23 := $M.0;
    call {:si_unique_call 702} out_cmdloc_dummy_var_24 := $memcpy.i8(out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_$p27, out_$p28, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_24;
    goto corral_source_split_3793;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(2988, 1));
    goto corral_source_split_3790;

  corral_source_split_3788:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_19 := $M.0;
    out_cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 701} out_cmdloc_dummy_var_21 := $memcpy.i8(out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_$p24, out_$p25, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_21;
    goto corral_source_split_3789;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p23);
    goto corral_source_split_3788;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$p24 := $bitcast.ref.ref(in_$p4);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(2944, 1));
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_16 := $M.0;
    out_cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 700} out_cmdloc_dummy_var_18 := $memcpy.i8(out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_$p21, out_$p22, 44, $zext.i32.i64(4), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_18;
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p20);
    goto corral_source_split_3784;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    out_$p21 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3783;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(2988, 1));
    goto corral_source_split_3782;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} spin_lock_irq(out_$p19);
    goto corral_source_split_3781;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 3344)), $mul.ref(2528, 1));
    goto corral_source_split_3780;

  $bb33:
    assume !(out_$i72 == 1);
    assume {:verifier.code 0} true;
    out_$i73 := out_$i18;
    goto $bb34;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    out_$i73 := $sub.i32(0, 512);
    goto $bb34;

  $bb32:
    assume out_$i72 == 1;
    goto corral_source_split_3866;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    out_$i72 := $ne.i32(out_$i71, 0);
    goto corral_source_split_3859;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} out_$i71 := signal_pending(out_$p70);
    call {:si_unique_call 712} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_3858;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} out_$p70 := get_current();
    goto corral_source_split_3857;

  $bb27:
    assume !(out_$i65 == 1);
    goto corral_source_split_3856;

  $bb35_dummy:
    call {:si_unique_call 1} out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i69, out_$i74, out_$i75, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24 := wait_serial_change_loop_$bb5(in_$p0, in_$i1, in_$p2, in_$p3, in_$p4, in_$p5, out_$i18, out_$p19, out_$p20, out_$p21, out_$p22, out_$p23, out_$p24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$i30, out_$i31, out_$p32, out_$i33, out_$p34, out_$i35, out_$i36, out_$i37, out_$i39, out_$i40, out_$p41, out_$i42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$p70, out_$i71, out_$i72, out_$i73, out_$i69, out_$i74, out_$i75, out_cmdloc_dummy_var_16, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19, out_cmdloc_dummy_var_20, out_cmdloc_dummy_var_21, out_cmdloc_dummy_var_22, out_cmdloc_dummy_var_23, out_cmdloc_dummy_var_24);
    return;

  exit:
    return;
}



procedure wait_serial_change_loop_$bb5(in_$p0: ref, in_$i1: i64, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$i18: i32, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$i33: i32, in_$p34: ref, in_$i35: i32, in_$i36: i1, in_$i37: i32, in_$i39: i64, in_$i40: i1, in_$p41: ref, in_$i42: i32, in_$p43: ref, in_$i44: i32, in_$i45: i1, in_$i46: i32, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$i50: i32, in_$p51: ref, in_$i52: i32, in_$i53: i1, in_$i54: i32, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$i61: i64, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i1, in_$i66: i64, in_$i67: i1, in_$i68: i32, in_$p70: ref, in_$i71: i32, in_$i72: i1, in_$i73: i32, in_$i69: i32, in_$i74: i1, in_$i75: i32, in_cmdloc_dummy_var_16: [ref]i8, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8, in_cmdloc_dummy_var_20: [ref]i8, in_cmdloc_dummy_var_21: [ref]i8, in_cmdloc_dummy_var_22: [ref]i8, in_cmdloc_dummy_var_23: [ref]i8, in_cmdloc_dummy_var_24: [ref]i8) returns (out_$i18: i32, out_$p19: ref, out_$p20: ref, out_$p21: ref, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$i33: i32, out_$p34: ref, out_$i35: i32, out_$i36: i1, out_$i37: i32, out_$i39: i64, out_$i40: i1, out_$p41: ref, out_$i42: i32, out_$p43: ref, out_$i44: i32, out_$i45: i1, out_$i46: i32, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$i50: i32, out_$p51: ref, out_$i52: i32, out_$i53: i1, out_$i54: i32, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$i61: i64, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i1, out_$i66: i64, out_$i67: i1, out_$i68: i32, out_$p70: ref, out_$i71: i32, out_$i72: i1, out_$i73: i32, out_$i69: i32, out_$i74: i1, out_$i75: i32, out_cmdloc_dummy_var_16: [ref]i8, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8, out_cmdloc_dummy_var_20: [ref]i8, out_cmdloc_dummy_var_21: [ref]i8, out_cmdloc_dummy_var_22: [ref]i8, out_cmdloc_dummy_var_23: [ref]i8, out_cmdloc_dummy_var_24: [ref]i8);
  modifies $M.32, $M.26, $M.8, $M.0;



implementation acm_wb_alloc_loop_$bb4(in_$p2: ref, in_$i10: i32, in_$p11: ref, in_$i8: i32, in_$i9: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1) returns (out_$i10: i32, out_$p11: ref, out_$i8: i32, out_$i9: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1)
{

  entry:
    out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22 := in_$i10, in_$p11, in_$i8, in_$i9, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$i22;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    out_$i8, out_$i9 := out_$i15, out_$i16;
    goto $bb11_dummy;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    out_$i10, out_$p11 := out_$i15, out_$p19;
    assume true;
    goto $bb11;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i21, 0);
    goto corral_source_split_4103;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    out_$i21 := $load.i32($M.0, out_$p20);
    goto corral_source_split_4102;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    out_$p20 := $add.ref($add.ref(in_$p2, $mul.ref(out_$i18, 40)), $mul.ref(20, 1));
    goto corral_source_split_4101;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref(in_$p2, $mul.ref(out_$i18, 40));
    goto corral_source_split_4100;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i18 := $sext.i32.i64(out_$i15);
    goto corral_source_split_4099;

  $bb9:
    assume !(out_$i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    out_$i17 := $sgt.i32(out_$i16, 15);
    goto corral_source_split_4095;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i9, 1);
    call {:si_unique_call 769} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_4094;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    out_$i15 := $srem.i32(out_$i14, 16);
    call {:si_unique_call 768} {:cexpr "wbn"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4093;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i14 := $add.i32(out_$i8, 1);
    goto corral_source_split_4092;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22 := acm_wb_alloc_loop_$bb4(in_$p2, out_$i10, out_$p11, out_$i8, out_$i9, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$i22);
    return;

  exit:
    return;
}



procedure acm_wb_alloc_loop_$bb4(in_$p2: ref, in_$i10: i32, in_$p11: ref, in_$i8: i32, in_$i9: i32, in_$i14: i32, in_$i15: i32, in_$i16: i32, in_$i17: i1, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$i22: i1) returns (out_$i10: i32, out_$p11: ref, out_$i8: i32, out_$i9: i32, out_$i14: i32, out_$i15: i32, out_$i16: i32, out_$i17: i1, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$i22: i1);



implementation __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1)
{

  entry:
    out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := in_$i11, in_$i10, in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb11:
    assume !(out_$i25 == 1);
    assume {:verifier.code 0} true;
    out_$i10 := out_$i14;
    goto $bb11_dummy;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    out_$i11 := out_$i14;
    assume true;
    goto $bb11;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    out_$i25 := $ne.i64(out_$i24, 0);
    goto corral_source_split_4234;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} out_$i24 := ldv__builtin_expect(out_$i23, 0);
    call {:si_unique_call 813} {:cexpr "tmp"} boogie_si_record_i64(out_$i24);
    goto corral_source_split_4233;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_4232;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    out_$i22 := $zext.i1.i32(out_$i21);
    goto corral_source_split_4231;

  $bb10:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i14, in_$i2);
    goto corral_source_split_4230;

  $bb9:
    assume !(out_$i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i10;
    assume true;
    goto $bb9;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    out_$i19 := $ne.i64(out_$i18, 0);
    goto corral_source_split_4226;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_$i18 := ldv__builtin_expect(out_$i17, 1);
    call {:si_unique_call 811} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i18);
    goto corral_source_split_4225;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    out_$i17 := $sext.i32.i64(out_$i16);
    goto corral_source_split_4224;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    out_$i16 := $zext.i1.i32(out_$i15);
    goto corral_source_split_4223;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, out_$i10);
    goto corral_source_split_4222;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_$i14 := atomic_cmpxchg(in_$p0, out_$i10, out_$i13);
    call {:si_unique_call 809} {:cexpr "old"} boogie_si_record_i32(out_$i14);
    goto corral_source_split_4221;

  $bb7:
    assume {:verifier.code 0} true;
    out_$i13 := $add.i32(out_$i10, in_$i1);
    goto corral_source_split_4220;

  $bb11_dummy:
    call {:si_unique_call 1} out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25 := __atomic_add_unless_loop_$bb4(in_$p0, in_$i1, in_$i2, out_$i11, out_$i10, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25);
    return;

  exit:
    return;
}



procedure __atomic_add_unless_loop_$bb4(in_$p0: ref, in_$i1: i32, in_$i2: i32, in_$i11: i32, in_$i10: i32, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$i16: i32, in_$i17: i64, in_$i18: i64, in_$i19: i1, in_$i20: i32, in_$i21: i1, in_$i22: i32, in_$i23: i64, in_$i24: i64, in_$i25: i1) returns (out_$i11: i32, out_$i10: i32, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$i16: i32, out_$i17: i64, out_$i18: i64, out_$i19: i1, out_$i20: i32, out_$i21: i1, out_$i22: i32, out_$i23: i64, out_$i24: i64, out_$i25: i1);



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$i106: i32, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i32, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i64, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i64, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i251: i32, in_$i252: i32, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i267: i32, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i32, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i1, in_vslice_dummy_var_59: i64, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i64, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i64) returns (out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$i106: i32, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i32, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i64, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i64, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i251: i32, out_$i252: i32, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i267: i32, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i32, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i1, out_vslice_dummy_var_59: i64, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i64, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i64)
{

  entry:
    out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i248, out_$i249, out_$p250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77 := in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p76, in_$i77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$i83, in_$p84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$i90, in_$i91, in_$p92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$p104, in_$p105, in_$i106, in_$i108, in_$i109, in_$p110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$i140, in_$i141, in_$p142, in_$i143, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$p150, in_$i151, in_$i152, in_$p153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$p159, in_$i160, in_$i161, in_$p162, in_$i163, in_$i164, in_$p165, in_$p166, in_$i167, in_$i168, in_$p169, in_$i170, in_$i171, in_$p172, in_$i173, in_$i174, in_$p175, in_$p176, in_$i177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$i183, in_$p184, in_$i186, in_$i187, in_$p188, in_$i190, in_$i191, in_$p192, in_$i193, in_$i195, in_$i196, in_$p197, in_$i198, in_$i200, in_$i201, in_$p202, in_$i203, in_$i204, in_$p205, in_$i206, in_$i207, in_$p208, in_$i209, in_$i210, in_$i212, in_$i213, in_$p214, in_$i215, in_$i216, in_$i218, in_$i219, in_$p220, in_$i222, in_$i223, in_$p224, in_$i226, in_$i227, in_$p228, in_$i230, in_$i231, in_$p232, in_$i234, in_$i235, in_$p236, in_$i238, in_$i239, in_$p240, in_$i242, in_$i243, in_$p244, in_$i245, in_$i246, in_$i248, in_$i249, in_$p250, in_$i251, in_$i252, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$p266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$p274, in_$i275, in_$i276, in_$i277, in_$p278, in_$i279, in_$i280, in_$i281, in_$p282, in_$i283, in_$i284, in_$i285, in_$p286, in_$i287, in_$i288, in_$i289, in_$i290, in_$p291, in_$i292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$i303, in_$i304, in_$i305, in_$i306, in_$i307, in_$i308, in_$i309, in_$i310, in_$i311, in_$i312, in_$i313, in_$i314, in_vslice_dummy_var_59, in_vslice_dummy_var_60, in_vslice_dummy_var_61, in_vslice_dummy_var_62, in_vslice_dummy_var_63, in_vslice_dummy_var_64, in_vslice_dummy_var_65, in_vslice_dummy_var_66, in_vslice_dummy_var_67, in_vslice_dummy_var_68, in_vslice_dummy_var_69, in_vslice_dummy_var_70, in_vslice_dummy_var_71, in_vslice_dummy_var_72, in_vslice_dummy_var_73, in_vslice_dummy_var_74, in_vslice_dummy_var_75, in_vslice_dummy_var_76, in_vslice_dummy_var_77;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 902} out_$i48 := __VERIFIER_nondet_int();
    call {:si_unique_call 903} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i48);
    call {:si_unique_call 904} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i48);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb34_dummy;

  $bb309:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb307:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb226:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb223:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb23:
    assume !(out_$i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb28:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 909} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4462;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} out_vslice_dummy_var_59 := show_country_codes(in_$p10, in_$p12, in_$p8);
    goto corral_source_split_4461;

  $bb27:
    assume out_$i63 == 1;
    goto corral_source_split_4460;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, 1);
    goto corral_source_split_4458;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    out_$i62 := $M.38;
    goto corral_source_split_4457;

  $bb25:
    assume out_$i61 == 1;
    goto corral_source_split_4456;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i61 := $eq.i32(out_$i60, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_4454:
    assume {:verifier.code 1} true;
    call {:si_unique_call 905} out_$i60 := __VERIFIER_nondet_int();
    call {:si_unique_call 906} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i60);
    call {:si_unique_call 907} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i60);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb22:
    assume out_$i59 == 1;
    goto corral_source_split_4454;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    out_$i59 := $ne.i32(out_$i58, 0);
    goto corral_source_split_4452;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    out_$i58 := $M.38;
    goto corral_source_split_4451;

  $bb20:
    assume out_$i57 == 1;
    goto corral_source_split_4450;

  $bb18:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i48, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb14:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i48, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb3:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i48, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} ldv_stop();
    goto corral_source_split_4464;

  $bb26:
    assume !(out_$i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb36:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb56:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb54:
    assume !(out_$i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $M.44 := out_$i81;
    call {:si_unique_call 917} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_4499;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    out_$i81 := $add.i32(out_$i80, 1);
    goto corral_source_split_4498;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    out_$i80 := $M.44;
    goto corral_source_split_4497;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 916} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4496;

  $bb53:
    assume out_$i79 == 1;
    goto corral_source_split_4495;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_4492:
    assume {:verifier.code 0} true;
    out_$i79 := $eq.i32(out_$i78, 0);
    goto corral_source_split_4493;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    out_$i78 := $M.47;
    goto corral_source_split_4492;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $M.47 := out_$i77;
    call {:si_unique_call 915} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i77);
    goto corral_source_split_4491;

  SeqInstr_102:
    goto corral_source_split_4490;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} out_$i77 := acm_probe(out_$p76, in_$p14);
    goto SeqInstr_101;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    out_$p76 := $M.35;
    goto corral_source_split_4489;

  $bb51:
    assume out_$i75 == 1;
    goto corral_source_split_4488;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 1);
    goto corral_source_split_4486;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    out_$i74 := $M.39;
    goto corral_source_split_4485;

  $bb49:
    assume out_$i73 == 1;
    goto corral_source_split_4484;

  $bb47:
    assume out_$i72 == 1;
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i67, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb38:
    assume out_$i68 == 1;
    assume {:verifier.code 0} true;
    out_$i72 := $slt.i32(out_$i67, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb37:
    assume {:verifier.code 0} true;
    out_$i68 := $slt.i32(out_$i67, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4466:
    assume {:verifier.code 1} true;
    call {:si_unique_call 911} out_$i67 := __VERIFIER_nondet_int();
    call {:si_unique_call 912} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i67);
    call {:si_unique_call 913} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i67);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume out_$i66 == 1;
    goto corral_source_split_4466;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_4448;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    out_$i65 := $M.39;
    goto corral_source_split_4447;

  $bb19:
    assume !(out_$i56 == 1);
    goto corral_source_split_4446;

  $bb59:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb61:
    assume !(out_$i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    goto $bb62;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 920} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4509;

  $bb60:
    assume out_$i87 == 1;
    goto corral_source_split_4508;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    out_$i87 := $eq.i32(out_$i86, 0);
    goto corral_source_split_4506;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    out_$i86 := $M.48;
    goto corral_source_split_4505;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $M.48 := out_$i85;
    call {:si_unique_call 919} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i85);
    goto corral_source_split_4504;

  SeqInstr_105:
    goto corral_source_split_4503;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 918} out_$i85 := acm_reset_resume(out_$p84);
    goto SeqInstr_104;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    out_$p84 := $M.35;
    goto corral_source_split_4502;

  $bb58:
    assume out_$i83 == 1;
    goto corral_source_split_4501;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 3);
    goto corral_source_split_4482;

  corral_source_split_4480:
    assume {:verifier.code 0} true;
    out_$i82 := $M.39;
    goto corral_source_split_4481;

  $bb48:
    assume !(out_$i72 == 1);
    goto corral_source_split_4480;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $M.44 := out_$i101;
    call {:si_unique_call 926} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_4536;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    out_$i101 := $sub.i32(out_$i100, 1);
    goto corral_source_split_4535;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    out_$i100 := $M.44;
    goto corral_source_split_4534;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 925} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4533;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} acm_disconnect(out_$p99);
    goto corral_source_split_4532;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    out_$p99 := $M.35;
    goto corral_source_split_4531;

  $bb73:
    assume out_$i98 == 1;
    goto corral_source_split_4530;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_4528;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    out_$i97 := $M.49;
    goto corral_source_split_4527;

  $bb70:
    assume out_$i96 == 1;
    goto corral_source_split_4526;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    out_$i96 := $eq.i32(out_$i95, 2);
    goto corral_source_split_4524;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i95 := $M.39;
    goto corral_source_split_4523;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.44 := out_$i94;
    call {:si_unique_call 923} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i94);
    goto corral_source_split_4521;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    out_$i94 := $sub.i32(out_$i93, 1);
    goto corral_source_split_4520;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    out_$i93 := $M.44;
    goto corral_source_split_4519;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $M.39 := 1;
    call {:si_unique_call 922} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_4518;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 921} acm_disconnect(out_$p92);
    goto corral_source_split_4517;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    out_$p92 := $M.35;
    goto corral_source_split_4516;

  $bb67:
    assume out_$i91 == 1;
    goto corral_source_split_4515;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    out_$i91 := $eq.i32(out_$i90, 0);
    goto corral_source_split_4513;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    out_$i90 := $M.49;
    goto corral_source_split_4512;

  $bb64:
    assume out_$i89 == 1;
    goto corral_source_split_4511;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 3);
    goto corral_source_split_4470;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    out_$i88 := $M.39;
    goto corral_source_split_4469;

  $bb40:
    assume out_$i69 == 1;
    goto corral_source_split_4468;

  $bb39:
    assume !(out_$i68 == 1);
    assume {:verifier.code 0} true;
    out_$i69 := $slt.i32(out_$i67, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb65:
    assume {:verifier.code 0} true;
    assume !(out_$i89 == 1);
    goto $bb66;

  $bb68:
    assume {:verifier.code 0} true;
    assume !(out_$i91 == 1);
    goto $bb66;

  $bb71:
    assume {:verifier.code 0} true;
    assume !(out_$i96 == 1);
    goto $bb72;

  $bb74:
    assume {:verifier.code 0} true;
    assume !(out_$i98 == 1);
    goto $bb72;

  $bb77:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $M.39 := 3;
    call {:si_unique_call 928} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_4543;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 927} out_vslice_dummy_var_60 := acm_suspend(out_$p104, out_$i106);
    goto corral_source_split_4542;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i32($M.33, out_$p105);
    goto corral_source_split_4541;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4540;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    out_$p104 := $M.35;
    goto corral_source_split_4539;

  $bb76:
    assume out_$i103 == 1;
    goto corral_source_split_4538;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 2);
    goto corral_source_split_4474;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    out_$i102 := $M.39;
    goto corral_source_split_4473;

  $bb42:
    assume out_$i70 == 1;
    goto corral_source_split_4472;

  $bb41:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := $slt.i32(out_$i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb80:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb82:
    assume !(out_$i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $M.39 := 2;
    call {:si_unique_call 931} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_4553;

  $bb81:
    assume out_$i113 == 1;
    goto corral_source_split_4552;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    out_$i113 := $eq.i32(out_$i112, 0);
    goto corral_source_split_4550;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    out_$i112 := $M.50;
    goto corral_source_split_4549;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $M.50 := out_$i111;
    call {:si_unique_call 930} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i111);
    goto corral_source_split_4548;

  SeqInstr_108:
    goto corral_source_split_4547;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} out_$i111 := acm_resume(out_$p110);
    goto SeqInstr_107;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    out_$p110 := $M.35;
    goto corral_source_split_4546;

  $bb79:
    assume out_$i109 == 1;
    goto corral_source_split_4545;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i108, 3);
    goto corral_source_split_4478;

  corral_source_split_4476:
    assume {:verifier.code 0} true;
    out_$i108 := $M.39;
    goto corral_source_split_4477;

  $bb44:
    assume out_$i71 == 1;
    goto corral_source_split_4476;

  $bb43:
    assume !(out_$i70 == 1);
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i67, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} ldv_stop();
    goto corral_source_split_4555;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb45:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb46;

  $bb50:
    assume {:verifier.code 0} true;
    assume !(out_$i73 == 1);
    goto $bb46;

  $bb89:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb96:
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb98:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb94:
    assume !(out_$i119 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 937} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4565;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 936} out_vslice_dummy_var_61 := show_caps(in_$p18, in_$p16, in_$p19);
    goto corral_source_split_4564;

  $bb93:
    assume out_$i119 == 1;
    goto corral_source_split_4563;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i118, 1);
    goto corral_source_split_4561;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    out_$i118 := $M.40;
    goto corral_source_split_4560;

  $bb91:
    assume out_$i117 == 1;
    goto corral_source_split_4559;

  $bb90:
    assume {:verifier.code 0} true;
    out_$i117 := $eq.i32(out_$i116, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_4557:
    assume {:verifier.code 1} true;
    call {:si_unique_call 933} out_$i116 := __VERIFIER_nondet_int();
    call {:si_unique_call 934} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i116);
    call {:si_unique_call 935} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i116);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb88:
    assume out_$i115 == 1;
    goto corral_source_split_4557;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    out_$i115 := $ne.i32(out_$i114, 0);
    goto corral_source_split_4440;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    out_$i114 := $M.40;
    goto corral_source_split_4439;

  $bb16:
    assume out_$i55 == 1;
    goto corral_source_split_4438;

  $bb15:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i48, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb97:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} ldv_stop();
    goto corral_source_split_4567;

  $bb92:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb97;

  $bb101:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb139:
    assume {:verifier.code 0} true;
    goto $bb223;

  $bb222:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb220:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb214:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb208:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb202:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb184:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb172:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb166:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb151:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb145:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb138:
    assume {:verifier.code 0} true;
    goto $bb139;

  $bb137:
    assume !(out_$i141 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4635;

  SeqInstr_111:
    goto corral_source_split_4634;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    call {:si_unique_call 942} out_vslice_dummy_var_62 := acm_tty_write(out_$p142, in_$p20, out_$i143);
    goto SeqInstr_110;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i32($M.33, in_$p3);
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$p142 := $M.37;
    goto corral_source_split_4632;

  $bb136:
    assume out_$i141 == 1;
    goto corral_source_split_4631;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$i141 := $eq.i32(out_$i140, 2);
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$i140 := $M.41;
    goto corral_source_split_4628;

  $bb134:
    assume out_$i139 == 1;
    goto corral_source_split_4627;

  $bb130:
    assume out_$i137 == 1;
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i123, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb134, $bb135;

  $bb122:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i137 := $slt.i32(out_$i123, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb103:
    assume out_$i124 == 1;
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i123, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb122, $bb123;

  $bb102:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i123, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_4569:
    assume {:verifier.code 1} true;
    call {:si_unique_call 939} out_$i123 := __VERIFIER_nondet_int();
    call {:si_unique_call 940} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i123);
    call {:si_unique_call 941} {:cexpr "tmp___17"} boogie_si_record_i32(out_$i123);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb100:
    assume out_$i122 == 1;
    goto corral_source_split_4569;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i32(out_$i121, 0);
    goto corral_source_split_4444;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    out_$i121 := $M.41;
    goto corral_source_split_4443;

  $bb17:
    assume !(out_$i55 == 1);
    goto corral_source_split_4442;

  $bb144:
    assume !(out_$i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    goto $bb145;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 947} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} acm_tty_cleanup(out_$p150);
    goto corral_source_split_4647;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$p150 := $M.37;
    goto corral_source_split_4646;

  $bb143:
    assume out_$i149 == 1;
    goto corral_source_split_4645;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb143, $bb144;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    out_$i149 := $eq.i32(out_$i148, 2);
    goto corral_source_split_4643;

  $bb142:
    assume {:verifier.code 0} true;
    out_$i148 := $M.41;
    goto corral_source_split_4642;

  $bb141:
    assume !(out_$i146 == 1);
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    goto $bb142;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4640;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} acm_tty_cleanup(out_$p147);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$p147 := $M.37;
    goto corral_source_split_4638;

  $bb140:
    assume out_$i146 == 1;
    goto corral_source_split_4637;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$i146 := $eq.i32(out_$i145, 1);
    goto corral_source_split_4621;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    out_$i145 := $M.41;
    goto corral_source_split_4620;

  $bb132:
    assume out_$i138 == 1;
    goto corral_source_split_4619;

  $bb131:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    out_$i138 := $slt.i32(out_$i123, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb150:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    goto $bb151;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 951} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} acm_tty_throttle(out_$p156);
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$p156 := $M.37;
    goto corral_source_split_4659;

  $bb149:
    assume out_$i155 == 1;
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 2);
    goto corral_source_split_4656;

  $bb148:
    assume {:verifier.code 0} true;
    out_$i154 := $M.41;
    goto corral_source_split_4655;

  $bb147:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    goto $bb148;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 949} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} acm_tty_throttle(out_$p153);
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    out_$p153 := $M.37;
    goto corral_source_split_4651;

  $bb146:
    assume out_$i152 == 1;
    goto corral_source_split_4650;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb146, $bb147;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$i152 := $eq.i32(out_$i151, 1);
    goto corral_source_split_4625;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    out_$i151 := $M.41;
    goto corral_source_split_4624;

  $bb133:
    assume !(out_$i138 == 1);
    goto corral_source_split_4623;

  $bb156:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    goto $bb157;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 955} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 954} acm_tty_hangup(out_$p162);
    goto corral_source_split_4673;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$p162 := $M.37;
    goto corral_source_split_4672;

  $bb155:
    assume out_$i161 == 1;
    goto corral_source_split_4671;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb155, $bb156;

  corral_source_split_4668:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 2);
    goto corral_source_split_4669;

  $bb154:
    assume {:verifier.code 0} true;
    out_$i160 := $M.41;
    goto corral_source_split_4668;

  $bb153:
    assume !(out_$i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    goto $bb154;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 953} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4666;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} acm_tty_hangup(out_$p159);
    goto corral_source_split_4665;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    out_$p159 := $M.37;
    goto corral_source_split_4664;

  $bb152:
    assume out_$i158 == 1;
    goto corral_source_split_4663;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$i158 := $eq.i32(out_$i157, 1);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    out_$i157 := $M.41;
    goto corral_source_split_4612;

  $bb128:
    assume out_$i136 == 1;
    goto corral_source_split_4611;

  $bb124:
    assume out_$i134 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i123, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb128, $bb129;

  $bb123:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i123, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb159:
    assume !(out_$i164 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 957} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4680;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} acm_tty_close(out_$p165, out_$p166);
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    out_$p166 := $M.36;
    goto corral_source_split_4678;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$p165 := $M.37;
    goto corral_source_split_4677;

  $bb158:
    assume out_$i164 == 1;
    goto corral_source_split_4676;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i164 := $eq.i32(out_$i163, 2);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$i163 := $M.41;
    goto corral_source_split_4616;

  $bb129:
    assume !(out_$i136 == 1);
    goto corral_source_split_4615;

  $bb165:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    goto $bb166;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 961} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4693;

  SeqInstr_117:
    goto corral_source_split_4692;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    call {:si_unique_call 960} acm_tty_unthrottle(out_$p172);
    goto SeqInstr_116;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$p172 := $M.37;
    goto corral_source_split_4691;

  $bb164:
    assume out_$i171 == 1;
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 2);
    goto corral_source_split_4688;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i170 := $M.41;
    goto corral_source_split_4687;

  $bb162:
    assume !(out_$i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    goto $bb163;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 959} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4685;

  SeqInstr_114:
    goto corral_source_split_4684;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} acm_tty_unthrottle(out_$p169);
    goto SeqInstr_113;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    out_$p169 := $M.37;
    goto corral_source_split_4683;

  $bb161:
    assume out_$i168 == 1;
    goto corral_source_split_4682;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$i168 := $eq.i32(out_$i167, 1);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$i167 := $M.41;
    goto corral_source_split_4604;

  $bb126:
    assume out_$i135 == 1;
    goto corral_source_split_4603;

  $bb125:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i123, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb168:
    assume !(out_$i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb172;

  $bb170:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    goto $bb171;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $M.44 := out_$i181;
    call {:si_unique_call 965} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i181);
    goto corral_source_split_4707;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    out_$i181 := $add.i32(out_$i180, 1);
    goto corral_source_split_4706;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    out_$i180 := $M.44;
    goto corral_source_split_4705;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 964} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4704;

  $bb169:
    assume out_$i179 == 1;
    goto corral_source_split_4703;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 0);
    goto corral_source_split_4701;

  corral_source_split_4699:
    assume {:verifier.code 0} true;
    out_$i178 := $M.51;
    goto corral_source_split_4700;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    $M.51 := out_$i177;
    call {:si_unique_call 963} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i177);
    goto corral_source_split_4699;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} out_$i177 := acm_tty_open(out_$p175, out_$p176);
    goto corral_source_split_4698;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    out_$p176 := $M.36;
    goto corral_source_split_4697;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$p175 := $M.37;
    goto corral_source_split_4696;

  $bb167:
    assume out_$i174 == 1;
    goto corral_source_split_4695;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb167, $bb168;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    out_$i174 := $eq.i32(out_$i173, 1);
    goto corral_source_split_4609;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$i173 := $M.41;
    goto corral_source_split_4608;

  $bb127:
    assume !(out_$i135 == 1);
    goto corral_source_split_4607;

  $bb177:
    assume !(out_$i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    goto $bb178;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 969} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4720;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} out_vslice_dummy_var_64 := acm_tty_write_room(out_$p188);
    goto corral_source_split_4719;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    out_$p188 := $M.37;
    goto corral_source_split_4718;

  $bb176:
    assume out_$i187 == 1;
    goto corral_source_split_4717;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb176, $bb177;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    out_$i187 := $eq.i32(out_$i186, 2);
    goto corral_source_split_4715;

  $bb175:
    assume {:verifier.code 0} true;
    out_$i186 := $M.41;
    goto corral_source_split_4714;

  $bb174:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    goto $bb175;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 967} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4712;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} out_vslice_dummy_var_63 := acm_tty_write_room(out_$p184);
    goto corral_source_split_4711;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    out_$p184 := $M.37;
    goto corral_source_split_4710;

  $bb173:
    assume out_$i183 == 1;
    goto corral_source_split_4709;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb173, $bb174;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 1);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    out_$i182 := $M.41;
    goto corral_source_split_4596;

  $bb120:
    assume out_$i132 == 1;
    goto corral_source_split_4595;

  $bb116:
    assume out_$i130 == 1;
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i123, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb105:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i123, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb116, $bb117;

  $bb104:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i123, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb183:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    goto $bb184;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 973} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4735;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} out_vslice_dummy_var_66 := acm_tty_break_ctl(out_$p197, out_$i198);
    goto corral_source_split_4734;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i32($M.33, in_$p5);
    goto corral_source_split_4733;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    out_$p197 := $M.37;
    goto corral_source_split_4732;

  $bb182:
    assume out_$i196 == 1;
    goto corral_source_split_4731;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb182, $bb183;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 2);
    goto corral_source_split_4729;

  $bb181:
    assume {:verifier.code 0} true;
    out_$i195 := $M.41;
    goto corral_source_split_4728;

  $bb180:
    assume !(out_$i191 == 1);
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb181;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 971} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4726;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} out_vslice_dummy_var_65 := acm_tty_break_ctl(out_$p192, out_$i193);
    goto corral_source_split_4725;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    out_$i193 := $load.i32($M.33, in_$p5);
    goto corral_source_split_4724;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    out_$p192 := $M.37;
    goto corral_source_split_4723;

  $bb179:
    assume out_$i191 == 1;
    goto corral_source_split_4722;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    out_$i191 := $eq.i32(out_$i190, 1);
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$i190 := $M.41;
    goto corral_source_split_4600;

  $bb121:
    assume !(out_$i132 == 1);
    goto corral_source_split_4599;

  $bb189:
    assume !(out_$i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    goto $bb190;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 977} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4748;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} acm_tty_set_termios(out_$p205, in_$p22);
    goto corral_source_split_4747;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    out_$p205 := $M.37;
    goto corral_source_split_4746;

  $bb188:
    assume out_$i204 == 1;
    goto corral_source_split_4745;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb188, $bb189;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    out_$i204 := $eq.i32(out_$i203, 2);
    goto corral_source_split_4743;

  $bb187:
    assume {:verifier.code 0} true;
    out_$i203 := $M.41;
    goto corral_source_split_4742;

  $bb186:
    assume !(out_$i201 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    goto $bb187;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 975} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4740;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} acm_tty_set_termios(out_$p202, in_$p22);
    goto corral_source_split_4739;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    out_$p202 := $M.37;
    goto corral_source_split_4738;

  $bb185:
    assume out_$i201 == 1;
    goto corral_source_split_4737;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185, $bb186;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$i201 := $eq.i32(out_$i200, 1);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$i200 := $M.41;
    goto corral_source_split_4588;

  $bb118:
    assume out_$i131 == 1;
    goto corral_source_split_4587;

  $bb117:
    assume !(out_$i130 == 1);
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i123, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb195:
    assume !(out_$i213 == 1);
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    goto $bb196;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 981} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4765;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} out_vslice_dummy_var_68 := acm_tty_ioctl(out_$p214, out_$i215, out_$i216);
    goto corral_source_split_4764;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i64($M.33, in_$p1);
    goto corral_source_split_4763;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    out_$i215 := $load.i32($M.33, in_$p2);
    goto corral_source_split_4762;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    out_$p214 := $M.37;
    goto corral_source_split_4761;

  $bb194:
    assume out_$i213 == 1;
    goto corral_source_split_4760;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    out_$i213 := $eq.i32(out_$i212, 2);
    goto corral_source_split_4758;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i212 := $M.41;
    goto corral_source_split_4757;

  $bb192:
    assume !(out_$i207 == 1);
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    goto $bb193;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 979} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4755;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 978} out_vslice_dummy_var_67 := acm_tty_ioctl(out_$p208, out_$i209, out_$i210);
    goto corral_source_split_4754;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    out_$i210 := $load.i64($M.33, in_$p1);
    goto corral_source_split_4753;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    out_$i209 := $load.i32($M.33, in_$p2);
    goto corral_source_split_4752;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    out_$p208 := $M.37;
    goto corral_source_split_4751;

  $bb191:
    assume out_$i207 == 1;
    goto corral_source_split_4750;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    out_$i207 := $eq.i32(out_$i206, 1);
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$i206 := $M.41;
    goto corral_source_split_4592;

  $bb119:
    assume !(out_$i131 == 1);
    goto corral_source_split_4591;

  $bb201:
    assume !(out_$i223 == 1);
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    goto $bb202;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 985} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4778;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 984} out_vslice_dummy_var_70 := acm_tty_chars_in_buffer(out_$p224);
    goto corral_source_split_4777;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    out_$p224 := $M.37;
    goto corral_source_split_4776;

  $bb200:
    assume out_$i223 == 1;
    goto corral_source_split_4775;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    out_$i223 := $eq.i32(out_$i222, 2);
    goto corral_source_split_4773;

  $bb199:
    assume {:verifier.code 0} true;
    out_$i222 := $M.41;
    goto corral_source_split_4772;

  $bb198:
    assume !(out_$i219 == 1);
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    goto $bb199;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 983} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4770;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} out_vslice_dummy_var_69 := acm_tty_chars_in_buffer(out_$p220);
    goto corral_source_split_4769;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    out_$p220 := $M.37;
    goto corral_source_split_4768;

  $bb197:
    assume out_$i219 == 1;
    goto corral_source_split_4767;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb197, $bb198;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$i219 := $eq.i32(out_$i218, 1);
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$i218 := $M.41;
    goto corral_source_split_4580;

  $bb114:
    assume out_$i129 == 1;
    goto corral_source_split_4579;

  $bb107:
    assume out_$i126 == 1;
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i123, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb106:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i123, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb207:
    assume !(out_$i231 == 1);
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    goto $bb208;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 989} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4791;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} out_vslice_dummy_var_72 := acm_tty_tiocmget(out_$p232);
    goto corral_source_split_4790;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    out_$p232 := $M.37;
    goto corral_source_split_4789;

  $bb206:
    assume out_$i231 == 1;
    goto corral_source_split_4788;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb206, $bb207;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    out_$i231 := $eq.i32(out_$i230, 2);
    goto corral_source_split_4786;

  $bb205:
    assume {:verifier.code 0} true;
    out_$i230 := $M.41;
    goto corral_source_split_4785;

  $bb204:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 987} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4783;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} out_vslice_dummy_var_71 := acm_tty_tiocmget(out_$p228);
    goto corral_source_split_4782;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    out_$p228 := $M.37;
    goto corral_source_split_4781;

  $bb203:
    assume out_$i227 == 1;
    goto corral_source_split_4780;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 1);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$i226 := $M.41;
    goto corral_source_split_4584;

  $bb115:
    assume !(out_$i129 == 1);
    goto corral_source_split_4583;

  $bb213:
    assume !(out_$i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    goto $bb214;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 993} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4804;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} out_vslice_dummy_var_74 := acm_tty_install(in_$p24, out_$p240);
    goto corral_source_split_4803;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    out_$p240 := $M.37;
    goto corral_source_split_4802;

  $bb212:
    assume out_$i239 == 1;
    goto corral_source_split_4801;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb212, $bb213;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    out_$i239 := $eq.i32(out_$i238, 2);
    goto corral_source_split_4799;

  $bb211:
    assume {:verifier.code 0} true;
    out_$i238 := $M.41;
    goto corral_source_split_4798;

  $bb210:
    assume !(out_$i235 == 1);
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    goto $bb211;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 991} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4796;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} out_vslice_dummy_var_73 := acm_tty_install(in_$p24, out_$p236);
    goto corral_source_split_4795;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    out_$p236 := $M.37;
    goto corral_source_split_4794;

  $bb209:
    assume out_$i235 == 1;
    goto corral_source_split_4793;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    out_$i235 := $eq.i32(out_$i234, 1);
    goto corral_source_split_4573;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    out_$i234 := $M.41;
    goto corral_source_split_4572;

  $bb109:
    assume out_$i127 == 1;
    goto corral_source_split_4571;

  $bb108:
    assume !(out_$i126 == 1);
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i123, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb219:
    assume !(out_$i249 == 1);
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    goto $bb220;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $M.41 := 2;
    call {:si_unique_call 997} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_4821;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 996} out_vslice_dummy_var_76 := acm_tty_tiocmset(out_$p250, out_$i251, out_$i252);
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i252 := $load.i32($M.33, in_$p4);
    goto corral_source_split_4819;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    out_$i251 := $load.i32($M.33, in_$p6);
    goto corral_source_split_4818;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    out_$p250 := $M.37;
    goto corral_source_split_4817;

  $bb218:
    assume out_$i249 == 1;
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb218, $bb219;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    out_$i249 := $eq.i32(out_$i248, 2);
    goto corral_source_split_4814;

  $bb217:
    assume {:verifier.code 0} true;
    out_$i248 := $M.41;
    goto corral_source_split_4813;

  $bb216:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb217;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 995} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4811;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} out_vslice_dummy_var_75 := acm_tty_tiocmset(out_$p244, out_$i245, out_$i246);
    goto corral_source_split_4810;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    out_$i246 := $load.i32($M.33, in_$p4);
    goto corral_source_split_4809;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i32($M.33, in_$p6);
    goto corral_source_split_4808;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    out_$p244 := $M.37;
    goto corral_source_split_4807;

  $bb215:
    assume out_$i243 == 1;
    goto corral_source_split_4806;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 1);
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    out_$i242 := $M.41;
    goto corral_source_split_4576;

  $bb111:
    assume out_$i128 == 1;
    goto corral_source_split_4575;

  $bb110:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i123, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    goto $bb222;

  $bb221:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} ldv_stop();
    goto corral_source_split_4823;

  $bb113:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb112:
    assume {:verifier.code 0} true;
    assume !(out_$i128 == 1);
    goto $bb113;

  $bb135:
    assume {:verifier.code 0} true;
    assume !(out_$i139 == 1);
    goto $bb113;

  $bb225:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    goto $bb226;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} invoke_work_1();
    goto corral_source_split_4826;

  $bb224:
    assume out_$i255 == 1;
    goto corral_source_split_4825;

  corral_source_split_4432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb224, $bb225;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$i255 := $ne.i32(out_$i254, 0);
    goto corral_source_split_4432;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$i254 := $M.42;
    goto corral_source_split_4431;

  $bb12:
    assume out_$i53 == 1;
    goto corral_source_split_4430;

  $bb5:
    assume out_$i50 == 1;
    assume {:verifier.code 0} true;
    out_$i53 := $slt.i32(out_$i48, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb4:
    assume !(out_$i49 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := $slt.i32(out_$i48, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb228:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb264:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb262:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb259:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb246:
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb242:
    assume !(out_$i265 == 1);
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb245:
    assume {:verifier.code 0} true;
    goto $bb246;

  $bb244:
    assume !(out_$i269 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $M.44 := out_$i271;
    call {:si_unique_call 1006} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i271);
    goto corral_source_split_4857;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    out_$i271 := $add.i32(out_$i270, 1);
    goto corral_source_split_4856;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    out_$i270 := $M.44;
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1005} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4854;

  $bb243:
    assume out_$i269 == 1;
    goto corral_source_split_4853;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$i269 := $eq.i32(out_$i268, 0);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i268 := $M.52;
    goto corral_source_split_4850;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.52 := out_$i267;
    call {:si_unique_call 1004} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i267);
    goto corral_source_split_4849;

  SeqInstr_120:
    goto corral_source_split_4848;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} out_$i267 := acm_port_activate(out_$p266, in_$p26);
    goto SeqInstr_119;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$p266 := $M.34;
    goto corral_source_split_4847;

  $bb241:
    assume out_$i265 == 1;
    goto corral_source_split_4846;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb241, $bb242;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 1);
    goto corral_source_split_4844;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i264 := $M.43;
    goto corral_source_split_4843;

  $bb239:
    assume out_$i263 == 1;
    goto corral_source_split_4842;

  $bb237:
    assume out_$i262 == 1;
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb230:
    assume out_$i259 == 1;
    assume {:verifier.code 0} true;
    out_$i262 := $slt.i32(out_$i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb229:
    assume {:verifier.code 0} true;
    out_$i259 := $slt.i32(out_$i258, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_4828:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1000} out_$i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 1001} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i258);
    call {:si_unique_call 1002} {:cexpr "tmp___18"} boogie_si_record_i32(out_$i258);
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb227:
    assume out_$i257 == 1;
    goto corral_source_split_4828;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb227, $bb228;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    out_$i257 := $ne.i32(out_$i256, 0);
    goto corral_source_split_4436;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    out_$i256 := $M.43;
    goto corral_source_split_4435;

  $bb13:
    assume !(out_$i53 == 1);
    goto corral_source_split_4434;

  $bb255:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_4880:
    assume {:verifier.code 0} true;
    $M.43 := 2;
    call {:si_unique_call 1012} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_4881;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} acm_port_dtr_rts(out_$p282, out_$i283);
    goto corral_source_split_4880;

  corral_source_split_4878:
    assume {:verifier.code 0} true;
    out_$i283 := $load.i32($M.33, in_$p7);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    out_$p282 := $M.34;
    goto corral_source_split_4878;

  $bb254:
    assume out_$i281 == 1;
    goto corral_source_split_4877;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_4874:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i32(out_$i280, 2);
    goto corral_source_split_4875;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i280 := $M.43;
    goto corral_source_split_4874;

  $bb252:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1010} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_4872;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} acm_port_dtr_rts(out_$p278, out_$i279);
    goto corral_source_split_4871;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    out_$i279 := $load.i32($M.33, in_$p7);
    goto corral_source_split_4870;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    out_$p278 := $M.34;
    goto corral_source_split_4869;

  $bb251:
    assume out_$i277 == 1;
    goto corral_source_split_4868;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    out_$i277 := $eq.i32(out_$i276, 3);
    goto corral_source_split_4866;

  $bb250:
    assume {:verifier.code 0} true;
    out_$i276 := $M.43;
    goto corral_source_split_4865;

  $bb249:
    assume !(out_$i273 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1008} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4863;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} acm_port_dtr_rts(out_$p274, out_$i275);
    goto corral_source_split_4862;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    out_$i275 := $load.i32($M.33, in_$p7);
    goto corral_source_split_4861;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    out_$p274 := $M.34;
    goto corral_source_split_4860;

  $bb248:
    assume out_$i273 == 1;
    goto corral_source_split_4859;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    out_$i273 := $eq.i32(out_$i272, 1);
    goto corral_source_split_4840;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$i272 := $M.43;
    goto corral_source_split_4839;

  $bb238:
    assume !(out_$i262 == 1);
    goto corral_source_split_4838;

  $bb258:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $M.44 := out_$i288;
    call {:si_unique_call 1015} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i288);
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    out_$i288 := $sub.i32(out_$i287, 1);
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    out_$i287 := $M.44;
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1014} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4886;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} acm_port_shutdown(out_$p286);
    goto corral_source_split_4885;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$p286 := $M.34;
    goto corral_source_split_4884;

  $bb257:
    assume out_$i285 == 1;
    goto corral_source_split_4883;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i285 := $eq.i32(out_$i284, 2);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$i284 := $M.43;
    goto corral_source_split_4831;

  $bb232:
    assume out_$i260 == 1;
    goto corral_source_split_4830;

  $bb231:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    out_$i260 := $slt.i32(out_$i258, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb232, $bb233;

  $bb261:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $M.43 := 3;
    call {:si_unique_call 1017} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_4894;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} acm_port_destruct(out_$p291);
    goto corral_source_split_4893;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    out_$p291 := $M.34;
    goto corral_source_split_4892;

  $bb260:
    assume out_$i290 == 1;
    goto corral_source_split_4891;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 1);
    goto corral_source_split_4836;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    out_$i289 := $M.43;
    goto corral_source_split_4835;

  $bb234:
    assume out_$i261 == 1;
    goto corral_source_split_4834;

  $bb233:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i258, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    goto $bb264;

  $bb263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} ldv_stop();
    goto corral_source_split_4896;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb235:
    assume {:verifier.code 0} true;
    assume !(out_$i261 == 1);
    goto $bb236;

  $bb240:
    assume {:verifier.code 0} true;
    assume !(out_$i263 == 1);
    goto $bb236;

  $bb267:
    assume !(out_$i293 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb294:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb292:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb282:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb277:
    assume {:verifier.code 0} true;
    assume !(out_$i299 == 1);
    goto $bb278;

  $bb280:
    assume {:verifier.code 0} true;
    assume !(out_$i301 == 1);
    goto $bb278;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb280;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$i301 := $eq.i32(out_$i300, 0);
    goto corral_source_split_4910;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    out_$i300 := $M.44;
    goto corral_source_split_4909;

  $bb276:
    assume out_$i299 == 1;
    goto corral_source_split_4908;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 2);
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i298 := $M.45;
    goto corral_source_split_4905;

  $bb274:
    assume out_$i297 == 1;
    goto corral_source_split_4904;

  $bb269:
    assume out_$i295 == 1;
    assume {:verifier.code 0} true;
    out_$i297 := $eq.i32(out_$i294, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb274, $bb275;

  $bb268:
    assume {:verifier.code 0} true;
    out_$i295 := $slt.i32(out_$i294, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_4898:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1019} out_$i294 := __VERIFIER_nondet_int();
    call {:si_unique_call 1020} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i294);
    call {:si_unique_call 1021} {:cexpr "tmp___19"} boogie_si_record_i32(out_$i294);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb266:
    assume out_$i293 == 1;
    goto corral_source_split_4898;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_4423:
    assume {:verifier.code 0} true;
    out_$i293 := $ne.i32(out_$i292, 0);
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    out_$i292 := $M.45;
    goto corral_source_split_4423;

  $bb7:
    assume out_$i51 == 1;
    goto corral_source_split_4422;

  $bb6:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i51 := $slt.i32(out_$i48, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb285:
    assume !(out_$i303 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb291:
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb290:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    goto $bb291;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $M.38 := 1;
    call {:si_unique_call 1035} {:cexpr "ldv_state_variable_6"} boogie_si_record_i32(1);
    goto corral_source_split_4938;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} ldv_tty_port_operations_4();
    goto corral_source_split_4937;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $M.43 := 1;
    call {:si_unique_call 1033} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_4936;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    $M.40 := 1;
    call {:si_unique_call 1032} {:cexpr "ldv_state_variable_7"} boogie_si_record_i32(1);
    goto corral_source_split_4935;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} ldv_initialize_tty_operations_2();
    goto corral_source_split_4934;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    $M.41 := 1;
    call {:si_unique_call 1030} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_4933;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1029} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4932;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1028} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_4931;

  $bb289:
    assume out_$i308 == 1;
    goto corral_source_split_4930;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 0);
    goto corral_source_split_4928;

  $bb288:
    assume {:verifier.code 0} true;
    out_$i307 := $M.53;
    goto corral_source_split_4927;

  $bb287:
    assume !(out_$i306 == 1);
    assume {:verifier.code 0} true;
    goto $bb288;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$i306 := $ne.i32(out_$i305, 0);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$i305 := $M.53;
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $M.53 := out_$i304;
    call {:si_unique_call 1026} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i304);
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1025} out_$i304 := acm_init();
    goto corral_source_split_4919;

  $bb284:
    assume out_$i303 == 1;
    goto corral_source_split_4918;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$i303 := $eq.i32(out_$i302, 1);
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    out_$i302 := $M.45;
    goto corral_source_split_4901;

  $bb271:
    assume out_$i296 == 1;
    goto corral_source_split_4900;

  $bb270:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i294, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb271, $bb272;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    goto $bb294;

  $bb293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} ldv_stop();
    goto corral_source_split_4940;

  $bb273:
    assume {:verifier.code 0} true;
    goto $bb293;

  $bb272:
    assume {:verifier.code 0} true;
    assume !(out_$i296 == 1);
    goto $bb273;

  $bb275:
    assume {:verifier.code 0} true;
    assume !(out_$i297 == 1);
    goto $bb273;

  $bb297:
    assume !(out_$i310 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb304:
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb306:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb303:
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb302:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    goto $bb303;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1041} {:cexpr "ldv_state_variable_5"} boogie_si_record_i32(1);
    goto corral_source_split_4950;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} out_vslice_dummy_var_77 := show_country_rel_date(in_$p31, in_$p28, in_$p29);
    goto corral_source_split_4949;

  $bb301:
    assume out_$i314 == 1;
    goto corral_source_split_4948;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb301, $bb302;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 1);
    goto corral_source_split_4946;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    out_$i313 := $M.46;
    goto corral_source_split_4945;

  $bb299:
    assume out_$i312 == 1;
    goto corral_source_split_4944;

  $bb298:
    assume {:verifier.code 0} true;
    out_$i312 := $eq.i32(out_$i311, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_4942:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1037} out_$i311 := __VERIFIER_nondet_int();
    call {:si_unique_call 1038} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i311);
    call {:si_unique_call 1039} {:cexpr "tmp___20"} boogie_si_record_i32(out_$i311);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb296:
    assume out_$i310 == 1;
    goto corral_source_split_4942;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$i310 := $ne.i32(out_$i309, 0);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$i309 := $M.46;
    goto corral_source_split_4427;

  $bb9:
    assume out_$i52 == 1;
    goto corral_source_split_4426;

  $bb8:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    out_$i52 := $eq.i32(out_$i48, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    goto $bb306;

  $bb305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} ldv_stop();
    goto corral_source_split_4952;

  $bb300:
    assume !(out_$i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb305;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb309;

  $bb308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} ldv_stop();
    goto corral_source_split_4954;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb308;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i52 == 1);
    goto $bb11;

  $bb21:
    assume {:verifier.code 0} true;
    assume !(out_$i57 == 1);
    goto $bb11;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i248, out_$i249, out_$p250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p10, in_$p12, in_$p14, in_$p16, in_$p18, in_$p19, in_$p20, in_$p22, in_$p24, in_$p26, in_$p28, in_$p29, in_$p31, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p76, out_$i77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$i83, out_$p84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$i90, out_$i91, out_$p92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$p104, out_$p105, out_$i106, out_$i108, out_$i109, out_$p110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$i140, out_$i141, out_$p142, out_$i143, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$p150, out_$i151, out_$i152, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$p159, out_$i160, out_$i161, out_$p162, out_$i163, out_$i164, out_$p165, out_$p166, out_$i167, out_$i168, out_$p169, out_$i170, out_$i171, out_$p172, out_$i173, out_$i174, out_$p175, out_$p176, out_$i177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$i183, out_$p184, out_$i186, out_$i187, out_$p188, out_$i190, out_$i191, out_$p192, out_$i193, out_$i195, out_$i196, out_$p197, out_$i198, out_$i200, out_$i201, out_$p202, out_$i203, out_$i204, out_$p205, out_$i206, out_$i207, out_$p208, out_$i209, out_$i210, out_$i212, out_$i213, out_$p214, out_$i215, out_$i216, out_$i218, out_$i219, out_$p220, out_$i222, out_$i223, out_$p224, out_$i226, out_$i227, out_$p228, out_$i230, out_$i231, out_$p232, out_$i234, out_$i235, out_$p236, out_$i238, out_$i239, out_$p240, out_$i242, out_$i243, out_$p244, out_$i245, out_$i246, out_$i248, out_$i249, out_$p250, out_$i251, out_$i252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$p266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$p274, out_$i275, out_$i276, out_$i277, out_$p278, out_$i279, out_$i280, out_$i281, out_$p282, out_$i283, out_$i284, out_$i285, out_$p286, out_$i287, out_$i288, out_$i289, out_$i290, out_$p291, out_$i292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$i303, out_$i304, out_$i305, out_$i306, out_$i307, out_$i308, out_$i309, out_$i310, out_$i311, out_$i312, out_$i313, out_$i314, out_vslice_dummy_var_59, out_vslice_dummy_var_60, out_vslice_dummy_var_61, out_vslice_dummy_var_62, out_vslice_dummy_var_63, out_vslice_dummy_var_64, out_vslice_dummy_var_65, out_vslice_dummy_var_66, out_vslice_dummy_var_67, out_vslice_dummy_var_68, out_vslice_dummy_var_69, out_vslice_dummy_var_70, out_vslice_dummy_var_71, out_vslice_dummy_var_72, out_vslice_dummy_var_73, out_vslice_dummy_var_74, out_vslice_dummy_var_75, out_vslice_dummy_var_76, out_vslice_dummy_var_77);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p10: ref, in_$p12: ref, in_$p14: ref, in_$p16: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p22: ref, in_$p24: ref, in_$p26: ref, in_$p28: ref, in_$p29: ref, in_$p31: ref, in_$i48: i32, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i52: i1, in_$i53: i1, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i1, in_$i62: i32, in_$i63: i1, in_$i65: i32, in_$i66: i1, in_$i67: i32, in_$i68: i1, in_$i69: i1, in_$i70: i1, in_$i71: i1, in_$i72: i1, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p76: ref, in_$i77: i32, in_$i78: i32, in_$i79: i1, in_$i80: i32, in_$i81: i32, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$i85: i32, in_$i86: i32, in_$i87: i1, in_$i88: i32, in_$i89: i1, in_$i90: i32, in_$i91: i1, in_$p92: ref, in_$i93: i32, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$p104: ref, in_$p105: ref, in_$i106: i32, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i32, in_$i112: i32, in_$i113: i1, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i1, in_$i118: i32, in_$i119: i1, in_$i121: i32, in_$i122: i1, in_$i123: i32, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i1, in_$i139: i1, in_$i140: i32, in_$i141: i1, in_$p142: ref, in_$i143: i32, in_$i145: i32, in_$i146: i1, in_$p147: ref, in_$i148: i32, in_$i149: i1, in_$p150: ref, in_$i151: i32, in_$i152: i1, in_$p153: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i157: i32, in_$i158: i1, in_$p159: ref, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i163: i32, in_$i164: i1, in_$p165: ref, in_$p166: ref, in_$i167: i32, in_$i168: i1, in_$p169: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i173: i32, in_$i174: i1, in_$p175: ref, in_$p176: ref, in_$i177: i32, in_$i178: i32, in_$i179: i1, in_$i180: i32, in_$i181: i32, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$i186: i32, in_$i187: i1, in_$p188: ref, in_$i190: i32, in_$i191: i1, in_$p192: ref, in_$i193: i32, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i200: i32, in_$i201: i1, in_$p202: ref, in_$i203: i32, in_$i204: i1, in_$p205: ref, in_$i206: i32, in_$i207: i1, in_$p208: ref, in_$i209: i32, in_$i210: i64, in_$i212: i32, in_$i213: i1, in_$p214: ref, in_$i215: i32, in_$i216: i64, in_$i218: i32, in_$i219: i1, in_$p220: ref, in_$i222: i32, in_$i223: i1, in_$p224: ref, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i230: i32, in_$i231: i1, in_$p232: ref, in_$i234: i32, in_$i235: i1, in_$p236: ref, in_$i238: i32, in_$i239: i1, in_$p240: ref, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i245: i32, in_$i246: i32, in_$i248: i32, in_$i249: i1, in_$p250: ref, in_$i251: i32, in_$i252: i32, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i1, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$p266: ref, in_$i267: i32, in_$i268: i32, in_$i269: i1, in_$i270: i32, in_$i271: i32, in_$i272: i32, in_$i273: i1, in_$p274: ref, in_$i275: i32, in_$i276: i32, in_$i277: i1, in_$p278: ref, in_$i279: i32, in_$i280: i32, in_$i281: i1, in_$p282: ref, in_$i283: i32, in_$i284: i32, in_$i285: i1, in_$p286: ref, in_$i287: i32, in_$i288: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$i292: i32, in_$i293: i1, in_$i294: i32, in_$i295: i1, in_$i296: i1, in_$i297: i1, in_$i298: i32, in_$i299: i1, in_$i300: i32, in_$i301: i1, in_$i302: i32, in_$i303: i1, in_$i304: i32, in_$i305: i32, in_$i306: i1, in_$i307: i32, in_$i308: i1, in_$i309: i32, in_$i310: i1, in_$i311: i32, in_$i312: i1, in_$i313: i32, in_$i314: i1, in_vslice_dummy_var_59: i64, in_vslice_dummy_var_60: i32, in_vslice_dummy_var_61: i64, in_vslice_dummy_var_62: i32, in_vslice_dummy_var_63: i32, in_vslice_dummy_var_64: i32, in_vslice_dummy_var_65: i32, in_vslice_dummy_var_66: i32, in_vslice_dummy_var_67: i32, in_vslice_dummy_var_68: i32, in_vslice_dummy_var_69: i32, in_vslice_dummy_var_70: i32, in_vslice_dummy_var_71: i32, in_vslice_dummy_var_72: i32, in_vslice_dummy_var_73: i32, in_vslice_dummy_var_74: i32, in_vslice_dummy_var_75: i32, in_vslice_dummy_var_76: i32, in_vslice_dummy_var_77: i64) returns (out_$i48: i32, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i52: i1, out_$i53: i1, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i1, out_$i62: i32, out_$i63: i1, out_$i65: i32, out_$i66: i1, out_$i67: i32, out_$i68: i1, out_$i69: i1, out_$i70: i1, out_$i71: i1, out_$i72: i1, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p76: ref, out_$i77: i32, out_$i78: i32, out_$i79: i1, out_$i80: i32, out_$i81: i32, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$i85: i32, out_$i86: i32, out_$i87: i1, out_$i88: i32, out_$i89: i1, out_$i90: i32, out_$i91: i1, out_$p92: ref, out_$i93: i32, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$p104: ref, out_$p105: ref, out_$i106: i32, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i32, out_$i112: i32, out_$i113: i1, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i1, out_$i118: i32, out_$i119: i1, out_$i121: i32, out_$i122: i1, out_$i123: i32, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i1, out_$i139: i1, out_$i140: i32, out_$i141: i1, out_$p142: ref, out_$i143: i32, out_$i145: i32, out_$i146: i1, out_$p147: ref, out_$i148: i32, out_$i149: i1, out_$p150: ref, out_$i151: i32, out_$i152: i1, out_$p153: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i157: i32, out_$i158: i1, out_$p159: ref, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i163: i32, out_$i164: i1, out_$p165: ref, out_$p166: ref, out_$i167: i32, out_$i168: i1, out_$p169: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i173: i32, out_$i174: i1, out_$p175: ref, out_$p176: ref, out_$i177: i32, out_$i178: i32, out_$i179: i1, out_$i180: i32, out_$i181: i32, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$i186: i32, out_$i187: i1, out_$p188: ref, out_$i190: i32, out_$i191: i1, out_$p192: ref, out_$i193: i32, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i200: i32, out_$i201: i1, out_$p202: ref, out_$i203: i32, out_$i204: i1, out_$p205: ref, out_$i206: i32, out_$i207: i1, out_$p208: ref, out_$i209: i32, out_$i210: i64, out_$i212: i32, out_$i213: i1, out_$p214: ref, out_$i215: i32, out_$i216: i64, out_$i218: i32, out_$i219: i1, out_$p220: ref, out_$i222: i32, out_$i223: i1, out_$p224: ref, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i230: i32, out_$i231: i1, out_$p232: ref, out_$i234: i32, out_$i235: i1, out_$p236: ref, out_$i238: i32, out_$i239: i1, out_$p240: ref, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i245: i32, out_$i246: i32, out_$i248: i32, out_$i249: i1, out_$p250: ref, out_$i251: i32, out_$i252: i32, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i1, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$p266: ref, out_$i267: i32, out_$i268: i32, out_$i269: i1, out_$i270: i32, out_$i271: i32, out_$i272: i32, out_$i273: i1, out_$p274: ref, out_$i275: i32, out_$i276: i32, out_$i277: i1, out_$p278: ref, out_$i279: i32, out_$i280: i32, out_$i281: i1, out_$p282: ref, out_$i283: i32, out_$i284: i32, out_$i285: i1, out_$p286: ref, out_$i287: i32, out_$i288: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$i292: i32, out_$i293: i1, out_$i294: i32, out_$i295: i1, out_$i296: i1, out_$i297: i1, out_$i298: i32, out_$i299: i1, out_$i300: i32, out_$i301: i1, out_$i302: i32, out_$i303: i1, out_$i304: i32, out_$i305: i32, out_$i306: i1, out_$i307: i32, out_$i308: i1, out_$i309: i32, out_$i310: i1, out_$i311: i32, out_$i312: i1, out_$i313: i32, out_$i314: i1, out_vslice_dummy_var_59: i64, out_vslice_dummy_var_60: i32, out_vslice_dummy_var_61: i64, out_vslice_dummy_var_62: i32, out_vslice_dummy_var_63: i32, out_vslice_dummy_var_64: i32, out_vslice_dummy_var_65: i32, out_vslice_dummy_var_66: i32, out_vslice_dummy_var_67: i32, out_vslice_dummy_var_68: i32, out_vslice_dummy_var_69: i32, out_vslice_dummy_var_70: i32, out_vslice_dummy_var_71: i32, out_vslice_dummy_var_72: i32, out_vslice_dummy_var_73: i32, out_vslice_dummy_var_74: i32, out_vslice_dummy_var_75: i32, out_vslice_dummy_var_76: i32, out_vslice_dummy_var_77: i64);
  modifies $M.38, $M.44, $M.39, $M.47, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, assertsPassed, $M.48, $M.8, $M.18, $M.20, $M.22, $M.24, $M.17, $M.50, $M.40, $M.41, $M.51, $M.27, $M.28, $M.29, $M.30, $M.31, $M.26, $M.32, $M.43, $M.52, $M.34, $M.36, $M.37, $M.46, $M.45, $M.53, $M.16, $M.49, $M.35;


