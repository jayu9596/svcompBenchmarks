var $M.0: [ref]i8;

var $M.1: [ref]ref;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]i24;

var $M.6: [ref]i8;

var $M.7: [ref]i32;

var $M.9: [ref]i32;

var $M.10: [ref]ref;

var $M.11: [ref]ref;

var $M.12: [ref]ref;

var $M.13: [ref]ref;

var $M.14: i32;

var $M.15: [ref]i8;

var $M.16: [ref]i32;

var $M.17: [ref]i16;

var $M.18: i32;

var $M.19: [ref]ref;

var $M.20: [ref]ref;

var $M.21: [ref]ref;

var $M.22: [ref]ref;

var $M.23: [ref]ref;

var $M.24: [ref]ref;

var $M.25: [ref]ref;

var $M.26: [ref]i64;

var $M.27: [ref]i8;

var $M.28: [ref]i8;

var $M.29: ref;

var $M.30: ref;

var $M.31: ref;

var $M.32: ref;

var $M.33: ref;

var $M.34: ref;

var $M.35: ref;

var $M.36: ref;

var $M.37: ref;

var $M.38: ref;

var $M.39: ref;

var $M.40: ref;

var $M.41: ref;

var $M.42: ref;

var $M.43: ref;

var $M.44: ref;

var $M.45: i32;

var $M.46: i32;

var $M.47: i32;

var $M.48: i32;

var $M.49: i32;

var $M.50: i32;

var $M.51: i32;

var $M.52: i32;

var $M.53: i32;

var $M.54: i32;

var $M.55: i32;

var $M.56: i32;

var $M.57: i32;

var $M.58: i32;

var $M.59: i32;

var $M.61: [ref]i16;

var $M.62: [ref]i16;

var $M.63: [ref]i16;

var $M.64: [ref]i16;

var $M.65: [ref]i16;

var $M.66: [ref]i8;

var $M.67: [ref]i8;

var $M.68: [ref]i8;

var $M.69: [ref]i8;

var $M.70: [ref]i8;

var $M.71: [ref]i8;

var $M.72: [ref]i8;

var $M.73: [ref]i64;

var $M.74: [ref]i16;

var $M.75: [ref]i16;

var $M.76: [ref]i16;

var $M.77: [ref]i16;

var $M.78: [ref]i16;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: [ref]i64;

var $M.87: [ref]i8;

var $M.88: [ref]ref;

var $M.89: [ref]i32;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 510227);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const edgeport_2port_device_group0: ref;

axiom edgeport_2port_device_group0 == $sub.ref(0, 2060);

const edgeport_2port_device_group1: ref;

axiom edgeport_2port_device_group1 == $sub.ref(0, 3092);

const edgeport_2port_device_group2: ref;

axiom edgeport_2port_device_group2 == $sub.ref(0, 4124);

const edgeport_2port_device_group3: ref;

axiom edgeport_2port_device_group3 == $sub.ref(0, 5156);

const epic_device_group0: ref;

axiom epic_device_group0 == $sub.ref(0, 6188);

const epic_device_group1: ref;

axiom epic_device_group1 == $sub.ref(0, 7220);

const epic_device_group2: ref;

axiom epic_device_group2 == $sub.ref(0, 8252);

const epic_device_group3: ref;

axiom epic_device_group3 == $sub.ref(0, 9284);

const edgeport_8port_device_group0: ref;

axiom edgeport_8port_device_group0 == $sub.ref(0, 10316);

const edgeport_8port_device_group1: ref;

axiom edgeport_8port_device_group1 == $sub.ref(0, 11348);

const edgeport_8port_device_group2: ref;

axiom edgeport_8port_device_group2 == $sub.ref(0, 12380);

const edgeport_8port_device_group3: ref;

axiom edgeport_8port_device_group3 == $sub.ref(0, 13412);

const edgeport_4port_device_group0: ref;

axiom edgeport_4port_device_group0 == $sub.ref(0, 14444);

const edgeport_4port_device_group1: ref;

axiom edgeport_4port_device_group1 == $sub.ref(0, 15476);

const edgeport_4port_device_group2: ref;

axiom edgeport_4port_device_group2 == $sub.ref(0, 16508);

const edgeport_4port_device_group3: ref;

axiom edgeport_4port_device_group3 == $sub.ref(0, 17540);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 18568);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 19596);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 20624);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 21652);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 22680);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 23708);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 24736);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 25764);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 26792);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 27820);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 28848);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 29876);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 30904);

const ldv_retval_8: ref;

axiom ldv_retval_8 == $sub.ref(0, 31932);

const ldv_retval_7: ref;

axiom ldv_retval_7 == $sub.ref(0, 32960);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 33988);

const {:count 30} __mod_usb__id_table_combined_device_table: ref;

axiom __mod_usb__id_table_combined_device_table == $sub.ref(0, 35972);

const {:count 30} id_table_combined: ref;

axiom id_table_combined == $sub.ref(0, 37956);

const {:count 9} Epic_port_id_table: ref;

axiom Epic_port_id_table == $sub.ref(0, 39268);

const epic_device: ref;

axiom epic_device == $sub.ref(0, 40844);

const {:count 7} edgeport_8port_id_table: ref;

axiom edgeport_8port_id_table == $sub.ref(0, 42092);

const edgeport_8port_device: ref;

axiom edgeport_8port_device == $sub.ref(0, 43668);

const {:count 11} edgeport_4port_id_table: ref;

axiom edgeport_4port_id_table == $sub.ref(0, 45044);

const edgeport_4port_device: ref;

axiom edgeport_4port_device == $sub.ref(0, 46620);

const {:count 6} edgeport_2port_id_table: ref;

axiom edgeport_2port_id_table == $sub.ref(0, 47836);

const edgeport_2port_device: ref;

axiom edgeport_2port_device == $sub.ref(0, 49412);

const {:count 5} serial_drivers: ref;

axiom serial_drivers == $sub.ref(0, 50476);

const {:count 19} divisor_table: ref;

axiom divisor_table == $sub.ref(0, 51652);

const CmdUrbs: ref;

axiom CmdUrbs == $sub.ref(0, 52680);

const {:count 24} .str.216: ref;

axiom .str.216 == $sub.ref(0, 53728);

const {:count 11} .str.217: ref;

axiom .str.217 == $sub.ref(0, 54763);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const .str: ref;

axiom .str == $sub.ref(0, 55799);

const {:count 28} .str.57: ref;

axiom .str.57 == $sub.ref(0, 56851);

const {:count 211} .str.2: ref;

axiom .str.2 == $sub.ref(0, 58086);

const {:count 45} .str.18: ref;

axiom .str.18 == $sub.ref(0, 59155);

const {:count 20} .str.58: ref;

axiom .str.58 == $sub.ref(0, 60199);

const {:count 38} .str.59: ref;

axiom .str.59 == $sub.ref(0, 61261);

const {:count 44} .str.60: ref;

axiom .str.60 == $sub.ref(0, 62329);

const {:count 64} .str.61: ref;

axiom .str.61 == $sub.ref(0, 63417);

const {:count 42} .str.62: ref;

axiom .str.62 == $sub.ref(0, 64483);

const {:count 22} .str.13: ref;

axiom .str.13 == $sub.ref(0, 65529);

const {:count 27} .str.14: ref;

axiom .str.14 == $sub.ref(0, 66580);

const {:count 31} .str.15: ref;

axiom .str.15 == $sub.ref(0, 67635);

const {:count 22} .str.195: ref;

axiom .str.195 == $sub.ref(0, 68681);

const {:count 44} .str.196: ref;

axiom .str.196 == $sub.ref(0, 69749);

const {:count 38} .str.197: ref;

axiom .str.197 == $sub.ref(0, 70811);

const {:count 37} .str.198: ref;

axiom .str.198 == $sub.ref(0, 71872);

const {:count 21} .str.173: ref;

axiom .str.173 == $sub.ref(0, 72917);

const {:count 52} .str.199: ref;

axiom .str.199 == $sub.ref(0, 73993);

const {:count 18} .str.200: ref;

axiom .str.200 == $sub.ref(0, 75035);

const {:count 33} .str.201: ref;

axiom .str.201 == $sub.ref(0, 76092);

const {:count 26} .str.202: ref;

axiom .str.202 == $sub.ref(0, 77142);

const {:count 30} .str.203: ref;

axiom .str.203 == $sub.ref(0, 78196);

const {:count 42} .str.204: ref;

axiom .str.204 == $sub.ref(0, 79262);

const {:count 35} .str.214: ref;

axiom .str.214 == $sub.ref(0, 80321);

const {:count 14} .str.215: ref;

axiom .str.215 == $sub.ref(0, 81359);

const {:count 36} .str.205: ref;

axiom .str.205 == $sub.ref(0, 82419);

const {:count 20} .str.206: ref;

axiom .str.206 == $sub.ref(0, 83463);

const {:count 40} .str.207: ref;

axiom .str.207 == $sub.ref(0, 84527);

const {:count 63} .str.208: ref;

axiom .str.208 == $sub.ref(0, 85614);

const {:count 65} .str.209: ref;

axiom .str.209 == $sub.ref(0, 86703);

const {:count 32} .str.210: ref;

axiom .str.210 == $sub.ref(0, 87759);

const {:count 45} .str.211: ref;

axiom .str.211 == $sub.ref(0, 88828);

const {:count 32} .str.212: ref;

axiom .str.212 == $sub.ref(0, 89884);

const {:count 39} .str.213: ref;

axiom .str.213 == $sub.ref(0, 90947);

const {:count 21} .str.32: ref;

axiom .str.32 == $sub.ref(0, 91992);

const {:count 22} .str.3: ref;

axiom .str.3 == $sub.ref(0, 93038);

const {:count 20} .str.33: ref;

axiom .str.33 == $sub.ref(0, 94082);

const {:count 20} .str.34: ref;

axiom .str.34 == $sub.ref(0, 95126);

const {:count 20} .str.35: ref;

axiom .str.35 == $sub.ref(0, 96170);

const {:count 20} .str.36: ref;

axiom .str.36 == $sub.ref(0, 97214);

const {:count 20} .str.37: ref;

axiom .str.37 == $sub.ref(0, 98258);

const {:count 21} .str.38: ref;

axiom .str.38 == $sub.ref(0, 99303);

const {:count 19} .str.39: ref;

axiom .str.39 == $sub.ref(0, 100346);

const {:count 20} .str.40: ref;

axiom .str.40 == $sub.ref(0, 101390);

const {:count 20} .str.41: ref;

axiom .str.41 == $sub.ref(0, 102434);

const {:count 20} .str.42: ref;

axiom .str.42 == $sub.ref(0, 103478);

const {:count 20} .str.43: ref;

axiom .str.43 == $sub.ref(0, 104522);

const {:count 25} .str.44: ref;

axiom .str.44 == $sub.ref(0, 105571);

const {:count 26} .str.45: ref;

axiom .str.45 == $sub.ref(0, 106621);

const {:count 57} .str.46: ref;

axiom .str.46 == $sub.ref(0, 107702);

const {:count 35} .str.47: ref;

axiom .str.47 == $sub.ref(0, 108761);

const {:count 58} .str.48: ref;

axiom .str.48 == $sub.ref(0, 109843);

const {:count 36} .str.49: ref;

axiom .str.49 == $sub.ref(0, 110903);

const {:count 21} .str.50: ref;

axiom .str.50 == $sub.ref(0, 111948);

const {:count 25} .str.51: ref;

axiom .str.51 == $sub.ref(0, 112997);

const {:count 66} .str.52: ref;

axiom .str.52 == $sub.ref(0, 114087);

const {:count 16} .str.53: ref;

axiom .str.53 == $sub.ref(0, 115127);

const {:count 20} .str.54: ref;

axiom .str.54 == $sub.ref(0, 116171);

const {:count 14} .str.10: ref;

axiom .str.10 == $sub.ref(0, 117209);

const {:count 39} .str.11: ref;

axiom .str.11 == $sub.ref(0, 118272);

const {:count 56} .str.12: ref;

axiom .str.12 == $sub.ref(0, 119352);

const {:count 27} .str.16: ref;

axiom .str.16 == $sub.ref(0, 120403);

const {:count 35} .str.17: ref;

axiom .str.17 == $sub.ref(0, 121462);

const {:count 23} .str.55: ref;

axiom .str.55 == $sub.ref(0, 122509);

const {:count 19} .str.56: ref;

axiom .str.56 == $sub.ref(0, 123552);

const {:count 29} .str.4: ref;

axiom .str.4 == $sub.ref(0, 124605);

const {:count 34} .str.5: ref;

axiom .str.5 == $sub.ref(0, 125663);

const {:count 4} .str.6: ref;

axiom .str.6 == $sub.ref(0, 126691);

const {:count 4} .str.7: ref;

axiom .str.7 == $sub.ref(0, 127719);

const {:count 51} .str.8: ref;

axiom .str.8 == $sub.ref(0, 128794);

const {:count 51} .str.9: ref;

axiom .str.9 == $sub.ref(0, 129869);

const {:count 24} .str.169: ref;

axiom .str.169 == $sub.ref(0, 130917);

const {:count 40} .str.170: ref;

axiom .str.170 == $sub.ref(0, 131981);

const {:count 38} .str.171: ref;

axiom .str.171 == $sub.ref(0, 133043);

const {:count 59} .str.172: ref;

axiom .str.172 == $sub.ref(0, 134126);

const {:count 56} .str.174: ref;

axiom .str.174 == $sub.ref(0, 135206);

const {:count 32} .str.175: ref;

axiom .str.175 == $sub.ref(0, 136262);

const {:count 38} .str.20: ref;

axiom .str.20 == $sub.ref(0, 137324);

const {:count 16} .str.28: ref;

axiom .str.28 == $sub.ref(0, 138364);

const {:count 14} .str.1: ref;

axiom .str.1 == $sub.ref(0, 139402);

const {:count 21} .str.194: ref;

axiom .str.194 == $sub.ref(0, 140447);

const {:count 17} .str.189: ref;

axiom .str.189 == $sub.ref(0, 141488);

const {:count 11} .str.190: ref;

axiom .str.190 == $sub.ref(0, 142523);

const {:count 34} .str.177: ref;

axiom .str.177 == $sub.ref(0, 143581);

const {:count 33} .str.191: ref;

axiom .str.191 == $sub.ref(0, 144638);

const {:count 35} .str.192: ref;

axiom .str.192 == $sub.ref(0, 145697);

const {:count 45} .str.193: ref;

axiom .str.193 == $sub.ref(0, 146766);

const {:count 27} .str.183: ref;

axiom .str.183 == $sub.ref(0, 147817);

const {:count 25} .str.184: ref;

axiom .str.184 == $sub.ref(0, 148866);

const {:count 22} .str.185: ref;

axiom .str.185 == $sub.ref(0, 149912);

const {:count 20} .str.186: ref;

axiom .str.186 == $sub.ref(0, 150956);

const {:count 26} .str.187: ref;

axiom .str.187 == $sub.ref(0, 152006);

const current_task: ref;

axiom current_task == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 17} .str.29: ref;

axiom .str.29 == $sub.ref(0, 153047);

const {:count 28} .str.30: ref;

axiom .str.30 == $sub.ref(0, 154099);

const {:count 36} .str.31: ref;

axiom .str.31 == $sub.ref(0, 155159);

const {:count 11} .str.63: ref;

axiom .str.63 == $sub.ref(0, 156194);

const {:count 18} .str.64: ref;

axiom .str.64 == $sub.ref(0, 157236);

const {:count 16} .str.65: ref;

axiom .str.65 == $sub.ref(0, 158276);

const {:count 33} .str.68: ref;

axiom .str.68 == $sub.ref(0, 159333);

const {:count 13} .str.66: ref;

axiom .str.66 == $sub.ref(0, 160370);

const {:count 13} .str.67: ref;

axiom .str.67 == $sub.ref(0, 161407);

const {:count 16} .str.188: ref;

axiom .str.188 == $sub.ref(0, 162447);

const {:count 11} .str.69: ref;

axiom .str.69 == $sub.ref(0, 163482);

const {:count 54} .str.70: ref;

axiom .str.70 == $sub.ref(0, 164560);

const {:count 22} .str.71: ref;

axiom .str.71 == $sub.ref(0, 165606);

const {:count 37} .str.72: ref;

axiom .str.72 == $sub.ref(0, 166667);

const {:count 27} .str.73: ref;

axiom .str.73 == $sub.ref(0, 167718);

const {:count 43} .str.74: ref;

axiom .str.74 == $sub.ref(0, 168785);

const {:count 11} .str.176: ref;

axiom .str.176 == $sub.ref(0, 169820);

const {:count 34} .str.178: ref;

axiom .str.178 == $sub.ref(0, 170878);

const {:count 21} .str.179: ref;

axiom .str.179 == $sub.ref(0, 171923);

const {:count 22} .str.180: ref;

axiom .str.180 == $sub.ref(0, 172969);

const {:count 9} .str.181: ref;

axiom .str.181 == $sub.ref(0, 174002);

const {:count 14} .str.182: ref;

axiom .str.182 == $sub.ref(0, 175040);

const {:count 10} .str.21: ref;

axiom .str.21 == $sub.ref(0, 176074);

const {:count 22} .str.22: ref;

axiom .str.22 == $sub.ref(0, 177120);

const {:count 23} .str.23: ref;

axiom .str.23 == $sub.ref(0, 178167);

const {:count 25} .str.24: ref;

axiom .str.24 == $sub.ref(0, 179216);

const {:count 38} .str.25: ref;

axiom .str.25 == $sub.ref(0, 180278);

const {:count 20} .str.26: ref;

axiom .str.26 == $sub.ref(0, 181322);

const {:count 37} .str.27: ref;

axiom .str.27 == $sub.ref(0, 182383);

const {:count 30} .str.19: ref;

axiom .str.19 == $sub.ref(0, 183437);

const {:count 32} .str.75: ref;

axiom .str.75 == $sub.ref(0, 184493);

const {:count 13} .str.76: ref;

axiom .str.76 == $sub.ref(0, 185530);

const {:count 108} .str.77: ref;

axiom .str.77 == $sub.ref(0, 186662);

const {:count 13} .str.78: ref;

axiom .str.78 == $sub.ref(0, 187699);

const {:count 17} .str.79: ref;

axiom .str.79 == $sub.ref(0, 188740);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const {:count 17} .str.80: ref;

axiom .str.80 == $sub.ref(0, 189781);

const {:count 17} .str.81: ref;

axiom .str.81 == $sub.ref(0, 190822);

const {:count 34} .str.82: ref;

axiom .str.82 == $sub.ref(0, 191880);

const {:count 20} .str.83: ref;

axiom .str.83 == $sub.ref(0, 192924);

const {:count 15} .str.84: ref;

axiom .str.84 == $sub.ref(0, 193963);

const {:count 16} .str.85: ref;

axiom .str.85 == $sub.ref(0, 195003);

const {:count 46} .str.86: ref;

axiom .str.86 == $sub.ref(0, 196073);

const {:count 17} .str.161: ref;

axiom .str.161 == $sub.ref(0, 197114);

const {:count 18} .str.162: ref;

axiom .str.162 == $sub.ref(0, 198156);

const {:count 34} .str.154: ref;

axiom .str.154 == $sub.ref(0, 199214);

const {:count 23} .str.163: ref;

axiom .str.163 == $sub.ref(0, 200261);

const {:count 37} .str.164: ref;

axiom .str.164 == $sub.ref(0, 201322);

const {:count 47} .str.165: ref;

axiom .str.165 == $sub.ref(0, 202393);

const {:count 28} .str.166: ref;

axiom .str.166 == $sub.ref(0, 203445);

const {:count 31} .str.167: ref;

axiom .str.167 == $sub.ref(0, 204500);

const {:count 34} .str.168: ref;

axiom .str.168 == $sub.ref(0, 205558);

const {:count 38} .str.158: ref;

axiom .str.158 == $sub.ref(0, 206620);

const {:count 35} .str.148: ref;

axiom .str.148 == $sub.ref(0, 207679);

const {:count 17} .str.149: ref;

axiom .str.149 == $sub.ref(0, 208720);

const {:count 37} .str.150: ref;

axiom .str.150 == $sub.ref(0, 209781);

const {:count 18} .str.151: ref;

axiom .str.151 == $sub.ref(0, 210823);

const {:count 26} .str.152: ref;

axiom .str.152 == $sub.ref(0, 211873);

const {:count 47} .str.153: ref;

axiom .str.153 == $sub.ref(0, 212944);

const {:count 13} .str.155: ref;

axiom .str.155 == $sub.ref(0, 213981);

const {:count 32} .str.156: ref;

axiom .str.156 == $sub.ref(0, 215037);

const {:count 22} .str.157: ref;

axiom .str.157 == $sub.ref(0, 216083);

const {:count 11} .str.159: ref;

axiom .str.159 == $sub.ref(0, 217118);

const {:count 17} .str.160: ref;

axiom .str.160 == $sub.ref(0, 218159);

const {:count 18} .str.104: ref;

axiom .str.104 == $sub.ref(0, 219201);

const {:count 24} .str.105: ref;

axiom .str.105 == $sub.ref(0, 220249);

const {:count 28} .str.106: ref;

axiom .str.106 == $sub.ref(0, 221301);

const {:count 28} .str.107: ref;

axiom .str.107 == $sub.ref(0, 222353);

const {:count 28} .str.108: ref;

axiom .str.108 == $sub.ref(0, 223405);

const {:count 28} .str.109: ref;

axiom .str.109 == $sub.ref(0, 224457);

const {:count 28} .str.110: ref;

axiom .str.110 == $sub.ref(0, 225509);

const {:count 28} .str.111: ref;

axiom .str.111 == $sub.ref(0, 226561);

const {:count 28} .str.112: ref;

axiom .str.112 == $sub.ref(0, 227613);

const {:count 28} .str.113: ref;

axiom .str.113 == $sub.ref(0, 228665);

const {:count 28} .str.114: ref;

axiom .str.114 == $sub.ref(0, 229717);

const {:count 28} .str.115: ref;

axiom .str.115 == $sub.ref(0, 230769);

const {:count 28} .str.116: ref;

axiom .str.116 == $sub.ref(0, 231821);

const {:count 34} .str.117: ref;

axiom .str.117 == $sub.ref(0, 232879);

const {:count 34} .str.118: ref;

axiom .str.118 == $sub.ref(0, 233937);

const {:count 30} .str.119: ref;

axiom .str.119 == $sub.ref(0, 234991);

const {:count 28} .str.120: ref;

axiom .str.120 == $sub.ref(0, 236043);

const {:count 14} .str.137: ref;

axiom .str.137 == $sub.ref(0, 237081);

const {:count 25} .str.138: ref;

axiom .str.138 == $sub.ref(0, 238130);

const {:count 34} .str.139: ref;

axiom .str.139 == $sub.ref(0, 239188);

const {:count 20} .str.140: ref;

axiom .str.140 == $sub.ref(0, 240232);

const {:count 22} .str.141: ref;

axiom .str.141 == $sub.ref(0, 241278);

const {:count 22} .str.142: ref;

axiom .str.142 == $sub.ref(0, 242324);

const {:count 22} .str.143: ref;

axiom .str.143 == $sub.ref(0, 243370);

const {:count 22} .str.144: ref;

axiom .str.144 == $sub.ref(0, 244416);

const {:count 24} .str.145: ref;

axiom .str.145 == $sub.ref(0, 245464);

const {:count 22} .str.146: ref;

axiom .str.146 == $sub.ref(0, 246510);

const {:count 22} .str.147: ref;

axiom .str.147 == $sub.ref(0, 247556);

const {:count 23} .str.121: ref;

axiom .str.121 == $sub.ref(0, 248603);

const {:count 33} .str.122: ref;

axiom .str.122 == $sub.ref(0, 249660);

const {:count 42} .str.123: ref;

axiom .str.123 == $sub.ref(0, 250726);

const {:count 27} .str.124: ref;

axiom .str.124 == $sub.ref(0, 251777);

const {:count 23} .str.125: ref;

axiom .str.125 == $sub.ref(0, 252824);

const {:count 23} .str.126: ref;

axiom .str.126 == $sub.ref(0, 253871);

const {:count 22} .str.127: ref;

axiom .str.127 == $sub.ref(0, 254917);

const {:count 22} .str.128: ref;

axiom .str.128 == $sub.ref(0, 255963);

const {:count 22} .str.129: ref;

axiom .str.129 == $sub.ref(0, 257009);

const {:count 28} .str.130: ref;

axiom .str.130 == $sub.ref(0, 258061);

const {:count 20} .str.131: ref;

axiom .str.131 == $sub.ref(0, 259105);

const {:count 22} .str.132: ref;

axiom .str.132 == $sub.ref(0, 260151);

const {:count 22} .str.133: ref;

axiom .str.133 == $sub.ref(0, 261197);

const {:count 22} .str.134: ref;

axiom .str.134 == $sub.ref(0, 262243);

const {:count 22} .str.135: ref;

axiom .str.135 == $sub.ref(0, 263289);

const {:count 22} .str.136: ref;

axiom .str.136 == $sub.ref(0, 264335);

const {:count 20} .str.87: ref;

axiom .str.87 == $sub.ref(0, 265379);

const {:count 20} .str.88: ref;

axiom .str.88 == $sub.ref(0, 266423);

const {:count 25} .str.89: ref;

axiom .str.89 == $sub.ref(0, 267472);

const {:count 5} .str.90: ref;

axiom .str.90 == $sub.ref(0, 268501);

const {:count 6} .str.91: ref;

axiom .str.91 == $sub.ref(0, 269531);

const {:count 25} .str.92: ref;

axiom .str.92 == $sub.ref(0, 270580);

const {:count 25} .str.93: ref;

axiom .str.93 == $sub.ref(0, 271629);

const {:count 25} .str.94: ref;

axiom .str.94 == $sub.ref(0, 272678);

const {:count 25} .str.95: ref;

axiom .str.95 == $sub.ref(0, 273727);

const {:count 25} .str.96: ref;

axiom .str.96 == $sub.ref(0, 274776);

const {:count 25} .str.97: ref;

axiom .str.97 == $sub.ref(0, 275825);

const {:count 25} .str.98: ref;

axiom .str.98 == $sub.ref(0, 276874);

const {:count 25} .str.99: ref;

axiom .str.99 == $sub.ref(0, 277923);

const {:count 25} .str.100: ref;

axiom .str.100 == $sub.ref(0, 278972);

const {:count 25} .str.101: ref;

axiom .str.101 == $sub.ref(0, 280021);

const {:count 25} .str.102: ref;

axiom .str.102 == $sub.ref(0, 281070);

const {:count 25} .str.103: ref;

axiom .str.103 == $sub.ref(0, 282119);

const {:count 24} .str.218: ref;

axiom .str.218 == $sub.ref(0, 283167);

const {:count 11} .str.219: ref;

axiom .str.219 == $sub.ref(0, 284202);

const {:count 24} .str.220: ref;

axiom .str.220 == $sub.ref(0, 285250);

const {:count 11} .str.221: ref;

axiom .str.221 == $sub.ref(0, 286285);

const {:count 12} .str.222: ref;

axiom .str.222 == $sub.ref(0, 287321);

const {:count 5} .str.223: ref;

axiom .str.223 == $sub.ref(0, 288350);

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 289382);

const {:count 3} .str.1.460: ref;

axiom .str.1.460 == $sub.ref(0, 290409);

const {:count 14} .str.461: ref;

axiom .str.461 == $sub.ref(0, 291447);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 292475);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 293507);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 294539);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const edge_startup: ref;

axiom edge_startup == $sub.ref(0, 295571);

procedure edge_startup($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, $M.27, $M.23, assertsPassed;



implementation edge_startup($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p23: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i32;
  var $i40: i64;
  var $p42: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i32;
  var $i67: i1;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i1;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i24;
  var $i90: i24;
  var $i91: i24;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i64;
  var $i96: i64;
  var $i97: i64;
  var $i98: i1;
  var $i99: i64;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $i109: i24;
  var $i110: i24;
  var $i111: i24;
  var $p112: ref;
  var $p113: ref;
  var $i114: i8;
  var $i115: i64;
  var $i116: i64;
  var $i117: i64;
  var $i118: i1;
  var $i119: i64;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i24;
  var $i127: i24;
  var $i128: i24;
  var $p129: ref;
  var $p130: ref;
  var $i131: i8;
  var $i132: i64;
  var $i133: i64;
  var $i134: i64;
  var $i135: i1;
  var $i136: i64;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $i143: i24;
  var $i144: i24;
  var $i145: i24;
  var $p146: ref;
  var $p147: ref;
  var $i148: i8;
  var $i149: i64;
  var $i150: i64;
  var $i151: i64;
  var $i152: i1;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $p162: ref;
  var $i163: i16;
  var $i164: i32;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $i168: i1;
  var $i169: i8;
  var $i170: i1;
  var $i171: i8;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $i180: i1;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $p196: ref;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $i207: i24;
  var $i208: i24;
  var $i209: i24;
  var $p210: ref;
  var $p211: ref;
  var $i212: i8;
  var $i213: i64;
  var $i214: i64;
  var $i215: i64;
  var $i216: i1;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $i221: i64;
  var $i222: i1;
  var $i223: i64;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i64;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i8;
  var $p234: ref;
  var $p235: ref;
  var $i236: i8;
  var $i237: i32;
  var $i238: i32;
  var $p239: ref;
  var $p240: ref;
  var $i241: i32;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $i246: i8;
  var $i247: i32;
  var $i248: i8;
  var $i249: i8;
  var $i250: i1;
  var $i251: i32;
  var $i252: i1;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i24;
  var $i260: i24;
  var $i261: i24;
  var $p262: ref;
  var $p263: ref;
  var $i264: i8;
  var $i265: i64;
  var $i266: i64;
  var $i267: i64;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $i274: i1;
  var $i275: i64;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i64;
  var $i281: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $i285: i8;
  var $p286: ref;
  var $i287: i32;
  var $p288: ref;
  var $i289: i8;
  var $i290: i32;
  var $i291: i32;
  var $p292: ref;
  var $p293: ref;
  var $i294: i32;
  var $p295: ref;
  var $p296: ref;
  var $p297: ref;
  var $i298: i8;
  var $i299: i8;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $p305: ref;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i309: i24;
  var $i310: i24;
  var $i311: i24;
  var $p312: ref;
  var $p313: ref;
  var $i314: i8;
  var $i315: i64;
  var $i316: i64;
  var $i317: i64;
  var $i318: i1;
  var $p319: ref;
  var $i320: i8;
  var $p321: ref;
  var $i322: i8;
  var $i323: i8;
  var $i324: i32;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $p329: ref;
  var $i330: i8;
  var $i331: i32;
  var $i332: i1;
  var $i184: i8;
  var $i185: i8;
  var $i186: i8;
  var $i187: i32;
  var $i333: i8;
  var $i334: i8;
  var $i335: i8;
  var $i181: i8;
  var $i182: i8;
  var $i183: i8;
  var $i336: i1;
  var $i337: i1;
  var $i338: i1;
  var $p339: ref;
  var $p340: ref;
  var $i341: i32;
  var $i342: i1;
  var $i343: i32;
  var $i22: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var vslice_dummy_var_40: ref;
  var vslice_dummy_var_41: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := $alloc($mul.ref(12, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 4} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 8} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4;

  corral_source_split_4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(0, 4));
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p13, 1);
    goto corral_source_split_6;

  corral_source_split_6:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(1, 4));
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, 16383);
    goto corral_source_split_8;

  corral_source_split_8:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 12)), $mul.ref(2, 4));
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 1);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_12;

  corral_source_split_12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 10} $p18 := kmalloc(1312, 208);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1216, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} vslice_dummy_var_40 := spinlock_check($p23);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1216, 1)), $mul.ref(0, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} __raw_spin_lock_init($p27, .str.75, $p2);
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $p0);
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p19);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} usb_set_serial_data($p0, $p29);
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(14, 1));
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i36 := usb_string($p17, $i33, $p35, 65);
    call {:si_unique_call 15} {:cexpr "i"} boogie_si_record_i32($i36);
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $i36;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    $i39 := $add.i32($i38, 1);
    call {:si_unique_call 16} {:cexpr "i"} boogie_si_record_i32($i39);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i38);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(0, 1)), $mul.ref($i40, 1));
    goto corral_source_split_44;

  corral_source_split_44:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, 32);
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(15, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i32($i45);
    goto corral_source_split_48;

  corral_source_split_48:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    $i49 := $sext.i32.i64($i39);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 1));
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i51 := $sub.i32(66, $i39);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i52 := $sext.i32.i64($i51);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 17} vslice_dummy_var_41 := usb_string($p17, $i46, $p50, $i52);
    goto corral_source_split_55;

  corral_source_split_55:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(0, 1));
    goto corral_source_split_59;

  corral_source_split_59:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 18} _dev_info.ref.ref.ref($p56, .str.76, $p58);
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $i59 := get_epic_descriptor($p19);
    call {:si_unique_call 20} {:cexpr "tmp___1"} boogie_si_record_i32($i59);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $i60 := $sle.i32($i59, 0);
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i66 := $load.i32($M.0, $p65);
    goto corral_source_split_75;

  corral_source_split_75:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    assume {:branchcond $i67} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p83, .str);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p84, .str.78);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p85, .str.2);
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p86, .str.79);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p87);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $i89 := $load.i24($M.5, $p88);
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i90 := $and.i24($i89, $sub.i24(0, 262144));
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i91 := $or.i24($i90, 2811);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p88, $i91);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p92, 0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_112;

  corral_source_split_112:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.6, $p93);
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i64($i94);
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    $i96 := $and.i64($i95, 1);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} $i97 := ldv__builtin_expect($i96, 0);
    call {:si_unique_call 27} {:cexpr "tmp___2"} boogie_si_record_i64($i97);
    goto corral_source_split_116;

  corral_source_split_116:
    assume {:verifier.code 0} true;
    $i98 := $ne.i64($i97, 0);
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    assume {:branchcond $i98} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_184;

  corral_source_split_184:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p137, .str);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_186;

  corral_source_split_186:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p138, .str.78);
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_188;

  corral_source_split_188:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p139, .str.2);
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_190;

  corral_source_split_190:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p140, .str.82);
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_192;

  corral_source_split_192:
    assume {:verifier.code 0} true;
    $p142 := $bitcast.ref.ref($p141);
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    $i143 := $load.i24($M.5, $p142);
    goto corral_source_split_194;

  corral_source_split_194:
    assume {:verifier.code 0} true;
    $i144 := $and.i24($i143, $sub.i24(0, 262144));
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    $i145 := $or.i24($i144, 2832);
    goto corral_source_split_196;

  corral_source_split_196:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p142, $i145);
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_198;

  corral_source_split_198:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p146, 0);
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_200;

  corral_source_split_200:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.6, $p147);
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i64($i148);
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $i150 := $and.i64($i149, 1);
    goto corral_source_split_203;

  corral_source_split_203:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} $i151 := ldv__builtin_expect($i150, 0);
    call {:si_unique_call 38} {:cexpr "tmp___5"} boogie_si_record_i64($i151);
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    $i152 := $ne.i64($i151, 0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_219;

  corral_source_split_219:
    assume {:verifier.code 0} true;
    $i166 := $load.i32($M.0, $p165);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    $i343 := 0;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto corral_source_split_474;

  corral_source_split_474:
    assume {:verifier.code 0} true;
    $i22 := $i343;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb32:
    assume $i167 == 1;
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i8.i1(0);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    $i169 := $zext.i1.i8($i168);
    call {:si_unique_call 40} {:cexpr "bulk_in_found"} boogie_si_record_i8($i169);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $i170 := $trunc.i8.i1($i169);
    goto corral_source_split_226;

  corral_source_split_226:
    assume {:verifier.code 0} true;
    $i171 := $zext.i1.i8($i170);
    call {:si_unique_call 41} {:cexpr "interrupt_in_found"} boogie_si_record_i8($i171);
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    $p173 := $load.ref($M.0, $p172);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_230;

  corral_source_split_230:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p175, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.0, $p177);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    $i180 := $sgt.i32($i179, 0);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i181, $i182, $i183 := $i171, $i169, 0;
    assume {:branchcond $i180} true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i180 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i336 := $trunc.i8.i1($i181);
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i336} true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i336 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    call {:si_unique_call 74} dev_err.ref.ref($p12, .str.86);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 19);
    goto $bb3;

  $bb81:
    assume $i336 == 1;
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $i337 := $trunc.i8.i1($i182);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i337 == 1);
    goto $bb83;

  $bb84:
    assume $i337 == 1;
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    $i338 := $trunc.i8.i1($i183);
    goto corral_source_split_464;

  corral_source_split_464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    assume !($i338 == 1);
    goto $bb83;

  $bb86:
    assume $i338 == 1;
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $p340 := $load.ref($M.0, $p339);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} $i341 := ldv_usb_submit_urb_33($p340, 208);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 76} {:cexpr "response"} boogie_si_record_i32($i341);
    goto corral_source_split_468;

  corral_source_split_468:
    assume {:verifier.code 0} true;
    $i342 := $ne.i32($i341, 0);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i342} true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i343 := $i341;
    goto $bb92;

  $bb89:
    assume $i342 == 1;
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 77} dev_err.ref.ref.ref.i32($p12, .str.20, .str.78, $i341);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    goto $bb91;

  SeqInstr_28:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i180 == 1;
    goto corral_source_split_237;

  corral_source_split_237:
    assume {:verifier.code 0} true;
    $i184, $i185, $i186, $i187 := 0, $i169, $i171, 0;
    goto $bb37;

  $bb37:
    call $p188, $p189, $p190, $p191, $p192, $p193, $i194, $p196, $i197, $i198, $i199, $i200, $p201, $p202, $p203, $p204, $p205, $p206, $i207, $i208, $i209, $p210, $p211, $i212, $i213, $i214, $i215, $i216, $p217, $p218, $p219, $p220, $i221, $i222, $i223, $p224, $p225, $p226, $p227, $i228, $i229, $p232, $i233, $p234, $p235, $i236, $i237, $i238, $p239, $p240, $i241, $p242, $p243, $p244, $p245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $p253, $p254, $p255, $p256, $p257, $p258, $i259, $i260, $i261, $p262, $p263, $i264, $i265, $i266, $i267, $i268, $p269, $p270, $p271, $p272, $i273, $i274, $i275, $p276, $p277, $p278, $p279, $i280, $i281, $p284, $i285, $p286, $i287, $p288, $i289, $i290, $i291, $p292, $p293, $i294, $p295, $p296, $p297, $i298, $i299, $i300, $i301, $i302, $p303, $p304, $p305, $p306, $p307, $p308, $i309, $i310, $i311, $p312, $p313, $i314, $i315, $i316, $i317, $i318, $p319, $i320, $p321, $i322, $i323, $i324, $p325, $p326, $p327, $p329, $i330, $i331, $i332, $i184, $i185, $i186, $i187, $i333, $i334, $i335 := edge_startup_loop_$bb37($p0, $p7, $p8, $p9, $p12, $p17, $p19, $p172, $p188, $p189, $p190, $p191, $p192, $p193, $i194, $p196, $i197, $i198, $i199, $i200, $p201, $p202, $p203, $p204, $p205, $p206, $i207, $i208, $i209, $p210, $p211, $i212, $i213, $i214, $i215, $i216, $p217, $p218, $p219, $p220, $i221, $i222, $i223, $p224, $p225, $p226, $p227, $i228, $i229, $p232, $i233, $p234, $p235, $i236, $i237, $i238, $p239, $p240, $i241, $p242, $p243, $p244, $p245, $i246, $i247, $i248, $i249, $i250, $i251, $i252, $p253, $p254, $p255, $p256, $p257, $p258, $i259, $i260, $i261, $p262, $p263, $i264, $i265, $i266, $i267, $i268, $p269, $p270, $p271, $p272, $i273, $i274, $i275, $p276, $p277, $p278, $p279, $i280, $i281, $p284, $i285, $p286, $i287, $p288, $i289, $i290, $i291, $p292, $p293, $i294, $p295, $p296, $p297, $i298, $i299, $i300, $i301, $i302, $p303, $p304, $p305, $p306, $p307, $p308, $i309, $i310, $i311, $p312, $p313, $i314, $i315, $i316, $i317, $i318, $p319, $i320, $p321, $i322, $i323, $i324, $p325, $p326, $p327, $p329, $i330, $i331, $i332, $i184, $i185, $i186, $i187, $i333, $i334, $i335);
    goto $bb37_last;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_241;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    $p189 := $load.ref($M.0, $p188);
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p189, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p191, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    $p193 := $load.ref($M.0, $p192);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i194 := $sext.i32.i64($i187);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p193, $mul.ref($i194, 72)), $mul.ref(0, 1));
    goto corral_source_split_249;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} $i197 := usb_endpoint_maxp($p196);
    call {:si_unique_call 43} {:cexpr "buffer_size"} boogie_si_record_i32($i197);
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i8.i1($i186);
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i198 == 1);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} $i199 := usb_endpoint_is_int_in($p196);
    call {:si_unique_call 45} {:cexpr "tmp___9"} boogie_si_record_i32($i199);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    $i248 := $i186;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i249 := $i248;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $i250 := $trunc.i8.i1($i185);
    goto corral_source_split_328;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i250 == 1);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} $i251 := usb_endpoint_is_bulk_in($p196);
    call {:si_unique_call 56} {:cexpr "tmp___14"} boogie_si_record_i32($i251);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i252 := $ne.i32($i251, 0);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i252 == 1);
    assume {:verifier.code 0} true;
    $i298 := $i185;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    $i299 := $i298;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $i300 := $trunc.i8.i1($i184);
    goto corral_source_split_404;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i300 == 1);
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} $i301 := usb_endpoint_is_bulk_out($p196);
    call {:si_unique_call 69} {:cexpr "tmp___16"} boogie_si_record_i32($i301);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_408;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    $i322 := $i184;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $i323 := $i322;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $i324 := $add.i32($i187, 1);
    call {:si_unique_call 73} {:cexpr "i"} boogie_si_record_i32($i324);
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p325 := $load.ref($M.0, $p172);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($p325, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_447;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    $p327 := $load.ref($M.0, $p326);
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($add.ref($p327, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $i330 := $load.i8($M.0, $p329);
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $i331 := $zext.i8.i32($i330);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    $i332 := $sgt.i32($i331, $i324);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $i333, $i334, $i335 := $i249, $i299, $i323;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i332 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    $i181, $i182, $i183 := $i333, $i334, $i335;
    goto $bb36;

  $bb78:
    assume $i332 == 1;
    assume {:verifier.code 0} true;
    $i184, $i185, $i186, $i187 := $i323, $i299, $i249, $i324;
    goto $bb78_dummy;

  $bb71:
    assume $i302 == 1;
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $p303 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_411;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p303, .str);
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p304, .str.78);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $p305 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_415;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p305, .str.2);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p306, .str.85);
    goto corral_source_split_418;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    $p308 := $bitcast.ref.ref($p307);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $i309 := $load.i24($M.5, $p308);
    goto corral_source_split_421;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    $i310 := $and.i24($i309, $sub.i24(0, 262144));
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i311 := $or.i24($i310, 2920);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p308, $i311);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_425;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p312, 0);
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $i314 := $load.i8($M.6, $p313);
    goto corral_source_split_428;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    $i315 := $zext.i8.i64($i314);
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $i316 := $and.i64($i315, 1);
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} $i317 := ldv__builtin_expect($i316, 0);
    call {:si_unique_call 71} {:cexpr "tmp___15"} boogie_si_record_i64($i317);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    $i318 := $ne.i64($i317, 0);
    goto corral_source_split_432;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    $p319 := $add.ref($add.ref($add.ref($p193, $mul.ref($i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i320 := $load.i8($M.0, $p319);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1288, 1));
    goto corral_source_split_439;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p321, $i320);
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i322 := 1;
    goto $bb76;

  $bb73:
    assume $i318 == 1;
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} __dynamic_dev_dbg.ref.ref.ref($p9, $p12, .str.85);
    goto corral_source_split_435;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb69:
    assume $i300 == 1;
    assume {:verifier.code 0} true;
    $i323 := $i184;
    goto $bb77;

  $bb56:
    assume $i252 == 1;
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p253, .str);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p254, .str.78);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p255, .str.2);
    goto corral_source_split_340;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p256, .str.84);
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p257);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $i259 := $load.i24($M.5, $p258);
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    $i260 := $and.i24($i259, $sub.i24(0, 262144));
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i261 := $or.i24($i260, 2889);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p258, $i261);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p262, 0);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.6, $p263);
    goto corral_source_split_352;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    $i265 := $zext.i8.i64($i264);
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    $i266 := $and.i64($i265, 1);
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} $i267 := ldv__builtin_expect($i266, 0);
    call {:si_unique_call 58} {:cexpr "tmp___10"} boogie_si_record_i64($i267);
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $i268 := $ne.i64($i267, 0);
    goto corral_source_split_356;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} $p269 := ldv_usb_alloc_urb_32(0, 208);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p270, $p269);
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p272 := $load.ref($M.0, $p271);
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $i273 := $p2i.ref.i64($p272);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $i274 := $eq.i64($i273, 0);
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $i275 := $sext.i32.i64($i197);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} $p276 := kmalloc($i275, 208);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1192, 1));
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p277, $p276);
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1192, 1));
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $p279 := $load.ref($M.0, $p278);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    $i280 := $p2i.ref.i64($p279);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i281 := $eq.i64($i280, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    $p284 := $add.ref($add.ref($add.ref($p193, $mul.ref($i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $i285 := $load.i8($M.0, $p284);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1184, 1));
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p286, $i285);
    goto corral_source_split_388;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} $i287 := usb_endpoint_maxp($p196);
    call {:si_unique_call 64} {:cexpr "tmp___12"} boogie_si_record_i32($i287);
    $p288 := $add.ref($add.ref($add.ref($p193, $mul.ref($i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i289 := $load.i8($M.0, $p288);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $i290 := $zext.i8.i32($i289);
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} $i291 := __create_pipe($p17, $i290);
    call {:si_unique_call 66} {:cexpr "tmp___13"} boogie_si_record_i32($i291);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_393;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    $p293 := $load.ref($M.0, $p292);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i294 := $or.i32($i291, $sub.i32(0, 1073741696));
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1192, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    $p296 := $load.ref($M.0, $p295);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    $p297 := $bitcast.ref.ref($p19);
    goto corral_source_split_398;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} usb_fill_bulk_urb($p293, $p17, $i294, $p296, $i287, edge_bulk_in_callback, $p297);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $i298 := 1;
    goto $bb67;

  $bb64:
    assume $i281 == 1;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    $p283 := $load.ref($M.0, $p282);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} usb_free_urb($p283);
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_25:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i274 == 1;
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_22:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i268 == 1;
    goto corral_source_split_358;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} __dynamic_dev_dbg.ref.ref.ref($p8, $p12, .str.84);
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb54:
    assume $i250 == 1;
    assume {:verifier.code 0} true;
    $i299 := $i185;
    goto $bb68;

  $bb41:
    assume $i200 == 1;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_258;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p201, .str);
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p202, .str.78);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p203, .str.2);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p204, .str.83);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_266;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    $p206 := $bitcast.ref.ref($p205);
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $i207 := $load.i24($M.5, $p206);
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    $i208 := $and.i24($i207, $sub.i24(0, 262144));
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $i209 := $or.i24($i208, 2854);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p206, $i209);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p210, 0);
    goto corral_source_split_273;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $i212 := $load.i8($M.6, $p211);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    $i213 := $zext.i8.i64($i212);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $i214 := $and.i64($i213, 1);
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} $i215 := ldv__builtin_expect($i214, 0);
    call {:si_unique_call 47} {:cexpr "tmp___6"} boogie_si_record_i64($i215);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    $i216 := $ne.i64($i215, 0);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} $p217 := ldv_usb_alloc_urb_31(0, 208);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p218, $p217);
    goto corral_source_split_286;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    $p220 := $load.ref($M.0, $p219);
    goto corral_source_split_288;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    $i221 := $p2i.ref.i64($p220);
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    $i222 := $eq.i64($i221, 0);
    goto corral_source_split_290;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i223 := $sext.i32.i64($i197);
    goto corral_source_split_294;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} $p224 := kmalloc($i223, 208);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p225, $p224);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    $p227 := $load.ref($M.0, $p226);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p227);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    $i229 := $eq.i64($i228, 0);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    $p232 := $add.ref($add.ref($add.ref($p193, $mul.ref($i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.0, $p232);
    goto corral_source_split_309;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1160, 1));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p234, $i233);
    $p235 := $add.ref($add.ref($add.ref($p193, $mul.ref($i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $i236 := $load.i8($M.0, $p235);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $i237 := $zext.i8.i32($i236);
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i238 := __create_pipe($p17, $i237);
    call {:si_unique_call 53} {:cexpr "tmp___8"} boogie_si_record_i32($i238);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $p240 := $load.ref($M.0, $p239);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $i241 := $or.i32($i238, 1073741952);
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p244 := $bitcast.ref.ref($p19);
    $p245 := $add.ref($add.ref($add.ref($p193, $mul.ref($i194, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    $i246 := $load.i8($M.0, $p245);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i247 := $zext.i8.i32($i246);
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} usb_fill_int_urb($p240, $p17, $i241, $p243, $i197, edge_interrupt_callback, $p244, $i247);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    $i248 := 1;
    goto $bb52;

  $bb49:
    assume $i229 == 1;
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} usb_free_urb($p231);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i222 == 1;
    goto corral_source_split_292;

  corral_source_split_292:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i216 == 1;
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __dynamic_dev_dbg.ref.ref.ref($p7, $p12, .str.83);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb39:
    assume $i198 == 1;
    assume {:verifier.code 0} true;
    $i249 := $i186;
    goto $bb53;

  $bb29:
    assume $i152 == 1;
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(16, 1));
    goto corral_source_split_208;

  corral_source_split_208:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p154);
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(17, 1));
    goto corral_source_split_211;

  corral_source_split_211:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(18, 1));
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $i163 := $load.i16($M.0, $p162);
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i164 := $zext.i16.i32($i163);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p6, $p12, .str.82, $i156, $i160, $i164);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb20:
    assume $i102 == 1;
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} load_application_firmware($p19);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p103, .str);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_131;

  corral_source_split_131:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p104, .str.78);
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p105, .str.2);
    goto corral_source_split_134;

  corral_source_split_134:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p106, .str.80);
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $p108 := $bitcast.ref.ref($p107);
    goto corral_source_split_138;

  corral_source_split_138:
    assume {:verifier.code 0} true;
    $i109 := $load.i24($M.5, $p108);
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    $i110 := $and.i24($i109, $sub.i24(0, 262144));
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    $i111 := $or.i24($i110, 2818);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p108, $i111);
    goto corral_source_split_142;

  corral_source_split_142:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p112, 0);
    goto corral_source_split_144;

  corral_source_split_144:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    $i114 := $load.i8($M.6, $p113);
    goto corral_source_split_146;

  corral_source_split_146:
    assume {:verifier.code 0} true;
    $i115 := $zext.i8.i64($i114);
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $i116 := $and.i64($i115, 1);
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 30} $i117 := ldv__builtin_expect($i116, 0);
    call {:si_unique_call 31} {:cexpr "tmp___3"} boogie_si_record_i64($i117);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_150;

  corral_source_split_150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} update_edgeport_E2PROM($p19);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_157;

  corral_source_split_157:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p120, .str);
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p121, .str.78);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p122, .str.2);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_163;

  corral_source_split_163:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p123, .str.81);
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $i126 := $load.i24($M.5, $p125);
    goto corral_source_split_167;

  corral_source_split_167:
    assume {:verifier.code 0} true;
    $i127 := $and.i24($i126, $sub.i24(0, 262144));
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $i128 := $or.i24($i127, 2823);
    goto corral_source_split_169;

  corral_source_split_169:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p125, $i128);
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p129, 0);
    goto corral_source_split_172;

  corral_source_split_172:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.6, $p130);
    goto corral_source_split_174;

  corral_source_split_174:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i64($i131);
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    $i133 := $and.i64($i132, 1);
    goto corral_source_split_176;

  corral_source_split_176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} $i134 := ldv__builtin_expect($i133, 0);
    call {:si_unique_call 35} {:cexpr "tmp___4"} boogie_si_record_i64($i134);
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_178;

  corral_source_split_178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb25:
    assume $i135 == 1;
    goto corral_source_split_180;

  corral_source_split_180:
    assume {:verifier.code 0} true;
    $i136 := $load.i64($M.0, jiffies);
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} __dynamic_dev_dbg.ref.ref.ref.ref.i64($p5, $p12, .str.81, .str.78, $i136);
    goto corral_source_split_182;

  corral_source_split_182:
    assume {:verifier.code 0} true;
    goto $bb27;

  SeqInstr_13:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i118 == 1;
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $i119 := $load.i64($M.0, jiffies);
    goto corral_source_split_153;

  corral_source_split_153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 32} __dynamic_dev_dbg.ref.ref.ref.ref.i64($p4, $p12, .str.80, .str.78, $i119);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i98 == 1;
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    $i99 := $load.i64($M.0, jiffies);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} __dynamic_dev_dbg.ref.ref.ref.ref.i64($p3, $p12, .str.79, .str.78, $i99);
    goto corral_source_split_121;

  corral_source_split_121:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb11:
    assume $i67 == 1;
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(2, 1));
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_81;

  corral_source_split_81:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_83;

  corral_source_split_83:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    $i75 := $ne.i32($i71, $i74);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb13;

  $bb14:
    assume $i75 == 1;
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(2, 1));
    goto corral_source_split_88;

  corral_source_split_88:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    call {:si_unique_call 25} dev_warn.ref.ref.i32.i32($p12, .str.77, $i79, $i82);
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i60 == 1;
    goto corral_source_split_65;

  corral_source_split_65:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(12, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $p63 := $bitcast.ref.ref($p62);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p1);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 21} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p63, $p64, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} get_manufacturing_desc($p19);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 23} get_boot_desc($p19);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    goto corral_source_split_71;

  corral_source_split_71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} get_product_info($p19);
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i37 == 1;
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb7;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_18;

  corral_source_split_18:
    assume {:verifier.code 0} true;
    $i22 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb78_dummy:
    assume false;
    return;

  $bb37_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_239;
}



const edge_disconnect: ref;

axiom edge_disconnect == $sub.ref(0, 296603);

procedure edge_disconnect($p0: ref);
  free requires assertsPassed;



implementation edge_disconnect($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_476;

  corral_source_split_476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 78} $p1 := usb_get_serial_data($p0);
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_480;

  corral_source_split_480:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_485;

  corral_source_split_485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} usb_kill_urb($p7);
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} usb_free_urb($p9);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 81} kfree($p11);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} usb_kill_urb($p13);
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} usb_free_urb($p15);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 1312)), $mul.ref(1192, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 84} kfree($p17);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const edge_release: ref;

axiom edge_release == $sub.ref(0, 297635);

procedure edge_release($p0: ref);
  free requires assertsPassed;



implementation edge_release($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    call {:si_unique_call 85} $p1 := usb_get_serial_data($p0);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_506;

  corral_source_split_506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} kfree($p3);
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    return;
}



const edge_port_probe: ref;

axiom edge_port_probe == $sub.ref(0, 298667);

procedure edge_port_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr, assertsPassed;



implementation edge_port_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i6: i32;
  var vslice_dummy_var_42: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $p2 := kmalloc(416, 208);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 89} vslice_dummy_var_42 := spinlock_check($p7);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(48, 1)), $mul.ref(0, 1));
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} __raw_spin_lock_init($p11, .str.19, $p1);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p0);
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p3);
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} usb_set_serial_port_data($p0, $p13);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_31:
    assume !assertsPassed;
    return;
}



const edge_port_remove: ref;

axiom edge_port_remove == $sub.ref(0, 299699);

procedure edge_port_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation edge_port_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} $p1 := usb_get_serial_port_data($p0);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} kfree($p3);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const edge_open: ref;

axiom edge_open == $sub.ref(0, 300731);

procedure edge_open($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.7, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.21, $M.22, $CurrAddr, $M.19, $M.20, assertsPassed;



implementation edge_open($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i8;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i32;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $i102: i1;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i109: i1;
  var $i110: i8;
  var $i111: i1;
  var $i112: i1;
  var $i113: i64;
  var $i114: i1;
  var $i116: i1;
  var $i115: i1;
  var $i117: i32;
  var $i118: i1;
  var $p119: ref;
  var $p120: ref;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $i125: i8;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i129: i1;
  var $i130: i8;
  var $i131: i1;
  var $i132: i1;
  var $i133: i64;
  var $i134: i1;
  var $i136: i1;
  var $i135: i1;
  var $i137: i32;
  var $i138: i1;
  var $i139: i64;
  var $p140: ref;
  var $p141: ref;
  var $i142: i8;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $i150: i24;
  var $i151: i24;
  var $i152: i24;
  var $p153: ref;
  var $p154: ref;
  var $i155: i8;
  var $i156: i64;
  var $i157: i64;
  var $i158: i64;
  var $i159: i1;
  var $p160: ref;
  var $p162: ref;
  var $p164: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i16;
  var $i169: i32;
  var $p171: ref;
  var $p172: ref;
  var $i173: i16;
  var $i174: i64;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i64;
  var $i182: i1;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i24;
  var $i197: i24;
  var $i198: i24;
  var $p199: ref;
  var $p200: ref;
  var $i201: i8;
  var $i202: i64;
  var $i203: i64;
  var $i204: i64;
  var $i205: i1;
  var $p206: ref;
  var $i207: i16;
  var $i208: i32;
  var $i13: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 95} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 99} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} $p8 := usb_get_serial_port_data($p1);
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p9);
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} $p16 := usb_get_serial_data($p15);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i18 := $p2i.ref.i64($p17);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i19 := $eq.i64($i18, 0);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    call {:si_unique_call 111} __init_waitqueue_head($p93, .str.22, $p2);
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 112} __init_waitqueue_head($p94, .str.23, $p3);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(320, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} __init_waitqueue_head($p95, .str.24, $p4);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p96, 0);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 8);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, 0);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 1);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p100, 0);
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $i101 := send_iosp_ext_cmd($p9, 0, 0);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 115} {:cexpr "response"} boogie_si_record_i32($i101);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $i102 := $slt.i32($i101, 0);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i102} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} __might_sleep(.str.2, 883, 0);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.0, $p104);
    goto corral_source_split_669;

  corral_source_split_669:
    assume {:verifier.code 0} true;
    $i106 := $trunc.i8.i1($i105);
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    $i107 := $zext.i1.i32($i106);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $i108 := $ne.i32($i107, 0);
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $i109 := $xor.i1($i108, 1);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $i110 := $zext.i1.i8($i109);
    call {:si_unique_call 118} {:cexpr "__cond___0"} boogie_si_record_i8($i110);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    $i111 := $trunc.i8.i1($i110);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    assume {:branchcond $i111} true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i111 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i113 := 1250;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i8.i1($i110);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $i115 := 1;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i114 == 1);
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $i116 := $eq.i64($i113, 0);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $i115 := $i116;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $i117 := $zext.i1.i32($i115);
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_732;

  corral_source_split_732:
    assume {:verifier.code 0} true;
    $i142 := $load.i8($M.0, $p141);
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $i143 := $trunc.i8.i1($i142);
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    assume {:branchcond $i143} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i143 == 1);
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p144, .str);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p145, .str.21);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p146, .str.2);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p147, .str.26);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p149 := $bitcast.ref.ref($p148);
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    $i150 := $load.i24($M.5, $p149);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $i151 := $and.i24($i150, $sub.i24(0, 262144));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $i152 := $or.i24($i151, 887);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p149, $i152);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p153, 0);
    goto corral_source_split_752;

  corral_source_split_752:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.6, $p154);
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i64($i155);
    goto corral_source_split_755;

  corral_source_split_755:
    assume {:verifier.code 0} true;
    $i157 := $and.i64($i156, 1);
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} $i158 := ldv__builtin_expect($i157, 0);
    call {:si_unique_call 127} {:cexpr "tmp___4"} boogie_si_record_i64($i158);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    $i159 := $ne.i64($i158, 0);
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p160, 0);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb45:
    assume $i159 == 1;
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 128} __dynamic_dev_dbg.ref.ref.ref.ref($p6, $p10, .str.26, .str.21);
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb43:
    assume $i143 == 1;
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, 0);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, 0);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p166, 0);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $i168 := $load.i16($M.0, $p167);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i32($i168);
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p171, $i169);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i173 := $load.i16($M.0, $p172);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i64($i173);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    call {:si_unique_call 129} $p175 := kmalloc($i174, 208);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p177, $p175);
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i181 := $p2i.ref.i64($p180);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    $i182 := $eq.i64($i181, 0);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p183 := ldv_usb_alloc_urb_27(0, 208);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p184, $p183);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(40, 1));
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p185, 0);
    goto corral_source_split_795;

  corral_source_split_795:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    $p187 := $load.ref($M.0, $p186);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    $i188 := $p2i.ref.i64($p187);
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    $i189 := $eq.i64($i188, 0);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p190, .str);
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p191, .str.21);
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p192, .str.2);
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_810;

  corral_source_split_810:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p193, .str.27);
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p195 := $bitcast.ref.ref($p194);
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $i196 := $load.i24($M.5, $p195);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $i197 := $and.i24($i196, $sub.i24(0, 262144));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $i198 := $or.i24($i197, 914);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p195, $i198);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p199, 0);
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.6, $p200);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i64($i201);
    goto corral_source_split_822;

  corral_source_split_822:
    assume {:verifier.code 0} true;
    $i203 := $and.i64($i202, 1);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $i204 := ldv__builtin_expect($i203, 0);
    call {:si_unique_call 134} {:cexpr "tmp___6"} boogie_si_record_i64($i204);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $i205 := $ne.i64($i204, 0);
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i13 := 0;
    goto $bb3;

  $bb55:
    assume $i205 == 1;
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    $i207 := $load.i16($M.0, $p206);
    goto corral_source_split_829;

  corral_source_split_829:
    assume {:verifier.code 0} true;
    $i208 := $zext.i16.i32($i207);
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 135} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p7, $p10, .str.27, .str.21, $i208);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb52:
    assume $i189 == 1;
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} edge_close($p1);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_49:
    assume !assertsPassed;
    return;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  $bb49:
    assume $i182 == 1;
    goto corral_source_split_788;

  corral_source_split_788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 130} edge_close($p1);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i118 == 1;
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} INIT_LIST_HEAD($p119);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p120, 0);
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $i121 := 1250;
    goto $bb28;

  $bb28:
    call $i121, $p122, $i123, $p124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i136, $i135, $i137, $i138, $i139 := edge_open_loop_$bb28($p5, $p9, $i121, $p122, $i123, $p124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i136, $i135, $i137, $i138, $i139);
    goto $bb28_last;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} $i123 := prepare_to_wait_event($p122, $p5, 2);
    call {:si_unique_call 121} {:cexpr "tmp___3"} boogie_si_record_i64($i123);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.0, $p124);
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i126 := $trunc.i8.i1($i125);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i127 := $zext.i1.i32($i126);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i128 := $ne.i32($i127, 0);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i129 := $xor.i1($i128, 1);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i130 := $zext.i1.i8($i129);
    call {:si_unique_call 122} {:cexpr "__cond"} boogie_si_record_i8($i130);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i8.i1($i130);
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i133 := $i121;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i130);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i135 := 1;
    assume true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i134 == 1);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $i136 := $eq.i64($i133, 0);
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    $i135 := $i136;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    $i137 := $zext.i1.i32($i135);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} $i139 := schedule_timeout($i133);
    call {:si_unique_call 125} {:cexpr "__ret___0"} boogie_si_record_i64($i139);
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    $i121 := $i139;
    goto corral_source_split_730_dummy;

  $bb38:
    assume $i138 == 1;
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 123} finish_wait($p140, $p5);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb36;

  $bb29:
    assume $i131 == 1;
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    $i132 := $eq.i64($i121, 0);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i132 == 1);
    goto $bb31;

  $bb32:
    assume $i132 == 1;
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $i133 := 1;
    goto $bb34;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i114 == 1;
    goto $bb24;

  $bb17:
    assume $i111 == 1;
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $i112 := $eq.i64(1250, 0);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i112 == 1);
    goto $bb19;

  $bb20:
    assume $i112 == 1;
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $i113 := 1;
    goto $bb22;

  $bb14:
    assume $i102 == 1;
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} dev_err.ref.ref.ref($p10, .str.25, .str.21);
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p9, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 0);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(0, 8));
    goto corral_source_split_561;

  corral_source_split_561:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1144, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1160, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, $i31);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1136, 1));
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_573;

  corral_source_split_573:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p35, $p34);
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1184, 1));
    goto corral_source_split_575;

  corral_source_split_575:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1192, 1));
    goto corral_source_split_577;

  corral_source_split_577:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p37);
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1208, 1));
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1184, 1));
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1200, 1));
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p44, $p43);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1344, 1));
    goto corral_source_split_587;

  corral_source_split_587:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1288, 1));
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i46);
    goto corral_source_split_590;

  corral_source_split_590:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p15, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_592;

  corral_source_split_592:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1144, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} $i53 := __create_pipe($p49, $i52);
    call {:si_unique_call 103} {:cexpr "tmp___1"} boogie_si_record_i32($i53);
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p15, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $i58 := $or.i32($i53, 1073741952);
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1128, 1));
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $i64 := $load.i32($M.0, $p63);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p17);
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $i69 := $load.i32($M.0, $p68);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} usb_fill_int_urb($p55, $p57, $i58, $p60, $i64, edge_interrupt_callback, $p65, $i69);
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p15, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    $p71 := $load.ref($M.0, $p70);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1208, 1));
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.0, $p72);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i32($i73);
    goto corral_source_split_618;

  corral_source_split_618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i75 := __create_pipe($p71, $i74);
    call {:si_unique_call 106} {:cexpr "tmp___2"} boogie_si_record_i32($i75);
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p15, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    $i80 := $or.i32($i75, $sub.i32(0, 1073741696));
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(1184, 1));
    goto corral_source_split_625;

  corral_source_split_625:
    assume {:verifier.code 0} true;
    $p82 := $load.ref($M.0, $p81);
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p84, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p17);
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} usb_fill_bulk_urb($p77, $p79, $i80, $p82, $i86, edge_bulk_in_callback, $p87);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, 0);
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p17, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} $i91 := ldv_usb_submit_urb_26($p90, 208);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    call {:si_unique_call 109} {:cexpr "response"} boogie_si_record_i32($i91);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb10:
    assume $i92 == 1;
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 110} dev_err.ref.ref.ref.i32($p10, .str.20, .str.21, $i91);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;

  corral_source_split_730_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_698;
}



const edge_close: ref;

axiom edge_close == $sub.ref(0, 301763);

procedure edge_close($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.19, $M.20, $M.21, $M.22, $CurrAddr, assertsPassed;



implementation edge_close($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i1;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p92: ref;
  var $p93: ref;
  var $p95: ref;
  var vslice_dummy_var_43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 136} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 137} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_834;

  corral_source_split_834:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 138} $p5 := usb_get_serial_data($p4);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    call {:si_unique_call 139} $p7 := usb_get_serial_port_data($p0);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p6);
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i10 := $eq.i64($i9, 0);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i10 == 1);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p8);
    goto corral_source_split_844;

  corral_source_split_844:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} block_until_tx_empty($p8);
    goto corral_source_split_847;

  corral_source_split_847:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(135, 1));
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p6, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_850;

  corral_source_split_850:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i16 == 1);
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p6, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p6, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_904;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume !($i48 == 1);
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p6, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $i50 := $load.i32($M.0, $p49);
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $i51 := $ne.i32($i50, 0);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i51 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(135, 1));
    goto corral_source_split_949;

  corral_source_split_949:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p75, 0);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p77, 0);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_955;

  corral_source_split_955:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} usb_kill_urb($p79);
    goto corral_source_split_957;

  corral_source_split_957:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $i83 := $ne.i64($i82, 0);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_976;

  corral_source_split_976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} kfree($p93);
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p95, $0.ref);
    goto corral_source_split_979;

  corral_source_split_979:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb35:
    assume $i83 == 1;
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_964;

  corral_source_split_964:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p85, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} kfree($p87);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    goto corral_source_split_970;

  corral_source_split_970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} usb_free_urb($p89);
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_972;

  corral_source_split_972:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p90, $0.ref);
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb26:
    assume $i51 == 1;
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p6);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($p52, $mul.ref(1148, 1));
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.0, $p53);
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i32($i54);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_941;

  corral_source_split_941:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb28;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i56 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_908;

  corral_source_split_908:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, .str);
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p58, .str.176);
    goto corral_source_split_911;

  corral_source_split_911:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p59, .str.2);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_914;

  corral_source_split_914:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p60, .str.178);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.5, $p62);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    $i64 := $and.i24($i63, $sub.i24(0, 262144));
    goto corral_source_split_919;

  corral_source_split_919:
    assume {:verifier.code 0} true;
    $i65 := $or.i24($i64, 1068);
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p62, $i65);
    goto corral_source_split_921;

  corral_source_split_921:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p66, 0);
    goto corral_source_split_923;

  corral_source_split_923:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.6, $p67);
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 1);
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 148} {:cexpr "tmp___2"} boogie_si_record_i64($i71);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 150} vslice_dummy_var_43 := send_iosp_ext_cmd($p8, 1, 0);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    goto corral_source_split_947;

  corral_source_split_947:
    assume {:verifier.code 0} true;
    goto $bb34;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb31:
    assume $i72 == 1;
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_944;

  corral_source_split_944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p73, .str.178, .str.176);
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb24;

  $bb11:
    assume $i19 == 1;
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p6);
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($p20, $mul.ref(1148, 1));
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i24 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, 1);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_856;

  corral_source_split_856:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, .str);
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_858;

  corral_source_split_858:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p27, .str.176);
    goto corral_source_split_859;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_860;

  corral_source_split_860:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, .str.2);
    goto corral_source_split_861;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.177);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_865;

  corral_source_split_865:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.5, $p31);
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 1055);
    goto corral_source_split_868;

  corral_source_split_868:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p31, $i34);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, 0);
    goto corral_source_split_871;

  corral_source_split_871:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.6, $p36);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 141} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 142} {:cexpr "tmp___1"} boogie_si_record_i64($i40);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 144} $i43 := send_iosp_ext_cmd($p8, 2, 0);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    call {:si_unique_call 145} {:cexpr "status"} boogie_si_record_i32($i43);
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 0);
    goto corral_source_split_896;

  corral_source_split_896:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i44 == 1);
    goto corral_source_split_901;

  corral_source_split_901:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p8, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p45, 0);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i44 == 1;
    goto corral_source_split_898;

  corral_source_split_898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} block_until_chase_response($p8);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i41 == 1;
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p42, .str.177, .str.176);
    goto corral_source_split_893;

  corral_source_split_893:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i12 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb2;
}



const edge_write: ref;

axiom edge_write == $sub.ref(0, 302795);

procedure edge_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, assertsPassed;



implementation edge_write($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $p64: ref;
  var $i65: i32;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i77: i24;
  var $i78: i24;
  var $i79: i24;
  var $p80: ref;
  var $p81: ref;
  var $i82: i8;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $i86: i1;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i64;
  var $p93: ref;
  var $i94: i64;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i64;
  var $p101: ref;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $p112: ref;
  var $i113: i32;
  var $i114: i1;
  var $p115: ref;
  var $i116: i32;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i24;
  var $i125: i24;
  var $i126: i24;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i32;
  var $i139: i64;
  var $p140: ref;
  var $i141: i64;
  var $p142: ref;
  var $i143: i64;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $i149: i64;
  var $p150: ref;
  var $p151: ref;
  var $i152: i32;
  var $i153: i32;
  var $p154: ref;
  var $p155: ref;
  var $i156: i32;
  var $i157: i32;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i24;
  var $i171: i24;
  var $i172: i24;
  var $p173: ref;
  var $p174: ref;
  var $i175: i8;
  var $i176: i64;
  var $i177: i64;
  var $i178: i64;
  var $i179: i1;
  var $p180: ref;
  var $p181: ref;
  var $i182: i16;
  var $i183: i32;
  var $p184: ref;
  var $i185: i32;
  var $i13: i32;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var cmdloc_dummy_var_8: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 160} {:cexpr "edge_write:arg:count"} boogie_si_record_i32($i3);
    goto corral_source_split_981;

  corral_source_split_981:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $p9 := usb_get_serial_port_data($p1);
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_984;

  corral_source_split_984:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i11, 0);
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 162} ldv_spin_lock();
    call {:si_unique_call 163} {:cexpr "edge_write:arg:_min1"} boogie_si_record_i32($i3);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    $p18 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32($i17, $i19);
    call {:si_unique_call 164} {:cexpr "_min2"} boogie_si_record_i32($i20);
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $i21 := $ult.i32($i3, $i20);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i21 == 1);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $i22 := $i20;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, .str);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p24, .str.69);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p25, .str.2);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1011;

  corral_source_split_1011:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, .str.70);
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.5, $p28);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 1121);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p28, $i31);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 0);
    goto corral_source_split_1020;

  corral_source_split_1020:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.6, $p33);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_1023;

  corral_source_split_1023:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 165} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 166} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32($i22, 0);
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    $p64 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p64);
    $p66 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_1099;

  corral_source_split_1099:
    assume {:verifier.code 0} true;
    $i68 := $sub.i32($i65, $i67);
    call {:si_unique_call 176} {:cexpr "bytesleft"} boogie_si_record_i32($i68);
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i68, $i22);
    goto corral_source_split_1101;

  corral_source_split_1101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i69 == 1);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $i70 := $i22;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p71, .str);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p72, .str.69);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1112;

  corral_source_split_1112:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p73, .str.2);
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1114;

  corral_source_split_1114:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p74, .str.72);
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1116;

  corral_source_split_1116:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $i77 := $load.i24($M.5, $p76);
    goto corral_source_split_1118;

  corral_source_split_1118:
    assume {:verifier.code 0} true;
    $i78 := $and.i24($i77, $sub.i24(0, 262144));
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i79 := $or.i24($i78, 1140);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p76, $i79);
    goto corral_source_split_1121;

  corral_source_split_1121:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p80, 0);
    goto corral_source_split_1123;

  corral_source_split_1123:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $i82 := $load.i8($M.6, $p81);
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    $i83 := $zext.i8.i64($i82);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    $i84 := $and.i64($i83, 1);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} $i85 := ldv__builtin_expect($i84, 0);
    call {:si_unique_call 178} {:cexpr "tmp___2"} boogie_si_record_i64($i85);
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i86} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i86 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    $p88 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $p89 := $load.ref($M.0, $p88);
    $p90 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $i91 := $load.i32($M.0, $p90);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    $i92 := $zext.i32.i64($i91);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($p89, $mul.ref($i92, 1));
    goto corral_source_split_1139;

  corral_source_split_1139:
    assume {:verifier.code 0} true;
    $i94 := $sext.i32.i64($i70);
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 180} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p93, $p2, $i94, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_1141;

  corral_source_split_1141:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    $p96 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    $p98 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    $i99 := $load.i32($M.0, $p98);
    goto corral_source_split_1144;

  corral_source_split_1144:
    assume {:verifier.code 0} true;
    $i100 := $zext.i32.i64($i99);
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($p97, $mul.ref($i100, 1));
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} usb_serial_debug_data($p95, .str.69, $i70, $p101);
    $p102 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1147;

  corral_source_split_1147:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i103, $i70);
    $p105 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1149;

  corral_source_split_1149:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p105, $i104);
    $p106 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    $i107 := $load.i32($M.0, $p106);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $i108 := $add.i32($i107, $i70);
    $p109 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p109, $i108);
    $p110 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    $p112 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i113 := $load.i32($M.0, $p112);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    $i114 := $eq.i32($i111, $i113);
    goto corral_source_split_1156;

  corral_source_split_1156:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i116 := $sub.i32($i22, $i70);
    call {:si_unique_call 182} {:cexpr "secondhalf"} boogie_si_record_i32($i116);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} spin_unlock_irqrestore($p159, $u0);
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p161 := $load.ref($M.0, $p160);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} $p162 := usb_get_serial_data($p161);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $p163 := $bitcast.ref.ref($p162);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} send_more_port_data($p163, $p10);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_1073;

  corral_source_split_1073:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p164, .str);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p165, .str.69);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1078;

  corral_source_split_1078:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p166, .str.2);
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p167, .str.74);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1082;

  corral_source_split_1082:
    assume {:verifier.code 0} true;
    $p169 := $bitcast.ref.ref($p168);
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i170 := $load.i24($M.5, $p169);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i171 := $and.i24($i170, $sub.i24(0, 262144));
    goto corral_source_split_1085;

  corral_source_split_1085:
    assume {:verifier.code 0} true;
    $i172 := $or.i24($i171, 1175);
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p169, $i172);
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p173, 0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1090;

  corral_source_split_1090:
    assume {:verifier.code 0} true;
    $i175 := $load.i8($M.6, $p174);
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $i176 := $zext.i8.i64($i175);
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $i177 := $and.i64($i176, 1);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i178 := ldv__builtin_expect($i177, 0);
    call {:si_unique_call 175} {:cexpr "tmp___5"} boogie_si_record_i64($i178);
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $i179 := $ne.i64($i178, 0);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $i13 := $i22;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $r := $i13;
    return;

  $bb33:
    assume $i179 == 1;
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    $i182 := $load.i16($M.0, $p181);
    goto corral_source_split_1217;

  corral_source_split_1217:
    assume {:verifier.code 0} true;
    $i183 := $zext.i16.i32($i182);
    $p184 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i185 := $load.i32($M.0, $p184);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p8, $p180, .str.74, .str.69, $i22, $i183, $i185);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    goto $bb35;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i117 == 1;
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p118, .str);
    goto corral_source_split_1166;

  corral_source_split_1166:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p119, .str.69);
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p120, .str.2);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1171;

  corral_source_split_1171:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p121, .str.73);
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    $i124 := $load.i24($M.5, $p123);
    goto corral_source_split_1175;

  corral_source_split_1175:
    assume {:verifier.code 0} true;
    $i125 := $and.i24($i124, $sub.i24(0, 262144));
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i126 := $or.i24($i125, 1157);
    goto corral_source_split_1177;

  corral_source_split_1177:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p123, $i126);
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p127, 0);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1181;

  corral_source_split_1181:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.6, $p128);
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i64($i129);
    goto corral_source_split_1183;

  corral_source_split_1183:
    assume {:verifier.code 0} true;
    $i131 := $and.i64($i130, 1);
    goto corral_source_split_1184;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} $i132 := ldv__builtin_expect($i131, 0);
    call {:si_unique_call 184} {:cexpr "tmp___3"} boogie_si_record_i64($i132);
    goto corral_source_split_1185;

  corral_source_split_1185:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    $p135 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    $p137 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i138 := $load.i32($M.0, $p137);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    $i139 := $zext.i32.i64($i138);
    goto corral_source_split_1195;

  corral_source_split_1195:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($p136, $mul.ref($i139, 1));
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i70);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p2, $mul.ref($i141, 1));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i116);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    cmdloc_dummy_var_7 := $M.0;
    call {:si_unique_call 186} cmdloc_dummy_var_8 := $memcpy.i8(cmdloc_dummy_var_6, cmdloc_dummy_var_7, $p140, $p142, $i143, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_8;
    goto corral_source_split_1200;

  corral_source_split_1200:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    $p145 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $p146 := $load.ref($M.0, $p145);
    $p147 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    $i148 := $load.i32($M.0, $p147);
    goto corral_source_split_1203;

  corral_source_split_1203:
    assume {:verifier.code 0} true;
    $i149 := $zext.i32.i64($i148);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($p146, $mul.ref($i149, 1));
    goto corral_source_split_1205;

  corral_source_split_1205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 187} usb_serial_debug_data($p144, .str.69, $i116, $p150);
    $p151 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.0, $p151);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i153 := $add.i32($i152, $i116);
    $p154 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p154, $i153);
    $p155 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1209;

  corral_source_split_1209:
    assume {:verifier.code 0} true;
    $i156 := $load.i32($M.0, $p155);
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i157 := $add.i32($i156, $i116);
    $p158 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, $i157);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i133 == 1;
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p7, $p134, .str.73, .str.69, $i116);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb24:
    assume $i114 == 1;
    $p115 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(0, 1));
    goto corral_source_split_1158;

  corral_source_split_1158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, 0);
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i86 == 1;
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p6, $p87, .str.72, .str.69, $i70, $i68);
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i69 == 1;
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i70 := $i68;
    goto $bb20;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1040;

  corral_source_split_1040:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p47, .str);
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1042;

  corral_source_split_1042:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, .str.69);
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str.2);
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.71);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.5, $p52);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_1051;

  corral_source_split_1051:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 1126);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p52, $i55);
    goto corral_source_split_1053;

  corral_source_split_1053:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p56, 0);
    goto corral_source_split_1055;

  corral_source_split_1055:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.6, $p57);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_1058;

  corral_source_split_1058:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 169} {:cexpr "tmp___1"} boogie_si_record_i64($i61);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i62 == 1;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1064;

  corral_source_split_1064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 170} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p63, .str.71, .str.69);
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1029;

  corral_source_split_1029:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    $p43 := $add.ref($add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i45 := $sub.i32($i42, $i44);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p4, $p39, .str.70, .str.69, $i3, $i45, $i22);
    goto corral_source_split_1035;

  corral_source_split_1035:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i21 == 1;
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i22 := $i3;
    goto $bb7;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32(0, 19);
    goto $bb3;
}



const edge_write_room: ref;

axiom edge_write_room == $sub.ref(0, 303827);

procedure edge_write_room($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $CurrAddr;



implementation edge_write_room($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i24;
  var $i49: i24;
  var $i50: i24;
  var $p51: ref;
  var $p52: ref;
  var $i53: i8;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i1;
  var $p58: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1228;

  corral_source_split_1228:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(135, 1));
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1246;

  corral_source_split_1246:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str);
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.188);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1250;

  corral_source_split_1250:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.2);
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1252;

  corral_source_split_1252:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.3);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1254;

  corral_source_split_1254:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_1256;

  corral_source_split_1256:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 1323);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 193} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1270;

  corral_source_split_1270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p33, .str.3, .str.188);
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} ldv_spin_lock();
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1274;

  corral_source_split_1274:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_1278;

  corral_source_split_1278:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i36, $i39);
    call {:si_unique_call 196} {:cexpr "room"} boogie_si_record_i32($i40);
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} spin_unlock_irqrestore($p41, $u0);
    goto corral_source_split_1281;

  corral_source_split_1281:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p42, .str);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p43, .str.188);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p44, .str.2);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p45, .str.189);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1290;

  corral_source_split_1290:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p46);
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i48 := $load.i24($M.5, $p47);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i49 := $and.i24($i48, $sub.i24(0, 262144));
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    $i50 := $or.i24($i49, 1332);
    goto corral_source_split_1294;

  corral_source_split_1294:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p47, $i50);
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1296;

  corral_source_split_1296:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p51, 0);
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1298;

  corral_source_split_1298:
    assume {:verifier.code 0} true;
    $i53 := $load.i8($M.6, $p52);
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    $i54 := $zext.i8.i64($i53);
    goto corral_source_split_1300;

  corral_source_split_1300:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 1);
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} $i56 := ldv__builtin_expect($i55, 0);
    call {:si_unique_call 199} {:cexpr "tmp___1"} boogie_si_record_i64($i56);
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    $i57 := $ne.i64($i56, 0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i10 := $i40;
    goto $bb3;

  $bb14:
    assume $i57 == 1;
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p58, .str.189, .str.188, $i40);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const edge_ioctl: ref;

axiom edge_ioctl == $sub.ref(0, 304859);

procedure edge_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.9, $M.10, $M.11, $M.12, $M.13, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr;



implementation edge_ioctl($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 204} {:cexpr "edge_ioctl:arg:cmd"} boogie_si_record_i32($i1);
    call {:si_unique_call 205} {:cexpr "edge_ioctl:arg:arg"} boogie_si_record_i64($i2);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $p9 := get_current();
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1314;

  corral_source_split_1314:
    assume {:verifier.code 0} true;
    $M.9 := $store.i32($M.9, $p10, 0);
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $M.10 := $store.ref($M.10, $p12, $p9);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    $M.11 := $store.ref($M.11, $p13, autoremove_wake_function);
    goto corral_source_split_1320;

  corral_source_split_1320:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_1322;

  corral_source_split_1322:
    assume {:verifier.code 0} true;
    $M.12 := $store.ref($M.12, $p16, $p14);
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $M.13 := $store.ref($M.13, $p19, $p17);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 207} $p20 := usb_get_serial_port_data($p8);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i1, 21593);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i1, 21593);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32(0, 515);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  $bb4:
    assume $i23 == 1;
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1330;

  corral_source_split_1330:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, .str);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p26, .str.63);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p27, .str.2);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1336;

  corral_source_split_1336:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p28, .str.64);
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.5, $p30);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 1593);
    goto corral_source_split_1342;

  corral_source_split_1342:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p30, $i33);
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1346;

  corral_source_split_1346:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.6, $p35);
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 209} {:cexpr "tmp___1"} boogie_si_record_i64($i39);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_1351;

  corral_source_split_1351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p42 := $i2p.i64.ref($i2);
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $i43 := get_lsr_info($p21, $p42);
    call {:si_unique_call 214} {:cexpr "tmp___2"} boogie_si_record_i32($i43);
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $i44 := $i43;
    goto $bb12;

  $bb9:
    assume $i40 == 1;
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p41, .str.64, .str.63);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i1, 21534);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb6;

  $bb7:
    assume $i24 == 1;
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.63);
    goto corral_source_split_1357;

  corral_source_split_1357:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.2);
    goto corral_source_split_1359;

  corral_source_split_1359:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.65);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1362;

  corral_source_split_1362:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.5, $p50);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 1597);
    goto corral_source_split_1366;

  corral_source_split_1366:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p50, $i53);
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1368;

  corral_source_split_1368:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, 0);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 210} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 211} {:cexpr "tmp___3"} boogie_si_record_i64($i59);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p62 := $i2p.i64.ref($i2);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} $i63 := get_serial_info($p21, $p62);
    call {:si_unique_call 217} {:cexpr "tmp___4"} boogie_si_record_i32($i63);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i44 := $i63;
    goto $bb12;

  $bb13:
    assume $i60 == 1;
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p61, .str.65, .str.63);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const edge_set_termios: ref;

axiom edge_set_termios == $sub.ref(0, 305891);

procedure edge_set_termios($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.16, assertsPassed;



implementation edge_set_termios($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p26: ref;
  var $i27: i32;
  var $p29: ref;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i24;
  var $i38: i24;
  var $i39: i24;
  var $p40: ref;
  var $p41: ref;
  var $i42: i8;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $p50: ref;
  var $i51: i32;
  var $i52: i64;
  var $i53: i1;
  var $p54: ref;
  var $i55: i8;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i24;
  var $i64: i24;
  var $i65: i24;
  var $p66: ref;
  var $p67: ref;
  var $i68: i8;
  var $i69: i64;
  var $i70: i64;
  var $i71: i64;
  var $i72: i1;
  var $p73: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 220} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} $p6 := usb_get_serial_port_data($p1);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str);
    goto corral_source_split_1397;

  corral_source_split_1397:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.29);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1400;

  corral_source_split_1400:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.2);
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.30);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1404;

  corral_source_split_1404:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_1407;

  corral_source_split_1407:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 1460);
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_1411;

  corral_source_split_1411:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_1415;

  corral_source_split_1415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 223} {:cexpr "tmp___0"} boogie_si_record_i64($i22);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p31, .str);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1429;

  corral_source_split_1429:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p32, .str.29);
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p33, .str.2);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p34, .str.31);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $i37 := $load.i24($M.5, $p36);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    $i38 := $and.i24($i37, $sub.i24(0, 262144));
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $i39 := $or.i24($i38, 1461);
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p36, $i39);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p40, 0);
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.6, $p41);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i64($i42);
    goto corral_source_split_1445;

  corral_source_split_1445:
    assume {:verifier.code 0} true;
    $i44 := $and.i64($i43, 1);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 225} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 226} {:cexpr "tmp___1"} boogie_si_record_i64($i45);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p7);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    assume {:branchcond $i53} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i8.i1($i55);
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i56 == 1);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p57, .str);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p58, .str.29);
    goto corral_source_split_1471;

  corral_source_split_1471:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p59, .str.2);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p60, .str.3);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    $i63 := $load.i24($M.5, $p62);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    $i64 := $and.i24($i63, $sub.i24(0, 262144));
    goto corral_source_split_1479;

  corral_source_split_1479:
    assume {:verifier.code 0} true;
    $i65 := $or.i24($i64, 1467);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p62, $i65);
    goto corral_source_split_1481;

  corral_source_split_1481:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p66, 0);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    $i68 := $load.i8($M.6, $p67);
    goto corral_source_split_1485;

  corral_source_split_1485:
    assume {:verifier.code 0} true;
    $i69 := $zext.i8.i64($i68);
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i70 := $and.i64($i69, 1);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i71 := ldv__builtin_expect($i70, 0);
    call {:si_unique_call 229} {:cexpr "tmp___2"} boogie_si_record_i64($i71);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i72 := $ne.i64($i71, 0);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i72 == 1;
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p73, .str.3, .str.29);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb11:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} change_port_settings($p0, $p7, $p2);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i53 == 1;
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i46 == 1;
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(8, 1));
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 44)), $mul.ref(0, 1));
    goto corral_source_split_1454;

  corral_source_split_1454:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 227} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p4, $p47, .str.31, .str.29, $i49, $i51);
    goto corral_source_split_1456;

  corral_source_split_1456:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i23 == 1;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_1422;

  corral_source_split_1422:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 224} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p24, .str.30, .str.29, $i27, $i30);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const edge_break: ref;

axiom edge_break == $sub.ref(0, 306923);

procedure edge_break($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.19, $M.20, $M.21, $M.22, $CurrAddr, assertsPassed;



implementation edge_break($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $i51: i32;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i1;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i24;
  var $i66: i24;
  var $i67: i24;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i76: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i24;
  var $i85: i24;
  var $i86: i24;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i95: i32;
  var $i77: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 232} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 234} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 236} {:cexpr "edge_break:arg:break_state"} boogie_si_record_i32($i1);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p9 := usb_get_serial_port_data($p8);
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} $p13 := usb_get_serial_data($p12);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_1507;

  corral_source_split_1507:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i17 == 1);
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p14, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i48, 0);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i49 == 1);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p14, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_1569;

  corral_source_split_1569:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i52 == 1;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $p53 := $bitcast.ref.ref($p14);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p53, $mul.ref(1148, 1));
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_1575;

  corral_source_split_1575:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i32($i55);
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i57 == 1);
    goto $bb21;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i57 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i1, $sub.i32(0, 1));
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i58 == 1);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p78, .str);
    goto corral_source_split_1605;

  corral_source_split_1605:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p79, .str.190);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1608;

  corral_source_split_1608:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p80, .str.2);
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p81, .str.192);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1612;

  corral_source_split_1612:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i84 := $load.i24($M.5, $p83);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i85 := $and.i24($i84, $sub.i24(0, 262144));
    goto corral_source_split_1615;

  corral_source_split_1615:
    assume {:verifier.code 0} true;
    $i86 := $or.i24($i85, 1639);
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p83, $i86);
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p87, 0);
    goto corral_source_split_1619;

  corral_source_split_1619:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.6, $p88);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i64($i89);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 1);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 248} {:cexpr "tmp___3"} boogie_si_record_i64($i92);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 253} $i95 := send_iosp_ext_cmd($p10, 9, 0);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    call {:si_unique_call 254} {:cexpr "status"} boogie_si_record_i32($i95);
    assume {:verifier.code 0} true;
    $i77 := $i95;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i77, 0);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i96} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i96 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb33:
    assume $i96 == 1;
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p97, .str);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p98, .str.190);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p99, .str.2);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1647;

  corral_source_split_1647:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, .str.193);
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.5, $p102);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 1645);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p102, $i105);
    goto corral_source_split_1654;

  corral_source_split_1654:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p106, 0);
    goto corral_source_split_1656;

  corral_source_split_1656:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.6, $p107);
    goto corral_source_split_1658;

  corral_source_split_1658:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 256} {:cexpr "tmp___4"} boogie_si_record_i64($i111);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_1662;

  corral_source_split_1662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb35:
    assume $i112 == 1;
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p113, .str.193, .str.190);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    goto $bb37;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i93 == 1;
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p94, .str.192, .str.190);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume $i58 == 1;
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1580;

  corral_source_split_1580:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, .str);
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p60, .str.190);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1584;

  corral_source_split_1584:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p61, .str.2);
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p62, .str.191);
    goto corral_source_split_1587;

  corral_source_split_1587:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i65 := $load.i24($M.5, $p64);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    $i66 := $and.i24($i65, $sub.i24(0, 262144));
    goto corral_source_split_1591;

  corral_source_split_1591:
    assume {:verifier.code 0} true;
    $i67 := $or.i24($i66, 1635);
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p64, $i67);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1594;

  corral_source_split_1594:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p68, 0);
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.6, $p69);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i70);
    goto corral_source_split_1598;

  corral_source_split_1598:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i71, 1);
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 246} {:cexpr "tmp___2"} boogie_si_record_i64($i73);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_1601;

  corral_source_split_1601:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i76 := send_iosp_ext_cmd($p10, 8, 0);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    call {:si_unique_call 251} {:cexpr "status"} boogie_si_record_i32($i76);
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $i77 := $i76;
    goto $bb29;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  $bb26:
    assume $i74 == 1;
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p75, .str.191, .str.190);
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb17;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p14);
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1148, 1));
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb6;

  $bb7:
    assume {:verifier.code 0} true;
    assume $i25 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1515;

  corral_source_split_1515:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.190);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.2);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.177);
    goto corral_source_split_1520;

  corral_source_split_1520:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.5, $p32);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_1524;

  corral_source_split_1524:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 1621);
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p32, $i35);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 0);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_1530;

  corral_source_split_1530:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 239} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 240} {:cexpr "tmp___1"} boogie_si_record_i64($i41);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} $i44 := send_iosp_ext_cmd($p10, 2, 0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    call {:si_unique_call 243} {:cexpr "status"} boogie_si_record_i32($i44);
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i44, 0);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i45 == 1);
    goto corral_source_split_1558;

  corral_source_split_1558:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p10, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p46, 0);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i45 == 1;
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 244} block_until_chase_response($p10);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    goto $bb14;

  SeqInstr_64:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i42 == 1;
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 241} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p43, .str.177, .str.190);
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;
}



const edge_chars_in_buffer: ref;

axiom edge_chars_in_buffer == $sub.ref(0, 307955);

procedure edge_chars_in_buffer($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.14, $CurrAddr;



implementation edge_chars_in_buffer($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i1;
  var $p14: ref;
  var $i15: i8;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $p37: ref;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i24;
  var $i54: i24;
  var $i55: i24;
  var $p56: ref;
  var $p57: ref;
  var $i58: i8;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $p63: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 258} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1670;

  corral_source_split_1670:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1672;

  corral_source_split_1672:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1674;

  corral_source_split_1674:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(135, 1));
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i8.i1($i12);
    goto corral_source_split_1683;

  corral_source_split_1683:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_1687;

  corral_source_split_1687:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_1691;

  corral_source_split_1691:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.194);
    goto corral_source_split_1695;

  corral_source_split_1695:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.2);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.3);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_1702;

  corral_source_split_1702:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 1359);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_1705;

  corral_source_split_1705:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_1710;

  corral_source_split_1710:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 262} {:cexpr "tmp___0"} boogie_si_record_i64($i31);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1716;

  corral_source_split_1716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p33, .str.3, .str.194);
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb8:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} ldv_spin_lock();
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_1721;

  corral_source_split_1721:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_1723;

  corral_source_split_1723:
    assume {:verifier.code 0} true;
    $i38 := $load.i16($M.0, $p37);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i38);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32($i36, $i39);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i40, $i43);
    call {:si_unique_call 265} {:cexpr "num_chars"} boogie_si_record_i32($i44);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} spin_unlock_irqrestore($p45, $u0);
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i44, 0);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i10 := $i44;
    goto $bb3;

  $bb14:
    assume $i46 == 1;
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1735;

  corral_source_split_1735:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p47, .str);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p48, .str.194);
    goto corral_source_split_1738;

  corral_source_split_1738:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p49, .str.2);
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p50, .str.189);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p51);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    $i53 := $load.i24($M.5, $p52);
    goto corral_source_split_1745;

  corral_source_split_1745:
    assume {:verifier.code 0} true;
    $i54 := $and.i24($i53, $sub.i24(0, 262144));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    $i55 := $or.i24($i54, 1368);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p52, $i55);
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p56, 0);
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $i58 := $load.i8($M.6, $p57);
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i64($i58);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $i60 := $and.i64($i59, 1);
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i61 := ldv__builtin_expect($i60, 0);
    call {:si_unique_call 268} {:cexpr "tmp___1"} boogie_si_record_i64($i61);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i62 == 1;
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p63, .str.189, .str.194, $i44);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb5:
    assume $i13 == 1;
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1677;

  corral_source_split_1677:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;
}



const edge_throttle: ref;

axiom edge_throttle == $sub.ref(0, 308987);

procedure edge_throttle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, assertsPassed;



implementation edge_throttle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var $i55: i32;
  var $i56: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 270} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.1);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1782;

  corral_source_split_1782:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.2);
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.3);
    goto corral_source_split_1785;

  corral_source_split_1785:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.5, $p18);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1390);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p18, $i21);
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 0);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_1795;

  corral_source_split_1795:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 274} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p29, .str.3, .str.1);
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 4096);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1819;

  corral_source_split_1819:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1825;

  corral_source_split_1825:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i48 := $and.i32($i47, 253);
    goto corral_source_split_1827;

  corral_source_split_1827:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_1828;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_1829;

  corral_source_split_1829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} $i55 := send_cmd_write_uart_register($p7, 4, $i54);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    call {:si_unique_call 279} {:cexpr "status"} boogie_si_record_i32($i55);
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $i56 := $ne.i32($i55, 0);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb19:
    assume $i56 == 1;
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_1812;

  corral_source_split_1812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i38);
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 276} $i39 := edge_write($p0, $p5, $p2, 1);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    call {:si_unique_call 277} {:cexpr "status"} boogie_si_record_i32($i39);
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i39, 0);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const edge_unthrottle: ref;

axiom edge_unthrottle == $sub.ref(0, 310019);

procedure edge_unthrottle($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, assertsPassed;



implementation edge_unthrottle($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $i11: i8;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $i32: i32;
  var $i33: i32;
  var $i34: i1;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i8;
  var vslice_dummy_var_44: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 280} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 281} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1841;

  corral_source_split_1841:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1845;

  corral_source_split_1845:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i9 := $eq.i64($i8, 0);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i8.i1($i11);
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_1855;

  corral_source_split_1855:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str);
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.28);
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.2);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.3);
    goto corral_source_split_1863;

  corral_source_split_1863:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.5, $p18);
    goto corral_source_split_1866;

  corral_source_split_1866:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 1428);
    goto corral_source_split_1868;

  corral_source_split_1868:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p18, $i21);
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 0);
    goto corral_source_split_1871;

  corral_source_split_1871:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_1875;

  corral_source_split_1875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 284} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_1880;

  corral_source_split_1880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p29, .str.3, .str.28);
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb5:
    assume $i12 == 1;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i32, 4096);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    assume {:branchcond $i34} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_1897;

  corral_source_split_1897:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i44 := $slt.i32($i43, 0);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb17:
    assume $i44 == 1;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i47, 2);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i48);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    $i54 := $trunc.i32.i8($i53);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 288} vslice_dummy_var_44 := send_cmd_write_uart_register($p7, 4, $i54);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_82:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i34 == 1;
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p2, $i38);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 286} $i39 := edge_write($p0, $p5, $p2, 1);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 287} {:cexpr "status"} boogie_si_record_i32($i39);
    goto corral_source_split_1892;

  corral_source_split_1892:
    assume {:verifier.code 0} true;
    $i40 := $sle.i32($i39, 0);
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i40 == 1;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_1849;

  corral_source_split_1849:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const edge_tiocmget: ref;

axiom edge_tiocmget == $sub.ref(0, 311051);

procedure edge_tiocmget($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation edge_tiocmget($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i8;
  var $i8: i32;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    call {:si_unique_call 289} $p4 := usb_get_serial_port_data($p3);
    goto corral_source_split_1919;

  corral_source_split_1919:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(122, 1));
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i7 := $load.i8($M.0, $p6);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i7);
    call {:si_unique_call 290} {:cexpr "msr"} boogie_si_record_i32($i8);
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    call {:si_unique_call 291} {:cexpr "mcr"} boogie_si_record_i32($i11);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_1927;

  corral_source_split_1927:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    $i14 := (if $i13 == 1 then 2 else 0);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i11, 2);
    goto corral_source_split_1930;

  corral_source_split_1930:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    $i17 := (if $i16 == 1 then 4 else 0);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $i18 := $or.i32($i14, $i17);
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i8, 16);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $i21 := (if $i20 == 1 then 32 else 0);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    $i22 := $or.i32($i18, $i21);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i8, 128);
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $i25 := (if $i24 == 1 then 64 else 0);
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i22, $i25);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i8, 64);
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $i29 := (if $i28 == 1 then 128 else 0);
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $i30 := $or.i32($i26, $i29);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i8, 32);
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i33 := (if $i32 == 1 then 256 else 0);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i34 := $or.i32($i30, $i33);
    call {:si_unique_call 292} {:cexpr "result"} boogie_si_record_i32($i34);
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $r := $i34;
    return;
}



const edge_tiocmset: ref;

axiom edge_tiocmset == $sub.ref(0, 312083);

procedure edge_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr, assertsPassed;



implementation edge_tiocmset($p0: ref, $i1: i32, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $i21: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i34: i32;
  var $i35: i8;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i8;
  var vslice_dummy_var_45: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} {:cexpr "edge_tiocmset:arg:set"} boogie_si_record_i32($i1);
    call {:si_unique_call 294} {:cexpr "edge_tiocmset:arg:clear"} boogie_si_record_i32($i2);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1680, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 295} $p6 := usb_get_serial_port_data($p5);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 296} {:cexpr "mcr"} boogie_si_record_i32($i10);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i1, 4);
    goto corral_source_split_1960;

  corral_source_split_1960:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $i14 := $i10;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i1, 2);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_1968;

  corral_source_split_1968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i18 := $i14;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i1, 32768);
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i22 := $i18;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i2, 4);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    $i26 := $i22;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i2, 2);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i30 := $i26;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i2, 32768);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    $i34 := $i30;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $i35 := $trunc.i32.i8($i34);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p36, $i35);
    goto corral_source_split_2004;

  corral_source_split_2004:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p7, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_2006;

  corral_source_split_2006:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    $i40 := $trunc.i32.i8($i39);
    goto corral_source_split_2008;

  corral_source_split_2008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} vslice_dummy_var_45 := send_cmd_write_uart_register($p7, 4, $i40);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i32 == 1;
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i30, $sub.i32(0, 17));
    call {:si_unique_call 302} {:cexpr "mcr"} boogie_si_record_i32($i33);
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb18;

  $bb13:
    assume $i28 == 1;
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i26, $sub.i32(0, 2));
    call {:si_unique_call 301} {:cexpr "mcr"} boogie_si_record_i32($i29);
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb15;

  $bb10:
    assume $i24 == 1;
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i22, $sub.i32(0, 3));
    call {:si_unique_call 300} {:cexpr "mcr"} boogie_si_record_i32($i25);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    $i26 := $i25;
    goto $bb12;

  $bb7:
    assume $i20 == 1;
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    $i21 := $or.i32($i18, 16);
    call {:si_unique_call 299} {:cexpr "mcr"} boogie_si_record_i32($i21);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb9;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $i17 := $or.i32($i14, 1);
    call {:si_unique_call 298} {:cexpr "mcr"} boogie_si_record_i32($i17);
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $i18 := $i17;
    goto $bb6;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $i13 := $or.i32($i10, 2);
    call {:si_unique_call 297} {:cexpr "mcr"} boogie_si_record_i32($i13);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb3;
}



const usb_serial_generic_tiocmiwait: ref;

axiom usb_serial_generic_tiocmiwait == $sub.ref(0, 313115);

procedure usb_serial_generic_tiocmiwait($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_generic_tiocmiwait($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 304} {:cexpr "usb_serial_generic_tiocmiwait:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 1} true;
    call {:si_unique_call 305} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 306} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_serial_generic_get_icount: ref;

axiom usb_serial_generic_get_icount == $sub.ref(0, 314147);

procedure usb_serial_generic_get_icount($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_generic_get_icount($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2014;

  corral_source_split_2014:
    assume {:verifier.code 1} true;
    call {:si_unique_call 307} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 308} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const edge_interrupt_callback: ref;

axiom edge_interrupt_callback == $sub.ref(0, 315179);

procedure edge_interrupt_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, assertsPassed;



implementation edge_interrupt_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i24;
  var $i29: i24;
  var $i30: i24;
  var $p31: ref;
  var $p32: ref;
  var $i33: i8;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i24;
  var $i48: i24;
  var $i49: i24;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i1;
  var $i66: i1;
  var $i67: i8;
  var $i68: i32;
  var $p69: ref;
  var $i70: i8;
  var $i71: i32;
  var $i72: i32;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $i77: i16;
  var $i78: i32;
  var $i79: i16;
  var $i80: i32;
  var $i81: i32;
  var $i82: i16;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i24;
  var $i91: i24;
  var $i92: i24;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $i101: i16;
  var $i102: i32;
  var $p103: ref;
  var $i104: i8;
  var $i105: i1;
  var $i106: i32;
  var $p107: ref;
  var $i108: i16;
  var $i109: i32;
  var $i110: i1;
  var $p111: ref;
  var $i112: i8;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i24;
  var $i121: i24;
  var $i122: i24;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $i133: i32;
  var $i134: i1;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i1;
  var $i141: i64;
  var $p142: ref;
  var $i143: i8;
  var $i144: i32;
  var $i145: i64;
  var $i146: i64;
  var $p147: ref;
  var $i148: i8;
  var $i149: i32;
  var $i150: i32;
  var $i151: i32;
  var $i152: i1;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i8;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $i166: i16;
  var $i167: i32;
  var $i168: i16;
  var $i169: i32;
  var $i170: i32;
  var $i171: i16;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $i180: i24;
  var $i181: i24;
  var $i182: i24;
  var $p183: ref;
  var $p184: ref;
  var $i185: i8;
  var $i186: i64;
  var $i187: i64;
  var $i188: i64;
  var $i189: i1;
  var $p190: ref;
  var $i191: i16;
  var $i192: i32;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i139: i32;
  var $i140: i32;
  var $p199: ref;
  var $p200: ref;
  var $i201: i8;
  var $i202: i32;
  var $i203: i1;
  var $i204: i32;
  var $i205: i1;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 309} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 311} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 313} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2017;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2018;

  corral_source_split_2018:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    call {:si_unique_call 314} {:cexpr "length"} boogie_si_record_i32($i12);
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    call {:si_unique_call 315} {:cexpr "status"} boogie_si_record_i32($i14);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p41, .str);
    goto corral_source_split_2068;

  corral_source_split_2068:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p42, .str.169);
    goto corral_source_split_2070;

  corral_source_split_2070:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2071;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p43, .str.2);
    goto corral_source_split_2072;

  corral_source_split_2072:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p44, .str.171);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i47 := $load.i24($M.5, $p46);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $i48 := $and.i24($i47, $sub.i24(0, 262144));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    $i49 := $or.i24($i48, 581);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p46, $i49);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p50, 0);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.6, $p51);
    goto corral_source_split_2084;

  corral_source_split_2084:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i64($i52);
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i54 := $and.i64($i53, 1);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $i55 := ldv__builtin_expect($i54, 0);
    call {:si_unique_call 320} {:cexpr "tmp___0"} boogie_si_record_i64($i55);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    $i56 := $ne.i64($i55, 0);
    goto corral_source_split_2088;

  corral_source_split_2088:
    assume {:verifier.code 0} true;
    assume {:branchcond $i56} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i204 := ldv_usb_submit_urb_24($p0, 32);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 323} {:cexpr "result"} boogie_si_record_i32($i204);
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    $i205 := $ne.i32($i204, 0);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    assume {:branchcond $i205} true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i205 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  $bb72:
    assume $i205 == 1;
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_2308;

  corral_source_split_2308:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p207, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} dev_err.ref.ref.ref.i32($p208, .str.20, .str.169, $i204);
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb74;

  SeqInstr_88:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i56 == 1;
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p58, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 321} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p2, $p59, .str.171, .str.169, $i14);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb6:
    assume $i17 == 1;
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_2055;

  corral_source_split_2055:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p61, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2057;

  corral_source_split_2057:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i12, 0);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb29:
    assume $i65 == 1;
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} usb_serial_debug_data($p64, .str.169, $i12, $p10);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    $i66 := $sgt.i32($i12, 1);
    goto corral_source_split_2101;

  corral_source_split_2101:
    assume {:verifier.code 0} true;
    assume {:branchcond $i66} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $i138 := $slt.i32(2, $i12);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb52:
    assume $i138 == 1;
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $i139, $i140 := 0, 2;
    goto $bb55;

  $bb55:
    call $i141, $p142, $i143, $i144, $i145, $i146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $p154, $p155, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $p164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $p172, $p173, $p174, $p175, $p176, $p177, $p178, $p179, $i180, $i181, $i182, $p183, $p184, $i185, $i186, $i187, $i188, $i189, $p190, $i191, $i192, $p193, $p194, $p195, $i196, $i197, $i198, $i139, $i140, $p199, $p200, $i201, $i202, $i203 := edge_interrupt_callback_loop_$bb55($p5, $p8, $p10, $i12, $p64, $p137, $i141, $p142, $i143, $i144, $i145, $i146, $p147, $i148, $i149, $i150, $i151, $i152, $i153, $p154, $p155, $p157, $p158, $p159, $p160, $p161, $i162, $i163, $p164, $p165, $i166, $i167, $i168, $i169, $i170, $i171, $p172, $p173, $p174, $p175, $p176, $p177, $p178, $p179, $i180, $i181, $i182, $p183, $p184, $i185, $i186, $i187, $i188, $i189, $p190, $i191, $i192, $p193, $p194, $p195, $i196, $i197, $i198, $i139, $i140, $p199, $p200, $i201, $i202, $i203);
    goto $bb55_last;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    $p199 := $load.ref($M.0, $p137);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p199, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_2217;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.0, $p200);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_2219;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    $i203 := $sgt.i32($i202, $i139);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i203 == 1);
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb68:
    assume $i203 == 1;
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_2222;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($p10, $mul.ref($i141, 1));
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    $i143 := $load.i8($M.0, $p142);
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    $i144 := $zext.i8.i32($i143);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    $i145 := $sext.i32.i64($i140);
    goto corral_source_split_2226;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    $i146 := $add.i64($i145, 1);
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($p10, $mul.ref($i146, 1));
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    $i148 := $load.i8($M.0, $p147);
    goto corral_source_split_2229;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i148);
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $i150 := $shl.i32($i149, 8);
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $i151 := $or.i32($i144, $i150);
    call {:si_unique_call 337} {:cexpr "txCredits"} boogie_si_record_i32($i151);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    $i152 := $ne.i32($i151, 0);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i196 := $add.i32($i140, 2);
    call {:si_unique_call 346} {:cexpr "position"} boogie_si_record_i32($i196);
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    $i197 := $add.i32($i139, 1);
    call {:si_unique_call 347} {:cexpr "portNumber"} boogie_si_record_i32($i197);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $i198 := $slt.i32($i196, $i12);
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i198 == 1);
    goto corral_source_split_2300;

  corral_source_split_2300:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb66:
    assume $i198 == 1;
    assume {:verifier.code 0} true;
    $i139, $i140 := $i197, $i196;
    goto $bb66_dummy;

  $bb57:
    assume $i152 == 1;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    $i153 := $sext.i32.i64($i139);
    goto corral_source_split_2236;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p155, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i153, 8));
    goto corral_source_split_2239;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    $p158 := $load.ref($M.0, $p157);
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $p159 := usb_get_serial_port_data($p158);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    $p160 := $bitcast.ref.ref($p159);
    goto corral_source_split_2242;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $i162 := $load.i8($M.0, $p161);
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $i163 := $trunc.i8.i1($i162);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb59:
    assume $i163 == 1;
    goto corral_source_split_2247;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p160, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} spin_lock($p164);
    goto corral_source_split_2249;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p160, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    $i166 := $load.i16($M.0, $p165);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $i167 := $zext.i16.i32($i166);
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i168 := $trunc.i32.i16($i151);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i169 := $zext.i16.i32($i168);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i170 := $add.i32($i167, $i169);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i32.i16($i170);
    goto corral_source_split_2256;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p160, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p172, $i171);
    goto corral_source_split_2258;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p160, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} spin_unlock($p173);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p174, .str);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p175, .str.169);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p176, .str.2);
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p177, .str.175);
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    $p179 := $bitcast.ref.ref($p178);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i180 := $load.i24($M.5, $p179);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    $i181 := $and.i24($i180, $sub.i24(0, 262144));
    goto corral_source_split_2272;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    $i182 := $or.i24($i181, 635);
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p179, $i182);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p183, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2277;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    $i185 := $load.i8($M.6, $p184);
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i64($i185);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $i187 := $and.i64($i186, 1);
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} $i188 := ldv__builtin_expect($i187, 0);
    call {:si_unique_call 342} {:cexpr "tmp___4"} boogie_si_record_i64($i188);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    $i189 := $ne.i64($i188, 0);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p160, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p194, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} tty_port_tty_wakeup($p195);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} send_more_port_data($p8, $p160);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb61:
    assume $i189 == 1;
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p160, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $i191 := $load.i16($M.0, $p190);
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i191);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p5, $p64, .str.175, .str.169, $i139, $i192);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb31:
    assume $i66 == 1;
    goto corral_source_split_2103;

  corral_source_split_2103:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p10);
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p10, $mul.ref(1, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.0, $p69);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i32($i70);
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $i72 := $shl.i32($i71, 8);
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $i73 := $or.i32($i68, $i72);
    call {:si_unique_call 325} {:cexpr "bytes_avail"} boogie_si_record_i32($i73);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i73, 0);
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb33:
    assume $i74 == 1;
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1216, 1));
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 326} spin_lock($p75);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1290, 1));
    goto corral_source_split_2116;

  corral_source_split_2116:
    assume {:verifier.code 0} true;
    $i77 := $load.i16($M.0, $p76);
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i78 := $zext.i16.i32($i77);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i79 := $trunc.i32.i16($i73);
    goto corral_source_split_2119;

  corral_source_split_2119:
    assume {:verifier.code 0} true;
    $i80 := $zext.i16.i32($i79);
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $i81 := $add.i32($i78, $i80);
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i82 := $trunc.i32.i16($i81);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1290, 1));
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p83, $i82);
    goto corral_source_split_2124;

  corral_source_split_2124:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p84, .str);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2127;

  corral_source_split_2127:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p85, .str.169);
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p86, .str.2);
    goto corral_source_split_2130;

  corral_source_split_2130:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p87, .str.172);
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $i90 := $load.i24($M.5, $p89);
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $i91 := $and.i24($i90, $sub.i24(0, 262144));
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $i92 := $or.i24($i91, 600);
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p89, $i92);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p93, 0);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.6, $p94);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i64($i95);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i96, 1);
    goto corral_source_split_2144;

  corral_source_split_2144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 328} {:cexpr "tmp___1"} boogie_si_record_i64($i98);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i99} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1290, 1));
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $i108 := $load.i16($M.0, $p107);
    goto corral_source_split_2159;

  corral_source_split_2159:
    assume {:verifier.code 0} true;
    $i109 := $sext.i16.i32($i108);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    $i110 := $sgt.i32($i109, 0);
    goto corral_source_split_2161;

  corral_source_split_2161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1216, 1));
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} spin_unlock($p136);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb38:
    assume $i110 == 1;
    goto corral_source_split_2163;

  corral_source_split_2163:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    $i112 := $load.i8($M.0, $p111);
    goto corral_source_split_2165;

  corral_source_split_2165:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i8.i1($i112);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i113 == 1);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2169;

  corral_source_split_2169:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p114, .str);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2171;

  corral_source_split_2171:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p115, .str.169);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2173;

  corral_source_split_2173:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p116, .str.2);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2175;

  corral_source_split_2175:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p117, .str.173);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2177;

  corral_source_split_2177:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    $i120 := $load.i24($M.5, $p119);
    goto corral_source_split_2179;

  corral_source_split_2179:
    assume {:verifier.code 0} true;
    $i121 := $and.i24($i120, $sub.i24(0, 262144));
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    $i122 := $or.i24($i121, 604);
    goto corral_source_split_2181;

  corral_source_split_2181:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p119, $i122);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2183;

  corral_source_split_2183:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p123, 0);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2185;

  corral_source_split_2185:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.6, $p124);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i64($i125);
    goto corral_source_split_2187;

  corral_source_split_2187:
    assume {:verifier.code 0} true;
    $i127 := $and.i64($i126, 1);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 330} $i128 := ldv__builtin_expect($i127, 0);
    call {:si_unique_call 331} {:cexpr "tmp___2"} boogie_si_record_i64($i128);
    goto corral_source_split_2189;

  corral_source_split_2189:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_2195;

  corral_source_split_2195:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p130, 1);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_2197;

  corral_source_split_2197:
    assume {:verifier.code 0} true;
    $p132 := $load.ref($M.0, $p131);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    call {:si_unique_call 333} $i133 := ldv_usb_submit_urb_23($p132, 32);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 334} {:cexpr "result"} boogie_si_record_i32($i133);
    goto corral_source_split_2199;

  corral_source_split_2199:
    assume {:verifier.code 0} true;
    $i134 := $ne.i32($i133, 0);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb46:
    assume $i134 == 1;
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} dev_err.ref.ref.ref.i32($p64, .str.174, .str.169, $i133);
    goto corral_source_split_2203;

  corral_source_split_2203:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, 0);
    goto corral_source_split_2205;

  corral_source_split_2205:
    assume {:verifier.code 0} true;
    goto $bb48;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb43:
    assume $i129 == 1;
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p64, .str.173, .str.169);
    goto corral_source_split_2193;

  corral_source_split_2193:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb40;

  $bb35:
    assume $i99 == 1;
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1290, 1));
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $i101 := $load.i16($M.0, $p100);
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $i102 := $sext.i16.i32($i101);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p8, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i8.i1($i104);
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $i106 := $zext.i1.i32($i105);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 329} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p3, $p64, .str.172, .str.169, $i73, $i102, $i106);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb4:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i14, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb9, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb8;

  $bb9:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2031;

  corral_source_split_2031:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p22, .str);
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p23, .str.169);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2035;

  corral_source_split_2035:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p24, .str.2);
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p25, .str.170);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $i28 := $load.i24($M.5, $p27);
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $i29 := $and.i24($i28, $sub.i24(0, 262144));
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i30 := $or.i24($i29, 578);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p27, $i30);
    goto corral_source_split_2044;

  corral_source_split_2044:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p31, 0);
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.6, $p32);
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i64($i33);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i35 := $and.i64($i34, 1);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 316} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 317} {:cexpr "tmp"} boogie_si_record_i64($i36);
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb20:
    assume $i37 == 1;
    goto corral_source_split_2061;

  corral_source_split_2061:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2063;

  corral_source_split_2063:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    call {:si_unique_call 318} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p40, .str.170, .str.169, $i14);
    goto corral_source_split_2065;

  corral_source_split_2065:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb2:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i14, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i14, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb8;

  $bb14:
    assume $i20 == 1;
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb12:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i14, $sub.i32(0, 108));
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb8;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb17;

  $bb66_dummy:
    assume false;
    return;

  $bb55_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;
}



const edge_bulk_in_callback: ref;

axiom edge_bulk_in_callback == $sub.ref(0, 316211);

procedure edge_bulk_in_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, $M.15, assertsPassed, $M.16;



implementation edge_bulk_in_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i24;
  var $i43: i24;
  var $i44: i24;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $p65: ref;
  var $p66: ref;
  var $i67: i16;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i16;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i24;
  var $i80: i24;
  var $i81: i24;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $i89: i32;
  var $p90: ref;
  var $i91: i16;
  var $i92: i32;
  var $p93: ref;
  var $i94: i32;
  var $i95: i16;
  var $i96: i32;
  var $i97: i16;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i24;
  var $i109: i24;
  var $i110: i24;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 350} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 351} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2317;

  corral_source_split_2317:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    call {:si_unique_call 353} {:cexpr "status"} boogie_si_record_i32($i11);
    goto corral_source_split_2319;

  corral_source_split_2319:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_2392;

  corral_source_split_2392:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2394;

  corral_source_split_2394:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2396;

  corral_source_split_2396:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $i63 := $trunc.i32.i16($i62);
    call {:si_unique_call 360} {:cexpr "raw_data_length"} boogie_si_record_i16($i63);
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} usb_serial_debug_data($p60, .str.195, $i64, $p9);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1216, 1));
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 362} spin_lock($p65);
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1290, 1));
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $i67 := $load.i16($M.0, $p66);
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i67);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i63);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $i70 := $sub.i32($i68, $i69);
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $i71 := $trunc.i32.i16($i70);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1290, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p72, $i71);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, .str);
    goto corral_source_split_2413;

  corral_source_split_2413:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p74, .str.195);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p75, .str.2);
    goto corral_source_split_2417;

  corral_source_split_2417:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p76, .str.198);
    goto corral_source_split_2419;

  corral_source_split_2419:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i79 := $load.i24($M.5, $p78);
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    $i80 := $and.i24($i79, $sub.i24(0, 262144));
    goto corral_source_split_2423;

  corral_source_split_2423:
    assume {:verifier.code 0} true;
    $i81 := $or.i24($i80, 698);
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p78, $i81);
    goto corral_source_split_2425;

  corral_source_split_2425:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p82, 0);
    goto corral_source_split_2427;

  corral_source_split_2427:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.6, $p83);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_2430;

  corral_source_split_2430:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 364} {:cexpr "tmp___1"} boogie_si_record_i64($i87);
    goto corral_source_split_2432;

  corral_source_split_2432:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_2443;

  corral_source_split_2443:
    assume {:verifier.code 0} true;
    $i95 := $trunc.i32.i16($i94);
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i96 := $zext.i16.i32($i95);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i16($i96);
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    call {:si_unique_call 366} process_rcvd_data($p7, $p9, $i97);
    goto SeqInstr_97, SeqInstr_98;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1290, 1));
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.0, $p98);
    goto corral_source_split_2449;

  corral_source_split_2449:
    assume {:verifier.code 0} true;
    $i100 := $sext.i16.i32($i99);
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $i101 := $sgt.i32($i100, 0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i101 == 1);
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 0);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1216, 1));
    goto corral_source_split_2493;

  corral_source_split_2493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} spin_unlock($p124);
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb17:
    assume $i101 == 1;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p102, .str);
    goto corral_source_split_2455;

  corral_source_split_2455:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p103, .str.195);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p104, .str.2);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p105, .str.173);
    goto corral_source_split_2461;

  corral_source_split_2461:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    $i108 := $load.i24($M.5, $p107);
    goto corral_source_split_2464;

  corral_source_split_2464:
    assume {:verifier.code 0} true;
    $i109 := $and.i24($i108, $sub.i24(0, 262144));
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i110 := $or.i24($i109, 704);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p107, $i110);
    goto corral_source_split_2467;

  corral_source_split_2467:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p111, 0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.6, $p112);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i64($i113);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    $i115 := $and.i64($i114, 1);
    goto corral_source_split_2473;

  corral_source_split_2473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i116 := ldv__builtin_expect($i115, 0);
    call {:si_unique_call 368} {:cexpr "tmp___2"} boogie_si_record_i64($i116);
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $p119 := $load.ref($M.0, $p118);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i120 := ldv_usb_submit_urb_25($p119, 32);
    goto SeqInstr_100, SeqInstr_101;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 371} {:cexpr "retval"} boogie_si_record_i32($i120);
    goto corral_source_split_2485;

  corral_source_split_2485:
    assume {:verifier.code 0} true;
    $i121 := $ne.i32($i120, 0);
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb22:
    assume $i121 == 1;
    goto corral_source_split_2488;

  corral_source_split_2488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 372} dev_err.ref.ref.ref.i32($p60, .str.199, .str.195, $i120);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p122, 0);
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i117 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    call {:si_unique_call 369} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p60, .str.173, .str.195);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    goto $bb21;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i88 == 1;
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i89 := $zext.i16.i32($i63);
    goto corral_source_split_2436;

  corral_source_split_2436:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1290, 1));
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 0} true;
    $i91 := $load.i16($M.0, $p90);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $i92 := $sext.i16.i32($i91);
    goto corral_source_split_2439;

  corral_source_split_2439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p60, .str.198, .str.195, $i89, $i92);
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb8:
    assume $i35 == 1;
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2360;

  corral_source_split_2360:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p36, .str);
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p37, .str.195);
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p38, .str.2);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p39, .str.197);
    goto corral_source_split_2367;

  corral_source_split_2367:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $i42 := $load.i24($M.5, $p41);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i43 := $and.i24($i42, $sub.i24(0, 262144));
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i44 := $or.i24($i43, 682);
    goto corral_source_split_2372;

  corral_source_split_2372:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p41, $i44);
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2374;

  corral_source_split_2374:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p45, 0);
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.6, $p46);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i64($i47);
    goto corral_source_split_2378;

  corral_source_split_2378:
    assume {:verifier.code 0} true;
    $i49 := $and.i64($i48, 1);
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 357} $i50 := ldv__builtin_expect($i49, 0);
    call {:si_unique_call 358} {:cexpr "tmp___0"} boogie_si_record_i64($i50);
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $i51 := $ne.i64($i50, 0);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    assume {:branchcond $i51} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p55, 0);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb10:
    assume $i51 == 1;
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 359} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p54, .str.197, .str.195);
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p13, .str);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.195);
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.2);
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2329;

  corral_source_split_2329:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str.196);
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_2332;

  corral_source_split_2332:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.5, $p18);
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 676);
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p18, $i21);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p22, 0);
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.6, $p23);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_2342;

  corral_source_split_2342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 354} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 355} {:cexpr "tmp"} boogie_si_record_i64($i27);
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    assume {:branchcond $i28} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p7, $mul.ref(0, 1312)), $mul.ref(1208, 1));
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p32, 0);
    goto corral_source_split_2353;

  corral_source_split_2353:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i28 == 1;
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 356} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p31, .str.196, .str.195, $i11);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const edge_bulk_out_data_callback: ref;

axiom edge_bulk_out_data_callback == $sub.ref(0, 317243);

procedure edge_bulk_out_data_callback($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.14, assertsPassed;



implementation edge_bulk_out_data_callback($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i24;
  var $i15: i24;
  var $i16: i24;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    call {:si_unique_call 375} {:cexpr "status"} boogie_si_record_i32($i6);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i8.i1($i28);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i29} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(40, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p33, 0);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} $p38 := usb_get_serial_data($p37);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_2551;

  corral_source_split_2551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} send_more_port_data($p39, $p4);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i29 == 1;
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p4, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2539;

  corral_source_split_2539:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    call {:si_unique_call 379} tty_port_tty_wakeup($p32);
    goto corral_source_split_2542;

  corral_source_split_2542:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p8, .str);
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p9, .str.57);
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p10, .str.2);
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p11, .str.18);
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $i14 := $load.i24($M.5, $p13);
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    $i15 := $and.i24($i14, $sub.i24(0, 262144));
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i16 := $or.i24($i15, 733);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p13, $i16);
    goto corral_source_split_2518;

  corral_source_split_2518:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p17, 0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.6, $p18);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i64($i19);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i21 := $and.i64($i20, 1);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 376} $i22 := ldv__builtin_expect($i21, 0);
    call {:si_unique_call 377} {:cexpr "tmp"} boogie_si_record_i64($i22);
    goto corral_source_split_2525;

  corral_source_split_2525:
    assume {:verifier.code 0} true;
    $i23 := $ne.i64($i22, 0);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i23 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_2530;

  corral_source_split_2530:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p1, $p26, .str.18, .str.57, $i6);
    goto corral_source_split_2532;

  corral_source_split_2532:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 318275);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 383} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_2554;

  corral_source_split_2554:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 319307);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: i32, p.6: i32, p.7: i32, p.8: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i64($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i64)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32)
{

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: ref, p.5: i32)
{

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: i32, p.6: ref)
{

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_2576;

  corral_source_split_2576:
    assume {:verifier.code 0} true;
    return;
}



const tty_port_tty_wakeup: ref;

axiom tty_port_tty_wakeup == $sub.ref(0, 320339);

procedure tty_port_tty_wakeup($p0: ref);
  free requires assertsPassed;



implementation tty_port_tty_wakeup($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    return;
}



const usb_get_serial_data: ref;

axiom usb_get_serial_data == $sub.ref(0, 321371);

procedure usb_get_serial_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const send_more_port_data: ref;

axiom send_more_port_data == $sub.ref(0, 322403);

procedure send_more_port_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, assertsPassed;



implementation send_more_port_data($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i1;
  var $p12: ref;
  var $i13: i8;
  var $i14: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i24;
  var $i25: i24;
  var $i26: i24;
  var $p27: ref;
  var $p28: ref;
  var $i29: i8;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $p36: ref;
  var $i37: i8;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i56: i24;
  var $i57: i24;
  var $i58: i24;
  var $p59: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $i65: i1;
  var $p66: ref;
  var $i67: i32;
  var $p68: ref;
  var $i69: i16;
  var $i70: i32;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i64;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i8;
  var $i94: i32;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $i98: i8;
  var $p99: ref;
  var $p100: ref;
  var $i101: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i1;
  var $i106: i32;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i32;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $p115: ref;
  var $i116: i32;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i32;
  var $i127: i1;
  var $p128: ref;
  var $i129: i32;
  var $i130: i1;
  var $i131: i32;
  var $i132: i64;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $p141: ref;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $p148: ref;
  var $i149: i1;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i8;
  var $i160: i32;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i32;
  var $p168: ref;
  var $p169: ref;
  var $i170: i16;
  var $i171: i32;
  var $i172: i16;
  var $i173: i32;
  var $i174: i32;
  var $i175: i16;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p180: ref;
  var $i181: i32;
  var $i182: i32;
  var $p183: ref;
  var $p184: ref;
  var $p186: ref;
  var $i187: i32;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i8;
  var $i194: i32;
  var $i195: i1;
  var $i196: i1;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i16;
  var $i201: i32;
  var $i202: i16;
  var $i203: i32;
  var $i204: i32;
  var $i205: i16;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p210: ref;
  var $i211: i32;
  var $i212: i32;
  var $p213: ref;
  var $p214: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i24;
  var $i224: i24;
  var $i225: i24;
  var $p226: ref;
  var $p227: ref;
  var $i228: i8;
  var $i229: i64;
  var $i230: i64;
  var $i231: i64;
  var $i232: i1;
  var $p233: ref;
  var $i234: i16;
  var $i235: i32;
  var $p236: ref;
  var $i237: i32;
  var $p238: ref;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var cmdloc_dummy_var_14: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} ldv_spin_lock();
    goto corral_source_split_2589;

  corral_source_split_2589:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(40, 1));
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2591;

  corral_source_split_2591:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i8.i1($i10);
    goto corral_source_split_2592;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i11 == 1);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i8.i1($i13);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2594;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p18, .str);
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p19, .str.58);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2598;

  corral_source_split_2598:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p20, .str.2);
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p21, .str.59);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $p23 := $bitcast.ref.ref($p22);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i24 := $load.i24($M.5, $p23);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    $i25 := $and.i24($i24, $sub.i24(0, 262144));
    goto corral_source_split_2605;

  corral_source_split_2605:
    assume {:verifier.code 0} true;
    $i26 := $or.i24($i25, 1214);
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p23, $i26);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p27, 0);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.6, $p28);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i64($i29);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    $i31 := $and.i64($i30, 1);
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 388} $i32 := ldv__builtin_expect($i31, 0);
    call {:si_unique_call 389} {:cexpr "tmp"} boogie_si_record_i64($i32);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i33 := $ne.i64($i32, 0);
    goto corral_source_split_2615;

  corral_source_split_2615:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_2634;

  corral_source_split_2634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} spin_unlock_irqrestore($p238, $u0);
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i33 == 1;
    $p34 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i35 := $load.i32($M.0, $p34);
    goto corral_source_split_2627;

  corral_source_split_2627:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(40, 1));
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    goto corral_source_split_2629;

  corral_source_split_2629:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i8.i1($i37);
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $i39 := $zext.i1.i32($i38);
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p2, $p8, .str.59, .str.58, $i35, $i39);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb4:
    assume $i14 == 1;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 0);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i43 := $udiv.i32($i42, 4);
    call {:si_unique_call 392} {:cexpr "_max1"} boogie_si_record_i32($i43);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2641;

  corral_source_split_2641:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_2643;

  corral_source_split_2643:
    assume {:verifier.code 0} true;
    $i47 := $sgt.i32($i43, 64);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i47} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i47 == 1);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    $i48 := 64;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i46, $i48);
    goto corral_source_split_2651;

  corral_source_split_2651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(40, 1));
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 1);
    goto corral_source_split_2685;

  corral_source_split_2685:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(32, 1));
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} kfree($p75);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p73, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $0.ref);
    $p77 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2692;

  corral_source_split_2692:
    assume {:verifier.code 0} true;
    $i78 := $load.i32($M.0, $p77);
    call {:si_unique_call 397} {:cexpr "count"} boogie_si_record_i32($i78);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i79 := $add.i32($i78, 2);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i79);
    goto corral_source_split_2695;

  corral_source_split_2695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $p81 := kmalloc($i80, 32);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i82 := $p2i.ref.i64($p81);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i83 := $eq.i64($i82, 0);
    goto corral_source_split_2698;

  corral_source_split_2698:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $p86 := $load.ref($M.0, $p85);
    goto corral_source_split_2705;

  corral_source_split_2705:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p86, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_2707;

  corral_source_split_2707:
    assume {:verifier.code 0} true;
    $i89 := $sext.i8.i32($i88);
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i16($i78);
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i92 := $ashr.i32($i91, 5);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $i93 := $trunc.i32.i8($i92);
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $i94 := $sext.i8.i32($i93);
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 120);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i96 := $or.i32($i89, $i95);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i97);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i32.i8($i78);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p81, $mul.ref(1, 1));
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, $i98);
    $p100 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    $p102 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $i104 := $sub.i32($i101, $i103);
    call {:si_unique_call 399} {:cexpr "bytesleft"} boogie_si_record_i32($i104);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, $i78);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i105 == 1);
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i106 := $i78;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_2730;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($p81, $mul.ref(2, 1));
    $p108 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_2731;

  corral_source_split_2731:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    $p110 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2732;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    $i111 := $load.i32($M.0, $p110);
    goto corral_source_split_2733;

  corral_source_split_2733:
    assume {:verifier.code 0} true;
    $i112 := $zext.i32.i64($i111);
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p109, $mul.ref($i112, 1));
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $i114 := $sext.i32.i64($i106);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_9 := $M.0;
    cmdloc_dummy_var_10 := $M.0;
    call {:si_unique_call 400} cmdloc_dummy_var_11 := $memcpy.i8(cmdloc_dummy_var_9, cmdloc_dummy_var_10, $p107, $p113, $i114, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_11;
    $p115 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $i116 := $load.i32($M.0, $p115);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $i117 := $add.i32($i116, $i106);
    $p118 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, $i117);
    $p119 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $i121 := $sub.i32($i120, $i106);
    $p122 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p122, $i121);
    $p123 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i124 := $load.i32($M.0, $p123);
    $p125 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(12, 1));
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $i126 := $load.i32($M.0, $p125);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $i127 := $eq.i32($i124, $i126);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i129 := $sub.i32($i78, $i106);
    call {:si_unique_call 401} {:cexpr "secondhalf"} boogie_si_record_i32($i129);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $i130 := $ne.i32($i129, 0);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i130 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i78, 0);
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $p155 := $load.ref($M.0, $p154);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p155, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1288, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $i159 := $load.i8($M.0, $p158);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i159);
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 404} $i161 := __create_pipe($p157, $i160);
    call {:si_unique_call 405} {:cexpr "tmp___2"} boogie_si_record_i32($i161);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p163 := $load.ref($M.0, $p162);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p163, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i166 := $or.i32($i161, $sub.i32(0, 1073741824));
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $i167 := $add.i32($i78, 2);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p1);
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 406} usb_fill_bulk_urb($p73, $p165, $i166, $p81, $i167, edge_bulk_out_data_callback, $p168);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i170 := $load.i16($M.0, $p169);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i171 := $zext.i16.i32($i170);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i172 := $trunc.i32.i16($i78);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i172);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i174 := $sub.i32($i171, $i173);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    $i175 := $trunc.i32.i16($i174);
    goto corral_source_split_2802;

  corral_source_split_2802:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p176, $i175);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p178 := $load.ref($M.0, $p177);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p178, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $i181 := $load.i32($M.0, $p180);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    $i182 := $add.i32($i181, $i78);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2810;

  corral_source_split_2810:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($add.ref($p184, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p186, $i182);
    goto corral_source_split_2813;

  corral_source_split_2813:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} $i187 := ldv_usb_submit_urb_28($p73, 32);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    call {:si_unique_call 408} {:cexpr "status"} boogie_si_record_i32($i187);
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $i188 := $ne.i32($i187, 0);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p217, .str);
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p218, .str.58);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p219, .str.2);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2859;

  corral_source_split_2859:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p220, .str.62);
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2861;

  corral_source_split_2861:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p221);
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i223 := $load.i24($M.5, $p222);
    goto corral_source_split_2863;

  corral_source_split_2863:
    assume {:verifier.code 0} true;
    $i224 := $and.i24($i223, $sub.i24(0, 262144));
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i225 := $or.i24($i224, 1296);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p222, $i225);
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p226, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2869;

  corral_source_split_2869:
    assume {:verifier.code 0} true;
    $i228 := $load.i8($M.6, $p227);
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    $i229 := $zext.i8.i64($i228);
    goto corral_source_split_2871;

  corral_source_split_2871:
    assume {:verifier.code 0} true;
    $i230 := $and.i64($i229, 1);
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} $i231 := ldv__builtin_expect($i230, 0);
    call {:si_unique_call 411} {:cexpr "tmp___3"} boogie_si_record_i64($i231);
    goto corral_source_split_2873;

  corral_source_split_2873:
    assume {:verifier.code 0} true;
    $i232 := $ne.i64($i231, 0);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    assume {:branchcond $i232} true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i232 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb46:
    assume $i232 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2877;

  corral_source_split_2877:
    assume {:verifier.code 0} true;
    $i234 := $load.i16($M.0, $p233);
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i235 := $zext.i16.i32($i234);
    $p236 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i237 := $load.i32($M.0, $p236);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 412} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p4, $p8, .str.62, .str.58, $i78, $i235, $i237);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb37:
    assume $i188 == 1;
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p190);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($p191, $mul.ref(696, 1));
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i193 := $load.i8($M.0, $p192);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i194 := $zext.i8.i32($i193);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 0);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    assume {:branchcond $i195} true;
    goto $bb39, $bb41;

  $bb41:
    assume !($i195 == 1);
    goto corral_source_split_2829;

  corral_source_split_2829:
    assume {:verifier.code 0} true;
    $i196 := $trunc.i8.i1(1);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    assume !($i196 == 1);
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p190, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} dev_err.ref.ref.ref.i32($p197, .str.61, .str.58, $i187);
    goto corral_source_split_2827;

  corral_source_split_2827:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(40, 1));
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p198, 0);
    goto corral_source_split_2833;

  corral_source_split_2833:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.0, $p199);
    goto corral_source_split_2835;

  corral_source_split_2835:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i16($i78);
    goto corral_source_split_2837;

  corral_source_split_2837:
    assume {:verifier.code 0} true;
    $i203 := $zext.i16.i32($i202);
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    $i204 := $add.i32($i201, $i203);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i16($i204);
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p206, $i205);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_2844;

  corral_source_split_2844:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($add.ref($p208, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i211 := $load.i32($M.0, $p210);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i212 := $sub.i32($i211, $i78);
    goto corral_source_split_2847;

  corral_source_split_2847:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p213);
    goto corral_source_split_2849;

  corral_source_split_2849:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($add.ref($p214, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(16, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, $i212);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i196 == 1;
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i195 == 1;
    goto $bb40;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i149 == 1;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $p151 := $load.ref($M.0, $p150);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p151, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($p81, $mul.ref(2, 1));
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} usb_serial_debug_data($p152, .str.58, $i78, $p153);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i130 == 1;
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $i131 := $add.i32($i106, 2);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $i132 := $sext.i32.i64($i131);
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($p81, $mul.ref($i132, 1));
    $p134 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(16, 1));
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    $p136 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i137 := $load.i32($M.0, $p136);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i138 := $zext.i32.i64($i137);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($p135, $mul.ref($i138, 1));
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i129);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_12 := $M.0;
    cmdloc_dummy_var_13 := $M.0;
    call {:si_unique_call 402} cmdloc_dummy_var_14 := $memcpy.i8(cmdloc_dummy_var_12, cmdloc_dummy_var_13, $p133, $p139, $i140, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_14;
    $p141 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2763;

  corral_source_split_2763:
    assume {:verifier.code 0} true;
    $i142 := $load.i32($M.0, $p141);
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $i143 := $add.i32($i142, $i129);
    $p144 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p144, $i143);
    $p145 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    $i147 := $sub.i32($i146, $i129);
    $p148 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2768;

  corral_source_split_2768:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p148, $i147);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i127 == 1;
    $p128 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(4, 1));
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p128, 0);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i105 == 1;
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    $i106 := $i104;
    goto $bb27;

  $bb22:
    assume $i83 == 1;
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(40, 1));
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p84, 0);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    goto $bb11;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i49 == 1;
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p50, .str);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p51, .str.58);
    goto corral_source_split_2657;

  corral_source_split_2657:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p52, .str.2);
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2660;

  corral_source_split_2660:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p53, .str.60);
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $i56 := $load.i24($M.5, $p55);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i57 := $and.i24($i56, $sub.i24(0, 262144));
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i58 := $or.i24($i57, 1227);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p55, $i58);
    goto corral_source_split_2667;

  corral_source_split_2667:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p59, 0);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2670;

  corral_source_split_2670:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.6, $p60);
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i64($i61);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    $i63 := $and.i64($i62, 1);
    goto corral_source_split_2673;

  corral_source_split_2673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} $i64 := ldv__builtin_expect($i63, 0);
    call {:si_unique_call 394} {:cexpr "tmp___0"} boogie_si_record_i64($i64);
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $i65 := $ne.i64($i64, 0);
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb18:
    assume $i65 == 1;
    $p66 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    $i69 := $load.i16($M.0, $p68);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $i70 := $zext.i16.i32($i69);
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p8, .str.60, .str.58, $i67, $i70);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb13:
    assume $i47 == 1;
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i48 := $i43;
    goto $bb15;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb2;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb2;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 323435);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $M.14 := 1;
    call {:si_unique_call 413} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 324467);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} free_($p0);
    goto corral_source_split_2887;

  corral_source_split_2887:
    assume {:verifier.code 0} true;
    return;
}



const kmalloc: ref;

axiom kmalloc == $sub.ref(0, 325499);

procedure kmalloc($i0: i64, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kmalloc($i0: i64, $i1: i32) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} {:cexpr "kmalloc:arg:size"} boogie_si_record_i64($i0);
    call {:si_unique_call 416} {:cexpr "kmalloc:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 417} ldv_check_alloc_flags($i1);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} $p2 := ldv_undef_ptr();
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;

  SeqInstr_112:
    assume !assertsPassed;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 326531);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const usb_serial_debug_data: ref;

axiom usb_serial_debug_data == $sub.ref(0, 327563);

procedure usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation usb_serial_debug_data($p0: ref, $p1: ref, $i2: i32, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i24;
  var $i12: i24;
  var $i13: i24;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 420} {:cexpr "usb_serial_debug_data:arg:size"} boogie_si_record_i32($i2);
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2894;

  corral_source_split_2894:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p5, .str);
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p6, .str.13);
    goto corral_source_split_2897;

  corral_source_split_2897:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p7, .str.14);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p8, .str.15);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_2903;

  corral_source_split_2903:
    assume {:verifier.code 0} true;
    $i11 := $load.i24($M.5, $p10);
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $i12 := $and.i24($i11, $sub.i24(0, 262144));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $i13 := $or.i24($i12, 368);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p10, $i13);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p14, 0);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2910;

  corral_source_split_2910:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.6, $p15);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i64($i16);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    $i18 := $and.i64($i17, 1);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} $i19 := ldv__builtin_expect($i18, 0);
    call {:si_unique_call 422} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_2914;

  corral_source_split_2914:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_2917;

  corral_source_split_2917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.ref($p4, $p0, .str.15, $p1, $i2, $i2, $p3);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const __create_pipe: ref;

axiom __create_pipe == $sub.ref(0, 328595);

procedure __create_pipe($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __create_pipe($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 424} {:cexpr "__create_pipe:arg:endpoint"} boogie_si_record_i32($i1);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(0, 1));
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    $i4 := $shl.i32($i3, 8);
    goto corral_source_split_2923;

  corral_source_split_2923:
    assume {:verifier.code 0} true;
    $i5 := $shl.i32($i1, 15);
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i4, $i5);
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_fill_bulk_urb: ref;

axiom usb_fill_bulk_urb == $sub.ref(0, 329627);

procedure usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_bulk_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref)
{
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} {:cexpr "usb_fill_bulk_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 426} {:cexpr "usb_fill_bulk_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    goto corral_source_split_2927;

  corral_source_split_2927:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p8, $i2);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p3);
    goto corral_source_split_2933;

  corral_source_split_2933:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p10, $i4);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_2936;

  corral_source_split_2936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $p5);
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p6);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_28: ref;

axiom ldv_usb_submit_urb_28 == $sub.ref(0, 330659);

procedure ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_28($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} {:cexpr "ldv_usb_submit_urb_28:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_2941;

  corral_source_split_2941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} ldv_check_alloc_flags($i1);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} $p2 := ldv_undef_ptr();
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_2945;

  corral_source_split_2945:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_115:
    assume !assertsPassed;
    return;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 331691);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_2951;

  corral_source_split_2951:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 332723);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.14;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} ldv_spin_unlock();
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 333755);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.14;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2959;

  corral_source_split_2959:
    assume {:verifier.code 0} true;
    $M.14 := 0;
    call {:si_unique_call 433} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 334787);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2963;

  corral_source_split_2963:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 335819);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 436} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 336851);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 437} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_2969;

  corral_source_split_2969:
    assume {:verifier.code 0} true;
    $i1 := $M.14;
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_2977;

  corral_source_split_2977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} ldv_error();
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_118:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 337883);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 1} true;
    call {:si_unique_call 439} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 440} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_2981;

  corral_source_split_2981:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 338915);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 441} __VERIFIER_error();
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_121:
    assume !assertsPassed;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 339947);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 442} $free($p0);
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 340979);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.14;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2987;

  corral_source_split_2987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} ldv_spin_lock();
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    call {:si_unique_call 444} ldv_spin_lock_5($p0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    return;
}



const process_rcvd_data: ref;

axiom process_rcvd_data == $sub.ref(0, 342011);

procedure process_rcvd_data($p0: ref, $p1: ref, $i2: i16);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.15, $M.16, assertsPassed;



implementation process_rcvd_data($p0: ref, $p1: ref, $i2: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i24;
  var $i30: i24;
  var $i31: i24;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i1;
  var $i45: i1;
  var $i46: i1;
  var $i49: i1;
  var $i50: i8;
  var $p51: ref;
  var $p52: ref;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i47: i16;
  var $p48: ref;
  var $i61: i8;
  var $p62: ref;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i16;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $i73: i24;
  var $i74: i24;
  var $i75: i24;
  var $p76: ref;
  var $p77: ref;
  var $i78: i8;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $i82: i1;
  var $p83: ref;
  var $i84: i8;
  var $i85: i32;
  var $p86: ref;
  var $i87: i8;
  var $i88: i32;
  var $p89: ref;
  var $i90: i8;
  var $i91: i32;
  var $i92: i1;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i8;
  var $p98: ref;
  var $p99: ref;
  var $i100: i8;
  var $i101: i32;
  var $i102: i32;
  var $i103: i32;
  var $i104: i8;
  var $p105: ref;
  var $p106: ref;
  var $i107: i8;
  var $i108: i32;
  var $i109: i1;
  var $p110: ref;
  var $i111: i8;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $i115: i8;
  var $i116: i32;
  var $i117: i8;
  var $p118: ref;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $i122: i32;
  var $i123: i8;
  var $p124: ref;
  var $p125: ref;
  var $i126: i8;
  var $i127: i16;
  var $i128: i32;
  var $i129: i32;
  var $i130: i32;
  var $p131: ref;
  var $i132: i8;
  var $i133: i16;
  var $i134: i32;
  var $i135: i32;
  var $i136: i16;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i24;
  var $i145: i24;
  var $i146: i24;
  var $p147: ref;
  var $p148: ref;
  var $i149: i8;
  var $i150: i64;
  var $i151: i64;
  var $i152: i64;
  var $i153: i1;
  var $p154: ref;
  var $i155: i8;
  var $i156: i32;
  var $p157: ref;
  var $i158: i16;
  var $i159: i32;
  var $i160: i32;
  var $i161: i1;
  var $p162: ref;
  var $i43: i16;
  var $p44: ref;
  var $i163: i32;
  var $p164: ref;
  var $i165: i16;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $p170: ref;
  var $i171: i16;
  var $p172: ref;
  var $i169: i16;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i16;
  var $p177: ref;
  var $i178: i16;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i16;
  var $p183: ref;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $i187: i8;
  var $i188: i32;
  var $i189: i64;
  var $p190: ref;
  var $p191: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $i198: i8;
  var $i199: i1;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i24;
  var $i207: i24;
  var $i208: i24;
  var $p209: ref;
  var $p210: ref;
  var $i211: i8;
  var $i212: i64;
  var $i213: i64;
  var $i214: i64;
  var $i215: i1;
  var $i216: i32;
  var $p217: ref;
  var $i218: i8;
  var $i219: i32;
  var $p220: ref;
  var $p221: ref;
  var $i222: i32;
  var $p223: ref;
  var $p224: ref;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $p230: ref;
  var $p231: ref;
  var $p233: ref;
  var $i234: i64;
  var $p235: ref;
  var $p236: ref;
  var $i237: i8;
  var $p238: ref;
  var $p239: ref;
  var $i240: i32;
  var $i241: i32;
  var $i242: i16;
  var $p243: ref;
  var $i244: i8;
  var $i245: i32;
  var $i246: i8;
  var $p247: ref;
  var $i248: i8;
  var $i249: i32;
  var $i250: i8;
  var $p251: ref;
  var $i59: i16;
  var $p60: ref;
  var $i252: i32;
  var $i253: i1;
  var $p17: ref;
  var $i18: i16;
  var $i19: i16;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 445} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 447} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 448} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 449} {:cexpr "process_rcvd_data:arg:bufferLength"} boogie_si_record_i16($i2);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_2992;

  corral_source_split_2992:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_2996;

  corral_source_split_2996:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i2);
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 450} {:cexpr "lastBufferLength"} boogie_si_record_i16($i14);
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i2);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p1, $i2, $i14;
    goto $bb4;

  $bb4:
    call $i20, $i21, $i22, $p39, $i40, $i41, $i42, $i45, $i46, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $p58, $i47, $p48, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i97, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $i107, $i108, $i109, $p110, $i111, $p112, $p113, $p114, $i115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $i123, $p124, $p125, $i126, $i127, $i128, $i129, $i130, $p131, $i132, $i133, $i134, $i135, $i136, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $p157, $i158, $i159, $i160, $i161, $p162, $i43, $p44, $i163, $p164, $i165, $i166, $i167, $p168, $p170, $i171, $p172, $i169, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $i180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $i189, $p190, $p191, $p193, $p194, $p195, $p196, $p197, $i198, $i199, $p200, $p201, $p202, $p203, $p204, $p205, $i206, $i207, $i208, $p209, $p210, $i211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $p220, $p221, $i222, $p223, $p224, $p226, $i227, $i228, $i229, $p230, $p231, $p233, $i234, $p235, $p236, $i237, $p238, $p239, $i240, $i241, $i242, $p243, $i244, $i245, $i246, $p247, $i248, $i249, $i250, $p251, $i59, $p60, $i252, $i253, $p17, $i18, $i19 := process_rcvd_data_loop_$bb4($p0, $p4, $p5, $p6, $p11, $i20, $i21, $i22, $p39, $i40, $i41, $i42, $i45, $i46, $i49, $i50, $p51, $p52, $i53, $i54, $i55, $i56, $i57, $p58, $i47, $p48, $i61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $p69, $p70, $p71, $p72, $i73, $i74, $i75, $p76, $p77, $i78, $i79, $i80, $i81, $i82, $p83, $i84, $i85, $p86, $i87, $i88, $p89, $i90, $i91, $i92, $p93, $i94, $i95, $i96, $i97, $p98, $p99, $i100, $i101, $i102, $i103, $i104, $p105, $p106, $i107, $i108, $i109, $p110, $i111, $p112, $p113, $p114, $i115, $i116, $i117, $p118, $p119, $i120, $i121, $i122, $i123, $p124, $p125, $i126, $i127, $i128, $i129, $i130, $p131, $i132, $i133, $i134, $i135, $i136, $p137, $p138, $p139, $p140, $p141, $p142, $p143, $i144, $i145, $i146, $p147, $p148, $i149, $i150, $i151, $i152, $i153, $p154, $i155, $i156, $p157, $i158, $i159, $i160, $i161, $p162, $i43, $p44, $i163, $p164, $i165, $i166, $i167, $p168, $p170, $i171, $p172, $i169, $i173, $i174, $i175, $i176, $p177, $i178, $i179, $i180, $i181, $i182, $p183, $i184, $i185, $p186, $i187, $i188, $i189, $p190, $p191, $p193, $p194, $p195, $p196, $p197, $i198, $i199, $p200, $p201, $p202, $p203, $p204, $p205, $i206, $i207, $i208, $p209, $p210, $i211, $i212, $i213, $i214, $i215, $i216, $p217, $i218, $i219, $p220, $p221, $i222, $p223, $p224, $p226, $i227, $i228, $i229, $p230, $p231, $p233, $i234, $p235, $p236, $i237, $p238, $p239, $i240, $i241, $i242, $p243, $i244, $i245, $i246, $p247, $i248, $i249, $i250, $p251, $i59, $p60, $i252, $i253, $p17, $i18, $i19);
    goto $bb4_last;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i21 := $zext.i16.i32($i18);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i20, $i21);
    goto corral_source_split_3009;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.0, $p39);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i41 := $slt.i32($i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i42 := $slt.i32($i40, 3);
    assume {:verifier.code 0} true;
    $i43, $p44 := $i18, $p17;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    $i45 := $eq.i32($i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i18, $p17;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $i252 := $zext.i16.i32($i59);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $i253 := $ne.i32($i252, 0);
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i253 == 1);
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb59:
    assume $i253 == 1;
    assume {:verifier.code 0} true;
    $p17, $i18, $i19 := $p60, $i59, $i18;
    goto $bb59_dummy;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.0, $p17);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1298, 1));
    goto corral_source_split_3049;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p238, $i237);
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p239 := $add.ref($p17, $mul.ref(1, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $i240 := $zext.i16.i32($i18);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $i241 := $sub.i32($i240, 1);
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    $i242 := $trunc.i32.i16($i241);
    call {:si_unique_call 454} {:cexpr "bufferLength"} boogie_si_record_i16($i242);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1301, 1));
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i244 := $load.i8($M.0, $p243);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i245 := $zext.i8.i32($i244);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    $i246 := $trunc.i32.i8($i245);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $p247 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1298, 1));
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    $i248 := $load.i8($M.0, $p247);
    goto corral_source_split_3060;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    $i249 := $zext.i8.i32($i248);
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i250 := $trunc.i32.i8($i249);
    goto corral_source_split_3062;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} process_rcvd_status($p0, $i246, $i250);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3064;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p251, 0);
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i242, $p239;
    goto $bb29;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    $i163 := $zext.i16.i32($i43);
    goto corral_source_split_3041;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i165 := $load.i16($M.0, $p164);
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i166 := $sext.i16.i32($i165);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    $i167 := $slt.i32($i163, $i166);
    goto corral_source_split_3045;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i167 == 1);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3234;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    $i171 := $load.i16($M.0, $p170);
    call {:si_unique_call 465} {:cexpr "rxLen"} boogie_si_record_i16($i171);
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p172, 0);
    assume {:verifier.code 0} true;
    $i169 := $i171;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_3238;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    $i173 := $zext.i16.i32($i43);
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i174 := $zext.i16.i32($i169);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i175 := $sub.i32($i173, $i174);
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i176 := $trunc.i32.i16($i175);
    call {:si_unique_call 466} {:cexpr "bufferLength"} boogie_si_record_i16($i176);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    $i178 := $load.i16($M.0, $p177);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i179 := $zext.i16.i32($i178);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i169);
    goto corral_source_split_3246;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    $i181 := $sub.i32($i179, $i180);
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i16($i181);
    goto corral_source_split_3248;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p183, $i182);
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i169);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i185 == 1);
    assume {:verifier.code 0} true;
    $p236 := $p44;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i176, $p236;
    goto $bb29;

  $bb49:
    assume $i185 == 1;
    goto corral_source_split_3254;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i187 := $load.i8($M.0, $p186);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i188 := $zext.i8.i32($i187);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    $i189 := $sext.i32.i64($i188);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    $p191 := $load.ref($M.0, $p190);
    goto corral_source_split_3260;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p191, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i189, 8));
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $p194 := $load.ref($M.0, $p193);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} $p195 := usb_get_serial_port_data($p194);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $p196 := $bitcast.ref.ref($p195);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p196, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_3265;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    $i198 := $load.i8($M.0, $p197);
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i8.i1($i198);
    goto corral_source_split_3267;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i234 := $zext.i16.i64($i169);
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($p44, $mul.ref($i234, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p236 := $p235;
    goto $bb57;

  $bb51:
    assume $i199 == 1;
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3270;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p200, .str);
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p201, .str.200);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p202, .str.2);
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p203, .str.204);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3278;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $i206 := $load.i24($M.5, $p205);
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i207 := $and.i24($i206, $sub.i24(0, 262144));
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i208 := $or.i24($i207, 1769);
    goto corral_source_split_3282;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p205, $i208);
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p209, 0);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.6, $p210);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i64($i211);
    goto corral_source_split_3288;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    $i213 := $and.i64($i212, 1);
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} $i214 := ldv__builtin_expect($i213, 0);
    call {:si_unique_call 469} {:cexpr "tmp___3"} boogie_si_record_i64($i214);
    goto corral_source_split_3290;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    $i215 := $ne.i64($i214, 0);
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p196, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    $p221 := $load.ref($M.0, $p220);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $i222 := $zext.i16.i32($i169);
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} edge_tty_recv($p221, $p44, $i222);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p196, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $p224 := $load.ref($M.0, $p223);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($add.ref($p224, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    $i228 := $zext.i16.i32($i169);
    goto corral_source_split_3308;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    $i229 := $add.i32($i227, $i228);
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p196, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p231 := $load.ref($M.0, $p230);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($add.ref($p231, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p233, $i229);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb53:
    assume $i215 == 1;
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $i216 := $zext.i16.i32($i169);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3295;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    $i218 := $load.i8($M.0, $p217);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $i219 := $zext.i8.i32($i218);
    goto corral_source_split_3297;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p6, $p11, .str.204, .str.200, $i216, $i219);
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb46:
    assume $i167 == 1;
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p168, 2);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    $i169 := $i43;
    goto $bb48;

  $bb14:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i40, 1);
    assume {:verifier.code 0} true;
    $i47, $p48 := $i18, $p17;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p48);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i61);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p48, $mul.ref(1, 1));
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i47);
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32($i64, 1);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $i66 := $trunc.i32.i16($i65);
    call {:si_unique_call 456} {:cexpr "bufferLength"} boogie_si_record_i16($i66);
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p67, .str);
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p68, .str.200);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p69, .str.2);
    goto corral_source_split_3080;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p70, .str.202);
    goto corral_source_split_3082;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3083;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p71);
    goto corral_source_split_3084;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    $i73 := $load.i24($M.5, $p72);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $i74 := $and.i24($i73, $sub.i24(0, 262144));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $i75 := $or.i24($i74, 1690);
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p72, $i75);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p76, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3091;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.6, $p77);
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i64($i78);
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $i80 := $and.i64($i79, 1);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} $i81 := ldv__builtin_expect($i80, 0);
    call {:si_unique_call 458} {:cexpr "tmp___0"} boogie_si_record_i64($i81);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i82 := $ne.i64($i81, 0);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.0, $p89);
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i91 := $sext.i8.i32($i90);
    goto corral_source_split_3128;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    $i92 := $slt.i32($i91, 0);
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i92 == 1);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i121, 7);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    $i123 := $trunc.i32.i8($i122);
    goto corral_source_split_3157;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p124, $i123);
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i16($i126);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    $i128 := $zext.i16.i32($i127);
    goto corral_source_split_3163;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    $i129 := $and.i32($i128, 120);
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i130 := $shl.i32($i129, 5);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.0, $p131);
    goto corral_source_split_3167;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i16($i132);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i134 := $zext.i16.i32($i133);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    $i135 := $or.i32($i130, $i134);
    goto corral_source_split_3170;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i16($i135);
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3172;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p137, $i136);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p138, .str);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p139, .str.200);
    goto corral_source_split_3177;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p140, .str.2);
    goto corral_source_split_3179;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p141, .str.203);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $p143 := $bitcast.ref.ref($p142);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    $i144 := $load.i24($M.5, $p143);
    goto corral_source_split_3184;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    $i145 := $and.i24($i144, $sub.i24(0, 262144));
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $i146 := $or.i24($i145, 1732);
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p143, $i146);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p147, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3190;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    $i149 := $load.i8($M.6, $p148);
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i150 := $zext.i8.i64($i149);
    goto corral_source_split_3192;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    $i151 := $and.i64($i150, 1);
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} $i152 := ldv__builtin_expect($i151, 0);
    call {:si_unique_call 462} {:cexpr "tmp___1"} boogie_si_record_i64($i152);
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i153 := $ne.i64($i152, 0);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i160 := $zext.i16.i32($i66);
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i161 := $eq.i32($i160, 0);
    goto corral_source_split_3223;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $i43, $p44 := $i66, $p63;
    goto $bb17;

  $bb42:
    assume $i161 == 1;
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p162, 2);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i66, $p63;
    goto $bb29;

  $bb39:
    assume $i153 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3214;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    $i155 := $load.i8($M.0, $p154);
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i156 := $zext.i8.i32($i155);
    goto corral_source_split_3216;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i158 := $load.i16($M.0, $p157);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    $i159 := $sext.i16.i32($i158);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p5, $p11, .str.203, .str.200, $i156, $i159);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb34:
    assume $i92 == 1;
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_3134;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    $i96 := $and.i32($i95, 7);
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i32.i8($i96);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3137;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p98, $i97);
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3139;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    $i100 := $load.i8($M.0, $p99);
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    $i101 := $zext.i8.i32($i100);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 120);
    goto corral_source_split_3142;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    $i103 := $ashr.i32($i102, 3);
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i32.i8($i103);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1300, 1));
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, $i104);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1300, 1));
    goto corral_source_split_3147;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    $i107 := $load.i8($M.0, $p106);
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i108 := $zext.i8.i32($i107);
    goto corral_source_split_3149;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    $i109 := $ugt.i32($i108, 7);
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3205;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    $i115 := $load.i8($M.0, $p114);
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    $i116 := $zext.i8.i32($i115);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $i117 := $trunc.i32.i8($i116);
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} process_rcvd_status($p0, $i117, 0);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p118, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i66, $p63;
    goto $bb29;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i109 == 1;
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_3199;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1301, 1));
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p112, $i111);
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p113, 3);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i66, $p63;
    goto $bb29;

  $bb31:
    assume $i82 == 1;
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.0, $p83);
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i32($i84);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.0, $p86);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i32($i87);
    goto corral_source_split_3123;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p4, $p11, .str.202, .str.200, $i85, $i88);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb22:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i49 := $eq.i32($i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i49 == 1);
    goto $bb21;

  $bb25:
    assume $i49 == 1;
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p17);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, $i50);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($p17, $mul.ref(1, 1));
    goto corral_source_split_3102;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    $i53 := $zext.i16.i32($i18);
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $i54 := $sub.i32($i53, 1);
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i54);
    call {:si_unique_call 459} {:cexpr "bufferLength"} boogie_si_record_i16($i55);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $i56 := $zext.i16.i32($i55);
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $i57 := $eq.i32($i56, 0);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i47, $p48 := $i55, $p52;
    goto $bb24;

  $bb27:
    assume $i57 == 1;
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3110;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p58, 1);
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $i59, $p60 := $i55, $p52;
    goto $bb29;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p23, .str);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p24, .str.200);
    goto corral_source_split_3015;

  corral_source_split_3015:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p25, .str.2);
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p26, .str.201);
    goto corral_source_split_3019;

  corral_source_split_3019:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p27);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    $i29 := $load.i24($M.5, $p28);
    goto corral_source_split_3022;

  corral_source_split_3022:
    assume {:verifier.code 0} true;
    $i30 := $and.i24($i29, $sub.i24(0, 262144));
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $i31 := $or.i24($i30, 1668);
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p28, $i31);
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p32, 0);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3028;

  corral_source_split_3028:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.6, $p33);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i64($i34);
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i36 := $and.i64($i35, 1);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    call {:si_unique_call 451} $i37 := ldv__builtin_expect($i36, 0);
    call {:si_unique_call 452} {:cexpr "tmp"} boogie_si_record_i64($i37);
    goto corral_source_split_3032;

  corral_source_split_3032:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_3035;

  corral_source_split_3035:
    assume {:verifier.code 0} true;
    call {:si_unique_call 453} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p11, .str.201, .str.200);
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb59_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3005;
}



const ldv_usb_submit_urb_25: ref;

axiom ldv_usb_submit_urb_25 == $sub.ref(0, 343043);

procedure ldv_usb_submit_urb_25($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_25($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} {:cexpr "ldv_usb_submit_urb_25:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} ldv_check_alloc_flags($i1);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    goto corral_source_split_3323;

  corral_source_split_3323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} $p2 := ldv_undef_ptr();
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_130:
    assume !assertsPassed;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 344075);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.14;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} ldv_spin_unlock();
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} ldv_spin_unlock_9($p0);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 345107);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3332;

  corral_source_split_3332:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} _raw_spin_unlock($p2);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 346139);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    return;
}



const process_rcvd_status: ref;

axiom process_rcvd_status == $sub.ref(0, 347171);

procedure process_rcvd_status($p0: ref, $i1: i8, $i2: i8);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.15, $CurrAddr, $M.16, assertsPassed;



implementation process_rcvd_status($p0: ref, $i1: i8, $i2: i8)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i8;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i1;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i24;
  var $i69: i24;
  var $i70: i24;
  var $p71: ref;
  var $p72: ref;
  var $i73: i8;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $i81: i32;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i32;
  var $i86: i16;
  var $i87: i32;
  var $i88: i32;
  var $i89: i16;
  var $p90: ref;
  var $p91: ref;
  var $i92: i16;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i24;
  var $i101: i24;
  var $i102: i24;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $i109: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $p114: ref;
  var $i115: i16;
  var $i116: i32;
  var $i117: i32;
  var $i118: i8;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i64;
  var $i124: i1;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i1;
  var $p132: ref;
  var $i133: i8;
  var $i134: i1;
  var $i135: i32;
  var $i136: i1;
  var $i137: i1;
  var $i138: i1;
  var $i139: i1;
  var $i140: i1;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $i147: i24;
  var $i148: i24;
  var $i149: i24;
  var $p150: ref;
  var $p151: ref;
  var $i152: i8;
  var $i153: i64;
  var $i154: i64;
  var $i155: i64;
  var $i156: i1;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $i160: i32;
  var $i161: i32;
  var $i162: i8;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i24;
  var $i170: i24;
  var $i171: i24;
  var $p172: ref;
  var $p173: ref;
  var $i174: i8;
  var $i175: i64;
  var $i176: i64;
  var $i177: i64;
  var $i178: i1;
  var $p179: ref;
  var $i180: i8;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $i184: i32;
  var $i185: i8;
  var $i186: i32;
  var $i187: i8;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i24;
  var $i195: i24;
  var $i196: i24;
  var $p197: ref;
  var $p198: ref;
  var $i199: i8;
  var $i200: i64;
  var $i201: i64;
  var $i202: i64;
  var $i203: i1;
  var $p204: ref;
  var $i205: i8;
  var $i206: i32;
  var $i207: i32;
  var $i208: i32;
  var $i209: i8;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $i216: i24;
  var $i217: i24;
  var $i218: i24;
  var $p219: ref;
  var $p220: ref;
  var $i221: i8;
  var $i222: i64;
  var $i223: i64;
  var $i224: i64;
  var $i225: i1;
  var $i226: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 485} {:cexpr "process_rcvd_status:arg:byte2"} boogie_si_record_i8($i1);
    call {:si_unique_call 486} {:cexpr "process_rcvd_status:arg:byte3"} boogie_si_record_i8($i2);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1300, 1));
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $i11 := $load.i8($M.0, $p10);
    call {:si_unique_call 487} {:cexpr "code"} boogie_si_record_i8($i11);
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    goto corral_source_split_3344;

  corral_source_split_3344:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref($i15, 8));
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} $p21 := usb_get_serial_port_data($p20);
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i23, 0);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p20, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i11);
    goto corral_source_split_3367;

  corral_source_split_3367:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 9);
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i11);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 10);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.0, $p129);
    goto corral_source_split_3511;

  corral_source_split_3511:
    assume {:verifier.code 0} true;
    $i131 := $trunc.i8.i1($i130);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i131 == 1);
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb32:
    assume $i131 == 1;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(135, 1));
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $i133 := $load.i8($M.0, $p132);
    goto corral_source_split_3516;

  corral_source_split_3516:
    assume {:verifier.code 0} true;
    $i134 := $trunc.i8.i1($i133);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i135 := $zext.i8.i32($i11);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i135, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    $i137 := $slt.i32($i135, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i135, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i138 == 1);
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p210, .str);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p211, .str.206);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p212, .str.2);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p213, .str.213);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p214 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $i216 := $load.i24($M.5, $p215);
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    $i217 := $and.i24($i216, $sub.i24(0, 262144));
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    $i218 := $or.i24($i217, 1911);
    goto corral_source_split_3639;

  corral_source_split_3639:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p215, $i218);
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p219, 0);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i221 := $load.i8($M.6, $p220);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    $i222 := $zext.i8.i64($i221);
    goto corral_source_split_3645;

  corral_source_split_3645:
    assume {:verifier.code 0} true;
    $i223 := $and.i64($i222, 1);
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    call {:si_unique_call 517} $i224 := ldv__builtin_expect($i223, 0);
    call {:si_unique_call 518} {:cexpr "tmp___6"} boogie_si_record_i64($i224);
    goto corral_source_split_3647;

  corral_source_split_3647:
    assume {:verifier.code 0} true;
    $i225 := $ne.i64($i224, 0);
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    assume {:branchcond $i225} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i225 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb61:
    assume $i225 == 1;
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i226 := $zext.i8.i32($i11);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p9, $p33, .str.213, .str.206, $i226);
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb43:
    assume $i138 == 1;
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p163, .str);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p164, .str.206);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p165, .str.2);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3526;

  corral_source_split_3526:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p166, .str.211);
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_3529;

  corral_source_split_3529:
    assume {:verifier.code 0} true;
    $i169 := $load.i24($M.5, $p168);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i170 := $and.i24($i169, $sub.i24(0, 262144));
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i171 := $or.i24($i170, 1888);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p168, $i171);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p172, 0);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    $i174 := $load.i8($M.6, $p173);
    goto corral_source_split_3537;

  corral_source_split_3537:
    assume {:verifier.code 0} true;
    $i175 := $zext.i8.i64($i174);
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i176 := $and.i64($i175, 1);
    goto corral_source_split_3539;

  corral_source_split_3539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 505} $i177 := ldv__builtin_expect($i176, 0);
    call {:si_unique_call 506} {:cexpr "tmp___4"} boogie_si_record_i64($i177);
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $i178 := $ne.i64($i177, 0);
    goto corral_source_split_3541;

  corral_source_split_3541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i178} true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i1);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    $i185 := $trunc.i32.i8($i184);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    $i186 := $zext.i8.i32($i2);
    goto corral_source_split_3612;

  corral_source_split_3612:
    assume {:verifier.code 0} true;
    $i187 := $trunc.i32.i8($i186);
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 514} handle_new_lsr($p22, 1, $i185, $i187);
    goto corral_source_split_3614;

  corral_source_split_3614:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb54:
    assume $i178 == 1;
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    $i180 := $load.i8($M.0, $p179);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    $i181 := $zext.i8.i32($i180);
    goto corral_source_split_3605;

  corral_source_split_3605:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i1);
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i2);
    goto corral_source_split_3607;

  corral_source_split_3607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 513} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p7, $p33, .str.211, .str.206, $i181, $i182, $i183);
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb41:
    assume $i137 == 1;
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i135, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i139 == 1);
    goto $bb45;

  $bb46:
    assume $i139 == 1;
    goto corral_source_split_3543;

  corral_source_split_3543:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p188, .str);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p189, .str.206);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p190, .str.2);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3550;

  corral_source_split_3550:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p191, .str.212);
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p193 := $bitcast.ref.ref($p192);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i194 := $load.i24($M.5, $p193);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i195 := $and.i24($i194, $sub.i24(0, 262144));
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    $i196 := $or.i24($i195, 1901);
    goto corral_source_split_3556;

  corral_source_split_3556:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p193, $i196);
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p197, 0);
    goto corral_source_split_3559;

  corral_source_split_3559:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    $i199 := $load.i8($M.6, $p198);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i200 := $zext.i8.i64($i199);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $i201 := $and.i64($i200, 1);
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    call {:si_unique_call 507} $i202 := ldv__builtin_expect($i201, 0);
    call {:si_unique_call 508} {:cexpr "tmp___5"} boogie_si_record_i64($i202);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $i203 := $ne.i64($i202, 0);
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i203 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $i208 := $zext.i8.i32($i1);
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i209 := $trunc.i32.i8($i208);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} handle_new_msr($p22, $i209);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb57:
    assume $i203 == 1;
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.0, $p204);
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i207 := $zext.i8.i32($i1);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    call {:si_unique_call 515} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p8, $p33, .str.212, .str.206, $i206, $i207);
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb39:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i140 := $eq.i32($i135, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i140} true;
    goto $bb48, $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    assume !($i140 == 1);
    goto $bb45;

  $bb48:
    assume $i140 == 1;
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p141, .str);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p142, .str.206);
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p143, .str.2);
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p144, .str.210);
    goto corral_source_split_3575;

  corral_source_split_3575:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p146 := $bitcast.ref.ref($p145);
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    $i147 := $load.i24($M.5, $p146);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i148 := $and.i24($i147, $sub.i24(0, 262144));
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $i149 := $or.i24($i148, 1882);
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p146, $i149);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p150, 0);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i152 := $load.i8($M.6, $p151);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i153 := $zext.i8.i64($i152);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i154 := $and.i64($i153, 1);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} $i155 := ldv__builtin_expect($i154, 0);
    call {:si_unique_call 510} {:cexpr "tmp___3"} boogie_si_record_i64($i155);
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $i156 := $ne.i64($i155, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i156} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i156 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i1);
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    $i162 := $trunc.i32.i8($i161);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} handle_new_lsr($p22, 0, $i162, 0);
    goto corral_source_split_3600;

  corral_source_split_3600:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i156 == 1;
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3592;

  corral_source_split_3592:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.0, $p157);
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    $i160 := $zext.i8.i32($i1);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 511} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p6, $p33, .str.210, .str.206, $i159, $i160);
    goto corral_source_split_3596;

  corral_source_split_3596:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i134 == 1;
    goto $bb34;

  $bb23:
    assume $i83 == 1;
    goto corral_source_split_3442;

  corral_source_split_3442:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i2);
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i85 := $add.i32($i84, 1);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i16($i85);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $i87 := $zext.i16.i32($i86);
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $i88 := $mul.i32($i87, 64);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $i89 := $trunc.i32.i16($i88);
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p90, $i89);
    goto corral_source_split_3450;

  corral_source_split_3450:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p93, $i92);
    goto corral_source_split_3454;

  corral_source_split_3454:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p94, .str);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p95, .str.206);
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p96, .str.2);
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p97, .str.209);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3463;

  corral_source_split_3463:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $i100 := $load.i24($M.5, $p99);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $i101 := $and.i24($i100, $sub.i24(0, 262144));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $i102 := $or.i24($i101, 1852);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p99, $i102);
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p103, 0);
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.6, $p104);
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i64($i105);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i107 := $and.i64($i106, 1);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 497} $i108 := ldv__builtin_expect($i107, 0);
    call {:si_unique_call 498} {:cexpr "tmp___2"} boogie_si_record_i64($i108);
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i1);
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i8($i117);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    call {:si_unique_call 500} handle_new_msr($p22, $i118);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p119);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p120, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_3493;

  corral_source_split_3493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} $p122 := tty_port_tty_get($p121);
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    $i123 := $p2i.ref.i64($p122);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $i124 := $ne.i64($i123, 0);
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p126 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p126, 0);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 1);
    goto corral_source_split_3506;

  corral_source_split_3506:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} __wake_up($p128, 3, 1, $0.ref);
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb28:
    assume $i124 == 1;
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p122, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_3499;

  corral_source_split_3499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} change_port_settings($p122, $p22, $p125);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    call {:si_unique_call 503} tty_kref_put($p122);
    goto corral_source_split_3501;

  corral_source_split_3501:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i109 == 1;
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i113 := $zext.i8.i32($i1);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    $i115 := $load.i16($M.0, $p114);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i116 := $zext.i16.i32($i115);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p5, $p33, .str.209, .str.206, $i112, $i113, $i116);
    goto corral_source_split_3486;

  corral_source_split_3486:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb5:
    assume $i35 == 1;
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i37 := $slt.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i36, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i38 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p62, .str);
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p63, .str.206);
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p64, .str.2);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p65, .str.208);
    goto corral_source_split_3380;

  corral_source_split_3380:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p67 := $bitcast.ref.ref($p66);
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $i68 := $load.i24($M.5, $p67);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    $i69 := $and.i24($i68, $sub.i24(0, 262144));
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i70 := $or.i24($i69, 1842);
    goto corral_source_split_3385;

  corral_source_split_3385:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p67, $i70);
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p71, 0);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i73 := $load.i8($M.6, $p72);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i74 := $zext.i8.i64($i73);
    goto corral_source_split_3391;

  corral_source_split_3391:
    assume {:verifier.code 0} true;
    $i75 := $and.i64($i74, 1);
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 491} {:cexpr "tmp___1"} boogie_si_record_i64($i76);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_3394;

  corral_source_split_3394:
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb18:
    assume $i77 == 1;
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    $i81 := $zext.i8.i32($i2);
    goto corral_source_split_3436;

  corral_source_split_3436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 496} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p4, $p33, .str.208, .str.206, $i80, $i81);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb8:
    assume $i37 == 1;
    assume {:verifier.code 0} true;
    $i39 := $eq.i32($i36, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i39 == 1);
    goto $bb12;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3397;

  corral_source_split_3397:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, .str);
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p41, .str.206);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p42, .str.2);
    goto corral_source_split_3402;

  corral_source_split_3402:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p43, .str.207);
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.5, $p45);
    goto corral_source_split_3407;

  corral_source_split_3407:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 1826);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p45, $i48);
    goto corral_source_split_3410;

  corral_source_split_3410:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p49, 0);
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.6, $p50);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_3416;

  corral_source_split_3416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 493} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p60, 0);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p22, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} __wake_up($p61, 3, 1, $0.ref);
    goto corral_source_split_3430;

  corral_source_split_3430:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb15:
    assume $i55 == 1;
    goto corral_source_split_3420;

  corral_source_split_3420:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_3422;

  corral_source_split_3422:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $i59 := $zext.i8.i32($i2);
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p33, .str.207, .str.206, $i58, $i59);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb1:
    assume $i24 == 1;
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3357;

  corral_source_split_3357:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3359;

  corral_source_split_3359:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} dev_err.ref.ref.ref.i32($p29, .str.205, .str.206, $i32);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const usb_get_serial_port_data: ref;

axiom usb_get_serial_port_data == $sub.ref(0, 348203);

procedure usb_get_serial_port_data($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_get_serial_port_data($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3655;

  corral_source_split_3655:
    assume {:verifier.code 0} true;
    call {:si_unique_call 520} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const edge_tty_recv: ref;

axiom edge_tty_recv == $sub.ref(0, 349235);

procedure edge_tty_recv($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation edge_tty_recv($p0: ref, $p1: ref, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 521} {:cexpr "edge_tty_recv:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_3658;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_3659;

  corral_source_split_3659:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i2);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} $i5 := tty_insert_flip_string($p3, $p1, $i4);
    call {:si_unique_call 523} {:cexpr "cnt"} boogie_si_record_i32($i5);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, $i2);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} tty_flip_buffer_push($p9);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3665;

  corral_source_split_3665:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32($i2, $i5);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 524} dev_err.ref.ref.ref.i32($p7, .str.214, .str.215, $i8);
    goto corral_source_split_3667;

  corral_source_split_3667:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_insert_flip_string: ref;

axiom tty_insert_flip_string == $sub.ref(0, 350267);

procedure tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} {:cexpr "tty_insert_flip_string:arg:size"} boogie_si_record_i64($i2);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} $i3 := tty_insert_flip_string_fixed_flag($p0, $p1, 0, $i2);
    call {:si_unique_call 528} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const tty_flip_buffer_push: ref;

axiom tty_flip_buffer_push == $sub.ref(0, 351299);

procedure tty_flip_buffer_push($p0: ref);
  free requires assertsPassed;



implementation tty_flip_buffer_push($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3675;

  corral_source_split_3675:
    assume {:verifier.code 0} true;
    return;
}



const tty_insert_flip_string_fixed_flag: ref;

axiom tty_insert_flip_string_fixed_flag == $sub.ref(0, 352331);

procedure tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation tty_insert_flip_string_fixed_flag($p0: ref, $p1: ref, $i2: i8, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 529} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 530} {:cexpr "tty_insert_flip_string_fixed_flag:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 1} true;
    call {:si_unique_call 531} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 532} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 353363);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __wake_up: ref;

axiom __wake_up == $sub.ref(0, 354395);

procedure __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref);
  free requires assertsPassed;



implementation __wake_up($p0: ref, $i1: i32, $i2: i32, $p3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 533} {:cexpr "__wake_up:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 534} {:cexpr "__wake_up:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    return;
}



const handle_new_msr: ref;

axiom handle_new_msr == $sub.ref(0, 355427);

procedure handle_new_msr($p0: ref, $i1: i8);
  free requires assertsPassed;
  modifies $M.0;



implementation handle_new_msr($p0: ref, $i1: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $p21: ref;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i32;
  var $i42: i8;
  var $p43: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 535} {:cexpr "handle_new_msr:arg:newMsr"} boogie_si_record_i8($i1);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i2 := $zext.i8.i32($i1);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 15);
    goto corral_source_split_3688;

  corral_source_split_3688:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i1);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 240);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i8($i41);
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(122, 1));
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p43, $i42);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    goto corral_source_split_3694;

  corral_source_split_3694:
    assume {:verifier.code 0} true;
    $i8 := $zext.i8.i32($i1);
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i1);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 2);
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i1);
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i22, 8);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i1);
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 4);
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p37, $mul.ref(0, 3016)), $mul.ref(8, 1)), $mul.ref(592, 1));
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} __wake_up($p39, 1, 1, $0.ref);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i31 == 1;
    $p32 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(8, 1));
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, 1);
    $p35 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(8, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, $i34);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i24 == 1;
    $p25 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(12, 1));
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    $i27 := $add.i32($i26, 1);
    $p28 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(12, 1));
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $i27);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i17 == 1;
    $p18 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(4, 1));
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i19, 1);
    $p21 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(4, 1));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i20);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i10 == 1;
    $p11 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(0, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    $p14 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(0, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const tty_port_tty_get: ref;

axiom tty_port_tty_get == $sub.ref(0, 356459);

procedure tty_port_tty_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation tty_port_tty_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3742;

  corral_source_split_3742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $p1 := external_alloc();
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const change_port_settings: ref;

axiom change_port_settings == $sub.ref(0, 357491);

procedure change_port_settings($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, $M.16, assertsPassed;



implementation change_port_settings($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i1;
  var $p34: ref;
  var $i35: i8;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $i55: i32;
  var $i56: i32;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i24;
  var $i71: i24;
  var $i72: i24;
  var $p73: ref;
  var $p74: ref;
  var $i75: i8;
  var $i76: i64;
  var $i77: i64;
  var $i78: i64;
  var $i79: i1;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $i88: i24;
  var $i89: i24;
  var $i90: i24;
  var $p91: ref;
  var $p92: ref;
  var $i93: i8;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $i104: i24;
  var $i105: i24;
  var $i106: i24;
  var $p107: ref;
  var $p108: ref;
  var $i109: i8;
  var $i110: i64;
  var $i111: i64;
  var $i112: i64;
  var $i113: i1;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $i120: i24;
  var $i121: i24;
  var $i122: i24;
  var $p123: ref;
  var $p124: ref;
  var $i125: i8;
  var $i126: i64;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $i80: i8;
  var $i81: i8;
  var $i130: i32;
  var $i131: i1;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $i142: i24;
  var $i143: i24;
  var $i144: i24;
  var $p145: ref;
  var $p146: ref;
  var $i147: i8;
  var $i148: i64;
  var $i149: i64;
  var $i150: i64;
  var $i151: i1;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i24;
  var $i160: i24;
  var $i161: i24;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i64;
  var $i166: i64;
  var $i167: i64;
  var $i168: i1;
  var $i152: i8;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i24;
  var $i179: i24;
  var $i180: i24;
  var $p181: ref;
  var $p182: ref;
  var $i183: i8;
  var $i184: i64;
  var $i185: i64;
  var $i186: i64;
  var $i187: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i24;
  var $i196: i24;
  var $i197: i24;
  var $p198: ref;
  var $p199: ref;
  var $i200: i8;
  var $i201: i64;
  var $i202: i64;
  var $i203: i64;
  var $i204: i1;
  var $i188: i8;
  var $i169: i8;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $i212: i24;
  var $i213: i24;
  var $i214: i24;
  var $p215: ref;
  var $p216: ref;
  var $i217: i8;
  var $i218: i64;
  var $i219: i64;
  var $i220: i64;
  var $i221: i1;
  var $i205: i8;
  var $i222: i32;
  var $i223: i1;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i24;
  var $i231: i24;
  var $i232: i24;
  var $p233: ref;
  var $p234: ref;
  var $i235: i8;
  var $i236: i64;
  var $i237: i64;
  var $i238: i64;
  var $i239: i1;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i24;
  var $i248: i24;
  var $i249: i24;
  var $p250: ref;
  var $p251: ref;
  var $i252: i8;
  var $i253: i64;
  var $i254: i64;
  var $i255: i64;
  var $i256: i1;
  var $i240: i8;
  var $i257: i1;
  var $i258: i32;
  var $i259: i32;
  var $i260: i8;
  var $i261: i32;
  var $i262: i32;
  var $i263: i8;
  var $p264: ref;
  var $p265: ref;
  var $p266: ref;
  var $p267: ref;
  var $p268: ref;
  var $p269: ref;
  var $i270: i24;
  var $i271: i24;
  var $i272: i24;
  var $p273: ref;
  var $p274: ref;
  var $i275: i8;
  var $i276: i64;
  var $i277: i64;
  var $i278: i64;
  var $i279: i1;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $i288: i24;
  var $i289: i24;
  var $i290: i24;
  var $p291: ref;
  var $p292: ref;
  var $i293: i8;
  var $i294: i64;
  var $i295: i64;
  var $i296: i64;
  var $i297: i1;
  var $i280: i8;
  var $i281: i8;
  var $p299: ref;
  var $i300: i32;
  var $i301: i32;
  var $i302: i1;
  var $p304: ref;
  var $i305: i32;
  var $i306: i32;
  var $i307: i1;
  var $p310: ref;
  var $i311: i8;
  var $p314: ref;
  var $i315: i8;
  var $p316: ref;
  var $i317: i32;
  var $i318: i1;
  var $p319: ref;
  var $i320: i32;
  var $i321: i1;
  var $p322: ref;
  var $p323: ref;
  var $i324: i8;
  var $i325: i32;
  var $i326: i1;
  var $i327: i32;
  var $i328: i8;
  var $i330: i32;
  var $i331: i8;
  var $p334: ref;
  var $i335: i32;
  var $i336: i32;
  var $i337: i1;
  var $i338: i32;
  var $i339: i32;
  var $i340: i8;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i24;
  var $i348: i24;
  var $i349: i24;
  var $p350: ref;
  var $p351: ref;
  var $i352: i8;
  var $i353: i64;
  var $i354: i64;
  var $i355: i64;
  var $i356: i1;
  var $i357: i32;
  var $i358: i32;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $p364: ref;
  var $p365: ref;
  var $i366: i24;
  var $i367: i24;
  var $i368: i24;
  var $p369: ref;
  var $p370: ref;
  var $i371: i8;
  var $i372: i64;
  var $i373: i64;
  var $i374: i64;
  var $i375: i1;
  var $i359: i8;
  var $p377: ref;
  var $i378: i32;
  var $i379: i32;
  var $i380: i1;
  var $i381: i32;
  var $i382: i32;
  var $i383: i8;
  var $p384: ref;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $p388: ref;
  var $p389: ref;
  var $i390: i24;
  var $i391: i24;
  var $i392: i24;
  var $p393: ref;
  var $p394: ref;
  var $i395: i8;
  var $i396: i64;
  var $i397: i64;
  var $i398: i64;
  var $i399: i1;
  var $i400: i32;
  var $i401: i32;
  var $p403: ref;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $p407: ref;
  var $p408: ref;
  var $i409: i24;
  var $i410: i24;
  var $i411: i24;
  var $p412: ref;
  var $p413: ref;
  var $i414: i8;
  var $i415: i64;
  var $i416: i64;
  var $i417: i64;
  var $i418: i1;
  var $i402: i8;
  var $i419: i8;
  var $i420: i8;
  var $p421: ref;
  var $i422: i32;
  var $i423: i1;
  var $p424: ref;
  var $i425: i32;
  var $i426: i1;
  var $p427: ref;
  var $p428: ref;
  var $i429: i8;
  var $i430: i32;
  var $i431: i1;
  var $i432: i32;
  var $i433: i8;
  var $p435: ref;
  var $i436: i32;
  var $i437: i1;
  var $p438: ref;
  var $i439: i32;
  var $i440: i1;
  var $p441: ref;
  var $p442: ref;
  var $i443: i8;
  var $i444: i32;
  var $i445: i1;
  var $i446: i32;
  var $i447: i8;
  var $p449: ref;
  var $i450: i8;
  var $i451: i32;
  var $i452: i32;
  var $i453: i8;
  var $p454: ref;
  var $p455: ref;
  var $i456: i8;
  var $i457: i32;
  var $i458: i32;
  var $i459: i32;
  var $i460: i32;
  var $i461: i32;
  var $i462: i32;
  var $i463: i32;
  var $i464: i8;
  var $p465: ref;
  var $p466: ref;
  var $p467: ref;
  var $i468: i8;
  var $i469: i32;
  var $i470: i8;
  var $i471: i32;
  var $i472: i1;
  var $p473: ref;
  var $i474: i32;
  var $i475: i1;
  var $p476: ref;
  var $i477: i8;
  var $i478: i32;
  var $i479: i32;
  var $i480: i8;
  var $p481: ref;
  var $p482: ref;
  var $i483: i8;
  var $i484: i32;
  var $i485: i8;
  var $i486: i32;
  var $i487: i1;
  var $i488: i32;
  var $i489: i1;
  var $i490: i32;
  var $p491: ref;
  var $p492: ref;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $p496: ref;
  var $i497: i24;
  var $i498: i24;
  var $i499: i24;
  var $p500: ref;
  var $p501: ref;
  var $i502: i8;
  var $i503: i64;
  var $i504: i64;
  var $i505: i64;
  var $i506: i1;
  var $i507: i32;
  var $i508: i1;
  var $i509: i32;
  var vslice_dummy_var_46: i32;
  var vslice_dummy_var_47: i32;
  var vslice_dummy_var_48: i32;
  var vslice_dummy_var_49: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 538} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 541} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 542} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 545} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 547} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 548} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 550} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 552} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 553} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} $p19 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 555} $p20 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 556} $p21 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 557} $p29 := usb_get_serial_data($p28);
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_3757;

  corral_source_split_3757:
    assume {:verifier.code 0} true;
    $i33 := $trunc.i8.i1($i32);
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i33 == 1);
    goto corral_source_split_3760;

  corral_source_split_3760:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    goto corral_source_split_3762;

  corral_source_split_3762:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i8.i1($i35);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str);
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.32);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.2);
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.3);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.5, $p42);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 2397);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p42, $i45);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3780;

  corral_source_split_3780:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 0);
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3782;

  corral_source_split_3782:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_3783;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 558} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 559} {:cexpr "tmp___0"} boogie_si_record_i64($i51);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i52 == 1;
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 560} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p24, .str.3, .str.32);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(8, 1));
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $i55 := $load.i32($M.0, $p54);
    call {:si_unique_call 561} {:cexpr "cflag"} boogie_si_record_i32($i55);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $i56 := $and.i32($i55, 48);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i56, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $slt.i32($i56, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i56, 48);
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p114, .str);
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p115, .str.32);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p116, .str.2);
    goto corral_source_split_3800;

  corral_source_split_3800:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p117, .str.36);
    goto corral_source_split_3802;

  corral_source_split_3802:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    $p119 := $bitcast.ref.ref($p118);
    goto corral_source_split_3804;

  corral_source_split_3804:
    assume {:verifier.code 0} true;
    $i120 := $load.i24($M.5, $p119);
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $i121 := $and.i24($i120, $sub.i24(0, 262144));
    goto corral_source_split_3806;

  corral_source_split_3806:
    assume {:verifier.code 0} true;
    $i122 := $or.i24($i121, 2419);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p119, $i122);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p123, 0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3811;

  corral_source_split_3811:
    assume {:verifier.code 0} true;
    $i125 := $load.i8($M.6, $p124);
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    $i126 := $zext.i8.i64($i125);
    goto corral_source_split_3813;

  corral_source_split_3813:
    assume {:verifier.code 0} true;
    $i127 := $and.i64($i126, 1);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} $i128 := ldv__builtin_expect($i127, 0);
    call {:si_unique_call 563} {:cexpr "tmp___4"} boogie_si_record_i64($i128);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $i80, $i81 := $sub.i8(0, 1), 3;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3893;

  corral_source_split_3893:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i55, 256);
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $i131 := $ne.i32($i130, 0);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i131 == 1);
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p206, .str);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p207, .str.32);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    $p208 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p208, .str.2);
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p209, .str.41);
    goto corral_source_split_3918;

  corral_source_split_3918:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p211 := $bitcast.ref.ref($p210);
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $i212 := $load.i24($M.5, $p211);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    $i213 := $and.i24($i212, $sub.i24(0, 262144));
    goto corral_source_split_3922;

  corral_source_split_3922:
    assume {:verifier.code 0} true;
    $i214 := $or.i24($i213, 2441);
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p211, $i214);
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p215, 0);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $i217 := $load.i8($M.6, $p216);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i218 := $zext.i8.i64($i217);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i219 := $and.i64($i218, 1);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} $i220 := ldv__builtin_expect($i219, 0);
    call {:si_unique_call 575} {:cexpr "tmp___9"} boogie_si_record_i64($i220);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i221 := $ne.i64($i220, 0);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    assume {:branchcond $i221} true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i221 == 1);
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i205 := 0;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i222 := $and.i32($i55, 64);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i223 := $ne.i32($i222, 0);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    assume {:branchcond $i223} true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i223 == 1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p241, .str);
    goto corral_source_split_4087;

  corral_source_split_4087:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p242, .str.32);
    goto corral_source_split_4089;

  corral_source_split_4089:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p243, .str.2);
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p244, .str.43);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4094;

  corral_source_split_4094:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $i247 := $load.i24($M.5, $p246);
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $i248 := $and.i24($i247, $sub.i24(0, 262144));
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $i249 := $or.i24($i248, 2449);
    goto corral_source_split_4098;

  corral_source_split_4098:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p246, $i249);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p250, 0);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $i252 := $load.i8($M.6, $p251);
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i64($i252);
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i254 := $and.i64($i253, 1);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $i255 := ldv__builtin_expect($i254, 0);
    call {:si_unique_call 592} {:cexpr "tmp___11"} boogie_si_record_i64($i255);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $i256 := $ne.i64($i255, 0);
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $i240 := 0;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i257 := $slt.i32($i55, 0);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    assume {:branchcond $i257} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i257 == 1);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p282, .str);
    goto corral_source_split_4150;

  corral_source_split_4150:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p283, .str.32);
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p284, .str.2);
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p285, .str.45);
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p287 := $bitcast.ref.ref($p286);
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $i288 := $load.i24($M.5, $p287);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $i289 := $and.i24($i288, $sub.i24(0, 262144));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $i290 := $or.i24($i289, 2459);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p287, $i290);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p291, 0);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.6, $p292);
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i64($i293);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $i295 := $and.i64($i294, 1);
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 599} $i296 := ldv__builtin_expect($i295, 0);
    call {:si_unique_call 600} {:cexpr "tmp___13"} boogie_si_record_i64($i296);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i297 := $ne.i64($i296, 0);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    assume {:branchcond $i297} true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i297 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i280, $i281 := 0, 0;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i300 := $load.i32($M.0, $p299);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i301 := $and.i32($i300, 4096);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i302 := $ne.i32($i301, 0);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb89;

  $bb89:
    assume !($i302 == 1);
    goto corral_source_split_4192;

  corral_source_split_4192:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.0, $p304);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i306 := $and.i32($i305, 1024);
    goto corral_source_split_4195;

  corral_source_split_4195:
    assume {:verifier.code 0} true;
    $i307 := $ne.i32($i306, 0);
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    assume {:branchcond $i307} true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i307 == 1);
    assume {:verifier.code 0} true;
    $i419, $i420 := $i280, $i281;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $p421 := $add.ref($add.ref($p30, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i422 := $load.i32($M.0, $p421);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    $i423 := $eq.i32($i422, 0);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    assume {:branchcond $i423} true;
    goto $bb120, $bb122;

  $bb122:
    assume !($i423 == 1);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $p424 := $add.ref($add.ref($p30, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i425 := $load.i32($M.0, $p424);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    $i426 := $ne.i32($i425, 0);
    goto corral_source_split_4360;

  corral_source_split_4360:
    assume {:verifier.code 0} true;
    assume {:branchcond $i426} true;
    goto $bb123, $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume !($i426 == 1);
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p435 := $add.ref($add.ref($p30, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $i436 := $load.i32($M.0, $p435);
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i437 := $eq.i32($i436, 0);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb131;

  $bb131:
    assume !($i437 == 1);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $p438 := $add.ref($add.ref($p30, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i439 := $load.i32($M.0, $p438);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i440 := $ne.i32($i439, 0);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $p449 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(120, 1));
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    $i450 := $load.i8($M.0, $p449);
    goto corral_source_split_4390;

  corral_source_split_4390:
    assume {:verifier.code 0} true;
    $i451 := $zext.i8.i32($i450);
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $i452 := $and.i32($i451, 192);
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $i453 := $trunc.i32.i8($i452);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $p454 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(120, 1));
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p454, $i453);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    $p455 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(120, 1));
    goto corral_source_split_4396;

  corral_source_split_4396:
    assume {:verifier.code 0} true;
    $i456 := $load.i8($M.0, $p455);
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i457 := $zext.i8.i32($i456);
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $i458 := $zext.i8.i32($i81);
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $i459 := $zext.i8.i32($i205);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $i460 := $or.i32($i458, $i459);
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $i461 := $zext.i8.i32($i240);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    $i462 := $or.i32($i460, $i461);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    $i463 := $or.i32($i457, $i462);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    $i464 := $trunc.i32.i8($i463);
    goto corral_source_split_4405;

  corral_source_split_4405:
    assume {:verifier.code 0} true;
    $p465 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(120, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p465, $i464);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    $p466 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(126, 1));
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p466, $i80);
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $p467 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(120, 1));
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $i468 := $load.i8($M.0, $p467);
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $i469 := $zext.i8.i32($i468);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $i470 := $trunc.i32.i8($i469);
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 623} $i471 := send_cmd_write_uart_register($p1, 3, $i470);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 624} {:cexpr "status"} boogie_si_record_i32($i471);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $i472 := $ne.i32($i471, 0);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $p473 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_4419;

  corral_source_split_4419:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p473, 8);
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $i474 := $and.i32($i55, 4111);
    goto corral_source_split_4421;

  corral_source_split_4421:
    assume {:verifier.code 0} true;
    $i475 := $ne.i32($i474, 0);
    goto corral_source_split_4422;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    assume {:branchcond $i475} true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i475 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $p482 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $i483 := $load.i8($M.0, $p482);
    goto corral_source_split_4434;

  corral_source_split_4434:
    assume {:verifier.code 0} true;
    $i484 := $zext.i8.i32($i483);
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i485 := $trunc.i32.i8($i484);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i486 := send_cmd_write_uart_register($p1, 4, $i485);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    call {:si_unique_call 626} {:cexpr "status"} boogie_si_record_i32($i486);
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $i487 := $ne.i32($i486, 0);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    assume {:branchcond $i487} true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i487 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 627} $i488 := tty_get_baud_rate($p0);
    call {:si_unique_call 628} {:cexpr "tmp___18"} boogie_si_record_i32($i488);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    $i489 := $eq.i32($i488, 0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    assume {:branchcond $i489} true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i489 == 1);
    assume {:verifier.code 0} true;
    $i490 := $i488;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $p491 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p491, .str);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    $p492 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p492, .str.32);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    $p493 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4452;

  corral_source_split_4452:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p493, .str.2);
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    $p494 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p494, .str.50);
    goto corral_source_split_4455;

  corral_source_split_4455:
    assume {:verifier.code 0} true;
    $p495 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $p496 := $bitcast.ref.ref($p495);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i497 := $load.i24($M.5, $p496);
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $i498 := $and.i24($i497, $sub.i24(0, 262144));
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i499 := $or.i24($i498, 2535);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p496, $i499);
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p500 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p500, 0);
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p501 := $add.ref($add.ref($p21, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    $i502 := $load.i8($M.6, $p501);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $i503 := $zext.i8.i64($i502);
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $i504 := $and.i64($i503, 1);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i505 := ldv__builtin_expect($i504, 0);
    call {:si_unique_call 630} {:cexpr "tmp___19"} boogie_si_record_i64($i505);
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $i506 := $ne.i64($i505, 0);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    assume {:branchcond $i506} true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i506 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i507 := send_cmd_write_baud_rate($p1, $i490);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    call {:si_unique_call 633} {:cexpr "status"} boogie_si_record_i32($i507);
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    $i508 := $eq.i32($i507, $sub.i32(0, 1));
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    assume {:branchcond $i508} true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i508 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb153:
    assume $i508 == 1;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} $i509 := tty_termios_baud_rate($p2);
    call {:si_unique_call 635} {:cexpr "tmp___20"} boogie_si_record_i32($i509);
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 636} tty_encode_baud_rate($p0, $i509, $i509);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    goto $bb155;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb150:
    assume $i506 == 1;
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 631} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p21, $p24, .str.50, .str.32, $i490);
    goto corral_source_split_4472;

  corral_source_split_4472:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb147:
    assume $i489 == 1;
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i490 := 9600;
    goto $bb149;

  $bb144:
    assume $i487 == 1;
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  $bb141:
    assume $i475 == 1;
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p476 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $i477 := $load.i8($M.0, $p476);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $i478 := $zext.i8.i32($i477);
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $i479 := $or.i32($i478, 3);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $i480 := $trunc.i32.i8($i479);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $p481 := $add.ref($add.ref($p1, $mul.ref(0, 416)), $mul.ref(121, 1));
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p481, $i480);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume $i472 == 1;
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb132:
    assume $i440 == 1;
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $p441 := $bitcast.ref.ref($p30);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    $p442 := $add.ref($p441, $mul.ref(1148, 1));
    goto corral_source_split_4384;

  corral_source_split_4384:
    assume {:verifier.code 0} true;
    $i443 := $load.i8($M.0, $p442);
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    $i444 := $zext.i8.i32($i443);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $i445 := $ne.i32($i444, 0);
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    assume !($i445 == 1);
    goto $bb134;

  $bb135:
    assume {:verifier.code 0} true;
    assume $i445 == 1;
    goto $bb130;

  $bb130:
    assume {:verifier.code 0} true;
    $i446 := $zext.i8.i32($i420);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    $i447 := $trunc.i32.i8($i446);
    goto corral_source_split_4374;

  corral_source_split_4374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} vslice_dummy_var_49 := send_iosp_ext_cmd($p1, 4, $i447);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    goto $bb137;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i437 == 1;
    goto $bb130;

  $bb123:
    assume $i426 == 1;
    goto corral_source_split_4362;

  corral_source_split_4362:
    assume {:verifier.code 0} true;
    $p427 := $bitcast.ref.ref($p30);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p428 := $add.ref($p427, $mul.ref(1148, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i429 := $load.i8($M.0, $p428);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i430 := $zext.i8.i32($i429);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i431 := $ne.i32($i430, 0);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i431} true;
    goto $bb126, $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    assume !($i431 == 1);
    goto $bb125;

  $bb126:
    assume {:verifier.code 0} true;
    assume $i431 == 1;
    goto $bb121;

  $bb121:
    assume {:verifier.code 0} true;
    $i432 := $zext.i8.i32($i419);
    goto corral_source_split_4353;

  corral_source_split_4353:
    assume {:verifier.code 0} true;
    $i433 := $trunc.i32.i8($i432);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 621} vslice_dummy_var_48 := send_iosp_ext_cmd($p1, 3, $i433);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    goto corral_source_split_4355;

  corral_source_split_4355:
    assume {:verifier.code 0} true;
    goto $bb128;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb120:
    assume {:verifier.code 0} true;
    assume $i423 == 1;
    goto $bb121;

  $bb90:
    assume {:verifier.code 0} true;
    assume $i307 == 1;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_4184;

  corral_source_split_4184:
    assume {:verifier.code 0} true;
    $i311 := $load.i8($M.0, $p310);
    call {:si_unique_call 603} {:cexpr "stop_char"} boogie_si_record_i8($i311);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.0, $p314);
    call {:si_unique_call 604} {:cexpr "start_char"} boogie_si_record_i8($i315);
    goto corral_source_split_4187;

  corral_source_split_4187:
    assume {:verifier.code 0} true;
    $p316 := $add.ref($add.ref($p30, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i317 := $load.i32($M.0, $p316);
    goto corral_source_split_4189;

  corral_source_split_4189:
    assume {:verifier.code 0} true;
    $i318 := $eq.i32($i317, 0);
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb94;

  $bb94:
    assume !($i318 == 1);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p30, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4206;

  corral_source_split_4206:
    assume {:verifier.code 0} true;
    $i320 := $load.i32($M.0, $p319);
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_4208;

  corral_source_split_4208:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb95, $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    assume !($i321 == 1);
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p334 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $i335 := $load.i32($M.0, $p334);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $i336 := $and.i32($i335, 4096);
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i337 := $ne.i32($i336, 0);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i337} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i337 == 1);
    goto corral_source_split_4249;

  corral_source_split_4249:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p360, .str);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4252;

  corral_source_split_4252:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p361, .str.32);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p362, .str.2);
    goto corral_source_split_4255;

  corral_source_split_4255:
    assume {:verifier.code 0} true;
    $p363 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p363, .str.47);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $p364 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4258;

  corral_source_split_4258:
    assume {:verifier.code 0} true;
    $p365 := $bitcast.ref.ref($p364);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i366 := $load.i24($M.5, $p365);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i367 := $and.i24($i366, $sub.i24(0, 262144));
    goto corral_source_split_4261;

  corral_source_split_4261:
    assume {:verifier.code 0} true;
    $i368 := $or.i24($i367, 2483);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p365, $i368);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $p369 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4264;

  corral_source_split_4264:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p369, 0);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i371 := $load.i8($M.6, $p370);
    goto corral_source_split_4267;

  corral_source_split_4267:
    assume {:verifier.code 0} true;
    $i372 := $zext.i8.i64($i371);
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $i373 := $and.i64($i372, 1);
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 610} $i374 := ldv__builtin_expect($i373, 0);
    call {:si_unique_call 611} {:cexpr "tmp___15"} boogie_si_record_i64($i374);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i375 := $ne.i64($i374, 0);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i375} true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i375 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    $i359 := $i280;
    goto $bb106;

  $bb106:
    assume {:verifier.code 0} true;
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    $p377 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1)), $mul.ref(0, 1));
    goto corral_source_split_4279;

  corral_source_split_4279:
    assume {:verifier.code 0} true;
    $i378 := $load.i32($M.0, $p377);
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    $i379 := $and.i32($i378, 1024);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $i380 := $ne.i32($i379, 0);
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    assume {:branchcond $i380} true;
    goto $bb110, $bb111;

  $bb111:
    assume !($i380 == 1);
    goto corral_source_split_4314;

  corral_source_split_4314:
    assume {:verifier.code 0} true;
    $p403 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p403, .str);
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $p404 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p404, .str.32);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $p405 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p405, .str.2);
    goto corral_source_split_4320;

  corral_source_split_4320:
    assume {:verifier.code 0} true;
    $p406 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p406, .str.49);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $p407 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $p408 := $bitcast.ref.ref($p407);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    $i409 := $load.i24($M.5, $p408);
    goto corral_source_split_4325;

  corral_source_split_4325:
    assume {:verifier.code 0} true;
    $i410 := $and.i24($i409, $sub.i24(0, 262144));
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $i411 := $or.i24($i410, 2492);
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p408, $i411);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $p412 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p412, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    $p413 := $add.ref($add.ref($p20, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4331;

  corral_source_split_4331:
    assume {:verifier.code 0} true;
    $i414 := $load.i8($M.6, $p413);
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    $i415 := $zext.i8.i64($i414);
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    $i416 := $and.i64($i415, 1);
    goto corral_source_split_4334;

  corral_source_split_4334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i417 := ldv__builtin_expect($i416, 0);
    call {:si_unique_call 618} {:cexpr "tmp___17"} boogie_si_record_i64($i417);
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    $i418 := $ne.i64($i417, 0);
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    assume {:branchcond $i418} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i418 == 1);
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i402 := $i281;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $i419, $i420 := $i359, $i402;
    goto $bb119;

  $bb116:
    assume $i418 == 1;
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __dynamic_dev_dbg.ref.ref.ref.ref($p20, $p24, .str.49, .str.32);
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb110:
    assume $i380 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $i381 := $zext.i8.i32($i281);
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $i382 := $or.i32($i381, 8);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $i383 := $trunc.i32.i8($i382);
    call {:si_unique_call 614} {:cexpr "txFlow"} boogie_si_record_i8($i383);
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p384 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p384, .str);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $p385 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p385, .str.32);
    goto corral_source_split_4294;

  corral_source_split_4294:
    assume {:verifier.code 0} true;
    $p386 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p386, .str.2);
    goto corral_source_split_4296;

  corral_source_split_4296:
    assume {:verifier.code 0} true;
    $p387 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p387, .str.48);
    goto corral_source_split_4298;

  corral_source_split_4298:
    assume {:verifier.code 0} true;
    $p388 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4299;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    $p389 := $bitcast.ref.ref($p388);
    goto corral_source_split_4300;

  corral_source_split_4300:
    assume {:verifier.code 0} true;
    $i390 := $load.i24($M.5, $p389);
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $i391 := $and.i24($i390, $sub.i24(0, 262144));
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $i392 := $or.i24($i391, 2490);
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p389, $i392);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $p393 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p393, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p394 := $add.ref($add.ref($p19, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4307;

  corral_source_split_4307:
    assume {:verifier.code 0} true;
    $i395 := $load.i8($M.6, $p394);
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $i396 := $zext.i8.i64($i395);
    goto corral_source_split_4309;

  corral_source_split_4309:
    assume {:verifier.code 0} true;
    $i397 := $and.i64($i396, 1);
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i398 := ldv__builtin_expect($i397, 0);
    call {:si_unique_call 616} {:cexpr "tmp___16"} boogie_si_record_i64($i398);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $i399 := $ne.i64($i398, 0);
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    assume {:branchcond $i399} true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i402 := $i383;
    goto $bb115;

  $bb112:
    assume $i399 == 1;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $i400 := $zext.i8.i32($i315);
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $i401 := $zext.i8.i32($i311);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p19, $p24, .str.48, .str.32, $i400, $i401);
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb107:
    assume $i375 == 1;
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} __dynamic_dev_dbg.ref.ref.ref.ref($p18, $p24, .str.47, .str.32);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb101:
    assume $i337 == 1;
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i338 := $zext.i8.i32($i280);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i339 := $or.i32($i338, 8);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    $i340 := $trunc.i32.i8($i339);
    call {:si_unique_call 607} {:cexpr "rxFlow"} boogie_si_record_i8($i340);
    goto corral_source_split_4225;

  corral_source_split_4225:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p341, .str);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4228;

  corral_source_split_4228:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p342, .str.32);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4230;

  corral_source_split_4230:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p343, .str.2);
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p344, .str.46);
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p346 := $bitcast.ref.ref($p345);
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i347 := $load.i24($M.5, $p346);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i348 := $and.i24($i347, $sub.i24(0, 262144));
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i349 := $or.i24($i348, 2481);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p346, $i349);
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p350, 0);
    goto corral_source_split_4241;

  corral_source_split_4241:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i352 := $load.i8($M.6, $p351);
    goto corral_source_split_4243;

  corral_source_split_4243:
    assume {:verifier.code 0} true;
    $i353 := $zext.i8.i64($i352);
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    $i354 := $and.i64($i353, 1);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 608} $i355 := ldv__builtin_expect($i354, 0);
    call {:si_unique_call 609} {:cexpr "tmp___14"} boogie_si_record_i64($i355);
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $i356 := $ne.i64($i355, 0);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i359 := $i340;
    goto $bb106;

  $bb103:
    assume $i356 == 1;
    goto corral_source_split_4273;

  corral_source_split_4273:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i315);
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $i358 := $zext.i8.i32($i311);
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 612} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p17, $p24, .str.46, .str.32, $i357, $i358);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb95:
    assume $i321 == 1;
    goto corral_source_split_4210;

  corral_source_split_4210:
    assume {:verifier.code 0} true;
    $p322 := $bitcast.ref.ref($p30);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($p322, $mul.ref(1148, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $i324 := $load.i8($M.0, $p323);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $i325 := $zext.i8.i32($i324);
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i326 := $ne.i32($i325, 0);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    assume {:branchcond $i326} true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb97;

  $bb98:
    assume {:verifier.code 0} true;
    assume $i326 == 1;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    $i327 := $zext.i8.i32($i315);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i328 := $trunc.i32.i8($i327);
    goto corral_source_split_4199;

  corral_source_split_4199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 605} vslice_dummy_var_46 := send_iosp_ext_cmd($p1, 5, $i328);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i330 := $zext.i8.i32($i311);
    goto corral_source_split_4201;

  corral_source_split_4201:
    assume {:verifier.code 0} true;
    $i331 := $trunc.i32.i8($i330);
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 606} vslice_dummy_var_47 := send_iosp_ext_cmd($p1, 6, $i331);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    goto corral_source_split_4203;

  corral_source_split_4203:
    assume {:verifier.code 0} true;
    goto $bb100;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  $bb92:
    assume {:verifier.code 0} true;
    assume $i318 == 1;
    goto $bb93;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i302 == 1;
    goto $bb88;

  $bb84:
    assume $i297 == 1;
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 602} __dynamic_dev_dbg.ref.ref.ref.ref($p16, $p24, .str.45, .str.32);
    goto corral_source_split_4182;

  corral_source_split_4182:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb78:
    assume $i257 == 1;
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    $i258 := $zext.i8.i32(0);
    goto corral_source_split_4119;

  corral_source_split_4119:
    assume {:verifier.code 0} true;
    $i259 := $or.i32($i258, 1);
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    $i260 := $trunc.i32.i8($i259);
    call {:si_unique_call 595} {:cexpr "rxFlow"} boogie_si_record_i8($i260);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $i261 := $zext.i8.i32(0);
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $i262 := $or.i32($i261, 1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $i263 := $trunc.i32.i8($i262);
    call {:si_unique_call 596} {:cexpr "txFlow"} boogie_si_record_i8($i263);
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p264, .str);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p265 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p265, .str.32);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $p266 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p266, .str.2);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    $p267 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4131;

  corral_source_split_4131:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p267, .str.44);
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p268);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i270 := $load.i24($M.5, $p269);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    $i271 := $and.i24($i270, $sub.i24(0, 262144));
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i272 := $or.i24($i271, 2457);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p269, $i272);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4139;

  corral_source_split_4139:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p273, 0);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $p274 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4141;

  corral_source_split_4141:
    assume {:verifier.code 0} true;
    $i275 := $load.i8($M.6, $p274);
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i276 := $zext.i8.i64($i275);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    $i277 := $and.i64($i276, 1);
    goto corral_source_split_4144;

  corral_source_split_4144:
    assume {:verifier.code 0} true;
    call {:si_unique_call 597} $i278 := ldv__builtin_expect($i277, 0);
    call {:si_unique_call 598} {:cexpr "tmp___12"} boogie_si_record_i64($i278);
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $i279 := $ne.i64($i278, 0);
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    assume {:branchcond $i279} true;
    goto $bb80, $bb81;

  $bb81:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i280, $i281 := $i260, $i263;
    goto $bb83;

  $bb80:
    assume $i279 == 1;
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    call {:si_unique_call 601} __dynamic_dev_dbg.ref.ref.ref.ref($p15, $p24, .str.44, .str.32);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb75:
    assume $i256 == 1;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 594} __dynamic_dev_dbg.ref.ref.ref.ref($p14, $p24, .str.43, .str.32);
    goto corral_source_split_4116;

  corral_source_split_4116:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb69:
    assume $i223 == 1;
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p224, .str);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p225, .str.32);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p226, .str.2);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p227, .str.42);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $p229 := $bitcast.ref.ref($p228);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $i230 := $load.i24($M.5, $p229);
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i231 := $and.i24($i230, $sub.i24(0, 262144));
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i232 := $or.i24($i231, 2446);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p229, $i232);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p233, 0);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4078;

  corral_source_split_4078:
    assume {:verifier.code 0} true;
    $i235 := $load.i8($M.6, $p234);
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $i236 := $zext.i8.i64($i235);
    goto corral_source_split_4080;

  corral_source_split_4080:
    assume {:verifier.code 0} true;
    $i237 := $and.i64($i236, 1);
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} $i238 := ldv__builtin_expect($i237, 0);
    call {:si_unique_call 590} {:cexpr "tmp___10"} boogie_si_record_i64($i238);
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $i239 := $ne.i64($i238, 0);
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i239 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i240 := 4;
    goto $bb74;

  $bb71:
    assume $i239 == 1;
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 593} __dynamic_dev_dbg.ref.ref.ref.ref($p13, $p24, .str.42, .str.32);
    goto corral_source_split_4110;

  corral_source_split_4110:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb66:
    assume $i221 == 1;
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} __dynamic_dev_dbg.ref.ref.ref.ref($p12, $p24, .str.41, .str.32);
    goto corral_source_split_4059;

  corral_source_split_4059:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb42:
    assume $i131 == 1;
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i132 := $and.i32($i55, 1073741824);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i133 := $ne.i32($i132, 0);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i133 == 1);
    goto corral_source_split_3938;

  corral_source_split_3938:
    assume {:verifier.code 0} true;
    $i170 := $and.i32($i55, 512);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i171 := $ne.i32($i170, 0);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i171 == 1);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p189, .str);
    goto corral_source_split_4026;

  corral_source_split_4026:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p190, .str.32);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p191, .str.2);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4031;

  corral_source_split_4031:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p192, .str.40);
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    $i195 := $load.i24($M.5, $p194);
    goto corral_source_split_4035;

  corral_source_split_4035:
    assume {:verifier.code 0} true;
    $i196 := $and.i24($i195, $sub.i24(0, 262144));
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $i197 := $or.i24($i196, 2438);
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p194, $i197);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p198, 0);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.6, $p199);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i64($i200);
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $i202 := $and.i64($i201, 1);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i203 := ldv__builtin_expect($i202, 0);
    call {:si_unique_call 585} {:cexpr "tmp___8"} boogie_si_record_i64($i203);
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $i204 := $ne.i64($i203, 0);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    assume {:branchcond $i204} true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i188 := 24;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i169 := $i188;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i205 := $i169;
    goto $bb65;

  $bb62:
    assume $i204 == 1;
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 587} __dynamic_dev_dbg.ref.ref.ref.ref($p11, $p24, .str.40, .str.32);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb56:
    assume $i171 == 1;
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4001;

  corral_source_split_4001:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p172, .str);
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p173, .str.32);
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4005;

  corral_source_split_4005:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p174, .str.2);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p175, .str.39);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4009;

  corral_source_split_4009:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p176);
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i178 := $load.i24($M.5, $p177);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i179 := $and.i24($i178, $sub.i24(0, 262144));
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i180 := $or.i24($i179, 2435);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p177, $i180);
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p181, 0);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4017;

  corral_source_split_4017:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.6, $p182);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i64($i183);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i185 := $and.i64($i184, 1);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 582} $i186 := ldv__builtin_expect($i185, 0);
    call {:si_unique_call 583} {:cexpr "tmp___7"} boogie_si_record_i64($i186);
    goto corral_source_split_4021;

  corral_source_split_4021:
    assume {:verifier.code 0} true;
    $i187 := $ne.i64($i186, 0);
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i188 := 8;
    goto $bb61;

  $bb58:
    assume $i187 == 1;
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} __dynamic_dev_dbg.ref.ref.ref.ref($p10, $p24, .str.39, .str.32);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb44:
    assume $i133 == 1;
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $i134 := $and.i32($i55, 512);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $i135 := $ne.i32($i134, 0);
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i135 == 1);
    goto corral_source_split_3966;

  corral_source_split_3966:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p153, .str);
    goto corral_source_split_3968;

  corral_source_split_3968:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p154, .str.32);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p155, .str.2);
    goto corral_source_split_3972;

  corral_source_split_3972:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p156, .str.38);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_3976;

  corral_source_split_3976:
    assume {:verifier.code 0} true;
    $i159 := $load.i24($M.5, $p158);
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i160 := $and.i24($i159, $sub.i24(0, 262144));
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i161 := $or.i24($i160, 2431);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p158, $i161);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p162, 0);
    goto corral_source_split_3982;

  corral_source_split_3982:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.6, $p163);
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i64($i164);
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    $i166 := $and.i64($i165, 1);
    goto corral_source_split_3986;

  corral_source_split_3986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i167 := ldv__builtin_expect($i166, 0);
    call {:si_unique_call 579} {:cexpr "tmp___6"} boogie_si_record_i64($i167);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i152 := 56;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto corral_source_split_3993;

  corral_source_split_3993:
    assume {:verifier.code 0} true;
    $i169 := $i152;
    goto $bb55;

  $bb52:
    assume $i168 == 1;
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} __dynamic_dev_dbg.ref.ref.ref.ref($p9, $p24, .str.38, .str.32);
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb46:
    assume $i135 == 1;
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p136, .str);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p137, .str.32);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3947;

  corral_source_split_3947:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p138, .str.2);
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p139, .str.37);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $p141 := $bitcast.ref.ref($p140);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i142 := $load.i24($M.5, $p141);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i143 := $and.i24($i142, $sub.i24(0, 262144));
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i144 := $or.i24($i143, 2428);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p141, $i144);
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p145, 0);
    goto corral_source_split_3958;

  corral_source_split_3958:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i147 := $load.i8($M.6, $p146);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i148 := $zext.i8.i64($i147);
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i149 := $and.i64($i148, 1);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i150 := ldv__builtin_expect($i149, 0);
    call {:si_unique_call 577} {:cexpr "tmp___5"} boogie_si_record_i64($i150);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i152 := 40;
    goto $bb51;

  $bb48:
    assume $i151 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} __dynamic_dev_dbg.ref.ref.ref.ref($p8, $p24, .str.37, .str.32);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb39:
    assume $i129 == 1;
    goto corral_source_split_3903;

  corral_source_split_3903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} __dynamic_dev_dbg.ref.ref.ref.ref($p7, $p24, .str.36, .str.32);
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i59 == 1;
    goto $bb17;

  $bb14:
    assume $i58 == 1;
    assume {:verifier.code 0} true;
    $i60 := $eq.i32($i56, 32);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb19;

  $bb20:
    assume $i60 == 1;
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p98, .str);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p99, .str.32);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p100, .str.2);
    goto corral_source_split_3824;

  corral_source_split_3824:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p101, .str.35);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3827;

  corral_source_split_3827:
    assume {:verifier.code 0} true;
    $p103 := $bitcast.ref.ref($p102);
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $i104 := $load.i24($M.5, $p103);
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $i105 := $and.i24($i104, $sub.i24(0, 262144));
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $i106 := $or.i24($i105, 2414);
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p103, $i106);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p107, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3835;

  corral_source_split_3835:
    assume {:verifier.code 0} true;
    $i109 := $load.i8($M.6, $p108);
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    $i110 := $zext.i8.i64($i109);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $i111 := $and.i64($i110, 1);
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} $i112 := ldv__builtin_expect($i111, 0);
    call {:si_unique_call 565} {:cexpr "tmp___3"} boogie_si_record_i64($i112);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    $i113 := $ne.i64($i112, 0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $i80, $i81 := 127, 2;
    goto $bb31;

  $bb35:
    assume $i113 == 1;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} __dynamic_dev_dbg.ref.ref.ref.ref($p6, $p24, .str.35, .str.32);
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb12:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i56, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i56, 16);
    assume {:verifier.code 0} true;
    assume {:branchcond $i62} true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i62 == 1);
    goto $bb19;

  $bb24:
    assume $i62 == 1;
    goto corral_source_split_3842;

  corral_source_split_3842:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p82, .str);
    goto corral_source_split_3844;

  corral_source_split_3844:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p83, .str.32);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p84, .str.2);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p85, .str.34);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p87 := $bitcast.ref.ref($p86);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $i88 := $load.i24($M.5, $p87);
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $i89 := $and.i24($i88, $sub.i24(0, 262144));
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    $i90 := $or.i24($i89, 2410);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p87, $i90);
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p91, 0);
    goto corral_source_split_3858;

  corral_source_split_3858:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.6, $p92);
    goto corral_source_split_3860;

  corral_source_split_3860:
    assume {:verifier.code 0} true;
    $i94 := $zext.i8.i64($i93);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $i95 := $and.i64($i94, 1);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} $i96 := ldv__builtin_expect($i95, 0);
    call {:si_unique_call 567} {:cexpr "tmp___2"} boogie_si_record_i64($i96);
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $i97 := $ne.i64($i96, 0);
    goto corral_source_split_3864;

  corral_source_split_3864:
    assume {:verifier.code 0} true;
    assume {:branchcond $i97} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i97 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i80, $i81 := 63, 1;
    goto $bb31;

  $bb32:
    assume $i97 == 1;
    goto corral_source_split_3897;

  corral_source_split_3897:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p24, .str.34, .str.32);
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb22:
    assume $i61 == 1;
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i56, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i63 == 1);
    goto $bb19;

  $bb26:
    assume $i63 == 1;
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p64, .str);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p65, .str.32);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p66, .str.2);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p67, .str.33);
    goto corral_source_split_3874;

  corral_source_split_3874:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p68);
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $i70 := $load.i24($M.5, $p69);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $i71 := $and.i24($i70, $sub.i24(0, 262144));
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $i72 := $or.i24($i71, 2406);
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p69, $i72);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p73, 0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3883;

  corral_source_split_3883:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.6, $p74);
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i64($i75);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $i77 := $and.i64($i76, 1);
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 568} $i78 := ldv__builtin_expect($i77, 0);
    call {:si_unique_call 569} {:cexpr "tmp___1"} boogie_si_record_i64($i78);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i79 := $ne.i64($i78, 0);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i80, $i81 := 31, 0;
    goto $bb31;

  $bb28:
    assume $i79 == 1;
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p24, .str.33, .str.32);
    goto corral_source_split_3891;

  corral_source_split_3891:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb2;
}



const tty_kref_put: ref;

axiom tty_kref_put == $sub.ref(0, 358523);

procedure tty_kref_put($p0: ref);
  free requires assertsPassed;



implementation tty_kref_put($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    return;
}



const handle_new_lsr: ref;

axiom handle_new_lsr == $sub.ref(0, 359555);

procedure handle_new_lsr($p0: ref, $i1: i8, $i2: i8, $i3: i8);
  free requires assertsPassed;
  modifies $M.15, $M.0, $CurrAddr;



implementation handle_new_lsr($p0: ref, $i1: i8, $i2: i8, $i3: i8)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i8;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $i13: i32;
  var $i14: i8;
  var $i15: i8;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $i37: i32;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $i46: i1;
  var $p47: ref;
  var $i48: i32;
  var $i49: i32;
  var $p50: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 637} $p4 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 638} {:cexpr "handle_new_lsr:arg:lsrData"} boogie_si_record_i8($i1);
    call {:si_unique_call 639} {:cexpr "handle_new_lsr:arg:lsr"} boogie_si_record_i8($i2);
    assume {:verifier.code 0} true;
    $M.15 := $store.i8($M.15, $p4, $i3);
    goto corral_source_split_4483;

  corral_source_split_4483:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i2);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 30);
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i8($i6);
    call {:si_unique_call 640} {:cexpr "newLsr"} boogie_si_record_i8($i7);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(123, 1));
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p8, $i2);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i7);
    goto corral_source_split_4489;

  corral_source_split_4489:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 16);
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i11} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i15 := $i7;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i1);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4507;

  corral_source_split_4507:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i15);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 16);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_4512;

  corral_source_split_4512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i30 := $zext.i8.i32($i15);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 2);
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i15);
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i37, 4);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i44 := $zext.i8.i32($i15);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, 8);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    return;

  $bb16:
    assume $i46 == 1;
    $p47 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(24, 1));
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    $i48 := $load.i32($M.0, $p47);
    goto corral_source_split_4542;

  corral_source_split_4542:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, 1);
    $p50 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(24, 1));
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i49);
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i39 == 1;
    $p40 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(28, 1));
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $i42 := $add.i32($i41, 1);
    $p43 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(28, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i32 == 1;
    $p33 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(32, 1));
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $i35 := $add.i32($i34, 1);
    $p36 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(32, 1));
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, $i35);
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i25 == 1;
    $p26 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(36, 1));
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i27 := $load.i32($M.0, $p26);
    goto corral_source_split_4515;

  corral_source_split_4515:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, 1);
    $p29 := $add.ref($add.ref($add.ref($p21, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(36, 1));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p29, $i28);
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i17 == 1;
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 642} edge_tty_recv($p19, $p4, 1);
    goto corral_source_split_4505;

  corral_source_split_4505:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i12 := $zext.i8.i32($i7);
    goto corral_source_split_4494;

  corral_source_split_4494:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 18);
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i8($i13);
    call {:si_unique_call 641} {:cexpr "newLsr"} boogie_si_record_i8($i14);
    goto corral_source_split_4496;

  corral_source_split_4496:
    assume {:verifier.code 0} true;
    $i15 := $i14;
    goto $bb3;
}



const send_iosp_ext_cmd: ref;

axiom send_iosp_ext_cmd == $sub.ref(0, 360587);

procedure send_iosp_ext_cmd($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, assertsPassed, $CurrAddr;



implementation send_iosp_ext_cmd($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i32;
  var $i12: i32;
  var $i13: i8;
  var $p14: ref;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 643} {:cexpr "send_iosp_ext_cmd:arg:command"} boogie_si_record_i8($i1);
    call {:si_unique_call 644} {:cexpr "send_iosp_ext_cmd:arg:param"} boogie_si_record_i8($i2);
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} $p3 := kmalloc(10, 32);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i4, 0);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    $i11 := $zext.i8.i32($i10);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    $i12 := $or.i32($i11, 200);
    goto corral_source_split_4560;

  corral_source_split_4560:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i32.i8($i12);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, $i13);
    goto corral_source_split_4562;

  corral_source_split_4562:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($p3, $mul.ref(1, 1));
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, $i1);
    goto corral_source_split_4564;

  corral_source_split_4564:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p3, $mul.ref(2, 1));
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, $i2);
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i16 := $add.i32(0, 3);
    call {:si_unique_call 646} {:cexpr "length"} boogie_si_record_i32($i16);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 647} $i17 := write_cmd_usb($p0, $p3, $i16);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    call {:si_unique_call 648} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    assume {:branchcond $i18} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i6 := $i17;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    call {:si_unique_call 649} kfree($p3);
    goto corral_source_split_4572;

  corral_source_split_4572:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i6 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_157:
    assume !assertsPassed;
    return;
}



const send_cmd_write_uart_register: ref;

axiom send_cmd_write_uart_register == $sub.ref(0, 361619);

procedure send_cmd_write_uart_register($p0: ref, $i1: i8, $i2: i8) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, assertsPassed;



implementation send_cmd_write_uart_register($p0: ref, $i1: i8, $i2: i8) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i1;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i24;
  var $i79: i24;
  var $i80: i24;
  var $p81: ref;
  var $p82: ref;
  var $i83: i8;
  var $i84: i64;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i64;
  var $i90: i1;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i8;
  var $i95: i32;
  var $i96: i32;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var $i100: i32;
  var $i101: i8;
  var $p102: ref;
  var $i103: i64;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i61: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 650} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 653} {:cexpr "send_cmd_write_uart_register:arg:regNum"} boogie_si_record_i8($i1);
    call {:si_unique_call 654} {:cexpr "send_cmd_write_uart_register:arg:regValue"} boogie_si_record_i8($i2);
    goto corral_source_split_4574;

  corral_source_split_4574:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4575;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4576;

  corral_source_split_4576:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 655} $p10 := usb_get_serial_data($p9);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.4);
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.2);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.5);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4592;

  corral_source_split_4592:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.5, $p20);
    goto corral_source_split_4594;

  corral_source_split_4594:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_4595;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 2336);
    goto corral_source_split_4596;

  corral_source_split_4596:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p20, $i23);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4600;

  corral_source_split_4600:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_4602;

  corral_source_split_4602:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 656} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 657} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p11, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    assume {:branchcond $i37} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p11, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 0);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 665} $p88 := kmalloc(16, 32);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $i89 := $p2i.ref.i64($p88);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    $i90 := $eq.i64($i89, 0);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    assume {:branchcond $i90} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i90 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i94 := $load.i8($M.0, $p93);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    $i95 := $zext.i8.i32($i94);
    goto corral_source_split_4710;

  corral_source_split_4710:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i1);
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i96, 7);
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i98 := $shl.i32($i97, 3);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i95, $i98);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $i100 := $or.i32($i99, 128);
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i101 := $trunc.i32.i8($i100);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $i101);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($p88, $mul.ref(1, 1));
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p102, $i2);
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i103 := $add.i64(0, 2);
    call {:si_unique_call 666} {:cexpr "cmdLen"} boogie_si_record_i64($i103);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i104 := $trunc.i64.i32($i103);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 667} $i105 := write_cmd_usb($p0, $p88, $i104);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    call {:si_unique_call 668} {:cexpr "status"} boogie_si_record_i32($i105);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_4723;

  corral_source_split_4723:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $i61 := $i105;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $r := $i61;
    return;

  $bb30:
    assume $i106 == 1;
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 669} kfree($p88);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    goto $bb32;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb27:
    assume $i90 == 1;
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i61 := $sub.i32(0, 12);
    goto $bb14;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb16:
    assume $i64 == 1;
    goto corral_source_split_4662;

  corral_source_split_4662:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p11);
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($p65, $mul.ref(1149, 1));
    goto corral_source_split_4664;

  corral_source_split_4664:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i67);
    goto corral_source_split_4666;

  corral_source_split_4666:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb18;

  $bb19:
    assume $i69 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i1);
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 3);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb18;

  $bb21:
    assume $i71 == 1;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p72, .str);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p73, .str.4);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4678;

  corral_source_split_4678:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p74, .str.2);
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p75, .str.9);
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p76);
    goto corral_source_split_4683;

  corral_source_split_4683:
    assume {:verifier.code 0} true;
    $i78 := $load.i24($M.5, $p77);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $i79 := $and.i24($i78, $sub.i24(0, 262144));
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $i80 := $or.i24($i79, 2348);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p77, $i80);
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p81, 0);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.6, $p82);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i64($i83);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    $i85 := $and.i64($i84, 1);
    goto corral_source_split_4693;

  corral_source_split_4693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 662} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 663} {:cexpr "tmp___2"} boogie_si_record_i64($i86);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    assume {:branchcond $i87} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb14;

  $bb23:
    assume $i87 == 1;
    goto corral_source_split_4697;

  corral_source_split_4697:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} __dynamic_dev_dbg.ref.ref.ref($p5, $p14, .str.9);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb4:
    assume $i37 == 1;
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p11);
    goto corral_source_split_4619;

  corral_source_split_4619:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($p38, $mul.ref(1149, 1));
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_4621;

  corral_source_split_4621:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_4623;

  corral_source_split_4623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i42 == 1);
    goto $bb6;

  $bb7:
    assume $i42 == 1;
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i1);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 4);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    assume {:branchcond $i44} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb6;

  $bb9:
    assume $i44 == 1;
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4630;

  corral_source_split_4630:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str);
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.4);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.2);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.8);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.5, $p50);
    goto corral_source_split_4640;

  corral_source_split_4640:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 2341);
    goto corral_source_split_4642;

  corral_source_split_4642:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p50, $i53);
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, 0);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_4649;

  corral_source_split_4649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 659} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 660} {:cexpr "tmp___1"} boogie_si_record_i64($i59);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i61 := 0;
    goto $bb14;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 661} __dynamic_dev_dbg.ref.ref.ref($p4, $p14, .str.8);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $i31 := $zext.i8.i32($i1);
    goto corral_source_split_4608;

  corral_source_split_4608:
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i31, 4);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p33 := (if $i32 == 1 then .str.6 else .str.7);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i2);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p3, $p14, .str.5, $p33, .str.4, $i34);
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const tty_get_baud_rate: ref;

axiom tty_get_baud_rate == $sub.ref(0, 362651);

procedure tty_get_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_get_baud_rate($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1816)), $mul.ref(1160, 1));
    goto corral_source_split_4729;

  corral_source_split_4729:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} $i2 := tty_termios_baud_rate($p1);
    call {:si_unique_call 671} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const send_cmd_write_baud_rate: ref;

axiom send_cmd_write_baud_rate == $sub.ref(0, 363683);

procedure send_cmd_write_baud_rate($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.16, $CurrAddr, assertsPassed;



implementation send_cmd_write_baud_rate($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i32;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i24;
  var $i34: i24;
  var $i35: i24;
  var $p36: ref;
  var $p37: ref;
  var $i38: i8;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i24;
  var $i51: i24;
  var $i52: i24;
  var $p53: ref;
  var $p54: ref;
  var $i55: i8;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i1;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $i65: i8;
  var $i66: i32;
  var $i67: i32;
  var $i68: i8;
  var $p69: ref;
  var $p70: ref;
  var $i71: i32;
  var $i72: i8;
  var $i73: i32;
  var $i74: i32;
  var $i75: i8;
  var $i76: i32;
  var $i77: i8;
  var $i78: i64;
  var $p79: ref;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $i86: i8;
  var $i87: i32;
  var $i88: i32;
  var $i89: i32;
  var $i90: i8;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i32;
  var $i96: i8;
  var $i97: i32;
  var $i98: i32;
  var $i99: i8;
  var $p100: ref;
  var $i101: i8;
  var $i102: i64;
  var $p103: ref;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $i43: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 673} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 674} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 675} {:cexpr "send_cmd_write_baud_rate:arg:baudRate"} boogie_si_record_i32($i1);
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 676} $p9 := usb_get_serial_data($p8);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4742;

  corral_source_split_4742:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.0, $p16);
    goto corral_source_split_4745;

  corral_source_split_4745:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i32($i17);
    call {:si_unique_call 677} {:cexpr "number"} boogie_si_record_i32($i18);
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p10, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_4747;

  corral_source_split_4747:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.0, $p19);
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p44, .str);
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p45, .str.51);
    goto corral_source_split_4790;

  corral_source_split_4790:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p46, .str.2);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4793;

  corral_source_split_4793:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p47, .str.53);
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4795;

  corral_source_split_4795:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $i50 := $load.i24($M.5, $p49);
    goto corral_source_split_4797;

  corral_source_split_4797:
    assume {:verifier.code 0} true;
    $i51 := $and.i24($i50, $sub.i24(0, 262144));
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i52 := $or.i24($i51, 2250);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p49, $i52);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p53, 0);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.6, $p54);
    goto corral_source_split_4804;

  corral_source_split_4804:
    assume {:verifier.code 0} true;
    $i56 := $zext.i8.i64($i55);
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i57 := $and.i64($i56, 1);
    goto corral_source_split_4806;

  corral_source_split_4806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i58 := ldv__builtin_expect($i57, 0);
    call {:si_unique_call 682} {:cexpr "tmp___1"} boogie_si_record_i64($i58);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    $i59 := $ne.i64($i58, 0);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i59} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 684} $i60 := calc_baud_rate_divisor($p13, $i1, $p2);
    call {:si_unique_call 685} {:cexpr "status"} boogie_si_record_i32($i60);
    goto corral_source_split_4813;

  corral_source_split_4813:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 687} $p62 := kmalloc(256, 32);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    $i64 := $eq.i64($i63, 0);
    goto corral_source_split_4821;

  corral_source_split_4821:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i8($i18);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i65);
    goto corral_source_split_4826;

  corral_source_split_4826:
    assume {:verifier.code 0} true;
    $i67 := $or.i32($i66, 152);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i68 := $trunc.i32.i8($i67);
    goto corral_source_split_4828;

  corral_source_split_4828:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $i68);
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($p62, $mul.ref(1, 1));
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p69, $sub.i8(0, 128));
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($p62, $mul.ref(2, 1));
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    $i71 := $add.i32(0, 2);
    call {:si_unique_call 688} {:cexpr "cmdLen"} boogie_si_record_i32($i71);
    goto corral_source_split_4833;

  corral_source_split_4833:
    assume {:verifier.code 0} true;
    $i72 := $trunc.i32.i8($i18);
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_4835;

  corral_source_split_4835:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i73, 128);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $i75 := $trunc.i32.i8($i74);
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p70, $i75);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i76 := $load.i32($M.16, $p2);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i77 := $trunc.i32.i8($i76);
    $i78 := $add.i64(2, 1);
    goto corral_source_split_4840;

  corral_source_split_4840:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($p62, $mul.ref($i78, 1));
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p79, $i77);
    $i80 := $add.i64(2, 2);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($p62, $mul.ref($i80, 1));
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    $i82 := $add.i32($i71, 2);
    call {:si_unique_call 689} {:cexpr "cmdLen"} boogie_si_record_i32($i82);
    goto corral_source_split_4844;

  corral_source_split_4844:
    assume {:verifier.code 0} true;
    $i83 := $trunc.i32.i8($i18);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i85 := $or.i32($i84, 136);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    $i86 := $trunc.i32.i8($i85);
    goto corral_source_split_4848;

  corral_source_split_4848:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p81, $i86);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.16, $p2);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i88 := $and.i32($i87, 65280);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    $i89 := $ashr.i32($i88, 8);
    goto corral_source_split_4852;

  corral_source_split_4852:
    assume {:verifier.code 0} true;
    $i90 := $trunc.i32.i8($i89);
    $i91 := $add.i64($i80, 1);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($p62, $mul.ref($i91, 1));
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p92, $i90);
    $i93 := $add.i64($i80, 2);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p62, $mul.ref($i93, 1));
    goto corral_source_split_4856;

  corral_source_split_4856:
    assume {:verifier.code 0} true;
    $i95 := $add.i32($i82, 2);
    call {:si_unique_call 690} {:cexpr "cmdLen"} boogie_si_record_i32($i95);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i96 := $trunc.i32.i8($i18);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    $i98 := $or.i32($i97, 152);
    goto corral_source_split_4860;

  corral_source_split_4860:
    assume {:verifier.code 0} true;
    $i99 := $trunc.i32.i8($i98);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p94, $i99);
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(120, 1));
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    $i102 := $add.i64($i93, 1);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($p62, $mul.ref($i102, 1));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, $i101);
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $i104 := $add.i32($i95, 2);
    call {:si_unique_call 691} {:cexpr "cmdLen"} boogie_si_record_i32($i104);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} $i105 := write_cmd_usb($p0, $p62, $i104);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    call {:si_unique_call 693} {:cexpr "status"} boogie_si_record_i32($i105);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i105, 0);
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i43 := $i105;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $r := $i43;
    return;

  $bb20:
    assume $i106 == 1;
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} kfree($p62);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i64 == 1;
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32(0, 12);
    goto $bb9;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i61 == 1;
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 686} dev_err.ref.ref.ref($p13, .str.54, .str.51);
    goto corral_source_split_4817;

  corral_source_split_4817:
    assume {:verifier.code 0} true;
    $i43 := $i60;
    goto $bb9;

  $bb11:
    assume $i59 == 1;
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p13, .str.53, .str.51, $i1);
    goto corral_source_split_4811;

  corral_source_split_4811:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p10);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($p22, $mul.ref(1149, 1));
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i32($i24);
    goto corral_source_split_4755;

  corral_source_split_4755:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 0);
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb3;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p27, .str);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p28, .str.51);
    goto corral_source_split_4762;

  corral_source_split_4762:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p29, .str.2);
    goto corral_source_split_4764;

  corral_source_split_4764:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p30, .str.52);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    $i33 := $load.i24($M.5, $p32);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i34 := $and.i24($i33, $sub.i24(0, 262144));
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $i35 := $or.i24($i34, 2246);
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p32, $i35);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p36, 0);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.6, $p37);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i64($i38);
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $i40 := $and.i64($i39, 1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i41 := ldv__builtin_expect($i40, 0);
    call {:si_unique_call 679} {:cexpr "tmp___0"} boogie_si_record_i64($i41);
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $i42 := $ne.i64($i41, 0);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i43 := 0;
    goto $bb9;

  $bb6:
    assume $i42 == 1;
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p13, .str.52, $i1);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const tty_termios_baud_rate: ref;

axiom tty_termios_baud_rate == $sub.ref(0, 364715);

procedure tty_termios_baud_rate($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation tty_termios_baud_rate($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_4874;

  corral_source_split_4874:
    assume {:verifier.code 1} true;
    call {:si_unique_call 695} $i1 := __VERIFIER_nondet_uint();
    call {:si_unique_call 696} {:cexpr "smack:ext:__VERIFIER_nondet_uint"} boogie_si_record_i32($i1);
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const tty_encode_baud_rate: ref;

axiom tty_encode_baud_rate == $sub.ref(0, 365747);

procedure tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation tty_encode_baud_rate($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} {:cexpr "tty_encode_baud_rate:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 698} {:cexpr "tty_encode_baud_rate:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_4877;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    return;
}



const calc_baud_rate_divisor: ref;

axiom calc_baud_rate_divisor == $sub.ref(0, 366779);

procedure calc_baud_rate_divisor($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.16, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation calc_baud_rate_divisor($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i1;
  var $i5: i32;
  var $i6: i64;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i12: i1;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i16;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $i37: i32;
  var $i11: i32;
  var $i38: i1;
  var $i39: i1;
  var $i40: i1;
  var $i41: i1;
  var $i42: i1;
  var $i43: i1;
  var $i44: i1;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 700} {:cexpr "calc_baud_rate_divisor:arg:baudrate"} boogie_si_record_i32($i1);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i4 := $eq.i32(50, $i1);
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    $i5 := 0;
    assume {:branchcond $i4} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32(75, $i1);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $i5 := 1;
    assume {:branchcond $i38} true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i39 := $eq.i32(110, $i1);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $i5 := 2;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32(134, $i1);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i5 := 3;
    assume {:branchcond $i40} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i41 := $eq.i32(150, $i1);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    $i5 := 4;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32(300, $i1);
    goto corral_source_split_4941;

  corral_source_split_4941:
    assume {:verifier.code 0} true;
    $i5 := 5;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32(600, $i1);
    goto corral_source_split_4943;

  corral_source_split_4943:
    assume {:verifier.code 0} true;
    $i5 := 6;
    assume {:branchcond $i43} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32(1200, $i1);
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i5 := 7;
    assume {:branchcond $i44} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i45 := $eq.i32(1800, $i1);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i5 := 8;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $i46 := $eq.i32(2400, $i1);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i5 := 9;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $i47 := $eq.i32(4800, $i1);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i5 := 10;
    assume {:branchcond $i47} true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32(7200, $i1);
    goto corral_source_split_4953;

  corral_source_split_4953:
    assume {:verifier.code 0} true;
    $i5 := 11;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $i49 := $eq.i32(9600, $i1);
    goto corral_source_split_4955;

  corral_source_split_4955:
    assume {:verifier.code 0} true;
    $i5 := 12;
    assume true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32(14400, $i1);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i5 := 13;
    assume {:branchcond $i50} true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32(19200, $i1);
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $i5 := 14;
    assume {:branchcond $i51} true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $i52 := $eq.i32(38400, $i1);
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $i5 := 15;
    assume {:branchcond $i52} true;
    goto $bb75, $bb76;

  $bb76:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32(57600, $i1);
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i5 := 16;
    assume {:branchcond $i53} true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32(115200, $i1);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i5 := 17;
    assume {:branchcond $i54} true;
    goto $bb83, $bb84;

  $bb84:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i55 := $eq.i32(230400, $i1);
    goto corral_source_split_4967;

  corral_source_split_4967:
    assume {:verifier.code 0} true;
    $i5 := 18;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i12 := $sgt.i32($i1, 50);
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4890;

  corral_source_split_4890:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb10:
    assume $i12 == 1;
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i13 := $sle.i32($i1, 230399);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb12;

  $bb13:
    assume $i13 == 1;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $i14 := $sdiv.i32($i1, 2);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $i16 := $add.i64($i15, 230400);
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i1);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i18 := $sdiv.i64($i16, $i17);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i16($i18);
    call {:si_unique_call 701} {:cexpr "custom"} boogie_si_record_i16($i19);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i19);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p2, $i20);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4908;

  corral_source_split_4908:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, .str);
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p22, .str.55);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p23, .str.2);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str.56);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4916;

  corral_source_split_4916:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.5, $p26);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 2312);
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p26, $i29);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p30, 0);
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4924;

  corral_source_split_4924:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 703} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_4929;

  corral_source_split_4929:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb15:
    assume $i36 == 1;
    goto corral_source_split_4931;

  corral_source_split_4931:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i19);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    call {:si_unique_call 704} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p3, $p0, .str.56, .str.55, $i1, $i37);
    goto corral_source_split_4933;

  corral_source_split_4933:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb87:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $i6 := $sext.i32.i64($i5);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref($i6, 8)), $mul.ref(4, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.17, $p8);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $M.16 := $store.i32($M.16, $p2, $i10);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb6;

  $bb83:
    assume {:verifier.code 0} true;
    assume $i54 == 1;
    goto $bb4;

  $bb79:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb4;

  $bb75:
    assume {:verifier.code 0} true;
    assume $i52 == 1;
    goto $bb4;

  $bb71:
    assume {:verifier.code 0} true;
    assume $i51 == 1;
    goto $bb4;

  $bb67:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb4;

  $bb63:
    assume {:verifier.code 0} true;
    assume $i49 == 1;
    goto $bb4;

  $bb59:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb4;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb4;

  $bb51:
    assume {:verifier.code 0} true;
    assume $i46 == 1;
    goto $bb4;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i45 == 1;
    goto $bb4;

  $bb43:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb4;

  $bb39:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb4;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb4;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb4;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i39 == 1;
    goto $bb4;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb4;
}



const write_cmd_usb: ref;

axiom write_cmd_usb == $sub.ref(0, 367811);

procedure write_cmd_usb($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, assertsPassed;



implementation write_cmd_usb($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i24;
  var $i24: i24;
  var $i25: i24;
  var $p26: ref;
  var $p27: ref;
  var $i28: i8;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i8;
  var $i40: i32;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 706} {:cexpr "write_cmd_usb:arg:length"} boogie_si_record_i32($i2);
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 3016)), $mul.ref(0, 1));
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} $p8 := usb_get_serial_data($p7);
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} usb_serial_debug_data($p12, .str.10, $i2, $p1);
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $p13 := ldv_usb_alloc_urb_29(0, 32);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 710} atomic_inc(CmdUrbs);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p17, .str);
    goto corral_source_split_4990;

  corral_source_split_4990:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p18, .str.10);
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p19, .str.2);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p20, .str.11);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $i23 := $load.i24($M.5, $p22);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $i24 := $and.i24($i23, $sub.i24(0, 262144));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i25 := $or.i24($i24, 2192);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p22, $i25);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p26, 0);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.6, $p27);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i64($i28);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $i30 := $and.i64($i29, 1);
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i31 := ldv__builtin_expect($i30, 0);
    call {:si_unique_call 712} {:cexpr "tmp___1"} boogie_si_record_i64($i31);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p9, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_5019;

  corral_source_split_5019:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p9, $mul.ref(0, 1312)), $mul.ref(1288, 1));
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    $i39 := $load.i8($M.0, $p38);
    goto corral_source_split_5021;

  corral_source_split_5021:
    assume {:verifier.code 0} true;
    $i40 := $zext.i8.i32($i39);
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} $i41 := __create_pipe($p37, $i40);
    call {:si_unique_call 717} {:cexpr "tmp___2"} boogie_si_record_i32($i41);
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p9, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i46 := $or.i32($i41, $sub.i32(0, 1073741824));
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $p47 := $bitcast.ref.ref($p0);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} usb_fill_bulk_urb($p13, $p45, $i46, $p1, $i2, edge_bulk_out_cmd_callback, $p47);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(134, 1));
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p48, 1);
    goto corral_source_split_5032;

  corral_source_split_5032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 719} $i49 := ldv_usb_submit_urb_30($p13, 32);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 720} {:cexpr "status"} boogie_si_record_i32($i49);
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i50 := $ne.i32($i49, 0);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    assume {:branchcond $i50} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i16 := $i49;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb8:
    assume $i50 == 1;
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 721} dev_err.ref.ref.ref.i32($p12, .str.12, .str.10, $i49);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} usb_kill_urb($p13);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 723} usb_free_urb($p13);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} atomic_dec(CmdUrbs);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i16 := $i49;
    goto $bb3;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i32 == 1;
    goto corral_source_split_5012;

  corral_source_split_5012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $i33 := atomic_read(CmdUrbs);
    call {:si_unique_call 714} {:cexpr "tmp___0"} boogie_si_record_i32($i33);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 715} __dynamic_dev_dbg.ref.ref.ref.ref.ref.i32($p3, $p12, .str.11, .str.10, $p13, $i33);
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i15 == 1;
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_175:
    assume !assertsPassed;
    return;
}



const ldv_usb_alloc_urb_29: ref;

axiom ldv_usb_alloc_urb_29 == $sub.ref(0, 368843);

procedure ldv_usb_alloc_urb_29($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_29($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} {:cexpr "ldv_usb_alloc_urb_29:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 726} {:cexpr "ldv_usb_alloc_urb_29:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5042;

  corral_source_split_5042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 727} ldv_check_alloc_flags($i1);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 728} $p2 := ldv_undef_ptr();
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5045;

  corral_source_split_5045:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_181:
    assume !assertsPassed;
    return;
}



const atomic_inc: ref;

axiom atomic_inc == $sub.ref(0, 369875);

procedure atomic_inc($p0: ref);
  free requires assertsPassed;



implementation atomic_inc($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 729} devirtbounce(0, $p1, $p1);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 370907);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    goto corral_source_split_5051;

  corral_source_split_5051:
    assume {:verifier.code 0} true;
    $i2 := $M.18;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const edge_bulk_out_cmd_callback: ref;

axiom edge_bulk_out_cmd_callback == $sub.ref(0, 371939);

procedure edge_bulk_out_cmd_callback($p0: ref);



const ldv_usb_submit_urb_30: ref;

axiom ldv_usb_submit_urb_30 == $sub.ref(0, 372971);

procedure ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_30($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} {:cexpr "ldv_usb_submit_urb_30:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 731} ldv_check_alloc_flags($i1);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    call {:si_unique_call 732} $p2 := ldv_undef_ptr();
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5058;

  corral_source_split_5058:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_184:
    assume !assertsPassed;
    return;
}



const usb_kill_urb: ref;

axiom usb_kill_urb == $sub.ref(0, 374003);

procedure usb_kill_urb($p0: ref);
  free requires assertsPassed;



implementation usb_kill_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    return;
}



const usb_free_urb: ref;

axiom usb_free_urb == $sub.ref(0, 375035);

procedure usb_free_urb($p0: ref);
  free requires assertsPassed;



implementation usb_free_urb($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    return;
}



const atomic_dec: ref;

axiom atomic_dec == $sub.ref(0, 376067);

procedure atomic_dec($p0: ref);
  free requires assertsPassed;



implementation atomic_dec($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 733} devirtbounce(0, $p1, $p1);
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 377099);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 1} true;
    call {:si_unique_call 734} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 735} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 378131);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} _raw_spin_lock($p2);
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 379163);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    return;
}



const ldv_usb_submit_urb_23: ref;

axiom ldv_usb_submit_urb_23 == $sub.ref(0, 380195);

procedure ldv_usb_submit_urb_23($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_23($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} {:cexpr "ldv_usb_submit_urb_23:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 738} ldv_check_alloc_flags($i1);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_5078;

  corral_source_split_5078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} $p2 := ldv_undef_ptr();
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_187:
    assume !assertsPassed;
    return;
}



const ldv_usb_submit_urb_24: ref;

axiom ldv_usb_submit_urb_24 == $sub.ref(0, 381227);

procedure ldv_usb_submit_urb_24($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_24($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} {:cexpr "ldv_usb_submit_urb_24:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_check_alloc_flags($i1);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} $p2 := ldv_undef_ptr();
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5087;

  corral_source_split_5087:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;
}



const block_until_chase_response: ref;

axiom block_until_chase_response == $sub.ref(0, 382259);

procedure block_until_chase_response($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.19, $M.20, $M.21, $M.22, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr;



implementation block_until_chase_response($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $i22: i16;
  var $p23: ref;
  var $i24: i8;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i24;
  var $i33: i24;
  var $i34: i24;
  var $p35: ref;
  var $p36: ref;
  var $i37: i8;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i16;
  var $i44: i32;
  var $p45: ref;
  var $i46: i16;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i24;
  var $i56: i24;
  var $i57: i24;
  var $p58: ref;
  var $p59: ref;
  var $i60: i8;
  var $i61: i64;
  var $i62: i64;
  var $i63: i64;
  var $i64: i1;
  var $p65: ref;
  var $i66: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i16;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i1;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $i100: i24;
  var $i101: i24;
  var $i102: i24;
  var $p103: ref;
  var $p104: ref;
  var $i105: i8;
  var $i106: i64;
  var $i107: i64;
  var $i108: i64;
  var $i109: i1;
  var $i110: i32;
  var $p111: ref;
  var $i112: i16;
  var $i113: i32;
  var $i93: i32;
  var vslice_dummy_var_50: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 747} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} $p9 := get_current();
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p10, 0);
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p12, $p9);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p13, autoremove_wake_function);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p16, $p14);
    goto corral_source_split_5103;

  corral_source_split_5103:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p19, $p17);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i20 := 10;
    goto $bb1;

  $bb1:
    call $i20, $p21, $i22, $p23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $i46, $i47, $i48, $p65, $i66, $p68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $p94, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $i102, $p103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $i93, vslice_dummy_var_50 := block_until_chase_response_loop_$bb1($p0, $p1, $p2, $p5, $p8, $i20, $p21, $i22, $p23, $i24, $i25, $p26, $p27, $p28, $p29, $p30, $p31, $i32, $i33, $i34, $p35, $p36, $i37, $i38, $i39, $i40, $i41, $p42, $i43, $i44, $p45, $i46, $i47, $i48, $p65, $i66, $p68, $p69, $i70, $i71, $i72, $i73, $i74, $i75, $p94, $p95, $p96, $p97, $p98, $p99, $i100, $i101, $i102, $p103, $p104, $i105, $i106, $i107, $i108, $i109, $i110, $p111, $i112, $i113, $i93, vslice_dummy_var_50);
    goto $bb1_last;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    call {:si_unique_call 749} {:cexpr "lastCredits"} boogie_si_record_i16($i22);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_5111;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.0, $p23);
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i8.i1($i24);
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i25 == 1);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p26, .str);
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p27, .str.183);
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p28, .str.2);
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p29, .str.184);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $i32 := $load.i24($M.5, $p31);
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $i33 := $and.i24($i32, $sub.i24(0, 262144));
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    $i34 := $or.i24($i33, 944);
    goto corral_source_split_5128;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p31, $i34);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5130;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p35, 0);
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.6, $p36);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i38 := $zext.i8.i64($i37);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $i39 := $and.i64($i38, 1);
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 751} {:cexpr "tmp___0"} boogie_si_record_i64($i40);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $i43 := $load.i16($M.0, $p42);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i44 := $zext.i16.i32($i43);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i47 := $zext.i16.i32($i46);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i44, $i47);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} prepare_to_wait($p65, $p1, 2);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i66 := $sext.i32.i64(250);
    goto corral_source_split_5179;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} vslice_dummy_var_50 := schedule_timeout($i66);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} finish_wait($p68, $p1);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5183;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    $i70 := $load.i16($M.0, $p69);
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i70);
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i22);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i71, $i72);
    goto corral_source_split_5187;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i73 == 1);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p94, .str);
    goto corral_source_split_5195;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p95, .str.183);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p96, .str.2);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5200;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p97, .str.187);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_5203;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    $i100 := $load.i24($M.5, $p99);
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $i101 := $and.i24($i100, $sub.i24(0, 262144));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $i102 := $or.i24($i101, 970);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p99, $i102);
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p103, 0);
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $i105 := $load.i8($M.6, $p104);
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $i106 := $zext.i8.i64($i105);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $i107 := $and.i64($i106, 1);
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} $i108 := ldv__builtin_expect($i107, 0);
    call {:si_unique_call 761} {:cexpr "tmp___3"} boogie_si_record_i64($i108);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i109 := $ne.i64($i108, 0);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i93 := 10;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i20 := $i93;
    goto corral_source_split_5246_dummy;

  $bb24:
    assume $i109 == 1;
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    $i110 := $zext.i16.i32($i22);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    $i112 := $load.i16($M.0, $p111);
    goto corral_source_split_5251;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    $i113 := $zext.i16.i32($i112);
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32($p5, $p8, .str.187, .str.183, $i110, $i113);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb15:
    assume $i73 == 1;
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    $i74 := $sub.i32($i20, 1);
    call {:si_unique_call 759} {:cexpr "loop"} boogie_si_record_i32($i74);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $i75 := $eq.i32($i74, 0);
    goto corral_source_split_5191;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i93 := $i74;
    goto $bb23;

  $bb17:
    assume $i75 == 1;
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p76, 0);
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p77, .str);
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p78, .str.183);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str.2);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.186);
    goto corral_source_split_5227;

  corral_source_split_5227:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.5, $p82);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 964);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p82, $i85);
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p86, 0);
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.6, $p87);
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 763} {:cexpr "tmp___2"} boogie_si_record_i64($i91);
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    return;

  $bb19:
    assume $i92 == 1;
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 764} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p8, .str.186, .str.183);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb7:
    assume $i48 == 1;
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p49, .str);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p50, .str.183);
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p51, .str.2);
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p52, .str.185);
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    $i55 := $load.i24($M.5, $p54);
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $i56 := $and.i24($i55, $sub.i24(0, 262144));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $i57 := $or.i24($i56, 948);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p54, $i57);
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p58, 0);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i60 := $load.i8($M.6, $p59);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    $i61 := $zext.i8.i64($i60);
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $i62 := $and.i64($i61, 1);
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 753} $i63 := ldv__builtin_expect($i62, 0);
    call {:si_unique_call 754} {:cexpr "tmp___1"} boogie_si_record_i64($i63);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i64} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i64 == 1;
    goto corral_source_split_5174;

  corral_source_split_5174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p8, .str.185, .str.183);
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb4:
    assume $i41 == 1;
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p8, .str.184, .str.183);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb2:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5246_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_5108;
}



const get_current: ref;

axiom get_current == $sub.ref(0, 383291);

procedure get_current() returns ($r: ref);
  free requires assertsPassed;



implementation get_current() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p0 := devirtbounce.1(0, current_task);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const autoremove_wake_function: ref;

axiom autoremove_wake_function == $sub.ref(0, 384323);

procedure autoremove_wake_function($p0: ref, $i1: i32, $i2: i32, $p3: ref) returns ($r: i32);



const prepare_to_wait: ref;

axiom prepare_to_wait == $sub.ref(0, 385355);

procedure prepare_to_wait($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation prepare_to_wait($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 767} {:cexpr "prepare_to_wait:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    return;
}



const schedule_timeout: ref;

axiom schedule_timeout == $sub.ref(0, 386387);

procedure schedule_timeout($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 768} {:cexpr "schedule_timeout:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 1} true;
    call {:si_unique_call 769} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 770} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const finish_wait: ref;

axiom finish_wait == $sub.ref(0, 387419);

procedure finish_wait($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation finish_wait($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    return;
}



const get_lsr_info: ref;

axiom get_lsr_info == $sub.ref(0, 388451);

procedure get_lsr_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.14, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation get_lsr_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $i37: i64;
  var $i38: i1;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 771} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 0);
    goto corral_source_split_5265;

  corral_source_split_5265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} ldv_spin_lock();
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_5268;

  corral_source_split_5268:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5270;

  corral_source_split_5270:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_5272;

  corral_source_split_5272:
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i6, $i9);
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 777} spin_unlock_irqrestore($p34, $u0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p1);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p2);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} $i37 := copy_to_user($p35, $p36, 4);
    call {:si_unique_call 779} {:cexpr "tmp___0"} boogie_si_record_i64($i37);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    assume {:branchcond $i38} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb10:
    assume $i38 == 1;
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $i39 := $sub.i32(0, 14);
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_5276;

  corral_source_split_5276:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, 0);
    goto corral_source_split_5278;

  corral_source_split_5278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb4:
    assume $i14 == 1;
    goto corral_source_split_5280;

  corral_source_split_5280:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str);
    goto corral_source_split_5282;

  corral_source_split_5282:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.66);
    goto corral_source_split_5284;

  corral_source_split_5284:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.2);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.67);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.5, $p20);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 1495);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p20, $i23);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 775} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, 1);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i30 == 1;
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 776} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p33, .str.67, .str.66);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    goto $bb8;
}



const get_serial_info: ref;

axiom get_serial_info == $sub.ref(0, 389483);

procedure get_serial_info($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation get_serial_info($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i1;
  var $i5: i32;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $p2 := $alloc($mul.ref(72, $zext.i32.i64(1)));
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_5325;

  corral_source_split_5325:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p2);
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 781} cmdloc_dummy_var_16 := $memset.i8(cmdloc_dummy_var_15, $p6, 0, 72, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5333;

  corral_source_split_5333:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, 4);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 3016)), $mul.ref(1120, 1));
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_5338;

  corral_source_split_5338:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(4, 1));
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, $i11);
    goto corral_source_split_5340;

  corral_source_split_5340:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 3016)), $mul.ref(1124, 1));
    goto corral_source_split_5343;

  corral_source_split_5343:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(8, 1));
    goto corral_source_split_5346;

  corral_source_split_5346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, $i17);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(12, 1));
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 0);
    goto corral_source_split_5349;

  corral_source_split_5349:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(16, 1));
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, 192);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_5352;

  corral_source_split_5352:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(20, 1));
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p24, $i23);
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(28, 1));
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p25, 9600);
    goto corral_source_split_5358;

  corral_source_split_5358:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p26, 1250);
    goto corral_source_split_5360;

  corral_source_split_5360:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 72)), $mul.ref(40, 1));
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p27, 7500);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p1);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p2);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $i30 := copy_to_user($p28, $p29, 72);
    call {:si_unique_call 783} {:cexpr "tmp___0"} boogie_si_record_i64($i30);
    goto corral_source_split_5365;

  corral_source_split_5365:
    assume {:verifier.code 0} true;
    $i31 := $ne.i64($i30, 0);
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5329;

  corral_source_split_5329:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 14);
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 390515);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const copy_to_user: ref;

axiom copy_to_user == $sub.ref(0, 391547);

procedure copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64);
  free requires assertsPassed;



implementation copy_to_user($p0: ref, $p1: ref, $i2: i64) returns ($r: i64)
{
  var $i3: i32;
  var $i4: i64;
  var $i5: i32;
  var $i6: i1;
  var $i8: i64;
  var $i9: i1;
  var $i7: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} {:cexpr "copy_to_user:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $i3 := __builtinx_object_size.ref.i32($p1, 0);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    $i4 := $sext.i32.i64($i3);
    call {:si_unique_call 786} {:cexpr "tmp"} boogie_si_record_i64($i4);
    goto corral_source_split_5372;

  corral_source_split_5372:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i4);
    call {:si_unique_call 787} {:cexpr "sz"} boogie_si_record_i32($i5);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} __might_fault(.str.68, 732);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 0);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i5);
    goto corral_source_split_5384;

  corral_source_split_5384:
    assume {:verifier.code 0} true;
    $i9 := $uge.i64($i8, $i2);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i7 := $i9;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i7);
    goto corral_source_split_5378;

  corral_source_split_5378:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 789} $i12 := ldv__builtin_expect($i11, 1);
    call {:si_unique_call 790} {:cexpr "tmp___0"} boogie_si_record_i64($i12);
    goto corral_source_split_5380;

  corral_source_split_5380:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 793} __copy_to_user_overflow();
    assume {:verifier.code 0} true;
    $i16 := $i2;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $i15 := _copy_to_user($p0, $p1, $i14);
    call {:si_unique_call 792} {:cexpr "n"} boogie_si_record_i64($i15);
    goto corral_source_split_5389;

  corral_source_split_5389:
    assume {:verifier.code 0} true;
    $i16 := $i15;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;
}



const __builtinx_object_size: ref;

axiom __builtinx_object_size == $sub.ref(0, 392579);

procedure __builtinx_object_size() returns ($r: i32);



procedure __builtinx_object_size.ref.i32(p.0: ref, p.1: i32) returns ($r: i32);



const __might_fault: ref;

axiom __might_fault == $sub.ref(0, 393611);

procedure __might_fault($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation __might_fault($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} {:cexpr "__might_fault:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    return;
}



const _copy_to_user: ref;

axiom _copy_to_user == $sub.ref(0, 394643);

procedure _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation _copy_to_user($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 795} {:cexpr "_copy_to_user:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 1} true;
    call {:si_unique_call 796} $i3 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 797} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i3);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const __copy_to_user_overflow: ref;

axiom __copy_to_user_overflow == $sub.ref(0, 395675);

procedure __copy_to_user_overflow();
  free requires assertsPassed;



implementation __copy_to_user_overflow()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    return;
}



const block_until_tx_empty: ref;

axiom block_until_tx_empty == $sub.ref(0, 396707);

procedure block_until_tx_empty($p0: ref);
  free requires assertsPassed;
  modifies $M.7, $M.19, $M.20, $M.21, $M.22, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation block_until_tx_empty($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p15: ref;
  var $p16: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i24;
  var $i32: i24;
  var $i33: i24;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i1;
  var $i23: i32;
  var $i24: i32;
  var $p41: ref;
  var $i42: i64;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i24;
  var $i52: i24;
  var $i53: i24;
  var $p54: ref;
  var $p55: ref;
  var $i56: i8;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i1;
  var $p61: ref;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var vslice_dummy_var_51: i64;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 799} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 801} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_5403;

  corral_source_split_5403:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p8 := get_current();
    goto corral_source_split_5406;

  corral_source_split_5406:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $M.7 := $store.i32($M.7, $p9, 0);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $M.19 := $store.ref($M.19, $p11, $p8);
    goto corral_source_split_5411;

  corral_source_split_5411:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $M.20 := $store.ref($M.20, $p12, autoremove_wake_function);
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(0, 1));
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p15, $p13);
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1)), $mul.ref(8, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p18, $p16);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_5420;

  corral_source_split_5420:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    call {:si_unique_call 803} {:cexpr "lastCount"} boogie_si_record_i32($i21);
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i22 == 1);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i21, 30;
    goto $bb4;

  $bb4:
    call $i23, $i24, $p41, $i42, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i82, $i83, $i84, vslice_dummy_var_51 := block_until_tx_empty_loop_$bb4($p0, $p1, $p3, $p7, $p20, $i23, $i24, $p41, $i42, $p44, $p45, $p46, $p47, $p48, $p49, $p50, $i51, $i52, $i53, $p54, $p55, $i56, $i57, $i58, $i59, $i60, $p61, $i62, $i63, $i64, $i65, $i82, $i83, $i84, vslice_dummy_var_51);
    goto $bb4_last;

  $bb10:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_5454;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} prepare_to_wait($p41, $p1, 2);
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64(25);
    goto corral_source_split_5456;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} vslice_dummy_var_51 := schedule_timeout($i42);
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} finish_wait($p44, $p1);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p45, .str);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5462;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.179);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.2);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str.181);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i51 := $load.i24($M.5, $p50);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    $i52 := $and.i24($i51, $sub.i24(0, 262144));
    goto corral_source_split_5471;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    $i53 := $or.i24($i52, 1012);
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p50, $i53);
    goto corral_source_split_5473;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p54, 0);
    goto corral_source_split_5475;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.6, $p55);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i64($i56);
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $i58 := $and.i64($i57, 1);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} $i59 := ldv__builtin_expect($i58, 0);
    call {:si_unique_call 811} {:cexpr "tmp___1"} boogie_si_record_i64($i59);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    $p61 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, $i23);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i82 := 30;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    $i83 := $load.i32($M.0, $p20);
    call {:si_unique_call 817} {:cexpr "lastCount"} boogie_si_record_i32($i83);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $i84 := $eq.i32($i83, 0);
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb23;

  $bb23:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    $i23, $i24 := $i83, $i82;
    goto $bb23_dummy;

  $bb5:
    assume $i84 == 1;
    goto corral_source_split_5449;

  corral_source_split_5449:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5424;

  corral_source_split_5424:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p25, .str);
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p26, .str.179);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p27, .str.2);
    goto corral_source_split_5429;

  corral_source_split_5429:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p28, .str.180);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i31 := $load.i24($M.5, $p30);
    goto corral_source_split_5434;

  corral_source_split_5434:
    assume {:verifier.code 0} true;
    $i32 := $and.i24($i31, $sub.i24(0, 262144));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i33 := $or.i24($i32, 1002);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p30, $i33);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p34, 0);
    goto corral_source_split_5439;

  corral_source_split_5439:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.6, $p35);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i64($i36);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i38 := $and.i64($i37, 1);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i39 := ldv__builtin_expect($i38, 0);
    call {:si_unique_call 805} {:cexpr "tmp___0"} boogie_si_record_i64($i39);
    goto corral_source_split_5444;

  corral_source_split_5444:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i40 == 1;
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p7, .str.180, .str.179);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb14:
    assume $i63 == 1;
    goto corral_source_split_5490;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    $i64 := $sub.i32($i24, 1);
    call {:si_unique_call 813} {:cexpr "loop"} boogie_si_record_i32($i64);
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $i65 := $eq.i32($i64, 0);
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i82 := $i64;
    goto $bb22;

  $bb16:
    assume $i65 == 1;
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5495;

  corral_source_split_5495:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p66, .str);
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p67, .str.179);
    goto corral_source_split_5498;

  corral_source_split_5498:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p68, .str.2);
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p69, .str.182);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.5, $p71);
    goto corral_source_split_5505;

  corral_source_split_5505:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 1018);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p71, $i74);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p75, 0);
    goto corral_source_split_5510;

  corral_source_split_5510:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.6, $p76);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_5514;

  corral_source_split_5514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 814} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 815} {:cexpr "tmp___2"} boogie_si_record_i64($i80);
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_5516;

  corral_source_split_5516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb18:
    assume $i81 == 1;
    goto corral_source_split_5518;

  corral_source_split_5518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p7, .str.182, .str.179);
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb11:
    assume $i60 == 1;
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p7, .str.181, .str.179);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i22 == 1;
    goto $bb2;

  $bb23_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;
}



const usb_fill_int_urb: ref;

axiom usb_fill_int_urb == $sub.ref(0, 397739);

procedure usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_fill_int_urb($p0: ref, $p1: ref, $i2: i32, $p3: ref, $i4: i32, $p5: ref, $p6: ref, $i7: i32)
{
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i1;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} {:cexpr "usb_fill_int_urb:arg:pipe"} boogie_si_record_i32($i2);
    call {:si_unique_call 819} {:cexpr "usb_fill_int_urb:arg:buffer_length"} boogie_si_record_i32($i4);
    call {:si_unique_call 820} {:cexpr "usb_fill_int_urb:arg:interval"} boogie_si_record_i32($i7);
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p1);
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, $i2);
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p3);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i4);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $p5);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(176, 1));
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p6);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_5538;

  corral_source_split_5538:
    assume {:verifier.code 0} true;
    $i15 := $load.i32($M.0, $p14);
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_5540;

  corral_source_split_5540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i16 == 1);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 5);
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i19 == 1);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_5551;

  corral_source_split_5551:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i7);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(160, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p28, $sub.i32(0, 1));
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i19 == 1;
    goto $bb2;

  $bb2:
    call {:si_unique_call 821} {:cexpr "usb_fill_int_urb:arg:_max1"} boogie_si_record_i32($i7);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $i20 := $sgt.i32($i7, 1);
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $i21 := 1;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i21, 16);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i22 == 1);
    goto corral_source_split_5562;

  corral_source_split_5562:
    assume {:verifier.code 0} true;
    $i23 := 16;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $i24 := $add.i32($i23, $sub.i32(0, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $i25 := $shl.i32(1, $i24);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p26, $i25);
    goto corral_source_split_5568;

  corral_source_split_5568:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb9:
    assume $i22 == 1;
    goto corral_source_split_5560;

  corral_source_split_5560:
    assume {:verifier.code 0} true;
    $i23 := $i21;
    goto $bb11;

  $bb6:
    assume $i20 == 1;
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i21 := $i7;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb2;
}



const ldv_usb_submit_urb_26: ref;

axiom ldv_usb_submit_urb_26 == $sub.ref(0, 398771);

procedure ldv_usb_submit_urb_26($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_26($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 822} {:cexpr "ldv_usb_submit_urb_26:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} ldv_check_alloc_flags($i1);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 824} $p2 := ldv_undef_ptr();
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_193:
    assume !assertsPassed;
    return;
}



const __init_waitqueue_head: ref;

axiom __init_waitqueue_head == $sub.ref(0, 399803);

procedure __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __init_waitqueue_head($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    return;
}



const __might_sleep: ref;

axiom __might_sleep == $sub.ref(0, 400835);

procedure __might_sleep($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation __might_sleep($p0: ref, $i1: i32, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} {:cexpr "__might_sleep:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 826} {:cexpr "__might_sleep:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 401867);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.21, $M.22;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5583;

  corral_source_split_5583:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $M.21 := $store.ref($M.21, $p1, $p0);
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $M.22 := $store.ref($M.22, $p2, $p0);
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    return;
}



const prepare_to_wait_event: ref;

axiom prepare_to_wait_event == $sub.ref(0, 402899);

procedure prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64);
  free requires assertsPassed;



implementation prepare_to_wait_event($p0: ref, $p1: ref, $i2: i32) returns ($r: i64)
{
  var $i3: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 827} {:cexpr "prepare_to_wait_event:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 1} true;
    call {:si_unique_call 828} $i3 := __VERIFIER_nondet_long();
    call {:si_unique_call 829} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i3);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ldv_usb_alloc_urb_27: ref;

axiom ldv_usb_alloc_urb_27 == $sub.ref(0, 403931);

procedure ldv_usb_alloc_urb_27($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_27($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} {:cexpr "ldv_usb_alloc_urb_27:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 831} {:cexpr "ldv_usb_alloc_urb_27:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} ldv_check_alloc_flags($i1);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $p2 := ldv_undef_ptr();
    goto corral_source_split_5594;

  corral_source_split_5594:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5595;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 404963);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 405995);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_serial_port_data: ref;

axiom usb_set_serial_port_data == $sub.ref(0, 407027);

procedure usb_set_serial_port_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_port_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 3016)), $mul.ref(1592, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} dev_set_drvdata($p2, $p1);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 408059);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    return;
}



const usb_set_serial_data: ref;

axiom usb_set_serial_data == $sub.ref(0, 409091);

procedure usb_set_serial_data($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation usb_set_serial_data($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(264, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    return;
}



const usb_string: ref;

axiom usb_string == $sub.ref(0, 410123);

procedure usb_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_string($p0: ref, $i1: i32, $p2: ref, $i3: i64) returns ($r: i32)
{
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 835} {:cexpr "usb_string:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 836} {:cexpr "usb_string:arg:arg3"} boogie_si_record_i64($i3);
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 1} true;
    call {:si_unique_call 837} $i4 := __VERIFIER_nondet_int();
    call {:si_unique_call 838} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i4);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 411155);

procedure _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    return;
}



const get_epic_descriptor: ref;

axiom get_epic_descriptor == $sub.ref(0, 412187);

procedure get_epic_descriptor($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation get_epic_descriptor($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i8;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $p41: ref;
  var $p42: ref;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $i46: i16;
  var $p47: ref;
  var $p48: ref;
  var $i49: i8;
  var $p50: ref;
  var $p51: ref;
  var $i52: i8;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i24;
  var $i68: i24;
  var $i69: i24;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $i83: i24;
  var $i84: i24;
  var $i85: i24;
  var $p86: ref;
  var $p87: ref;
  var $i88: i8;
  var $i89: i64;
  var $i90: i64;
  var $i91: i64;
  var $i92: i1;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $i97: i1;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i24;
  var $i106: i24;
  var $i107: i24;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $i114: i1;
  var $p115: ref;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $i119: i1;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $i127: i24;
  var $i128: i24;
  var $i129: i24;
  var $p130: ref;
  var $p131: ref;
  var $i132: i8;
  var $i133: i64;
  var $i134: i64;
  var $i135: i64;
  var $i136: i1;
  var $p137: ref;
  var $p138: ref;
  var $i139: i8;
  var $i140: i32;
  var $i141: i1;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i24;
  var $i150: i24;
  var $i151: i24;
  var $p152: ref;
  var $p153: ref;
  var $i154: i8;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $i171: i24;
  var $i172: i24;
  var $i173: i24;
  var $p174: ref;
  var $p175: ref;
  var $i176: i8;
  var $i177: i64;
  var $i178: i64;
  var $i179: i64;
  var $i180: i1;
  var $p181: ref;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $i185: i1;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i24;
  var $i194: i24;
  var $i195: i24;
  var $p196: ref;
  var $p197: ref;
  var $i198: i8;
  var $i199: i64;
  var $i200: i64;
  var $i201: i64;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i32;
  var $i207: i1;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i24;
  var $i216: i24;
  var $i217: i24;
  var $p218: ref;
  var $p219: ref;
  var $i220: i8;
  var $i221: i64;
  var $i222: i64;
  var $i223: i64;
  var $i224: i1;
  var $p225: ref;
  var $p226: ref;
  var $i227: i8;
  var $i228: i32;
  var $i229: i1;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $i237: i24;
  var $i238: i24;
  var $i239: i24;
  var $p240: ref;
  var $p241: ref;
  var $i242: i8;
  var $i243: i64;
  var $i244: i64;
  var $i245: i64;
  var $i246: i1;
  var $p247: ref;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $p258: ref;
  var $i259: i24;
  var $i260: i24;
  var $i261: i24;
  var $p262: ref;
  var $p263: ref;
  var $i264: i8;
  var $i265: i64;
  var $i266: i64;
  var $i267: i64;
  var $i268: i1;
  var $p269: ref;
  var $p270: ref;
  var $i271: i8;
  var $i272: i32;
  var $i273: i1;
  var $p274: ref;
  var $p275: ref;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $i281: i24;
  var $i282: i24;
  var $i283: i24;
  var $p284: ref;
  var $p285: ref;
  var $i286: i8;
  var $i287: i64;
  var $i288: i64;
  var $i289: i64;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $i293: i8;
  var $i294: i32;
  var $i295: i1;
  var $p296: ref;
  var $p297: ref;
  var $p298: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $i303: i24;
  var $i304: i24;
  var $i305: i24;
  var $p306: ref;
  var $p307: ref;
  var $i308: i8;
  var $i309: i64;
  var $i310: i64;
  var $i311: i64;
  var $i312: i1;
  var $p313: ref;
  var $p314: ref;
  var $i315: i8;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $p319: ref;
  var $p320: ref;
  var $p321: ref;
  var $p322: ref;
  var $p323: ref;
  var $p324: ref;
  var $i325: i24;
  var $i326: i24;
  var $i327: i24;
  var $p328: ref;
  var $p329: ref;
  var $i330: i8;
  var $i331: i64;
  var $i332: i64;
  var $i333: i64;
  var $i334: i1;
  var $p335: ref;
  var $p336: ref;
  var $i337: i8;
  var $i338: i32;
  var $i339: i1;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $i347: i24;
  var $i348: i24;
  var $i349: i24;
  var $p350: ref;
  var $p351: ref;
  var $i352: i8;
  var $i353: i64;
  var $i354: i64;
  var $i355: i64;
  var $i356: i1;
  var $p357: ref;
  var $p358: ref;
  var $i359: i8;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 842} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 844} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 846} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 847} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 848} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 850} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_5622;

  corral_source_split_5622:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1));
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_5629;

  corral_source_split_5629:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_5631;

  corral_source_split_5631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 853} $i25 := __create_pipe($p24, 0);
    call {:si_unique_call 854} {:cexpr "tmp"} boogie_si_record_i32($i25);
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p16, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i28 := $or.i32($i25, $sub.i32(0, 2147483520));
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1));
    goto corral_source_split_5636;

  corral_source_split_5636:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $i31 := usb_control_msg($p27, $i28, 1, $sub.i8(0, 64), 0, 0, $p30, 24, 300);
    call {:si_unique_call 856} {:cexpr "result"} boogie_si_record_i32($i31);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i32 := $sgt.i32($i31, 0);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb1:
    assume $i32 == 1;
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1156, 1));
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p33, 1);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p17);
    goto corral_source_split_5644;

  corral_source_split_5644:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    call {:si_unique_call 857} cmdloc_dummy_var_18 := $memset.i8(cmdloc_dummy_var_17, $p34, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_18;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(3, 1));
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(2, 1));
    goto corral_source_split_5646;

  corral_source_split_5646:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p37, $i36);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(3, 1));
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, 0);
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(8, 1));
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    $p41 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(16, 1));
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p41, $i40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(9, 1));
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i43 := $load.i8($M.0, $p42);
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(17, 1));
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i43);
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(10, 1));
    goto corral_source_split_5652;

  corral_source_split_5652:
    assume {:verifier.code 0} true;
    $i46 := $load.i16($M.0, $p45);
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(18, 1));
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p47, $i46);
    $p48 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(4, 1));
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(24, 1));
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p50, $i49);
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(2, 1));
    goto corral_source_split_5656;

  corral_source_split_5656:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    $p53 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(25, 1));
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p53, $i52);
    $p54 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(28, 1));
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(12, 1));
    goto corral_source_split_5658;

  corral_source_split_5658:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p54);
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p55);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_19 := $M.0;
    cmdloc_dummy_var_20 := $M.0;
    call {:si_unique_call 858} cmdloc_dummy_var_21 := $memcpy.i8(cmdloc_dummy_var_19, cmdloc_dummy_var_20, $p56, $p57, 12, $zext.i32.i64(4), 0 == 1);
    $M.0 := cmdloc_dummy_var_21;
    $p58 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(0, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p58, 19);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} dump_product_info($p0, $p17);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1132, 1)), $mul.ref(12, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p61, .str);
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p62, .str.87);
    goto corral_source_split_5668;

  corral_source_split_5668:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p63, .str.2);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p64, .str.88);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_5674;

  corral_source_split_5674:
    assume {:verifier.code 0} true;
    $i67 := $load.i24($M.5, $p66);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $i68 := $and.i24($i67, $sub.i24(0, 262144));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i69 := $or.i24($i68, 523);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p66, $i69);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p70, 0);
    goto corral_source_split_5680;

  corral_source_split_5680:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.6, $p71);
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i64($i72);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i73, 1);
    goto corral_source_split_5684;

  corral_source_split_5684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 860} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 861} {:cexpr "tmp___0"} boogie_si_record_i64($i75);
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p77, .str);
    goto corral_source_split_5692;

  corral_source_split_5692:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p78, .str.87);
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p79, .str.2);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p80, .str.89);
    goto corral_source_split_5698;

  corral_source_split_5698:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i83 := $load.i24($M.5, $p82);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i84 := $and.i24($i83, $sub.i24(0, 262144));
    goto corral_source_split_5702;

  corral_source_split_5702:
    assume {:verifier.code 0} true;
    $i85 := $or.i24($i84, 524);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p82, $i85);
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p86, 0);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.6, $p87);
    goto corral_source_split_5708;

  corral_source_split_5708:
    assume {:verifier.code 0} true;
    $i89 := $zext.i8.i64($i88);
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i90 := $and.i64($i89, 1);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} $i91 := ldv__builtin_expect($i90, 0);
    call {:si_unique_call 864} {:cexpr "tmp___1"} boogie_si_record_i64($i91);
    goto corral_source_split_5711;

  corral_source_split_5711:
    assume {:verifier.code 0} true;
    $i92 := $ne.i64($i91, 0);
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i92 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5723;

  corral_source_split_5723:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p99, .str);
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5725;

  corral_source_split_5725:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p100, .str.87);
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p101, .str.2);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p102, .str.92);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i105 := $load.i24($M.5, $p104);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    $i106 := $and.i24($i105, $sub.i24(0, 262144));
    goto corral_source_split_5734;

  corral_source_split_5734:
    assume {:verifier.code 0} true;
    $i107 := $or.i24($i106, 525);
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p104, $i107);
    goto corral_source_split_5736;

  corral_source_split_5736:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p108, 0);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.6, $p109);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i64($i110);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $i112 := $and.i64($i111, 1);
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i113 := ldv__builtin_expect($i112, 0);
    call {:si_unique_call 867} {:cexpr "tmp___2"} boogie_si_record_i64($i113);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p121, .str);
    goto corral_source_split_5756;

  corral_source_split_5756:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p122, .str.87);
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p123, .str.2);
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p124, .str.93);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    $p126 := $bitcast.ref.ref($p125);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $i127 := $load.i24($M.5, $p126);
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i128 := $and.i24($i127, $sub.i24(0, 262144));
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i129 := $or.i24($i128, 526);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p126, $i129);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p130, 0);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i132 := $load.i8($M.6, $p131);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    $i133 := $zext.i8.i64($i132);
    goto corral_source_split_5773;

  corral_source_split_5773:
    assume {:verifier.code 0} true;
    $i134 := $and.i64($i133, 1);
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 869} $i135 := ldv__builtin_expect($i134, 0);
    call {:si_unique_call 870} {:cexpr "tmp___3"} boogie_si_record_i64($i135);
    goto corral_source_split_5775;

  corral_source_split_5775:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p143, .str);
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p144, .str.87);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p145, .str.2);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p146, .str.94);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_5796;

  corral_source_split_5796:
    assume {:verifier.code 0} true;
    $i149 := $load.i24($M.5, $p148);
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $i150 := $and.i24($i149, $sub.i24(0, 262144));
    goto corral_source_split_5798;

  corral_source_split_5798:
    assume {:verifier.code 0} true;
    $i151 := $or.i24($i150, 527);
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p148, $i151);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p152, 0);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.6, $p153);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i64($i154);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i156 := $and.i64($i155, 1);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 872} $i157 := ldv__builtin_expect($i156, 0);
    call {:si_unique_call 873} {:cexpr "tmp___4"} boogie_si_record_i64($i157);
    goto corral_source_split_5807;

  corral_source_split_5807:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p165, .str);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p166, .str.87);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p167, .str.2);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p168, .str.95);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $p170 := $bitcast.ref.ref($p169);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    $i171 := $load.i24($M.5, $p170);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i172 := $and.i24($i171, $sub.i24(0, 262144));
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    $i173 := $or.i24($i172, 528);
    goto corral_source_split_5831;

  corral_source_split_5831:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p170, $i173);
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5833;

  corral_source_split_5833:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p174, 0);
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.6, $p175);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i64($i176);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    $i178 := $and.i64($i177, 1);
    goto corral_source_split_5838;

  corral_source_split_5838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $i179 := ldv__builtin_expect($i178, 0);
    call {:si_unique_call 876} {:cexpr "tmp___5"} boogie_si_record_i64($i179);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $i180 := $ne.i64($i179, 0);
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i180} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i180 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p187, .str);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5853;

  corral_source_split_5853:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p188, .str.87);
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p189, .str.2);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5857;

  corral_source_split_5857:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p190, .str.96);
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5859;

  corral_source_split_5859:
    assume {:verifier.code 0} true;
    $p192 := $bitcast.ref.ref($p191);
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $i193 := $load.i24($M.5, $p192);
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $i194 := $and.i24($i193, $sub.i24(0, 262144));
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $i195 := $or.i24($i194, 529);
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p192, $i195);
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p196, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i198 := $load.i8($M.6, $p197);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    $i199 := $zext.i8.i64($i198);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i200 := $and.i64($i199, 1);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i201 := ldv__builtin_expect($i200, 0);
    call {:si_unique_call 879} {:cexpr "tmp___6"} boogie_si_record_i64($i201);
    goto corral_source_split_5871;

  corral_source_split_5871:
    assume {:verifier.code 0} true;
    $i202 := $ne.i64($i201, 0);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5883;

  corral_source_split_5883:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p209, .str);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p210, .str.87);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p211, .str.2);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p212, .str.97);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $p214 := $bitcast.ref.ref($p213);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $i215 := $load.i24($M.5, $p214);
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $i216 := $and.i24($i215, $sub.i24(0, 262144));
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i217 := $or.i24($i216, 530);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p214, $i217);
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $p218 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p218, 0);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.6, $p219);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i64($i220);
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i222 := $and.i64($i221, 1);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 881} $i223 := ldv__builtin_expect($i222, 0);
    call {:si_unique_call 882} {:cexpr "tmp___7"} boogie_si_record_i64($i223);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i224 := $ne.i64($i223, 0);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    assume {:branchcond $i224} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p231, .str);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p232, .str.87);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p233, .str.2);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p234, .str.98);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p236 := $bitcast.ref.ref($p235);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i237 := $load.i24($M.5, $p236);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i238 := $and.i24($i237, $sub.i24(0, 262144));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i239 := $or.i24($i238, 531);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p236, $i239);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p240, 0);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i242 := $load.i8($M.6, $p241);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i243 := $zext.i8.i64($i242);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i244 := $and.i64($i243, 1);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 884} $i245 := ldv__builtin_expect($i244, 0);
    call {:si_unique_call 885} {:cexpr "tmp___8"} boogie_si_record_i64($i245);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i246 := $ne.i64($i245, 0);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    assume {:branchcond $i246} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i246 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p253, .str);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p254, .str.87);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p255, .str.2);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5953;

  corral_source_split_5953:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p256, .str.99);
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    $p258 := $bitcast.ref.ref($p257);
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $i259 := $load.i24($M.5, $p258);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $i260 := $and.i24($i259, $sub.i24(0, 262144));
    goto corral_source_split_5958;

  corral_source_split_5958:
    assume {:verifier.code 0} true;
    $i261 := $or.i24($i260, 532);
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p258, $i261);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p262, 0);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    $i264 := $load.i8($M.6, $p263);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i265 := $zext.i8.i64($i264);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    $i266 := $and.i64($i265, 1);
    goto corral_source_split_5966;

  corral_source_split_5966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 887} $i267 := ldv__builtin_expect($i266, 0);
    call {:si_unique_call 888} {:cexpr "tmp___9"} boogie_si_record_i64($i267);
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    $i268 := $ne.i64($i267, 0);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p275 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p275, .str);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5981;

  corral_source_split_5981:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p276, .str.87);
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $p277 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p277, .str.2);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p278, .str.100);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    $p280 := $bitcast.ref.ref($p279);
    goto corral_source_split_5988;

  corral_source_split_5988:
    assume {:verifier.code 0} true;
    $i281 := $load.i24($M.5, $p280);
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $i282 := $and.i24($i281, $sub.i24(0, 262144));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i283 := $or.i24($i282, 533);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p280, $i283);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p284, 0);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5995;

  corral_source_split_5995:
    assume {:verifier.code 0} true;
    $i286 := $load.i8($M.6, $p285);
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $i287 := $zext.i8.i64($i286);
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i288 := $and.i64($i287, 1);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    call {:si_unique_call 890} $i289 := ldv__builtin_expect($i288, 0);
    call {:si_unique_call 891} {:cexpr "tmp___10"} boogie_si_record_i64($i289);
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $i290 := $ne.i64($i289, 0);
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p297 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p297, .str);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p298, .str.87);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p299, .str.2);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p300 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p300, .str.101);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p302 := $bitcast.ref.ref($p301);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    $i303 := $load.i24($M.5, $p302);
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $i304 := $and.i24($i303, $sub.i24(0, 262144));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $i305 := $or.i24($i304, 534);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p302, $i305);
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p306, 0);
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $i308 := $load.i8($M.6, $p307);
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $i309 := $zext.i8.i64($i308);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    $i310 := $and.i64($i309, 1);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $i311 := ldv__builtin_expect($i310, 0);
    call {:si_unique_call 894} {:cexpr "tmp___11"} boogie_si_record_i64($i311);
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i312 := $ne.i64($i311, 0);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i312 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p319, .str);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p320, .str.87);
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $p321 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p321, .str.2);
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $p322 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p322, .str.102);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    $p323 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p324 := $bitcast.ref.ref($p323);
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $i325 := $load.i24($M.5, $p324);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    $i326 := $and.i24($i325, $sub.i24(0, 262144));
    goto corral_source_split_6054;

  corral_source_split_6054:
    assume {:verifier.code 0} true;
    $i327 := $or.i24($i326, 535);
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p324, $i327);
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p328 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p328, 0);
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p329 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i330 := $load.i8($M.6, $p329);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i331 := $zext.i8.i64($i330);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i332 := $and.i64($i331, 1);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 896} $i333 := ldv__builtin_expect($i332, 0);
    call {:si_unique_call 897} {:cexpr "tmp___12"} boogie_si_record_i64($i333);
    goto corral_source_split_6063;

  corral_source_split_6063:
    assume {:verifier.code 0} true;
    $i334 := $ne.i64($i333, 0);
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p341, .str);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6077;

  corral_source_split_6077:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p342, .str.87);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6079;

  corral_source_split_6079:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p343, .str.2);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    $p344 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p344, .str.103);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $p345 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    $p346 := $bitcast.ref.ref($p345);
    goto corral_source_split_6084;

  corral_source_split_6084:
    assume {:verifier.code 0} true;
    $i347 := $load.i24($M.5, $p346);
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $i348 := $and.i24($i347, $sub.i24(0, 262144));
    goto corral_source_split_6086;

  corral_source_split_6086:
    assume {:verifier.code 0} true;
    $i349 := $or.i24($i348, 536);
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p346, $i349);
    goto corral_source_split_6088;

  corral_source_split_6088:
    assume {:verifier.code 0} true;
    $p350 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p350, 0);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $p351 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i352 := $load.i8($M.6, $p351);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i353 := $zext.i8.i64($i352);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i354 := $and.i64($i353, 1);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $i355 := ldv__builtin_expect($i354, 0);
    call {:si_unique_call 900} {:cexpr "tmp___13"} boogie_si_record_i64($i355);
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i356 := $ne.i64($i355, 0);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    assume {:branchcond $i356} true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i356 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb42:
    assume $i356 == 1;
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $p357 := $bitcast.ref.ref($p60);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($p357, $mul.ref(8, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i359 := $load.i8($M.0, $p358);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i360 := $zext.i8.i32($i359);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $i361 := $ne.i32($i360, 0);
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $p362 := (if $i361 == 1 then .str.90 else .str.91);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} __dynamic_dev_dbg.ref.ref.ref.ref($p14, $p21, .str.103, $p362);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb39:
    assume $i334 == 1;
    goto corral_source_split_6066;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    $p335 := $bitcast.ref.ref($p60);
    goto corral_source_split_6067;

  corral_source_split_6067:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($p335, $mul.ref(5, 1));
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $i337 := $load.i8($M.0, $p336);
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $i338 := $zext.i8.i32($i337);
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    $i339 := $ne.i32($i338, 0);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    $p340 := (if $i339 == 1 then .str.90 else .str.91);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 898} __dynamic_dev_dbg.ref.ref.ref.ref($p13, $p21, .str.102, $p340);
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb36:
    assume $i312 == 1;
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $p313 := $bitcast.ref.ref($p60);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($p313, $mul.ref(5, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i315 := $load.i8($M.0, $p314);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $i316 := $zext.i8.i32($i315);
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $i317 := $ne.i32($i316, 0);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p318 := (if $i317 == 1 then .str.90 else .str.91);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} __dynamic_dev_dbg.ref.ref.ref.ref($p12, $p21, .str.101, $p318);
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb33:
    assume $i290 == 1;
    goto corral_source_split_6002;

  corral_source_split_6002:
    assume {:verifier.code 0} true;
    $p291 := $bitcast.ref.ref($p60);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($p291, $mul.ref(5, 1));
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i293 := $load.i8($M.0, $p292);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i294 := $zext.i8.i32($i293);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    $i295 := $ne.i32($i294, 0);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $p296 := (if $i295 == 1 then .str.90 else .str.91);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} __dynamic_dev_dbg.ref.ref.ref.ref($p11, $p21, .str.100, $p296);
    goto corral_source_split_6009;

  corral_source_split_6009:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb30:
    assume $i268 == 1;
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $p269 := $bitcast.ref.ref($p60);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($p269, $mul.ref(4, 1));
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.0, $p270);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i32($i271);
    goto corral_source_split_5974;

  corral_source_split_5974:
    assume {:verifier.code 0} true;
    $i273 := $ne.i32($i272, 0);
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p274 := (if $i273 == 1 then .str.90 else .str.91);
    goto corral_source_split_5976;

  corral_source_split_5976:
    assume {:verifier.code 0} true;
    call {:si_unique_call 889} __dynamic_dev_dbg.ref.ref.ref.ref($p10, $p21, .str.99, $p274);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i246 == 1;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    $p247 := $bitcast.ref.ref($p60);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($p247, $mul.ref(4, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.0, $p248);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    $i251 := $ne.i32($i250, 0);
    goto corral_source_split_5943;

  corral_source_split_5943:
    assume {:verifier.code 0} true;
    $p252 := (if $i251 == 1 then .str.90 else .str.91);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} __dynamic_dev_dbg.ref.ref.ref.ref($p9, $p21, .str.98, $p252);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb24:
    assume $i224 == 1;
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    $p225 := $bitcast.ref.ref($p60);
    goto corral_source_split_5907;

  corral_source_split_5907:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($p225, $mul.ref(4, 1));
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    $i227 := $load.i8($M.0, $p226);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $i228 := $zext.i8.i32($i227);
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $i229 := $ne.i32($i228, 0);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    $p230 := (if $i229 == 1 then .str.90 else .str.91);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 883} __dynamic_dev_dbg.ref.ref.ref.ref($p8, $p21, .str.97, $p230);
    goto corral_source_split_5913;

  corral_source_split_5913:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb21:
    assume $i202 == 1;
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p203 := $bitcast.ref.ref($p60);
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($p203, $mul.ref(4, 1));
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.0, $p204);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i32($i205);
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $i207 := $ne.i32($i206, 0);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $p208 := (if $i207 == 1 then .str.90 else .str.91);
    goto corral_source_split_5880;

  corral_source_split_5880:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} __dynamic_dev_dbg.ref.ref.ref.ref($p7, $p21, .str.96, $p208);
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb18:
    assume $i180 == 1;
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    $p181 := $bitcast.ref.ref($p60);
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($p181, $mul.ref(4, 1));
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p182);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i183);
    goto corral_source_split_5846;

  corral_source_split_5846:
    assume {:verifier.code 0} true;
    $i185 := $ne.i32($i184, 0);
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $p186 := (if $i185 == 1 then .str.90 else .str.91);
    goto corral_source_split_5848;

  corral_source_split_5848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 877} __dynamic_dev_dbg.ref.ref.ref.ref($p6, $p21, .str.95, $p186);
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb15:
    assume $i158 == 1;
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p60);
    goto corral_source_split_5811;

  corral_source_split_5811:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($p159, $mul.ref(4, 1));
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.0, $p160);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_5814;

  corral_source_split_5814:
    assume {:verifier.code 0} true;
    $i163 := $ne.i32($i162, 0);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p164 := (if $i163 == 1 then .str.90 else .str.91);
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 874} __dynamic_dev_dbg.ref.ref.ref.ref($p5, $p21, .str.94, $p164);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i136 == 1;
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $p137 := $bitcast.ref.ref($p60);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($p137, $mul.ref(4, 1));
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i139 := $load.i8($M.0, $p138);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i140 := $zext.i8.i32($i139);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i140, 0);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $p142 := (if $i141 == 1 then .str.90 else .str.91);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p21, .str.93, $p142);
    goto corral_source_split_5785;

  corral_source_split_5785:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb9:
    assume $i114 == 1;
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p60);
    goto corral_source_split_5747;

  corral_source_split_5747:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($p115, $mul.ref(4, 1));
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_5749;

  corral_source_split_5749:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $i119 := $ne.i32($i118, 0);
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $p120 := (if $i119 == 1 then .str.90 else .str.91);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p21, .str.92, $p120);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb6:
    assume $i92 == 1;
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p60);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($p93, $mul.ref(0, 1));
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_5717;

  corral_source_split_5717:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $i97 := $ne.i32($i96, 0);
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $p98 := (if $i97 == 1 then .str.90 else .str.91);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p21, .str.89, $p98);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i76 == 1;
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    call {:si_unique_call 862} __dynamic_dev_dbg.ref.ref.ref($p1, $p21, .str.88);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const get_manufacturing_desc: ref;

axiom get_manufacturing_desc == $sub.ref(0, 413219);

procedure get_manufacturing_desc($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.27, $CurrAddr, assertsPassed;



implementation get_manufacturing_desc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i24;
  var $i28: i24;
  var $i29: i24;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i24;
  var $i50: i24;
  var $i51: i24;
  var $p52: ref;
  var $p53: ref;
  var $i54: i8;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i24;
  var $i66: i24;
  var $i67: i24;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p76: ref;
  var $i77: i8;
  var $i78: i32;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i24;
  var $i86: i24;
  var $i87: i24;
  var $p88: ref;
  var $p89: ref;
  var $i90: i8;
  var $i91: i64;
  var $i92: i64;
  var $i93: i64;
  var $i94: i1;
  var $p96: ref;
  var $i97: i8;
  var $i98: i32;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $i105: i24;
  var $i106: i24;
  var $i107: i24;
  var $p108: ref;
  var $p109: ref;
  var $i110: i8;
  var $i111: i64;
  var $i112: i64;
  var $i113: i64;
  var $i114: i1;
  var $p116: ref;
  var $i117: i8;
  var $i118: i32;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i24;
  var $i126: i24;
  var $i127: i24;
  var $p128: ref;
  var $p129: ref;
  var $i130: i8;
  var $i131: i64;
  var $i132: i64;
  var $i133: i64;
  var $i134: i1;
  var $p136: ref;
  var $i137: i8;
  var $i138: i32;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i24;
  var $i146: i24;
  var $i147: i24;
  var $p148: ref;
  var $p149: ref;
  var $i150: i8;
  var $i151: i64;
  var $i152: i64;
  var $i153: i64;
  var $i154: i1;
  var $p156: ref;
  var $i157: i8;
  var $i158: i32;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $i165: i24;
  var $i166: i24;
  var $i167: i24;
  var $p168: ref;
  var $p169: ref;
  var $i170: i8;
  var $i171: i64;
  var $i172: i64;
  var $i173: i64;
  var $i174: i1;
  var $p177: ref;
  var $i178: i8;
  var $i179: i32;
  var $p182: ref;
  var $i183: i8;
  var $i184: i32;
  var $p187: ref;
  var $i188: i8;
  var $i189: i32;
  var $i190: i32;
  var $p191: ref;
  var $p193: ref;
  var $p194: ref;
  var $p196: ref;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $i206: i24;
  var $i207: i24;
  var $i208: i24;
  var $p209: ref;
  var $p210: ref;
  var $i211: i8;
  var $i212: i64;
  var $i213: i64;
  var $i214: i64;
  var $i215: i1;
  var $p216: ref;
  var $p217: ref;
  var $p219: ref;
  var $p220: ref;
  var $p222: ref;
  var $i223: i8;
  var $i224: i32;
  var $i225: i32;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i24;
  var $i233: i24;
  var $i234: i24;
  var $p235: ref;
  var $p236: ref;
  var $i237: i8;
  var $i238: i64;
  var $i239: i64;
  var $i240: i64;
  var $i241: i1;
  var $p242: ref;
  var $p243: ref;
  var $p245: ref;
  var $p246: ref;
  var $p248: ref;
  var $i249: i8;
  var $i250: i32;
  var $i251: i32;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $p257: ref;
  var $i258: i24;
  var $i259: i24;
  var $i260: i24;
  var $p261: ref;
  var $p262: ref;
  var $i263: i8;
  var $i264: i64;
  var $i265: i64;
  var $i266: i64;
  var $i267: i1;
  var $p268: ref;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $p272: ref;
  var $p273: ref;
  var $p274: ref;
  var $i275: i24;
  var $i276: i24;
  var $i277: i24;
  var $p278: ref;
  var $p279: ref;
  var $i280: i8;
  var $i281: i64;
  var $i282: i64;
  var $i283: i64;
  var $i284: i1;
  var $p286: ref;
  var $i287: i8;
  var $i288: i32;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $p292: ref;
  var $p293: ref;
  var $p294: ref;
  var $i295: i24;
  var $i296: i24;
  var $i297: i24;
  var $p298: ref;
  var $p299: ref;
  var $i300: i8;
  var $i301: i64;
  var $i302: i64;
  var $i303: i64;
  var $i304: i1;
  var $p306: ref;
  var $i307: i8;
  var $i308: i32;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $i315: i24;
  var $i316: i24;
  var $i317: i24;
  var $p318: ref;
  var $p319: ref;
  var $i320: i8;
  var $i321: i64;
  var $i322: i64;
  var $i323: i64;
  var $i324: i1;
  var $p326: ref;
  var $i327: i8;
  var $i328: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 903} $p2 := $alloc($mul.ref(30, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 904} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 908} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 910} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 911} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 912} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 913} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 915} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p21, .str);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6115;

  corral_source_split_6115:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p22, .str.121);
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p23, .str.2);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p24, .str.122);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i27 := $load.i24($M.5, $p26);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i28 := $and.i24($i27, $sub.i24(0, 262144));
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i29 := $or.i24($i28, 2580);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p26, $i29);
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p30, 0);
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.6, $p31);
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i64($i32);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $i34 := $and.i64($i33, 1);
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 917} $i35 := ldv__builtin_expect($i34, 0);
    call {:si_unique_call 918} {:cexpr "tmp"} boogie_si_record_i64($i35);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i36 := $ne.i64($i35, 0);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 920} $i41 := rom_read($p38, 255, 31744, 960, $p40);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 921} {:cexpr "response"} boogie_si_record_i32($i41);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i42 := $sle.i32($i41, 0);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i42 == 1);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p43, .str);
    goto corral_source_split_6151;

  corral_source_split_6151:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p44, .str.121);
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p45, .str.2);
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p46, .str.124);
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i49 := $load.i24($M.5, $p48);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    $i50 := $and.i24($i49, $sub.i24(0, 262144));
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i51 := $or.i24($i50, 2592);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p48, $i51);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p52, 0);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $i54 := $load.i8($M.6, $p53);
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $i55 := $zext.i8.i64($i54);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i56 := $and.i64($i55, 1);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    call {:si_unique_call 923} $i57 := ldv__builtin_expect($i56, 0);
    call {:si_unique_call 924} {:cexpr "tmp___0"} boogie_si_record_i64($i57);
    goto corral_source_split_6170;

  corral_source_split_6170:
    assume {:verifier.code 0} true;
    $i58 := $ne.i64($i57, 0);
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    assume {:branchcond $i58} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, .str);
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p60, .str.121);
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p61, .str.2);
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p62, .str.125);
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $i65 := $load.i24($M.5, $p64);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i66 := $and.i24($i65, $sub.i24(0, 262144));
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i67 := $or.i24($i66, 2594);
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p64, $i67);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p68, 0);
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.6, $p69);
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i70);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i71, 1);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 926} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 927} {:cexpr "tmp___1"} boogie_si_record_i64($i73);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p79, .str);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6207;

  corral_source_split_6207:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p80, .str.121);
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6209;

  corral_source_split_6209:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p81, .str.2);
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p82, .str.126);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p83);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i85 := $load.i24($M.5, $p84);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $i86 := $and.i24($i85, $sub.i24(0, 262144));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $i87 := $or.i24($i86, 2596);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p84, $i87);
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p88, 0);
    goto corral_source_split_6220;

  corral_source_split_6220:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $i90 := $load.i8($M.6, $p89);
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i91 := $zext.i8.i64($i90);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i92 := $and.i64($i91, 1);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i93 := ldv__builtin_expect($i92, 0);
    call {:si_unique_call 930} {:cexpr "tmp___2"} boogie_si_record_i64($i93);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i94 := $ne.i64($i93, 0);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    assume {:branchcond $i94} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p99, .str);
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p100, .str.121);
    goto corral_source_split_6237;

  corral_source_split_6237:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p101, .str.2);
    goto corral_source_split_6239;

  corral_source_split_6239:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p102, .str.127);
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p103);
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i105 := $load.i24($M.5, $p104);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i106 := $and.i24($i105, $sub.i24(0, 262144));
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    $i107 := $or.i24($i106, 2598);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p104, $i107);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p108, 0);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i110 := $load.i8($M.6, $p109);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $i111 := $zext.i8.i64($i110);
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $i112 := $and.i64($i111, 1);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i113 := ldv__builtin_expect($i112, 0);
    call {:si_unique_call 933} {:cexpr "tmp___3"} boogie_si_record_i64($i113);
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p119, .str);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p120, .str.121);
    goto corral_source_split_6266;

  corral_source_split_6266:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p121, .str.2);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6269;

  corral_source_split_6269:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p122, .str.128);
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p123);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    $i125 := $load.i24($M.5, $p124);
    goto corral_source_split_6273;

  corral_source_split_6273:
    assume {:verifier.code 0} true;
    $i126 := $and.i24($i125, $sub.i24(0, 262144));
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i127 := $or.i24($i126, 2600);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p124, $i127);
    goto corral_source_split_6276;

  corral_source_split_6276:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p128, 0);
    goto corral_source_split_6278;

  corral_source_split_6278:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    $i130 := $load.i8($M.6, $p129);
    goto corral_source_split_6280;

  corral_source_split_6280:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i64($i130);
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i132 := $and.i64($i131, 1);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 935} $i133 := ldv__builtin_expect($i132, 0);
    call {:si_unique_call 936} {:cexpr "tmp___4"} boogie_si_record_i64($i133);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i134 := $ne.i64($i133, 0);
    goto corral_source_split_6284;

  corral_source_split_6284:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p139, .str);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p140, .str.121);
    goto corral_source_split_6295;

  corral_source_split_6295:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p141, .str.2);
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p142, .str.129);
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p144 := $bitcast.ref.ref($p143);
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $i145 := $load.i24($M.5, $p144);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i146 := $and.i24($i145, $sub.i24(0, 262144));
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i147 := $or.i24($i146, 2602);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p144, $i147);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p148 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p148, 0);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i150 := $load.i8($M.6, $p149);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $i151 := $zext.i8.i64($i150);
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i152 := $and.i64($i151, 1);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} $i153 := ldv__builtin_expect($i152, 0);
    call {:si_unique_call 939} {:cexpr "tmp___5"} boogie_si_record_i64($i153);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i154 := $ne.i64($i153, 0);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    assume {:branchcond $i154} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i154 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p159, .str);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p160, .str.121);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p161, .str.2);
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p162, .str.130);
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p163);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $i165 := $load.i24($M.5, $p164);
    goto corral_source_split_6331;

  corral_source_split_6331:
    assume {:verifier.code 0} true;
    $i166 := $and.i24($i165, $sub.i24(0, 262144));
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i167 := $or.i24($i166, 2606);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p164, $i167);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $p168 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p168, 0);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6337;

  corral_source_split_6337:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.6, $p169);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i64($i170);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    $i172 := $and.i64($i171, 1);
    goto corral_source_split_6340;

  corral_source_split_6340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 941} $i173 := ldv__builtin_expect($i172, 0);
    call {:si_unique_call 942} {:cexpr "tmp___6"} boogie_si_record_i64($i173);
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i174 := $ne.i64($i173, 0);
    goto corral_source_split_6342;

  corral_source_split_6342:
    assume {:verifier.code 0} true;
    assume {:branchcond $i174} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i174 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p191 := $bitcast.ref.ref($p2);
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(782, 1));
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(780, 1));
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $i197 := $load.i8($M.0, $p196);
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $i198 := $zext.i8.i32($i197);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $i199 := $udiv.i32($i198, 2);
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 944} unicode_to_ascii($p191, 30, $p194, $i199);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p200, .str);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $p201 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p201, .str.121);
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $p202 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p202, .str.2);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p203, .str.131);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $p205 := $bitcast.ref.ref($p204);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i206 := $load.i24($M.5, $p205);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i207 := $and.i24($i206, $sub.i24(0, 262144));
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    $i208 := $or.i24($i207, 2610);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p205, $i208);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6379;

  corral_source_split_6379:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p209, 0);
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    $p210 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $i211 := $load.i8($M.6, $p210);
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $i212 := $zext.i8.i64($i211);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $i213 := $and.i64($i212, 1);
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    call {:si_unique_call 945} $i214 := ldv__builtin_expect($i213, 0);
    call {:si_unique_call 946} {:cexpr "tmp___7"} boogie_si_record_i64($i214);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $i215 := $ne.i64($i214, 0);
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p217 := $bitcast.ref.ref($p2);
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(808, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p220 := $bitcast.ref.ref($p219);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(806, 1));
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    $i223 := $load.i8($M.0, $p222);
    goto corral_source_split_6396;

  corral_source_split_6396:
    assume {:verifier.code 0} true;
    $i224 := $zext.i8.i32($i223);
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    $i225 := $udiv.i32($i224, 2);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 948} unicode_to_ascii($p217, 30, $p220, $i225);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6400;

  corral_source_split_6400:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p226, .str);
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p227, .str.121);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    $p228 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p228, .str.2);
    goto corral_source_split_6405;

  corral_source_split_6405:
    assume {:verifier.code 0} true;
    $p229 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p229, .str.132);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    $p230 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p231 := $bitcast.ref.ref($p230);
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $i232 := $load.i24($M.5, $p231);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $i233 := $and.i24($i232, $sub.i24(0, 262144));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $i234 := $or.i24($i233, 2614);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p231, $i234);
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $p235 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p235, 0);
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $i237 := $load.i8($M.6, $p236);
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    $i238 := $zext.i8.i64($i237);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    $i239 := $and.i64($i238, 1);
    goto corral_source_split_6419;

  corral_source_split_6419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} $i240 := ldv__builtin_expect($i239, 0);
    call {:si_unique_call 950} {:cexpr "tmp___8"} boogie_si_record_i64($i240);
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $i241 := $ne.i64($i240, 0);
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i241} true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i241 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p243 := $bitcast.ref.ref($p2);
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(838, 1));
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $p248 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(836, 1));
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $i249 := $load.i8($M.0, $p248);
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $i250 := $zext.i8.i32($i249);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    $i251 := $udiv.i32($i250, 2);
    goto corral_source_split_6433;

  corral_source_split_6433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 952} unicode_to_ascii($p243, 30, $p246, $i251);
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    $p252 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6435;

  corral_source_split_6435:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p252, .str);
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p253 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p253, .str.121);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    $p254 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6439;

  corral_source_split_6439:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p254, .str.2);
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p255, .str.133);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $p256 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $p257 := $bitcast.ref.ref($p256);
    goto corral_source_split_6444;

  corral_source_split_6444:
    assume {:verifier.code 0} true;
    $i258 := $load.i24($M.5, $p257);
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i259 := $and.i24($i258, $sub.i24(0, 262144));
    goto corral_source_split_6446;

  corral_source_split_6446:
    assume {:verifier.code 0} true;
    $i260 := $or.i24($i259, 2618);
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p257, $i260);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6449;

  corral_source_split_6449:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p261, 0);
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i263 := $load.i8($M.6, $p262);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i64($i263);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i265 := $and.i64($i264, 1);
    goto corral_source_split_6454;

  corral_source_split_6454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i266 := ldv__builtin_expect($i265, 0);
    call {:si_unique_call 954} {:cexpr "tmp___9"} boogie_si_record_i64($i266);
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $i267 := $ne.i64($i266, 0);
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    assume {:branchcond $i267} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p269, .str);
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p270, .str.121);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p271 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p271, .str.2);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p272 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p272, .str.134);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p273 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $p274 := $bitcast.ref.ref($p273);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $i275 := $load.i24($M.5, $p274);
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    $i276 := $and.i24($i275, $sub.i24(0, 262144));
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    $i277 := $or.i24($i276, 2620);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p274, $i277);
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $p278 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p278, 0);
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i280 := $load.i8($M.6, $p279);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i64($i280);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    $i282 := $and.i64($i281, 1);
    goto corral_source_split_6481;

  corral_source_split_6481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i283 := ldv__builtin_expect($i282, 0);
    call {:si_unique_call 957} {:cexpr "tmp___10"} boogie_si_record_i64($i283);
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $i284 := $ne.i64($i283, 0);
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p289, .str);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p290, .str.121);
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p291, .str.2);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p292 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p292, .str.135);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p293 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $p294 := $bitcast.ref.ref($p293);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i295 := $load.i24($M.5, $p294);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i296 := $and.i24($i295, $sub.i24(0, 262144));
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    $i297 := $or.i24($i296, 2622);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p294, $i297);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    $p298 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6505;

  corral_source_split_6505:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p298, 0);
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $i300 := $load.i8($M.6, $p299);
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $i301 := $zext.i8.i64($i300);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    $i302 := $and.i64($i301, 1);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i303 := ldv__builtin_expect($i302, 0);
    call {:si_unique_call 960} {:cexpr "tmp___11"} boogie_si_record_i64($i303);
    goto corral_source_split_6511;

  corral_source_split_6511:
    assume {:verifier.code 0} true;
    $i304 := $ne.i64($i303, 0);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i304 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p309 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p309, .str);
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p310, .str.121);
    goto corral_source_split_6523;

  corral_source_split_6523:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p311, .str.2);
    goto corral_source_split_6525;

  corral_source_split_6525:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p312, .str.136);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $p314 := $bitcast.ref.ref($p313);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i315 := $load.i24($M.5, $p314);
    goto corral_source_split_6530;

  corral_source_split_6530:
    assume {:verifier.code 0} true;
    $i316 := $and.i24($i315, $sub.i24(0, 262144));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i317 := $or.i24($i316, 2624);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p314, $i317);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $p318 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p318, 0);
    goto corral_source_split_6535;

  corral_source_split_6535:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i320 := $load.i8($M.6, $p319);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i321 := $zext.i8.i64($i320);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i322 := $and.i64($i321, 1);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} $i323 := ldv__builtin_expect($i322, 0);
    call {:si_unique_call 963} {:cexpr "tmp___12"} boogie_si_record_i64($i323);
    goto corral_source_split_6540;

  corral_source_split_6540:
    assume {:verifier.code 0} true;
    $i324 := $ne.i64($i323, 0);
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb43:
    assume $i324 == 1;
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $p326 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(959, 1));
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i327 := $load.i8($M.0, $p326);
    goto corral_source_split_6545;

  corral_source_split_6545:
    assume {:verifier.code 0} true;
    $i328 := $zext.i8.i32($i327);
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 964} __dynamic_dev_dbg.ref.ref.ref.i32($p15, $p20, .str.136, $i328);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i304 == 1;
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p306 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(958, 1));
    goto corral_source_split_6515;

  corral_source_split_6515:
    assume {:verifier.code 0} true;
    $i307 := $load.i8($M.0, $p306);
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $i308 := $zext.i8.i32($i307);
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} __dynamic_dev_dbg.ref.ref.ref.i32($p14, $p20, .str.135, $i308);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i284 == 1;
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(957, 1));
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $i287 := $load.i8($M.0, $p286);
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $i288 := $zext.i8.i32($i287);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} __dynamic_dev_dbg.ref.ref.ref.i32($p13, $p20, .str.134, $i288);
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i267 == 1;
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p268 := $bitcast.ref.ref($p2);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 955} __dynamic_dev_dbg.ref.ref.ref.ref($p12, $p20, .str.133, $p268);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i241 == 1;
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p2);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 951} __dynamic_dev_dbg.ref.ref.ref.ref($p11, $p20, .str.132, $p242);
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i215 == 1;
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $p216 := $bitcast.ref.ref($p2);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 947} __dynamic_dev_dbg.ref.ref.ref.ref($p10, $p20, .str.131, $p216);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i174 == 1;
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(777, 1)), $mul.ref(0, 1));
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i178 := $load.i8($M.0, $p177);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i179 := $zext.i8.i32($i178);
    goto corral_source_split_6347;

  corral_source_split_6347:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(777, 1)), $mul.ref(1, 1));
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i183 := $load.i8($M.0, $p182);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i184 := $zext.i8.i32($i183);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(777, 1)), $mul.ref(2, 1));
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i188 := $load.i8($M.0, $p187);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i189 := $zext.i8.i32($i188);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i190 := $add.i32($i189, 1900);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p9, $p20, .str.130, $i179, $i184, $i190);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i154 == 1;
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(776, 1));
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $i157 := $load.i8($M.0, $p156);
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i158 := $zext.i8.i32($i157);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 940} __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p20, .str.129, $i158);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i134 == 1;
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(775, 1));
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i137 := $load.i8($M.0, $p136);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $i138 := $zext.i8.i32($i137);
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p20, .str.128, $i138);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i114 == 1;
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(774, 1));
    goto corral_source_split_6258;

  corral_source_split_6258:
    assume {:verifier.code 0} true;
    $i117 := $load.i8($M.0, $p116);
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $i118 := $zext.i8.i32($i117);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 934} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p20, .str.127, $i118);
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i94 == 1;
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(773, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $i97 := $load.i8($M.0, $p96);
    goto corral_source_split_6230;

  corral_source_split_6230:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p20, .str.126, $i98);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i74 == 1;
    goto corral_source_split_6199;

  corral_source_split_6199:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(772, 1));
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.0, $p76);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i32($i77);
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p20, .str.125, $i78);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i58 == 1;
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 925} __dynamic_dev_dbg.ref.ref.ref($p3, $p20, .str.124);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i42 == 1;
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} dev_err.ref.ref($p20, .str.123);
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} __dynamic_dev_dbg.ref.ref.ref($p1, $p20, .str.122);
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_boot_desc: ref;

axiom get_boot_desc == $sub.ref(0, 414251);

procedure get_boot_desc($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, assertsPassed;



implementation get_boot_desc($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i24;
  var $i44: i24;
  var $i45: i24;
  var $p46: ref;
  var $p47: ref;
  var $i48: i8;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i24;
  var $i60: i24;
  var $i61: i24;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $i68: i1;
  var $p70: ref;
  var $i71: i16;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i24;
  var $i80: i24;
  var $i81: i24;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i24;
  var $i100: i24;
  var $i101: i24;
  var $p102: ref;
  var $p103: ref;
  var $i104: i8;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $i108: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i24;
  var $i120: i24;
  var $i121: i24;
  var $p122: ref;
  var $p123: ref;
  var $i124: i8;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $p130: ref;
  var $i131: i16;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i24;
  var $i140: i24;
  var $i141: i24;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i1;
  var $p150: ref;
  var $i151: i16;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $i159: i24;
  var $i160: i24;
  var $i161: i24;
  var $p162: ref;
  var $p163: ref;
  var $i164: i8;
  var $i165: i64;
  var $i166: i64;
  var $i167: i64;
  var $i168: i1;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $i179: i24;
  var $i180: i24;
  var $i181: i24;
  var $p182: ref;
  var $p183: ref;
  var $i184: i8;
  var $i185: i64;
  var $i186: i64;
  var $i187: i64;
  var $i188: i1;
  var $p190: ref;
  var $i191: i8;
  var $i192: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 965} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 966} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 969} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 971} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_6550;

  corral_source_split_6550:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6555;

  corral_source_split_6555:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p15, .str);
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p16, .str.137);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p17, .str.2);
    goto corral_source_split_6560;

  corral_source_split_6560:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p18, .str.138);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.5, $p20);
    goto corral_source_split_6565;

  corral_source_split_6565:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 2639);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p20, $i23);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p24, 0);
    goto corral_source_split_6570;

  corral_source_split_6570:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.6, $p25);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 975} {:cexpr "tmp"} boogie_si_record_i64($i29);
    goto corral_source_split_6575;

  corral_source_split_6575:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1));
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} $i35 := rom_read($p32, 255, 32704, 64, $p34);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    call {:si_unique_call 978} {:cexpr "response"} boogie_si_record_i32($i35);
    goto corral_source_split_6585;

  corral_source_split_6585:
    assume {:verifier.code 0} true;
    $i36 := $sle.i32($i35, 0);
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i36 == 1);
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p37, .str);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p38, .str.137);
    goto corral_source_split_6595;

  corral_source_split_6595:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p39, .str.2);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p40, .str.140);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6600;

  corral_source_split_6600:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i43 := $load.i24($M.5, $p42);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i44 := $and.i24($i43, $sub.i24(0, 262144));
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i45 := $or.i24($i44, 2650);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p42, $i45);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p46, 0);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.6, $p47);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    $i49 := $zext.i8.i64($i48);
    goto corral_source_split_6610;

  corral_source_split_6610:
    assume {:verifier.code 0} true;
    $i50 := $and.i64($i49, 1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 980} $i51 := ldv__builtin_expect($i50, 0);
    call {:si_unique_call 981} {:cexpr "tmp___0"} boogie_si_record_i64($i51);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    assume {:branchcond $i52} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p53, .str);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6620;

  corral_source_split_6620:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p54, .str.137);
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p55, .str.2);
    goto corral_source_split_6623;

  corral_source_split_6623:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p56, .str.141);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i59 := $load.i24($M.5, $p58);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $i60 := $and.i24($i59, $sub.i24(0, 262144));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $i61 := $or.i24($i60, 2652);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p58, $i61);
    goto corral_source_split_6631;

  corral_source_split_6631:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p62, 0);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.6, $p63);
    goto corral_source_split_6635;

  corral_source_split_6635:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i64($i64);
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    $i66 := $and.i64($i65, 1);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 983} $i67 := ldv__builtin_expect($i66, 0);
    call {:si_unique_call 984} {:cexpr "tmp___1"} boogie_si_record_i64($i67);
    goto corral_source_split_6638;

  corral_source_split_6638:
    assume {:verifier.code 0} true;
    $i68 := $ne.i64($i67, 0);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6647;

  corral_source_split_6647:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, .str);
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6649;

  corral_source_split_6649:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p74, .str.137);
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p75, .str.2);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6653;

  corral_source_split_6653:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p76, .str.142);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_6656;

  corral_source_split_6656:
    assume {:verifier.code 0} true;
    $i79 := $load.i24($M.5, $p78);
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $i80 := $and.i24($i79, $sub.i24(0, 262144));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i81 := $or.i24($i80, 2654);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p78, $i81);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6661;

  corral_source_split_6661:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p82, 0);
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.6, $p83);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_6665;

  corral_source_split_6665:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 987} {:cexpr "tmp___2"} boogie_si_record_i64($i87);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p93, .str);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6678;

  corral_source_split_6678:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p94, .str.137);
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6680;

  corral_source_split_6680:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p95, .str.2);
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p96, .str.143);
    goto corral_source_split_6683;

  corral_source_split_6683:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p97);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i99 := $load.i24($M.5, $p98);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i100 := $and.i24($i99, $sub.i24(0, 262144));
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i101 := $or.i24($i100, 2656);
    goto corral_source_split_6688;

  corral_source_split_6688:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p98, $i101);
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p102, 0);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.6, $p103);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i64($i104);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $i106 := $and.i64($i105, 1);
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $i107 := ldv__builtin_expect($i106, 0);
    call {:si_unique_call 990} {:cexpr "tmp___3"} boogie_si_record_i64($i107);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    $i108 := $ne.i64($i107, 0);
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p113, .str);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p114, .str.137);
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p115, .str.2);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p116, .str.144);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6713;

  corral_source_split_6713:
    assume {:verifier.code 0} true;
    $p118 := $bitcast.ref.ref($p117);
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $i119 := $load.i24($M.5, $p118);
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    $i120 := $and.i24($i119, $sub.i24(0, 262144));
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $i121 := $or.i24($i120, 2658);
    goto corral_source_split_6717;

  corral_source_split_6717:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p118, $i121);
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p122, 0);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.6, $p123);
    goto corral_source_split_6722;

  corral_source_split_6722:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i64($i124);
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i126 := $and.i64($i125, 1);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 992} $i127 := ldv__builtin_expect($i126, 0);
    call {:si_unique_call 993} {:cexpr "tmp___4"} boogie_si_record_i64($i127);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i127, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p133, .str);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p134, .str.137);
    goto corral_source_split_6737;

  corral_source_split_6737:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p135, .str.2);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p136, .str.145);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6742;

  corral_source_split_6742:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i139 := $load.i24($M.5, $p138);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i140 := $and.i24($i139, $sub.i24(0, 262144));
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i141 := $or.i24($i140, 2660);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p138, $i141);
    goto corral_source_split_6747;

  corral_source_split_6747:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p142, 0);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.6, $p143);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i64($i144);
    goto corral_source_split_6752;

  corral_source_split_6752:
    assume {:verifier.code 0} true;
    $i146 := $and.i64($i145, 1);
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i147 := ldv__builtin_expect($i146, 0);
    call {:si_unique_call 996} {:cexpr "tmp___5"} boogie_si_record_i64($i147);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p153, .str);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p154, .str.137);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6767;

  corral_source_split_6767:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p155, .str.2);
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p156, .str.146);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $p158 := $bitcast.ref.ref($p157);
    goto corral_source_split_6772;

  corral_source_split_6772:
    assume {:verifier.code 0} true;
    $i159 := $load.i24($M.5, $p158);
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i160 := $and.i24($i159, $sub.i24(0, 262144));
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i161 := $or.i24($i160, 2662);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p158, $i161);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6777;

  corral_source_split_6777:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p162, 0);
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i164 := $load.i8($M.6, $p163);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i165 := $zext.i8.i64($i164);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i166 := $and.i64($i165, 1);
    goto corral_source_split_6782;

  corral_source_split_6782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} $i167 := ldv__builtin_expect($i166, 0);
    call {:si_unique_call 999} {:cexpr "tmp___6"} boogie_si_record_i64($i167);
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i168 := $ne.i64($i167, 0);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6792;

  corral_source_split_6792:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p173, .str);
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p174, .str.137);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p175, .str.2);
    goto corral_source_split_6797;

  corral_source_split_6797:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p176, .str.147);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $p178 := $bitcast.ref.ref($p177);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i179 := $load.i24($M.5, $p178);
    goto corral_source_split_6802;

  corral_source_split_6802:
    assume {:verifier.code 0} true;
    $i180 := $and.i24($i179, $sub.i24(0, 262144));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i181 := $or.i24($i180, 2664);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p178, $i181);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p182, 0);
    goto corral_source_split_6807;

  corral_source_split_6807:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i184 := $load.i8($M.6, $p183);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i185 := $zext.i8.i64($i184);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i186 := $and.i64($i185, 1);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} $i187 := ldv__builtin_expect($i186, 0);
    call {:si_unique_call 1002} {:cexpr "tmp___7"} boogie_si_record_i64($i187);
    goto corral_source_split_6812;

  corral_source_split_6812:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb28:
    assume $i188 == 1;
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(57, 1));
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i191 := $load.i8($M.0, $p190);
    goto corral_source_split_6817;

  corral_source_split_6817:
    assume {:verifier.code 0} true;
    $i192 := $zext.i8.i32($i191);
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1003} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p14, .str.147, $i192);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i168 == 1;
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(56, 1));
    goto corral_source_split_6787;

  corral_source_split_6787:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p14, .str.146, $i172);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i148 == 1;
    goto corral_source_split_6757;

  corral_source_split_6757:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(14, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i151 := $load.i16($M.0, $p150);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i152 := $zext.i16.i32($i151);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p14, .str.145, $i152);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i128 == 1;
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(8, 1));
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i131 := $load.i16($M.0, $p130);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i131);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 994} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p14, .str.144, $i132);
    goto corral_source_split_6732;

  corral_source_split_6732:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i108 == 1;
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(7, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 991} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p14, .str.143, $i112);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i88 == 1;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(6, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_6673;

  corral_source_split_6673:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p14, .str.142, $i92);
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i68 == 1;
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(4, 1));
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i71 := $load.i16($M.0, $p70);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $i72 := $zext.i16.i32($i71);
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p14, .str.141, $i72);
    goto corral_source_split_6645;

  corral_source_split_6645:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i52 == 1;
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    call {:si_unique_call 982} __dynamic_dev_dbg.ref.ref.ref($p2, $p14, .str.140);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i36 == 1;
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 979} dev_err.ref.ref($p14, .str.139);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_202:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i30 == 1;
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 976} __dynamic_dev_dbg.ref.ref.ref($p1, $p14, .str.138);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const get_product_info: ref;

axiom get_product_info == $sub.ref(0, 415283);

procedure get_product_info($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation get_product_info($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i32;
  var $i12: i16;
  var $p13: ref;
  var $p15: ref;
  var $i16: i8;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i8;
  var $p22: ref;
  var $p24: ref;
  var $i25: i8;
  var $p26: ref;
  var $p28: ref;
  var $i29: i8;
  var $p30: ref;
  var $p32: ref;
  var $i33: i8;
  var $p34: ref;
  var $p36: ref;
  var $i37: i8;
  var $p38: ref;
  var $p40: ref;
  var $i41: i8;
  var $p42: ref;
  var $p44: ref;
  var $i45: i16;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p57: ref;
  var $i58: i16;
  var $i59: i32;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i16;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $i69: i1;
  var $i70: i1;
  var $i71: i1;
  var $i72: i1;
  var $i73: i1;
  var $i74: i1;
  var $i75: i1;
  var $i76: i1;
  var $i77: i1;
  var $i78: i1;
  var $i79: i1;
  var $i80: i1;
  var $i81: i1;
  var $i82: i1;
  var $i83: i1;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $i93: i32;
  var $i94: i32;
  var $i95: i32;
  var $p96: ref;
  var $i97: i32;
  var $i98: i32;
  var $i99: i32;
  var cmdloc_dummy_var_22: [ref]i8;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var cmdloc_dummy_var_26: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1));
    goto corral_source_split_6822;

  corral_source_split_6822:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_22 := $M.0;
    call {:si_unique_call 1004} cmdloc_dummy_var_23 := $memset.i8(cmdloc_dummy_var_22, $p2, 0, 40, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_23;
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6827;

  corral_source_split_6827:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 65503);
    goto corral_source_split_6832;

  corral_source_split_6832:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i32.i16($i11);
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(0, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p13, $i12);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(776, 1));
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(2, 1));
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i16);
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(3, 1));
    goto corral_source_split_6837;

  corral_source_split_6837:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(772, 1));
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    $p22 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(8, 1));
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p22, $i21);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(773, 1));
    goto corral_source_split_6842;

  corral_source_split_6842:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.0, $p24);
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(9, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, $i25);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(774, 1));
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i29 := $load.i8($M.0, $p28);
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(10, 1));
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, $i29);
    goto corral_source_split_6847;

  corral_source_split_6847:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(775, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(11, 1));
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p34, $i33);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(6, 1));
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i37 := $load.i8($M.0, $p36);
    $p38 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(12, 1));
    goto corral_source_split_6852;

  corral_source_split_6852:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p38, $i37);
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(7, 1));
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    $p42 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(13, 1));
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p42, $i41);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(8, 1));
    goto corral_source_split_6857;

  corral_source_split_6857:
    assume {:verifier.code 0} true;
    $i45 := $load.i16($M.0, $p44);
    $p46 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(14, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p46, $i45);
    $p47 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(20, 1));
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p47);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(66, 1)), $mul.ref(777, 1));
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_6862;

  corral_source_split_6862:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_24 := $M.0;
    cmdloc_dummy_var_25 := $M.0;
    call {:si_unique_call 1005} cmdloc_dummy_var_26 := $memcpy.i8(cmdloc_dummy_var_24, cmdloc_dummy_var_25, $p48, $p51, 3, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_26;
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_6867;

  corral_source_split_6867:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($add.ref($p55, $mul.ref(0, 2040)), $mul.ref(1568, 1)), $mul.ref(10, 1));
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 0} true;
    $i58 := $load.i16($M.0, $p57);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i58);
    goto corral_source_split_6870;

  corral_source_split_6870:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 32);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i60, 0);
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    assume {:branchcond $i61} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i61 == 1);
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(24, 1));
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $sub.i8(0, 1));
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    $p64 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(0, 1));
    goto corral_source_split_6879;

  corral_source_split_6879:
    assume {:verifier.code 0} true;
    $i65 := $load.i16($M.0, $p64);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i32($i65);
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i66, 255);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i68 := $slt.i32($i67, 14);
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    $i69 := $slt.i32($i67, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i67, 19);
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    $i71 := $slt.i32($i67, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i71} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    $i72 := $eq.i32($i67, 20);
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i72 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1006} dump_product_info($p0, $p1);
    goto corral_source_split_6909;

  corral_source_split_6909:
    assume {:verifier.code 0} true;
    return;

  $bb13:
    assume $i72 == 1;
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    $p96 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(4, 1));
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $i97 := $load.i32($M.0, $p96);
    goto corral_source_split_6894;

  corral_source_split_6894:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, $sub.i32(0, 5));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    $i99 := $or.i32($i98, 4);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p96, $i99);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb11:
    assume $i71 == 1;
    goto corral_source_split_6883;

  corral_source_split_6883:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    $p84 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(4, 1));
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $i86 := $and.i32($i85, $sub.i32(0, 3));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $i87 := $or.i32($i86, 2);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p84, $i87);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb9:
    assume $i70 == 1;
    assume {:verifier.code 0} true;
    $i73 := $slt.i32($i67, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i73 == 1);
    goto $bb19;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb17;

  $bb7:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i74 := $slt.i32($i67, 15);
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    $i75 := $slt.i32($i67, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i75 == 1);
    goto $bb26;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i75 == 1;
    goto $bb24;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb21;

  $bb5:
    assume $i68 == 1;
    assume {:verifier.code 0} true;
    $i76 := $slt.i32($i67, 6);
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    $i77 := $slt.i32($i67, 12);
    assume {:verifier.code 0} true;
    assume {:branchcond $i77} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i78 := $slt.i32($i67, 13);
    assume {:verifier.code 0} true;
    assume {:branchcond $i78} true;
    goto $bb31, $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    assume !($i78 == 1);
    goto $bb34;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb32;

  $bb29:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $i79 := $slt.i32($i67, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb35, $bb37;

  $bb37:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i67, 7);
    assume {:verifier.code 0} true;
    assume {:branchcond $i80} true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i80 == 1);
    goto $bb15;

  $bb38:
    assume $i80 == 1;
    $p88 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(4, 1));
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_6900;

  corral_source_split_6900:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, $sub.i32(0, 5));
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 4);
    goto corral_source_split_6902;

  corral_source_split_6902:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p88, $i91);
    $p92 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(4, 1));
    goto corral_source_split_6903;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    $i93 := $load.i32($M.0, $p92);
    goto corral_source_split_6904;

  corral_source_split_6904:
    assume {:verifier.code 0} true;
    $i94 := $and.i32($i93, $sub.i32(0, 9));
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i95 := $or.i32($i94, 8);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p92, $i95);
    goto corral_source_split_6907;

  corral_source_split_6907:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb35:
    assume {:verifier.code 0} true;
    assume $i79 == 1;
    goto $bb36;

  $bb27:
    assume $i76 == 1;
    assume {:verifier.code 0} true;
    $i81 := $slt.i32($i67, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i82 := $slt.i32($i67, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume !($i82 == 1);
    goto $bb45;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i82 == 1;
    goto $bb43;

  $bb40:
    assume $i81 == 1;
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i67, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i83} true;
    goto $bb46, $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb15;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb47;

  $bb1:
    assume $i61 == 1;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(24, 1));
    goto corral_source_split_6874;

  corral_source_split_6874:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p62, $sub.i8(0, 2));
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const dev_warn: ref;

axiom dev_warn == $sub.ref(0, 416315);

procedure dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_warn.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6911;

  corral_source_split_6911:
    assume {:verifier.code 0} true;
    return;
}



const load_application_firmware: ref;

axiom load_application_firmware == $sub.ref(0, 417347);

procedure load_application_firmware($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.23, $CurrAddr, assertsPassed;



implementation load_application_firmware($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i24;
  var $i27: i24;
  var $i28: i24;
  var $p29: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i1;
  var $p18: ref;
  var $p19: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p48: ref;
  var $i49: i8;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $p55: ref;
  var $i56: i8;
  var $i57: i16;
  var $i58: i32;
  var $i59: i32;
  var $i60: i16;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i24;
  var $i68: i24;
  var $i69: i24;
  var $p70: ref;
  var $p71: ref;
  var $i72: i8;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $i76: i1;
  var $p78: ref;
  var $i79: i8;
  var $i80: i32;
  var $p82: ref;
  var $i83: i8;
  var $i84: i32;
  var $i85: i32;
  var $p87: ref;
  var $i88: i8;
  var $p90: ref;
  var $p92: ref;
  var $i93: i8;
  var $p95: ref;
  var $p97: ref;
  var $p98: ref;
  var $i99: i64;
  var $i100: i1;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $p105: ref;
  var $i106: i16;
  var $i107: i32;
  var $i108: i16;
  var $i109: i16;
  var $p110: ref;
  var $p111: ref;
  var $i112: i32;
  var $i113: i16;
  var $i114: i32;
  var $i115: i16;
  var $i116: i16;
  var $i117: i32;
  var $i118: i16;
  var $i119: i32;
  var $i120: i16;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i126: i32;
  var $p127: ref;
  var $i128: i16;
  var $i129: i32;
  var $i130: i16;
  var $i131: i16;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $i141: i64;
  var $i142: i1;
  var $p101: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $i149: i24;
  var $i150: i24;
  var $i151: i24;
  var $p152: ref;
  var $p153: ref;
  var $i154: i8;
  var $i155: i64;
  var $i156: i64;
  var $i157: i64;
  var $i158: i1;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i32;
  var $i169: i32;
  var $p170: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6913;

  corral_source_split_6913:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6915;

  corral_source_split_6915:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6916;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_6917;

  corral_source_split_6917:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(24, 1));
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 254);
    assume {:verifier.code 0} true;
    assume {:branchcond $i14} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i13, 255);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i13, 255);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i16 == 1;
    goto corral_source_split_6924;

  corral_source_split_6924:
    assume {:verifier.code 0} true;
    $p18, $p19 := .str.149, .str.148;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p39, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} $i41 := request_ihex_firmware($p1, $p18, $p40);
    call {:si_unique_call 1014} {:cexpr "response"} boogie_si_record_i32($i41);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.23, $p1);
    goto corral_source_split_6965;

  corral_source_split_6965:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.24, $p44);
    goto corral_source_split_6967;

  corral_source_split_6967:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(2, 1));
    goto corral_source_split_6969;

  corral_source_split_6969:
    assume {:verifier.code 0} true;
    $i49 := $load.i8($M.0, $p48);
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i50 := $zext.i8.i32($i49);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i51 := $shl.i32($i50, 8);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    $i52 := $trunc.i32.i16($i51);
    goto corral_source_split_6973;

  corral_source_split_6973:
    assume {:verifier.code 0} true;
    $i53 := $sext.i16.i32($i52);
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(3, 1));
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_6976;

  corral_source_split_6976:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i16($i56);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i58 := $sext.i16.i32($i57);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i53, $i58);
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $i60 := $trunc.i32.i16($i59);
    call {:si_unique_call 1017} {:cexpr "build"} boogie_si_record_i16($i60);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p61, .str);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p62, .str.152);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p63, .str.2);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p64, .str.155);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p65);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i67 := $load.i24($M.5, $p66);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    $i68 := $and.i24($i67, $sub.i24(0, 262144));
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i69 := $or.i24($i68, 2714);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p66, $i69);
    goto corral_source_split_6994;

  corral_source_split_6994:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p70, 0);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6997;

  corral_source_split_6997:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.6, $p71);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i64($i72);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i74 := $and.i64($i73, 1);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1018} $i75 := ldv__builtin_expect($i74, 0);
    call {:si_unique_call 1019} {:cexpr "tmp___0"} boogie_si_record_i64($i75);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i76 := $ne.i64($i75, 0);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    assume {:branchcond $i76} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i76 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_7014;

  corral_source_split_7014:
    assume {:verifier.code 0} true;
    $i88 := $load.i8($M.0, $p87);
    goto corral_source_split_7015;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(16, 1));
    goto corral_source_split_7016;

  corral_source_split_7016:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p90, $i88);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(1, 1));
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $i93 := $load.i8($M.0, $p92);
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(17, 1));
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, $i93);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(18, 1));
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p97, $i60);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1021} $p98 := ihex_next_binrec($p46);
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $i99 := $p2i.ref.i64($p98);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i100 := $ne.i64($i99, 0);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    assume {:branchcond $i100} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i100 == 1);
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7072;

  corral_source_split_7072:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p143, .str);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7074;

  corral_source_split_7074:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p144, .str.152);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p145, .str.2);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p146, .str.157);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7080;

  corral_source_split_7080:
    assume {:verifier.code 0} true;
    $p148 := $bitcast.ref.ref($p147);
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    $i149 := $load.i24($M.5, $p148);
    goto corral_source_split_7082;

  corral_source_split_7082:
    assume {:verifier.code 0} true;
    $i150 := $and.i24($i149, $sub.i24(0, 262144));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $i151 := $or.i24($i150, 2737);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p148, $i151);
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p152, 0);
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $i154 := $load.i8($M.6, $p153);
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $i155 := $zext.i8.i64($i154);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $i156 := $and.i64($i155, 1);
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $i157 := ldv__builtin_expect($i156, 0);
    call {:si_unique_call 1032} {:cexpr "tmp___4"} boogie_si_record_i64($i157);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i158 := $ne.i64($i157, 0);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i158} true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_7105;

  corral_source_split_7105:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1035} $i163 := __create_pipe($p162, 0);
    call {:si_unique_call 1036} {:cexpr "tmp___5"} boogie_si_record_i32($i163);
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $p165 := $load.ref($M.0, $p164);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p165, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    $p167 := $load.ref($M.0, $p166);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    $i168 := $or.i32($i163, $sub.i32(0, 2147483648));
    goto corral_source_split_7113;

  corral_source_split_7113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1037} $i169 := usb_control_msg($p167, $i168, 7, 64, 16384, 1, $0.ref, 0, 3000);
    call {:si_unique_call 1038} {:cexpr "response"} boogie_si_record_i32($i169);
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.23, $p1);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1039} release_firmware($p170);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb35:
    assume $i158 == 1;
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} __dynamic_dev_dbg.ref.ref.ref($p4, $p9, .str.157);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb23:
    assume $i100 == 1;
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $p101 := $p98;
    goto $bb26;

  $bb26:
    call $p102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $p110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $p121, $p122, $i123, $i124, $p125, $i126, $p140, $i141, $i142, $p101 := load_application_firmware_loop_$bb26($p0, $p102, $i103, $i104, $p105, $i106, $i107, $i108, $i109, $p110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $p121, $p122, $i123, $i124, $p125, $i126, $p140, $i141, $i142, $p101);
    goto $bb26_last;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p101, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_7033;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} $i104 := __fswab32($i103);
    call {:si_unique_call 1023} {:cexpr "tmp___1"} boogie_si_record_i32($i104);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p101, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7035;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    $i106 := $load.i16($M.0, $p105);
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i107 := $zext.i16.i32($i106);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i32.i16($i107);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} $i109 := __fswab16($i108);
    call {:si_unique_call 1025} {:cexpr "tmp___2"} boogie_si_record_i16($i109);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i112 := $lshr.i32($i104, 16);
    goto corral_source_split_7042;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    $i113 := $trunc.i32.i16($i112);
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i114 := $zext.i16.i32($i113);
    goto corral_source_split_7044;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    $i115 := $trunc.i32.i16($i114);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i16($i104);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    $i117 := $zext.i16.i32($i116);
    goto corral_source_split_7047;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    $i118 := $trunc.i32.i16($i117);
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i119 := $zext.i16.i32($i109);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i120 := $trunc.i32.i16($i119);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p101, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7051;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    $p122 := $bitcast.ref.ref($p121);
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $i123 := sram_write($p111, $i115, $i118, $i120, $p122);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    call {:si_unique_call 1027} {:cexpr "response"} boogie_si_record_i32($i123);
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i123, 0);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $p125, $i126 := $p101, $i104;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} $p140 := ihex_next_binrec($p101);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $i141 := $p2i.ref.i64($p140);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $i142 := $ne.i64($i141, 0);
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i142 == 1);
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb32:
    assume $i142 == 1;
    assume {:verifier.code 0} true;
    $p101 := $p140;
    goto $bb32_dummy;

  $bb28:
    assume $i124 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p125, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.0, $p127);
    goto corral_source_split_7058;

  corral_source_split_7058:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i128);
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i130 := $trunc.i32.i16($i129);
    goto corral_source_split_7060;

  corral_source_split_7060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $i131 := __fswab16($i130);
    call {:si_unique_call 1029} {:cexpr "tmp___3"} boogie_si_record_i16($i131);
    goto corral_source_split_7061;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7062;

  corral_source_split_7062:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p133, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p135 := $load.ref($M.0, $p134);
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p135, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i137 := $lshr.i32($i126, 16);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i126, 65535);
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i131);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} dev_err.ref.ref.i32.i32.i32($p136, .str.156, $i137, $i138, $i139);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i76 == 1;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i79 := $load.i8($M.0, $p78);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $i80 := $zext.i8.i32($i79);
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(1, 1));
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i83 := $load.i8($M.0, $p82);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $i84 := $zext.i8.i32($i83);
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $i85 := $zext.i16.i32($i60);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1020} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p3, $p9, .str.155, $p19, $i80, $i84, $i85);
    goto corral_source_split_7012;

  corral_source_split_7012:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb17:
    assume $i42 == 1;
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1016} dev_err.ref.ref.ref.i32($p9, .str.154, $p18, $i41);
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb4:
    assume $i15 == 1;
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $p18, $p19 := .str.151, .str.150;
    goto $bb11;

  $bb2:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i13, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb8;

  $bb9:
    assume $i17 == 1;
    goto corral_source_split_6926;

  corral_source_split_6926:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p20, .str);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6929;

  corral_source_split_6929:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p21, .str.152);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p22, .str.2);
    goto corral_source_split_6932;

  corral_source_split_6932:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p23, .str.153);
    goto corral_source_split_6934;

  corral_source_split_6934:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_6936;

  corral_source_split_6936:
    assume {:verifier.code 0} true;
    $i26 := $load.i24($M.5, $p25);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $i27 := $and.i24($i26, $sub.i24(0, 262144));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i28 := $or.i24($i27, 2696);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p25, $i28);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p29, 0);
    goto corral_source_split_6942;

  corral_source_split_6942:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.6, $p30);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i64($i31);
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $i33 := $and.i64($i32, 1);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} $i34 := ldv__builtin_expect($i33, 0);
    call {:si_unique_call 1012} {:cexpr "tmp"} boogie_si_record_i64($i34);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    assume {:branchcond $i35} true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1015} __dynamic_dev_dbg.ref.ref.ref($p2, $p9, .str.153);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb32_dummy:
    assume false;
    return;

  $bb26_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7030;
}



const update_edgeport_E2PROM: ref;

axiom update_edgeport_E2PROM == $sub.ref(0, 418379);

procedure update_edgeport_E2PROM($p0: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.23, $M.0, $CurrAddr, assertsPassed;



implementation update_edgeport_E2PROM($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p12: ref;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $i16: i1;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p31: ref;
  var $i32: i8;
  var $p34: ref;
  var $i35: i8;
  var $p37: ref;
  var $i38: i8;
  var $i39: i32;
  var $i40: i32;
  var $i41: i16;
  var $i42: i32;
  var $p44: ref;
  var $i45: i8;
  var $i46: i16;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $p51: ref;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $p62: ref;
  var $i63: i16;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i32;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i24;
  var $i80: i24;
  var $i81: i24;
  var $p82: ref;
  var $p83: ref;
  var $i84: i8;
  var $i85: i64;
  var $i86: i64;
  var $i87: i64;
  var $i88: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $p98: ref;
  var $i99: i16;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i24;
  var $i109: i24;
  var $i110: i24;
  var $p111: ref;
  var $p112: ref;
  var $i113: i8;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var $p119: ref;
  var $i120: i8;
  var $i121: i32;
  var $p123: ref;
  var $i124: i8;
  var $i125: i32;
  var $p127: ref;
  var $i128: i16;
  var $i129: i32;
  var $i130: i32;
  var $i131: i32;
  var $i132: i32;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i24;
  var $i140: i24;
  var $i141: i24;
  var $p142: ref;
  var $p143: ref;
  var $i144: i8;
  var $i145: i64;
  var $i146: i64;
  var $i147: i64;
  var $i148: i1;
  var $p149: ref;
  var $i150: i64;
  var $i151: i1;
  var $p153: ref;
  var $i154: i32;
  var $i155: i32;
  var $p156: ref;
  var $i157: i16;
  var $i158: i32;
  var $i159: i16;
  var $i160: i16;
  var $p161: ref;
  var $p162: ref;
  var $i163: i32;
  var $i164: i16;
  var $i165: i32;
  var $i166: i16;
  var $i167: i16;
  var $i168: i32;
  var $i169: i16;
  var $i170: i32;
  var $i171: i16;
  var $p172: ref;
  var $p173: ref;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $i179: i16;
  var $i180: i32;
  var $i181: i16;
  var $i182: i16;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $i188: i32;
  var $i189: i32;
  var $i190: i32;
  var $p191: ref;
  var $i192: i64;
  var $i193: i1;
  var $p152: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i24;
  var $i201: i24;
  var $i202: i24;
  var $p203: ref;
  var $p204: ref;
  var $i205: i8;
  var $i206: i64;
  var $i207: i64;
  var $i208: i64;
  var $i209: i1;
  var $p210: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7118;

  corral_source_split_7118:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7120;

  corral_source_split_7120:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7121;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7122;

  corral_source_split_7122:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1092, 1)), $mul.ref(24, 1));
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i14 := $zext.i8.i32($i13);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i15 := $slt.i32($i14, 255);
    assume {:verifier.code 0} true;
    assume {:branchcond $i15} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i14, 255);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume $i16 == 1;
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $p18 := .str.161;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7133;

  corral_source_split_7133:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7135;

  corral_source_split_7135:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1045} $i24 := request_ihex_firmware($p1, $p18, $p23);
    call {:si_unique_call 1046} {:cexpr "response"} boogie_si_record_i32($i24);
    goto corral_source_split_7137;

  corral_source_split_7137:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.23, $p1);
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.24, $p27);
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(0, 1));
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    call {:si_unique_call 1048} {:cexpr "BootMajorVersion"} boogie_si_record_i8($i32);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(1, 1));
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.0, $p34);
    call {:si_unique_call 1049} {:cexpr "BootMinorVersion"} boogie_si_record_i8($i35);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(2, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $i38 := $load.i8($M.0, $p37);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $i39 := $zext.i8.i32($i38);
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $i40 := $shl.i32($i39, 8);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $i42 := $sext.i16.i32($i41);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 8)), $mul.ref(6, 1)), $mul.ref(3, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.0, $p44);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i16($i45);
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $i47 := $sext.i16.i32($i46);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i48 := $or.i32($i42, $i47);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    call {:si_unique_call 1050} {:cexpr "BootBuildNumber"} boogie_si_record_i16($i49);
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(6, 1));
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $i52 := $load.i8($M.0, $p51);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $i53 := $zext.i8.i32($i52);
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $i54 := $shl.i32($i53, 24);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(7, 1));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i59 := $shl.i32($i58, 16);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    $i60 := $add.i32($i54, $i59);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(8, 1));
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    $i63 := $load.i16($M.0, $p62);
    goto corral_source_split_7173;

  corral_source_split_7173:
    assume {:verifier.code 0} true;
    $i64 := $zext.i16.i32($i63);
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    $i65 := $add.i32($i60, $i64);
    call {:si_unique_call 1051} {:cexpr "BootCurVer"} boogie_si_record_i32($i65);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $i66 := $zext.i8.i32($i32);
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32($i66, 24);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i32($i35);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    $i69 := $shl.i32($i68, 16);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    $i70 := $add.i32($i67, $i69);
    goto corral_source_split_7180;

  corral_source_split_7180:
    assume {:verifier.code 0} true;
    $i71 := $zext.i16.i32($i49);
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $i72 := $add.i32($i70, $i71);
    call {:si_unique_call 1052} {:cexpr "BootNewVer"} boogie_si_record_i32($i72);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p73, .str);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p74, .str.163);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p75, .str.2);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p76, .str.164);
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p77);
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $i79 := $load.i24($M.5, $p78);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $i80 := $and.i24($i79, $sub.i24(0, 262144));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $i81 := $or.i24($i80, 325);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p78, $i81);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p82, 0);
    goto corral_source_split_7198;

  corral_source_split_7198:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    $i84 := $load.i8($M.6, $p83);
    goto corral_source_split_7200;

  corral_source_split_7200:
    assume {:verifier.code 0} true;
    $i85 := $zext.i8.i64($i84);
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    $i86 := $and.i64($i85, 1);
    goto corral_source_split_7202;

  corral_source_split_7202:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} $i87 := ldv__builtin_expect($i86, 0);
    call {:si_unique_call 1054} {:cexpr "tmp"} boogie_si_record_i64($i87);
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $i88 := $ne.i64($i87, 0);
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    assume {:branchcond $i88} true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i101 := $ugt.i32($i72, $i65);
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    assume {:branchcond $i101} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i101 == 1);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p194, .str);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p195, .str.163);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p196, .str.2);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p197, .str.168);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p198);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i200 := $load.i24($M.5, $p199);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $i201 := $and.i24($i200, $sub.i24(0, 262144));
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i202 := $or.i24($i201, 354);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p199, $i202);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p203, 0);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $i205 := $load.i8($M.6, $p204);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i206 := $zext.i8.i64($i205);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i207 := $and.i64($i206, 1);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i208 := ldv__builtin_expect($i207, 0);
    call {:si_unique_call 1059} {:cexpr "tmp___5"} boogie_si_record_i64($i208);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i209 := $ne.i64($i208, 0);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    assume {:branchcond $i209} true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i209 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.23, $p1);
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} release_firmware($p210);
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb39:
    assume $i209 == 1;
    goto corral_source_split_7366;

  corral_source_split_7366:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1076} __dynamic_dev_dbg.ref.ref.ref($p5, $p10, .str.168);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb18:
    assume $i101 == 1;
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p102, .str);
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p103, .str.163);
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $p104 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p104, .str.2);
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p105, .str.165);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p106);
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $i108 := $load.i24($M.5, $p107);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    $i109 := $and.i24($i108, $sub.i24(0, 262144));
    goto corral_source_split_7232;

  corral_source_split_7232:
    assume {:verifier.code 0} true;
    $i110 := $or.i24($i109, 333);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p107, $i110);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p111, 0);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $i113 := $load.i8($M.6, $p112);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i114 := $zext.i8.i64($i113);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i115 := $and.i64($i114, 1);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1056} $i116 := ldv__builtin_expect($i115, 0);
    call {:si_unique_call 1057} {:cexpr "tmp___0"} boogie_si_record_i64($i116);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p133, .str);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p134, .str.163);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p135, .str.2);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p136, .str.166);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i139 := $load.i24($M.5, $p138);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i140 := $and.i24($i139, $sub.i24(0, 262144));
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i141 := $or.i24($i140, 335);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p138, $i141);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p142, 0);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i144 := $load.i8($M.6, $p143);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i145 := $zext.i8.i64($i144);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $i146 := $and.i64($i145, 1);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1061} $i147 := ldv__builtin_expect($i146, 0);
    call {:si_unique_call 1062} {:cexpr "tmp___1"} boogie_si_record_i64($i147);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i148 := $ne.i64($i147, 0);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1064} $p149 := ihex_next_binrec($p29);
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $i150 := $p2i.ref.i64($p149);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i151 := $ne.i64($i150, 0);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i151 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb26:
    assume $i151 == 1;
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $p152 := $p149;
    goto $bb29;

  $bb29:
    call $p153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $p161, $p162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $p172, $p173, $i174, $i175, $p176, $i177, $p191, $i192, $i193, $p152 := update_edgeport_E2PROM_loop_$bb29($p0, $p153, $i154, $i155, $p156, $i157, $i158, $i159, $i160, $p161, $p162, $i163, $i164, $i165, $i166, $i167, $i168, $i169, $i170, $i171, $p172, $p173, $i174, $i175, $p176, $i177, $p191, $i192, $i193, $p152);
    goto $bb29_last;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p152, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $i154 := $load.i32($M.0, $p153);
    goto corral_source_split_7318;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} $i155 := __fswab32($i154);
    call {:si_unique_call 1066} {:cexpr "tmp___2"} boogie_si_record_i32($i155);
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p152, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $i157 := $load.i16($M.0, $p156);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $i158 := $zext.i16.i32($i157);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $i159 := $trunc.i32.i16($i158);
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i160 := __fswab16($i159);
    call {:si_unique_call 1068} {:cexpr "tmp___3"} boogie_si_record_i16($i160);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $p162 := $load.ref($M.0, $p161);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $i163 := $lshr.i32($i155, 16);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    $i164 := $trunc.i32.i16($i163);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    $i165 := $zext.i16.i32($i164);
    goto corral_source_split_7329;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    $i166 := $trunc.i32.i16($i165);
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $i167 := $trunc.i32.i16($i155);
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $i168 := $zext.i16.i32($i167);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $i169 := $trunc.i32.i16($i168);
    goto corral_source_split_7333;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    $i170 := $zext.i16.i32($i160);
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    $i171 := $trunc.i32.i16($i170);
    goto corral_source_split_7335;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p152, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p172);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} $i174 := rom_write($p162, $i166, $i169, $i171, $p173);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    call {:si_unique_call 1070} {:cexpr "response"} boogie_si_record_i32($i174);
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    $i175 := $slt.i32($i174, 0);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p176, $i177 := $p152, $i155;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} $p191 := ihex_next_binrec($p152);
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $i192 := $p2i.ref.i64($p191);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    $i193 := $ne.i64($i192, 0);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i193 == 1);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume $i193 == 1;
    assume {:verifier.code 0} true;
    $p152 := $p191;
    goto $bb35_dummy;

  $bb31:
    assume $i175 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p176, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $i179 := $load.i16($M.0, $p178);
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i180 := $zext.i16.i32($i179);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    $i181 := $trunc.i32.i16($i180);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1071} $i182 := __fswab16($i181);
    call {:si_unique_call 1072} {:cexpr "tmp___4"} boogie_si_record_i16($i182);
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    $p184 := $load.ref($M.0, $p183);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p184, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_7350;

  corral_source_split_7350:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p186, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i188 := $lshr.i32($i177, 16);
    goto corral_source_split_7352;

  corral_source_split_7352:
    assume {:verifier.code 0} true;
    $i189 := $and.i32($i177, 65535);
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $i190 := $zext.i16.i32($i182);
    goto corral_source_split_7354;

  corral_source_split_7354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1073} dev_err.ref.ref.i32.i32.i32($p187, .str.167, $i188, $i189, $i190);
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i148 == 1;
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1063} __dynamic_dev_dbg.ref.ref.ref($p4, $p10, .str.166);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb20:
    assume $i117 == 1;
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(6, 1));
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $i120 := $load.i8($M.0, $p119);
    goto corral_source_split_7270;

  corral_source_split_7270:
    assume {:verifier.code 0} true;
    $i121 := $zext.i8.i32($i120);
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(7, 1));
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    $i124 := $load.i8($M.0, $p123);
    goto corral_source_split_7273;

  corral_source_split_7273:
    assume {:verifier.code 0} true;
    $i125 := $zext.i8.i32($i124);
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(8, 1));
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    $i128 := $load.i16($M.0, $p127);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $i129 := $zext.i16.i32($i128);
    goto corral_source_split_7277;

  corral_source_split_7277:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i32($i32);
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 0} true;
    $i131 := $zext.i8.i32($i35);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $i132 := $zext.i16.i32($i49);
    goto corral_source_split_7280;

  corral_source_split_7280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32.i32.i32.i32($p3, $p10, .str.165, $i121, $i125, $i129, $i130, $i131, $i132);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb15:
    assume $i88 == 1;
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(6, 1));
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(7, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1026, 1)), $mul.ref(8, 1));
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    $i99 := $load.i16($M.0, $p98);
    goto corral_source_split_7214;

  corral_source_split_7214:
    assume {:verifier.code 0} true;
    $i100 := $zext.i16.i32($i99);
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1055} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p2, $p10, .str.164, $i92, $i96, $i100);
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i25 == 1;
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1047} dev_err.ref.ref.ref.i32($p10, .str.154, $p18, $i24);
    goto corral_source_split_7141;

  corral_source_split_7141:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb2:
    assume $i15 == 1;
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i14, 254);
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i17 == 1);
    goto $bb6;

  $bb7:
    assume $i17 == 1;
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $p18 := .str.162;
    goto $bb9;

  $bb35_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7315;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 419411);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_7372;

  corral_source_split_7372:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_endpoint_is_int_in: ref;

axiom usb_endpoint_is_int_in == $sub.ref(0, 420443);

procedure usb_endpoint_is_int_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_int_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $i1 := usb_endpoint_xfer_int($p0);
    call {:si_unique_call 1078} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1079} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 1080} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const ldv_usb_alloc_urb_31: ref;

axiom ldv_usb_alloc_urb_31 == $sub.ref(0, 421475);

procedure ldv_usb_alloc_urb_31($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_31($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1081} {:cexpr "ldv_usb_alloc_urb_31:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1082} {:cexpr "ldv_usb_alloc_urb_31:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1083} ldv_check_alloc_flags($i1);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} $p2 := ldv_undef_ptr();
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const usb_endpoint_is_bulk_in: ref;

axiom usb_endpoint_is_bulk_in == $sub.ref(0, 422507);

procedure usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_in($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 1086} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i3 := usb_endpoint_dir_in($p0);
    call {:si_unique_call 1088} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const ldv_usb_alloc_urb_32: ref;

axiom ldv_usb_alloc_urb_32 == $sub.ref(0, 423539);

procedure ldv_usb_alloc_urb_32($i0: i32, $i1: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_alloc_urb_32($i0: i32, $i1: i32) returns ($r: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1089} {:cexpr "ldv_usb_alloc_urb_32:arg:ldv_func_arg1"} boogie_si_record_i32($i0);
    call {:si_unique_call 1090} {:cexpr "ldv_usb_alloc_urb_32:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} ldv_check_alloc_flags($i1);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $p2 := ldv_undef_ptr();
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;
}



const usb_endpoint_is_bulk_out: ref;

axiom usb_endpoint_is_bulk_out == $sub.ref(0, 424571);

procedure usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_is_bulk_out($p0: ref) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1093} $i1 := usb_endpoint_xfer_bulk($p0);
    call {:si_unique_call 1094} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} $i3 := usb_endpoint_dir_out($p0);
    call {:si_unique_call 1096} {:cexpr "tmp___0"} boogie_si_record_i32($i3);
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $i6 := $i5;
    goto $bb6;

  $bb3:
    assume $i4 == 1;
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $i5 := 1;
    goto $bb5;
}



const ldv_usb_submit_urb_33: ref;

axiom ldv_usb_submit_urb_33 == $sub.ref(0, 425603);

procedure ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_usb_submit_urb_33($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1097} {:cexpr "ldv_usb_submit_urb_33:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7426;

  corral_source_split_7426:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} ldv_check_alloc_flags($i1);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p2 := ldv_undef_ptr();
    goto corral_source_split_7428;

  corral_source_split_7428:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;
}



const usb_endpoint_xfer_bulk: ref;

axiom usb_endpoint_xfer_bulk == $sub.ref(0, 426635);

procedure usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_bulk($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7432;

  corral_source_split_7432:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7438;

  corral_source_split_7438:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const usb_endpoint_dir_out: ref;

axiom usb_endpoint_dir_out == $sub.ref(0, 427667);

procedure usb_endpoint_dir_out($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_out($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_7442;

  corral_source_split_7442:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i4 := $sge.i32($i3, 0);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_dir_in: ref;

axiom usb_endpoint_dir_in == $sub.ref(0, 428699);

procedure usb_endpoint_dir_in($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_dir_in($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i1;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(2, 1));
    goto corral_source_split_7448;

  corral_source_split_7448:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i3 := $sext.i8.i32($i2);
    goto corral_source_split_7450;

  corral_source_split_7450:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 0);
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;
}



const usb_endpoint_xfer_int: ref;

axiom usb_endpoint_xfer_int == $sub.ref(0, 429731);

procedure usb_endpoint_xfer_int($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_xfer_int($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i8;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(3, 1));
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i2 := $load.i8($M.0, $p1);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i3 := $zext.i8.i32($i2);
    goto corral_source_split_7457;

  corral_source_split_7457:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 3);
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 3);
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const request_ihex_firmware: ref;

axiom request_ihex_firmware == $sub.ref(0, 430763);

procedure request_ihex_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.23, $CurrAddr;



implementation request_ihex_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1101} $i4 := request_firmware($p3, $p1, $p2);
    call {:si_unique_call 1102} {:cexpr "ret"} boogie_si_record_i32($i4);
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.25, $p3);
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i8 := ihex_validate_fw($p7);
    call {:si_unique_call 1104} {:cexpr "ret"} boogie_si_record_i32($i8);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.25, $p3);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $M.23 := $store.ref($M.23, $p0, $p11);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb5:
    assume $i9 == 1;
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} dev_err.ref.ref.ref($p2, .str.158, $p1);
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.25, $p3);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} release_firmware($p10);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i6 := $i8;
    goto $bb3;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb3;
}



const ihex_next_binrec: ref;

axiom ihex_next_binrec == $sub.ref(0, 431795);

procedure ihex_next_binrec($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation ihex_next_binrec($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;
  var $i4: i16;
  var $i5: i16;
  var $i6: i32;
  var $i7: i32;
  var $i8: i32;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $p14: ref;
  var $i15: i16;
  var $i16: i32;
  var $i17: i16;
  var $i18: i16;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i32.i16($i3);
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1107} $i5 := __fswab16($i4);
    call {:si_unique_call 1108} {:cexpr "tmp"} boogie_si_record_i16($i5);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    goto corral_source_split_7488;

  corral_source_split_7488:
    assume {:verifier.code 0} true;
    $i7 := $add.i32($i6, 5);
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i8 := $and.i32($i7, $sub.i32(0, 4));
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i9 := $add.i32($i8, $sub.i32(0, 2));
    call {:si_unique_call 1109} {:cexpr "next"} boogie_si_record_i32($i9);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7492;

  corral_source_split_7492:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i9);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 8));
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p11, $mul.ref($i12, 8)), $mul.ref(4, 1));
    goto corral_source_split_7496;

  corral_source_split_7496:
    assume {:verifier.code 0} true;
    $i15 := $load.i16($M.0, $p14);
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $i16 := $zext.i16.i32($i15);
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $i17 := $trunc.i32.i16($i16);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $i18 := __fswab16($i17);
    call {:si_unique_call 1111} {:cexpr "tmp___0"} boogie_si_record_i16($i18);
    goto corral_source_split_7500;

  corral_source_split_7500:
    assume {:verifier.code 0} true;
    $i19 := $zext.i16.i32($i18);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    assume {:branchcond $i20} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $p21 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7508;

  corral_source_split_7508:
    assume {:verifier.code 0} true;
    $r := $p21;
    return;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p21 := $p13;
    goto $bb3;
}



const __fswab32: ref;

axiom __fswab32 == $sub.ref(0, 432827);

procedure __fswab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __fswab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} {:cexpr "__fswab32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $i1 := __arch_swab32($i0);
    call {:si_unique_call 1114} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __fswab16: ref;

axiom __fswab16 == $sub.ref(0, 433859);

procedure __fswab16($i0: i16) returns ($r: i16);
  free requires assertsPassed;



implementation __fswab16($i0: i16) returns ($r: i16)
{
  var $i1: i32;
  var $i2: i32;
  var $i3: i16;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $i7: i16;
  var $i8: i32;
  var $i9: i32;
  var $i10: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1115} {:cexpr "__fswab16:arg:val"} boogie_si_record_i16($i0);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    $i1 := $zext.i16.i32($i0);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i2 := $shl.i32($i1, 8);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i16($i2);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    $i4 := $sext.i16.i32($i3);
    goto corral_source_split_7517;

  corral_source_split_7517:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i0);
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $i6 := $ashr.i32($i5, 8);
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $i7 := $trunc.i32.i16($i6);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $i8 := $sext.i16.i32($i7);
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $i9 := $or.i32($i4, $i8);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const rom_write: ref;

axiom rom_write == $sub.ref(0, 434891);

procedure rom_write($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation rom_write($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i16;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i16;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i16;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i12: i16;
  var $i13: i16;
  var $p14: ref;
  var $i47: i32;
  var $i11: i32;
  var $i34: i32;
  var $i8: i32;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} {:cexpr "rom_write:arg:extAddr"} boogie_si_record_i16($i1);
    call {:si_unique_call 1117} {:cexpr "rom_write:arg:addr"} boogie_si_record_i16($i2);
    call {:si_unique_call 1118} {:cexpr "rom_write:arg:length"} boogie_si_record_i16($i3);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1119} $p5 := kmalloc(64, 208);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i3);
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i34 := $i11;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} kfree($p5);
    goto corral_source_split_7567;

  corral_source_split_7567:
    assume {:verifier.code 0} true;
    $i8 := $i34;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    $i12, $i13, $p14 := $i2, $i3, $p4;
    goto $bb8;

  $bb8:
    call $i15, $i16, $i17, $i18, $p19, $p20, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i12, $i13, $p14, $i47, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29 := rom_write_loop_$bb8($p0, $i1, $p5, $i15, $i16, $i17, $i18, $p19, $p20, $i21, $p22, $p23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i33, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i12, $i13, $p14, $i47, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29);
    goto $bb8_last;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i13);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 64);
    goto corral_source_split_7542;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7546;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    $i18 := $zext.i16.i64($i17);
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_27 := $M.0;
    cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1120} cmdloc_dummy_var_29 := $memcpy.i8(cmdloc_dummy_var_27, cmdloc_dummy_var_28, $p5, $p14, $i18, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_29;
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7549;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} $i21 := __create_pipe($p20, 0);
    call {:si_unique_call 1122} {:cexpr "tmp___0"} boogie_si_record_i32($i21);
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    $i24 := $or.i32($i21, $sub.i32(0, 2147483648));
    goto corral_source_split_7554;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i12);
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i26 := $trunc.i32.i16($i25);
    goto corral_source_split_7556;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i1);
    goto corral_source_split_7557;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    $i28 := $trunc.i32.i16($i27);
    goto corral_source_split_7558;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    $i29 := $zext.i16.i32($i17);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $i30 := $trunc.i32.i16($i29);
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i31 := usb_control_msg($p23, $i24, 6, 64, $i26, $i28, $p5, $i30, 300);
    call {:si_unique_call 1124} {:cexpr "result"} boogie_si_record_i32($i31);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, 0);
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i13);
    goto corral_source_split_7569;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i17);
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i35, $i36);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    call {:si_unique_call 1126} {:cexpr "length"} boogie_si_record_i16($i38);
    goto corral_source_split_7572;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i12);
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i17);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i39, $i40);
    goto corral_source_split_7575;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    call {:si_unique_call 1127} {:cexpr "addr"} boogie_si_record_i16($i42);
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i64($i17);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p14, $mul.ref($i43, 1));
    goto corral_source_split_7578;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i38);
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    $i47 := $i31;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    $i11 := $i47;
    goto $bb7;

  $bb17:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i12, $i13, $p14 := $i42, $i38, $p44;
    goto $bb17_dummy;

  $bb13:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i34 := $i33;
    goto $bb15;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i17 := 64;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7539;
}



const release_firmware: ref;

axiom release_firmware == $sub.ref(0, 435923);

procedure release_firmware($p0: ref);
  free requires assertsPassed;



implementation release_firmware($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    return;
}



const usb_control_msg: ref;

axiom usb_control_msg == $sub.ref(0, 436955);

procedure usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32);
  free requires assertsPassed;



implementation usb_control_msg($p0: ref, $i1: i32, $i2: i8, $i3: i8, $i4: i16, $i5: i16, $p6: ref, $i7: i16, $i8: i32) returns ($r: i32)
{
  var $i9: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1128} {:cexpr "usb_control_msg:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1129} {:cexpr "usb_control_msg:arg:arg2"} boogie_si_record_i8($i2);
    call {:si_unique_call 1130} {:cexpr "usb_control_msg:arg:arg3"} boogie_si_record_i8($i3);
    call {:si_unique_call 1131} {:cexpr "usb_control_msg:arg:arg4"} boogie_si_record_i16($i4);
    call {:si_unique_call 1132} {:cexpr "usb_control_msg:arg:arg5"} boogie_si_record_i16($i5);
    call {:si_unique_call 1133} {:cexpr "usb_control_msg:arg:arg7"} boogie_si_record_i16($i7);
    call {:si_unique_call 1134} {:cexpr "usb_control_msg:arg:arg8"} boogie_si_record_i32($i8);
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1135} $i9 := __VERIFIER_nondet_int();
    call {:si_unique_call 1136} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i9);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;
}



const __arch_swab32: ref;

axiom __arch_swab32 == $sub.ref(0, 437987);

procedure __arch_swab32($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation __arch_swab32($i0: i32) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} {:cexpr "__arch_swab32:arg:val"} boogie_si_record_i32($i0);
    call {:si_unique_call 1138} $i1 := devirtbounce.2(0, $i0);
    call {:si_unique_call 1139} {:cexpr "val"} boogie_si_record_i32($i1);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const request_firmware: ref;

axiom request_firmware == $sub.ref(0, 439019);

procedure request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation request_firmware($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1140} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1141} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_7592;

  corral_source_split_7592:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const ihex_validate_fw: ref;

axiom ihex_validate_fw == $sub.ref(0, 440051);

procedure ihex_validate_fw($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation ihex_validate_fw($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i16;
  var $i9: i32;
  var $i10: i16;
  var $i11: i16;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i16;
  var $i17: i32;
  var $i18: i16;
  var $i19: i16;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i2: i64;
  var $i14: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(0, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $i2 := 0;
    goto $bb1;

  $bb1:
    call $p3, $p4, $p5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i2 := ihex_validate_fw_loop_$bb1($p0, $p1, $p3, $p4, $p5, $p6, $p7, $i8, $i9, $i10, $i11, $i12, $i13, $p15, $i16, $i17, $i18, $i19, $i20, $i21, $i22, $i23, $i24, $i25, $i26, $i2);
    goto $bb1_last;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.24, $p3);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($p4, $mul.ref($i2, 1));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i8 := $load.i16($M.0, $p7);
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i8);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i32.i16($i9);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} $i11 := __fswab16($i10);
    call {:si_unique_call 1143} {:cexpr "tmp"} boogie_si_record_i16($i11);
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $i13 := $eq.i32($i12, 0);
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7615;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    $i16 := $load.i16($M.0, $p15);
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i32($i16);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    $i18 := $trunc.i32.i16($i17);
    goto corral_source_split_7618;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i19 := __fswab16($i18);
    call {:si_unique_call 1145} {:cexpr "tmp___0"} boogie_si_record_i16($i19);
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i64($i19);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    $i21 := $add.i64($i20, 9);
    goto corral_source_split_7621;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    $i22 := $and.i64($i21, $sub.i64(0, 4));
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i22, $i2);
    call {:si_unique_call 1146} {:cexpr "ofs"} boogie_si_record_i64($i23);
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $i24 := $load.i64($M.26, $p1);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $i25 := $sub.i64($i24, 6);
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $i26 := $uge.i64($i25, $i23);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(0, 22);
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $r := $i14;
    return;

  $bb7:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i2 := $i23;
    goto $bb7_dummy;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i14 := 0;
    goto $bb5;

  $bb7_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7597;
}



const sram_write: ref;

axiom sram_write == $sub.ref(0, 441083);

procedure sram_write($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, assertsPassed;



implementation sram_write($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i24;
  var $i13: i24;
  var $i14: i24;
  var $p15: ref;
  var $p16: ref;
  var $i17: i8;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $p28: ref;
  var $i29: i64;
  var $i30: i1;
  var $i32: i32;
  var $i33: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i16;
  var $i41: i64;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i16;
  var $i50: i32;
  var $i51: i16;
  var $i52: i32;
  var $i53: i16;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i58: i32;
  var $i59: i32;
  var $i60: i32;
  var $i61: i16;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i16;
  var $i66: i64;
  var $p67: ref;
  var $i68: i32;
  var $i69: i1;
  var $i35: i16;
  var $i36: i16;
  var $p37: ref;
  var $i70: i32;
  var $i34: i32;
  var $i57: i32;
  var $i31: i32;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1148} {:cexpr "sram_write:arg:extAddr"} boogie_si_record_i16($i1);
    call {:si_unique_call 1149} {:cexpr "sram_write:arg:addr"} boogie_si_record_i16($i2);
    call {:si_unique_call 1150} {:cexpr "sram_write:arg:length"} boogie_si_record_i16($i3);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7629;

  corral_source_split_7629:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p6, .str);
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7631;

  corral_source_split_7631:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.159);
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.2);
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str.160);
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $i12 := $load.i24($M.5, $p11);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $i13 := $and.i24($i12, $sub.i24(0, 262144));
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    $i14 := $or.i24($i13, 2020);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p11, $i14);
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p15, 0);
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i17 := $load.i8($M.6, $p16);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    $i18 := $zext.i8.i64($i17);
    goto corral_source_split_7647;

  corral_source_split_7647:
    assume {:verifier.code 0} true;
    $i19 := $and.i64($i18, 1);
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i20 := ldv__builtin_expect($i19, 0);
    call {:si_unique_call 1152} {:cexpr "tmp"} boogie_si_record_i64($i20);
    goto corral_source_split_7649;

  corral_source_split_7649:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_7650;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    assume {:branchcond $i21} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1154} $p28 := kmalloc(64, 208);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    $i29 := $p2i.ref.i64($p28);
    goto corral_source_split_7662;

  corral_source_split_7662:
    assume {:verifier.code 0} true;
    $i30 := $eq.i64($i29, 0);
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    assume {:branchcond $i30} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i32($i3);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $i34 := 0;
    assume {:branchcond $i33} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i57 := $i34;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_7701;

  corral_source_split_7701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1160} kfree($p28);
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $i31 := $i57;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $r := $i31;
    return;

  $bb8:
    assume $i33 == 1;
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i35, $i36, $p37 := $i2, $i3, $p4;
    goto $bb11;

  $bb11:
    call $i38, $i39, $i40, $i41, $p42, $p43, $i44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i35, $i36, $p37, $i70, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32 := sram_write_loop_$bb11($p0, $i1, $p28, $i38, $i39, $i40, $i41, $p42, $p43, $i44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $p67, $i68, $i69, $i35, $i36, $p37, $i70, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32);
    goto $bb11_last;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i38 := $zext.i16.i32($i36);
    goto corral_source_split_7676;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    $i39 := $ugt.i32($i38, 64);
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    $i40 := $i36;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i64($i40);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_30 := $M.0;
    cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1155} cmdloc_dummy_var_32 := $memcpy.i8(cmdloc_dummy_var_30, cmdloc_dummy_var_31, $p28, $p37, $i41, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_32;
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7684;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} $i44 := __create_pipe($p43, 0);
    call {:si_unique_call 1157} {:cexpr "tmp___1"} boogie_si_record_i32($i44);
    goto corral_source_split_7686;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    $i47 := $or.i32($i44, $sub.i32(0, 2147483648));
    goto corral_source_split_7689;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i35);
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i16($i48);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    $i50 := $zext.i16.i32($i1);
    goto corral_source_split_7692;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    $i51 := $trunc.i32.i16($i50);
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $i52 := $zext.i16.i32($i40);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i16($i52);
    goto corral_source_split_7695;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} $i54 := usb_control_msg($p46, $i47, 4, 64, $i49, $i51, $p28, $i53, 300);
    call {:si_unique_call 1159} {:cexpr "result"} boogie_si_record_i32($i54);
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i54, 0);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    $i56 := $i54;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i36);
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $i59 := $zext.i16.i32($i40);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    $i60 := $sub.i32($i58, $i59);
    goto corral_source_split_7706;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    $i61 := $trunc.i32.i16($i60);
    call {:si_unique_call 1161} {:cexpr "length"} boogie_si_record_i16($i61);
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $i62 := $zext.i16.i32($i35);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    $i63 := $zext.i16.i32($i40);
    goto corral_source_split_7709;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    $i64 := $add.i32($i62, $i63);
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i32.i16($i64);
    call {:si_unique_call 1162} {:cexpr "addr"} boogie_si_record_i16($i65);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    $i66 := $zext.i16.i64($i40);
    goto corral_source_split_7712;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($p37, $mul.ref($i66, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $i68 := $zext.i16.i32($i61);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    $i69 := $ne.i32($i68, 0);
    goto corral_source_split_7715;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    $i70 := $i54;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    $i34 := $i70;
    goto $bb10;

  $bb20:
    assume $i69 == 1;
    assume {:verifier.code 0} true;
    $i35, $i36, $p37 := $i65, $i61, $p67;
    goto $bb20_dummy;

  $bb16:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb18;

  $bb13:
    assume $i39 == 1;
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    $i40 := 64;
    goto $bb15;

  $bb4:
    assume $i30 == 1;
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    $i31 := $sub.i32(0, 12);
    goto $bb6;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i21 == 1;
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i1);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i2);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i3);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32.i32($p5, $p24, .str.160, .str.159, $i25, $i26, $i27);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7674;
}



const dump_product_info: ref;

axiom dump_product_info == $sub.ref(0, 442115);

procedure dump_product_info($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $CurrAddr;



implementation dump_product_info($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i24;
  var $i31: i24;
  var $i32: i24;
  var $p33: ref;
  var $p34: ref;
  var $i35: i8;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i1;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $i46: i24;
  var $i47: i24;
  var $i48: i24;
  var $p49: ref;
  var $p50: ref;
  var $i51: i8;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $i57: i16;
  var $i58: i32;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $i65: i24;
  var $i66: i24;
  var $i67: i24;
  var $p68: ref;
  var $p69: ref;
  var $i70: i8;
  var $i71: i64;
  var $i72: i64;
  var $i73: i64;
  var $i74: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i24;
  var $i85: i24;
  var $i86: i24;
  var $p87: ref;
  var $p88: ref;
  var $i89: i8;
  var $i90: i64;
  var $i91: i64;
  var $i92: i64;
  var $i93: i1;
  var $p94: ref;
  var $i95: i8;
  var $i96: i32;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $i103: i24;
  var $i104: i24;
  var $i105: i24;
  var $p106: ref;
  var $p107: ref;
  var $i108: i8;
  var $i109: i64;
  var $i110: i64;
  var $i111: i64;
  var $i112: i1;
  var $p113: ref;
  var $i114: i32;
  var $i115: i32;
  var $i116: i8;
  var $i117: i32;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $i124: i24;
  var $i125: i24;
  var $i126: i24;
  var $p127: ref;
  var $p128: ref;
  var $i129: i8;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $i133: i1;
  var $p134: ref;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i8;
  var $i139: i32;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i24;
  var $i147: i24;
  var $i148: i24;
  var $p149: ref;
  var $p150: ref;
  var $i151: i8;
  var $i152: i64;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $p156: ref;
  var $i157: i32;
  var $i158: i32;
  var $i159: i32;
  var $i160: i8;
  var $i161: i32;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $i168: i24;
  var $i169: i24;
  var $i170: i24;
  var $p171: ref;
  var $p172: ref;
  var $i173: i8;
  var $i174: i64;
  var $i175: i64;
  var $i176: i64;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i8;
  var $i183: i32;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $i190: i24;
  var $i191: i24;
  var $i192: i24;
  var $p193: ref;
  var $p194: ref;
  var $i195: i8;
  var $i196: i64;
  var $i197: i64;
  var $i198: i64;
  var $i199: i1;
  var $p200: ref;
  var $i201: i8;
  var $i202: i32;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i24;
  var $i210: i24;
  var $i211: i24;
  var $p212: ref;
  var $p213: ref;
  var $i214: i8;
  var $i215: i64;
  var $i216: i64;
  var $i217: i64;
  var $i218: i1;
  var $p219: ref;
  var $i220: i8;
  var $i221: i32;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $i228: i24;
  var $i229: i24;
  var $i230: i24;
  var $p231: ref;
  var $p232: ref;
  var $i233: i8;
  var $i234: i64;
  var $i235: i64;
  var $i236: i64;
  var $i237: i1;
  var $p238: ref;
  var $i239: i8;
  var $i240: i32;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i24;
  var $i248: i24;
  var $i249: i24;
  var $p250: ref;
  var $p251: ref;
  var $i252: i8;
  var $i253: i64;
  var $i254: i64;
  var $i255: i64;
  var $i256: i1;
  var $p257: ref;
  var $i258: i8;
  var $i259: i32;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $p265: ref;
  var $i266: i24;
  var $i267: i24;
  var $i268: i24;
  var $p269: ref;
  var $p270: ref;
  var $i271: i8;
  var $i272: i64;
  var $i273: i64;
  var $i274: i64;
  var $i275: i1;
  var $p276: ref;
  var $i277: i8;
  var $i278: i32;
  var $p279: ref;
  var $i280: i8;
  var $i281: i32;
  var $p282: ref;
  var $i283: i16;
  var $i284: i32;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $p288: ref;
  var $p289: ref;
  var $p290: ref;
  var $i291: i24;
  var $i292: i24;
  var $i293: i24;
  var $p294: ref;
  var $p295: ref;
  var $i296: i8;
  var $i297: i64;
  var $i298: i64;
  var $i299: i64;
  var $i300: i1;
  var $p301: ref;
  var $i302: i8;
  var $i303: i32;
  var $p304: ref;
  var $i305: i8;
  var $i306: i32;
  var $p307: ref;
  var $i308: i16;
  var $i309: i32;
  var $p310: ref;
  var $p311: ref;
  var $p312: ref;
  var $p313: ref;
  var $p314: ref;
  var $p315: ref;
  var $i316: i24;
  var $i317: i24;
  var $i318: i24;
  var $p319: ref;
  var $p320: ref;
  var $i321: i8;
  var $i322: i64;
  var $i323: i64;
  var $i324: i64;
  var $i325: i1;
  var $p327: ref;
  var $i328: i8;
  var $i329: i32;
  var $p331: ref;
  var $i332: i8;
  var $i333: i32;
  var $p335: ref;
  var $i336: i8;
  var $i337: i32;
  var $i338: i32;
  var $p339: ref;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $p343: ref;
  var $p344: ref;
  var $i345: i24;
  var $i346: i24;
  var $i347: i24;
  var $p348: ref;
  var $p349: ref;
  var $i350: i8;
  var $i351: i64;
  var $i352: i64;
  var $i353: i64;
  var $i354: i1;
  var $p355: ref;
  var $i356: i8;
  var $i357: i32;
  var $p358: ref;
  var $p359: ref;
  var $p360: ref;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $i364: i24;
  var $i365: i24;
  var $i366: i24;
  var $p367: ref;
  var $p368: ref;
  var $i369: i8;
  var $i370: i64;
  var $i371: i64;
  var $i372: i64;
  var $i373: i1;
  var $p374: ref;
  var $i375: i8;
  var $i376: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1165} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1166} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} $p7 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p9 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p10 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1172} $p11 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p12 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1174} $p13 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1175} $p14 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1176} $p15 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1177} $p16 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $p17 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1179} $p18 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_7721;

  corral_source_split_7721:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_7724;

  corral_source_split_7724:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p24, .str);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7727;

  corral_source_split_7727:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p25, .str.104);
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p26, .str.2);
    goto corral_source_split_7730;

  corral_source_split_7730:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p27, .str.105);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7733;

  corral_source_split_7733:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $i30 := $load.i24($M.5, $p29);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    $i31 := $and.i24($i30, $sub.i24(0, 262144));
    goto corral_source_split_7736;

  corral_source_split_7736:
    assume {:verifier.code 0} true;
    $i32 := $or.i24($i31, 398);
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p29, $i32);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7739;

  corral_source_split_7739:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p33, 0);
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    $i35 := $load.i8($M.6, $p34);
    goto corral_source_split_7742;

  corral_source_split_7742:
    assume {:verifier.code 0} true;
    $i36 := $zext.i8.i64($i35);
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $i37 := $and.i64($i36, 1);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1180} $i38 := ldv__builtin_expect($i37, 0);
    call {:si_unique_call 1181} {:cexpr "tmp"} boogie_si_record_i64($i38);
    goto corral_source_split_7745;

  corral_source_split_7745:
    assume {:verifier.code 0} true;
    $i39 := $ne.i64($i38, 0);
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i39 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7751;

  corral_source_split_7751:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p40, .str);
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p41, .str.104);
    goto corral_source_split_7754;

  corral_source_split_7754:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p42, .str.2);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7757;

  corral_source_split_7757:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p43, .str.106);
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_7760;

  corral_source_split_7760:
    assume {:verifier.code 0} true;
    $i46 := $load.i24($M.5, $p45);
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $i47 := $and.i24($i46, $sub.i24(0, 262144));
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    $i48 := $or.i24($i47, 399);
    goto corral_source_split_7763;

  corral_source_split_7763:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p45, $i48);
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p49, 0);
    goto corral_source_split_7766;

  corral_source_split_7766:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.6, $p50);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i64($i51);
    goto corral_source_split_7769;

  corral_source_split_7769:
    assume {:verifier.code 0} true;
    $i53 := $and.i64($i52, 1);
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1184} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_7772;

  corral_source_split_7772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p59, .str);
    goto corral_source_split_7781;

  corral_source_split_7781:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p60, .str.104);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7784;

  corral_source_split_7784:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p61, .str.2);
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p62, .str.107);
    goto corral_source_split_7787;

  corral_source_split_7787:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p63);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    $i65 := $load.i24($M.5, $p64);
    goto corral_source_split_7790;

  corral_source_split_7790:
    assume {:verifier.code 0} true;
    $i66 := $and.i24($i65, $sub.i24(0, 262144));
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $i67 := $or.i24($i66, 400);
    goto corral_source_split_7792;

  corral_source_split_7792:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p64, $i67);
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p68, 0);
    goto corral_source_split_7795;

  corral_source_split_7795:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $i70 := $load.i8($M.6, $p69);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    $i71 := $zext.i8.i64($i70);
    goto corral_source_split_7798;

  corral_source_split_7798:
    assume {:verifier.code 0} true;
    $i72 := $and.i64($i71, 1);
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1186} $i73 := ldv__builtin_expect($i72, 0);
    call {:si_unique_call 1187} {:cexpr "tmp___1"} boogie_si_record_i64($i73);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    $i74 := $ne.i64($i73, 0);
    goto corral_source_split_7801;

  corral_source_split_7801:
    assume {:verifier.code 0} true;
    assume {:branchcond $i74} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p78, .str);
    goto corral_source_split_7810;

  corral_source_split_7810:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p79, .str.104);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7813;

  corral_source_split_7813:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p80, .str.2);
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p81, .str.108);
    goto corral_source_split_7816;

  corral_source_split_7816:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    $i84 := $load.i24($M.5, $p83);
    goto corral_source_split_7819;

  corral_source_split_7819:
    assume {:verifier.code 0} true;
    $i85 := $and.i24($i84, $sub.i24(0, 262144));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $i86 := $or.i24($i85, 401);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p83, $i86);
    goto corral_source_split_7822;

  corral_source_split_7822:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p87, 0);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7825;

  corral_source_split_7825:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.6, $p88);
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $i90 := $zext.i8.i64($i89);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    $i91 := $and.i64($i90, 1);
    goto corral_source_split_7828;

  corral_source_split_7828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} $i92 := ldv__builtin_expect($i91, 0);
    call {:si_unique_call 1190} {:cexpr "tmp___2"} boogie_si_record_i64($i92);
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $i93 := $ne.i64($i92, 0);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    assume {:branchcond $i93} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p97, .str);
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p98, .str.104);
    goto corral_source_split_7841;

  corral_source_split_7841:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p99, .str.2);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p100, .str.109);
    goto corral_source_split_7845;

  corral_source_split_7845:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p101);
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    $i103 := $load.i24($M.5, $p102);
    goto corral_source_split_7848;

  corral_source_split_7848:
    assume {:verifier.code 0} true;
    $i104 := $and.i24($i103, $sub.i24(0, 262144));
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 0} true;
    $i105 := $or.i24($i104, 402);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p102, $i105);
    goto corral_source_split_7851;

  corral_source_split_7851:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p106, 0);
    goto corral_source_split_7853;

  corral_source_split_7853:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    $i108 := $load.i8($M.6, $p107);
    goto corral_source_split_7855;

  corral_source_split_7855:
    assume {:verifier.code 0} true;
    $i109 := $zext.i8.i64($i108);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i110 := $and.i64($i109, 1);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1192} $i111 := ldv__builtin_expect($i110, 0);
    call {:si_unique_call 1193} {:cexpr "tmp___3"} boogie_si_record_i64($i111);
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i112 := $ne.i64($i111, 0);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p118 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p118, .str);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p119, .str.104);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p120, .str.2);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p121, .str.110);
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7877;

  corral_source_split_7877:
    assume {:verifier.code 0} true;
    $p123 := $bitcast.ref.ref($p122);
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $i124 := $load.i24($M.5, $p123);
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $i125 := $and.i24($i124, $sub.i24(0, 262144));
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $i126 := $or.i24($i125, 403);
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p123, $i126);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p127, 0);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $i129 := $load.i8($M.6, $p128);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $i130 := $zext.i8.i64($i129);
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $i131 := $and.i64($i130, 1);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1195} $i132 := ldv__builtin_expect($i131, 0);
    call {:si_unique_call 1196} {:cexpr "tmp___4"} boogie_si_record_i64($i132);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i133 := $ne.i64($i132, 0);
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7901;

  corral_source_split_7901:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p140, .str);
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p141, .str.104);
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p142, .str.2);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7907;

  corral_source_split_7907:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p143, .str.111);
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p145 := $bitcast.ref.ref($p144);
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $i146 := $load.i24($M.5, $p145);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $i147 := $and.i24($i146, $sub.i24(0, 262144));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $i148 := $or.i24($i147, 404);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p145, $i148);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p149, 0);
    goto corral_source_split_7916;

  corral_source_split_7916:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.6, $p150);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i64($i151);
    goto corral_source_split_7919;

  corral_source_split_7919:
    assume {:verifier.code 0} true;
    $i153 := $and.i64($i152, 1);
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1198} $i154 := ldv__builtin_expect($i153, 0);
    call {:si_unique_call 1199} {:cexpr "tmp___5"} boogie_si_record_i64($i154);
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    $i155 := $ne.i64($i154, 0);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p162 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p162, .str);
    goto corral_source_split_7934;

  corral_source_split_7934:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p163, .str.104);
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p164, .str.2);
    goto corral_source_split_7938;

  corral_source_split_7938:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p165, .str.112);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p167 := $bitcast.ref.ref($p166);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    $i168 := $load.i24($M.5, $p167);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $i169 := $and.i24($i168, $sub.i24(0, 262144));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $i170 := $or.i24($i169, 405);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p167, $i170);
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p171, 0);
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $p172 := $add.ref($add.ref($p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i173 := $load.i8($M.6, $p172);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i174 := $zext.i8.i64($i173);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i175 := $and.i64($i174, 1);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1201} $i176 := ldv__builtin_expect($i175, 0);
    call {:si_unique_call 1202} {:cexpr "tmp___6"} boogie_si_record_i64($i176);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i177 := $ne.i64($i176, 0);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    assume {:branchcond $i177} true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p184 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p184, .str);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p185, .str.104);
    goto corral_source_split_7968;

  corral_source_split_7968:
    assume {:verifier.code 0} true;
    $p186 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p186, .str.2);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p187, .str.113);
    goto corral_source_split_7972;

  corral_source_split_7972:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p189 := $bitcast.ref.ref($p188);
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i190 := $load.i24($M.5, $p189);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i191 := $and.i24($i190, $sub.i24(0, 262144));
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $i192 := $or.i24($i191, 406);
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p189, $i192);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p193, 0);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    $p194 := $add.ref($add.ref($p10, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i195 := $load.i8($M.6, $p194);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i196 := $zext.i8.i64($i195);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    $i197 := $and.i64($i196, 1);
    goto corral_source_split_7984;

  corral_source_split_7984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1204} $i198 := ldv__builtin_expect($i197, 0);
    call {:si_unique_call 1205} {:cexpr "tmp___7"} boogie_si_record_i64($i198);
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    $i199 := $ne.i64($i198, 0);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7994;

  corral_source_split_7994:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p203, .str);
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p204, .str.104);
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p205 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p205, .str.2);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p206, .str.114);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $p208 := $bitcast.ref.ref($p207);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    $i209 := $load.i24($M.5, $p208);
    goto corral_source_split_8004;

  corral_source_split_8004:
    assume {:verifier.code 0} true;
    $i210 := $and.i24($i209, $sub.i24(0, 262144));
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    $i211 := $or.i24($i210, 407);
    goto corral_source_split_8006;

  corral_source_split_8006:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p208, $i211);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $p212 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p212, 0);
    goto corral_source_split_8009;

  corral_source_split_8009:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p11, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    $i214 := $load.i8($M.6, $p213);
    goto corral_source_split_8011;

  corral_source_split_8011:
    assume {:verifier.code 0} true;
    $i215 := $zext.i8.i64($i214);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i216 := $and.i64($i215, 1);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1207} $i217 := ldv__builtin_expect($i216, 0);
    call {:si_unique_call 1208} {:cexpr "tmp___8"} boogie_si_record_i64($i217);
    goto corral_source_split_8014;

  corral_source_split_8014:
    assume {:verifier.code 0} true;
    $i218 := $ne.i64($i217, 0);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p222 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p222, .str);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p223, .str.104);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p224, .str.2);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p225, .str.115);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $p227 := $bitcast.ref.ref($p226);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $i228 := $load.i24($M.5, $p227);
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $i229 := $and.i24($i228, $sub.i24(0, 262144));
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $i230 := $or.i24($i229, 408);
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p227, $i230);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $p231 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p231, 0);
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p12, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $i233 := $load.i8($M.6, $p232);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $i234 := $zext.i8.i64($i233);
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $i235 := $and.i64($i234, 1);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1210} $i236 := ldv__builtin_expect($i235, 0);
    call {:si_unique_call 1211} {:cexpr "tmp___9"} boogie_si_record_i64($i236);
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i237 := $ne.i64($i236, 0);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p241, .str);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p242, .str.104);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8056;

  corral_source_split_8056:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p243, .str.2);
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $p244 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p244, .str.116);
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    $p246 := $bitcast.ref.ref($p245);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    $i247 := $load.i24($M.5, $p246);
    goto corral_source_split_8062;

  corral_source_split_8062:
    assume {:verifier.code 0} true;
    $i248 := $and.i24($i247, $sub.i24(0, 262144));
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i249 := $or.i24($i248, 409);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p246, $i249);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p250, 0);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    $p251 := $add.ref($add.ref($p13, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i252 := $load.i8($M.6, $p251);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    $i253 := $zext.i8.i64($i252);
    goto corral_source_split_8070;

  corral_source_split_8070:
    assume {:verifier.code 0} true;
    $i254 := $and.i64($i253, 1);
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} $i255 := ldv__builtin_expect($i254, 0);
    call {:si_unique_call 1214} {:cexpr "tmp___10"} boogie_si_record_i64($i255);
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $i256 := $ne.i64($i255, 0);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p260 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p260, .str);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p261, .str.104);
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $p262 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p262, .str.2);
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $p263 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p263, .str.117);
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $p264 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p265 := $bitcast.ref.ref($p264);
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $i266 := $load.i24($M.5, $p265);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $i267 := $and.i24($i266, $sub.i24(0, 262144));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $i268 := $or.i24($i267, 413);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p265, $i268);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $p269 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p269, 0);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $p270 := $add.ref($add.ref($p14, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $i271 := $load.i8($M.6, $p270);
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $i272 := $zext.i8.i64($i271);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $i273 := $and.i64($i272, 1);
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} $i274 := ldv__builtin_expect($i273, 0);
    call {:si_unique_call 1217} {:cexpr "tmp___11"} boogie_si_record_i64($i274);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i275 := $ne.i64($i274, 0);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    assume {:branchcond $i275} true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i275 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p285, .str);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p286 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p286, .str.104);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p287 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p287, .str.2);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p288 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p288, .str.82);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p289 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p290 := $bitcast.ref.ref($p289);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i291 := $load.i24($M.5, $p290);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i292 := $and.i24($i291, $sub.i24(0, 262144));
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i293 := $or.i24($i292, 417);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p290, $i293);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p294 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p294, 0);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $p295 := $add.ref($add.ref($p15, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i296 := $load.i8($M.6, $p295);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i297 := $zext.i8.i64($i296);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i298 := $and.i64($i297, 1);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} $i299 := ldv__builtin_expect($i298, 0);
    call {:si_unique_call 1220} {:cexpr "tmp___12"} boogie_si_record_i64($i299);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i300 := $ne.i64($i299, 0);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i300 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p310 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p310, .str);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    $p311 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p311, .str.104);
    goto corral_source_split_8154;

  corral_source_split_8154:
    assume {:verifier.code 0} true;
    $p312 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p312, .str.2);
    goto corral_source_split_8156;

  corral_source_split_8156:
    assume {:verifier.code 0} true;
    $p313 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p313, .str.118);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    $p314 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8159;

  corral_source_split_8159:
    assume {:verifier.code 0} true;
    $p315 := $bitcast.ref.ref($p314);
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    $i316 := $load.i24($M.5, $p315);
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    $i317 := $and.i24($i316, $sub.i24(0, 262144));
    goto corral_source_split_8162;

  corral_source_split_8162:
    assume {:verifier.code 0} true;
    $i318 := $or.i24($i317, 421);
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p315, $i318);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $p319 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p319, 0);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    $p320 := $add.ref($add.ref($p16, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8167;

  corral_source_split_8167:
    assume {:verifier.code 0} true;
    $i321 := $load.i8($M.6, $p320);
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    $i322 := $zext.i8.i64($i321);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    $i323 := $and.i64($i322, 1);
    goto corral_source_split_8170;

  corral_source_split_8170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1222} $i324 := ldv__builtin_expect($i323, 0);
    call {:si_unique_call 1223} {:cexpr "tmp___13"} boogie_si_record_i64($i324);
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    $i325 := $ne.i64($i324, 0);
    goto corral_source_split_8172;

  corral_source_split_8172:
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p339 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p339, .str);
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $p340 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8189;

  corral_source_split_8189:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p340, .str.104);
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $p341 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p341, .str.2);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $p342 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p342, .str.119);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    $p343 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8195;

  corral_source_split_8195:
    assume {:verifier.code 0} true;
    $p344 := $bitcast.ref.ref($p343);
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    $i345 := $load.i24($M.5, $p344);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    $i346 := $and.i24($i345, $sub.i24(0, 262144));
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $i347 := $or.i24($i346, 423);
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p344, $i347);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    $p348 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p348, 0);
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    $p349 := $add.ref($add.ref($p17, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8203;

  corral_source_split_8203:
    assume {:verifier.code 0} true;
    $i350 := $load.i8($M.6, $p349);
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 0} true;
    $i351 := $zext.i8.i64($i350);
    goto corral_source_split_8205;

  corral_source_split_8205:
    assume {:verifier.code 0} true;
    $i352 := $and.i64($i351, 1);
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} $i353 := ldv__builtin_expect($i352, 0);
    call {:si_unique_call 1226} {:cexpr "tmp___14"} boogie_si_record_i64($i353);
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i354 := $ne.i64($i353, 0);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p358 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, $p358, .str);
    goto corral_source_split_8217;

  corral_source_split_8217:
    assume {:verifier.code 0} true;
    $p359 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p359, .str.104);
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $p360 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p360, .str.2);
    goto corral_source_split_8221;

  corral_source_split_8221:
    assume {:verifier.code 0} true;
    $p361 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p361, .str.120);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p362);
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    $i364 := $load.i24($M.5, $p363);
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    $i365 := $and.i24($i364, $sub.i24(0, 262144));
    goto corral_source_split_8227;

  corral_source_split_8227:
    assume {:verifier.code 0} true;
    $i366 := $or.i24($i365, 424);
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, $p363, $i366);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $p367 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, $p367, 0);
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    $p368 := $add.ref($add.ref($p18, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    $i369 := $load.i8($M.6, $p368);
    goto corral_source_split_8233;

  corral_source_split_8233:
    assume {:verifier.code 0} true;
    $i370 := $zext.i8.i64($i369);
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $i371 := $and.i64($i370, 1);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1228} $i372 := ldv__builtin_expect($i371, 0);
    call {:si_unique_call 1229} {:cexpr "tmp___15"} boogie_si_record_i64($i372);
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $i373 := $ne.i64($i372, 0);
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    assume {:branchcond $i373} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    return;

  $bb49:
    assume $i373 == 1;
    goto corral_source_split_8239;

  corral_source_split_8239:
    assume {:verifier.code 0} true;
    $p374 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(25, 1));
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $i375 := $load.i8($M.0, $p374);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i376 := $zext.i8.i32($i375);
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} __dynamic_dev_dbg.ref.ref.ref.i32($p18, $p23, .str.120, $i376);
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i354 == 1;
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $p355 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i356 := $load.i8($M.0, $p355);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    $i357 := $zext.i8.i32($i356);
    goto corral_source_split_8213;

  corral_source_split_8213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} __dynamic_dev_dbg.ref.ref.ref.i32($p17, $p23, .str.119, $i357);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb43:
    assume $i325 == 1;
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    $p327 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1)), $mul.ref(0, 1));
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $i328 := $load.i8($M.0, $p327);
    goto corral_source_split_8176;

  corral_source_split_8176:
    assume {:verifier.code 0} true;
    $i329 := $zext.i8.i32($i328);
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    $p331 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1)), $mul.ref(1, 1));
    goto corral_source_split_8178;

  corral_source_split_8178:
    assume {:verifier.code 0} true;
    $i332 := $load.i8($M.0, $p331);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    $i333 := $zext.i8.i32($i332);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 0} true;
    $p335 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(20, 1)), $mul.ref(2, 1));
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 0} true;
    $i336 := $load.i8($M.0, $p335);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 0} true;
    $i337 := $zext.i8.i32($i336);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 0} true;
    $i338 := $add.i32($i337, 1900);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p16, $p23, .str.118, $i329, $i333, $i338);
    goto corral_source_split_8185;

  corral_source_split_8185:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume $i300 == 1;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    $p301 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $i302 := $load.i8($M.0, $p301);
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $i303 := $zext.i8.i32($i302);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p304 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(17, 1));
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    $i305 := $load.i8($M.0, $p304);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    $i306 := $zext.i8.i32($i305);
    goto corral_source_split_8145;

  corral_source_split_8145:
    assume {:verifier.code 0} true;
    $p307 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(18, 1));
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i308 := $load.i16($M.0, $p307);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    $i309 := $zext.i16.i32($i308);
    goto corral_source_split_8148;

  corral_source_split_8148:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p15, $p23, .str.82, $i303, $i306, $i309);
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb37:
    assume $i275 == 1;
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $p276 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(12, 1));
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    $i277 := $load.i8($M.0, $p276);
    goto corral_source_split_8106;

  corral_source_split_8106:
    assume {:verifier.code 0} true;
    $i278 := $zext.i8.i32($i277);
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    $p279 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(13, 1));
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $i280 := $load.i8($M.0, $p279);
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $i281 := $zext.i8.i32($i280);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(14, 1));
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    $i283 := $load.i16($M.0, $p282);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    $i284 := $zext.i16.i32($i283);
    goto corral_source_split_8113;

  corral_source_split_8113:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1218} __dynamic_dev_dbg.ref.ref.ref.i32.i32.i32($p14, $p23, .str.117, $i278, $i281, $i284);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb34:
    assume $i256 == 1;
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    $p257 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(11, 1));
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $i258 := $load.i8($M.0, $p257);
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $i259 := $zext.i8.i32($i258);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1215} __dynamic_dev_dbg.ref.ref.ref.i32($p13, $p23, .str.116, $i259);
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume $i237 == 1;
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    $p238 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(10, 1));
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i239 := $load.i8($M.0, $p238);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    $i240 := $zext.i8.i32($i239);
    goto corral_source_split_8049;

  corral_source_split_8049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} __dynamic_dev_dbg.ref.ref.ref.i32($p12, $p23, .str.115, $i240);
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb28:
    assume $i218 == 1;
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(9, 1));
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i220 := $load.i8($M.0, $p219);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    $i221 := $zext.i8.i32($i220);
    goto corral_source_split_8020;

  corral_source_split_8020:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} __dynamic_dev_dbg.ref.ref.ref.i32($p11, $p23, .str.114, $i221);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb25:
    assume $i199 == 1;
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    $i201 := $load.i8($M.0, $p200);
    goto corral_source_split_7990;

  corral_source_split_7990:
    assume {:verifier.code 0} true;
    $i202 := $zext.i8.i32($i201);
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1206} __dynamic_dev_dbg.ref.ref.ref.i32($p10, $p23, .str.113, $i202);
    goto corral_source_split_7992;

  corral_source_split_7992:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume $i177 == 1;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7957;

  corral_source_split_7957:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i180 := $lshr.i32($i179, 3);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i180, 1);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    $i182 := $trunc.i32.i8($i181);
    goto corral_source_split_7961;

  corral_source_split_7961:
    assume {:verifier.code 0} true;
    $i183 := $zext.i8.i32($i182);
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1203} __dynamic_dev_dbg.ref.ref.ref.i32($p9, $p23, .str.112, $i183);
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i155 == 1;
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i157 := $load.i32($M.0, $p156);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i158 := $lshr.i32($i157, 2);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i159 := $and.i32($i158, 1);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i160 := $trunc.i32.i8($i159);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    $i161 := $zext.i8.i32($i160);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1200} __dynamic_dev_dbg.ref.ref.ref.i32($p8, $p23, .str.111, $i161);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i133 == 1;
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $i136 := $lshr.i32($i135, 1);
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i137 := $and.i32($i136, 1);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i138 := $trunc.i32.i8($i137);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i139 := $zext.i8.i32($i138);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1197} __dynamic_dev_dbg.ref.ref.ref.i32($p7, $p23, .str.110, $i139);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume $i112 == 1;
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(4, 1));
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i114 := $load.i32($M.0, $p113);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i115 := $and.i32($i114, 1);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i116 := $trunc.i32.i8($i115);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_7866;

  corral_source_split_7866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1194} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p23, .str.109, $i117);
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb10:
    assume $i93 == 1;
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(3, 1));
    goto corral_source_split_7833;

  corral_source_split_7833:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.0, $p94);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i32($i95);
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1191} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p23, .str.108, $i96);
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb7:
    assume $i74 == 1;
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(2, 1));
    goto corral_source_split_7804;

  corral_source_split_7804:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p23, .str.107, $i77);
    goto corral_source_split_7807;

  corral_source_split_7807:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i55 == 1;
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7775;

  corral_source_split_7775:
    assume {:verifier.code 0} true;
    $i57 := $load.i16($M.0, $p56);
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $i58 := $zext.i16.i32($i57);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p23, .str.106, $i58);
    goto corral_source_split_7778;

  corral_source_split_7778:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i39 == 1;
    goto corral_source_split_7748;

  corral_source_split_7748:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1182} __dynamic_dev_dbg.ref.ref.ref($p2, $p23, .str.105);
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const rom_read: ref;

axiom rom_read == $sub.ref(0, 443147);

procedure rom_read($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, assertsPassed;



implementation rom_read($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i15: i32;
  var $i16: i1;
  var $i17: i16;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i16;
  var $i26: i32;
  var $i27: i16;
  var $i28: i32;
  var $i29: i16;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i16;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i16;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i12: i16;
  var $i13: i16;
  var $p14: ref;
  var $i47: i32;
  var $i11: i32;
  var $i33: i32;
  var $i8: i32;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} {:cexpr "rom_read:arg:extAddr"} boogie_si_record_i16($i1);
    call {:si_unique_call 1232} {:cexpr "rom_read:arg:addr"} boogie_si_record_i16($i2);
    call {:si_unique_call 1233} {:cexpr "rom_read:arg:length"} boogie_si_record_i16($i3);
    goto corral_source_split_8245;

  corral_source_split_8245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1234} $p5 := kmalloc(64, 208);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_8247;

  corral_source_split_8247:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i9 := $zext.i16.i32($i3);
    goto corral_source_split_8254;

  corral_source_split_8254:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    $i11 := 0;
    assume {:branchcond $i10} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i33 := $i11;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} kfree($p5);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    $i8 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb5:
    assume $i10 == 1;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    $i12, $i13, $p14 := $i2, $i3, $p4;
    goto $bb8;

  $bb8:
    call $i15, $i16, $i17, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i12, $i13, $p14, $i47, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35 := rom_read_loop_$bb8($p0, $i1, $p5, $i15, $i16, $i17, $p18, $p19, $i20, $p21, $p22, $i23, $i24, $i25, $i26, $i27, $i28, $i29, $i30, $i31, $i32, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $p44, $i45, $i46, $i12, $i13, $p14, $i47, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35);
    goto $bb8_last;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i13);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, 64);
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    $i17 := $i13;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} $i20 := __create_pipe($p19, 0);
    call {:si_unique_call 1236} {:cexpr "tmp___0"} boogie_si_record_i32($i20);
    goto corral_source_split_8269;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    $i23 := $or.i32($i20, $sub.i32(0, 2147483520));
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $i24 := $zext.i16.i32($i12);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    $i25 := $trunc.i32.i16($i24);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    $i26 := $zext.i16.i32($i1);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i32.i16($i26);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $i28 := $zext.i16.i32($i17);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    $i29 := $trunc.i32.i16($i28);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} $i30 := usb_control_msg($p22, $i23, 5, $sub.i8(0, 64), $i25, $i27, $p5, $i29, 300);
    call {:si_unique_call 1238} {:cexpr "result"} boogie_si_record_i32($i30);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $i32 := $i30;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i64($i17);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_33 := $M.0;
    cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 1240} cmdloc_dummy_var_35 := $memcpy.i8(cmdloc_dummy_var_33, cmdloc_dummy_var_34, $p14, $p5, $i34, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_35;
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $i35 := $zext.i16.i32($i13);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i17);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $i37 := $sub.i32($i35, $i36);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    call {:si_unique_call 1241} {:cexpr "length"} boogie_si_record_i16($i38);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i12);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i17);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i39, $i40);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    $i42 := $trunc.i32.i16($i41);
    call {:si_unique_call 1242} {:cexpr "addr"} boogie_si_record_i16($i42);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i64($i17);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($p14, $mul.ref($i43, 1));
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $i45 := $zext.i16.i32($i38);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $i47 := $i30;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $i11 := $i47;
    goto $bb7;

  $bb17:
    assume $i46 == 1;
    assume {:verifier.code 0} true;
    $i12, $i13, $p14 := $i42, $i38, $p44;
    goto $bb17_dummy;

  $bb13:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $i33 := $i32;
    goto $bb15;

  $bb10:
    assume $i16 == 1;
    goto corral_source_split_8264;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    $i17 := 64;
    goto $bb12;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_226:
    assume !assertsPassed;
    return;

  $bb17_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8259;
}



const unicode_to_ascii: ref;

axiom unicode_to_ascii == $sub.ref(0, 444179);

procedure unicode_to_ascii($p0: ref, $i1: i32, $p2: ref, $i3: i32);
  free requires assertsPassed;
  modifies $M.27;



implementation unicode_to_ascii($p0: ref, $i1: i32, $p2: ref, $i3: i32)
{
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i9: i1;
  var $i10: i32;
  var $i12: i64;
  var $p13: ref;
  var $i14: i16;
  var $i15: i8;
  var $i16: i64;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i8: i32;
  var $i20: i32;
  var $i7: i32;
  var $i11: i32;
  var $i21: i64;
  var $p22: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} {:cexpr "unicode_to_ascii:arg:buflen"} boogie_si_record_i32($i1);
    call {:si_unique_call 1244} {:cexpr "unicode_to_ascii:arg:unicode_size"} boogie_si_record_i32($i3);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $i4 := $sle.i32($i1, 0);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32($i1, 1);
    call {:si_unique_call 1245} {:cexpr "buflen"} boogie_si_record_i32($i5);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32(0, $i3);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := $i7;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8320;

  corral_source_split_8320:
    assume {:verifier.code 0} true;
    $i21 := $sext.i32.i64($i11);
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p0, $mul.ref($i21, 1));
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p22, 0);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i6 == 1;
    goto corral_source_split_8312;

  corral_source_split_8312:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb8;

  $bb8:
    call $i9, $i10, $i12, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i8, $i20 := unicode_to_ascii_loop_$bb8($p0, $p2, $i3, $i5, $i9, $i10, $i12, $p13, $i14, $i15, $i16, $p17, $i18, $i19, $i8, $i20);
    goto $bb8_last;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := $sge.i32($i8, $i5);
    goto corral_source_split_8316;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i8);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p2, $mul.ref($i12, 2));
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i14 := $load.i16($M.0, $p13);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i16.i8($i14);
    goto corral_source_split_8328;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i8);
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($p0, $mul.ref($i16, 1));
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, $p17, $i15);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i8, 1);
    call {:si_unique_call 1246} {:cexpr "i"} boogie_si_record_i32($i18);
    goto corral_source_split_8332;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32($i18, $i3);
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    $i20 := $i18;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i7 := $i20;
    goto $bb7;

  $bb14:
    assume $i19 == 1;
    assume {:verifier.code 0} true;
    $i8 := $i18;
    goto $bb14_dummy;

  $bb10:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i11 := $i10;
    goto $bb12;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb14_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_8314;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 445211);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1247} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1248} $p1 := calloc(1, $i0);
    goto corral_source_split_8338;

  corral_source_split_8338:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1249} __VERIFIER_assume($i4);
    goto corral_source_split_8342;

  corral_source_split_8342:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 446243);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.28;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1250} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1251} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_36 := $M.28;
    call {:si_unique_call 1252} cmdloc_dummy_var_37 := $memset.i8(cmdloc_dummy_var_36, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.28 := cmdloc_dummy_var_37;
    goto corral_source_split_8346;

  corral_source_split_8346:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_initialize_usb_serial_driver_4: ref;

axiom ldv_initialize_usb_serial_driver_4 == $sub.ref(0, 447275);

procedure ldv_initialize_usb_serial_driver_4();
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_4()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    goto corral_source_split_8350;

  corral_source_split_8350:
    assume {:verifier.code 0} true;
    $M.29 := $p0;
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    $M.30 := $p2;
    goto corral_source_split_8354;

  corral_source_split_8354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1255} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $M.31 := $p4;
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_8358;

  corral_source_split_8358:
    assume {:verifier.code 0} true;
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $M.32 := $p6;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_serial_driver_1: ref;

axiom ldv_initialize_usb_serial_driver_1 == $sub.ref(0, 448307);

procedure ldv_initialize_usb_serial_driver_1();
  free requires assertsPassed;
  modifies $M.33, $M.34, $M.35, $M.36, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_1()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8362;

  corral_source_split_8362:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1257} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $M.33 := $p0;
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_8366;

  corral_source_split_8366:
    assume {:verifier.code 0} true;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $M.34 := $p2;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    goto corral_source_split_8370;

  corral_source_split_8370:
    assume {:verifier.code 0} true;
    $M.35 := $p4;
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    $M.36 := $p6;
    goto corral_source_split_8374;

  corral_source_split_8374:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_serial_driver_2: ref;

axiom ldv_initialize_usb_serial_driver_2 == $sub.ref(0, 449339);

procedure ldv_initialize_usb_serial_driver_2();
  free requires assertsPassed;
  modifies $M.37, $M.38, $M.39, $M.40, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_2()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1261} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    goto corral_source_split_8378;

  corral_source_split_8378:
    assume {:verifier.code 0} true;
    $M.37 := $p0;
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1262} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    $M.38 := $p2;
    goto corral_source_split_8382;

  corral_source_split_8382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1263} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $M.39 := $p4;
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_8386;

  corral_source_split_8386:
    assume {:verifier.code 0} true;
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $M.40 := $p6;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_usb_serial_driver_3: ref;

axiom ldv_initialize_usb_serial_driver_3 == $sub.ref(0, 450371);

procedure ldv_initialize_usb_serial_driver_3();
  free requires assertsPassed;
  modifies $M.41, $M.42, $M.43, $M.44, $M.0, $CurrAddr;



implementation ldv_initialize_usb_serial_driver_3()
{
  var $p0: ref;
  var $p2: ref;
  var $p4: ref;
  var $p6: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    $M.41 := $p0;
    goto corral_source_split_8393;

  corral_source_split_8393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} $p2 := ldv_init_zalloc(3008);
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $M.42 := $p2;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} $p4 := ldv_init_zalloc(272);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    $M.43 := $p4;
    goto corral_source_split_8399;

  corral_source_split_8399:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $p6 := ldv_init_zalloc(1816);
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $M.44 := $p6;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 451403);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.7, $M.51, $M.9, $M.10, $M.11, $M.12, $M.13, $M.52, $M.53, $M.54, $M.55, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.33, $M.34, $M.35, $M.36, $M.29, $M.30, $M.31, $M.32, $M.56, $M.57, $M.58, $M.59, $M.14, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.17, $M.18, $CurrAddr, $M.21, $M.22, $M.19, $M.20, $M.27, $M.23, assertsPassed, $M.16, $M.15;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $p52: ref;
  var $p54: ref;
  var $p56: ref;
  var $p58: ref;
  var $p60: ref;
  var $p62: ref;
  var $p64: ref;
  var $p66: ref;
  var $p68: ref;
  var $p70: ref;
  var $p72: ref;
  var $p74: ref;
  var $p76: ref;
  var $p78: ref;
  var $p80: ref;
  var $p82: ref;
  var $p84: ref;
  var $p86: ref;
  var $p88: ref;
  var $p90: ref;
  var $p92: ref;
  var $p94: ref;
  var $p96: ref;
  var $p98: ref;
  var $p100: ref;
  var $p102: ref;
  var $i104: i32;
  var $i105: i1;
  var $i106: i1;
  var $i107: i1;
  var $i108: i1;
  var $i109: i1;
  var $i110: i1;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i1;
  var $i115: i1;
  var $i116: i1;
  var $i117: i1;
  var $i118: i1;
  var $i119: i1;
  var $i120: i1;
  var $i121: i1;
  var $i122: i1;
  var $i123: i1;
  var $i124: i1;
  var $i125: i1;
  var $i126: i1;
  var $i127: i1;
  var $i128: i1;
  var $i129: i1;
  var $i130: i1;
  var $i131: i1;
  var $i132: i1;
  var $i133: i1;
  var $i134: i1;
  var $i135: i1;
  var $i136: i1;
  var $i137: i1;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i141: i32;
  var $i142: i1;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $p146: ref;
  var $i147: i32;
  var $i148: i1;
  var $p149: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i170: i32;
  var $i171: i1;
  var $p172: ref;
  var $i174: i32;
  var $i175: i1;
  var $p176: ref;
  var $i178: i32;
  var $i179: i1;
  var $p180: ref;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i187: i32;
  var $i188: i1;
  var $i189: i32;
  var $i190: i1;
  var $p191: ref;
  var $i192: i32;
  var $i193: i1;
  var $p194: ref;
  var $i195: i32;
  var $i196: i1;
  var $p197: ref;
  var $i198: i32;
  var $i199: i1;
  var $p200: ref;
  var $i201: i32;
  var $i202: i1;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i1;
  var $p207: ref;
  var $p208: ref;
  var $i209: i32;
  var $i210: i1;
  var $p211: ref;
  var $p212: ref;
  var $i213: i32;
  var $i214: i1;
  var $p215: ref;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $p219: ref;
  var $i221: i32;
  var $i222: i1;
  var $p223: ref;
  var $i225: i32;
  var $i226: i1;
  var $p227: ref;
  var $i229: i32;
  var $i230: i1;
  var $p231: ref;
  var $i233: i32;
  var $i234: i1;
  var $p235: ref;
  var $i236: i32;
  var $i237: i1;
  var $p238: ref;
  var $i239: i32;
  var $i240: i32;
  var $i241: i32;
  var $i242: i1;
  var $p243: ref;
  var $i244: i32;
  var $i245: i64;
  var $i247: i32;
  var $i248: i1;
  var $p249: ref;
  var $i250: i32;
  var $i251: i64;
  var $i253: i32;
  var $i254: i1;
  var $p255: ref;
  var $i256: i32;
  var $i257: i64;
  var $i259: i32;
  var $i260: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i64;
  var $i265: i32;
  var $i266: i1;
  var $p267: ref;
  var $i268: i32;
  var $i269: i32;
  var $i271: i32;
  var $i272: i1;
  var $p273: ref;
  var $i274: i32;
  var $i275: i32;
  var $i277: i32;
  var $i278: i1;
  var $p279: ref;
  var $i280: i32;
  var $i281: i32;
  var $i283: i32;
  var $i284: i1;
  var $p285: ref;
  var $i286: i32;
  var $i287: i32;
  var $i289: i32;
  var $i290: i1;
  var $p291: ref;
  var $p292: ref;
  var $i293: i32;
  var $i295: i32;
  var $i296: i1;
  var $p297: ref;
  var $p298: ref;
  var $i299: i32;
  var $i301: i32;
  var $i302: i1;
  var $p303: ref;
  var $p304: ref;
  var $i305: i32;
  var $i307: i32;
  var $i308: i1;
  var $p309: ref;
  var $p310: ref;
  var $i311: i32;
  var $i313: i32;
  var $i314: i1;
  var $p315: ref;
  var $i316: i64;
  var $i318: i32;
  var $i319: i1;
  var $p320: ref;
  var $i321: i64;
  var $i323: i32;
  var $i324: i1;
  var $p325: ref;
  var $i326: i64;
  var $i328: i32;
  var $i329: i1;
  var $p330: ref;
  var $i331: i64;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $i336: i32;
  var $i337: i32;
  var $i338: i1;
  var $i339: i32;
  var $i340: i1;
  var $p341: ref;
  var $i342: i32;
  var $i343: i1;
  var $p344: ref;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i349: i32;
  var $i350: i1;
  var $p351: ref;
  var $i353: i32;
  var $i354: i1;
  var $p355: ref;
  var $i357: i32;
  var $i358: i1;
  var $p359: ref;
  var $i361: i32;
  var $i362: i1;
  var $p363: ref;
  var $i364: i32;
  var $i365: i32;
  var $i366: i1;
  var $p367: ref;
  var $i368: i32;
  var $i369: i32;
  var $i370: i1;
  var $p371: ref;
  var $i372: i32;
  var $i373: i32;
  var $i374: i1;
  var $p375: ref;
  var $i376: i32;
  var $i377: i32;
  var $i378: i1;
  var $p379: ref;
  var $i380: i32;
  var $i381: i1;
  var $p382: ref;
  var $i383: i32;
  var $i384: i1;
  var $p385: ref;
  var $i387: i32;
  var $i388: i1;
  var $p389: ref;
  var $i391: i32;
  var $i392: i1;
  var $p393: ref;
  var $i395: i32;
  var $i396: i1;
  var $p397: ref;
  var $i399: i32;
  var $i400: i1;
  var $p401: ref;
  var $i403: i32;
  var $i404: i1;
  var $p405: ref;
  var $i407: i32;
  var $i408: i1;
  var $p409: ref;
  var $i411: i32;
  var $i412: i1;
  var $p413: ref;
  var $i415: i32;
  var $i416: i1;
  var $p417: ref;
  var $i418: i32;
  var $i419: i1;
  var $p420: ref;
  var $i421: i32;
  var $i422: i1;
  var $p423: ref;
  var $i424: i32;
  var $i425: i1;
  var $p426: ref;
  var $i427: i32;
  var $i428: i1;
  var $i430: i32;
  var $i431: i32;
  var $i432: i32;
  var $i433: i1;
  var $i434: i32;
  var $i435: i1;
  var $i436: i1;
  var $i437: i1;
  var $i438: i1;
  var $i439: i1;
  var $i440: i1;
  var $i441: i1;
  var $i442: i1;
  var $i443: i1;
  var $i444: i1;
  var $i445: i1;
  var $i446: i1;
  var $i447: i1;
  var $i448: i1;
  var $i449: i1;
  var $i450: i1;
  var $i451: i1;
  var $i452: i1;
  var $i453: i1;
  var $i454: i1;
  var $i455: i1;
  var $i456: i1;
  var $i457: i1;
  var $i458: i1;
  var $i459: i32;
  var $i460: i1;
  var $p461: ref;
  var $i462: i32;
  var $i463: i1;
  var $p464: ref;
  var $i465: i32;
  var $i466: i1;
  var $p467: ref;
  var $i468: i32;
  var $i469: i1;
  var $p470: ref;
  var $i471: i32;
  var $i472: i1;
  var $p473: ref;
  var $i475: i32;
  var $i476: i1;
  var $p477: ref;
  var $i479: i32;
  var $i480: i1;
  var $p481: ref;
  var $i483: i32;
  var $i484: i1;
  var $p485: ref;
  var $i487: i32;
  var $i488: i1;
  var $p489: ref;
  var $i491: i32;
  var $i492: i1;
  var $p493: ref;
  var $i495: i32;
  var $i496: i1;
  var $p497: ref;
  var $i499: i32;
  var $i500: i1;
  var $p501: ref;
  var $i503: i32;
  var $i504: i1;
  var $p505: ref;
  var $p506: ref;
  var $i507: i32;
  var $i508: i32;
  var $i509: i1;
  var $i510: i32;
  var $i511: i1;
  var $p512: ref;
  var $i513: i32;
  var $i514: i1;
  var $p515: ref;
  var $i516: i32;
  var $i517: i1;
  var $p518: ref;
  var $i519: i32;
  var $i520: i1;
  var $p521: ref;
  var $i522: i32;
  var $i523: i1;
  var $p524: ref;
  var $p525: ref;
  var $i526: i32;
  var $i527: i1;
  var $p528: ref;
  var $p529: ref;
  var $i530: i32;
  var $i531: i1;
  var $p532: ref;
  var $p533: ref;
  var $i534: i32;
  var $i535: i1;
  var $p536: ref;
  var $p537: ref;
  var $i538: i32;
  var $i539: i1;
  var $p540: ref;
  var $i541: i32;
  var $i542: i1;
  var $p543: ref;
  var $i545: i32;
  var $i546: i1;
  var $p547: ref;
  var $i549: i32;
  var $i550: i1;
  var $p551: ref;
  var $i553: i32;
  var $i554: i1;
  var $p555: ref;
  var $i557: i32;
  var $i558: i1;
  var $p559: ref;
  var $i560: i32;
  var $i561: i32;
  var $i562: i32;
  var $i563: i1;
  var $p564: ref;
  var $i565: i32;
  var $i566: i64;
  var $i568: i32;
  var $i569: i1;
  var $p570: ref;
  var $i571: i32;
  var $i572: i64;
  var $i574: i32;
  var $i575: i1;
  var $p576: ref;
  var $i577: i32;
  var $i578: i64;
  var $i580: i32;
  var $i581: i1;
  var $p582: ref;
  var $i583: i32;
  var $i584: i64;
  var $i586: i32;
  var $i587: i1;
  var $p588: ref;
  var $i589: i32;
  var $i590: i32;
  var $i592: i32;
  var $i593: i1;
  var $p594: ref;
  var $i595: i32;
  var $i596: i32;
  var $i598: i32;
  var $i599: i1;
  var $p600: ref;
  var $i601: i32;
  var $i602: i32;
  var $i604: i32;
  var $i605: i1;
  var $p606: ref;
  var $i607: i32;
  var $i608: i32;
  var $i610: i32;
  var $i611: i1;
  var $p612: ref;
  var $p613: ref;
  var $i614: i32;
  var $i616: i32;
  var $i617: i1;
  var $p618: ref;
  var $p619: ref;
  var $i620: i32;
  var $i622: i32;
  var $i623: i1;
  var $p624: ref;
  var $p625: ref;
  var $i626: i32;
  var $i628: i32;
  var $i629: i1;
  var $p630: ref;
  var $p631: ref;
  var $i632: i32;
  var $i634: i32;
  var $i635: i1;
  var $p636: ref;
  var $i637: i64;
  var $i639: i32;
  var $i640: i1;
  var $p641: ref;
  var $i642: i64;
  var $i644: i32;
  var $i645: i1;
  var $p646: ref;
  var $i647: i64;
  var $i649: i32;
  var $i650: i1;
  var $p651: ref;
  var $i652: i64;
  var $i654: i32;
  var $i655: i1;
  var $p656: ref;
  var $i657: i32;
  var $i658: i32;
  var $i659: i1;
  var $i660: i32;
  var $i661: i1;
  var $p662: ref;
  var $i663: i32;
  var $i664: i1;
  var $p665: ref;
  var $i666: i32;
  var $i667: i1;
  var $p668: ref;
  var $i670: i32;
  var $i671: i1;
  var $p672: ref;
  var $i674: i32;
  var $i675: i1;
  var $p676: ref;
  var $i678: i32;
  var $i679: i1;
  var $p680: ref;
  var $i682: i32;
  var $i683: i1;
  var $p684: ref;
  var $i685: i32;
  var $i686: i32;
  var $i687: i1;
  var $p688: ref;
  var $i689: i32;
  var $i690: i32;
  var $i691: i1;
  var $p692: ref;
  var $i693: i32;
  var $i694: i32;
  var $i695: i1;
  var $p696: ref;
  var $i697: i32;
  var $i698: i32;
  var $i699: i1;
  var $p700: ref;
  var $i701: i32;
  var $i702: i1;
  var $p703: ref;
  var $i704: i32;
  var $i705: i1;
  var $p706: ref;
  var $i708: i32;
  var $i709: i1;
  var $p710: ref;
  var $i712: i32;
  var $i713: i1;
  var $p714: ref;
  var $i716: i32;
  var $i717: i1;
  var $p718: ref;
  var $i720: i32;
  var $i721: i1;
  var $p722: ref;
  var $i724: i32;
  var $i725: i1;
  var $p726: ref;
  var $i728: i32;
  var $i729: i1;
  var $p730: ref;
  var $i732: i32;
  var $i733: i1;
  var $p734: ref;
  var $i736: i32;
  var $i737: i1;
  var $p738: ref;
  var $i739: i32;
  var $i740: i1;
  var $p741: ref;
  var $i742: i32;
  var $i743: i1;
  var $p744: ref;
  var $i745: i32;
  var $i746: i1;
  var $p747: ref;
  var $i748: i32;
  var $i749: i1;
  var $i751: i32;
  var $i752: i32;
  var $i753: i32;
  var $i754: i1;
  var $i755: i32;
  var $i756: i1;
  var $i757: i1;
  var $i758: i1;
  var $i759: i32;
  var $i760: i1;
  var $i761: i32;
  var $i762: i1;
  var $i763: i32;
  var $i764: i1;
  var $i765: i32;
  var $i766: i32;
  var $i767: i1;
  var $i768: i32;
  var $i769: i1;
  var $i770: i32;
  var $i771: i1;
  var $i772: i32;
  var $i773: i1;
  var $i774: i1;
  var $i775: i1;
  var $i776: i1;
  var $i777: i1;
  var $i778: i1;
  var $i779: i1;
  var $i780: i1;
  var $i781: i1;
  var $i782: i1;
  var $i783: i1;
  var $i784: i1;
  var $i785: i1;
  var $i786: i1;
  var $i787: i1;
  var $i788: i1;
  var $i789: i1;
  var $i790: i1;
  var $i791: i1;
  var $i792: i1;
  var $i793: i1;
  var $i794: i1;
  var $i795: i1;
  var $i796: i1;
  var $i797: i32;
  var $i798: i1;
  var $p799: ref;
  var $i800: i32;
  var $i801: i1;
  var $p802: ref;
  var $i803: i32;
  var $i804: i1;
  var $p805: ref;
  var $i806: i32;
  var $i807: i1;
  var $p808: ref;
  var $i809: i32;
  var $i810: i1;
  var $p811: ref;
  var $i813: i32;
  var $i814: i1;
  var $p815: ref;
  var $i817: i32;
  var $i818: i1;
  var $p819: ref;
  var $i821: i32;
  var $i822: i1;
  var $p823: ref;
  var $i825: i32;
  var $i826: i1;
  var $p827: ref;
  var $i829: i32;
  var $i830: i1;
  var $p831: ref;
  var $i833: i32;
  var $i834: i1;
  var $p835: ref;
  var $i837: i32;
  var $i838: i1;
  var $p839: ref;
  var $i841: i32;
  var $i842: i1;
  var $p843: ref;
  var $p844: ref;
  var $i845: i32;
  var $i846: i32;
  var $i847: i1;
  var $i848: i32;
  var $i849: i1;
  var $p850: ref;
  var $i851: i32;
  var $i852: i1;
  var $p853: ref;
  var $i854: i32;
  var $i855: i1;
  var $p856: ref;
  var $i857: i32;
  var $i858: i1;
  var $p859: ref;
  var $i860: i32;
  var $i861: i1;
  var $p862: ref;
  var $p863: ref;
  var $i864: i32;
  var $i865: i1;
  var $p866: ref;
  var $p867: ref;
  var $i868: i32;
  var $i869: i1;
  var $p870: ref;
  var $p871: ref;
  var $i872: i32;
  var $i873: i1;
  var $p874: ref;
  var $p875: ref;
  var $i876: i32;
  var $i877: i1;
  var $p878: ref;
  var $i879: i32;
  var $i880: i1;
  var $p881: ref;
  var $i883: i32;
  var $i884: i1;
  var $p885: ref;
  var $i887: i32;
  var $i888: i1;
  var $p889: ref;
  var $i891: i32;
  var $i892: i1;
  var $p893: ref;
  var $i895: i32;
  var $i896: i1;
  var $p897: ref;
  var $i898: i32;
  var $i899: i32;
  var $i900: i32;
  var $i901: i1;
  var $p902: ref;
  var $i903: i32;
  var $i904: i64;
  var $i906: i32;
  var $i907: i1;
  var $p908: ref;
  var $i909: i32;
  var $i910: i64;
  var $i912: i32;
  var $i913: i1;
  var $p914: ref;
  var $i915: i32;
  var $i916: i64;
  var $i918: i32;
  var $i919: i1;
  var $p920: ref;
  var $i921: i32;
  var $i922: i64;
  var $i924: i32;
  var $i925: i1;
  var $p926: ref;
  var $i927: i32;
  var $i928: i32;
  var $i930: i32;
  var $i931: i1;
  var $p932: ref;
  var $i933: i32;
  var $i934: i32;
  var $i936: i32;
  var $i937: i1;
  var $p938: ref;
  var $i939: i32;
  var $i940: i32;
  var $i942: i32;
  var $i943: i1;
  var $p944: ref;
  var $i945: i32;
  var $i946: i32;
  var $i948: i32;
  var $i949: i1;
  var $p950: ref;
  var $p951: ref;
  var $i952: i32;
  var $i954: i32;
  var $i955: i1;
  var $p956: ref;
  var $p957: ref;
  var $i958: i32;
  var $i960: i32;
  var $i961: i1;
  var $p962: ref;
  var $p963: ref;
  var $i964: i32;
  var $i966: i32;
  var $i967: i1;
  var $p968: ref;
  var $p969: ref;
  var $i970: i32;
  var $i972: i32;
  var $i973: i1;
  var $p974: ref;
  var $i975: i64;
  var $i977: i32;
  var $i978: i1;
  var $p979: ref;
  var $i980: i64;
  var $i982: i32;
  var $i983: i1;
  var $p984: ref;
  var $i985: i64;
  var $i987: i32;
  var $i988: i1;
  var $p989: ref;
  var $i990: i64;
  var $i992: i32;
  var $i993: i1;
  var $p994: ref;
  var $i995: i32;
  var $i996: i32;
  var $i997: i1;
  var $i998: i32;
  var $i999: i1;
  var $p1000: ref;
  var $i1001: i32;
  var $i1002: i1;
  var $p1003: ref;
  var $i1004: i32;
  var $i1005: i1;
  var $p1006: ref;
  var $i1008: i32;
  var $i1009: i1;
  var $p1010: ref;
  var $i1012: i32;
  var $i1013: i1;
  var $p1014: ref;
  var $i1016: i32;
  var $i1017: i1;
  var $p1018: ref;
  var $i1020: i32;
  var $i1021: i1;
  var $p1022: ref;
  var $i1023: i32;
  var $i1024: i32;
  var $i1025: i1;
  var $p1026: ref;
  var $i1027: i32;
  var $i1028: i32;
  var $i1029: i1;
  var $p1030: ref;
  var $i1031: i32;
  var $i1032: i32;
  var $i1033: i1;
  var $p1034: ref;
  var $i1035: i32;
  var $i1036: i32;
  var $i1037: i1;
  var $p1038: ref;
  var $i1039: i32;
  var $i1040: i1;
  var $p1041: ref;
  var $i1042: i32;
  var $i1043: i1;
  var $p1044: ref;
  var $i1046: i32;
  var $i1047: i1;
  var $p1048: ref;
  var $i1050: i32;
  var $i1051: i1;
  var $p1052: ref;
  var $i1054: i32;
  var $i1055: i1;
  var $p1056: ref;
  var $i1058: i32;
  var $i1059: i1;
  var $p1060: ref;
  var $i1062: i32;
  var $i1063: i1;
  var $p1064: ref;
  var $i1066: i32;
  var $i1067: i1;
  var $p1068: ref;
  var $i1070: i32;
  var $i1071: i1;
  var $p1072: ref;
  var $i1074: i32;
  var $i1075: i1;
  var $p1076: ref;
  var $i1077: i32;
  var $i1078: i1;
  var $p1079: ref;
  var $i1080: i32;
  var $i1081: i1;
  var $p1082: ref;
  var $i1083: i32;
  var $i1084: i1;
  var $p1085: ref;
  var $i1086: i32;
  var $i1087: i1;
  var $i1089: i32;
  var $i1090: i32;
  var $i1091: i32;
  var $i1092: i1;
  var $i1093: i32;
  var $i1094: i1;
  var $i1095: i1;
  var $i1096: i1;
  var $i1097: i1;
  var $i1098: i1;
  var $i1099: i1;
  var $i1100: i1;
  var $i1101: i1;
  var $i1102: i1;
  var $i1103: i1;
  var $i1104: i1;
  var $i1105: i1;
  var $i1106: i1;
  var $i1107: i1;
  var $i1108: i1;
  var $i1109: i1;
  var $i1110: i1;
  var $i1111: i1;
  var $i1112: i1;
  var $i1113: i1;
  var $i1114: i1;
  var $i1115: i1;
  var $i1116: i1;
  var $i1117: i1;
  var $i1118: i32;
  var $i1119: i1;
  var $p1120: ref;
  var $i1121: i32;
  var $i1122: i1;
  var $p1123: ref;
  var $i1124: i32;
  var $i1125: i1;
  var $p1126: ref;
  var $i1127: i32;
  var $i1128: i1;
  var $p1129: ref;
  var $i1130: i32;
  var $i1131: i1;
  var $p1132: ref;
  var $i1134: i32;
  var $i1135: i1;
  var $p1136: ref;
  var $i1138: i32;
  var $i1139: i1;
  var $p1140: ref;
  var $i1142: i32;
  var $i1143: i1;
  var $p1144: ref;
  var $i1146: i32;
  var $i1147: i1;
  var $p1148: ref;
  var $i1150: i32;
  var $i1151: i1;
  var $p1152: ref;
  var $i1154: i32;
  var $i1155: i1;
  var $p1156: ref;
  var $i1158: i32;
  var $i1159: i1;
  var $p1160: ref;
  var $i1162: i32;
  var $i1163: i1;
  var $p1164: ref;
  var $p1165: ref;
  var $i1166: i32;
  var $i1167: i32;
  var $i1168: i1;
  var $i1169: i32;
  var $i1170: i1;
  var $p1171: ref;
  var $i1172: i32;
  var $i1173: i1;
  var $p1174: ref;
  var $i1175: i32;
  var $i1176: i1;
  var $p1177: ref;
  var $i1178: i32;
  var $i1179: i1;
  var $p1180: ref;
  var $i1181: i32;
  var $i1182: i1;
  var $p1183: ref;
  var $p1184: ref;
  var $i1185: i32;
  var $i1186: i1;
  var $p1187: ref;
  var $p1188: ref;
  var $i1189: i32;
  var $i1190: i1;
  var $p1191: ref;
  var $p1192: ref;
  var $i1193: i32;
  var $i1194: i1;
  var $p1195: ref;
  var $p1196: ref;
  var $i1197: i32;
  var $i1198: i1;
  var $p1199: ref;
  var $i1200: i32;
  var $i1201: i1;
  var $p1202: ref;
  var $i1204: i32;
  var $i1205: i1;
  var $p1206: ref;
  var $i1208: i32;
  var $i1209: i1;
  var $p1210: ref;
  var $i1212: i32;
  var $i1213: i1;
  var $p1214: ref;
  var $i1216: i32;
  var $i1217: i1;
  var $p1218: ref;
  var $i1219: i32;
  var $i1220: i32;
  var $i1221: i32;
  var $i1222: i1;
  var $p1223: ref;
  var $i1224: i32;
  var $i1225: i64;
  var $i1227: i32;
  var $i1228: i1;
  var $p1229: ref;
  var $i1230: i32;
  var $i1231: i64;
  var $i1233: i32;
  var $i1234: i1;
  var $p1235: ref;
  var $i1236: i32;
  var $i1237: i64;
  var $i1239: i32;
  var $i1240: i1;
  var $p1241: ref;
  var $i1242: i32;
  var $i1243: i64;
  var $i1245: i32;
  var $i1246: i1;
  var $p1247: ref;
  var $i1248: i32;
  var $i1249: i32;
  var $i1251: i32;
  var $i1252: i1;
  var $p1253: ref;
  var $i1254: i32;
  var $i1255: i32;
  var $i1257: i32;
  var $i1258: i1;
  var $p1259: ref;
  var $i1260: i32;
  var $i1261: i32;
  var $i1263: i32;
  var $i1264: i1;
  var $p1265: ref;
  var $i1266: i32;
  var $i1267: i32;
  var $i1269: i32;
  var $i1270: i1;
  var $p1271: ref;
  var $p1272: ref;
  var $i1273: i32;
  var $i1275: i32;
  var $i1276: i1;
  var $p1277: ref;
  var $p1278: ref;
  var $i1279: i32;
  var $i1281: i32;
  var $i1282: i1;
  var $p1283: ref;
  var $p1284: ref;
  var $i1285: i32;
  var $i1287: i32;
  var $i1288: i1;
  var $p1289: ref;
  var $p1290: ref;
  var $i1291: i32;
  var $i1293: i32;
  var $i1294: i1;
  var $p1295: ref;
  var $i1296: i64;
  var $i1298: i32;
  var $i1299: i1;
  var $p1300: ref;
  var $i1301: i64;
  var $i1303: i32;
  var $i1304: i1;
  var $p1305: ref;
  var $i1306: i64;
  var $i1308: i32;
  var $i1309: i1;
  var $p1310: ref;
  var $i1311: i64;
  var $i1313: i32;
  var $i1314: i1;
  var $p1315: ref;
  var $i1316: i32;
  var $i1317: i32;
  var $i1318: i1;
  var $i1319: i32;
  var $i1320: i1;
  var $p1321: ref;
  var $i1322: i32;
  var $i1323: i1;
  var $p1324: ref;
  var $i1325: i32;
  var $i1326: i1;
  var $p1327: ref;
  var $i1329: i32;
  var $i1330: i1;
  var $p1331: ref;
  var $i1333: i32;
  var $i1334: i1;
  var $p1335: ref;
  var $i1337: i32;
  var $i1338: i1;
  var $p1339: ref;
  var $i1341: i32;
  var $i1342: i1;
  var $p1343: ref;
  var $i1344: i32;
  var $i1345: i32;
  var $i1346: i1;
  var $p1347: ref;
  var $i1348: i32;
  var $i1349: i32;
  var $i1350: i1;
  var $p1351: ref;
  var $i1352: i32;
  var $i1353: i32;
  var $i1354: i1;
  var $p1355: ref;
  var $i1356: i32;
  var $i1357: i32;
  var $i1358: i1;
  var $p1359: ref;
  var $i1360: i32;
  var $i1361: i1;
  var $p1362: ref;
  var $i1363: i32;
  var $i1364: i1;
  var $p1365: ref;
  var $i1367: i32;
  var $i1368: i1;
  var $p1369: ref;
  var $i1371: i32;
  var $i1372: i1;
  var $p1373: ref;
  var $i1375: i32;
  var $i1376: i1;
  var $p1377: ref;
  var $i1379: i32;
  var $i1380: i1;
  var $p1381: ref;
  var $i1383: i32;
  var $i1384: i1;
  var $p1385: ref;
  var $i1387: i32;
  var $i1388: i1;
  var $p1389: ref;
  var $i1391: i32;
  var $i1392: i1;
  var $p1393: ref;
  var $i1395: i32;
  var $i1396: i1;
  var $p1397: ref;
  var $i1398: i32;
  var $i1399: i1;
  var $p1400: ref;
  var $i1401: i32;
  var $i1402: i1;
  var $p1403: ref;
  var $i1404: i32;
  var $i1405: i1;
  var $p1406: ref;
  var $i1407: i32;
  var $i1408: i1;
  var $i1410: i32;
  var $i1411: i32;
  var vslice_dummy_var_52: ref;
  var vslice_dummy_var_53: ref;
  var vslice_dummy_var_54: ref;
  var vslice_dummy_var_55: ref;
  var vslice_dummy_var_56: ref;
  var vslice_dummy_var_57: ref;
  var vslice_dummy_var_58: ref;
  var vslice_dummy_var_59: ref;
  var vslice_dummy_var_60: ref;
  var vslice_dummy_var_61: ref;
  var vslice_dummy_var_62: ref;
  var vslice_dummy_var_63: ref;
  var vslice_dummy_var_64: ref;
  var vslice_dummy_var_65: ref;
  var vslice_dummy_var_66: ref;
  var vslice_dummy_var_67: ref;
  var vslice_dummy_var_68: ref;
  var vslice_dummy_var_69: ref;
  var vslice_dummy_var_70: ref;
  var vslice_dummy_var_71: ref;
  var vslice_dummy_var_72: ref;
  var vslice_dummy_var_73: ref;
  var vslice_dummy_var_74: ref;
  var vslice_dummy_var_75: ref;
  var vslice_dummy_var_76: ref;
  var vslice_dummy_var_77: ref;
  var vslice_dummy_var_78: ref;
  var vslice_dummy_var_79: ref;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;
  var vslice_dummy_var_85: i32;
  var vslice_dummy_var_86: i32;
  var vslice_dummy_var_87: i32;
  var vslice_dummy_var_88: i32;
  var vslice_dummy_var_89: i32;
  var vslice_dummy_var_90: i32;
  var vslice_dummy_var_91: i32;
  var vslice_dummy_var_92: i32;
  var vslice_dummy_var_93: i32;
  var vslice_dummy_var_94: i32;
  var vslice_dummy_var_95: i32;
  var vslice_dummy_var_96: i32;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;
  var vslice_dummy_var_99: i32;
  var vslice_dummy_var_100: i32;
  var vslice_dummy_var_101: i32;
  var vslice_dummy_var_102: i32;
  var vslice_dummy_var_103: i32;
  var vslice_dummy_var_104: i32;
  var vslice_dummy_var_105: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;
  var vslice_dummy_var_111: i32;
  var vslice_dummy_var_112: i32;
  var vslice_dummy_var_113: i32;
  var vslice_dummy_var_114: i32;
  var vslice_dummy_var_115: i32;
  var vslice_dummy_var_116: i32;
  var vslice_dummy_var_117: i32;
  var vslice_dummy_var_118: i32;
  var vslice_dummy_var_119: i32;
  var vslice_dummy_var_120: i32;
  var vslice_dummy_var_121: i32;
  var vslice_dummy_var_122: i32;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;
  var vslice_dummy_var_177: i32;
  var vslice_dummy_var_178: i32;
  var vslice_dummy_var_179: i32;
  var vslice_dummy_var_180: i32;
  var vslice_dummy_var_181: i32;
  var vslice_dummy_var_182: i32;
  var vslice_dummy_var_183: i32;
  var vslice_dummy_var_184: i32;
  var vslice_dummy_var_185: i32;
  var vslice_dummy_var_186: i32;
  var vslice_dummy_var_187: i32;
  var vslice_dummy_var_188: i32;
  var vslice_dummy_var_189: i32;
  var vslice_dummy_var_190: i32;
  var vslice_dummy_var_191: i32;
  var vslice_dummy_var_192: i32;
  var vslice_dummy_var_193: i32;
  var vslice_dummy_var_194: i32;
  var vslice_dummy_var_195: i32;
  var vslice_dummy_var_196: i32;
  var vslice_dummy_var_197: i32;
  var vslice_dummy_var_198: i32;
  var vslice_dummy_var_199: i32;
  var vslice_dummy_var_200: i32;
  var vslice_dummy_var_201: i32;
  var vslice_dummy_var_202: i32;
  var vslice_dummy_var_203: i32;
  var vslice_dummy_var_204: i32;
  var vslice_dummy_var_205: i32;
  var vslice_dummy_var_206: i32;
  var vslice_dummy_var_207: i32;
  var vslice_dummy_var_208: i32;
  var vslice_dummy_var_209: i32;
  var vslice_dummy_var_210: i32;
  var vslice_dummy_var_211: i32;
  var vslice_dummy_var_212: i32;
  var vslice_dummy_var_213: i32;
  var vslice_dummy_var_214: i32;
  var vslice_dummy_var_215: i32;
  var vslice_dummy_var_216: i32;
  var vslice_dummy_var_217: i32;
  var vslice_dummy_var_218: i32;
  var vslice_dummy_var_219: i32;
  var vslice_dummy_var_220: i32;
  var vslice_dummy_var_221: i32;
  var vslice_dummy_var_222: i32;
  var vslice_dummy_var_223: i32;
  var vslice_dummy_var_224: i32;
  var vslice_dummy_var_225: i32;
  var vslice_dummy_var_226: i32;
  var vslice_dummy_var_227: i32;
  var vslice_dummy_var_228: i32;
  var vslice_dummy_var_229: i32;
  var vslice_dummy_var_230: i32;
  var vslice_dummy_var_231: i32;
  var vslice_dummy_var_232: i32;
  var vslice_dummy_var_233: i32;
  var vslice_dummy_var_234: i32;
  var vslice_dummy_var_235: i32;
  var vslice_dummy_var_236: i32;
  var vslice_dummy_var_237: i32;
  var vslice_dummy_var_238: i32;
  var vslice_dummy_var_239: i32;
  var vslice_dummy_var_240: i32;
  var vslice_dummy_var_241: i32;
  var vslice_dummy_var_242: i32;
  var vslice_dummy_var_243: i32;

  $bb0:
    call {:si_unique_call 1269} $initialize();
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1271} $p0 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1272} $p1 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1273} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1274} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $p4 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} $p5 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1277} $p6 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} $p7 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1280} $p9 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1281} $p10 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1282} $p11 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1283} $p12 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1284} $p13 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $p14 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1286} $p15 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1287} $p16 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1288} $p17 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1289} $p18 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1290} $p19 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1291} $p20 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1292} $p21 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1293} $p22 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1294} $p23 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1295} $p24 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1296} $p25 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} $p26 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1298} $p27 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p28 := ldv_init_zalloc(1);
    goto corral_source_split_8406;

  corral_source_split_8406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1300} $p29 := ldv_init_zalloc(44);
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $p31 := ldv_init_zalloc(80);
    goto corral_source_split_8409;

  corral_source_split_8409:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p31);
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1302} $p33 := ldv_init_zalloc(44);
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p35 := ldv_init_zalloc(1);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} $p36 := ldv_init_zalloc(80);
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1305} $p38 := ldv_init_zalloc(1);
    goto corral_source_split_8416;

  corral_source_split_8416:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1306} $p39 := ldv_init_zalloc(80);
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p41 := ldv_init_zalloc(44);
    goto corral_source_split_8419;

  corral_source_split_8419:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p41);
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} $p43 := ldv_init_zalloc(80);
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} $p45 := ldv_init_zalloc(44);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p45);
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $p47 := ldv_init_zalloc(1);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1311} ldv_initialize();
    goto corral_source_split_8426;

  corral_source_split_8426:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p0);
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} vslice_dummy_var_52 := ldv_memset($p48, 0, 4);
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p1);
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} vslice_dummy_var_53 := ldv_memset($p50, 0, 4);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p2);
    goto corral_source_split_8431;

  corral_source_split_8431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} vslice_dummy_var_54 := ldv_memset($p52, 0, 4);
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p3);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} vslice_dummy_var_55 := ldv_memset($p54, 0, 8);
    goto corral_source_split_8434;

  corral_source_split_8434:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p4);
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1316} vslice_dummy_var_56 := ldv_memset($p56, 0, 8);
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p5);
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1317} vslice_dummy_var_57 := ldv_memset($p58, 0, 4);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p6);
    goto corral_source_split_8439;

  corral_source_split_8439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} vslice_dummy_var_58 := ldv_memset($p60, 0, 4);
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p7);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} vslice_dummy_var_59 := ldv_memset($p62, 0, 8);
    goto corral_source_split_8442;

  corral_source_split_8442:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p8);
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1320} vslice_dummy_var_60 := ldv_memset($p64, 0, 4);
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p9);
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} vslice_dummy_var_61 := ldv_memset($p66, 0, 8);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p10);
    goto corral_source_split_8447;

  corral_source_split_8447:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} vslice_dummy_var_62 := ldv_memset($p68, 0, 4);
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p11);
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} vslice_dummy_var_63 := ldv_memset($p70, 0, 4);
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $p72 := $bitcast.ref.ref($p12);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} vslice_dummy_var_64 := ldv_memset($p72, 0, 4);
    goto corral_source_split_8452;

  corral_source_split_8452:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p13);
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} vslice_dummy_var_65 := ldv_memset($p74, 0, 4);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p14);
    goto corral_source_split_8455;

  corral_source_split_8455:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1326} vslice_dummy_var_66 := ldv_memset($p76, 0, 4);
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p15);
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} vslice_dummy_var_67 := ldv_memset($p78, 0, 4);
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p16);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} vslice_dummy_var_68 := ldv_memset($p80, 0, 8);
    goto corral_source_split_8460;

  corral_source_split_8460:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p17);
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} vslice_dummy_var_69 := ldv_memset($p82, 0, 4);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    $p84 := $bitcast.ref.ref($p18);
    goto corral_source_split_8463;

  corral_source_split_8463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} vslice_dummy_var_70 := ldv_memset($p84, 0, 8);
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p19);
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} vslice_dummy_var_71 := ldv_memset($p86, 0, 4);
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $p88 := $bitcast.ref.ref($p20);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} vslice_dummy_var_72 := ldv_memset($p88, 0, 4);
    goto corral_source_split_8468;

  corral_source_split_8468:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p21);
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1333} vslice_dummy_var_73 := ldv_memset($p90, 0, 4);
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p22);
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} vslice_dummy_var_74 := ldv_memset($p92, 0, 4);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p23);
    goto corral_source_split_8473;

  corral_source_split_8473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1335} vslice_dummy_var_75 := ldv_memset($p94, 0, 8);
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p24);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} vslice_dummy_var_76 := ldv_memset($p96, 0, 4);
    goto corral_source_split_8476;

  corral_source_split_8476:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p25);
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} vslice_dummy_var_77 := ldv_memset($p98, 0, 4);
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    $p100 := $bitcast.ref.ref($p26);
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1338} vslice_dummy_var_78 := ldv_memset($p100, 0, 8);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    $p102 := $bitcast.ref.ref($p27);
    goto corral_source_split_8481;

  corral_source_split_8481:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} vslice_dummy_var_79 := ldv_memset($p102, 0, 4);
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $M.45 := 0;
    call {:si_unique_call 1340} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    $M.46 := 0;
    call {:si_unique_call 1341} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    goto corral_source_split_8484;

  corral_source_split_8484:
    assume {:verifier.code 0} true;
    $M.47 := 0;
    call {:si_unique_call 1342} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $M.48 := 1;
    call {:si_unique_call 1343} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    $M.49 := 0;
    call {:si_unique_call 1344} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.50 := 0;
    call {:si_unique_call 1345} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $p140, $i141, $i142, $p143, $i144, $i145, $p146, $i147, $i148, $p149, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i170, $i171, $p172, $i174, $i175, $p176, $i178, $i179, $p180, $i182, $i183, $p184, $p185, $i186, $i187, $i188, $i189, $i190, $p191, $i192, $i193, $p194, $i195, $i196, $p197, $i198, $i199, $p200, $i201, $i202, $p203, $p204, $i205, $i206, $p207, $p208, $i209, $i210, $p211, $p212, $i213, $i214, $p215, $p216, $i217, $i218, $p219, $i221, $i222, $p223, $i225, $i226, $p227, $i229, $i230, $p231, $i233, $i234, $p235, $i236, $i237, $p238, $i239, $i240, $i241, $i242, $p243, $i244, $i245, $i247, $i248, $p249, $i250, $i251, $i253, $i254, $p255, $i256, $i257, $i259, $i260, $p261, $i262, $i263, $i265, $i266, $p267, $i268, $i269, $i271, $i272, $p273, $i274, $i275, $i277, $i278, $p279, $i280, $i281, $i283, $i284, $p285, $i286, $i287, $i289, $i290, $p291, $p292, $i293, $i295, $i296, $p297, $p298, $i299, $i301, $i302, $p303, $p304, $i305, $i307, $i308, $p309, $p310, $i311, $i313, $i314, $p315, $i316, $i318, $i319, $p320, $i321, $i323, $i324, $p325, $i326, $i328, $i329, $p330, $i331, $i333, $i334, $p335, $i336, $i337, $i338, $i339, $i340, $p341, $i342, $i343, $p344, $i345, $i346, $p347, $i349, $i350, $p351, $i353, $i354, $p355, $i357, $i358, $p359, $i361, $i362, $p363, $i364, $i365, $i366, $p367, $i368, $i369, $i370, $p371, $i372, $i373, $i374, $p375, $i376, $i377, $i378, $p379, $i380, $i381, $p382, $i383, $i384, $p385, $i387, $i388, $p389, $i391, $i392, $p393, $i395, $i396, $p397, $i399, $i400, $p401, $i403, $i404, $p405, $i407, $i408, $p409, $i411, $i412, $p413, $i415, $i416, $p417, $i418, $i419, $p420, $i421, $i422, $p423, $i424, $i425, $p426, $i427, $i428, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $p461, $i462, $i463, $p464, $i465, $i466, $p467, $i468, $i469, $p470, $i471, $i472, $p473, $i475, $i476, $p477, $i479, $i480, $p481, $i483, $i484, $p485, $i487, $i488, $p489, $i491, $i492, $p493, $i495, $i496, $p497, $i499, $i500, $p501, $i503, $i504, $p505, $p506, $i507, $i508, $i509, $i510, $i511, $p512, $i513, $i514, $p515, $i516, $i517, $p518, $i519, $i520, $p521, $i522, $i523, $p524, $p525, $i526, $i527, $p528, $p529, $i530, $i531, $p532, $p533, $i534, $i535, $p536, $p537, $i538, $i539, $p540, $i541, $i542, $p543, $i545, $i546, $p547, $i549, $i550, $p551, $i553, $i554, $p555, $i557, $i558, $p559, $i560, $i561, $i562, $i563, $p564, $i565, $i566, $i568, $i569, $p570, $i571, $i572, $i574, $i575, $p576, $i577, $i578, $i580, $i581, $p582, $i583, $i584, $i586, $i587, $p588, $i589, $i590, $i592, $i593, $p594, $i595, $i596, $i598, $i599, $p600, $i601, $i602, $i604, $i605, $p606, $i607, $i608, $i610, $i611, $p612, $p613, $i614, $i616, $i617, $p618, $p619, $i620, $i622, $i623, $p624, $p625, $i626, $i628, $i629, $p630, $p631, $i632, $i634, $i635, $p636, $i637, $i639, $i640, $p641, $i642, $i644, $i645, $p646, $i647, $i649, $i650, $p651, $i652, $i654, $i655, $p656, $i657, $i658, $i659, $i660, $i661, $p662, $i663, $i664, $p665, $i666, $i667, $p668, $i670, $i671, $p672, $i674, $i675, $p676, $i678, $i679, $p680, $i682, $i683, $p684, $i685, $i686, $i687, $p688, $i689, $i690, $i691, $p692, $i693, $i694, $i695, $p696, $i697, $i698, $i699, $p700, $i701, $i702, $p703, $i704, $i705, $p706, $i708, $i709, $p710, $i712, $i713, $p714, $i716, $i717, $p718, $i720, $i721, $p722, $i724, $i725, $p726, $i728, $i729, $p730, $i732, $i733, $p734, $i736, $i737, $p738, $i739, $i740, $p741, $i742, $i743, $p744, $i745, $i746, $p747, $i748, $i749, $i751, $i752, $i753, $i754, $i755, $i756, $i757, $i758, $i759, $i760, $i761, $i762, $i763, $i764, $i765, $i766, $i767, $i768, $i769, $i770, $i771, $i772, $i773, $i774, $i775, $i776, $i777, $i778, $i779, $i780, $i781, $i782, $i783, $i784, $i785, $i786, $i787, $i788, $i789, $i790, $i791, $i792, $i793, $i794, $i795, $i796, $i797, $i798, $p799, $i800, $i801, $p802, $i803, $i804, $p805, $i806, $i807, $p808, $i809, $i810, $p811, $i813, $i814, $p815, $i817, $i818, $p819, $i821, $i822, $p823, $i825, $i826, $p827, $i829, $i830, $p831, $i833, $i834, $p835, $i837, $i838, $p839, $i841, $i842, $p843, $p844, $i845, $i846, $i847, $i848, $i849, $p850, $i851, $i852, $p853, $i854, $i855, $p856, $i857, $i858, $p859, $i860, $i861, $p862, $p863, $i864, $i865, $p866, $p867, $i868, $i869, $p870, $p871, $i872, $i873, $p874, $p875, $i876, $i877, $p878, $i879, $i880, $p881, $i883, $i884, $p885, $i887, $i888, $p889, $i891, $i892, $p893, $i895, $i896, $p897, $i898, $i899, $i900, $i901, $p902, $i903, $i904, $i906, $i907, $p908, $i909, $i910, $i912, $i913, $p914, $i915, $i916, $i918, $i919, $p920, $i921, $i922, $i924, $i925, $p926, $i927, $i928, $i930, $i931, $p932, $i933, $i934, $i936, $i937, $p938, $i939, $i940, $i942, $i943, $p944, $i945, $i946, $i948, $i949, $p950, $p951, $i952, $i954, $i955, $p956, $p957, $i958, $i960, $i961, $p962, $p963, $i964, $i966, $i967, $p968, $p969, $i970, $i972, $i973, $p974, $i975, $i977, $i978, $p979, $i980, $i982, $i983, $p984, $i985, $i987, $i988, $p989, $i990, $i992, $i993, $p994, $i995, $i996, $i997, $i998, $i999, $p1000, $i1001, $i1002, $p1003, $i1004, $i1005, $p1006, $i1008, $i1009, $p1010, $i1012, $i1013, $p1014, $i1016, $i1017, $p1018, $i1020, $i1021, $p1022, $i1023, $i1024, $i1025, $p1026, $i1027, $i1028, $i1029, $p1030, $i1031, $i1032, $i1033, $p1034, $i1035, $i1036, $i1037, $p1038, $i1039, $i1040, $p1041, $i1042, $i1043, $p1044, $i1046, $i1047, $p1048, $i1050, $i1051, $p1052, $i1054, $i1055, $p1056, $i1058, $i1059, $p1060, $i1062, $i1063, $p1064, $i1066, $i1067, $p1068, $i1070, $i1071, $p1072, $i1074, $i1075, $p1076, $i1077, $i1078, $p1079, $i1080, $i1081, $p1082, $i1083, $i1084, $p1085, $i1086, $i1087, $i1089, $i1090, $i1091, $i1092, $i1093, $i1094, $i1095, $i1096, $i1097, $i1098, $i1099, $i1100, $i1101, $i1102, $i1103, $i1104, $i1105, $i1106, $i1107, $i1108, $i1109, $i1110, $i1111, $i1112, $i1113, $i1114, $i1115, $i1116, $i1117, $i1118, $i1119, $p1120, $i1121, $i1122, $p1123, $i1124, $i1125, $p1126, $i1127, $i1128, $p1129, $i1130, $i1131, $p1132, $i1134, $i1135, $p1136, $i1138, $i1139, $p1140, $i1142, $i1143, $p1144, $i1146, $i1147, $p1148, $i1150, $i1151, $p1152, $i1154, $i1155, $p1156, $i1158, $i1159, $p1160, $i1162, $i1163, $p1164, $p1165, $i1166, $i1167, $i1168, $i1169, $i1170, $p1171, $i1172, $i1173, $p1174, $i1175, $i1176, $p1177, $i1178, $i1179, $p1180, $i1181, $i1182, $p1183, $p1184, $i1185, $i1186, $p1187, $p1188, $i1189, $i1190, $p1191, $p1192, $i1193, $i1194, $p1195, $p1196, $i1197, $i1198, $p1199, $i1200, $i1201, $p1202, $i1204, $i1205, $p1206, $i1208, $i1209, $p1210, $i1212, $i1213, $p1214, $i1216, $i1217, $p1218, $i1219, $i1220, $i1221, $i1222, $p1223, $i1224, $i1225, $i1227, $i1228, $p1229, $i1230, $i1231, $i1233, $i1234, $p1235, $i1236, $i1237, $i1239, $i1240, $p1241, $i1242, $i1243, $i1245, $i1246, $p1247, $i1248, $i1249, $i1251, $i1252, $p1253, $i1254, $i1255, $i1257, $i1258, $p1259, $i1260, $i1261, $i1263, $i1264, $p1265, $i1266, $i1267, $i1269, $i1270, $p1271, $p1272, $i1273, $i1275, $i1276, $p1277, $p1278, $i1279, $i1281, $i1282, $p1283, $p1284, $i1285, $i1287, $i1288, $p1289, $p1290, $i1291, $i1293, $i1294, $p1295, $i1296, $i1298, $i1299, $p1300, $i1301, $i1303, $i1304, $p1305, $i1306, $i1308, $i1309, $p1310, $i1311, $i1313, $i1314, $p1315, $i1316, $i1317, $i1318, $i1319, $i1320, $p1321, $i1322, $i1323, $p1324, $i1325, $i1326, $p1327, $i1329, $i1330, $p1331, $i1333, $i1334, $p1335, $i1337, $i1338, $p1339, $i1341, $i1342, $p1343, $i1344, $i1345, $i1346, $p1347, $i1348, $i1349, $i1350, $p1351, $i1352, $i1353, $i1354, $p1355, $i1356, $i1357, $i1358, $p1359, $i1360, $i1361, $p1362, $i1363, $i1364, $p1365, $i1367, $i1368, $p1369, $i1371, $i1372, $p1373, $i1375, $i1376, $p1377, $i1379, $i1380, $p1381, $i1383, $i1384, $p1385, $i1387, $i1388, $p1389, $i1391, $i1392, $p1393, $i1395, $i1396, $p1397, $i1398, $i1399, $p1400, $i1401, $i1402, $p1403, $i1404, $i1405, $p1406, $i1407, $i1408, $i1410, $i1411, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241, vslice_dummy_var_242, vslice_dummy_var_243 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p12, $p13, $p14, $p15, $p16, $p17, $p18, $p19, $p20, $p21, $p22, $p23, $p24, $p25, $p26, $p27, $p28, $p30, $p32, $p34, $p35, $p37, $p38, $p40, $p42, $p44, $p46, $p47, $i104, $i105, $i106, $i107, $i108, $i109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $i139, $p140, $i141, $i142, $p143, $i144, $i145, $p146, $i147, $i148, $p149, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i170, $i171, $p172, $i174, $i175, $p176, $i178, $i179, $p180, $i182, $i183, $p184, $p185, $i186, $i187, $i188, $i189, $i190, $p191, $i192, $i193, $p194, $i195, $i196, $p197, $i198, $i199, $p200, $i201, $i202, $p203, $p204, $i205, $i206, $p207, $p208, $i209, $i210, $p211, $p212, $i213, $i214, $p215, $p216, $i217, $i218, $p219, $i221, $i222, $p223, $i225, $i226, $p227, $i229, $i230, $p231, $i233, $i234, $p235, $i236, $i237, $p238, $i239, $i240, $i241, $i242, $p243, $i244, $i245, $i247, $i248, $p249, $i250, $i251, $i253, $i254, $p255, $i256, $i257, $i259, $i260, $p261, $i262, $i263, $i265, $i266, $p267, $i268, $i269, $i271, $i272, $p273, $i274, $i275, $i277, $i278, $p279, $i280, $i281, $i283, $i284, $p285, $i286, $i287, $i289, $i290, $p291, $p292, $i293, $i295, $i296, $p297, $p298, $i299, $i301, $i302, $p303, $p304, $i305, $i307, $i308, $p309, $p310, $i311, $i313, $i314, $p315, $i316, $i318, $i319, $p320, $i321, $i323, $i324, $p325, $i326, $i328, $i329, $p330, $i331, $i333, $i334, $p335, $i336, $i337, $i338, $i339, $i340, $p341, $i342, $i343, $p344, $i345, $i346, $p347, $i349, $i350, $p351, $i353, $i354, $p355, $i357, $i358, $p359, $i361, $i362, $p363, $i364, $i365, $i366, $p367, $i368, $i369, $i370, $p371, $i372, $i373, $i374, $p375, $i376, $i377, $i378, $p379, $i380, $i381, $p382, $i383, $i384, $p385, $i387, $i388, $p389, $i391, $i392, $p393, $i395, $i396, $p397, $i399, $i400, $p401, $i403, $i404, $p405, $i407, $i408, $p409, $i411, $i412, $p413, $i415, $i416, $p417, $i418, $i419, $p420, $i421, $i422, $p423, $i424, $i425, $p426, $i427, $i428, $i430, $i431, $i432, $i433, $i434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i447, $i448, $i449, $i450, $i451, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $p461, $i462, $i463, $p464, $i465, $i466, $p467, $i468, $i469, $p470, $i471, $i472, $p473, $i475, $i476, $p477, $i479, $i480, $p481, $i483, $i484, $p485, $i487, $i488, $p489, $i491, $i492, $p493, $i495, $i496, $p497, $i499, $i500, $p501, $i503, $i504, $p505, $p506, $i507, $i508, $i509, $i510, $i511, $p512, $i513, $i514, $p515, $i516, $i517, $p518, $i519, $i520, $p521, $i522, $i523, $p524, $p525, $i526, $i527, $p528, $p529, $i530, $i531, $p532, $p533, $i534, $i535, $p536, $p537, $i538, $i539, $p540, $i541, $i542, $p543, $i545, $i546, $p547, $i549, $i550, $p551, $i553, $i554, $p555, $i557, $i558, $p559, $i560, $i561, $i562, $i563, $p564, $i565, $i566, $i568, $i569, $p570, $i571, $i572, $i574, $i575, $p576, $i577, $i578, $i580, $i581, $p582, $i583, $i584, $i586, $i587, $p588, $i589, $i590, $i592, $i593, $p594, $i595, $i596, $i598, $i599, $p600, $i601, $i602, $i604, $i605, $p606, $i607, $i608, $i610, $i611, $p612, $p613, $i614, $i616, $i617, $p618, $p619, $i620, $i622, $i623, $p624, $p625, $i626, $i628, $i629, $p630, $p631, $i632, $i634, $i635, $p636, $i637, $i639, $i640, $p641, $i642, $i644, $i645, $p646, $i647, $i649, $i650, $p651, $i652, $i654, $i655, $p656, $i657, $i658, $i659, $i660, $i661, $p662, $i663, $i664, $p665, $i666, $i667, $p668, $i670, $i671, $p672, $i674, $i675, $p676, $i678, $i679, $p680, $i682, $i683, $p684, $i685, $i686, $i687, $p688, $i689, $i690, $i691, $p692, $i693, $i694, $i695, $p696, $i697, $i698, $i699, $p700, $i701, $i702, $p703, $i704, $i705, $p706, $i708, $i709, $p710, $i712, $i713, $p714, $i716, $i717, $p718, $i720, $i721, $p722, $i724, $i725, $p726, $i728, $i729, $p730, $i732, $i733, $p734, $i736, $i737, $p738, $i739, $i740, $p741, $i742, $i743, $p744, $i745, $i746, $p747, $i748, $i749, $i751, $i752, $i753, $i754, $i755, $i756, $i757, $i758, $i759, $i760, $i761, $i762, $i763, $i764, $i765, $i766, $i767, $i768, $i769, $i770, $i771, $i772, $i773, $i774, $i775, $i776, $i777, $i778, $i779, $i780, $i781, $i782, $i783, $i784, $i785, $i786, $i787, $i788, $i789, $i790, $i791, $i792, $i793, $i794, $i795, $i796, $i797, $i798, $p799, $i800, $i801, $p802, $i803, $i804, $p805, $i806, $i807, $p808, $i809, $i810, $p811, $i813, $i814, $p815, $i817, $i818, $p819, $i821, $i822, $p823, $i825, $i826, $p827, $i829, $i830, $p831, $i833, $i834, $p835, $i837, $i838, $p839, $i841, $i842, $p843, $p844, $i845, $i846, $i847, $i848, $i849, $p850, $i851, $i852, $p853, $i854, $i855, $p856, $i857, $i858, $p859, $i860, $i861, $p862, $p863, $i864, $i865, $p866, $p867, $i868, $i869, $p870, $p871, $i872, $i873, $p874, $p875, $i876, $i877, $p878, $i879, $i880, $p881, $i883, $i884, $p885, $i887, $i888, $p889, $i891, $i892, $p893, $i895, $i896, $p897, $i898, $i899, $i900, $i901, $p902, $i903, $i904, $i906, $i907, $p908, $i909, $i910, $i912, $i913, $p914, $i915, $i916, $i918, $i919, $p920, $i921, $i922, $i924, $i925, $p926, $i927, $i928, $i930, $i931, $p932, $i933, $i934, $i936, $i937, $p938, $i939, $i940, $i942, $i943, $p944, $i945, $i946, $i948, $i949, $p950, $p951, $i952, $i954, $i955, $p956, $p957, $i958, $i960, $i961, $p962, $p963, $i964, $i966, $i967, $p968, $p969, $i970, $i972, $i973, $p974, $i975, $i977, $i978, $p979, $i980, $i982, $i983, $p984, $i985, $i987, $i988, $p989, $i990, $i992, $i993, $p994, $i995, $i996, $i997, $i998, $i999, $p1000, $i1001, $i1002, $p1003, $i1004, $i1005, $p1006, $i1008, $i1009, $p1010, $i1012, $i1013, $p1014, $i1016, $i1017, $p1018, $i1020, $i1021, $p1022, $i1023, $i1024, $i1025, $p1026, $i1027, $i1028, $i1029, $p1030, $i1031, $i1032, $i1033, $p1034, $i1035, $i1036, $i1037, $p1038, $i1039, $i1040, $p1041, $i1042, $i1043, $p1044, $i1046, $i1047, $p1048, $i1050, $i1051, $p1052, $i1054, $i1055, $p1056, $i1058, $i1059, $p1060, $i1062, $i1063, $p1064, $i1066, $i1067, $p1068, $i1070, $i1071, $p1072, $i1074, $i1075, $p1076, $i1077, $i1078, $p1079, $i1080, $i1081, $p1082, $i1083, $i1084, $p1085, $i1086, $i1087, $i1089, $i1090, $i1091, $i1092, $i1093, $i1094, $i1095, $i1096, $i1097, $i1098, $i1099, $i1100, $i1101, $i1102, $i1103, $i1104, $i1105, $i1106, $i1107, $i1108, $i1109, $i1110, $i1111, $i1112, $i1113, $i1114, $i1115, $i1116, $i1117, $i1118, $i1119, $p1120, $i1121, $i1122, $p1123, $i1124, $i1125, $p1126, $i1127, $i1128, $p1129, $i1130, $i1131, $p1132, $i1134, $i1135, $p1136, $i1138, $i1139, $p1140, $i1142, $i1143, $p1144, $i1146, $i1147, $p1148, $i1150, $i1151, $p1152, $i1154, $i1155, $p1156, $i1158, $i1159, $p1160, $i1162, $i1163, $p1164, $p1165, $i1166, $i1167, $i1168, $i1169, $i1170, $p1171, $i1172, $i1173, $p1174, $i1175, $i1176, $p1177, $i1178, $i1179, $p1180, $i1181, $i1182, $p1183, $p1184, $i1185, $i1186, $p1187, $p1188, $i1189, $i1190, $p1191, $p1192, $i1193, $i1194, $p1195, $p1196, $i1197, $i1198, $p1199, $i1200, $i1201, $p1202, $i1204, $i1205, $p1206, $i1208, $i1209, $p1210, $i1212, $i1213, $p1214, $i1216, $i1217, $p1218, $i1219, $i1220, $i1221, $i1222, $p1223, $i1224, $i1225, $i1227, $i1228, $p1229, $i1230, $i1231, $i1233, $i1234, $p1235, $i1236, $i1237, $i1239, $i1240, $p1241, $i1242, $i1243, $i1245, $i1246, $p1247, $i1248, $i1249, $i1251, $i1252, $p1253, $i1254, $i1255, $i1257, $i1258, $p1259, $i1260, $i1261, $i1263, $i1264, $p1265, $i1266, $i1267, $i1269, $i1270, $p1271, $p1272, $i1273, $i1275, $i1276, $p1277, $p1278, $i1279, $i1281, $i1282, $p1283, $p1284, $i1285, $i1287, $i1288, $p1289, $p1290, $i1291, $i1293, $i1294, $p1295, $i1296, $i1298, $i1299, $p1300, $i1301, $i1303, $i1304, $p1305, $i1306, $i1308, $i1309, $p1310, $i1311, $i1313, $i1314, $p1315, $i1316, $i1317, $i1318, $i1319, $i1320, $p1321, $i1322, $i1323, $p1324, $i1325, $i1326, $p1327, $i1329, $i1330, $p1331, $i1333, $i1334, $p1335, $i1337, $i1338, $p1339, $i1341, $i1342, $p1343, $i1344, $i1345, $i1346, $p1347, $i1348, $i1349, $i1350, $p1351, $i1352, $i1353, $i1354, $p1355, $i1356, $i1357, $i1358, $p1359, $i1360, $i1361, $p1362, $i1363, $i1364, $p1365, $i1367, $i1368, $p1369, $i1371, $i1372, $p1373, $i1375, $i1376, $p1377, $i1379, $i1380, $p1381, $i1383, $i1384, $p1385, $i1387, $i1388, $p1389, $i1391, $i1392, $p1393, $i1395, $i1396, $p1397, $i1398, $i1399, $p1400, $i1401, $i1402, $p1403, $i1404, $i1405, $p1406, $i1407, $i1408, $i1410, $i1411, vslice_dummy_var_80, vslice_dummy_var_81, vslice_dummy_var_82, vslice_dummy_var_83, vslice_dummy_var_84, vslice_dummy_var_85, vslice_dummy_var_86, vslice_dummy_var_87, vslice_dummy_var_88, vslice_dummy_var_89, vslice_dummy_var_90, vslice_dummy_var_91, vslice_dummy_var_92, vslice_dummy_var_93, vslice_dummy_var_94, vslice_dummy_var_95, vslice_dummy_var_96, vslice_dummy_var_97, vslice_dummy_var_98, vslice_dummy_var_99, vslice_dummy_var_100, vslice_dummy_var_101, vslice_dummy_var_102, vslice_dummy_var_103, vslice_dummy_var_104, vslice_dummy_var_105, vslice_dummy_var_106, vslice_dummy_var_107, vslice_dummy_var_108, vslice_dummy_var_109, vslice_dummy_var_110, vslice_dummy_var_111, vslice_dummy_var_112, vslice_dummy_var_113, vslice_dummy_var_114, vslice_dummy_var_115, vslice_dummy_var_116, vslice_dummy_var_117, vslice_dummy_var_118, vslice_dummy_var_119, vslice_dummy_var_120, vslice_dummy_var_121, vslice_dummy_var_122, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176, vslice_dummy_var_177, vslice_dummy_var_178, vslice_dummy_var_179, vslice_dummy_var_180, vslice_dummy_var_181, vslice_dummy_var_182, vslice_dummy_var_183, vslice_dummy_var_184, vslice_dummy_var_185, vslice_dummy_var_186, vslice_dummy_var_187, vslice_dummy_var_188, vslice_dummy_var_189, vslice_dummy_var_190, vslice_dummy_var_191, vslice_dummy_var_192, vslice_dummy_var_193, vslice_dummy_var_194, vslice_dummy_var_195, vslice_dummy_var_196, vslice_dummy_var_197, vslice_dummy_var_198, vslice_dummy_var_199, vslice_dummy_var_200, vslice_dummy_var_201, vslice_dummy_var_202, vslice_dummy_var_203, vslice_dummy_var_204, vslice_dummy_var_205, vslice_dummy_var_206, vslice_dummy_var_207, vslice_dummy_var_208, vslice_dummy_var_209, vslice_dummy_var_210, vslice_dummy_var_211, vslice_dummy_var_212, vslice_dummy_var_213, vslice_dummy_var_214, vslice_dummy_var_215, vslice_dummy_var_216, vslice_dummy_var_217, vslice_dummy_var_218, vslice_dummy_var_219, vslice_dummy_var_220, vslice_dummy_var_221, vslice_dummy_var_222, vslice_dummy_var_223, vslice_dummy_var_224, vslice_dummy_var_225, vslice_dummy_var_226, vslice_dummy_var_227, vslice_dummy_var_228, vslice_dummy_var_229, vslice_dummy_var_230, vslice_dummy_var_231, vslice_dummy_var_232, vslice_dummy_var_233, vslice_dummy_var_234, vslice_dummy_var_235, vslice_dummy_var_236, vslice_dummy_var_237, vslice_dummy_var_238, vslice_dummy_var_239, vslice_dummy_var_240, vslice_dummy_var_241, vslice_dummy_var_242, vslice_dummy_var_243);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i105 := $slt.i32($i104, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i105 == 1);
    assume {:verifier.code 0} true;
    $i106 := $slt.i32($i104, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    $i107 := $slt.i32($i104, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i104, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i108 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb1123;

  $bb1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} ldv_stop();
    goto corral_source_split_11079;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    goto $bb1124;

  $bb1124:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb285_dummy;

  $bb9:
    assume $i108 == 1;
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    $i1091 := $M.50;
    goto corral_source_split_8499;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    $i1092 := $ne.i32($i1091, 0);
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb854, $bb855;

  $bb855:
    assume !($i1092 == 1);
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb1122:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb854:
    assume $i1092 == 1;
    goto corral_source_split_10448;

  corral_source_split_10448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1806} $i1093 := __VERIFIER_nondet_int();
    call {:si_unique_call 1807} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1093);
    call {:si_unique_call 1808} {:cexpr "tmp___16"} boogie_si_record_i32($i1093);
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb856:
    assume {:verifier.code 0} true;
    $i1094 := $slt.i32($i1093, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb857, $bb858;

  $bb858:
    assume !($i1094 == 1);
    assume {:verifier.code 0} true;
    $i1095 := $slt.i32($i1093, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb859, $bb860;

  $bb860:
    assume !($i1095 == 1);
    assume {:verifier.code 0} true;
    $i1096 := $slt.i32($i1093, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb861, $bb862;

  $bb862:
    assume !($i1096 == 1);
    assume {:verifier.code 0} true;
    $i1097 := $slt.i32($i1093, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb863, $bb864;

  $bb864:
    assume !($i1097 == 1);
    assume {:verifier.code 0} true;
    $i1098 := $slt.i32($i1093, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb865, $bb866;

  $bb866:
    assume !($i1098 == 1);
    assume {:verifier.code 0} true;
    $i1099 := $eq.i32($i1093, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb867, $bb868;

  $bb868:
    assume {:verifier.code 0} true;
    assume !($i1099 == 1);
    goto $bb869;

  $bb869:
    assume {:verifier.code 0} true;
    goto $bb1120;

  $bb1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_stop();
    goto corral_source_split_11077;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    goto $bb1121;

  $bb1121:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb918:
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb867:
    assume $i1099 == 1;
    goto corral_source_split_10458;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    $i1407 := $M.50;
    goto corral_source_split_10459;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    $i1408 := $eq.i32($i1407, 1);
    goto corral_source_split_10460;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1117, $bb1118;

  $bb1118:
    assume !($i1408 == 1);
    assume {:verifier.code 0} true;
    goto $bb1119;

  $bb1119:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1117:
    assume $i1408 == 1;
    goto corral_source_split_11070;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} vslice_dummy_var_243 := ldv_probe_2();
    goto corral_source_split_11071;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1949} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11072;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    $i1410 := $M.47;
    goto corral_source_split_11073;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    $i1411 := $add.i32($i1410, 1);
    goto corral_source_split_11074;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $M.47 := $i1411;
    call {:si_unique_call 1950} {:cexpr "ref_cnt"} boogie_si_record_i32($i1411);
    goto corral_source_split_11075;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    goto $bb1119;

  $bb865:
    assume $i1098 == 1;
    goto corral_source_split_10454;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    $i1395 := $M.50;
    goto corral_source_split_10455;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    $i1396 := $eq.i32($i1395, 4);
    goto corral_source_split_10456;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1105, $bb1106;

  $bb1106:
    assume !($i1396 == 1);
    assume {:verifier.code 0} true;
    goto $bb1107;

  $bb1107:
    assume {:verifier.code 0} true;
    $i1398 := $M.50;
    goto corral_source_split_11046;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    $i1399 := $eq.i32($i1398, 1);
    goto corral_source_split_11047;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1108, $bb1109;

  $bb1109:
    assume !($i1399 == 1);
    assume {:verifier.code 0} true;
    goto $bb1110;

  $bb1110:
    assume {:verifier.code 0} true;
    $i1401 := $M.50;
    goto corral_source_split_11054;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    $i1402 := $eq.i32($i1401, 3);
    goto corral_source_split_11055;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1111, $bb1112;

  $bb1112:
    assume !($i1402 == 1);
    assume {:verifier.code 0} true;
    goto $bb1113;

  $bb1113:
    assume {:verifier.code 0} true;
    $i1404 := $M.50;
    goto corral_source_split_11062;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    $i1405 := $eq.i32($i1404, 2);
    goto corral_source_split_11063;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1114, $bb1115;

  $bb1115:
    assume !($i1405 == 1);
    assume {:verifier.code 0} true;
    goto $bb1116;

  $bb1116:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1114:
    assume $i1405 == 1;
    goto corral_source_split_11065;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    $p1406 := $M.37;
    goto corral_source_split_11066;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} edge_bulk_in_callback($p1406);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_11067;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1947} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11068;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    goto $bb1116;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb1111:
    assume $i1402 == 1;
    goto corral_source_split_11057;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    $p1403 := $M.37;
    goto corral_source_split_11058;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} edge_bulk_in_callback($p1403);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_11059;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11060;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    goto $bb1113;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb1108:
    assume $i1399 == 1;
    goto corral_source_split_11049;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    $p1400 := $M.37;
    goto corral_source_split_11050;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} edge_bulk_in_callback($p1400);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_11051;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11052;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    goto $bb1110;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb1105:
    assume $i1396 == 1;
    goto corral_source_split_11041;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    $p1397 := $M.37;
    goto corral_source_split_11042;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} edge_bulk_in_callback($p1397);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_11043;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1941} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_11044;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    goto $bb1107;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb863:
    assume $i1097 == 1;
    goto corral_source_split_10450;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    $i1379 := $M.50;
    goto corral_source_split_10451;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    $i1380 := $eq.i32($i1379, 4);
    goto corral_source_split_10452;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1093, $bb1094;

  $bb1094:
    assume !($i1380 == 1);
    assume {:verifier.code 0} true;
    goto $bb1095;

  $bb1095:
    assume {:verifier.code 0} true;
    $i1383 := $M.50;
    goto corral_source_split_11017;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    $i1384 := $eq.i32($i1383, 1);
    goto corral_source_split_11018;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1096, $bb1097;

  $bb1097:
    assume !($i1384 == 1);
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1098:
    assume {:verifier.code 0} true;
    $i1387 := $M.50;
    goto corral_source_split_11025;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    $i1388 := $eq.i32($i1387, 3);
    goto corral_source_split_11026;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1099, $bb1100;

  $bb1100:
    assume !($i1388 == 1);
    assume {:verifier.code 0} true;
    goto $bb1101;

  $bb1101:
    assume {:verifier.code 0} true;
    $i1391 := $M.50;
    goto corral_source_split_11033;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    $i1392 := $eq.i32($i1391, 2);
    goto corral_source_split_11034;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1102, $bb1103;

  $bb1103:
    assume !($i1392 == 1);
    assume {:verifier.code 0} true;
    goto $bb1104;

  $bb1104:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1102:
    assume $i1392 == 1;
    goto corral_source_split_11036;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    $p1393 := $M.40;
    goto corral_source_split_11037;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} vslice_dummy_var_242 := edge_tiocmget($p1393);
    goto corral_source_split_11038;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1939} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11039;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    goto $bb1104;

  $bb1099:
    assume $i1388 == 1;
    goto corral_source_split_11028;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    $p1389 := $M.40;
    goto corral_source_split_11029;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} vslice_dummy_var_241 := edge_tiocmget($p1389);
    goto corral_source_split_11030;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1937} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11031;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    goto $bb1101;

  $bb1096:
    assume $i1384 == 1;
    goto corral_source_split_11020;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    $p1385 := $M.40;
    goto corral_source_split_11021;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} vslice_dummy_var_240 := edge_tiocmget($p1385);
    goto corral_source_split_11022;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1935} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11023;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    goto $bb1098;

  $bb1093:
    assume $i1380 == 1;
    goto corral_source_split_11012;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    $p1381 := $M.40;
    goto corral_source_split_11013;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} vslice_dummy_var_239 := edge_tiocmget($p1381);
    goto corral_source_split_11014;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1933} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_11015;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    goto $bb1095;

  $bb861:
    assume $i1096 == 1;
    assume {:verifier.code 0} true;
    $i1100 := $slt.i32($i1093, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb870, $bb871;

  $bb871:
    assume !($i1100 == 1);
    assume {:verifier.code 0} true;
    $i1101 := $slt.i32($i1093, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb872, $bb873;

  $bb873:
    assume !($i1101 == 1);
    goto corral_source_split_10470;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    $i1363 := $M.50;
    goto corral_source_split_10471;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    $i1364 := $eq.i32($i1363, 4);
    goto corral_source_split_10472;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1081, $bb1082;

  $bb1082:
    assume !($i1364 == 1);
    assume {:verifier.code 0} true;
    goto $bb1083;

  $bb1083:
    assume {:verifier.code 0} true;
    $i1367 := $M.50;
    goto corral_source_split_10988;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    $i1368 := $eq.i32($i1367, 1);
    goto corral_source_split_10989;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1084, $bb1085;

  $bb1085:
    assume !($i1368 == 1);
    assume {:verifier.code 0} true;
    goto $bb1086;

  $bb1086:
    assume {:verifier.code 0} true;
    $i1371 := $M.50;
    goto corral_source_split_10996;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    $i1372 := $eq.i32($i1371, 3);
    goto corral_source_split_10997;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1087, $bb1088;

  $bb1088:
    assume !($i1372 == 1);
    assume {:verifier.code 0} true;
    goto $bb1089;

  $bb1089:
    assume {:verifier.code 0} true;
    $i1375 := $M.50;
    goto corral_source_split_11004;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    $i1376 := $eq.i32($i1375, 2);
    goto corral_source_split_11005;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1090, $bb1091;

  $bb1091:
    assume !($i1376 == 1);
    assume {:verifier.code 0} true;
    goto $bb1092;

  $bb1092:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1090:
    assume $i1376 == 1;
    goto corral_source_split_11007;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    $p1377 := $M.40;
    goto corral_source_split_11008;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} vslice_dummy_var_238 := edge_chars_in_buffer($p1377);
    goto corral_source_split_11009;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1931} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11010;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    goto $bb1092;

  $bb1087:
    assume $i1372 == 1;
    goto corral_source_split_10999;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    $p1373 := $M.40;
    goto corral_source_split_11000;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} vslice_dummy_var_237 := edge_chars_in_buffer($p1373);
    goto corral_source_split_11001;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1929} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11002;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    goto $bb1089;

  $bb1084:
    assume $i1368 == 1;
    goto corral_source_split_10991;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    $p1369 := $M.40;
    goto corral_source_split_10992;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} vslice_dummy_var_236 := edge_chars_in_buffer($p1369);
    goto corral_source_split_10993;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1927} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10994;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    goto $bb1086;

  $bb1081:
    assume $i1364 == 1;
    goto corral_source_split_10983;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    $p1365 := $M.40;
    goto corral_source_split_10984;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} vslice_dummy_var_235 := edge_chars_in_buffer($p1365);
    goto corral_source_split_10985;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1925} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10986;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    goto $bb1083;

  $bb872:
    assume $i1101 == 1;
    goto corral_source_split_10466;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    $i1357 := $M.50;
    goto corral_source_split_10467;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    $i1358 := $eq.i32($i1357, 4);
    goto corral_source_split_10468;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1075, $bb1076;

  $bb1076:
    assume !($i1358 == 1);
    assume {:verifier.code 0} true;
    goto $bb1077;

  $bb1077:
    assume {:verifier.code 0} true;
    $i1360 := $M.50;
    goto corral_source_split_10975;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    $i1361 := $eq.i32($i1360, 3);
    goto corral_source_split_10976;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1078, $bb1079;

  $bb1079:
    assume !($i1361 == 1);
    assume {:verifier.code 0} true;
    goto $bb1080;

  $bb1080:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1078:
    assume $i1361 == 1;
    goto corral_source_split_10978;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    $p1362 := $M.39;
    goto corral_source_split_10979;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} edge_disconnect($p1362);
    goto corral_source_split_10980;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1923} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10981;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    goto $bb1080;

  $bb1075:
    assume $i1358 == 1;
    goto corral_source_split_10970;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    $p1359 := $M.39;
    goto corral_source_split_10971;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} edge_disconnect($p1359);
    goto corral_source_split_10972;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1921} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10973;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    goto $bb1077;

  $bb870:
    assume $i1100 == 1;
    goto corral_source_split_10462;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    $i1341 := $M.50;
    goto corral_source_split_10463;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    $i1342 := $eq.i32($i1341, 4);
    goto corral_source_split_10464;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1063, $bb1064;

  $bb1064:
    assume !($i1342 == 1);
    assume {:verifier.code 0} true;
    goto $bb1065;

  $bb1065:
    assume {:verifier.code 0} true;
    $i1345 := $M.50;
    goto corral_source_split_10943;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    $i1346 := $eq.i32($i1345, 1);
    goto corral_source_split_10944;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1066, $bb1067;

  $bb1067:
    assume !($i1346 == 1);
    assume {:verifier.code 0} true;
    goto $bb1068;

  $bb1068:
    assume {:verifier.code 0} true;
    $i1349 := $M.50;
    goto corral_source_split_10952;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    $i1350 := $eq.i32($i1349, 3);
    goto corral_source_split_10953;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1069, $bb1070;

  $bb1070:
    assume !($i1350 == 1);
    assume {:verifier.code 0} true;
    goto $bb1071;

  $bb1071:
    assume {:verifier.code 0} true;
    $i1353 := $M.50;
    goto corral_source_split_10961;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    $i1354 := $eq.i32($i1353, 2);
    goto corral_source_split_10962;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1072, $bb1073;

  $bb1073:
    assume !($i1354 == 1);
    assume {:verifier.code 0} true;
    goto $bb1074;

  $bb1074:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1072:
    assume $i1354 == 1;
    goto corral_source_split_10964;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    $p1355 := $M.40;
    goto corral_source_split_10965;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    $i1356 := $load.i32($M.28, $p24);
    goto corral_source_split_10966;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} edge_break($p1355, $i1356);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_10967;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1919} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10968;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    goto $bb1074;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb1069:
    assume $i1350 == 1;
    goto corral_source_split_10955;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    $p1351 := $M.40;
    goto corral_source_split_10956;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    $i1352 := $load.i32($M.28, $p24);
    goto corral_source_split_10957;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} edge_break($p1351, $i1352);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_10958;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1917} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10959;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    goto $bb1071;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb1066:
    assume $i1346 == 1;
    goto corral_source_split_10946;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    $p1347 := $M.40;
    goto corral_source_split_10947;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    $i1348 := $load.i32($M.28, $p24);
    goto corral_source_split_10948;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} edge_break($p1347, $i1348);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_10949;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1915} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10950;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    goto $bb1068;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb1063:
    assume $i1342 == 1;
    goto corral_source_split_10937;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    $p1343 := $M.40;
    goto corral_source_split_10938;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    $i1344 := $load.i32($M.28, $p24);
    goto corral_source_split_10939;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} edge_break($p1343, $i1344);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_10940;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1913} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10941;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    goto $bb1065;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb859:
    assume $i1095 == 1;
    assume {:verifier.code 0} true;
    $i1102 := $slt.i32($i1093, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb874, $bb875;

  $bb875:
    assume !($i1102 == 1);
    assume {:verifier.code 0} true;
    $i1103 := $slt.i32($i1093, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb876, $bb877;

  $bb877:
    assume !($i1103 == 1);
    assume {:verifier.code 0} true;
    $i1104 := $slt.i32($i1093, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb878, $bb879;

  $bb879:
    assume !($i1104 == 1);
    goto corral_source_split_10482;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    $i1325 := $M.50;
    goto corral_source_split_10483;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    $i1326 := $eq.i32($i1325, 4);
    goto corral_source_split_10484;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1051, $bb1052;

  $bb1052:
    assume !($i1326 == 1);
    assume {:verifier.code 0} true;
    goto $bb1053;

  $bb1053:
    assume {:verifier.code 0} true;
    $i1329 := $M.50;
    goto corral_source_split_10913;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    $i1330 := $eq.i32($i1329, 1);
    goto corral_source_split_10914;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1054, $bb1055;

  $bb1055:
    assume !($i1330 == 1);
    assume {:verifier.code 0} true;
    goto $bb1056;

  $bb1056:
    assume {:verifier.code 0} true;
    $i1333 := $M.50;
    goto corral_source_split_10921;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    $i1334 := $eq.i32($i1333, 3);
    goto corral_source_split_10922;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1057, $bb1058;

  $bb1058:
    assume !($i1334 == 1);
    assume {:verifier.code 0} true;
    goto $bb1059;

  $bb1059:
    assume {:verifier.code 0} true;
    $i1337 := $M.50;
    goto corral_source_split_10929;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    $i1338 := $eq.i32($i1337, 2);
    goto corral_source_split_10930;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1060, $bb1061;

  $bb1061:
    assume !($i1338 == 1);
    assume {:verifier.code 0} true;
    goto $bb1062;

  $bb1062:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1060:
    assume $i1338 == 1;
    goto corral_source_split_10932;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    $p1339 := $M.40;
    goto corral_source_split_10933;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} vslice_dummy_var_234 := edge_write_room($p1339);
    goto corral_source_split_10934;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1911} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10935;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    goto $bb1062;

  $bb1057:
    assume $i1334 == 1;
    goto corral_source_split_10924;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    $p1335 := $M.40;
    goto corral_source_split_10925;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} vslice_dummy_var_233 := edge_write_room($p1335);
    goto corral_source_split_10926;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10927;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    goto $bb1059;

  $bb1054:
    assume $i1330 == 1;
    goto corral_source_split_10916;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    $p1331 := $M.40;
    goto corral_source_split_10917;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} vslice_dummy_var_232 := edge_write_room($p1331);
    goto corral_source_split_10918;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1907} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10919;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    goto $bb1056;

  $bb1051:
    assume $i1326 == 1;
    goto corral_source_split_10908;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    $p1327 := $M.40;
    goto corral_source_split_10909;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} vslice_dummy_var_231 := edge_write_room($p1327);
    goto corral_source_split_10910;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1905} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10911;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    goto $bb1053;

  $bb878:
    assume $i1104 == 1;
    goto corral_source_split_10478;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    $i1322 := $M.50;
    goto corral_source_split_10479;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    $i1323 := $eq.i32($i1322, 4);
    goto corral_source_split_10480;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1048, $bb1049;

  $bb1049:
    assume !($i1323 == 1);
    assume {:verifier.code 0} true;
    goto $bb1050;

  $bb1050:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1048:
    assume $i1323 == 1;
    goto corral_source_split_10903;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    $p1324 := $M.38;
    goto corral_source_split_10904;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} edge_close($p1324);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_10905;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1903} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10906;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    goto $bb1050;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb876:
    assume $i1103 == 1;
    goto corral_source_split_10474;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    $i1319 := $M.50;
    goto corral_source_split_10475;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    $i1320 := $eq.i32($i1319, 4);
    goto corral_source_split_10476;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1045, $bb1046;

  $bb1046:
    assume !($i1320 == 1);
    assume {:verifier.code 0} true;
    goto $bb1047;

  $bb1047:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1045:
    assume $i1320 == 1;
    goto corral_source_split_10898;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    $p1321 := $M.37;
    goto corral_source_split_10899;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} edge_interrupt_callback($p1321);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_10900;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1901} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10901;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    goto $bb1047;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb874:
    assume $i1102 == 1;
    assume {:verifier.code 0} true;
    $i1105 := $slt.i32($i1093, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb880, $bb881;

  $bb881:
    assume !($i1105 == 1);
    assume {:verifier.code 0} true;
    $i1106 := $slt.i32($i1093, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb882, $bb883;

  $bb883:
    assume !($i1106 == 1);
    goto corral_source_split_10494;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    $i1313 := $M.50;
    goto corral_source_split_10495;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    $i1314 := $eq.i32($i1313, 2);
    goto corral_source_split_10496;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1039, $bb1040;

  $bb1040:
    assume !($i1314 == 1);
    assume {:verifier.code 0} true;
    goto $bb1044;

  $bb1044:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1039:
    assume $i1314 == 1;
    goto corral_source_split_10888;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    $p1315 := $M.39;
    goto corral_source_split_10889;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} $i1316 := edge_startup($p1315);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_10890;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $M.59 := $i1316;
    call {:si_unique_call 1898} {:cexpr "ldv_retval_7"} boogie_si_record_i32($i1316);
    goto corral_source_split_10891;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    $i1317 := $M.59;
    goto corral_source_split_10892;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    $i1318 := $eq.i32($i1317, 0);
    goto corral_source_split_10893;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1041, $bb1042;

  $bb1042:
    assume !($i1318 == 1);
    assume {:verifier.code 0} true;
    goto $bb1043;

  $bb1043:
    assume {:verifier.code 0} true;
    goto $bb1044;

  $bb1041:
    assume $i1318 == 1;
    goto corral_source_split_10895;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1899} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10896;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    goto $bb1043;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb882:
    assume $i1106 == 1;
    goto corral_source_split_10490;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    $i1293 := $M.50;
    goto corral_source_split_10491;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    $i1294 := $eq.i32($i1293, 4);
    goto corral_source_split_10492;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1027, $bb1028;

  $bb1028:
    assume !($i1294 == 1);
    assume {:verifier.code 0} true;
    goto $bb1029;

  $bb1029:
    assume {:verifier.code 0} true;
    $i1298 := $M.50;
    goto corral_source_split_10861;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    $i1299 := $eq.i32($i1298, 1);
    goto corral_source_split_10862;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1030, $bb1031;

  $bb1031:
    assume !($i1299 == 1);
    assume {:verifier.code 0} true;
    goto $bb1032;

  $bb1032:
    assume {:verifier.code 0} true;
    $i1303 := $M.50;
    goto corral_source_split_10870;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    $i1304 := $eq.i32($i1303, 3);
    goto corral_source_split_10871;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1033, $bb1034;

  $bb1034:
    assume !($i1304 == 1);
    assume {:verifier.code 0} true;
    goto $bb1035;

  $bb1035:
    assume {:verifier.code 0} true;
    $i1308 := $M.50;
    goto corral_source_split_10879;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    $i1309 := $eq.i32($i1308, 2);
    goto corral_source_split_10880;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1036, $bb1037;

  $bb1037:
    assume !($i1309 == 1);
    assume {:verifier.code 0} true;
    goto $bb1038;

  $bb1038:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1036:
    assume $i1309 == 1;
    goto corral_source_split_10882;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    $p1310 := $M.40;
    goto corral_source_split_10883;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    $i1311 := $load.i64($M.28, $p23);
    goto corral_source_split_10884;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} vslice_dummy_var_230 := usb_serial_generic_tiocmiwait($p1310, $i1311);
    goto corral_source_split_10885;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1896} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10886;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    goto $bb1038;

  $bb1033:
    assume $i1304 == 1;
    goto corral_source_split_10873;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    $p1305 := $M.40;
    goto corral_source_split_10874;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    $i1306 := $load.i64($M.28, $p23);
    goto corral_source_split_10875;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} vslice_dummy_var_229 := usb_serial_generic_tiocmiwait($p1305, $i1306);
    goto corral_source_split_10876;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1894} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10877;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    goto $bb1035;

  $bb1030:
    assume $i1299 == 1;
    goto corral_source_split_10864;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    $p1300 := $M.40;
    goto corral_source_split_10865;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    $i1301 := $load.i64($M.28, $p23);
    goto corral_source_split_10866;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} vslice_dummy_var_228 := usb_serial_generic_tiocmiwait($p1300, $i1301);
    goto corral_source_split_10867;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10868;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    goto $bb1032;

  $bb1027:
    assume $i1294 == 1;
    goto corral_source_split_10855;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    $p1295 := $M.40;
    goto corral_source_split_10856;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    $i1296 := $load.i64($M.28, $p23);
    goto corral_source_split_10857;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} vslice_dummy_var_227 := usb_serial_generic_tiocmiwait($p1295, $i1296);
    goto corral_source_split_10858;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1890} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10859;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    goto $bb1029;

  $bb880:
    assume $i1105 == 1;
    goto corral_source_split_10486;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    $i1269 := $M.50;
    goto corral_source_split_10487;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    $i1270 := $eq.i32($i1269, 4);
    goto corral_source_split_10488;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1015, $bb1016;

  $bb1016:
    assume !($i1270 == 1);
    assume {:verifier.code 0} true;
    goto $bb1017;

  $bb1017:
    assume {:verifier.code 0} true;
    $i1275 := $M.50;
    goto corral_source_split_10825;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    $i1276 := $eq.i32($i1275, 1);
    goto corral_source_split_10826;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1018, $bb1019;

  $bb1019:
    assume !($i1276 == 1);
    assume {:verifier.code 0} true;
    goto $bb1020;

  $bb1020:
    assume {:verifier.code 0} true;
    $i1281 := $M.50;
    goto corral_source_split_10835;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    $i1282 := $eq.i32($i1281, 3);
    goto corral_source_split_10836;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1021, $bb1022;

  $bb1022:
    assume !($i1282 == 1);
    assume {:verifier.code 0} true;
    goto $bb1023;

  $bb1023:
    assume {:verifier.code 0} true;
    $i1287 := $M.50;
    goto corral_source_split_10845;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    $i1288 := $eq.i32($i1287, 2);
    goto corral_source_split_10846;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1024, $bb1025;

  $bb1025:
    assume !($i1288 == 1);
    assume {:verifier.code 0} true;
    goto $bb1026;

  $bb1026:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1024:
    assume $i1288 == 1;
    goto corral_source_split_10848;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    $p1289 := $M.40;
    goto corral_source_split_10849;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    $p1290 := $M.38;
    goto corral_source_split_10850;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    $i1291 := $load.i32($M.28, $p22);
    goto corral_source_split_10851;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} vslice_dummy_var_226 := edge_write($p1289, $p1290, $p47, $i1291);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_10852;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10853;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    goto $bb1026;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb1021:
    assume $i1282 == 1;
    goto corral_source_split_10838;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    $p1283 := $M.40;
    goto corral_source_split_10839;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    $p1284 := $M.38;
    goto corral_source_split_10840;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    $i1285 := $load.i32($M.28, $p22);
    goto corral_source_split_10841;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} vslice_dummy_var_225 := edge_write($p1283, $p1284, $p47, $i1285);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_10842;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1886} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10843;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    goto $bb1023;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb1018:
    assume $i1276 == 1;
    goto corral_source_split_10828;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    $p1277 := $M.40;
    goto corral_source_split_10829;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    $p1278 := $M.38;
    goto corral_source_split_10830;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    $i1279 := $load.i32($M.28, $p22);
    goto corral_source_split_10831;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} vslice_dummy_var_224 := edge_write($p1277, $p1278, $p47, $i1279);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_10832;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1884} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10833;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    goto $bb1020;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb1015:
    assume $i1270 == 1;
    goto corral_source_split_10818;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    $p1271 := $M.40;
    goto corral_source_split_10819;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    $p1272 := $M.38;
    goto corral_source_split_10820;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    $i1273 := $load.i32($M.28, $p22);
    goto corral_source_split_10821;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} vslice_dummy_var_223 := edge_write($p1271, $p1272, $p47, $i1273);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_10822;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1882} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10823;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    goto $bb1017;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb857:
    assume $i1094 == 1;
    assume {:verifier.code 0} true;
    $i1107 := $slt.i32($i1093, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb884, $bb885;

  $bb885:
    assume !($i1107 == 1);
    assume {:verifier.code 0} true;
    $i1108 := $slt.i32($i1093, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb886, $bb887;

  $bb887:
    assume !($i1108 == 1);
    assume {:verifier.code 0} true;
    $i1109 := $slt.i32($i1093, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb888, $bb889;

  $bb889:
    assume !($i1109 == 1);
    assume {:verifier.code 0} true;
    $i1110 := $slt.i32($i1093, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb890, $bb891;

  $bb891:
    assume !($i1110 == 1);
    goto corral_source_split_10506;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    $i1245 := $M.50;
    goto corral_source_split_10507;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    $i1246 := $eq.i32($i1245, 4);
    goto corral_source_split_10508;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1003, $bb1004;

  $bb1004:
    assume !($i1246 == 1);
    assume {:verifier.code 0} true;
    goto $bb1005;

  $bb1005:
    assume {:verifier.code 0} true;
    $i1251 := $M.50;
    goto corral_source_split_10788;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    $i1252 := $eq.i32($i1251, 1);
    goto corral_source_split_10789;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1006, $bb1007;

  $bb1007:
    assume !($i1252 == 1);
    assume {:verifier.code 0} true;
    goto $bb1008;

  $bb1008:
    assume {:verifier.code 0} true;
    $i1257 := $M.50;
    goto corral_source_split_10798;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    $i1258 := $eq.i32($i1257, 3);
    goto corral_source_split_10799;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1009, $bb1010;

  $bb1010:
    assume !($i1258 == 1);
    assume {:verifier.code 0} true;
    goto $bb1011;

  $bb1011:
    assume {:verifier.code 0} true;
    $i1263 := $M.50;
    goto corral_source_split_10808;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    $i1264 := $eq.i32($i1263, 2);
    goto corral_source_split_10809;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1012, $bb1013;

  $bb1013:
    assume !($i1264 == 1);
    assume {:verifier.code 0} true;
    goto $bb1014;

  $bb1014:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1012:
    assume $i1264 == 1;
    goto corral_source_split_10811;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    $p1265 := $M.40;
    goto corral_source_split_10812;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    $i1266 := $load.i32($M.28, $p21);
    goto corral_source_split_10813;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    $i1267 := $load.i32($M.28, $p27);
    goto corral_source_split_10814;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} vslice_dummy_var_222 := edge_tiocmset($p1265, $i1266, $i1267);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_10815;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10816;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    goto $bb1014;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb1009:
    assume $i1258 == 1;
    goto corral_source_split_10801;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    $p1259 := $M.40;
    goto corral_source_split_10802;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    $i1260 := $load.i32($M.28, $p21);
    goto corral_source_split_10803;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    $i1261 := $load.i32($M.28, $p27);
    goto corral_source_split_10804;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} vslice_dummy_var_221 := edge_tiocmset($p1259, $i1260, $i1261);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_10805;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1878} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10806;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    goto $bb1011;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb1006:
    assume $i1252 == 1;
    goto corral_source_split_10791;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    $p1253 := $M.40;
    goto corral_source_split_10792;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    $i1254 := $load.i32($M.28, $p21);
    goto corral_source_split_10793;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    $i1255 := $load.i32($M.28, $p27);
    goto corral_source_split_10794;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} vslice_dummy_var_220 := edge_tiocmset($p1253, $i1254, $i1255);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_10795;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1876} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10796;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    goto $bb1008;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb1003:
    assume $i1246 == 1;
    goto corral_source_split_10781;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    $p1247 := $M.40;
    goto corral_source_split_10782;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    $i1248 := $load.i32($M.28, $p21);
    goto corral_source_split_10783;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    $i1249 := $load.i32($M.28, $p27);
    goto corral_source_split_10784;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} vslice_dummy_var_219 := edge_tiocmset($p1247, $i1248, $i1249);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_10785;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1874} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10786;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    goto $bb1005;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb890:
    assume $i1110 == 1;
    goto corral_source_split_10502;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    $i1221 := $M.50;
    goto corral_source_split_10503;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    $i1222 := $eq.i32($i1221, 4);
    goto corral_source_split_10504;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb991, $bb992;

  $bb992:
    assume !($i1222 == 1);
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb993:
    assume {:verifier.code 0} true;
    $i1227 := $M.50;
    goto corral_source_split_10751;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    $i1228 := $eq.i32($i1227, 1);
    goto corral_source_split_10752;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb994, $bb995;

  $bb995:
    assume !($i1228 == 1);
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb996:
    assume {:verifier.code 0} true;
    $i1233 := $M.50;
    goto corral_source_split_10761;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    $i1234 := $eq.i32($i1233, 3);
    goto corral_source_split_10762;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb997, $bb998;

  $bb998:
    assume !($i1234 == 1);
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb999:
    assume {:verifier.code 0} true;
    $i1239 := $M.50;
    goto corral_source_split_10771;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    $i1240 := $eq.i32($i1239, 2);
    goto corral_source_split_10772;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1000, $bb1001;

  $bb1001:
    assume !($i1240 == 1);
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb1002:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1000:
    assume $i1240 == 1;
    goto corral_source_split_10774;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    $p1241 := $M.40;
    goto corral_source_split_10775;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    $i1242 := $load.i32($M.28, $p25);
    goto corral_source_split_10776;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    $i1243 := $load.i64($M.28, $p26);
    goto corral_source_split_10777;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} vslice_dummy_var_218 := edge_ioctl($p1241, $i1242, $i1243);
    goto corral_source_split_10778;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1872} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10779;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    goto $bb1002;

  $bb997:
    assume $i1234 == 1;
    goto corral_source_split_10764;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    $p1235 := $M.40;
    goto corral_source_split_10765;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    $i1236 := $load.i32($M.28, $p25);
    goto corral_source_split_10766;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    $i1237 := $load.i64($M.28, $p26);
    goto corral_source_split_10767;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} vslice_dummy_var_217 := edge_ioctl($p1235, $i1236, $i1237);
    goto corral_source_split_10768;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1870} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10769;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    goto $bb999;

  $bb994:
    assume $i1228 == 1;
    goto corral_source_split_10754;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    $p1229 := $M.40;
    goto corral_source_split_10755;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    $i1230 := $load.i32($M.28, $p25);
    goto corral_source_split_10756;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    $i1231 := $load.i64($M.28, $p26);
    goto corral_source_split_10757;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} vslice_dummy_var_216 := edge_ioctl($p1229, $i1230, $i1231);
    goto corral_source_split_10758;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10759;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    goto $bb996;

  $bb991:
    assume $i1222 == 1;
    goto corral_source_split_10744;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    $p1223 := $M.40;
    goto corral_source_split_10745;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    $i1224 := $load.i32($M.28, $p25);
    goto corral_source_split_10746;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    $i1225 := $load.i64($M.28, $p26);
    goto corral_source_split_10747;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} vslice_dummy_var_215 := edge_ioctl($p1223, $i1224, $i1225);
    goto corral_source_split_10748;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1866} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10749;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    goto $bb993;

  $bb888:
    assume $i1109 == 1;
    goto corral_source_split_10498;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    $i1216 := $M.50;
    goto corral_source_split_10499;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    $i1217 := $eq.i32($i1216, 2);
    goto corral_source_split_10500;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb988, $bb989;

  $bb989:
    assume !($i1217 == 1);
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb990:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb988:
    assume $i1217 == 1;
    goto corral_source_split_10736;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    $p1218 := $M.39;
    goto corral_source_split_10737;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} edge_release($p1218);
    goto corral_source_split_10738;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10739;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    $i1219 := $M.47;
    goto corral_source_split_10740;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    $i1220 := $sub.i32($i1219, 1);
    goto corral_source_split_10741;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $M.47 := $i1220;
    call {:si_unique_call 1864} {:cexpr "ref_cnt"} boogie_si_record_i32($i1220);
    goto corral_source_split_10742;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    goto $bb990;

  $bb886:
    assume $i1108 == 1;
    assume {:verifier.code 0} true;
    $i1111 := $slt.i32($i1093, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb892, $bb893;

  $bb893:
    assume !($i1111 == 1);
    assume {:verifier.code 0} true;
    $i1112 := $slt.i32($i1093, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb894, $bb895;

  $bb895:
    assume !($i1112 == 1);
    goto corral_source_split_10518;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    $i1200 := $M.50;
    goto corral_source_split_10519;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    $i1201 := $eq.i32($i1200, 4);
    goto corral_source_split_10520;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb976, $bb977;

  $bb977:
    assume !($i1201 == 1);
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb978:
    assume {:verifier.code 0} true;
    $i1204 := $M.50;
    goto corral_source_split_10712;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    $i1205 := $eq.i32($i1204, 1);
    goto corral_source_split_10713;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb979, $bb980;

  $bb980:
    assume !($i1205 == 1);
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb981:
    assume {:verifier.code 0} true;
    $i1208 := $M.50;
    goto corral_source_split_10720;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    $i1209 := $eq.i32($i1208, 3);
    goto corral_source_split_10721;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb982, $bb983;

  $bb983:
    assume !($i1209 == 1);
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb984:
    assume {:verifier.code 0} true;
    $i1212 := $M.50;
    goto corral_source_split_10728;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    $i1213 := $eq.i32($i1212, 2);
    goto corral_source_split_10729;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb985, $bb986;

  $bb986:
    assume !($i1213 == 1);
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb987:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb985:
    assume $i1213 == 1;
    goto corral_source_split_10731;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    $p1214 := $M.38;
    goto corral_source_split_10732;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} vslice_dummy_var_214 := edge_port_remove($p1214);
    goto corral_source_split_10733;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10734;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    goto $bb987;

  $bb982:
    assume $i1209 == 1;
    goto corral_source_split_10723;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    $p1210 := $M.38;
    goto corral_source_split_10724;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} vslice_dummy_var_213 := edge_port_remove($p1210);
    goto corral_source_split_10725;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10726;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    goto $bb984;

  $bb979:
    assume $i1205 == 1;
    goto corral_source_split_10715;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    $p1206 := $M.38;
    goto corral_source_split_10716;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} vslice_dummy_var_212 := edge_port_remove($p1206);
    goto corral_source_split_10717;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10718;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    goto $bb981;

  $bb976:
    assume $i1201 == 1;
    goto corral_source_split_10707;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    $p1202 := $M.38;
    goto corral_source_split_10708;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} vslice_dummy_var_211 := edge_port_remove($p1202);
    goto corral_source_split_10709;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10710;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    goto $bb978;

  $bb894:
    assume $i1112 == 1;
    goto corral_source_split_10514;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    $i1197 := $M.50;
    goto corral_source_split_10515;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    $i1198 := $eq.i32($i1197, 4);
    goto corral_source_split_10516;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb973, $bb974;

  $bb974:
    assume !($i1198 == 1);
    assume {:verifier.code 0} true;
    goto $bb975;

  $bb975:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb973:
    assume $i1198 == 1;
    goto corral_source_split_10702;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    $p1199 := $M.37;
    goto corral_source_split_10703;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} edge_bulk_out_data_callback($p1199);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_10704;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10705;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    goto $bb975;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb892:
    assume $i1111 == 1;
    goto corral_source_split_10510;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    $i1181 := $M.50;
    goto corral_source_split_10511;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    $i1182 := $eq.i32($i1181, 4);
    goto corral_source_split_10512;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb961, $bb962;

  $bb962:
    assume !($i1182 == 1);
    assume {:verifier.code 0} true;
    goto $bb963;

  $bb963:
    assume {:verifier.code 0} true;
    $i1185 := $M.50;
    goto corral_source_split_10675;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    $i1186 := $eq.i32($i1185, 1);
    goto corral_source_split_10676;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb964, $bb965;

  $bb965:
    assume !($i1186 == 1);
    assume {:verifier.code 0} true;
    goto $bb966;

  $bb966:
    assume {:verifier.code 0} true;
    $i1189 := $M.50;
    goto corral_source_split_10684;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    $i1190 := $eq.i32($i1189, 3);
    goto corral_source_split_10685;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb967, $bb968;

  $bb968:
    assume !($i1190 == 1);
    assume {:verifier.code 0} true;
    goto $bb969;

  $bb969:
    assume {:verifier.code 0} true;
    $i1193 := $M.50;
    goto corral_source_split_10693;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    $i1194 := $eq.i32($i1193, 2);
    goto corral_source_split_10694;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb970, $bb971;

  $bb971:
    assume !($i1194 == 1);
    assume {:verifier.code 0} true;
    goto $bb972;

  $bb972:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb970:
    assume $i1194 == 1;
    goto corral_source_split_10696;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    $p1195 := $M.40;
    goto corral_source_split_10697;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    $p1196 := $M.38;
    goto corral_source_split_10698;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} edge_set_termios($p1195, $p1196, $p46);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_10699;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10700;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb972;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb967:
    assume $i1190 == 1;
    goto corral_source_split_10687;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    $p1191 := $M.40;
    goto corral_source_split_10688;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    $p1192 := $M.38;
    goto corral_source_split_10689;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} edge_set_termios($p1191, $p1192, $p46);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_10690;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10691;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    goto $bb969;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb964:
    assume $i1186 == 1;
    goto corral_source_split_10678;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    $p1187 := $M.40;
    goto corral_source_split_10679;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    $p1188 := $M.38;
    goto corral_source_split_10680;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} edge_set_termios($p1187, $p1188, $p46);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_10681;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10682;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    goto $bb966;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb961:
    assume $i1182 == 1;
    goto corral_source_split_10669;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    $p1183 := $M.40;
    goto corral_source_split_10670;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    $p1184 := $M.38;
    goto corral_source_split_10671;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} edge_set_termios($p1183, $p1184, $p46);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_10672;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10673;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    goto $bb963;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb884:
    assume $i1107 == 1;
    assume {:verifier.code 0} true;
    $i1113 := $slt.i32($i1093, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb896, $bb897;

  $bb897:
    assume !($i1113 == 1);
    assume {:verifier.code 0} true;
    $i1114 := $slt.i32($i1093, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb898, $bb899;

  $bb899:
    assume !($i1114 == 1);
    assume {:verifier.code 0} true;
    $i1115 := $slt.i32($i1093, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb900, $bb901;

  $bb901:
    assume !($i1115 == 1);
    goto corral_source_split_10530;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    $i1169 := $M.50;
    goto corral_source_split_10531;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    $i1170 := $eq.i32($i1169, 4);
    goto corral_source_split_10532;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb949, $bb950;

  $bb950:
    assume !($i1170 == 1);
    assume {:verifier.code 0} true;
    goto $bb951;

  $bb951:
    assume {:verifier.code 0} true;
    $i1172 := $M.50;
    goto corral_source_split_10645;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    $i1173 := $eq.i32($i1172, 1);
    goto corral_source_split_10646;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb952, $bb953;

  $bb953:
    assume !($i1173 == 1);
    assume {:verifier.code 0} true;
    goto $bb954;

  $bb954:
    assume {:verifier.code 0} true;
    $i1175 := $M.50;
    goto corral_source_split_10653;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    $i1176 := $eq.i32($i1175, 3);
    goto corral_source_split_10654;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb955, $bb956;

  $bb956:
    assume !($i1176 == 1);
    assume {:verifier.code 0} true;
    goto $bb957;

  $bb957:
    assume {:verifier.code 0} true;
    $i1178 := $M.50;
    goto corral_source_split_10661;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    $i1179 := $eq.i32($i1178, 2);
    goto corral_source_split_10662;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb958, $bb959;

  $bb959:
    assume !($i1179 == 1);
    assume {:verifier.code 0} true;
    goto $bb960;

  $bb960:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb958:
    assume $i1179 == 1;
    goto corral_source_split_10664;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    $p1180 := $M.40;
    goto corral_source_split_10665;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} edge_unthrottle($p1180);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_10666;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10667;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    goto $bb960;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb955:
    assume $i1176 == 1;
    goto corral_source_split_10656;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    $p1177 := $M.40;
    goto corral_source_split_10657;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} edge_unthrottle($p1177);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_10658;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1841} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10659;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    goto $bb957;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb952:
    assume $i1173 == 1;
    goto corral_source_split_10648;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    $p1174 := $M.40;
    goto corral_source_split_10649;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} edge_unthrottle($p1174);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_10650;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10651;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    goto $bb954;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb949:
    assume $i1170 == 1;
    goto corral_source_split_10640;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    $p1171 := $M.40;
    goto corral_source_split_10641;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} edge_unthrottle($p1171);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_10642;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1837} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10643;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    goto $bb951;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb900:
    assume $i1115 == 1;
    goto corral_source_split_10526;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    $i1162 := $M.50;
    goto corral_source_split_10527;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    $i1163 := $eq.i32($i1162, 3);
    goto corral_source_split_10528;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb943, $bb944;

  $bb944:
    assume !($i1163 == 1);
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb948:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb943:
    assume $i1163 == 1;
    goto corral_source_split_10629;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    $p1164 := $M.40;
    goto corral_source_split_10630;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    $p1165 := $M.38;
    goto corral_source_split_10631;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} $i1166 := edge_open($p1164, $p1165);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_10632;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $M.58 := $i1166;
    call {:si_unique_call 1834} {:cexpr "ldv_retval_8"} boogie_si_record_i32($i1166);
    goto corral_source_split_10633;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    $i1167 := $M.58;
    goto corral_source_split_10634;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    $i1168 := $eq.i32($i1167, 0);
    goto corral_source_split_10635;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb945, $bb946;

  $bb946:
    assume !($i1168 == 1);
    assume {:verifier.code 0} true;
    goto $bb947;

  $bb947:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb945:
    assume $i1168 == 1;
    goto corral_source_split_10637;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10638;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    goto $bb947;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb898:
    assume $i1114 == 1;
    goto corral_source_split_10522;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    $i1146 := $M.50;
    goto corral_source_split_10523;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    $i1147 := $eq.i32($i1146, 4);
    goto corral_source_split_10524;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb931, $bb932;

  $bb932:
    assume !($i1147 == 1);
    assume {:verifier.code 0} true;
    goto $bb933;

  $bb933:
    assume {:verifier.code 0} true;
    $i1150 := $M.50;
    goto corral_source_split_10605;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    $i1151 := $eq.i32($i1150, 1);
    goto corral_source_split_10606;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb934, $bb935;

  $bb935:
    assume !($i1151 == 1);
    assume {:verifier.code 0} true;
    goto $bb936;

  $bb936:
    assume {:verifier.code 0} true;
    $i1154 := $M.50;
    goto corral_source_split_10613;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    $i1155 := $eq.i32($i1154, 3);
    goto corral_source_split_10614;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb937, $bb938;

  $bb938:
    assume !($i1155 == 1);
    assume {:verifier.code 0} true;
    goto $bb939;

  $bb939:
    assume {:verifier.code 0} true;
    $i1158 := $M.50;
    goto corral_source_split_10621;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    $i1159 := $eq.i32($i1158, 2);
    goto corral_source_split_10622;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb940, $bb941;

  $bb941:
    assume !($i1159 == 1);
    assume {:verifier.code 0} true;
    goto $bb942;

  $bb942:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb940:
    assume $i1159 == 1;
    goto corral_source_split_10624;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    $p1160 := $M.38;
    goto corral_source_split_10625;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} vslice_dummy_var_210 := edge_port_probe($p1160);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_10626;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10627;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    goto $bb942;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb937:
    assume $i1155 == 1;
    goto corral_source_split_10616;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    $p1156 := $M.38;
    goto corral_source_split_10617;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} vslice_dummy_var_209 := edge_port_probe($p1156);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_10618;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10619;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    goto $bb939;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb934:
    assume $i1151 == 1;
    goto corral_source_split_10608;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    $p1152 := $M.38;
    goto corral_source_split_10609;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} vslice_dummy_var_208 := edge_port_probe($p1152);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_10610;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10611;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    goto $bb936;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb931:
    assume $i1147 == 1;
    goto corral_source_split_10600;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    $p1148 := $M.38;
    goto corral_source_split_10601;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} vslice_dummy_var_207 := edge_port_probe($p1148);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_10602;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10603;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    goto $bb933;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb896:
    assume $i1113 == 1;
    assume {:verifier.code 0} true;
    $i1116 := $slt.i32($i1093, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb902, $bb903;

  $bb903:
    assume !($i1116 == 1);
    goto corral_source_split_10534;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    $i1130 := $M.50;
    goto corral_source_split_10535;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    $i1131 := $eq.i32($i1130, 4);
    goto corral_source_split_10536;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb919, $bb920;

  $bb920:
    assume !($i1131 == 1);
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb921:
    assume {:verifier.code 0} true;
    $i1134 := $M.50;
    goto corral_source_split_10576;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    $i1135 := $eq.i32($i1134, 1);
    goto corral_source_split_10577;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb922, $bb923;

  $bb923:
    assume !($i1135 == 1);
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb924:
    assume {:verifier.code 0} true;
    $i1138 := $M.50;
    goto corral_source_split_10584;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    $i1139 := $eq.i32($i1138, 3);
    goto corral_source_split_10585;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb925, $bb926;

  $bb926:
    assume !($i1139 == 1);
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb927:
    assume {:verifier.code 0} true;
    $i1142 := $M.50;
    goto corral_source_split_10592;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    $i1143 := $eq.i32($i1142, 2);
    goto corral_source_split_10593;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb928, $bb929;

  $bb929:
    assume !($i1143 == 1);
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb930:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb928:
    assume $i1143 == 1;
    goto corral_source_split_10595;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    $p1144 := $M.40;
    goto corral_source_split_10596;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} vslice_dummy_var_206 := usb_serial_generic_get_icount($p1144, $p44);
    goto corral_source_split_10597;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1824} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10598;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    goto $bb930;

  $bb925:
    assume $i1139 == 1;
    goto corral_source_split_10587;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    $p1140 := $M.40;
    goto corral_source_split_10588;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} vslice_dummy_var_205 := usb_serial_generic_get_icount($p1140, $p44);
    goto corral_source_split_10589;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10590;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    goto $bb927;

  $bb922:
    assume $i1135 == 1;
    goto corral_source_split_10579;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    $p1136 := $M.40;
    goto corral_source_split_10580;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} vslice_dummy_var_204 := usb_serial_generic_get_icount($p1136, $p44);
    goto corral_source_split_10581;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10582;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    goto $bb924;

  $bb919:
    assume $i1131 == 1;
    goto corral_source_split_10571;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    $p1132 := $M.40;
    goto corral_source_split_10572;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} vslice_dummy_var_203 := usb_serial_generic_get_icount($p1132, $p44);
    goto corral_source_split_10573;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10574;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb921;

  $bb902:
    assume $i1116 == 1;
    assume {:verifier.code 0} true;
    $i1117 := $eq.i32($i1093, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb904, $bb905;

  $bb905:
    assume {:verifier.code 0} true;
    assume !($i1117 == 1);
    goto $bb869;

  $bb904:
    assume $i1117 == 1;
    goto corral_source_split_10538;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    $i1118 := $M.50;
    goto corral_source_split_10539;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    $i1119 := $eq.i32($i1118, 4);
    goto corral_source_split_10540;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb906, $bb907;

  $bb907:
    assume !($i1119 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  $bb908:
    assume {:verifier.code 0} true;
    $i1121 := $M.50;
    goto corral_source_split_10547;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    $i1122 := $eq.i32($i1121, 1);
    goto corral_source_split_10548;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb909, $bb910;

  $bb910:
    assume !($i1122 == 1);
    assume {:verifier.code 0} true;
    goto $bb911;

  $bb911:
    assume {:verifier.code 0} true;
    $i1124 := $M.50;
    goto corral_source_split_10555;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    $i1125 := $eq.i32($i1124, 3);
    goto corral_source_split_10556;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb912, $bb913;

  $bb913:
    assume !($i1125 == 1);
    assume {:verifier.code 0} true;
    goto $bb914;

  $bb914:
    assume {:verifier.code 0} true;
    $i1127 := $M.50;
    goto corral_source_split_10563;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    $i1128 := $eq.i32($i1127, 2);
    goto corral_source_split_10564;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb915, $bb916;

  $bb916:
    assume !($i1128 == 1);
    assume {:verifier.code 0} true;
    goto $bb917;

  $bb917:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb915:
    assume $i1128 == 1;
    goto corral_source_split_10566;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    $p1129 := $M.40;
    goto corral_source_split_10567;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} edge_throttle($p1129);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_10568;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10569;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    goto $bb917;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb912:
    assume $i1125 == 1;
    goto corral_source_split_10558;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    $p1126 := $M.40;
    goto corral_source_split_10559;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} edge_throttle($p1126);
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_10560;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10561;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    goto $bb914;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb909:
    assume $i1122 == 1;
    goto corral_source_split_10550;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    $p1123 := $M.40;
    goto corral_source_split_10551;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} edge_throttle($p1123);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_10552;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10553;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    goto $bb911;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb906:
    assume $i1119 == 1;
    goto corral_source_split_10542;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    $p1120 := $M.40;
    goto corral_source_split_10543;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} edge_throttle($p1120);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_10544;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10545;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    goto $bb908;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i107 == 1;
    goto corral_source_split_8494;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    $i770 := $M.49;
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $i771 := $ne.i32($i770, 0);
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb585, $bb586;

  $bb586:
    assume !($i771 == 1);
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb853:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb585:
    assume $i771 == 1;
    goto corral_source_split_9817;

  corral_source_split_9817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1660} $i772 := __VERIFIER_nondet_int();
    call {:si_unique_call 1661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i772);
    call {:si_unique_call 1662} {:cexpr "tmp___15"} boogie_si_record_i32($i772);
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb587:
    assume {:verifier.code 0} true;
    $i773 := $slt.i32($i772, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  $bb589:
    assume !($i773 == 1);
    assume {:verifier.code 0} true;
    $i774 := $slt.i32($i772, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb590, $bb591;

  $bb591:
    assume !($i774 == 1);
    assume {:verifier.code 0} true;
    $i775 := $slt.i32($i772, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  $bb593:
    assume !($i775 == 1);
    assume {:verifier.code 0} true;
    $i776 := $slt.i32($i772, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  $bb595:
    assume !($i776 == 1);
    assume {:verifier.code 0} true;
    $i777 := $slt.i32($i772, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb596, $bb597;

  $bb597:
    assume !($i777 == 1);
    assume {:verifier.code 0} true;
    $i778 := $eq.i32($i772, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb598, $bb599;

  $bb599:
    assume {:verifier.code 0} true;
    assume !($i778 == 1);
    goto $bb600;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} ldv_stop();
    goto corral_source_split_10446;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb852:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb649:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb598:
    assume $i778 == 1;
    goto corral_source_split_9827;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    $i1086 := $M.49;
    goto corral_source_split_9828;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    $i1087 := $eq.i32($i1086, 1);
    goto corral_source_split_9829;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb848, $bb849;

  $bb849:
    assume !($i1087 == 1);
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb850:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb848:
    assume $i1087 == 1;
    goto corral_source_split_10439;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} vslice_dummy_var_202 := ldv_probe_3();
    goto corral_source_split_10440;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10441;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    $i1089 := $M.47;
    goto corral_source_split_10442;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    $i1090 := $add.i32($i1089, 1);
    goto corral_source_split_10443;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $M.47 := $i1090;
    call {:si_unique_call 1804} {:cexpr "ref_cnt"} boogie_si_record_i32($i1090);
    goto corral_source_split_10444;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    goto $bb850;

  $bb596:
    assume $i777 == 1;
    goto corral_source_split_9823;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    $i1074 := $M.49;
    goto corral_source_split_9824;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    $i1075 := $eq.i32($i1074, 4);
    goto corral_source_split_9825;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb836, $bb837;

  $bb837:
    assume !($i1075 == 1);
    assume {:verifier.code 0} true;
    goto $bb838;

  $bb838:
    assume {:verifier.code 0} true;
    $i1077 := $M.49;
    goto corral_source_split_10415;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    $i1078 := $eq.i32($i1077, 1);
    goto corral_source_split_10416;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb839, $bb840;

  $bb840:
    assume !($i1078 == 1);
    assume {:verifier.code 0} true;
    goto $bb841;

  $bb841:
    assume {:verifier.code 0} true;
    $i1080 := $M.49;
    goto corral_source_split_10423;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    $i1081 := $eq.i32($i1080, 3);
    goto corral_source_split_10424;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb842, $bb843;

  $bb843:
    assume !($i1081 == 1);
    assume {:verifier.code 0} true;
    goto $bb844;

  $bb844:
    assume {:verifier.code 0} true;
    $i1083 := $M.49;
    goto corral_source_split_10431;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    $i1084 := $eq.i32($i1083, 2);
    goto corral_source_split_10432;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb845, $bb846;

  $bb846:
    assume !($i1084 == 1);
    assume {:verifier.code 0} true;
    goto $bb847;

  $bb847:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb845:
    assume $i1084 == 1;
    goto corral_source_split_10434;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    $p1085 := $M.41;
    goto corral_source_split_10435;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} edge_bulk_in_callback($p1085);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_10436;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10437;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    goto $bb847;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb842:
    assume $i1081 == 1;
    goto corral_source_split_10426;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    $p1082 := $M.41;
    goto corral_source_split_10427;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} edge_bulk_in_callback($p1082);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_10428;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10429;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    goto $bb844;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb839:
    assume $i1078 == 1;
    goto corral_source_split_10418;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    $p1079 := $M.41;
    goto corral_source_split_10419;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} edge_bulk_in_callback($p1079);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_10420;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10421;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    goto $bb841;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb836:
    assume $i1075 == 1;
    goto corral_source_split_10410;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    $p1076 := $M.41;
    goto corral_source_split_10411;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} edge_bulk_in_callback($p1076);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_10412;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10413;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    goto $bb838;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb594:
    assume $i776 == 1;
    goto corral_source_split_9819;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    $i1058 := $M.49;
    goto corral_source_split_9820;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    $i1059 := $eq.i32($i1058, 4);
    goto corral_source_split_9821;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb824, $bb825;

  $bb825:
    assume !($i1059 == 1);
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb826:
    assume {:verifier.code 0} true;
    $i1062 := $M.49;
    goto corral_source_split_10386;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    $i1063 := $eq.i32($i1062, 1);
    goto corral_source_split_10387;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb827, $bb828;

  $bb828:
    assume !($i1063 == 1);
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb829:
    assume {:verifier.code 0} true;
    $i1066 := $M.49;
    goto corral_source_split_10394;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    $i1067 := $eq.i32($i1066, 3);
    goto corral_source_split_10395;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb830, $bb831;

  $bb831:
    assume !($i1067 == 1);
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb832:
    assume {:verifier.code 0} true;
    $i1070 := $M.49;
    goto corral_source_split_10402;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    $i1071 := $eq.i32($i1070, 2);
    goto corral_source_split_10403;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb833, $bb834;

  $bb834:
    assume !($i1071 == 1);
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb835:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb833:
    assume $i1071 == 1;
    goto corral_source_split_10405;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    $p1072 := $M.44;
    goto corral_source_split_10406;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} vslice_dummy_var_201 := edge_tiocmget($p1072);
    goto corral_source_split_10407;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10408;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    goto $bb835;

  $bb830:
    assume $i1067 == 1;
    goto corral_source_split_10397;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    $p1068 := $M.44;
    goto corral_source_split_10398;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} vslice_dummy_var_200 := edge_tiocmget($p1068);
    goto corral_source_split_10399;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10400;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    goto $bb832;

  $bb827:
    assume $i1063 == 1;
    goto corral_source_split_10389;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    $p1064 := $M.44;
    goto corral_source_split_10390;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} vslice_dummy_var_199 := edge_tiocmget($p1064);
    goto corral_source_split_10391;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10392;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    goto $bb829;

  $bb824:
    assume $i1059 == 1;
    goto corral_source_split_10381;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    $p1060 := $M.44;
    goto corral_source_split_10382;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} vslice_dummy_var_198 := edge_tiocmget($p1060);
    goto corral_source_split_10383;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10384;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    goto $bb826;

  $bb592:
    assume $i775 == 1;
    assume {:verifier.code 0} true;
    $i779 := $slt.i32($i772, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb601, $bb602;

  $bb602:
    assume !($i779 == 1);
    assume {:verifier.code 0} true;
    $i780 := $slt.i32($i772, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  $bb604:
    assume !($i780 == 1);
    goto corral_source_split_9839;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    $i1042 := $M.49;
    goto corral_source_split_9840;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    $i1043 := $eq.i32($i1042, 4);
    goto corral_source_split_9841;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb812, $bb813;

  $bb813:
    assume !($i1043 == 1);
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb814:
    assume {:verifier.code 0} true;
    $i1046 := $M.49;
    goto corral_source_split_10357;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    $i1047 := $eq.i32($i1046, 1);
    goto corral_source_split_10358;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb815, $bb816;

  $bb816:
    assume !($i1047 == 1);
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb817:
    assume {:verifier.code 0} true;
    $i1050 := $M.49;
    goto corral_source_split_10365;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    $i1051 := $eq.i32($i1050, 3);
    goto corral_source_split_10366;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb818, $bb819;

  $bb819:
    assume !($i1051 == 1);
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb820:
    assume {:verifier.code 0} true;
    $i1054 := $M.49;
    goto corral_source_split_10373;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    $i1055 := $eq.i32($i1054, 2);
    goto corral_source_split_10374;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb821, $bb822;

  $bb822:
    assume !($i1055 == 1);
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb823:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb821:
    assume $i1055 == 1;
    goto corral_source_split_10376;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    $p1056 := $M.44;
    goto corral_source_split_10377;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} vslice_dummy_var_197 := edge_chars_in_buffer($p1056);
    goto corral_source_split_10378;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10379;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    goto $bb823;

  $bb818:
    assume $i1051 == 1;
    goto corral_source_split_10368;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    $p1052 := $M.44;
    goto corral_source_split_10369;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} vslice_dummy_var_196 := edge_chars_in_buffer($p1052);
    goto corral_source_split_10370;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10371;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    goto $bb820;

  $bb815:
    assume $i1047 == 1;
    goto corral_source_split_10360;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    $p1048 := $M.44;
    goto corral_source_split_10361;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} vslice_dummy_var_195 := edge_chars_in_buffer($p1048);
    goto corral_source_split_10362;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10363;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    goto $bb817;

  $bb812:
    assume $i1043 == 1;
    goto corral_source_split_10352;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    $p1044 := $M.44;
    goto corral_source_split_10353;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} vslice_dummy_var_194 := edge_chars_in_buffer($p1044);
    goto corral_source_split_10354;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10355;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    goto $bb814;

  $bb603:
    assume $i780 == 1;
    goto corral_source_split_9835;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    $i1036 := $M.49;
    goto corral_source_split_9836;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    $i1037 := $eq.i32($i1036, 4);
    goto corral_source_split_9837;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb806, $bb807;

  $bb807:
    assume !($i1037 == 1);
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb808:
    assume {:verifier.code 0} true;
    $i1039 := $M.49;
    goto corral_source_split_10344;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    $i1040 := $eq.i32($i1039, 3);
    goto corral_source_split_10345;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb809, $bb810;

  $bb810:
    assume !($i1040 == 1);
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb811:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb809:
    assume $i1040 == 1;
    goto corral_source_split_10347;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    $p1041 := $M.43;
    goto corral_source_split_10348;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} edge_disconnect($p1041);
    goto corral_source_split_10349;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10350;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    goto $bb811;

  $bb806:
    assume $i1037 == 1;
    goto corral_source_split_10339;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    $p1038 := $M.43;
    goto corral_source_split_10340;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} edge_disconnect($p1038);
    goto corral_source_split_10341;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10342;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    goto $bb808;

  $bb601:
    assume $i779 == 1;
    goto corral_source_split_9831;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    $i1020 := $M.49;
    goto corral_source_split_9832;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    $i1021 := $eq.i32($i1020, 4);
    goto corral_source_split_9833;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb794, $bb795;

  $bb795:
    assume !($i1021 == 1);
    assume {:verifier.code 0} true;
    goto $bb796;

  $bb796:
    assume {:verifier.code 0} true;
    $i1024 := $M.49;
    goto corral_source_split_10312;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    $i1025 := $eq.i32($i1024, 1);
    goto corral_source_split_10313;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb797, $bb798;

  $bb798:
    assume !($i1025 == 1);
    assume {:verifier.code 0} true;
    goto $bb799;

  $bb799:
    assume {:verifier.code 0} true;
    $i1028 := $M.49;
    goto corral_source_split_10321;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    $i1029 := $eq.i32($i1028, 3);
    goto corral_source_split_10322;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb800, $bb801;

  $bb801:
    assume !($i1029 == 1);
    assume {:verifier.code 0} true;
    goto $bb802;

  $bb802:
    assume {:verifier.code 0} true;
    $i1032 := $M.49;
    goto corral_source_split_10330;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    $i1033 := $eq.i32($i1032, 2);
    goto corral_source_split_10331;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb803, $bb804;

  $bb804:
    assume !($i1033 == 1);
    assume {:verifier.code 0} true;
    goto $bb805;

  $bb805:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb803:
    assume $i1033 == 1;
    goto corral_source_split_10333;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    $p1034 := $M.44;
    goto corral_source_split_10334;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    $i1035 := $load.i32($M.28, $p17);
    goto corral_source_split_10335;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} edge_break($p1034, $i1035);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_10336;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10337;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    goto $bb805;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb800:
    assume $i1029 == 1;
    goto corral_source_split_10324;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    $p1030 := $M.44;
    goto corral_source_split_10325;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    $i1031 := $load.i32($M.28, $p17);
    goto corral_source_split_10326;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} edge_break($p1030, $i1031);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_10327;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10328;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    goto $bb802;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb797:
    assume $i1025 == 1;
    goto corral_source_split_10315;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    $p1026 := $M.44;
    goto corral_source_split_10316;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    $i1027 := $load.i32($M.28, $p17);
    goto corral_source_split_10317;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} edge_break($p1026, $i1027);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_10318;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10319;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    goto $bb799;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb794:
    assume $i1021 == 1;
    goto corral_source_split_10306;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    $p1022 := $M.44;
    goto corral_source_split_10307;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    $i1023 := $load.i32($M.28, $p17);
    goto corral_source_split_10308;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} edge_break($p1022, $i1023);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_10309;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10310;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    goto $bb796;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb590:
    assume $i774 == 1;
    assume {:verifier.code 0} true;
    $i781 := $slt.i32($i772, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb605, $bb606;

  $bb606:
    assume !($i781 == 1);
    assume {:verifier.code 0} true;
    $i782 := $slt.i32($i772, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb607, $bb608;

  $bb608:
    assume !($i782 == 1);
    assume {:verifier.code 0} true;
    $i783 := $slt.i32($i772, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb609, $bb610;

  $bb610:
    assume !($i783 == 1);
    goto corral_source_split_9851;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    $i1004 := $M.49;
    goto corral_source_split_9852;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    $i1005 := $eq.i32($i1004, 4);
    goto corral_source_split_9853;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb782, $bb783;

  $bb783:
    assume !($i1005 == 1);
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb784:
    assume {:verifier.code 0} true;
    $i1008 := $M.49;
    goto corral_source_split_10282;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    $i1009 := $eq.i32($i1008, 1);
    goto corral_source_split_10283;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb785, $bb786;

  $bb786:
    assume !($i1009 == 1);
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb787:
    assume {:verifier.code 0} true;
    $i1012 := $M.49;
    goto corral_source_split_10290;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    $i1013 := $eq.i32($i1012, 3);
    goto corral_source_split_10291;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb788, $bb789;

  $bb789:
    assume !($i1013 == 1);
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb790:
    assume {:verifier.code 0} true;
    $i1016 := $M.49;
    goto corral_source_split_10298;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    $i1017 := $eq.i32($i1016, 2);
    goto corral_source_split_10299;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb791, $bb792;

  $bb792:
    assume !($i1017 == 1);
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb793:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb791:
    assume $i1017 == 1;
    goto corral_source_split_10301;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    $p1018 := $M.44;
    goto corral_source_split_10302;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} vslice_dummy_var_193 := edge_write_room($p1018);
    goto corral_source_split_10303;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10304;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    goto $bb793;

  $bb788:
    assume $i1013 == 1;
    goto corral_source_split_10293;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    $p1014 := $M.44;
    goto corral_source_split_10294;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} vslice_dummy_var_192 := edge_write_room($p1014);
    goto corral_source_split_10295;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10296;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    goto $bb790;

  $bb785:
    assume $i1009 == 1;
    goto corral_source_split_10285;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    $p1010 := $M.44;
    goto corral_source_split_10286;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} vslice_dummy_var_191 := edge_write_room($p1010);
    goto corral_source_split_10287;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10288;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    goto $bb787;

  $bb782:
    assume $i1005 == 1;
    goto corral_source_split_10277;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    $p1006 := $M.44;
    goto corral_source_split_10278;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} vslice_dummy_var_190 := edge_write_room($p1006);
    goto corral_source_split_10279;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10280;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    goto $bb784;

  $bb609:
    assume $i783 == 1;
    goto corral_source_split_9847;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    $i1001 := $M.49;
    goto corral_source_split_9848;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    $i1002 := $eq.i32($i1001, 4);
    goto corral_source_split_9849;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb779, $bb780;

  $bb780:
    assume !($i1002 == 1);
    assume {:verifier.code 0} true;
    goto $bb781;

  $bb781:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb779:
    assume $i1002 == 1;
    goto corral_source_split_10272;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    $p1003 := $M.42;
    goto corral_source_split_10273;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} edge_close($p1003);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_10274;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10275;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    goto $bb781;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb607:
    assume $i782 == 1;
    goto corral_source_split_9843;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    $i998 := $M.49;
    goto corral_source_split_9844;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    $i999 := $eq.i32($i998, 4);
    goto corral_source_split_9845;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb776, $bb777;

  $bb777:
    assume !($i999 == 1);
    assume {:verifier.code 0} true;
    goto $bb778;

  $bb778:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb776:
    assume $i999 == 1;
    goto corral_source_split_10267;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    $p1000 := $M.41;
    goto corral_source_split_10268;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} edge_interrupt_callback($p1000);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_10269;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10270;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    goto $bb778;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb605:
    assume $i781 == 1;
    assume {:verifier.code 0} true;
    $i784 := $slt.i32($i772, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb611, $bb612;

  $bb612:
    assume !($i784 == 1);
    assume {:verifier.code 0} true;
    $i785 := $slt.i32($i772, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb613, $bb614;

  $bb614:
    assume !($i785 == 1);
    goto corral_source_split_9863;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    $i992 := $M.49;
    goto corral_source_split_9864;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    $i993 := $eq.i32($i992, 2);
    goto corral_source_split_9865;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb770, $bb771;

  $bb771:
    assume !($i993 == 1);
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb775:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb770:
    assume $i993 == 1;
    goto corral_source_split_10257;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    $p994 := $M.43;
    goto corral_source_split_10258;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} $i995 := edge_startup($p994);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_10259;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $M.57 := $i995;
    call {:si_unique_call 1752} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i995);
    goto corral_source_split_10260;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    $i996 := $M.57;
    goto corral_source_split_10261;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    $i997 := $eq.i32($i996, 0);
    goto corral_source_split_10262;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb772, $bb773;

  $bb773:
    assume !($i997 == 1);
    assume {:verifier.code 0} true;
    goto $bb774;

  $bb774:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb772:
    assume $i997 == 1;
    goto corral_source_split_10264;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10265;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    goto $bb774;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb613:
    assume $i785 == 1;
    goto corral_source_split_9859;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    $i972 := $M.49;
    goto corral_source_split_9860;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    $i973 := $eq.i32($i972, 4);
    goto corral_source_split_9861;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb758, $bb759;

  $bb759:
    assume !($i973 == 1);
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb760:
    assume {:verifier.code 0} true;
    $i977 := $M.49;
    goto corral_source_split_10230;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    $i978 := $eq.i32($i977, 1);
    goto corral_source_split_10231;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb761, $bb762;

  $bb762:
    assume !($i978 == 1);
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb763:
    assume {:verifier.code 0} true;
    $i982 := $M.49;
    goto corral_source_split_10239;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    $i983 := $eq.i32($i982, 3);
    goto corral_source_split_10240;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb764, $bb765;

  $bb765:
    assume !($i983 == 1);
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb766:
    assume {:verifier.code 0} true;
    $i987 := $M.49;
    goto corral_source_split_10248;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    $i988 := $eq.i32($i987, 2);
    goto corral_source_split_10249;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb767, $bb768;

  $bb768:
    assume !($i988 == 1);
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb769:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb767:
    assume $i988 == 1;
    goto corral_source_split_10251;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    $p989 := $M.44;
    goto corral_source_split_10252;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    $i990 := $load.i64($M.28, $p18);
    goto corral_source_split_10253;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} vslice_dummy_var_189 := usb_serial_generic_tiocmiwait($p989, $i990);
    goto corral_source_split_10254;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10255;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    goto $bb769;

  $bb764:
    assume $i983 == 1;
    goto corral_source_split_10242;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    $p984 := $M.44;
    goto corral_source_split_10243;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    $i985 := $load.i64($M.28, $p18);
    goto corral_source_split_10244;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} vslice_dummy_var_188 := usb_serial_generic_tiocmiwait($p984, $i985);
    goto corral_source_split_10245;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10246;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    goto $bb766;

  $bb761:
    assume $i978 == 1;
    goto corral_source_split_10233;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    $p979 := $M.44;
    goto corral_source_split_10234;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    $i980 := $load.i64($M.28, $p18);
    goto corral_source_split_10235;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} vslice_dummy_var_187 := usb_serial_generic_tiocmiwait($p979, $i980);
    goto corral_source_split_10236;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10237;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    goto $bb763;

  $bb758:
    assume $i973 == 1;
    goto corral_source_split_10224;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    $p974 := $M.44;
    goto corral_source_split_10225;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    $i975 := $load.i64($M.28, $p18);
    goto corral_source_split_10226;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} vslice_dummy_var_186 := usb_serial_generic_tiocmiwait($p974, $i975);
    goto corral_source_split_10227;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10228;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    goto $bb760;

  $bb611:
    assume $i784 == 1;
    goto corral_source_split_9855;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    $i948 := $M.49;
    goto corral_source_split_9856;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    $i949 := $eq.i32($i948, 4);
    goto corral_source_split_9857;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb746, $bb747;

  $bb747:
    assume !($i949 == 1);
    assume {:verifier.code 0} true;
    goto $bb748;

  $bb748:
    assume {:verifier.code 0} true;
    $i954 := $M.49;
    goto corral_source_split_10194;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    $i955 := $eq.i32($i954, 1);
    goto corral_source_split_10195;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb749, $bb750;

  $bb750:
    assume !($i955 == 1);
    assume {:verifier.code 0} true;
    goto $bb751;

  $bb751:
    assume {:verifier.code 0} true;
    $i960 := $M.49;
    goto corral_source_split_10204;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    $i961 := $eq.i32($i960, 3);
    goto corral_source_split_10205;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb752, $bb753;

  $bb753:
    assume !($i961 == 1);
    assume {:verifier.code 0} true;
    goto $bb754;

  $bb754:
    assume {:verifier.code 0} true;
    $i966 := $M.49;
    goto corral_source_split_10214;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    $i967 := $eq.i32($i966, 2);
    goto corral_source_split_10215;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb755, $bb756;

  $bb756:
    assume !($i967 == 1);
    assume {:verifier.code 0} true;
    goto $bb757;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb755:
    assume $i967 == 1;
    goto corral_source_split_10217;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    $p968 := $M.44;
    goto corral_source_split_10218;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    $p969 := $M.42;
    goto corral_source_split_10219;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    $i970 := $load.i32($M.28, $p20);
    goto corral_source_split_10220;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} vslice_dummy_var_185 := edge_write($p968, $p969, $p38, $i970);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_10221;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10222;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    goto $bb757;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb752:
    assume $i961 == 1;
    goto corral_source_split_10207;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    $p962 := $M.44;
    goto corral_source_split_10208;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    $p963 := $M.42;
    goto corral_source_split_10209;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    $i964 := $load.i32($M.28, $p20);
    goto corral_source_split_10210;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} vslice_dummy_var_184 := edge_write($p962, $p963, $p38, $i964);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_10211;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10212;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    goto $bb754;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb749:
    assume $i955 == 1;
    goto corral_source_split_10197;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    $p956 := $M.44;
    goto corral_source_split_10198;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    $p957 := $M.42;
    goto corral_source_split_10199;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    $i958 := $load.i32($M.28, $p20);
    goto corral_source_split_10200;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} vslice_dummy_var_183 := edge_write($p956, $p957, $p38, $i958);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_10201;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10202;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb751;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb746:
    assume $i949 == 1;
    goto corral_source_split_10187;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    $p950 := $M.44;
    goto corral_source_split_10188;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    $p951 := $M.42;
    goto corral_source_split_10189;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    $i952 := $load.i32($M.28, $p20);
    goto corral_source_split_10190;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} vslice_dummy_var_182 := edge_write($p950, $p951, $p38, $i952);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_10191;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1736} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10192;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    goto $bb748;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb588:
    assume $i773 == 1;
    assume {:verifier.code 0} true;
    $i786 := $slt.i32($i772, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  $bb616:
    assume !($i786 == 1);
    assume {:verifier.code 0} true;
    $i787 := $slt.i32($i772, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  $bb618:
    assume !($i787 == 1);
    assume {:verifier.code 0} true;
    $i788 := $slt.i32($i772, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb619, $bb620;

  $bb620:
    assume !($i788 == 1);
    assume {:verifier.code 0} true;
    $i789 := $slt.i32($i772, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb621, $bb622;

  $bb622:
    assume !($i789 == 1);
    goto corral_source_split_9875;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    $i924 := $M.49;
    goto corral_source_split_9876;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    $i925 := $eq.i32($i924, 4);
    goto corral_source_split_9877;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb734, $bb735;

  $bb735:
    assume !($i925 == 1);
    assume {:verifier.code 0} true;
    goto $bb736;

  $bb736:
    assume {:verifier.code 0} true;
    $i930 := $M.49;
    goto corral_source_split_10157;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    $i931 := $eq.i32($i930, 1);
    goto corral_source_split_10158;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb737, $bb738;

  $bb738:
    assume !($i931 == 1);
    assume {:verifier.code 0} true;
    goto $bb739;

  $bb739:
    assume {:verifier.code 0} true;
    $i936 := $M.49;
    goto corral_source_split_10167;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    $i937 := $eq.i32($i936, 3);
    goto corral_source_split_10168;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb740, $bb741;

  $bb741:
    assume !($i937 == 1);
    assume {:verifier.code 0} true;
    goto $bb742;

  $bb742:
    assume {:verifier.code 0} true;
    $i942 := $M.49;
    goto corral_source_split_10177;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    $i943 := $eq.i32($i942, 2);
    goto corral_source_split_10178;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb743, $bb744;

  $bb744:
    assume !($i943 == 1);
    assume {:verifier.code 0} true;
    goto $bb745;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb743:
    assume $i943 == 1;
    goto corral_source_split_10180;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    $p944 := $M.44;
    goto corral_source_split_10181;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    $i945 := $load.i32($M.28, $p19);
    goto corral_source_split_10182;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    $i946 := $load.i32($M.28, $p14);
    goto corral_source_split_10183;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} vslice_dummy_var_181 := edge_tiocmset($p944, $i945, $i946);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_10184;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10185;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    goto $bb745;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb740:
    assume $i937 == 1;
    goto corral_source_split_10170;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    $p938 := $M.44;
    goto corral_source_split_10171;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    $i939 := $load.i32($M.28, $p19);
    goto corral_source_split_10172;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    $i940 := $load.i32($M.28, $p14);
    goto corral_source_split_10173;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} vslice_dummy_var_180 := edge_tiocmset($p938, $i939, $i940);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_10174;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10175;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    goto $bb742;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb737:
    assume $i931 == 1;
    goto corral_source_split_10160;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    $p932 := $M.44;
    goto corral_source_split_10161;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    $i933 := $load.i32($M.28, $p19);
    goto corral_source_split_10162;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    $i934 := $load.i32($M.28, $p14);
    goto corral_source_split_10163;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} vslice_dummy_var_179 := edge_tiocmset($p932, $i933, $i934);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_10164;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10165;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    goto $bb739;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb734:
    assume $i925 == 1;
    goto corral_source_split_10150;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    $p926 := $M.44;
    goto corral_source_split_10151;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    $i927 := $load.i32($M.28, $p19);
    goto corral_source_split_10152;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    $i928 := $load.i32($M.28, $p14);
    goto corral_source_split_10153;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} vslice_dummy_var_178 := edge_tiocmset($p926, $i927, $i928);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_10154;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10155;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    goto $bb736;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb621:
    assume $i789 == 1;
    goto corral_source_split_9871;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    $i900 := $M.49;
    goto corral_source_split_9872;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    $i901 := $eq.i32($i900, 4);
    goto corral_source_split_9873;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb722, $bb723;

  $bb723:
    assume !($i901 == 1);
    assume {:verifier.code 0} true;
    goto $bb724;

  $bb724:
    assume {:verifier.code 0} true;
    $i906 := $M.49;
    goto corral_source_split_10120;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    $i907 := $eq.i32($i906, 1);
    goto corral_source_split_10121;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb725, $bb726;

  $bb726:
    assume !($i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb727:
    assume {:verifier.code 0} true;
    $i912 := $M.49;
    goto corral_source_split_10130;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    $i913 := $eq.i32($i912, 3);
    goto corral_source_split_10131;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb728, $bb729;

  $bb729:
    assume !($i913 == 1);
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb730:
    assume {:verifier.code 0} true;
    $i918 := $M.49;
    goto corral_source_split_10140;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    $i919 := $eq.i32($i918, 2);
    goto corral_source_split_10141;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb731, $bb732;

  $bb732:
    assume !($i919 == 1);
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb733:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb731:
    assume $i919 == 1;
    goto corral_source_split_10143;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    $p920 := $M.44;
    goto corral_source_split_10144;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    $i921 := $load.i32($M.28, $p15);
    goto corral_source_split_10145;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    $i922 := $load.i64($M.28, $p16);
    goto corral_source_split_10146;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} vslice_dummy_var_177 := edge_ioctl($p920, $i921, $i922);
    goto corral_source_split_10147;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10148;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    goto $bb733;

  $bb728:
    assume $i913 == 1;
    goto corral_source_split_10133;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    $p914 := $M.44;
    goto corral_source_split_10134;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    $i915 := $load.i32($M.28, $p15);
    goto corral_source_split_10135;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    $i916 := $load.i64($M.28, $p16);
    goto corral_source_split_10136;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} vslice_dummy_var_176 := edge_ioctl($p914, $i915, $i916);
    goto corral_source_split_10137;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10138;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    goto $bb730;

  $bb725:
    assume $i907 == 1;
    goto corral_source_split_10123;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    $p908 := $M.44;
    goto corral_source_split_10124;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    $i909 := $load.i32($M.28, $p15);
    goto corral_source_split_10125;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    $i910 := $load.i64($M.28, $p16);
    goto corral_source_split_10126;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} vslice_dummy_var_175 := edge_ioctl($p908, $i909, $i910);
    goto corral_source_split_10127;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10128;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    goto $bb727;

  $bb722:
    assume $i901 == 1;
    goto corral_source_split_10113;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    $p902 := $M.44;
    goto corral_source_split_10114;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    $i903 := $load.i32($M.28, $p15);
    goto corral_source_split_10115;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    $i904 := $load.i64($M.28, $p16);
    goto corral_source_split_10116;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} vslice_dummy_var_174 := edge_ioctl($p902, $i903, $i904);
    goto corral_source_split_10117;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10118;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    goto $bb724;

  $bb619:
    assume $i788 == 1;
    goto corral_source_split_9867;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    $i895 := $M.49;
    goto corral_source_split_9868;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    $i896 := $eq.i32($i895, 2);
    goto corral_source_split_9869;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb719, $bb720;

  $bb720:
    assume !($i896 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb721:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb719:
    assume $i896 == 1;
    goto corral_source_split_10105;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    $p897 := $M.43;
    goto corral_source_split_10106;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} edge_release($p897);
    goto corral_source_split_10107;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10108;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    $i898 := $M.47;
    goto corral_source_split_10109;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    $i899 := $sub.i32($i898, 1);
    goto corral_source_split_10110;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $M.47 := $i899;
    call {:si_unique_call 1718} {:cexpr "ref_cnt"} boogie_si_record_i32($i899);
    goto corral_source_split_10111;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    goto $bb721;

  $bb617:
    assume $i787 == 1;
    assume {:verifier.code 0} true;
    $i790 := $slt.i32($i772, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb623, $bb624;

  $bb624:
    assume !($i790 == 1);
    assume {:verifier.code 0} true;
    $i791 := $slt.i32($i772, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb625, $bb626;

  $bb626:
    assume !($i791 == 1);
    goto corral_source_split_9887;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    $i879 := $M.49;
    goto corral_source_split_9888;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    $i880 := $eq.i32($i879, 4);
    goto corral_source_split_9889;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb707, $bb708;

  $bb708:
    assume !($i880 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb709:
    assume {:verifier.code 0} true;
    $i883 := $M.49;
    goto corral_source_split_10081;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    $i884 := $eq.i32($i883, 1);
    goto corral_source_split_10082;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb710, $bb711;

  $bb711:
    assume !($i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb712:
    assume {:verifier.code 0} true;
    $i887 := $M.49;
    goto corral_source_split_10089;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    $i888 := $eq.i32($i887, 3);
    goto corral_source_split_10090;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb713, $bb714;

  $bb714:
    assume !($i888 == 1);
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb715:
    assume {:verifier.code 0} true;
    $i891 := $M.49;
    goto corral_source_split_10097;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    $i892 := $eq.i32($i891, 2);
    goto corral_source_split_10098;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb716, $bb717;

  $bb717:
    assume !($i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb718:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb716:
    assume $i892 == 1;
    goto corral_source_split_10100;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    $p893 := $M.42;
    goto corral_source_split_10101;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} vslice_dummy_var_173 := edge_port_remove($p893);
    goto corral_source_split_10102;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10103;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    goto $bb718;

  $bb713:
    assume $i888 == 1;
    goto corral_source_split_10092;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    $p889 := $M.42;
    goto corral_source_split_10093;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} vslice_dummy_var_172 := edge_port_remove($p889);
    goto corral_source_split_10094;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10095;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    goto $bb715;

  $bb710:
    assume $i884 == 1;
    goto corral_source_split_10084;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    $p885 := $M.42;
    goto corral_source_split_10085;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} vslice_dummy_var_171 := edge_port_remove($p885);
    goto corral_source_split_10086;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10087;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    goto $bb712;

  $bb707:
    assume $i880 == 1;
    goto corral_source_split_10076;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    $p881 := $M.42;
    goto corral_source_split_10077;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} vslice_dummy_var_170 := edge_port_remove($p881);
    goto corral_source_split_10078;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10079;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    goto $bb709;

  $bb625:
    assume $i791 == 1;
    goto corral_source_split_9883;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    $i876 := $M.49;
    goto corral_source_split_9884;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    $i877 := $eq.i32($i876, 4);
    goto corral_source_split_9885;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb704, $bb705;

  $bb705:
    assume !($i877 == 1);
    assume {:verifier.code 0} true;
    goto $bb706;

  $bb706:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb704:
    assume $i877 == 1;
    goto corral_source_split_10071;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    $p878 := $M.41;
    goto corral_source_split_10072;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} edge_bulk_out_data_callback($p878);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_10073;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10074;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb706;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb623:
    assume $i790 == 1;
    goto corral_source_split_9879;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    $i860 := $M.49;
    goto corral_source_split_9880;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    $i861 := $eq.i32($i860, 4);
    goto corral_source_split_9881;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb692, $bb693;

  $bb693:
    assume !($i861 == 1);
    assume {:verifier.code 0} true;
    goto $bb694;

  $bb694:
    assume {:verifier.code 0} true;
    $i864 := $M.49;
    goto corral_source_split_10044;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    $i865 := $eq.i32($i864, 1);
    goto corral_source_split_10045;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb695, $bb696;

  $bb696:
    assume !($i865 == 1);
    assume {:verifier.code 0} true;
    goto $bb697;

  $bb697:
    assume {:verifier.code 0} true;
    $i868 := $M.49;
    goto corral_source_split_10053;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    $i869 := $eq.i32($i868, 3);
    goto corral_source_split_10054;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb698, $bb699;

  $bb699:
    assume !($i869 == 1);
    assume {:verifier.code 0} true;
    goto $bb700;

  $bb700:
    assume {:verifier.code 0} true;
    $i872 := $M.49;
    goto corral_source_split_10062;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    $i873 := $eq.i32($i872, 2);
    goto corral_source_split_10063;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb701, $bb702;

  $bb702:
    assume !($i873 == 1);
    assume {:verifier.code 0} true;
    goto $bb703;

  $bb703:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb701:
    assume $i873 == 1;
    goto corral_source_split_10065;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    $p874 := $M.44;
    goto corral_source_split_10066;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    $p875 := $M.42;
    goto corral_source_split_10067;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} edge_set_termios($p874, $p875, $p42);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_10068;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10069;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    goto $bb703;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb698:
    assume $i869 == 1;
    goto corral_source_split_10056;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    $p870 := $M.44;
    goto corral_source_split_10057;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    $p871 := $M.42;
    goto corral_source_split_10058;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} edge_set_termios($p870, $p871, $p42);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_10059;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10060;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    goto $bb700;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb695:
    assume $i865 == 1;
    goto corral_source_split_10047;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    $p866 := $M.44;
    goto corral_source_split_10048;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    $p867 := $M.42;
    goto corral_source_split_10049;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} edge_set_termios($p866, $p867, $p42);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_10050;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10051;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    goto $bb697;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb692:
    assume $i861 == 1;
    goto corral_source_split_10038;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    $p862 := $M.44;
    goto corral_source_split_10039;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    $p863 := $M.42;
    goto corral_source_split_10040;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} edge_set_termios($p862, $p863, $p42);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_10041;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10042;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    goto $bb694;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb615:
    assume $i786 == 1;
    assume {:verifier.code 0} true;
    $i792 := $slt.i32($i772, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  $bb628:
    assume !($i792 == 1);
    assume {:verifier.code 0} true;
    $i793 := $slt.i32($i772, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb629, $bb630;

  $bb630:
    assume !($i793 == 1);
    assume {:verifier.code 0} true;
    $i794 := $slt.i32($i772, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb631, $bb632;

  $bb632:
    assume !($i794 == 1);
    goto corral_source_split_9899;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    $i848 := $M.49;
    goto corral_source_split_9900;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    $i849 := $eq.i32($i848, 4);
    goto corral_source_split_9901;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb680, $bb681;

  $bb681:
    assume !($i849 == 1);
    assume {:verifier.code 0} true;
    goto $bb682;

  $bb682:
    assume {:verifier.code 0} true;
    $i851 := $M.49;
    goto corral_source_split_10014;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    $i852 := $eq.i32($i851, 1);
    goto corral_source_split_10015;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb683, $bb684;

  $bb684:
    assume !($i852 == 1);
    assume {:verifier.code 0} true;
    goto $bb685;

  $bb685:
    assume {:verifier.code 0} true;
    $i854 := $M.49;
    goto corral_source_split_10022;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    $i855 := $eq.i32($i854, 3);
    goto corral_source_split_10023;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb686, $bb687;

  $bb687:
    assume !($i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb688;

  $bb688:
    assume {:verifier.code 0} true;
    $i857 := $M.49;
    goto corral_source_split_10030;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    $i858 := $eq.i32($i857, 2);
    goto corral_source_split_10031;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb689, $bb690;

  $bb690:
    assume !($i858 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  $bb691:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb689:
    assume $i858 == 1;
    goto corral_source_split_10033;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    $p859 := $M.44;
    goto corral_source_split_10034;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} edge_unthrottle($p859);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_10035;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10036;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    goto $bb691;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb686:
    assume $i855 == 1;
    goto corral_source_split_10025;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    $p856 := $M.44;
    goto corral_source_split_10026;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} edge_unthrottle($p856);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_10027;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10028;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto $bb688;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb683:
    assume $i852 == 1;
    goto corral_source_split_10017;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    $p853 := $M.44;
    goto corral_source_split_10018;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} edge_unthrottle($p853);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_10019;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10020;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    goto $bb685;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb680:
    assume $i849 == 1;
    goto corral_source_split_10009;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    $p850 := $M.44;
    goto corral_source_split_10010;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} edge_unthrottle($p850);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_10011;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10012;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    goto $bb682;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb631:
    assume $i794 == 1;
    goto corral_source_split_9895;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    $i841 := $M.49;
    goto corral_source_split_9896;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    $i842 := $eq.i32($i841, 3);
    goto corral_source_split_9897;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb674, $bb675;

  $bb675:
    assume !($i842 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb679:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb674:
    assume $i842 == 1;
    goto corral_source_split_9998;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    $p843 := $M.44;
    goto corral_source_split_9999;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    $p844 := $M.42;
    goto corral_source_split_10000;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} $i845 := edge_open($p843, $p844);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_10001;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $M.56 := $i845;
    call {:si_unique_call 1688} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i845);
    goto corral_source_split_10002;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    $i846 := $M.56;
    goto corral_source_split_10003;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    $i847 := $eq.i32($i846, 0);
    goto corral_source_split_10004;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb676, $bb677;

  $bb677:
    assume !($i847 == 1);
    assume {:verifier.code 0} true;
    goto $bb678;

  $bb678:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb676:
    assume $i847 == 1;
    goto corral_source_split_10006;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10007;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    goto $bb678;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb629:
    assume $i793 == 1;
    goto corral_source_split_9891;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    $i825 := $M.49;
    goto corral_source_split_9892;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    $i826 := $eq.i32($i825, 4);
    goto corral_source_split_9893;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb662, $bb663;

  $bb663:
    assume !($i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb664;

  $bb664:
    assume {:verifier.code 0} true;
    $i829 := $M.49;
    goto corral_source_split_9974;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    $i830 := $eq.i32($i829, 1);
    goto corral_source_split_9975;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb665, $bb666;

  $bb666:
    assume !($i830 == 1);
    assume {:verifier.code 0} true;
    goto $bb667;

  $bb667:
    assume {:verifier.code 0} true;
    $i833 := $M.49;
    goto corral_source_split_9982;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    $i834 := $eq.i32($i833, 3);
    goto corral_source_split_9983;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb668, $bb669;

  $bb669:
    assume !($i834 == 1);
    assume {:verifier.code 0} true;
    goto $bb670;

  $bb670:
    assume {:verifier.code 0} true;
    $i837 := $M.49;
    goto corral_source_split_9990;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    $i838 := $eq.i32($i837, 2);
    goto corral_source_split_9991;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb671, $bb672;

  $bb672:
    assume !($i838 == 1);
    assume {:verifier.code 0} true;
    goto $bb673;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb671:
    assume $i838 == 1;
    goto corral_source_split_9993;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    $p839 := $M.42;
    goto corral_source_split_9994;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} vslice_dummy_var_169 := edge_port_probe($p839);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_9995;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9996;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    goto $bb673;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb668:
    assume $i834 == 1;
    goto corral_source_split_9985;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    $p835 := $M.42;
    goto corral_source_split_9986;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} vslice_dummy_var_168 := edge_port_probe($p835);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_9987;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9988;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    goto $bb670;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb665:
    assume $i830 == 1;
    goto corral_source_split_9977;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    $p831 := $M.42;
    goto corral_source_split_9978;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} vslice_dummy_var_167 := edge_port_probe($p831);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_9979;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1682} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9980;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    goto $bb667;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb662:
    assume $i826 == 1;
    goto corral_source_split_9969;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    $p827 := $M.42;
    goto corral_source_split_9970;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} vslice_dummy_var_166 := edge_port_probe($p827);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_9971;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9972;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    goto $bb664;

  SeqInstr_463:
    assume !assertsPassed;
    return;

  $bb627:
    assume $i792 == 1;
    assume {:verifier.code 0} true;
    $i795 := $slt.i32($i772, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  $bb634:
    assume !($i795 == 1);
    goto corral_source_split_9903;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    $i809 := $M.49;
    goto corral_source_split_9904;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    $i810 := $eq.i32($i809, 4);
    goto corral_source_split_9905;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb650, $bb651;

  $bb651:
    assume !($i810 == 1);
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb652:
    assume {:verifier.code 0} true;
    $i813 := $M.49;
    goto corral_source_split_9945;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    $i814 := $eq.i32($i813, 1);
    goto corral_source_split_9946;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb653, $bb654;

  $bb654:
    assume !($i814 == 1);
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb655:
    assume {:verifier.code 0} true;
    $i817 := $M.49;
    goto corral_source_split_9953;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    $i818 := $eq.i32($i817, 3);
    goto corral_source_split_9954;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb656, $bb657;

  $bb657:
    assume !($i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb658:
    assume {:verifier.code 0} true;
    $i821 := $M.49;
    goto corral_source_split_9961;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    $i822 := $eq.i32($i821, 2);
    goto corral_source_split_9962;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb659, $bb660;

  $bb660:
    assume !($i822 == 1);
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb661:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb659:
    assume $i822 == 1;
    goto corral_source_split_9964;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    $p823 := $M.44;
    goto corral_source_split_9965;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} vslice_dummy_var_165 := usb_serial_generic_get_icount($p823, $p40);
    goto corral_source_split_9966;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1678} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9967;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    goto $bb661;

  $bb656:
    assume $i818 == 1;
    goto corral_source_split_9956;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    $p819 := $M.44;
    goto corral_source_split_9957;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} vslice_dummy_var_164 := usb_serial_generic_get_icount($p819, $p40);
    goto corral_source_split_9958;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9959;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    goto $bb658;

  $bb653:
    assume $i814 == 1;
    goto corral_source_split_9948;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    $p815 := $M.44;
    goto corral_source_split_9949;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} vslice_dummy_var_163 := usb_serial_generic_get_icount($p815, $p40);
    goto corral_source_split_9950;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1674} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9951;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    goto $bb655;

  $bb650:
    assume $i810 == 1;
    goto corral_source_split_9940;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    $p811 := $M.44;
    goto corral_source_split_9941;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} vslice_dummy_var_162 := usb_serial_generic_get_icount($p811, $p40);
    goto corral_source_split_9942;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9943;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    goto $bb652;

  $bb633:
    assume $i795 == 1;
    assume {:verifier.code 0} true;
    $i796 := $eq.i32($i772, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb635, $bb636;

  $bb636:
    assume {:verifier.code 0} true;
    assume !($i796 == 1);
    goto $bb600;

  $bb635:
    assume $i796 == 1;
    goto corral_source_split_9907;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    $i797 := $M.49;
    goto corral_source_split_9908;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    $i798 := $eq.i32($i797, 4);
    goto corral_source_split_9909;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb637, $bb638;

  $bb638:
    assume !($i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  $bb639:
    assume {:verifier.code 0} true;
    $i800 := $M.49;
    goto corral_source_split_9916;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    $i801 := $eq.i32($i800, 1);
    goto corral_source_split_9917;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640, $bb641;

  $bb641:
    assume !($i801 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  $bb642:
    assume {:verifier.code 0} true;
    $i803 := $M.49;
    goto corral_source_split_9924;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    $i804 := $eq.i32($i803, 3);
    goto corral_source_split_9925;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb643, $bb644;

  $bb644:
    assume !($i804 == 1);
    assume {:verifier.code 0} true;
    goto $bb645;

  $bb645:
    assume {:verifier.code 0} true;
    $i806 := $M.49;
    goto corral_source_split_9932;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    $i807 := $eq.i32($i806, 2);
    goto corral_source_split_9933;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb646, $bb647;

  $bb647:
    assume !($i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb648;

  $bb648:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb646:
    assume $i807 == 1;
    goto corral_source_split_9935;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    $p808 := $M.44;
    goto corral_source_split_9936;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} edge_throttle($p808);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_9937;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1670} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9938;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    goto $bb648;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb643:
    assume $i804 == 1;
    goto corral_source_split_9927;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    $p805 := $M.44;
    goto corral_source_split_9928;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} edge_throttle($p805);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_9929;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9930;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    goto $bb645;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb640:
    assume $i801 == 1;
    goto corral_source_split_9919;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    $p802 := $M.44;
    goto corral_source_split_9920;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} edge_throttle($p802);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_9921;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9922;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    goto $bb642;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb637:
    assume $i798 == 1;
    goto corral_source_split_9911;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    $p799 := $M.44;
    goto corral_source_split_9912;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} edge_throttle($p799);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_9913;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9914;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    goto $bb639;

  SeqInstr_451:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i106 == 1;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $i753 := $M.48;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    $i754 := $ne.i32($i753, 0);
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  $bb556:
    assume !($i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb584:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb555:
    assume $i754 == 1;
    goto corral_source_split_9772;

  corral_source_split_9772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} $i755 := __VERIFIER_nondet_int();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i755);
    call {:si_unique_call 1643} {:cexpr "tmp___14"} boogie_si_record_i32($i755);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb557:
    assume {:verifier.code 0} true;
    $i756 := $slt.i32($i755, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  $bb559:
    assume !($i756 == 1);
    assume {:verifier.code 0} true;
    $i757 := $eq.i32($i755, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  $bb561:
    assume {:verifier.code 0} true;
    assume !($i757 == 1);
    goto $bb562;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} ldv_stop();
    goto corral_source_split_9815;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb583:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb560:
    assume $i757 == 1;
    goto corral_source_split_9774;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    $i763 := $M.48;
    goto corral_source_split_9775;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    $i764 := $eq.i32($i763, 1);
    goto corral_source_split_9776;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  $bb574:
    assume !($i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb581:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb573:
    assume $i764 == 1;
    goto corral_source_split_9792;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} $i765 := usb_serial_module_init();
    goto corral_source_split_9793;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $M.55 := $i765;
    call {:si_unique_call 1648} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i765);
    goto corral_source_split_9794;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    $i766 := $M.55;
    goto corral_source_split_9795;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    $i767 := $eq.i32($i766, 0);
    goto corral_source_split_9796;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb575, $bb576;

  $bb576:
    assume !($i767 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb577:
    assume {:verifier.code 0} true;
    $i768 := $M.55;
    goto corral_source_split_9809;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    $i769 := $ne.i32($i768, 0);
    goto corral_source_split_9810;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb578, $bb579;

  $bb579:
    assume !($i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb580;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb578:
    assume $i769 == 1;
    goto corral_source_split_9812;

  corral_source_split_9812:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1658} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9813;

  corral_source_split_9813:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1646} ldv_check_final_state();
    goto corral_source_split_9790;

  corral_source_split_9790:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb575:
    assume $i767 == 1;
    goto corral_source_split_9798;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9799;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9800;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} ldv_initialize_usb_serial_driver_2();
    goto corral_source_split_9801;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9802;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_initialize_usb_serial_driver_3();
    goto corral_source_split_9803;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9804;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} ldv_initialize_usb_serial_driver_1();
    goto corral_source_split_9805;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9806;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} ldv_initialize_usb_serial_driver_4();
    goto corral_source_split_9807;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    goto $bb577;

  $bb558:
    assume $i756 == 1;
    assume {:verifier.code 0} true;
    $i758 := $eq.i32($i755, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb563, $bb564;

  $bb564:
    assume {:verifier.code 0} true;
    assume !($i758 == 1);
    goto $bb562;

  $bb563:
    assume $i758 == 1;
    goto corral_source_split_9778;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    $i759 := $M.48;
    goto corral_source_split_9779;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    $i760 := $eq.i32($i759, 3);
    goto corral_source_split_9780;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb565, $bb566;

  $bb566:
    assume {:verifier.code 0} true;
    assume !($i760 == 1);
    goto $bb567;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb565:
    assume $i760 == 1;
    goto corral_source_split_9782;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    $i761 := $M.47;
    goto corral_source_split_9783;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    $i762 := $eq.i32($i761, 0);
    goto corral_source_split_9784;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb568, $bb569;

  $bb569:
    assume {:verifier.code 0} true;
    assume !($i762 == 1);
    goto $bb567;

  $bb568:
    assume $i762 == 1;
    goto corral_source_split_9786;

  corral_source_split_9786:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} usb_serial_module_exit();
    goto corral_source_split_9787;

  corral_source_split_9787:
    assume {:verifier.code 0} true;
    $M.48 := 2;
    call {:si_unique_call 1645} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_9788;

  corral_source_split_9788:
    assume {:verifier.code 0} true;
    goto $bb570;

  $bb3:
    assume $i105 == 1;
    assume {:verifier.code 0} true;
    $i109 := $slt.i32($i104, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i109 == 1);
    goto corral_source_split_8502;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    $i432 := $M.46;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $i433 := $ne.i32($i432, 0);
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  $bb287:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb286:
    assume $i433 == 1;
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1495} $i434 := __VERIFIER_nondet_int();
    call {:si_unique_call 1496} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i434);
    call {:si_unique_call 1497} {:cexpr "tmp___13"} boogie_si_record_i32($i434);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb288:
    assume {:verifier.code 0} true;
    $i435 := $slt.i32($i434, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  $bb290:
    assume !($i435 == 1);
    assume {:verifier.code 0} true;
    $i436 := $slt.i32($i434, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb292:
    assume !($i436 == 1);
    assume {:verifier.code 0} true;
    $i437 := $slt.i32($i434, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i437 == 1);
    assume {:verifier.code 0} true;
    $i438 := $slt.i32($i434, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb296:
    assume !($i438 == 1);
    assume {:verifier.code 0} true;
    $i439 := $slt.i32($i434, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb298:
    assume !($i439 == 1);
    assume {:verifier.code 0} true;
    $i440 := $eq.i32($i434, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume {:verifier.code 0} true;
    assume !($i440 == 1);
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_stop();
    goto corral_source_split_9770;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb553:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb299:
    assume $i440 == 1;
    goto corral_source_split_9151;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    $i748 := $M.46;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $i749 := $eq.i32($i748, 1);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  $bb550:
    assume !($i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb549:
    assume $i749 == 1;
    goto corral_source_split_9763;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} vslice_dummy_var_161 := ldv_probe_1();
    goto corral_source_split_9764;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1638} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9765;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    $i751 := $M.47;
    goto corral_source_split_9766;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    $i752 := $add.i32($i751, 1);
    goto corral_source_split_9767;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $M.47 := $i752;
    call {:si_unique_call 1639} {:cexpr "ref_cnt"} boogie_si_record_i32($i752);
    goto corral_source_split_9768;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    goto $bb551;

  $bb297:
    assume $i439 == 1;
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $i736 := $M.46;
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i737 := $eq.i32($i736, 4);
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  $bb538:
    assume !($i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  $bb539:
    assume {:verifier.code 0} true;
    $i739 := $M.46;
    goto corral_source_split_9739;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    $i740 := $eq.i32($i739, 1);
    goto corral_source_split_9740;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  $bb541:
    assume !($i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  $bb542:
    assume {:verifier.code 0} true;
    $i742 := $M.46;
    goto corral_source_split_9747;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    $i743 := $eq.i32($i742, 3);
    goto corral_source_split_9748;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  $bb544:
    assume !($i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  $bb545:
    assume {:verifier.code 0} true;
    $i745 := $M.46;
    goto corral_source_split_9755;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    $i746 := $eq.i32($i745, 2);
    goto corral_source_split_9756;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  $bb547:
    assume !($i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb546:
    assume $i746 == 1;
    goto corral_source_split_9758;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    $p747 := $M.33;
    goto corral_source_split_9759;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} edge_bulk_in_callback($p747);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_9760;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1636} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9761;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    goto $bb548;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb543:
    assume $i743 == 1;
    goto corral_source_split_9750;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    $p744 := $M.33;
    goto corral_source_split_9751;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} edge_bulk_in_callback($p744);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    goto corral_source_split_9752;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9753;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    goto $bb545;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  $bb540:
    assume $i740 == 1;
    goto corral_source_split_9742;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    $p741 := $M.33;
    goto corral_source_split_9743;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} edge_bulk_in_callback($p741);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    goto corral_source_split_9744;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1632} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9745;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    goto $bb542;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb537:
    assume $i737 == 1;
    goto corral_source_split_9734;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    $p738 := $M.33;
    goto corral_source_split_9735;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} edge_bulk_in_callback($p738);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    goto corral_source_split_9736;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1630} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9737;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    goto $bb539;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb295:
    assume $i438 == 1;
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    $i720 := $M.46;
    goto corral_source_split_9144;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    $i721 := $eq.i32($i720, 4);
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  $bb526:
    assume !($i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb527:
    assume {:verifier.code 0} true;
    $i724 := $M.46;
    goto corral_source_split_9710;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    $i725 := $eq.i32($i724, 1);
    goto corral_source_split_9711;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  $bb529:
    assume !($i725 == 1);
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb530:
    assume {:verifier.code 0} true;
    $i728 := $M.46;
    goto corral_source_split_9718;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    $i729 := $eq.i32($i728, 3);
    goto corral_source_split_9719;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  $bb532:
    assume !($i729 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb533:
    assume {:verifier.code 0} true;
    $i732 := $M.46;
    goto corral_source_split_9726;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    $i733 := $eq.i32($i732, 2);
    goto corral_source_split_9727;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  $bb535:
    assume !($i733 == 1);
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb534:
    assume $i733 == 1;
    goto corral_source_split_9729;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    $p734 := $M.36;
    goto corral_source_split_9730;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} vslice_dummy_var_160 := edge_tiocmget($p734);
    goto corral_source_split_9731;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1628} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9732;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    goto $bb536;

  $bb531:
    assume $i729 == 1;
    goto corral_source_split_9721;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    $p730 := $M.36;
    goto corral_source_split_9722;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} vslice_dummy_var_159 := edge_tiocmget($p730);
    goto corral_source_split_9723;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1626} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9724;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    goto $bb533;

  $bb528:
    assume $i725 == 1;
    goto corral_source_split_9713;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    $p726 := $M.36;
    goto corral_source_split_9714;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} vslice_dummy_var_158 := edge_tiocmget($p726);
    goto corral_source_split_9715;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1624} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9716;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    goto $bb530;

  $bb525:
    assume $i721 == 1;
    goto corral_source_split_9705;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    $p722 := $M.36;
    goto corral_source_split_9706;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} vslice_dummy_var_157 := edge_tiocmget($p722);
    goto corral_source_split_9707;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9708;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    goto $bb527;

  $bb293:
    assume $i437 == 1;
    assume {:verifier.code 0} true;
    $i441 := $slt.i32($i434, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i441 == 1);
    assume {:verifier.code 0} true;
    $i442 := $slt.i32($i434, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb305:
    assume !($i442 == 1);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    $i704 := $M.46;
    goto corral_source_split_9164;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    $i705 := $eq.i32($i704, 4);
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  $bb514:
    assume !($i705 == 1);
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb515:
    assume {:verifier.code 0} true;
    $i708 := $M.46;
    goto corral_source_split_9681;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    $i709 := $eq.i32($i708, 1);
    goto corral_source_split_9682;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  $bb517:
    assume !($i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb518:
    assume {:verifier.code 0} true;
    $i712 := $M.46;
    goto corral_source_split_9689;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    $i713 := $eq.i32($i712, 3);
    goto corral_source_split_9690;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  $bb520:
    assume !($i713 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb521:
    assume {:verifier.code 0} true;
    $i716 := $M.46;
    goto corral_source_split_9697;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    $i717 := $eq.i32($i716, 2);
    goto corral_source_split_9698;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  $bb523:
    assume !($i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb524:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb522:
    assume $i717 == 1;
    goto corral_source_split_9700;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    $p718 := $M.36;
    goto corral_source_split_9701;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} vslice_dummy_var_156 := edge_chars_in_buffer($p718);
    goto corral_source_split_9702;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9703;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    goto $bb524;

  $bb519:
    assume $i713 == 1;
    goto corral_source_split_9692;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    $p714 := $M.36;
    goto corral_source_split_9693;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} vslice_dummy_var_155 := edge_chars_in_buffer($p714);
    goto corral_source_split_9694;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1618} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9695;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb521;

  $bb516:
    assume $i709 == 1;
    goto corral_source_split_9684;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    $p710 := $M.36;
    goto corral_source_split_9685;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} vslice_dummy_var_154 := edge_chars_in_buffer($p710);
    goto corral_source_split_9686;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1616} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9687;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    goto $bb518;

  $bb513:
    assume $i705 == 1;
    goto corral_source_split_9676;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    $p706 := $M.36;
    goto corral_source_split_9677;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} vslice_dummy_var_153 := edge_chars_in_buffer($p706);
    goto corral_source_split_9678;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1614} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9679;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    goto $bb515;

  $bb304:
    assume $i442 == 1;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    $i698 := $M.46;
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $i699 := $eq.i32($i698, 4);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb507, $bb508;

  $bb508:
    assume !($i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb509:
    assume {:verifier.code 0} true;
    $i701 := $M.46;
    goto corral_source_split_9668;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    $i702 := $eq.i32($i701, 3);
    goto corral_source_split_9669;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  $bb511:
    assume !($i702 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb510:
    assume $i702 == 1;
    goto corral_source_split_9671;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    $p703 := $M.35;
    goto corral_source_split_9672;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} edge_disconnect($p703);
    goto corral_source_split_9673;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1612} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9674;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    goto $bb512;

  $bb507:
    assume $i699 == 1;
    goto corral_source_split_9663;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    $p700 := $M.35;
    goto corral_source_split_9664;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} edge_disconnect($p700);
    goto corral_source_split_9665;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9666;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    goto $bb509;

  $bb302:
    assume $i441 == 1;
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $i682 := $M.46;
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $i683 := $eq.i32($i682, 4);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  $bb496:
    assume !($i683 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  $bb497:
    assume {:verifier.code 0} true;
    $i686 := $M.46;
    goto corral_source_split_9636;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    $i687 := $eq.i32($i686, 1);
    goto corral_source_split_9637;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  $bb499:
    assume !($i687 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  $bb500:
    assume {:verifier.code 0} true;
    $i690 := $M.46;
    goto corral_source_split_9645;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    $i691 := $eq.i32($i690, 3);
    goto corral_source_split_9646;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  $bb502:
    assume !($i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  $bb503:
    assume {:verifier.code 0} true;
    $i694 := $M.46;
    goto corral_source_split_9654;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    $i695 := $eq.i32($i694, 2);
    goto corral_source_split_9655;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  $bb505:
    assume !($i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb504:
    assume $i695 == 1;
    goto corral_source_split_9657;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    $p696 := $M.36;
    goto corral_source_split_9658;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    $i697 := $load.i32($M.28, $p13);
    goto corral_source_split_9659;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} edge_break($p696, $i697);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    goto corral_source_split_9660;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9661;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    goto $bb506;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb501:
    assume $i691 == 1;
    goto corral_source_split_9648;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    $p692 := $M.36;
    goto corral_source_split_9649;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    $i693 := $load.i32($M.28, $p13);
    goto corral_source_split_9650;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} edge_break($p692, $i693);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_9651;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9652;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    goto $bb503;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb498:
    assume $i687 == 1;
    goto corral_source_split_9639;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    $p688 := $M.36;
    goto corral_source_split_9640;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    $i689 := $load.i32($M.28, $p13);
    goto corral_source_split_9641;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} edge_break($p688, $i689);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_9642;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1604} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9643;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb500;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb495:
    assume $i683 == 1;
    goto corral_source_split_9630;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    $p684 := $M.36;
    goto corral_source_split_9631;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    $i685 := $load.i32($M.28, $p13);
    goto corral_source_split_9632;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} edge_break($p684, $i685);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    goto corral_source_split_9633;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9634;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    goto $bb497;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb291:
    assume $i436 == 1;
    assume {:verifier.code 0} true;
    $i443 := $slt.i32($i434, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb307:
    assume !($i443 == 1);
    assume {:verifier.code 0} true;
    $i444 := $slt.i32($i434, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i444 == 1);
    assume {:verifier.code 0} true;
    $i445 := $slt.i32($i434, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb311:
    assume !($i445 == 1);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    $i666 := $M.46;
    goto corral_source_split_9176;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    $i667 := $eq.i32($i666, 4);
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  $bb484:
    assume !($i667 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb485:
    assume {:verifier.code 0} true;
    $i670 := $M.46;
    goto corral_source_split_9606;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    $i671 := $eq.i32($i670, 1);
    goto corral_source_split_9607;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  $bb487:
    assume !($i671 == 1);
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb488:
    assume {:verifier.code 0} true;
    $i674 := $M.46;
    goto corral_source_split_9614;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    $i675 := $eq.i32($i674, 3);
    goto corral_source_split_9615;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  $bb490:
    assume !($i675 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb491:
    assume {:verifier.code 0} true;
    $i678 := $M.46;
    goto corral_source_split_9622;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    $i679 := $eq.i32($i678, 2);
    goto corral_source_split_9623;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  $bb493:
    assume !($i679 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb492:
    assume $i679 == 1;
    goto corral_source_split_9625;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    $p680 := $M.36;
    goto corral_source_split_9626;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} vslice_dummy_var_152 := edge_write_room($p680);
    goto corral_source_split_9627;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9628;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    goto $bb494;

  $bb489:
    assume $i675 == 1;
    goto corral_source_split_9617;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    $p676 := $M.36;
    goto corral_source_split_9618;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} vslice_dummy_var_151 := edge_write_room($p676);
    goto corral_source_split_9619;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9620;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    goto $bb491;

  $bb486:
    assume $i671 == 1;
    goto corral_source_split_9609;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    $p672 := $M.36;
    goto corral_source_split_9610;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} vslice_dummy_var_150 := edge_write_room($p672);
    goto corral_source_split_9611;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9612;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    goto $bb488;

  $bb483:
    assume $i667 == 1;
    goto corral_source_split_9601;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    $p668 := $M.36;
    goto corral_source_split_9602;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} vslice_dummy_var_149 := edge_write_room($p668);
    goto corral_source_split_9603;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1594} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9604;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    goto $bb485;

  $bb310:
    assume $i445 == 1;
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i663 := $M.46;
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    $i664 := $eq.i32($i663, 4);
    goto corral_source_split_9173;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  $bb481:
    assume !($i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb480:
    assume $i664 == 1;
    goto corral_source_split_9596;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    $p665 := $M.34;
    goto corral_source_split_9597;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} edge_close($p665);
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_9598;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9599;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    goto $bb482;

  SeqInstr_424:
    assume !assertsPassed;
    return;

  $bb308:
    assume $i444 == 1;
    goto corral_source_split_9167;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    $i660 := $M.46;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    $i661 := $eq.i32($i660, 4);
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  $bb478:
    assume !($i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb477:
    assume $i661 == 1;
    goto corral_source_split_9591;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    $p662 := $M.33;
    goto corral_source_split_9592;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} edge_interrupt_callback($p662);
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_9593;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9594;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    goto $bb479;

  SeqInstr_421:
    assume !assertsPassed;
    return;

  $bb306:
    assume $i443 == 1;
    assume {:verifier.code 0} true;
    $i446 := $slt.i32($i434, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb313:
    assume !($i446 == 1);
    assume {:verifier.code 0} true;
    $i447 := $slt.i32($i434, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i447 == 1);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $i654 := $M.46;
    goto corral_source_split_9188;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    $i655 := $eq.i32($i654, 2);
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  $bb472:
    assume !($i655 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb471:
    assume $i655 == 1;
    goto corral_source_split_9581;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    $p656 := $M.35;
    goto corral_source_split_9582;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} $i657 := edge_startup($p656);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_9583;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.54 := $i657;
    call {:si_unique_call 1587} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i657);
    goto corral_source_split_9584;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    $i658 := $M.54;
    goto corral_source_split_9585;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    $i659 := $eq.i32($i658, 0);
    goto corral_source_split_9586;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  $bb474:
    assume !($i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb473:
    assume $i659 == 1;
    goto corral_source_split_9588;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9589;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    goto $bb475;

  SeqInstr_418:
    assume !assertsPassed;
    return;

  $bb314:
    assume $i447 == 1;
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    $i634 := $M.46;
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    $i635 := $eq.i32($i634, 4);
    goto corral_source_split_9185;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  $bb460:
    assume !($i635 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb461:
    assume {:verifier.code 0} true;
    $i639 := $M.46;
    goto corral_source_split_9554;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    $i640 := $eq.i32($i639, 1);
    goto corral_source_split_9555;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  $bb463:
    assume !($i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb464:
    assume {:verifier.code 0} true;
    $i644 := $M.46;
    goto corral_source_split_9563;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    $i645 := $eq.i32($i644, 3);
    goto corral_source_split_9564;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  $bb466:
    assume !($i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb467:
    assume {:verifier.code 0} true;
    $i649 := $M.46;
    goto corral_source_split_9572;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    $i650 := $eq.i32($i649, 2);
    goto corral_source_split_9573;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  $bb469:
    assume !($i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb468:
    assume $i650 == 1;
    goto corral_source_split_9575;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    $p651 := $M.36;
    goto corral_source_split_9576;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    $i652 := $load.i64($M.28, $p7);
    goto corral_source_split_9577;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_148 := usb_serial_generic_tiocmiwait($p651, $i652);
    goto corral_source_split_9578;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9579;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    goto $bb470;

  $bb465:
    assume $i645 == 1;
    goto corral_source_split_9566;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    $p646 := $M.36;
    goto corral_source_split_9567;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    $i647 := $load.i64($M.28, $p7);
    goto corral_source_split_9568;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_147 := usb_serial_generic_tiocmiwait($p646, $i647);
    goto corral_source_split_9569;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9570;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    goto $bb467;

  $bb462:
    assume $i640 == 1;
    goto corral_source_split_9557;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    $p641 := $M.36;
    goto corral_source_split_9558;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    $i642 := $load.i64($M.28, $p7);
    goto corral_source_split_9559;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} vslice_dummy_var_146 := usb_serial_generic_tiocmiwait($p641, $i642);
    goto corral_source_split_9560;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9561;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    goto $bb464;

  $bb459:
    assume $i635 == 1;
    goto corral_source_split_9548;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    $p636 := $M.36;
    goto corral_source_split_9549;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    $i637 := $load.i64($M.28, $p7);
    goto corral_source_split_9550;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_145 := usb_serial_generic_tiocmiwait($p636, $i637);
    goto corral_source_split_9551;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9552;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    goto $bb461;

  $bb312:
    assume $i446 == 1;
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    $i610 := $M.46;
    goto corral_source_split_9180;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    $i611 := $eq.i32($i610, 4);
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  $bb448:
    assume !($i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  $bb449:
    assume {:verifier.code 0} true;
    $i616 := $M.46;
    goto corral_source_split_9518;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    $i617 := $eq.i32($i616, 1);
    goto corral_source_split_9519;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  $bb451:
    assume !($i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  $bb452:
    assume {:verifier.code 0} true;
    $i622 := $M.46;
    goto corral_source_split_9528;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    $i623 := $eq.i32($i622, 3);
    goto corral_source_split_9529;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  $bb454:
    assume !($i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  $bb455:
    assume {:verifier.code 0} true;
    $i628 := $M.46;
    goto corral_source_split_9538;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    $i629 := $eq.i32($i628, 2);
    goto corral_source_split_9539;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  $bb457:
    assume !($i629 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb456:
    assume $i629 == 1;
    goto corral_source_split_9541;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    $p630 := $M.36;
    goto corral_source_split_9542;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    $p631 := $M.34;
    goto corral_source_split_9543;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    $i632 := $load.i32($M.28, $p8);
    goto corral_source_split_9544;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_144 := edge_write($p630, $p631, $p35, $i632);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_9545;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9546;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    goto $bb458;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb453:
    assume $i623 == 1;
    goto corral_source_split_9531;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    $p624 := $M.36;
    goto corral_source_split_9532;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    $p625 := $M.34;
    goto corral_source_split_9533;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    $i626 := $load.i32($M.28, $p8);
    goto corral_source_split_9534;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_143 := edge_write($p624, $p625, $p35, $i626);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_9535;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9536;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    goto $bb455;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb450:
    assume $i617 == 1;
    goto corral_source_split_9521;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    $p618 := $M.36;
    goto corral_source_split_9522;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    $p619 := $M.34;
    goto corral_source_split_9523;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    $i620 := $load.i32($M.28, $p8);
    goto corral_source_split_9524;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_142 := edge_write($p618, $p619, $p35, $i620);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_9525;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9526;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    goto $bb452;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb447:
    assume $i611 == 1;
    goto corral_source_split_9511;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    $p612 := $M.36;
    goto corral_source_split_9512;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    $p613 := $M.34;
    goto corral_source_split_9513;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    $i614 := $load.i32($M.28, $p8);
    goto corral_source_split_9514;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_141 := edge_write($p612, $p613, $p35, $i614);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_9515;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9516;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    goto $bb449;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb289:
    assume $i435 == 1;
    assume {:verifier.code 0} true;
    $i448 := $slt.i32($i434, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb317:
    assume !($i448 == 1);
    assume {:verifier.code 0} true;
    $i449 := $slt.i32($i434, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb319:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    $i450 := $slt.i32($i434, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i450 == 1);
    assume {:verifier.code 0} true;
    $i451 := $slt.i32($i434, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb323:
    assume !($i451 == 1);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    $i586 := $M.46;
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $i587 := $eq.i32($i586, 4);
    goto corral_source_split_9201;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  $bb436:
    assume !($i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  $bb437:
    assume {:verifier.code 0} true;
    $i592 := $M.46;
    goto corral_source_split_9481;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    $i593 := $eq.i32($i592, 1);
    goto corral_source_split_9482;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  $bb439:
    assume !($i593 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  $bb440:
    assume {:verifier.code 0} true;
    $i598 := $M.46;
    goto corral_source_split_9491;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    $i599 := $eq.i32($i598, 3);
    goto corral_source_split_9492;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb441, $bb442;

  $bb442:
    assume !($i599 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  $bb443:
    assume {:verifier.code 0} true;
    $i604 := $M.46;
    goto corral_source_split_9501;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    $i605 := $eq.i32($i604, 2);
    goto corral_source_split_9502;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  $bb445:
    assume !($i605 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb444:
    assume $i605 == 1;
    goto corral_source_split_9504;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    $p606 := $M.36;
    goto corral_source_split_9505;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    $i607 := $load.i32($M.28, $p10);
    goto corral_source_split_9506;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    $i608 := $load.i32($M.28, $p11);
    goto corral_source_split_9507;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_140 := edge_tiocmset($p606, $i607, $i608);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_9508;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9509;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    goto $bb446;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb441:
    assume $i599 == 1;
    goto corral_source_split_9494;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    $p600 := $M.36;
    goto corral_source_split_9495;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    $i601 := $load.i32($M.28, $p10);
    goto corral_source_split_9496;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    $i602 := $load.i32($M.28, $p11);
    goto corral_source_split_9497;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} vslice_dummy_var_139 := edge_tiocmset($p600, $i601, $i602);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    goto corral_source_split_9498;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9499;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    goto $bb443;

  SeqInstr_400:
    assume !assertsPassed;
    return;

  $bb438:
    assume $i593 == 1;
    goto corral_source_split_9484;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    $p594 := $M.36;
    goto corral_source_split_9485;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    $i595 := $load.i32($M.28, $p10);
    goto corral_source_split_9486;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    $i596 := $load.i32($M.28, $p11);
    goto corral_source_split_9487;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} vslice_dummy_var_138 := edge_tiocmset($p594, $i595, $i596);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    goto corral_source_split_9488;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9489;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    goto $bb440;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb435:
    assume $i587 == 1;
    goto corral_source_split_9474;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    $p588 := $M.36;
    goto corral_source_split_9475;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    $i589 := $load.i32($M.28, $p10);
    goto corral_source_split_9476;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    $i590 := $load.i32($M.28, $p11);
    goto corral_source_split_9477;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} vslice_dummy_var_137 := edge_tiocmset($p588, $i589, $i590);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    goto corral_source_split_9478;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9479;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    goto $bb437;

  SeqInstr_394:
    assume !assertsPassed;
    return;

  $bb322:
    assume $i451 == 1;
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    $i562 := $M.46;
    goto corral_source_split_9196;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    $i563 := $eq.i32($i562, 4);
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  $bb424:
    assume !($i563 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb425:
    assume {:verifier.code 0} true;
    $i568 := $M.46;
    goto corral_source_split_9444;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    $i569 := $eq.i32($i568, 1);
    goto corral_source_split_9445;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  $bb427:
    assume !($i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb428:
    assume {:verifier.code 0} true;
    $i574 := $M.46;
    goto corral_source_split_9454;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    $i575 := $eq.i32($i574, 3);
    goto corral_source_split_9455;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  $bb430:
    assume !($i575 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb431:
    assume {:verifier.code 0} true;
    $i580 := $M.46;
    goto corral_source_split_9464;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    $i581 := $eq.i32($i580, 2);
    goto corral_source_split_9465;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  $bb433:
    assume !($i581 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb432:
    assume $i581 == 1;
    goto corral_source_split_9467;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    $p582 := $M.36;
    goto corral_source_split_9468;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    $i583 := $load.i32($M.28, $p12);
    goto corral_source_split_9469;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    $i584 := $load.i64($M.28, $p9);
    goto corral_source_split_9470;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_136 := edge_ioctl($p582, $i583, $i584);
    goto corral_source_split_9471;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9472;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    goto $bb434;

  $bb429:
    assume $i575 == 1;
    goto corral_source_split_9457;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    $p576 := $M.36;
    goto corral_source_split_9458;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    $i577 := $load.i32($M.28, $p12);
    goto corral_source_split_9459;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    $i578 := $load.i64($M.28, $p9);
    goto corral_source_split_9460;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_135 := edge_ioctl($p576, $i577, $i578);
    goto corral_source_split_9461;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9462;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    goto $bb431;

  $bb426:
    assume $i569 == 1;
    goto corral_source_split_9447;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    $p570 := $M.36;
    goto corral_source_split_9448;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    $i571 := $load.i32($M.28, $p12);
    goto corral_source_split_9449;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    $i572 := $load.i64($M.28, $p9);
    goto corral_source_split_9450;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vslice_dummy_var_134 := edge_ioctl($p570, $i571, $i572);
    goto corral_source_split_9451;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9452;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    goto $bb428;

  $bb423:
    assume $i563 == 1;
    goto corral_source_split_9437;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    $p564 := $M.36;
    goto corral_source_split_9438;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    $i565 := $load.i32($M.28, $p12);
    goto corral_source_split_9439;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    $i566 := $load.i64($M.28, $p9);
    goto corral_source_split_9440;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} vslice_dummy_var_133 := edge_ioctl($p564, $i565, $i566);
    goto corral_source_split_9441;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9442;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    goto $bb425;

  $bb320:
    assume $i450 == 1;
    goto corral_source_split_9191;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    $i557 := $M.46;
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    $i558 := $eq.i32($i557, 2);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  $bb421:
    assume !($i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb420:
    assume $i558 == 1;
    goto corral_source_split_9429;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    $p559 := $M.35;
    goto corral_source_split_9430;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} edge_release($p559);
    goto corral_source_split_9431;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9432;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    $i560 := $M.47;
    goto corral_source_split_9433;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    $i561 := $sub.i32($i560, 1);
    goto corral_source_split_9434;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $M.47 := $i561;
    call {:si_unique_call 1553} {:cexpr "ref_cnt"} boogie_si_record_i32($i561);
    goto corral_source_split_9435;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    goto $bb422;

  $bb318:
    assume $i449 == 1;
    assume {:verifier.code 0} true;
    $i452 := $slt.i32($i434, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb325:
    assume !($i452 == 1);
    assume {:verifier.code 0} true;
    $i453 := $slt.i32($i434, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i453 == 1);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    $i541 := $M.46;
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    $i542 := $eq.i32($i541, 4);
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  $bb409:
    assume !($i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb410:
    assume {:verifier.code 0} true;
    $i545 := $M.46;
    goto corral_source_split_9405;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    $i546 := $eq.i32($i545, 1);
    goto corral_source_split_9406;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  $bb412:
    assume !($i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb413:
    assume {:verifier.code 0} true;
    $i549 := $M.46;
    goto corral_source_split_9413;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    $i550 := $eq.i32($i549, 3);
    goto corral_source_split_9414;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  $bb415:
    assume !($i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb416:
    assume {:verifier.code 0} true;
    $i553 := $M.46;
    goto corral_source_split_9421;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    $i554 := $eq.i32($i553, 2);
    goto corral_source_split_9422;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  $bb418:
    assume !($i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb417:
    assume $i554 == 1;
    goto corral_source_split_9424;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    $p555 := $M.34;
    goto corral_source_split_9425;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} vslice_dummy_var_132 := edge_port_remove($p555);
    goto corral_source_split_9426;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9427;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    goto $bb419;

  $bb414:
    assume $i550 == 1;
    goto corral_source_split_9416;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    $p551 := $M.34;
    goto corral_source_split_9417;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} vslice_dummy_var_131 := edge_port_remove($p551);
    goto corral_source_split_9418;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9419;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    goto $bb416;

  $bb411:
    assume $i546 == 1;
    goto corral_source_split_9408;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    $p547 := $M.34;
    goto corral_source_split_9409;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} vslice_dummy_var_130 := edge_port_remove($p547);
    goto corral_source_split_9410;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9411;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    goto $bb413;

  $bb408:
    assume $i542 == 1;
    goto corral_source_split_9400;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    $p543 := $M.34;
    goto corral_source_split_9401;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} vslice_dummy_var_129 := edge_port_remove($p543);
    goto corral_source_split_9402;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9403;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    goto $bb410;

  $bb326:
    assume $i453 == 1;
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    $i538 := $M.46;
    goto corral_source_split_9208;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    $i539 := $eq.i32($i538, 4);
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  $bb406:
    assume !($i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb405:
    assume $i539 == 1;
    goto corral_source_split_9395;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    $p540 := $M.33;
    goto corral_source_split_9396;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} edge_bulk_out_data_callback($p540);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    goto corral_source_split_9397;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9398;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    goto $bb407;

  SeqInstr_391:
    assume !assertsPassed;
    return;

  $bb324:
    assume $i452 == 1;
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $i522 := $M.46;
    goto corral_source_split_9204;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    $i523 := $eq.i32($i522, 4);
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  $bb394:
    assume !($i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  $bb395:
    assume {:verifier.code 0} true;
    $i526 := $M.46;
    goto corral_source_split_9368;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    $i527 := $eq.i32($i526, 1);
    goto corral_source_split_9369;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  $bb397:
    assume !($i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  $bb398:
    assume {:verifier.code 0} true;
    $i530 := $M.46;
    goto corral_source_split_9377;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    $i531 := $eq.i32($i530, 3);
    goto corral_source_split_9378;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  $bb400:
    assume !($i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  $bb401:
    assume {:verifier.code 0} true;
    $i534 := $M.46;
    goto corral_source_split_9386;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    $i535 := $eq.i32($i534, 2);
    goto corral_source_split_9387;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  $bb403:
    assume !($i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb402:
    assume $i535 == 1;
    goto corral_source_split_9389;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    $p536 := $M.36;
    goto corral_source_split_9390;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    $p537 := $M.34;
    goto corral_source_split_9391;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} edge_set_termios($p536, $p537, $p34);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_9392;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9393;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    goto $bb404;

  SeqInstr_388:
    assume !assertsPassed;
    return;

  $bb399:
    assume $i531 == 1;
    goto corral_source_split_9380;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    $p532 := $M.36;
    goto corral_source_split_9381;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    $p533 := $M.34;
    goto corral_source_split_9382;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} edge_set_termios($p532, $p533, $p34);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_9383;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1538} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9384;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    goto $bb401;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb396:
    assume $i527 == 1;
    goto corral_source_split_9371;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    $p528 := $M.36;
    goto corral_source_split_9372;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    $p529 := $M.34;
    goto corral_source_split_9373;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} edge_set_termios($p528, $p529, $p34);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    goto corral_source_split_9374;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9375;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    goto $bb398;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb393:
    assume $i523 == 1;
    goto corral_source_split_9362;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    $p524 := $M.36;
    goto corral_source_split_9363;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    $p525 := $M.34;
    goto corral_source_split_9364;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} edge_set_termios($p524, $p525, $p34);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    goto corral_source_split_9365;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9366;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    goto $bb395;

  SeqInstr_379:
    assume !assertsPassed;
    return;

  $bb316:
    assume $i448 == 1;
    assume {:verifier.code 0} true;
    $i454 := $slt.i32($i434, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb329:
    assume !($i454 == 1);
    assume {:verifier.code 0} true;
    $i455 := $slt.i32($i434, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb331:
    assume !($i455 == 1);
    assume {:verifier.code 0} true;
    $i456 := $slt.i32($i434, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i456 == 1);
    goto corral_source_split_9223;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    $i510 := $M.46;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    $i511 := $eq.i32($i510, 4);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  $bb382:
    assume !($i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  $bb383:
    assume {:verifier.code 0} true;
    $i513 := $M.46;
    goto corral_source_split_9338;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    $i514 := $eq.i32($i513, 1);
    goto corral_source_split_9339;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    $i516 := $M.46;
    goto corral_source_split_9346;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    $i517 := $eq.i32($i516, 3);
    goto corral_source_split_9347;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  $bb388:
    assume !($i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    $i519 := $M.46;
    goto corral_source_split_9354;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 2);
    goto corral_source_split_9355;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  $bb391:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb390:
    assume $i520 == 1;
    goto corral_source_split_9357;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    $p521 := $M.36;
    goto corral_source_split_9358;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} edge_unthrottle($p521);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_9359;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9360;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    goto $bb392;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb387:
    assume $i517 == 1;
    goto corral_source_split_9349;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    $p518 := $M.36;
    goto corral_source_split_9350;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} edge_unthrottle($p518);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_9351;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9352;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    goto $bb389;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb384:
    assume $i514 == 1;
    goto corral_source_split_9341;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    $p515 := $M.36;
    goto corral_source_split_9342;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} edge_unthrottle($p515);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_9343;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9344;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    goto $bb386;

  SeqInstr_370:
    assume !assertsPassed;
    return;

  $bb381:
    assume $i511 == 1;
    goto corral_source_split_9333;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    $p512 := $M.36;
    goto corral_source_split_9334;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} edge_unthrottle($p512);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_9335;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9336;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    goto $bb383;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb332:
    assume $i456 == 1;
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i503 := $M.46;
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i504 := $eq.i32($i503, 3);
    goto corral_source_split_9221;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  $bb376:
    assume !($i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb375:
    assume $i504 == 1;
    goto corral_source_split_9322;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    $p505 := $M.36;
    goto corral_source_split_9323;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    $p506 := $M.34;
    goto corral_source_split_9324;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $i507 := edge_open($p505, $p506);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    goto corral_source_split_9325;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $M.53 := $i507;
    call {:si_unique_call 1523} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i507);
    goto corral_source_split_9326;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    $i508 := $M.53;
    goto corral_source_split_9327;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i508, 0);
    goto corral_source_split_9328;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  $bb378:
    assume !($i509 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb377:
    assume $i509 == 1;
    goto corral_source_split_9330;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9331;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    goto $bb379;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb330:
    assume $i455 == 1;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    $i487 := $M.46;
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    $i488 := $eq.i32($i487, 4);
    goto corral_source_split_9217;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    $i491 := $M.46;
    goto corral_source_split_9298;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    $i492 := $eq.i32($i491, 1);
    goto corral_source_split_9299;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  $bb367:
    assume !($i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    $i495 := $M.46;
    goto corral_source_split_9306;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    $i496 := $eq.i32($i495, 3);
    goto corral_source_split_9307;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  $bb370:
    assume !($i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    $i499 := $M.46;
    goto corral_source_split_9314;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    $i500 := $eq.i32($i499, 2);
    goto corral_source_split_9315;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb372:
    assume $i500 == 1;
    goto corral_source_split_9317;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    $p501 := $M.34;
    goto corral_source_split_9318;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} vslice_dummy_var_128 := edge_port_probe($p501);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_9319;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9320;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    goto $bb374;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb369:
    assume $i496 == 1;
    goto corral_source_split_9309;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    $p497 := $M.34;
    goto corral_source_split_9310;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} vslice_dummy_var_127 := edge_port_probe($p497);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_9311;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9312;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    goto $bb371;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb366:
    assume $i492 == 1;
    goto corral_source_split_9301;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    $p493 := $M.34;
    goto corral_source_split_9302;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} vslice_dummy_var_126 := edge_port_probe($p493);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_9303;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1517} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9304;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    goto $bb368;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb363:
    assume $i488 == 1;
    goto corral_source_split_9293;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    $p489 := $M.34;
    goto corral_source_split_9294;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} vslice_dummy_var_125 := edge_port_probe($p489);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    goto corral_source_split_9295;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1515} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9296;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    goto $bb365;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb328:
    assume $i454 == 1;
    assume {:verifier.code 0} true;
    $i457 := $slt.i32($i434, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb335:
    assume !($i457 == 1);
    goto corral_source_split_9227;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    $i471 := $M.46;
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    $i472 := $eq.i32($i471, 4);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  $bb352:
    assume !($i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    $i475 := $M.46;
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    $i476 := $eq.i32($i475, 1);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  $bb355:
    assume !($i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb356:
    assume {:verifier.code 0} true;
    $i479 := $M.46;
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i480 := $eq.i32($i479, 3);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  $bb358:
    assume !($i480 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    $i483 := $M.46;
    goto corral_source_split_9285;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    $i484 := $eq.i32($i483, 2);
    goto corral_source_split_9286;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  $bb361:
    assume !($i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb360:
    assume $i484 == 1;
    goto corral_source_split_9288;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    $p485 := $M.36;
    goto corral_source_split_9289;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} vslice_dummy_var_124 := usb_serial_generic_get_icount($p485, $p37);
    goto corral_source_split_9290;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1513} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9291;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    goto $bb362;

  $bb357:
    assume $i480 == 1;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $p481 := $M.36;
    goto corral_source_split_9281;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} vslice_dummy_var_123 := usb_serial_generic_get_icount($p481, $p37);
    goto corral_source_split_9282;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9283;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    goto $bb359;

  $bb354:
    assume $i476 == 1;
    goto corral_source_split_9272;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    $p477 := $M.36;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} vslice_dummy_var_122 := usb_serial_generic_get_icount($p477, $p37);
    goto corral_source_split_9274;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    goto $bb356;

  $bb351:
    assume $i472 == 1;
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $p473 := $M.36;
    goto corral_source_split_9265;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} vslice_dummy_var_121 := usb_serial_generic_get_icount($p473, $p37);
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb334:
    assume $i457 == 1;
    assume {:verifier.code 0} true;
    $i458 := $eq.i32($i434, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb337:
    assume {:verifier.code 0} true;
    assume !($i458 == 1);
    goto $bb301;

  $bb336:
    assume $i458 == 1;
    goto corral_source_split_9231;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    $i459 := $M.46;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    $i460 := $eq.i32($i459, 4);
    goto corral_source_split_9233;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  $bb339:
    assume !($i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  $bb340:
    assume {:verifier.code 0} true;
    $i462 := $M.46;
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    $i463 := $eq.i32($i462, 1);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume !($i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    $i465 := $M.46;
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    $i466 := $eq.i32($i465, 3);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  $bb346:
    assume {:verifier.code 0} true;
    $i468 := $M.46;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i468, 2);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  $bb348:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb347:
    assume $i469 == 1;
    goto corral_source_split_9259;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    $p470 := $M.36;
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} edge_throttle($p470);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9262;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    goto $bb349;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb344:
    assume $i466 == 1;
    goto corral_source_split_9251;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    $p467 := $M.36;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} edge_throttle($p467);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_9253;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    goto $bb346;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  $bb341:
    assume $i463 == 1;
    goto corral_source_split_9243;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    $p464 := $M.36;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} edge_throttle($p464);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9246;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    goto $bb343;

  SeqInstr_343:
    assume !assertsPassed;
    return;

  $bb338:
    assume $i460 == 1;
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    $p461 := $M.36;
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} edge_throttle($p461);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    goto corral_source_split_9237;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    goto $bb340;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i109 == 1;
    assume {:verifier.code 0} true;
    $i110 := $eq.i32($i104, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i110 == 1);
    goto $bb11;

  $bb14:
    assume $i110 == 1;
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    $i111 := $M.45;
    goto corral_source_split_8507;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb16:
    assume $i112 == 1;
    goto corral_source_split_8510;

  corral_source_split_8510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1349} $i113 := __VERIFIER_nondet_int();
    call {:si_unique_call 1350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i113);
    call {:si_unique_call 1351} {:cexpr "tmp___12"} boogie_si_record_i32($i113);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i114 := $slt.i32($i113, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    $i115 := $slt.i32($i113, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i116 := $slt.i32($i113, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    $i117 := $slt.i32($i113, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i117 == 1);
    assume {:verifier.code 0} true;
    $i118 := $slt.i32($i113, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    $i119 := $eq.i32($i113, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i119 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_stop();
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb29:
    assume $i119 == 1;
    goto corral_source_split_8520;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    $i427 := $M.45;
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i428 := $eq.i32($i427, 1);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  $bb280:
    assume !($i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb279:
    assume $i428 == 1;
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} vslice_dummy_var_120 := ldv_probe_4();
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1492} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $i430 := $M.47;
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $i431 := $add.i32($i430, 1);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $M.47 := $i431;
    call {:si_unique_call 1493} {:cexpr "ref_cnt"} boogie_si_record_i32($i431);
    goto corral_source_split_9137;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    goto $bb281;

  $bb27:
    assume $i118 == 1;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $i415 := $M.45;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    $i416 := $eq.i32($i415, 4);
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  $bb268:
    assume !($i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  $bb269:
    assume {:verifier.code 0} true;
    $i418 := $M.45;
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $i419 := $eq.i32($i418, 1);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  $bb271:
    assume !($i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  $bb272:
    assume {:verifier.code 0} true;
    $i421 := $M.45;
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    $i422 := $eq.i32($i421, 3);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  $bb274:
    assume !($i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  $bb275:
    assume {:verifier.code 0} true;
    $i424 := $M.45;
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $i425 := $eq.i32($i424, 2);
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  $bb277:
    assume !($i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb276:
    assume $i425 == 1;
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $p426 := $M.29;
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} edge_bulk_in_callback($p426);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1490} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9130;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    goto $bb278;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb273:
    assume $i422 == 1;
    goto corral_source_split_9119;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    $p423 := $M.29;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} edge_bulk_in_callback($p423);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    goto $bb275;

  SeqInstr_334:
    assume !assertsPassed;
    return;

  $bb270:
    assume $i419 == 1;
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $p420 := $M.29;
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} edge_bulk_in_callback($p420);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9114;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    goto $bb272;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb267:
    assume $i416 == 1;
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $p417 := $M.29;
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} edge_bulk_in_callback($p417);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    goto $bb269;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i117 == 1;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    $i399 := $M.45;
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $i400 := $eq.i32($i399, 4);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  $bb256:
    assume !($i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb257:
    assume {:verifier.code 0} true;
    $i403 := $M.45;
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    $i404 := $eq.i32($i403, 1);
    goto corral_source_split_9080;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  $bb259:
    assume !($i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb260:
    assume {:verifier.code 0} true;
    $i407 := $M.45;
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    $i408 := $eq.i32($i407, 3);
    goto corral_source_split_9088;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  $bb262:
    assume !($i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb263:
    assume {:verifier.code 0} true;
    $i411 := $M.45;
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    $i412 := $eq.i32($i411, 2);
    goto corral_source_split_9096;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  $bb265:
    assume !($i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb264:
    assume $i412 == 1;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $p413 := $M.32;
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} vslice_dummy_var_119 := edge_tiocmget($p413);
    goto corral_source_split_9100;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    goto $bb266;

  $bb261:
    assume $i408 == 1;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $p409 := $M.32;
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} vslice_dummy_var_118 := edge_tiocmget($p409);
    goto corral_source_split_9092;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1480} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    goto $bb263;

  $bb258:
    assume $i404 == 1;
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $p405 := $M.32;
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} vslice_dummy_var_117 := edge_tiocmget($p405);
    goto corral_source_split_9084;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    goto $bb260;

  $bb255:
    assume $i400 == 1;
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $p401 := $M.32;
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} vslice_dummy_var_116 := edge_tiocmget($p401);
    goto corral_source_split_9076;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb257;

  $bb23:
    assume $i116 == 1;
    assume {:verifier.code 0} true;
    $i120 := $slt.i32($i113, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    $i121 := $slt.i32($i113, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i121 == 1);
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $i383 := $M.45;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    $i384 := $eq.i32($i383, 4);
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  $bb244:
    assume !($i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb245:
    assume {:verifier.code 0} true;
    $i387 := $M.45;
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i388 := $eq.i32($i387, 1);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  $bb247:
    assume !($i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb248:
    assume {:verifier.code 0} true;
    $i391 := $M.45;
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $i392 := $eq.i32($i391, 3);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  $bb250:
    assume !($i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb251:
    assume {:verifier.code 0} true;
    $i395 := $M.45;
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $i396 := $eq.i32($i395, 2);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  $bb253:
    assume !($i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb252:
    assume $i396 == 1;
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $p397 := $M.32;
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} vslice_dummy_var_115 := edge_chars_in_buffer($p397);
    goto corral_source_split_9071;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1474} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb254;

  $bb249:
    assume $i392 == 1;
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $p393 := $M.32;
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} vslice_dummy_var_114 := edge_chars_in_buffer($p393);
    goto corral_source_split_9063;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1472} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    goto $bb251;

  $bb246:
    assume $i388 == 1;
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $p389 := $M.32;
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} vslice_dummy_var_113 := edge_chars_in_buffer($p389);
    goto corral_source_split_9055;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    goto $bb248;

  $bb243:
    assume $i384 == 1;
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $p385 := $M.32;
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} vslice_dummy_var_112 := edge_chars_in_buffer($p385);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    goto $bb245;

  $bb34:
    assume $i121 == 1;
    goto corral_source_split_8528;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    $i377 := $M.45;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i378 := $eq.i32($i377, 4);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  $bb238:
    assume !($i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb239:
    assume {:verifier.code 0} true;
    $i380 := $M.45;
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 3);
    goto corral_source_split_9038;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  $bb241:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb240:
    assume $i381 == 1;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $p382 := $M.31;
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} edge_disconnect($p382);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    goto $bb242;

  $bb237:
    assume $i378 == 1;
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    $p379 := $M.31;
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} edge_disconnect($p379);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9035;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    goto $bb239;

  $bb32:
    assume $i120 == 1;
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $i361 := $M.45;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    $i362 := $eq.i32($i361, 4);
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    $i365 := $M.45;
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i366 := $eq.i32($i365, 1);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  $bb229:
    assume !($i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  $bb230:
    assume {:verifier.code 0} true;
    $i369 := $M.45;
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    $i370 := $eq.i32($i369, 3);
    goto corral_source_split_9015;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  $bb232:
    assume !($i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  $bb233:
    assume {:verifier.code 0} true;
    $i373 := $M.45;
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i374 := $eq.i32($i373, 2);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  $bb235:
    assume !($i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb234:
    assume $i374 == 1;
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $p375 := $M.32;
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i376 := $load.i32($M.28, $p1);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} edge_break($p375, $i376);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    goto $bb236;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb231:
    assume $i370 == 1;
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    $p371 := $M.32;
    goto corral_source_split_9018;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    $i372 := $load.i32($M.28, $p1);
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} edge_break($p371, $i372);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    goto $bb233;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb228:
    assume $i366 == 1;
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $p367 := $M.32;
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i368 := $load.i32($M.28, $p1);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} edge_break($p367, $i368);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    goto $bb230;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb225:
    assume $i362 == 1;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p363 := $M.32;
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i364 := $load.i32($M.28, $p1);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} edge_break($p363, $i364);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i115 == 1;
    assume {:verifier.code 0} true;
    $i122 := $slt.i32($i113, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    $i123 := $slt.i32($i113, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i124 := $slt.i32($i113, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i124 == 1);
    goto corral_source_split_8544;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    $i345 := $M.45;
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i345, 4);
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb215:
    assume {:verifier.code 0} true;
    $i349 := $M.45;
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 1);
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  $bb217:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    $i353 := $M.45;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $i354 := $eq.i32($i353, 3);
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb221:
    assume {:verifier.code 0} true;
    $i357 := $M.45;
    goto corral_source_split_8991;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    $i358 := $eq.i32($i357, 2);
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  $bb223:
    assume !($i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb222:
    assume $i358 == 1;
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $p359 := $M.32;
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} vslice_dummy_var_111 := edge_write_room($p359);
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb224;

  $bb219:
    assume $i354 == 1;
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $p355 := $M.32;
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} vslice_dummy_var_110 := edge_write_room($p355);
    goto corral_source_split_8988;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    goto $bb221;

  $bb216:
    assume $i350 == 1;
    goto corral_source_split_8978;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    $p351 := $M.32;
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_109 := edge_write_room($p351);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8981;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb213:
    assume $i346 == 1;
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    $p347 := $M.32;
    goto corral_source_split_8971;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} vslice_dummy_var_108 := edge_write_room($p347);
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb215;

  $bb40:
    assume $i124 == 1;
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    $i342 := $M.45;
    goto corral_source_split_8541;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    $i343 := $eq.i32($i342, 4);
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  $bb211:
    assume !($i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb210:
    assume $i343 == 1;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    $p344 := $M.30;
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} edge_close($p344);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    goto $bb212;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i123 == 1;
    goto corral_source_split_8536;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    $i339 := $M.45;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $i340 := $eq.i32($i339, 4);
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb207:
    assume $i340 == 1;
    goto corral_source_split_8960;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    $p341 := $M.29;
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} edge_interrupt_callback($p341);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8963;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    goto $bb209;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i125 := $slt.i32($i113, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    $i126 := $slt.i32($i113, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i126 == 1);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    $i333 := $M.45;
    goto corral_source_split_8557;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 2);
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb201:
    assume $i334 == 1;
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $p335 := $M.31;
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i336 := edge_startup($p335);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    goto corral_source_split_8952;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $M.52 := $i336;
    call {:si_unique_call 1441} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i336);
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $i337 := $M.52;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 0);
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  $bb204:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb203:
    assume $i338 == 1;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    goto $bb205;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i126 == 1;
    goto corral_source_split_8552;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    $i313 := $M.45;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $i314 := $eq.i32($i313, 4);
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb191:
    assume {:verifier.code 0} true;
    $i318 := $M.45;
    goto corral_source_split_8923;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    $i319 := $eq.i32($i318, 1);
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  $bb193:
    assume !($i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    $i323 := $M.45;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $i324 := $eq.i32($i323, 3);
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  $bb196:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb197:
    assume {:verifier.code 0} true;
    $i328 := $M.45;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i328, 2);
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb198:
    assume $i329 == 1;
    goto corral_source_split_8944;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    $p330 := $M.32;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i331 := $load.i64($M.28, $p4);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} vslice_dummy_var_107 := usb_serial_generic_tiocmiwait($p330, $i331);
    goto corral_source_split_8947;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1439} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb195:
    assume $i324 == 1;
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    $p325 := $M.32;
    goto corral_source_split_8936;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    $i326 := $load.i64($M.28, $p4);
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} vslice_dummy_var_106 := usb_serial_generic_tiocmiwait($p325, $i326);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1437} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8939;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    goto $bb197;

  $bb192:
    assume $i319 == 1;
    goto corral_source_split_8926;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    $p320 := $M.32;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $i321 := $load.i64($M.28, $p4);
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} vslice_dummy_var_105 := usb_serial_generic_tiocmiwait($p320, $i321);
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1435} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb194;

  $bb189:
    assume $i314 == 1;
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    $p315 := $M.32;
    goto corral_source_split_8918;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    $i316 := $load.i64($M.28, $p4);
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} vslice_dummy_var_104 := usb_serial_generic_tiocmiwait($p315, $i316);
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1433} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    goto $bb191;

  $bb42:
    assume $i125 == 1;
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    $i289 := $M.45;
    goto corral_source_split_8549;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    $i290 := $eq.i32($i289, 4);
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  $bb178:
    assume !($i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i295 := $M.45;
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $i296 := $eq.i32($i295, 1);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  $bb182:
    assume {:verifier.code 0} true;
    $i301 := $M.45;
    goto corral_source_split_8897;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    $i302 := $eq.i32($i301, 3);
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  $bb184:
    assume !($i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    $i307 := $M.45;
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    $i308 := $eq.i32($i307, 2);
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  $bb187:
    assume !($i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb186:
    assume $i308 == 1;
    goto corral_source_split_8910;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    $p309 := $M.32;
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p310 := $M.30;
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    $i311 := $load.i32($M.28, $p6);
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} vslice_dummy_var_103 := edge_write($p309, $p310, $p28, $i311);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1431} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8915;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    goto $bb188;

  SeqInstr_304:
    assume !assertsPassed;
    return;

  $bb183:
    assume $i302 == 1;
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $p303 := $M.32;
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    $p304 := $M.30;
    goto corral_source_split_8902;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    $i305 := $load.i32($M.28, $p6);
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} vslice_dummy_var_102 := edge_write($p303, $p304, $p28, $i305);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1429} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8905;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    goto $bb185;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  $bb180:
    assume $i296 == 1;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p297 := $M.32;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    $p298 := $M.30;
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $i299 := $load.i32($M.28, $p6);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} vslice_dummy_var_101 := edge_write($p297, $p298, $p28, $i299);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_8894;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    goto $bb182;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb177:
    assume $i290 == 1;
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $p291 := $M.32;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    $p292 := $M.30;
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $i293 := $load.i32($M.28, $p6);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} vslice_dummy_var_100 := edge_write($p291, $p292, $p28, $i293);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_8884;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    goto $bb179;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $i127 := $slt.i32($i113, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i127 == 1);
    assume {:verifier.code 0} true;
    $i128 := $slt.i32($i113, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    $i129 := $slt.i32($i113, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    $i130 := $slt.i32($i113, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i130 == 1);
    goto corral_source_split_8568;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    $i265 := $M.45;
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i265, 4);
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  $bb166:
    assume !($i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    $i271 := $M.45;
    goto corral_source_split_8850;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    $i272 := $eq.i32($i271, 1);
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  $bb169:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    $i277 := $M.45;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    $i278 := $eq.i32($i277, 3);
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    $i283 := $M.45;
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    $i284 := $eq.i32($i283, 2);
    goto corral_source_split_8871;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb174:
    assume $i284 == 1;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    $p285 := $M.32;
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $i286 := $load.i32($M.28, $p2);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    $i287 := $load.i32($M.28, $p5);
    goto corral_source_split_8876;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} vslice_dummy_var_99 := edge_tiocmset($p285, $i286, $i287);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1423} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    goto $bb176;

  SeqInstr_292:
    assume !assertsPassed;
    return;

  $bb171:
    assume $i278 == 1;
    goto corral_source_split_8863;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    $p279 := $M.32;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $i280 := $load.i32($M.28, $p2);
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    $i281 := $load.i32($M.28, $p5);
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} vslice_dummy_var_98 := edge_tiocmset($p279, $i280, $i281);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1421} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8868;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto $bb173;

  SeqInstr_289:
    assume !assertsPassed;
    return;

  $bb168:
    assume $i272 == 1;
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $p273 := $M.32;
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    $i274 := $load.i32($M.28, $p2);
    goto corral_source_split_8855;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    $i275 := $load.i32($M.28, $p5);
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} vslice_dummy_var_97 := edge_tiocmset($p273, $i274, $i275);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8858;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    goto $bb170;

  SeqInstr_286:
    assume !assertsPassed;
    return;

  $bb165:
    assume $i266 == 1;
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p267 := $M.32;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    $i268 := $load.i32($M.28, $p2);
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.28, $p5);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} vslice_dummy_var_96 := edge_tiocmset($p267, $i268, $i269);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    goto corral_source_split_8847;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb167;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i130 == 1;
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    $i241 := $M.45;
    goto corral_source_split_8565;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    $i242 := $eq.i32($i241, 4);
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  $bb154:
    assume !($i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    $i247 := $M.45;
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    $i248 := $eq.i32($i247, 1);
    goto corral_source_split_8814;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  $bb157:
    assume !($i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i253 := $M.45;
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    $i254 := $eq.i32($i253, 3);
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  $bb160:
    assume !($i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb161:
    assume {:verifier.code 0} true;
    $i259 := $M.45;
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i259, 2);
    goto corral_source_split_8834;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  $bb163:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb162:
    assume $i260 == 1;
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    $p261 := $M.32;
    goto corral_source_split_8837;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.28, $p0);
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $i263 := $load.i64($M.28, $p3);
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} vslice_dummy_var_95 := edge_ioctl($p261, $i262, $i263);
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1415} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    goto $bb164;

  $bb159:
    assume $i254 == 1;
    goto corral_source_split_8826;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    $p255 := $M.32;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i256 := $load.i32($M.28, $p0);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    $i257 := $load.i64($M.28, $p3);
    goto corral_source_split_8829;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} vslice_dummy_var_94 := edge_ioctl($p255, $i256, $i257);
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1413} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    goto $bb161;

  $bb156:
    assume $i248 == 1;
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $p249 := $M.32;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i250 := $load.i32($M.28, $p0);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    $i251 := $load.i64($M.28, $p3);
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} vslice_dummy_var_93 := edge_ioctl($p249, $i250, $i251);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1411} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8821;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb153:
    assume $i242 == 1;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p243 := $M.32;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $i244 := $load.i32($M.28, $p0);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    $i245 := $load.i64($M.28, $p3);
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} vslice_dummy_var_92 := edge_ioctl($p243, $i244, $i245);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8811;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb50:
    assume $i129 == 1;
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $i236 := $M.45;
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i237 := $eq.i32($i236, 2);
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  $bb151:
    assume !($i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb150:
    assume $i237 == 1;
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    $p238 := $M.31;
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} edge_release($p238);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1406} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8801;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    $i239 := $M.47;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i240 := $sub.i32($i239, 1);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.47 := $i240;
    call {:si_unique_call 1407} {:cexpr "ref_cnt"} boogie_si_record_i32($i240);
    goto corral_source_split_8804;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    goto $bb152;

  $bb48:
    assume $i128 == 1;
    assume {:verifier.code 0} true;
    $i131 := $slt.i32($i113, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb55:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    $i132 := $slt.i32($i113, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i132 == 1);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    $i233 := $M.45;
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $i234 := $eq.i32($i233, 4);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  $bb148:
    assume !($i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb147:
    assume $i234 == 1;
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    $p235 := $M.29;
    goto corral_source_split_8794;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} edge_bulk_out_data_callback($p235);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1404} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    goto $bb149;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  $bb56:
    assume $i132 == 1;
    goto corral_source_split_8576;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    $i217 := $M.45;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i217, 4);
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  $bb136:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb137:
    assume {:verifier.code 0} true;
    $i221 := $M.45;
    goto corral_source_split_8769;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    $i222 := $eq.i32($i221, 1);
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  $bb139:
    assume !($i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb140:
    assume {:verifier.code 0} true;
    $i225 := $M.45;
    goto corral_source_split_8777;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    $i226 := $eq.i32($i225, 3);
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  $bb142:
    assume !($i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb143:
    assume {:verifier.code 0} true;
    $i229 := $M.45;
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i230 := $eq.i32($i229, 2);
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  $bb145:
    assume !($i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb144:
    assume $i230 == 1;
    goto corral_source_split_8788;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    $p231 := $M.30;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} vslice_dummy_var_91 := edge_port_remove($p231);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1402} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    goto $bb146;

  $bb141:
    assume $i226 == 1;
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    $p227 := $M.30;
    goto corral_source_split_8781;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} vslice_dummy_var_90 := edge_port_remove($p227);
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1400} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    goto $bb143;

  $bb138:
    assume $i222 == 1;
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    $p223 := $M.30;
    goto corral_source_split_8773;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} vslice_dummy_var_89 := edge_port_remove($p223);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1398} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    goto $bb140;

  $bb135:
    assume $i218 == 1;
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    $p219 := $M.30;
    goto corral_source_split_8765;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} vslice_dummy_var_88 := edge_port_remove($p219);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1396} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb137;

  $bb54:
    assume $i131 == 1;
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i201 := $M.45;
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 4);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  $bb124:
    assume !($i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  $bb125:
    assume {:verifier.code 0} true;
    $i205 := $M.45;
    goto corral_source_split_8737;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    $i206 := $eq.i32($i205, 1);
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  $bb127:
    assume !($i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $i209 := $M.45;
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i210 := $eq.i32($i209, 3);
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $i213 := $M.45;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i214 := $eq.i32($i213, 2);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  $bb133:
    assume !($i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb132:
    assume $i214 == 1;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $p215 := $M.32;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $p216 := $M.30;
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} edge_set_termios($p215, $p216, $p30);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_8761;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1394} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    goto $bb134;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb129:
    assume $i210 == 1;
    goto corral_source_split_8749;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    $p211 := $M.32;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $p212 := $M.30;
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} edge_set_termios($p211, $p212, $p30);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1392} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8753;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    goto $bb131;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb126:
    assume $i206 == 1;
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    $p207 := $M.32;
    goto corral_source_split_8741;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    $p208 := $M.30;
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} edge_set_termios($p207, $p208, $p30);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1390} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    goto $bb128;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb123:
    assume $i202 == 1;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $p203 := $M.32;
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    $p204 := $M.30;
    goto corral_source_split_8733;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} edge_set_termios($p203, $p204, $p30);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1388} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    goto $bb125;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb46:
    assume $i127 == 1;
    assume {:verifier.code 0} true;
    $i133 := $slt.i32($i113, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    $i134 := $slt.i32($i113, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i134 == 1);
    assume {:verifier.code 0} true;
    $i135 := $slt.i32($i113, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i135 == 1);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    $i189 := $M.45;
    goto corral_source_split_8593;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    $i190 := $eq.i32($i189, 4);
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i192 := $M.45;
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    $i193 := $eq.i32($i192, 1);
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  $bb115:
    assume !($i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $i195 := $M.45;
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    $i196 := $eq.i32($i195, 3);
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    $i198 := $M.45;
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $i199 := $eq.i32($i198, 2);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  $bb121:
    assume !($i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb120:
    assume $i199 == 1;
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    $p200 := $M.32;
    goto corral_source_split_8727;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} edge_unthrottle($p200);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1386} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8729;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    goto $bb122;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb117:
    assume $i196 == 1;
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    $p197 := $M.32;
    goto corral_source_split_8719;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} edge_unthrottle($p197);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1384} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    goto $bb119;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb114:
    assume $i193 == 1;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $p194 := $M.32;
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} edge_unthrottle($p194);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_8712;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    goto $bb116;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb111:
    assume $i190 == 1;
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $p191 := $M.32;
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} edge_unthrottle($p191);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_8704;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    goto $bb113;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  $bb62:
    assume $i135 == 1;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $i182 := $M.45;
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 3);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb105:
    assume $i183 == 1;
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    $p184 := $M.32;
    goto corral_source_split_8692;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    $p185 := $M.30;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} $i186 := edge_open($p184, $p185);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.51 := $i186;
    call {:si_unique_call 1377} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i186);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    $i187 := $M.51;
    goto corral_source_split_8696;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    $i188 := $eq.i32($i187, 0);
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  $bb108:
    assume !($i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb107:
    assume $i188 == 1;
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1378} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8700;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    goto $bb109;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb60:
    assume $i134 == 1;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i166 := $M.45;
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 4);
    goto corral_source_split_8586;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    $i170 := $M.45;
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    $i171 := $eq.i32($i170, 1);
    goto corral_source_split_8668;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  $bb97:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  $bb98:
    assume {:verifier.code 0} true;
    $i174 := $M.45;
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i174, 3);
    goto corral_source_split_8676;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  $bb100:
    assume !($i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    $i178 := $M.45;
    goto corral_source_split_8683;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    $i179 := $eq.i32($i178, 2);
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  $bb103:
    assume !($i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb102:
    assume $i179 == 1;
    goto corral_source_split_8686;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    $p180 := $M.30;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} vslice_dummy_var_87 := edge_port_probe($p180);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    goto corral_source_split_8688;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1375} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    goto $bb104;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb99:
    assume $i175 == 1;
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    $p176 := $M.30;
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} vslice_dummy_var_86 := edge_port_probe($p176);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1373} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8681;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    goto $bb101;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb96:
    assume $i171 == 1;
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    $p172 := $M.30;
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} vslice_dummy_var_85 := edge_port_probe($p172);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1371} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8673;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    goto $bb98;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  $bb93:
    assume $i167 == 1;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    $p168 := $M.30;
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} vslice_dummy_var_84 := edge_port_probe($p168);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1369} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8665;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    goto $bb95;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i133 == 1;
    assume {:verifier.code 0} true;
    $i136 := $slt.i32($i113, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i136 == 1);
    goto corral_source_split_8596;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    $i150 := $M.45;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 4);
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $i154 := $M.45;
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $i158 := $M.45;
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 3);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $i162 := $M.45;
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 2);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb90:
    assume $i163 == 1;
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    $p164 := $M.32;
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} vslice_dummy_var_83 := usb_serial_generic_get_icount($p164, $p32);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1367} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8660;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb87:
    assume $i159 == 1;
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $p160 := $M.32;
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} vslice_dummy_var_82 := usb_serial_generic_get_icount($p160, $p32);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1365} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb84:
    assume $i155 == 1;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $p156 := $M.32;
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} vslice_dummy_var_81 := usb_serial_generic_get_icount($p156, $p32);
    goto corral_source_split_8643;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1363} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb81:
    assume $i151 == 1;
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $p152 := $M.32;
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} vslice_dummy_var_80 := usb_serial_generic_get_icount($p152, $p32);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1361} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb64:
    assume $i136 == 1;
    assume {:verifier.code 0} true;
    $i137 := $eq.i32($i113, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i137 == 1);
    goto $bb31;

  $bb66:
    assume $i137 == 1;
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    $i138 := $M.45;
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 4);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $i141 := $M.45;
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i142 := $eq.i32($i141, 1);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  $bb72:
    assume !($i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $i144 := $M.45;
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    $i145 := $eq.i32($i144, 3);
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $i147 := $M.45;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 2);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb77:
    assume $i148 == 1;
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $p149 := $M.32;
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} edge_throttle($p149);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1359} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb79;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb74:
    assume $i145 == 1;
    goto corral_source_split_8620;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    $p146 := $M.32;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} edge_throttle($p146);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1357} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8623;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    goto $bb76;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb71:
    assume $i142 == 1;
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $p143 := $M.32;
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} edge_throttle($p143);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1355} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    goto $bb73;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  $bb68:
    assume $i139 == 1;
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p140 := $M.32;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} edge_throttle($p140);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1353} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    goto $bb70;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  $bb285_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1346} $i104 := __VERIFIER_nondet_int();
    call {:si_unique_call 1347} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i104);
    call {:si_unique_call 1348} {:cexpr "tmp___11"} boogie_si_record_i32($i104);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 452435);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11081;

  corral_source_split_11081:
    assume {:verifier.code 0} true;
    return;
}



const ldv_probe_4: ref;

axiom ldv_probe_4 == $sub.ref(0, 453467);

procedure ldv_probe_4() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_4() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11083;

  corral_source_split_11083:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1953} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1954} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11084;

  corral_source_split_11084:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 454499);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11086;

  corral_source_split_11086:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_probe_1: ref;

axiom ldv_probe_1 == $sub.ref(0, 455531);

procedure ldv_probe_1() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_1() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11088;

  corral_source_split_11088:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1955} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1956} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11089;

  corral_source_split_11089:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const usb_serial_module_exit: ref;

axiom usb_serial_module_exit == $sub.ref(0, 456563);

procedure usb_serial_module_exit();
  free requires assertsPassed;



implementation usb_serial_module_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11091;

  corral_source_split_11091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1957} usb_serial_deregister_drivers(serial_drivers);
    goto corral_source_split_11092;

  corral_source_split_11092:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_module_init: ref;

axiom usb_serial_module_init == $sub.ref(0, 457595);

procedure usb_serial_module_init() returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_module_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11094;

  corral_source_split_11094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1958} $i0 := usb_serial_register_drivers(serial_drivers, .str, id_table_combined);
    call {:si_unique_call 1959} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_11095;

  corral_source_split_11095:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_3: ref;

axiom ldv_probe_3 == $sub.ref(0, 458627);

procedure ldv_probe_3() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_3() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11097;

  corral_source_split_11097:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1960} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1961} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11098;

  corral_source_split_11098:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_probe_2: ref;

axiom ldv_probe_2 == $sub.ref(0, 459659);

procedure ldv_probe_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_probe_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11100;

  corral_source_split_11100:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1962} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1963} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_11101;

  corral_source_split_11101:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 460691);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11103;

  corral_source_split_11103:
    assume {:verifier.code 0} true;
    return;
}



const usb_serial_register_drivers: ref;

axiom usb_serial_register_drivers == $sub.ref(0, 461723);

procedure usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_serial_register_drivers($p0: ref, $p1: ref, $p2: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11105;

  corral_source_split_11105:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1964} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1965} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_11106;

  corral_source_split_11106:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const usb_serial_deregister_drivers: ref;

axiom usb_serial_deregister_drivers == $sub.ref(0, 462755);

procedure usb_serial_deregister_drivers($p0: ref);
  free requires assertsPassed;



implementation usb_serial_deregister_drivers($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_11108;

  corral_source_split_11108:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 463787);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1966} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_11110;

  corral_source_split_11110:
    assume {:verifier.code 1} true;
    goto corral_source_split_11111;

  corral_source_split_11111:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_11112;

  corral_source_split_11112:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 464819);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 465851);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 466883);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11114;

  corral_source_split_11114:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_11115;

  corral_source_split_11115:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_673:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 467915);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 468947);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 469979);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 471011);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 472043);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 473075);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 474107);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 475139);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 476171);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 477203);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11117;

  corral_source_split_11117:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1967} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1968} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1969} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11118;

  corral_source_split_11118:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_11119;

  corral_source_split_11119:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11123;

  corral_source_split_11123:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11124;

  corral_source_split_11124:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1970} __VERIFIER_assume($i4);
    goto corral_source_split_11125;

  corral_source_split_11125:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11121;

  corral_source_split_11121:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 478235);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 479267);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 480299);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __VERIFIER_nondet_unsigned_int: ref;

axiom __VERIFIER_nondet_unsigned_int == $sub.ref(0, 481331);

procedure __VERIFIER_nondet_unsigned_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i32;
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11127;

  corral_source_split_11127:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1971} $i0 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1972} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1973} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11128;

  corral_source_split_11128:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1974} $i1 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1975} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i1);
    call {:si_unique_call 1976} {:cexpr "min"} boogie_si_record_i32($i1);
    goto corral_source_split_11129;

  corral_source_split_11129:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1977} $i2 := __SMACK_nondet_unsigned_int();
    call {:si_unique_call 1978} {:cexpr "smack:ext:__SMACK_nondet_unsigned_int"} boogie_si_record_i32($i2);
    call {:si_unique_call 1979} {:cexpr "max"} boogie_si_record_i32($i2);
    goto corral_source_split_11130;

  corral_source_split_11130:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i1, 0);
    goto corral_source_split_11131;

  corral_source_split_11131:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11136;

  corral_source_split_11136:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_11137;

  corral_source_split_11137:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1980} __VERIFIER_assume($i7);
    goto corral_source_split_11138;

  corral_source_split_11138:
    assume {:verifier.code 0} true;
    $i8 := $uge.i32($i0, $i1);
    goto corral_source_split_11139;

  corral_source_split_11139:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_11145;

  corral_source_split_11145:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_11146;

  corral_source_split_11146:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1981} __VERIFIER_assume($i11);
    goto corral_source_split_11147;

  corral_source_split_11147:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11143;

  corral_source_split_11143:
    assume {:verifier.code 1} true;
    $i10 := $ule.i32($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11133;

  corral_source_split_11133:
    assume {:verifier.code 0} true;
    $i5 := $uge.i32($i2, 4294967295);
    goto corral_source_split_11134;

  corral_source_split_11134:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11141;

  corral_source_split_11141:
    assume {:verifier.code 1} true;
    $i6 := $ule.i32($i2, 4294967295);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 482363);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 483395);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11149;

  corral_source_split_11149:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1982} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1983} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1984} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11150;

  corral_source_split_11150:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_11151;

  corral_source_split_11151:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11155;

  corral_source_split_11155:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_11156;

  corral_source_split_11156:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1985} __VERIFIER_assume($i4);
    goto corral_source_split_11157;

  corral_source_split_11157:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_11153;

  corral_source_split_11153:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 484427);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 485459);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 486491);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 487523);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 488555);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11159;

  corral_source_split_11159:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1986} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1987} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1988} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11160;

  corral_source_split_11160:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1989} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1990} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1991} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_11161;

  corral_source_split_11161:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1992} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1993} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1994} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_11162;

  corral_source_split_11162:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_11163;

  corral_source_split_11163:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_11168;

  corral_source_split_11168:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_11169;

  corral_source_split_11169:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1995} __VERIFIER_assume($i7);
    goto corral_source_split_11170;

  corral_source_split_11170:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_11171;

  corral_source_split_11171:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_11177;

  corral_source_split_11177:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_11178;

  corral_source_split_11178:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1996} __VERIFIER_assume($i11);
    goto corral_source_split_11179;

  corral_source_split_11179:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_11175;

  corral_source_split_11175:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11165;

  corral_source_split_11165:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_11166;

  corral_source_split_11166:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_11173;

  corral_source_split_11173:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 489587);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 490619);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 491651);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 492683);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 493715);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 494747);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 495779);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 496811);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_uint: ref;

axiom __VERIFIER_nondet_uint == $sub.ref(0, 497843);

procedure __VERIFIER_nondet_uint() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_uint() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11181;

  corral_source_split_11181:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1997} $i0 := __VERIFIER_nondet_unsigned_int();
    call {:si_unique_call 1998} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1999} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_11182;

  corral_source_split_11182:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 498875);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11184;

  corral_source_split_11184:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2000} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 2001} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 2002} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_11185;

  corral_source_split_11185:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 499907);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11187;

  corral_source_split_11187:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2003} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 2004} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_11188;

  corral_source_split_11188:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 500939);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 501971);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2005} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 2006} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 503003);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 504035);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_11190;

  corral_source_split_11190:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_11191;

  corral_source_split_11191:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 505067);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2007} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 2008} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_11193;

  corral_source_split_11193:
    assume {:verifier.code 1} true;
    call {:si_unique_call 2009} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 2010} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_11194;

  corral_source_split_11194:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_11195;

  corral_source_split_11195:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_11199;

  corral_source_split_11199:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_11200;

  corral_source_split_11200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 2011} $p6 := malloc($i5);
    goto corral_source_split_11201;

  corral_source_split_11201:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_11202;

  corral_source_split_11202:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    call {:si_unique_call 2012} cmdloc_dummy_var_39 := $memset.i8(cmdloc_dummy_var_38, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_39;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_11204;

  corral_source_split_11204:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_11197;

  corral_source_split_11197:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 506099);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 507131);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.14, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.0, $M.87, $M.88, $M.89, $M.17, $M.18;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 2013} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.29 := $0.ref;
    $M.30 := $0.ref;
    $M.31 := $0.ref;
    $M.32 := $0.ref;
    $M.33 := $0.ref;
    $M.34 := $0.ref;
    $M.35 := $0.ref;
    $M.36 := $0.ref;
    $M.37 := $0.ref;
    $M.38 := $0.ref;
    $M.39 := $0.ref;
    $M.40 := $0.ref;
    $M.41 := $0.ref;
    $M.42 := $0.ref;
    $M.43 := $0.ref;
    $M.44 := $0.ref;
    $M.45 := 0;
    call {:si_unique_call 2014} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.46 := 0;
    call {:si_unique_call 2015} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.47 := 0;
    call {:si_unique_call 2016} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.48 := 0;
    call {:si_unique_call 2017} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.49 := 0;
    call {:si_unique_call 2018} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.50 := 0;
    call {:si_unique_call 2019} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.51 := 0;
    call {:si_unique_call 2020} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.52 := 0;
    call {:si_unique_call 2021} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.53 := 0;
    call {:si_unique_call 2022} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.54 := 0;
    call {:si_unique_call 2023} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.55 := 0;
    call {:si_unique_call 2024} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.56 := 0;
    call {:si_unique_call 2025} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.57 := 0;
    call {:si_unique_call 2026} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.58 := 0;
    call {:si_unique_call 2027} {:cexpr "ldv_retval_8"} boogie_si_record_i32(0);
    $M.59 := 0;
    call {:si_unique_call 2028} {:cexpr "ldv_retval_7"} boogie_si_record_i32(0);
    $M.14 := 0;
    call {:si_unique_call 2029} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.61 := $store.i16($M.61, __mod_usb__id_table_combined_device_table, 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.61 := $store.i16($M.61, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(0, 1)), 0);
    $M.62 := $store.i16($M.62, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(2, 1)), 0);
    $M.63 := $store.i16($M.63, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(4, 1)), 0);
    $M.64 := $store.i16($M.64, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.65 := $store.i16($M.65, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.66 := $store.i8($M.66, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.67 := $store.i8($M.67, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.68 := $store.i8($M.68, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.69 := $store.i8($M.69, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.70 := $store.i8($M.70, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.71 := $store.i8($M.71, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.72 := $store.i8($M.72, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.73 := $store.i64($M.73, $add.ref($add.ref($add.ref(__mod_usb__id_table_combined_device_table, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, id_table_combined, 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(4, 1)), 3);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(4, 1)), 4);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(4, 1)), 5123);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(4, 1)), 5);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(4, 1)), 6);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(4, 1)), 7);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(4, 1)), 12);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(4, 1)), 13);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(4, 1)), 14);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(4, 1)), 15);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(4, 1)), 16);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(11, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(4, 1)), 17);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(12, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(4, 1)), 18);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(13, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(4, 1)), 26);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(14, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(4, 1)), 25);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(15, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(4, 1)), 19);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(16, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(4, 1)), 20);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(17, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(4, 1)), 2);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(18, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(4, 1)), 8);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(19, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(2, 1)), 5640);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(4, 1)), 24);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(20, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(2, 1)), 1028);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(4, 1)), 514);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(21, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(2, 1)), 1028);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(4, 1)), 515);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(22, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(2, 1)), 1028);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(4, 1)), 784);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(23, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(2, 1)), 1028);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(4, 1)), 785);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(24, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(2, 1)), 1028);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(4, 1)), 786);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(25, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(2, 1)), 1497);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(4, 1)), $sub.i16(0, 22696));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(26, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(2, 1)), 1497);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(4, 1)), $sub.i16(0, 22636));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(27, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(0, 1)), 3);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(2, 1)), 1497);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(4, 1)), $sub.i16(0, 24027));
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(28, 32)), $mul.ref(24, 1)), 0);
    $M.74 := $store.i16($M.74, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(0, 1)), 0);
    $M.75 := $store.i16($M.75, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(2, 1)), 0);
    $M.76 := $store.i16($M.76, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(4, 1)), 0);
    $M.77 := $store.i16($M.77, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(6, 1)), 0);
    $M.78 := $store.i16($M.78, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(8, 1)), 0);
    $M.79 := $store.i8($M.79, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(10, 1)), 0);
    $M.80 := $store.i8($M.80, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(11, 1)), 0);
    $M.81 := $store.i8($M.81, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(12, 1)), 0);
    $M.82 := $store.i8($M.82, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(13, 1)), 0);
    $M.83 := $store.i8($M.83, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(14, 1)), 0);
    $M.84 := $store.i8($M.84, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(15, 1)), 0);
    $M.85 := $store.i8($M.85, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(16, 1)), 0);
    $M.86 := $store.i64($M.86, $add.ref($add.ref($add.ref(id_table_combined, $mul.ref(0, 960)), $mul.ref(29, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, Epic_port_id_table, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(2, 1)), 1028);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(4, 1)), 514);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(2, 1)), 1028);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(4, 1)), 515);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(2, 1)), 1028);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(4, 1)), 784);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(2, 1)), 1028);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(4, 1)), 785);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(2, 1)), 1028);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(4, 1)), 786);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(2, 1)), 1497);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(4, 1)), $sub.i16(0, 22696));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(2, 1)), 1497);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(4, 1)), $sub.i16(0, 22636));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(2, 1)), 1497);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(4, 1)), $sub.i16(0, 24027));
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(Epic_port_id_table, $mul.ref(0, 288)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.87 := $store.ref($M.87, epic_device, .str.222);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(8, 1)), Epic_port_id_table);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 1);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.223);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.i64($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(280, 1)), edge_startup);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(296, 1)), edge_disconnect);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(304, 1)), edge_release);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(312, 1)), edge_port_probe);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(320, 1)), edge_port_remove);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(352, 1)), edge_open);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(360, 1)), edge_close);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(368, 1)), edge_write);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(376, 1)), edge_write_room);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(384, 1)), edge_ioctl);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(392, 1)), edge_set_termios);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(400, 1)), edge_break);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(408, 1)), edge_chars_in_buffer);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(432, 1)), edge_throttle);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(440, 1)), edge_unthrottle);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(448, 1)), edge_tiocmget);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(456, 1)), edge_tiocmset);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(464, 1)), usb_serial_generic_tiocmiwait);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(472, 1)), usb_serial_generic_get_icount);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(504, 1)), edge_interrupt_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(520, 1)), edge_bulk_in_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(528, 1)), edge_bulk_out_data_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(epic_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.i16($M.0, edgeport_8port_id_table, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(4, 1)), 15);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(4, 1)), 18);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(4, 1)), 20);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(4, 1)), 2);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(4, 1)), 8);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(4, 1)), 24);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_8port_id_table, $mul.ref(0, 224)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.87 := $store.ref($M.87, edgeport_8port_device, .str.220);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(8, 1)), edgeport_8port_id_table);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 8);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.221);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.i64($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(280, 1)), edge_startup);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(296, 1)), edge_disconnect);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(304, 1)), edge_release);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(312, 1)), edge_port_probe);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(320, 1)), edge_port_remove);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(352, 1)), edge_open);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(360, 1)), edge_close);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(368, 1)), edge_write);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(376, 1)), edge_write_room);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(384, 1)), edge_ioctl);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(392, 1)), edge_set_termios);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(400, 1)), edge_break);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(408, 1)), edge_chars_in_buffer);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(432, 1)), edge_throttle);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(440, 1)), edge_unthrottle);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(448, 1)), edge_tiocmget);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(456, 1)), edge_tiocmset);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(464, 1)), usb_serial_generic_tiocmiwait);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(472, 1)), usb_serial_generic_get_icount);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(504, 1)), edge_interrupt_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(520, 1)), edge_bulk_in_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(528, 1)), edge_bulk_out_data_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_8port_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.i16($M.0, edgeport_4port_id_table, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(4, 1)), 1);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(4, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(4, 1)), 4);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(4, 1)), 5123);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(4, 1)), 6);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(4, 1)), 14);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(4, 1)), 17);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(6, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(4, 1)), 26);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(7, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(4, 1)), 25);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(8, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(4, 1)), 19);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(9, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_4port_id_table, $mul.ref(0, 352)), $mul.ref(10, 32)), $mul.ref(24, 1)), 0);
    $M.87 := $store.ref($M.87, edgeport_4port_device, .str.218);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(8, 1)), edgeport_4port_id_table);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 4);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.219);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.i64($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(280, 1)), edge_startup);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(296, 1)), edge_disconnect);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(304, 1)), edge_release);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(312, 1)), edge_port_probe);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(320, 1)), edge_port_remove);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(352, 1)), edge_open);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(360, 1)), edge_close);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(368, 1)), edge_write);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(376, 1)), edge_write_room);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(384, 1)), edge_ioctl);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(392, 1)), edge_set_termios);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(400, 1)), edge_break);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(408, 1)), edge_chars_in_buffer);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(432, 1)), edge_throttle);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(440, 1)), edge_unthrottle);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(448, 1)), edge_tiocmget);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(456, 1)), edge_tiocmset);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(464, 1)), usb_serial_generic_tiocmiwait);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(472, 1)), usb_serial_generic_get_icount);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(504, 1)), edge_interrupt_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(520, 1)), edge_bulk_in_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(528, 1)), edge_bulk_out_data_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_4port_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.0 := $store.i16($M.0, edgeport_2port_id_table, 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(4, 1)), 5);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(0, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(4, 1)), 7);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(1, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(4, 1)), 12);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(2, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(4, 1)), 13);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(3, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(0, 1)), 3);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(2, 1)), 5640);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(4, 1)), 16);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(4, 32)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(0, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(2, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(4, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(6, 1)), 0);
    $M.0 := $store.i16($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(8, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(11, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(14, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i64($M.0, $add.ref($add.ref($add.ref(edgeport_2port_id_table, $mul.ref(0, 192)), $mul.ref(5, 32)), $mul.ref(24, 1)), 0);
    $M.87 := $store.ref($M.87, edgeport_2port_device, .str.216);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(8, 1)), edgeport_2port_id_table);
    $M.87 := $store.i8($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(16, 1)), 2);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(24, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(0, 1)), .str.217);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(16, 1)), __this_module);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.i8($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(36, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(40, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(48, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(56, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(64, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(72, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(80, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(88, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(96, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(104, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(40, 1)), $mul.ref(112, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(160, 1)), $0.ref);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(4, 1)), 0);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(8, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(16, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(0, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(8, 1)), $mul.ref(1, 8)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(24, 1)), $0.ref);
    $M.87 := $store.i32($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(32, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref($add.ref($add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(0, 1)), $mul.ref(24, 1)), $mul.ref(40, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(0, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref($add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(168, 1)), $mul.ref(72, 1)), $mul.ref(8, 1)), $0.ref);
    $M.87 := $store.i64($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(256, 1)), 0);
    $M.87 := $store.i64($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(264, 1)), 0);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(272, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(280, 1)), edge_startup);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(288, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(296, 1)), edge_disconnect);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(304, 1)), edge_release);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(312, 1)), edge_port_probe);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(320, 1)), edge_port_remove);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(328, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(336, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(344, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(352, 1)), edge_open);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(360, 1)), edge_close);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(368, 1)), edge_write);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(376, 1)), edge_write_room);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(384, 1)), edge_ioctl);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(392, 1)), edge_set_termios);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(400, 1)), edge_break);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(408, 1)), edge_chars_in_buffer);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(416, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(424, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(432, 1)), edge_throttle);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(440, 1)), edge_unthrottle);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(448, 1)), edge_tiocmget);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(456, 1)), edge_tiocmset);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(464, 1)), usb_serial_generic_tiocmiwait);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(472, 1)), usb_serial_generic_get_icount);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(480, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(488, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(496, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(504, 1)), edge_interrupt_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(512, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(520, 1)), edge_bulk_in_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(528, 1)), edge_bulk_out_data_callback);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(536, 1)), $0.ref);
    $M.87 := $store.ref($M.87, $add.ref($add.ref(edgeport_2port_device, $mul.ref(0, 552)), $mul.ref(544, 1)), $0.ref);
    $M.88 := $store.ref($M.88, serial_drivers, edgeport_2port_device);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(serial_drivers, $mul.ref(0, 40)), $mul.ref(1, 8)), edgeport_4port_device);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(serial_drivers, $mul.ref(0, 40)), $mul.ref(2, 8)), edgeport_8port_device);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(serial_drivers, $mul.ref(0, 40)), $mul.ref(3, 8)), epic_device);
    $M.88 := $store.ref($M.88, $add.ref($add.ref(serial_drivers, $mul.ref(0, 40)), $mul.ref(4, 8)), $0.ref);
    $M.89 := $store.i32($M.89, divisor_table, 50);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(0, 8)), $mul.ref(4, 1)), 4608);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(1, 8)), $mul.ref(0, 1)), 75);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(1, 8)), $mul.ref(4, 1)), 3072);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(2, 8)), $mul.ref(0, 1)), 110);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(2, 8)), $mul.ref(4, 1)), 2095);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(3, 8)), $mul.ref(0, 1)), 134);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(3, 8)), $mul.ref(4, 1)), 1713);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(4, 8)), $mul.ref(0, 1)), 150);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(4, 8)), $mul.ref(4, 1)), 1536);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(5, 8)), $mul.ref(0, 1)), 300);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(5, 8)), $mul.ref(4, 1)), 768);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(6, 8)), $mul.ref(0, 1)), 600);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(6, 8)), $mul.ref(4, 1)), 384);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(7, 8)), $mul.ref(0, 1)), 1200);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(7, 8)), $mul.ref(4, 1)), 192);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(8, 8)), $mul.ref(0, 1)), 1800);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(8, 8)), $mul.ref(4, 1)), 128);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(9, 8)), $mul.ref(0, 1)), 2400);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(9, 8)), $mul.ref(4, 1)), 96);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(10, 8)), $mul.ref(0, 1)), 4800);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(10, 8)), $mul.ref(4, 1)), 48);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(11, 8)), $mul.ref(0, 1)), 7200);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(11, 8)), $mul.ref(4, 1)), 32);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(12, 8)), $mul.ref(0, 1)), 9600);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(12, 8)), $mul.ref(4, 1)), 24);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(13, 8)), $mul.ref(0, 1)), 14400);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(13, 8)), $mul.ref(4, 1)), 16);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(14, 8)), $mul.ref(0, 1)), 19200);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(14, 8)), $mul.ref(4, 1)), 12);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(15, 8)), $mul.ref(0, 1)), 38400);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(15, 8)), $mul.ref(4, 1)), 6);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(16, 8)), $mul.ref(0, 1)), 57600);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(16, 8)), $mul.ref(4, 1)), 4);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(17, 8)), $mul.ref(0, 1)), 115200);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(17, 8)), $mul.ref(4, 1)), 2);
    $M.89 := $store.i32($M.89, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(18, 8)), $mul.ref(0, 1)), 230400);
    $M.17 := $store.i16($M.17, $add.ref($add.ref($add.ref(divisor_table, $mul.ref(0, 152)), $mul.ref(18, 8)), $mul.ref(4, 1)), 1);
    $M.18 := 0;
    $M.0 := $store.i8($M.0, .str.57, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(14, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(17, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(18, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(22, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(23, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(24, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(25, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(26, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.57, $mul.ref(0, 28)), $mul.ref(27, 1)), 0);
    $M.0 := $store.i8($M.0, .str.58, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(5, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(10, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(12, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(17, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.58, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.13, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(1, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(2, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(4, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(13, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(14, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(15, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(17, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(19, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.13, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.195, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(10, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(11, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(13, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(15, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(16, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(17, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(18, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(19, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(20, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.195, $mul.ref(0, 22)), $mul.ref(21, 1)), 0);
    $M.0 := $store.i8($M.0, .str.200, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(13, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.200, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.206, 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(6, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(9, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(10, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(11, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(13, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(15, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(18, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.206, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    $M.0 := $store.i8($M.0, .str.32, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(1, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(3, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(4, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(12, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(15, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(17, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(18, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.32, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.51, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(15, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(17, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(21, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(22, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(23, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.51, $mul.ref(0, 25)), $mul.ref(24, 1)), 0);
    $M.0 := $store.i8($M.0, .str.10, 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(2, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(3, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(6, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(7, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(12, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.10, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.16, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(7, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(8, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(14, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(15, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(16, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(18, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(19, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(20, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(21, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(22, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(23, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(24, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(25, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.16, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.55, 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(1, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(2, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(6, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(9, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(15, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(16, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(17, 1)), 118);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(19, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(20, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(21, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.55, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.4, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(2, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(6, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(7, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(9, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(13, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(17, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(19, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(20, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(21, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(22, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(23, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(25, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(26, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(27, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.4, $mul.ref(0, 29)), $mul.ref(28, 1)), 0);
    $M.0 := $store.i8($M.0, .str.6, 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.6, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.7, 76);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 4)), $mul.ref(1, 1)), 67);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 4)), $mul.ref(2, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.7, $mul.ref(0, 4)), $mul.ref(3, 1)), 0);
    $M.0 := $store.i8($M.0, .str.169, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(8, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(10, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(11, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(12, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(13, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(15, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(16, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(17, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(18, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(19, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(20, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(22, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.169, $mul.ref(0, 24)), $mul.ref(23, 1)), 0);
    $M.0 := $store.i8($M.0, .str.28, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(5, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(8, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(9, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(10, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(13, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(14, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.28, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.1, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(5, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(7, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(8, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(10, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(11, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(12, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.1, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.194, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(6, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(9, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(11, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(12, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(13, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(14, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(15, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(16, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(17, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(18, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.194, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.190, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(5, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(8, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(9, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.190, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.183, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(13, 1)), 104);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(14, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(16, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(21, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(22, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(23, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(24, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(25, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.183, $mul.ref(0, 27)), $mul.ref(26, 1)), 0);
    $M.0 := $store.i8($M.0, .str.29, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(6, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(12, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(15, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.29, $mul.ref(0, 17)), $mul.ref(16, 1)), 0);
    $M.0 := $store.i8($M.0, .str.63, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(5, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(9, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.63, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.66, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(4, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(7, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(8, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(9, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(10, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(11, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.66, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.188, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(10, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(11, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(13, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(14, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.188, $mul.ref(0, 16)), $mul.ref(15, 1)), 0);
    $M.0 := $store.i8($M.0, .str.69, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.69, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.176, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(5, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(6, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(8, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.176, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.179, 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(1, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(2, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(3, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(4, 1)), 107);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(5, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(6, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(7, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(10, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(11, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(13, 1)), 120);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(14, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(15, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(16, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(17, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(18, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(19, 1)), 121);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.179, $mul.ref(0, 21)), $mul.ref(20, 1)), 0);
    $M.0 := $store.i8($M.0, .str.21, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(8, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.21, $mul.ref(0, 10)), $mul.ref(9, 1)), 0);
    $M.0 := $store.i8($M.0, .str.78, 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(1, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(2, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(3, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(5, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(6, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(7, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(8, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(9, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(10, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.78, $mul.ref(0, 13)), $mul.ref(12, 1)), 0);
    $M.0 := $store.i8($M.0, .str.163, 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(1, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(2, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(3, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(4, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(5, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(6, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(7, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(9, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(11, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(12, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(14, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(15, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(16, 1)), 69);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(17, 1)), 50);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(18, 1)), 80);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(19, 1)), 82);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(20, 1)), 79);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(21, 1)), 77);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.163, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.152, 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(1, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(3, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(6, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(7, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(8, 1)), 108);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(9, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(11, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(12, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(14, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(16, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(17, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(18, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(19, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(20, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(21, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(22, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(23, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(24, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.152, $mul.ref(0, 26)), $mul.ref(25, 1)), 0);
    $M.0 := $store.i8($M.0, .str.159, 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(1, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(2, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(3, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(5, 1)), 119);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(7, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(8, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(9, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.159, $mul.ref(0, 11)), $mul.ref(10, 1)), 0);
    $M.0 := $store.i8($M.0, .str.104, 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(1, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(2, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(3, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(4, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(6, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(7, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(8, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(9, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(12, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(13, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(14, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(15, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(16, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.104, $mul.ref(0, 18)), $mul.ref(17, 1)), 0);
    $M.0 := $store.i8($M.0, .str.137, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(4, 1)), 98);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(5, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(6, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(7, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.137, $mul.ref(0, 14)), $mul.ref(13, 1)), 0);
    $M.0 := $store.i8($M.0, .str.121, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(4, 1)), 109);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(5, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(6, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(7, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(8, 1)), 102);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(9, 1)), 97);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(10, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(11, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(12, 1)), 117);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(15, 1)), 110);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(16, 1)), 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(17, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(18, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(19, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(20, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(21, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.121, $mul.ref(0, 23)), $mul.ref(22, 1)), 0);
    $M.0 := $store.i8($M.0, .str.87, 103);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(1, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(2, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(3, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(4, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(5, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(6, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(7, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(8, 1)), 95);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(9, 1)), 100);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(10, 1)), 101);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(11, 1)), 115);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(12, 1)), 99);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(13, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(14, 1)), 105);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(15, 1)), 112);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(16, 1)), 116);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(17, 1)), 111);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(18, 1)), 114);
    $M.0 := $store.i8($M.0, $add.ref($add.ref(.str.87, $mul.ref(0, 20)), $mul.ref(19, 1)), 0);
    call {:si_unique_call 2030} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 508163);

procedure devirtbounce(funcPtr: ref, arg: ref, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: ref, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 509195);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 510227);

procedure devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: i32) returns ($r: i32)
{
  var $p0: ref;
  var $i1: i32;
  var $i2: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i2 := $eq.ref(__builtinx_object_size, $p0);
    assume {:branchcond $i2} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i2 == 1);
    assume false;
    return;

  $bb2:
    assume $i2 == 1;
    call {:si_unique_call 2031} $i1 := __builtinx_object_size();
    $r := $i1;
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.14, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.0, $M.87, $M.88, $M.89, $M.17, $M.18, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 2032} __SMACK_static_init();
    call {:si_unique_call 2033} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.28, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.7, $M.51, $M.9, $M.10, $M.11, $M.12, $M.13, $M.52, $M.53, $M.54, $M.55, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.33, $M.34, $M.35, $M.36, $M.29, $M.30, $M.31, $M.32, $M.56, $M.57, $M.58, $M.59, $M.14, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.86, $M.87, $M.88, $M.89, $M.17, $M.18, $CurrAddr, $M.21, $M.22, $M.19, $M.20, $M.27, $M.23, $M.16, $M.15;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation edge_startup_loop_$bb37(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p12: ref, in_$p17: ref, in_$p19: ref, in_$p172: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$p196: ref, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$p205: ref, in_$p206: ref, in_$i207: i24, in_$i208: i24, in_$i209: i24, in_$p210: ref, in_$p211: ref, in_$i212: i8, in_$i213: i64, in_$i214: i64, in_$i215: i64, in_$i216: i1, in_$p217: ref, in_$p218: ref, in_$p219: ref, in_$p220: ref, in_$i221: i64, in_$i222: i1, in_$i223: i64, in_$p224: ref, in_$p225: ref, in_$p226: ref, in_$p227: ref, in_$i228: i64, in_$i229: i1, in_$p232: ref, in_$i233: i8, in_$p234: ref, in_$p235: ref, in_$i236: i8, in_$i237: i32, in_$i238: i32, in_$p239: ref, in_$p240: ref, in_$i241: i32, in_$p242: ref, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$i246: i8, in_$i247: i32, in_$i248: i8, in_$i249: i8, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$i259: i24, in_$i260: i24, in_$i261: i24, in_$p262: ref, in_$p263: ref, in_$i264: i8, in_$i265: i64, in_$i266: i64, in_$i267: i64, in_$i268: i1, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$i273: i64, in_$i274: i1, in_$i275: i64, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$p279: ref, in_$i280: i64, in_$i281: i1, in_$p284: ref, in_$i285: i8, in_$p286: ref, in_$i287: i32, in_$p288: ref, in_$i289: i8, in_$i290: i32, in_$i291: i32, in_$p292: ref, in_$p293: ref, in_$i294: i32, in_$p295: ref, in_$p296: ref, in_$p297: ref, in_$i298: i8, in_$i299: i8, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$p307: ref, in_$p308: ref, in_$i309: i24, in_$i310: i24, in_$i311: i24, in_$p312: ref, in_$p313: ref, in_$i314: i8, in_$i315: i64, in_$i316: i64, in_$i317: i64, in_$i318: i1, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$i322: i8, in_$i323: i8, in_$i324: i32, in_$p325: ref, in_$p326: ref, in_$p327: ref, in_$p329: ref, in_$i330: i8, in_$i331: i32, in_$i332: i1, in_$i184: i8, in_$i185: i8, in_$i186: i8, in_$i187: i32, in_$i333: i8, in_$i334: i8, in_$i335: i8) returns (out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$p196: ref, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$p205: ref, out_$p206: ref, out_$i207: i24, out_$i208: i24, out_$i209: i24, out_$p210: ref, out_$p211: ref, out_$i212: i8, out_$i213: i64, out_$i214: i64, out_$i215: i64, out_$i216: i1, out_$p217: ref, out_$p218: ref, out_$p219: ref, out_$p220: ref, out_$i221: i64, out_$i222: i1, out_$i223: i64, out_$p224: ref, out_$p225: ref, out_$p226: ref, out_$p227: ref, out_$i228: i64, out_$i229: i1, out_$p232: ref, out_$i233: i8, out_$p234: ref, out_$p235: ref, out_$i236: i8, out_$i237: i32, out_$i238: i32, out_$p239: ref, out_$p240: ref, out_$i241: i32, out_$p242: ref, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$i246: i8, out_$i247: i32, out_$i248: i8, out_$i249: i8, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$i259: i24, out_$i260: i24, out_$i261: i24, out_$p262: ref, out_$p263: ref, out_$i264: i8, out_$i265: i64, out_$i266: i64, out_$i267: i64, out_$i268: i1, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$i273: i64, out_$i274: i1, out_$i275: i64, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$p279: ref, out_$i280: i64, out_$i281: i1, out_$p284: ref, out_$i285: i8, out_$p286: ref, out_$i287: i32, out_$p288: ref, out_$i289: i8, out_$i290: i32, out_$i291: i32, out_$p292: ref, out_$p293: ref, out_$i294: i32, out_$p295: ref, out_$p296: ref, out_$p297: ref, out_$i298: i8, out_$i299: i8, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$p307: ref, out_$p308: ref, out_$i309: i24, out_$i310: i24, out_$i311: i24, out_$p312: ref, out_$p313: ref, out_$i314: i8, out_$i315: i64, out_$i316: i64, out_$i317: i64, out_$i318: i1, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$i322: i8, out_$i323: i8, out_$i324: i32, out_$p325: ref, out_$p326: ref, out_$p327: ref, out_$p329: ref, out_$i330: i8, out_$i331: i32, out_$i332: i1, out_$i184: i8, out_$i185: i8, out_$i186: i8, out_$i187: i32, out_$i333: i8, out_$i334: i8, out_$i335: i8)
{

  entry:
    out_$p188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$p202, out_$p203, out_$p204, out_$p205, out_$p206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$p218, out_$p219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$p232, out_$i233, out_$p234, out_$p235, out_$i236, out_$i237, out_$i238, out_$p239, out_$p240, out_$i241, out_$p242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$p272, out_$i273, out_$i274, out_$i275, out_$p276, out_$p277, out_$p278, out_$p279, out_$i280, out_$i281, out_$p284, out_$i285, out_$p286, out_$i287, out_$p288, out_$i289, out_$i290, out_$i291, out_$p292, out_$p293, out_$i294, out_$p295, out_$p296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$p305, out_$p306, out_$p307, out_$p308, out_$i309, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$i324, out_$p325, out_$p326, out_$p327, out_$p329, out_$i330, out_$i331, out_$i332, out_$i184, out_$i185, out_$i186, out_$i187, out_$i333, out_$i334, out_$i335 := in_$p188, in_$p189, in_$p190, in_$p191, in_$p192, in_$p193, in_$i194, in_$p196, in_$i197, in_$i198, in_$i199, in_$i200, in_$p201, in_$p202, in_$p203, in_$p204, in_$p205, in_$p206, in_$i207, in_$i208, in_$i209, in_$p210, in_$p211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$p217, in_$p218, in_$p219, in_$p220, in_$i221, in_$i222, in_$i223, in_$p224, in_$p225, in_$p226, in_$p227, in_$i228, in_$i229, in_$p232, in_$i233, in_$p234, in_$p235, in_$i236, in_$i237, in_$i238, in_$p239, in_$p240, in_$i241, in_$p242, in_$p243, in_$p244, in_$p245, in_$i246, in_$i247, in_$i248, in_$i249, in_$i250, in_$i251, in_$i252, in_$p253, in_$p254, in_$p255, in_$p256, in_$p257, in_$p258, in_$i259, in_$i260, in_$i261, in_$p262, in_$p263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$p269, in_$p270, in_$p271, in_$p272, in_$i273, in_$i274, in_$i275, in_$p276, in_$p277, in_$p278, in_$p279, in_$i280, in_$i281, in_$p284, in_$i285, in_$p286, in_$i287, in_$p288, in_$i289, in_$i290, in_$i291, in_$p292, in_$p293, in_$i294, in_$p295, in_$p296, in_$p297, in_$i298, in_$i299, in_$i300, in_$i301, in_$i302, in_$p303, in_$p304, in_$p305, in_$p306, in_$p307, in_$p308, in_$i309, in_$i310, in_$i311, in_$p312, in_$p313, in_$i314, in_$i315, in_$i316, in_$i317, in_$i318, in_$p319, in_$i320, in_$p321, in_$i322, in_$i323, in_$i324, in_$p325, in_$p326, in_$p327, in_$p329, in_$i330, in_$i331, in_$i332, in_$i184, in_$i185, in_$i186, in_$i187, in_$i333, in_$i334, in_$i335;
    goto $bb37, exit;

  $bb37:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_239;

  $bb78:
    assume out_$i332 == 1;
    assume {:verifier.code 0} true;
    out_$i184, out_$i185, out_$i186, out_$i187 := out_$i323, out_$i299, out_$i249, out_$i324;
    goto $bb78_dummy;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    out_$i333, out_$i334, out_$i335 := out_$i249, out_$i299, out_$i323;
    assume true;
    goto $bb78;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    out_$i332 := $sgt.i32(out_$i331, out_$i324);
    goto corral_source_split_452;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    out_$i331 := $zext.i8.i32(out_$i330);
    goto corral_source_split_451;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    out_$i330 := $load.i8($M.0, out_$p329);
    goto corral_source_split_450;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    out_$p329 := $add.ref($add.ref($add.ref(out_$p327, $mul.ref(0, 40)), $mul.ref(0, 1)), $mul.ref(4, 1));
    goto corral_source_split_449;

  corral_source_split_447:
    assume {:verifier.code 0} true;
    out_$p327 := $load.ref($M.0, out_$p326);
    goto corral_source_split_448;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    out_$p326 := $add.ref($add.ref(out_$p325, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_447;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    out_$p325 := $load.ref($M.0, in_$p172);
    goto corral_source_split_446;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    out_$i324 := $add.i32(out_$i187, 1);
    call {:si_unique_call 73} {:cexpr "i"} boogie_si_record_i32(out_$i324);
    goto corral_source_split_445;

  $bb77:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    out_$i323 := out_$i322;
    goto $bb77;

  $bb69:
    assume out_$i300 == 1;
    assume {:verifier.code 0} true;
    out_$i323 := out_$i184;
    goto $bb77;

  corral_source_split_404:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb69, $bb70;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    out_$i300 := $trunc.i8.i1(out_$i184);
    goto corral_source_split_404;

  $bb68:
    assume {:verifier.code 0} true;
    goto corral_source_split_403;

  corral_source_split_401:
    assume {:verifier.code 0} true;
    out_$i299 := out_$i298;
    goto $bb68;

  $bb54:
    assume out_$i250 == 1;
    assume {:verifier.code 0} true;
    out_$i299 := out_$i185;
    goto $bb68;

  corral_source_split_328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    out_$i250 := $trunc.i8.i1(out_$i185);
    goto corral_source_split_328;

  $bb53:
    assume {:verifier.code 0} true;
    goto corral_source_split_327;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    out_$i249 := out_$i248;
    goto $bb53;

  $bb39:
    assume out_$i198 == 1;
    assume {:verifier.code 0} true;
    out_$i249 := out_$i186;
    goto $bb53;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    out_$i198 := $trunc.i8.i1(out_$i186);
    goto corral_source_split_251;

  corral_source_split_249:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} out_$i197 := usb_endpoint_maxp(out_$p196);
    call {:si_unique_call 43} {:cexpr "buffer_size"} boogie_si_record_i32(out_$i197);
    goto corral_source_split_250;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    out_$p196 := $add.ref($add.ref(out_$p193, $mul.ref(out_$i194, 72)), $mul.ref(0, 1));
    goto corral_source_split_249;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    goto corral_source_split_248;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    out_$i194 := $sext.i32.i64(out_$i187);
    goto corral_source_split_247;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    out_$p193 := $load.ref($M.0, out_$p192);
    goto corral_source_split_246;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    out_$p192 := $add.ref($add.ref(out_$p191, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_245;

  corral_source_split_243:
    assume {:verifier.code 0} true;
    out_$p191 := $load.ref($M.0, out_$p190);
    goto corral_source_split_244;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(out_$p189, $mul.ref(0, 1568)), $mul.ref(0, 1));
    goto corral_source_split_243;

  corral_source_split_241:
    assume {:verifier.code 0} true;
    out_$p189 := $load.ref($M.0, out_$p188);
    goto corral_source_split_242;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p188 := $add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(16, 1));
    goto corral_source_split_241;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_325;

  $bb42:
    assume !(out_$i200 == 1);
    assume {:verifier.code 0} true;
    out_$i248 := out_$i186;
    goto $bb52;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    out_$i248 := 1;
    goto $bb52;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} usb_fill_int_urb(out_$p240, in_$p17, out_$i241, out_$p243, out_$i197, edge_interrupt_callback, out_$p244, out_$i247);
    goto corral_source_split_323;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    out_$i247 := $zext.i8.i32(out_$i246);
    goto corral_source_split_322;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    out_$i246 := $load.i8($M.0, out_$p245);
    goto corral_source_split_321;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    out_$p244 := $bitcast.ref.ref(in_$p19);
    out_$p245 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(out_$i194, 72)), $mul.ref(0, 1)), $mul.ref(6, 1));
    goto corral_source_split_320;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    out_$p243 := $load.ref($M.0, out_$p242);
    goto corral_source_split_319;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    out_$p242 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_318;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    out_$i241 := $or.i32(out_$i238, 1073741952);
    goto corral_source_split_317;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    out_$p240 := $load.ref($M.0, out_$p239);
    goto corral_source_split_316;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    out_$p239 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_315;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} out_$i238 := __create_pipe(in_$p17, out_$i237);
    call {:si_unique_call 53} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i238);
    goto corral_source_split_314;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    out_$i237 := $zext.i8.i32(out_$i236);
    goto corral_source_split_313;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    out_$i236 := $load.i8($M.0, out_$p235);
    goto corral_source_split_312;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p234, out_$i233);
    out_$p235 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(out_$i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_311;

  corral_source_split_309:
    assume {:verifier.code 0} true;
    out_$p234 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1160, 1));
    goto corral_source_split_310;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    out_$i233 := $load.i8($M.0, out_$p232);
    goto corral_source_split_309;

  $bb51:
    out_$p232 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(out_$i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_308;

  $bb50:
    assume !(out_$i229 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    out_$i229 := $eq.i64(out_$i228, 0);
    goto corral_source_split_301;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    out_$i228 := $p2i.ref.i64(out_$p227);
    goto corral_source_split_300;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    out_$p227 := $load.ref($M.0, out_$p226);
    goto corral_source_split_299;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_298;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p225, out_$p224);
    goto corral_source_split_297;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    out_$p225 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1168, 1));
    goto corral_source_split_296;

  SeqInstr_21:
    goto corral_source_split_295;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  corral_source_split_294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 50} out_$p224 := kmalloc(out_$i223, 208);
    goto SeqInstr_20;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i223 := $sext.i32.i64(out_$i197);
    goto corral_source_split_294;

  $bb47:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_290:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i64(out_$i221, 0);
    goto corral_source_split_290;

  corral_source_split_288:
    assume {:verifier.code 0} true;
    out_$i221 := $p2i.ref.i64(out_$p220);
    goto corral_source_split_289;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    out_$p220 := $load.ref($M.0, out_$p219);
    goto corral_source_split_288;

  corral_source_split_286:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_287;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p218, out_$p217);
    goto corral_source_split_286;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    out_$p218 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1176, 1));
    goto corral_source_split_285;

  SeqInstr_18:
    goto corral_source_split_284;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} out_$p217 := ldv_usb_alloc_urb_31(0, 208);
    goto SeqInstr_17;

  $bb44:
    assume !(out_$i216 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} __dynamic_dev_dbg.ref.ref.ref(in_$p7, in_$p12, .str.83);
    goto corral_source_split_282;

  $bb43:
    assume out_$i216 == 1;
    goto corral_source_split_281;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    out_$i216 := $ne.i64(out_$i215, 0);
    goto corral_source_split_279;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 46} out_$i215 := ldv__builtin_expect(out_$i214, 0);
    call {:si_unique_call 47} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i215);
    goto corral_source_split_278;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    out_$i214 := $and.i64(out_$i213, 1);
    goto corral_source_split_277;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    out_$i213 := $zext.i8.i64(out_$i212);
    goto corral_source_split_276;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    out_$i212 := $load.i8($M.6, out_$p211);
    goto corral_source_split_275;

  corral_source_split_273:
    assume {:verifier.code 0} true;
    out_$p211 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_274;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p210, 0);
    goto corral_source_split_273;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_272;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p206, out_$i209);
    goto corral_source_split_271;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    out_$i209 := $or.i24(out_$i208, 2854);
    goto corral_source_split_270;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    out_$i208 := $and.i24(out_$i207, $sub.i24(0, 262144));
    goto corral_source_split_269;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    out_$i207 := $load.i24($M.5, out_$p206);
    goto corral_source_split_268;

  corral_source_split_266:
    assume {:verifier.code 0} true;
    out_$p206 := $bitcast.ref.ref(out_$p205);
    goto corral_source_split_267;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    out_$p205 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_266;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p204, .str.83);
    goto corral_source_split_265;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_264;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p203, .str.2);
    goto corral_source_split_263;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_262;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p202, .str.78);
    goto corral_source_split_261;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_260;

  corral_source_split_258:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p201, .str);
    goto corral_source_split_259;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(in_$p7, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_258;

  $bb41:
    assume out_$i200 == 1;
    goto corral_source_split_257;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    out_$i200 := $ne.i32(out_$i199, 0);
    goto corral_source_split_255;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 44} out_$i199 := usb_endpoint_is_int_in(out_$p196);
    call {:si_unique_call 45} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i199);
    goto corral_source_split_254;

  $bb40:
    assume !(out_$i198 == 1);
    goto corral_source_split_253;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_401;

  $bb57:
    assume !(out_$i252 == 1);
    assume {:verifier.code 0} true;
    out_$i298 := out_$i185;
    goto $bb67;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    out_$i298 := 1;
    goto $bb67;

  corral_source_split_398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} usb_fill_bulk_urb(out_$p293, in_$p17, out_$i294, out_$p296, out_$i287, edge_bulk_in_callback, out_$p297);
    goto corral_source_split_399;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    out_$p297 := $bitcast.ref.ref(in_$p19);
    goto corral_source_split_398;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    out_$p296 := $load.ref($M.0, out_$p295);
    goto corral_source_split_397;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    out_$p295 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1192, 1));
    goto corral_source_split_396;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    out_$i294 := $or.i32(out_$i291, $sub.i32(0, 1073741696));
    goto corral_source_split_395;

  corral_source_split_393:
    assume {:verifier.code 0} true;
    out_$p293 := $load.ref($M.0, out_$p292);
    goto corral_source_split_394;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    out_$p292 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_393;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 65} out_$i291 := __create_pipe(in_$p17, out_$i290);
    call {:si_unique_call 66} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i291);
    goto corral_source_split_392;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    out_$i290 := $zext.i8.i32(out_$i289);
    goto corral_source_split_391;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    out_$i289 := $load.i8($M.0, out_$p288);
    goto corral_source_split_390;

  corral_source_split_388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} out_$i287 := usb_endpoint_maxp(out_$p196);
    call {:si_unique_call 64} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i287);
    out_$p288 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(out_$i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_389;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p286, out_$i285);
    goto corral_source_split_388;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    out_$p286 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1184, 1));
    goto corral_source_split_387;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    out_$i285 := $load.i8($M.0, out_$p284);
    goto corral_source_split_386;

  $bb66:
    out_$p284 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(out_$i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_385;

  $bb65:
    assume !(out_$i281 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    out_$i281 := $eq.i64(out_$i280, 0);
    goto corral_source_split_378;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    out_$i280 := $p2i.ref.i64(out_$p279);
    goto corral_source_split_377;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    out_$p279 := $load.ref($M.0, out_$p278);
    goto corral_source_split_376;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    out_$p278 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1192, 1));
    goto corral_source_split_375;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p277, out_$p276);
    goto corral_source_split_374;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    out_$p277 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1192, 1));
    goto corral_source_split_373;

  SeqInstr_27:
    goto corral_source_split_372;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 61} out_$p276 := kmalloc(out_$i275, 208);
    goto SeqInstr_26;

  $bb63:
    assume {:verifier.code 0} true;
    out_$i275 := $sext.i32.i64(out_$i197);
    goto corral_source_split_371;

  $bb62:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    out_$i274 := $eq.i64(out_$i273, 0);
    goto corral_source_split_367;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    out_$i273 := $p2i.ref.i64(out_$p272);
    goto corral_source_split_366;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    out_$p272 := $load.ref($M.0, out_$p271);
    goto corral_source_split_365;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    out_$p271 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_364;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p270, out_$p269);
    goto corral_source_split_363;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    out_$p270 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1200, 1));
    goto corral_source_split_362;

  SeqInstr_24:
    goto corral_source_split_361;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} out_$p269 := ldv_usb_alloc_urb_32(0, 208);
    goto SeqInstr_23;

  $bb59:
    assume !(out_$i268 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 59} __dynamic_dev_dbg.ref.ref.ref(in_$p8, in_$p12, .str.84);
    goto corral_source_split_359;

  $bb58:
    assume out_$i268 == 1;
    goto corral_source_split_358;

  corral_source_split_356:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    out_$i268 := $ne.i64(out_$i267, 0);
    goto corral_source_split_356;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 57} out_$i267 := ldv__builtin_expect(out_$i266, 0);
    call {:si_unique_call 58} {:cexpr "tmp___10"} boogie_si_record_i64(out_$i267);
    goto corral_source_split_355;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    out_$i266 := $and.i64(out_$i265, 1);
    goto corral_source_split_354;

  corral_source_split_352:
    assume {:verifier.code 0} true;
    out_$i265 := $zext.i8.i64(out_$i264);
    goto corral_source_split_353;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    out_$i264 := $load.i8($M.6, out_$p263);
    goto corral_source_split_352;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    out_$p263 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_351;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p262, 0);
    goto corral_source_split_350;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    out_$p262 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_349;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p258, out_$i261);
    goto corral_source_split_348;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    out_$i261 := $or.i24(out_$i260, 2889);
    goto corral_source_split_347;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    out_$i260 := $and.i24(out_$i259, $sub.i24(0, 262144));
    goto corral_source_split_346;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    out_$i259 := $load.i24($M.5, out_$p258);
    goto corral_source_split_345;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    out_$p258 := $bitcast.ref.ref(out_$p257);
    goto corral_source_split_344;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    out_$p257 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_343;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p256, .str.84);
    goto corral_source_split_342;

  corral_source_split_340:
    assume {:verifier.code 0} true;
    out_$p256 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_341;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p255, .str.2);
    goto corral_source_split_340;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    out_$p255 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_339;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p254, .str.78);
    goto corral_source_split_338;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    out_$p254 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_337;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p253, .str);
    goto corral_source_split_336;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    out_$p253 := $add.ref($add.ref(in_$p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_335;

  $bb56:
    assume out_$i252 == 1;
    goto corral_source_split_334;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    out_$i252 := $ne.i32(out_$i251, 0);
    goto corral_source_split_332;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 55} out_$i251 := usb_endpoint_is_bulk_in(out_$p196);
    call {:si_unique_call 56} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i251);
    goto corral_source_split_331;

  $bb55:
    assume !(out_$i250 == 1);
    goto corral_source_split_330;

  $bb76:
    assume {:verifier.code 0} true;
    goto corral_source_split_442;

  $bb72:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    out_$i322 := out_$i184;
    goto $bb76;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    out_$i322 := 1;
    goto $bb76;

  corral_source_split_439:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p321, out_$i320);
    goto corral_source_split_440;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    out_$p321 := $add.ref($add.ref(in_$p19, $mul.ref(0, 1312)), $mul.ref(1288, 1));
    goto corral_source_split_439;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    out_$i320 := $load.i8($M.0, out_$p319);
    goto corral_source_split_438;

  $bb75:
    out_$p319 := $add.ref($add.ref($add.ref(out_$p193, $mul.ref(out_$i194, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_437;

  $bb74:
    assume !(out_$i318 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_435:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} __dynamic_dev_dbg.ref.ref.ref(in_$p9, in_$p12, .str.85);
    goto corral_source_split_435;

  $bb73:
    assume out_$i318 == 1;
    goto corral_source_split_434;

  corral_source_split_432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    out_$i318 := $ne.i64(out_$i317, 0);
    goto corral_source_split_432;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 70} out_$i317 := ldv__builtin_expect(out_$i316, 0);
    call {:si_unique_call 71} {:cexpr "tmp___15"} boogie_si_record_i64(out_$i317);
    goto corral_source_split_431;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    out_$i316 := $and.i64(out_$i315, 1);
    goto corral_source_split_430;

  corral_source_split_428:
    assume {:verifier.code 0} true;
    out_$i315 := $zext.i8.i64(out_$i314);
    goto corral_source_split_429;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i8($M.6, out_$p313);
    goto corral_source_split_428;

  corral_source_split_426:
    assume {:verifier.code 0} true;
    out_$p313 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_427;

  corral_source_split_425:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p312, 0);
    goto corral_source_split_426;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    out_$p312 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_425;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p308, out_$i311);
    goto corral_source_split_424;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    out_$i311 := $or.i24(out_$i310, 2920);
    goto corral_source_split_423;

  corral_source_split_421:
    assume {:verifier.code 0} true;
    out_$i310 := $and.i24(out_$i309, $sub.i24(0, 262144));
    goto corral_source_split_422;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    out_$i309 := $load.i24($M.5, out_$p308);
    goto corral_source_split_421;

  corral_source_split_419:
    assume {:verifier.code 0} true;
    out_$p308 := $bitcast.ref.ref(out_$p307);
    goto corral_source_split_420;

  corral_source_split_418:
    assume {:verifier.code 0} true;
    out_$p307 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_419;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p306, .str.85);
    goto corral_source_split_418;

  corral_source_split_416:
    assume {:verifier.code 0} true;
    out_$p306 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_417;

  corral_source_split_415:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p305, .str.2);
    goto corral_source_split_416;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    out_$p305 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_415;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p304, .str.78);
    goto corral_source_split_414;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    out_$p304 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_413;

  corral_source_split_411:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p303, .str);
    goto corral_source_split_412;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    out_$p303 := $add.ref($add.ref(in_$p9, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_411;

  $bb71:
    assume out_$i302 == 1;
    goto corral_source_split_410;

  corral_source_split_408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    out_$i302 := $ne.i32(out_$i301, 0);
    goto corral_source_split_408;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} out_$i301 := usb_endpoint_is_bulk_out(out_$p196);
    call {:si_unique_call 69} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i301);
    goto corral_source_split_407;

  $bb70:
    assume !(out_$i300 == 1);
    goto corral_source_split_406;

  $bb78_dummy:
    call {:si_unique_call 1} out_$p188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$p202, out_$p203, out_$p204, out_$p205, out_$p206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$p218, out_$p219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$p232, out_$i233, out_$p234, out_$p235, out_$i236, out_$i237, out_$i238, out_$p239, out_$p240, out_$i241, out_$p242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$p272, out_$i273, out_$i274, out_$i275, out_$p276, out_$p277, out_$p278, out_$p279, out_$i280, out_$i281, out_$p284, out_$i285, out_$p286, out_$i287, out_$p288, out_$i289, out_$i290, out_$i291, out_$p292, out_$p293, out_$i294, out_$p295, out_$p296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$p305, out_$p306, out_$p307, out_$p308, out_$i309, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$i324, out_$p325, out_$p326, out_$p327, out_$p329, out_$i330, out_$i331, out_$i332, out_$i184, out_$i185, out_$i186, out_$i187, out_$i333, out_$i334, out_$i335 := edge_startup_loop_$bb37(in_$p0, in_$p7, in_$p8, in_$p9, in_$p12, in_$p17, in_$p19, in_$p172, out_$p188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$p201, out_$p202, out_$p203, out_$p204, out_$p205, out_$p206, out_$i207, out_$i208, out_$i209, out_$p210, out_$p211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$p218, out_$p219, out_$p220, out_$i221, out_$i222, out_$i223, out_$p224, out_$p225, out_$p226, out_$p227, out_$i228, out_$i229, out_$p232, out_$i233, out_$p234, out_$p235, out_$i236, out_$i237, out_$i238, out_$p239, out_$p240, out_$i241, out_$p242, out_$p243, out_$p244, out_$p245, out_$i246, out_$i247, out_$i248, out_$i249, out_$i250, out_$i251, out_$i252, out_$p253, out_$p254, out_$p255, out_$p256, out_$p257, out_$p258, out_$i259, out_$i260, out_$i261, out_$p262, out_$p263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$p269, out_$p270, out_$p271, out_$p272, out_$i273, out_$i274, out_$i275, out_$p276, out_$p277, out_$p278, out_$p279, out_$i280, out_$i281, out_$p284, out_$i285, out_$p286, out_$i287, out_$p288, out_$i289, out_$i290, out_$i291, out_$p292, out_$p293, out_$i294, out_$p295, out_$p296, out_$p297, out_$i298, out_$i299, out_$i300, out_$i301, out_$i302, out_$p303, out_$p304, out_$p305, out_$p306, out_$p307, out_$p308, out_$i309, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i315, out_$i316, out_$i317, out_$i318, out_$p319, out_$i320, out_$p321, out_$i322, out_$i323, out_$i324, out_$p325, out_$p326, out_$p327, out_$p329, out_$i330, out_$i331, out_$i332, out_$i184, out_$i185, out_$i186, out_$i187, out_$i333, out_$i334, out_$i335);
    return;

  exit:
    return;
}



procedure edge_startup_loop_$bb37(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p12: ref, in_$p17: ref, in_$p19: ref, in_$p172: ref, in_$p188: ref, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$p196: ref, in_$i197: i32, in_$i198: i1, in_$i199: i32, in_$i200: i1, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$p205: ref, in_$p206: ref, in_$i207: i24, in_$i208: i24, in_$i209: i24, in_$p210: ref, in_$p211: ref, in_$i212: i8, in_$i213: i64, in_$i214: i64, in_$i215: i64, in_$i216: i1, in_$p217: ref, in_$p218: ref, in_$p219: ref, in_$p220: ref, in_$i221: i64, in_$i222: i1, in_$i223: i64, in_$p224: ref, in_$p225: ref, in_$p226: ref, in_$p227: ref, in_$i228: i64, in_$i229: i1, in_$p232: ref, in_$i233: i8, in_$p234: ref, in_$p235: ref, in_$i236: i8, in_$i237: i32, in_$i238: i32, in_$p239: ref, in_$p240: ref, in_$i241: i32, in_$p242: ref, in_$p243: ref, in_$p244: ref, in_$p245: ref, in_$i246: i8, in_$i247: i32, in_$i248: i8, in_$i249: i8, in_$i250: i1, in_$i251: i32, in_$i252: i1, in_$p253: ref, in_$p254: ref, in_$p255: ref, in_$p256: ref, in_$p257: ref, in_$p258: ref, in_$i259: i24, in_$i260: i24, in_$i261: i24, in_$p262: ref, in_$p263: ref, in_$i264: i8, in_$i265: i64, in_$i266: i64, in_$i267: i64, in_$i268: i1, in_$p269: ref, in_$p270: ref, in_$p271: ref, in_$p272: ref, in_$i273: i64, in_$i274: i1, in_$i275: i64, in_$p276: ref, in_$p277: ref, in_$p278: ref, in_$p279: ref, in_$i280: i64, in_$i281: i1, in_$p284: ref, in_$i285: i8, in_$p286: ref, in_$i287: i32, in_$p288: ref, in_$i289: i8, in_$i290: i32, in_$i291: i32, in_$p292: ref, in_$p293: ref, in_$i294: i32, in_$p295: ref, in_$p296: ref, in_$p297: ref, in_$i298: i8, in_$i299: i8, in_$i300: i1, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$p305: ref, in_$p306: ref, in_$p307: ref, in_$p308: ref, in_$i309: i24, in_$i310: i24, in_$i311: i24, in_$p312: ref, in_$p313: ref, in_$i314: i8, in_$i315: i64, in_$i316: i64, in_$i317: i64, in_$i318: i1, in_$p319: ref, in_$i320: i8, in_$p321: ref, in_$i322: i8, in_$i323: i8, in_$i324: i32, in_$p325: ref, in_$p326: ref, in_$p327: ref, in_$p329: ref, in_$i330: i8, in_$i331: i32, in_$i332: i1, in_$i184: i8, in_$i185: i8, in_$i186: i8, in_$i187: i32, in_$i333: i8, in_$i334: i8, in_$i335: i8) returns (out_$p188: ref, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$p196: ref, out_$i197: i32, out_$i198: i1, out_$i199: i32, out_$i200: i1, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$p205: ref, out_$p206: ref, out_$i207: i24, out_$i208: i24, out_$i209: i24, out_$p210: ref, out_$p211: ref, out_$i212: i8, out_$i213: i64, out_$i214: i64, out_$i215: i64, out_$i216: i1, out_$p217: ref, out_$p218: ref, out_$p219: ref, out_$p220: ref, out_$i221: i64, out_$i222: i1, out_$i223: i64, out_$p224: ref, out_$p225: ref, out_$p226: ref, out_$p227: ref, out_$i228: i64, out_$i229: i1, out_$p232: ref, out_$i233: i8, out_$p234: ref, out_$p235: ref, out_$i236: i8, out_$i237: i32, out_$i238: i32, out_$p239: ref, out_$p240: ref, out_$i241: i32, out_$p242: ref, out_$p243: ref, out_$p244: ref, out_$p245: ref, out_$i246: i8, out_$i247: i32, out_$i248: i8, out_$i249: i8, out_$i250: i1, out_$i251: i32, out_$i252: i1, out_$p253: ref, out_$p254: ref, out_$p255: ref, out_$p256: ref, out_$p257: ref, out_$p258: ref, out_$i259: i24, out_$i260: i24, out_$i261: i24, out_$p262: ref, out_$p263: ref, out_$i264: i8, out_$i265: i64, out_$i266: i64, out_$i267: i64, out_$i268: i1, out_$p269: ref, out_$p270: ref, out_$p271: ref, out_$p272: ref, out_$i273: i64, out_$i274: i1, out_$i275: i64, out_$p276: ref, out_$p277: ref, out_$p278: ref, out_$p279: ref, out_$i280: i64, out_$i281: i1, out_$p284: ref, out_$i285: i8, out_$p286: ref, out_$i287: i32, out_$p288: ref, out_$i289: i8, out_$i290: i32, out_$i291: i32, out_$p292: ref, out_$p293: ref, out_$i294: i32, out_$p295: ref, out_$p296: ref, out_$p297: ref, out_$i298: i8, out_$i299: i8, out_$i300: i1, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$p305: ref, out_$p306: ref, out_$p307: ref, out_$p308: ref, out_$i309: i24, out_$i310: i24, out_$i311: i24, out_$p312: ref, out_$p313: ref, out_$i314: i8, out_$i315: i64, out_$i316: i64, out_$i317: i64, out_$i318: i1, out_$p319: ref, out_$i320: i8, out_$p321: ref, out_$i322: i8, out_$i323: i8, out_$i324: i32, out_$p325: ref, out_$p326: ref, out_$p327: ref, out_$p329: ref, out_$i330: i8, out_$i331: i32, out_$i332: i1, out_$i184: i8, out_$i185: i8, out_$i186: i8, out_$i187: i32, out_$i333: i8, out_$i334: i8, out_$i335: i8);
  modifies $M.0, assertsPassed, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation edge_open_loop_$bb28(in_$p5: ref, in_$p9: ref, in_$i121: i64, in_$p122: ref, in_$i123: i64, in_$p124: ref, in_$i125: i8, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i1, in_$i130: i8, in_$i131: i1, in_$i132: i1, in_$i133: i64, in_$i134: i1, in_$i136: i1, in_$i135: i1, in_$i137: i32, in_$i138: i1, in_$i139: i64) returns (out_$i121: i64, out_$p122: ref, out_$i123: i64, out_$p124: ref, out_$i125: i8, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i1, out_$i130: i8, out_$i131: i1, out_$i132: i1, out_$i133: i64, out_$i134: i1, out_$i136: i1, out_$i135: i1, out_$i137: i32, out_$i138: i1, out_$i139: i64)
{

  entry:
    out_$i121, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i136, out_$i135, out_$i137, out_$i138, out_$i139 := in_$i121, in_$p122, in_$i123, in_$p124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i136, in_$i135, in_$i137, in_$i138, in_$i139;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_698;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    out_$i121 := out_$i139;
    goto corral_source_split_730_dummy;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} out_$i139 := schedule_timeout(out_$i133);
    call {:si_unique_call 125} {:cexpr "__ret___0"} boogie_si_record_i64(out_$i139);
    goto corral_source_split_730;

  $bb39:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i32(out_$i137, 0);
    goto corral_source_split_720;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    out_$i137 := $zext.i1.i32(out_$i135);
    goto corral_source_split_719;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_718;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    out_$i135 := out_$i136;
    goto $bb36;

  $bb35:
    assume {:verifier.code 0} true;
    assume out_$i134 == 1;
    goto $bb36;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    out_$i135 := 1;
    assume true;
    goto $bb35, $bb37;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    out_$i134 := $trunc.i8.i1(out_$i130);
    goto corral_source_split_716;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_715;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i133 := out_$i121;
    goto $bb34;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    out_$i133 := 1;
    goto $bb34;

  $bb32:
    assume out_$i132 == 1;
    goto corral_source_split_713;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    out_$i132 := $eq.i64(out_$i121, 0);
    goto corral_source_split_711;

  $bb29:
    assume out_$i131 == 1;
    goto corral_source_split_710;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    out_$i131 := $trunc.i8.i1(out_$i130);
    goto corral_source_split_708;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    out_$i130 := $zext.i1.i8(out_$i129);
    call {:si_unique_call 122} {:cexpr "__cond"} boogie_si_record_i8(out_$i130);
    goto corral_source_split_707;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    out_$i129 := $xor.i1(out_$i128, 1);
    goto corral_source_split_706;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i32(out_$i127, 0);
    goto corral_source_split_705;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i1.i32(out_$i126);
    goto corral_source_split_704;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    out_$i126 := $trunc.i8.i1(out_$i125);
    goto corral_source_split_703;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    out_$i125 := $load.i8($M.0, out_$p124);
    goto corral_source_split_702;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p9, $mul.ref(0, 416)), $mul.ref(133, 1));
    goto corral_source_split_701;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} out_$i123 := prepare_to_wait_event(out_$p122, in_$p5, 2);
    call {:si_unique_call 121} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i123);
    goto corral_source_split_700;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p9, $mul.ref(0, 416)), $mul.ref(232, 1));
    goto corral_source_split_699;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i131 == 1);
    goto $bb31;

  $bb33:
    assume {:verifier.code 0} true;
    assume !(out_$i132 == 1);
    goto $bb31;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    out_$i136 := $eq.i64(out_$i133, 0);
    goto corral_source_split_723;

  $bb37:
    assume !(out_$i134 == 1);
    goto corral_source_split_722;

  corral_source_split_730_dummy:
    call {:si_unique_call 1} out_$i121, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i136, out_$i135, out_$i137, out_$i138, out_$i139 := edge_open_loop_$bb28(in_$p5, in_$p9, out_$i121, out_$p122, out_$i123, out_$p124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i136, out_$i135, out_$i137, out_$i138, out_$i139);
    return;

  exit:
    return;
}



procedure edge_open_loop_$bb28(in_$p5: ref, in_$p9: ref, in_$i121: i64, in_$p122: ref, in_$i123: i64, in_$p124: ref, in_$i125: i8, in_$i126: i1, in_$i127: i32, in_$i128: i1, in_$i129: i1, in_$i130: i8, in_$i131: i1, in_$i132: i1, in_$i133: i64, in_$i134: i1, in_$i136: i1, in_$i135: i1, in_$i137: i32, in_$i138: i1, in_$i139: i64) returns (out_$i121: i64, out_$p122: ref, out_$i123: i64, out_$p124: ref, out_$i125: i8, out_$i126: i1, out_$i127: i32, out_$i128: i1, out_$i129: i1, out_$i130: i8, out_$i131: i1, out_$i132: i1, out_$i133: i64, out_$i134: i1, out_$i136: i1, out_$i135: i1, out_$i137: i32, out_$i138: i1, out_$i139: i64);



implementation edge_interrupt_callback_loop_$bb55(in_$p5: ref, in_$p8: ref, in_$p10: ref, in_$i12: i32, in_$p64: ref, in_$p137: ref, in_$i141: i64, in_$p142: ref, in_$i143: i8, in_$i144: i32, in_$i145: i64, in_$i146: i64, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i64, in_$p154: ref, in_$p155: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i8, in_$i163: i1, in_$p164: ref, in_$p165: ref, in_$i166: i16, in_$i167: i32, in_$i168: i16, in_$i169: i32, in_$i170: i32, in_$i171: i16, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$i180: i24, in_$i181: i24, in_$i182: i24, in_$p183: ref, in_$p184: ref, in_$i185: i8, in_$i186: i64, in_$i187: i64, in_$i188: i64, in_$i189: i1, in_$p190: ref, in_$i191: i16, in_$i192: i32, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i139: i32, in_$i140: i32, in_$p199: ref, in_$p200: ref, in_$i201: i8, in_$i202: i32, in_$i203: i1) returns (out_$i141: i64, out_$p142: ref, out_$i143: i8, out_$i144: i32, out_$i145: i64, out_$i146: i64, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i64, out_$p154: ref, out_$p155: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i8, out_$i163: i1, out_$p164: ref, out_$p165: ref, out_$i166: i16, out_$i167: i32, out_$i168: i16, out_$i169: i32, out_$i170: i32, out_$i171: i16, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$i180: i24, out_$i181: i24, out_$i182: i24, out_$p183: ref, out_$p184: ref, out_$i185: i8, out_$i186: i64, out_$i187: i64, out_$i188: i64, out_$i189: i1, out_$p190: ref, out_$i191: i16, out_$i192: i32, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i139: i32, out_$i140: i32, out_$p199: ref, out_$p200: ref, out_$i201: i8, out_$i202: i32, out_$i203: i1)
{

  entry:
    out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i139, out_$i140, out_$p199, out_$p200, out_$i201, out_$i202, out_$i203 := in_$i141, in_$p142, in_$i143, in_$i144, in_$i145, in_$i146, in_$p147, in_$i148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$p155, in_$p157, in_$p158, in_$p159, in_$p160, in_$p161, in_$i162, in_$i163, in_$p164, in_$p165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$p172, in_$p173, in_$p174, in_$p175, in_$p176, in_$p177, in_$p178, in_$p179, in_$i180, in_$i181, in_$i182, in_$p183, in_$p184, in_$i185, in_$i186, in_$i187, in_$i188, in_$i189, in_$p190, in_$i191, in_$i192, in_$p193, in_$p194, in_$p195, in_$i196, in_$i197, in_$i198, in_$i139, in_$i140, in_$p199, in_$p200, in_$i201, in_$i202, in_$i203;
    goto $bb55, exit;

  $bb55:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2215;

  $bb66:
    assume out_$i198 == 1;
    assume {:verifier.code 0} true;
    out_$i139, out_$i140 := out_$i197, out_$i196;
    goto $bb66_dummy;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    out_$i198 := $slt.i32(out_$i196, in_$i12);
    goto corral_source_split_2298;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    out_$i197 := $add.i32(out_$i139, 1);
    call {:si_unique_call 347} {:cexpr "portNumber"} boogie_si_record_i32(out_$i197);
    goto corral_source_split_2297;

  $bb65:
    assume {:verifier.code 0} true;
    out_$i196 := $add.i32(out_$i140, 2);
    call {:si_unique_call 346} {:cexpr "position"} boogie_si_record_i32(out_$i196);
    goto corral_source_split_2296;

  $bb58:
    assume !(out_$i152 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb64:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb64;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    goto $bb64;

  SeqInstr_96:
    goto corral_source_split_2294;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} send_more_port_data(in_$p8, out_$p160);
    goto SeqInstr_95;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} tty_port_tty_wakeup(out_$p195);
    goto corral_source_split_2293;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p194, $mul.ref(0, 3016)), $mul.ref(8, 1));
    goto corral_source_split_2292;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    out_$p194 := $load.ref($M.0, out_$p193);
    goto corral_source_split_2291;

  $bb63:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p160, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_2290;

  $bb62:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 343} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32(in_$p5, in_$p64, .str.175, .str.169, out_$i139, out_$i192);
    goto corral_source_split_2288;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    out_$i192 := $zext.i16.i32(out_$i191);
    goto corral_source_split_2287;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    out_$i191 := $load.i16($M.0, out_$p190);
    goto corral_source_split_2286;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(out_$p160, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2285;

  $bb61:
    assume out_$i189 == 1;
    goto corral_source_split_2284;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    out_$i189 := $ne.i64(out_$i188, 0);
    goto corral_source_split_2282;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 341} out_$i188 := ldv__builtin_expect(out_$i187, 0);
    call {:si_unique_call 342} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i188);
    goto corral_source_split_2281;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    out_$i187 := $and.i64(out_$i186, 1);
    goto corral_source_split_2280;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    out_$i186 := $zext.i8.i64(out_$i185);
    goto corral_source_split_2279;

  corral_source_split_2277:
    assume {:verifier.code 0} true;
    out_$i185 := $load.i8($M.6, out_$p184);
    goto corral_source_split_2278;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    out_$p184 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2277;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p183, 0);
    goto corral_source_split_2276;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2275;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p179, out_$i182);
    goto corral_source_split_2274;

  corral_source_split_2272:
    assume {:verifier.code 0} true;
    out_$i182 := $or.i24(out_$i181, 635);
    goto corral_source_split_2273;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    out_$i181 := $and.i24(out_$i180, $sub.i24(0, 262144));
    goto corral_source_split_2272;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i24($M.5, out_$p179);
    goto corral_source_split_2271;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    out_$p179 := $bitcast.ref.ref(out_$p178);
    goto corral_source_split_2270;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    out_$p178 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2269;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p177, .str.175);
    goto corral_source_split_2268;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2267;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p176, .str.2);
    goto corral_source_split_2266;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    out_$p176 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2265;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p175, .str.169);
    goto corral_source_split_2264;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    out_$p175 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2263;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p174, .str);
    goto corral_source_split_2262;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} spin_unlock(out_$p173);
    goto corral_source_split_2260;

  corral_source_split_2258:
    assume {:verifier.code 0} true;
    out_$p173 := $add.ref($add.ref(out_$p160, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_2259;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p172, out_$i171);
    goto corral_source_split_2258;

  corral_source_split_2256:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p160, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2257;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    out_$i171 := $trunc.i32.i16(out_$i170);
    goto corral_source_split_2256;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    out_$i170 := $add.i32(out_$i167, out_$i169);
    goto corral_source_split_2255;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    out_$i169 := $zext.i16.i32(out_$i168);
    goto corral_source_split_2254;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    out_$i168 := $trunc.i32.i16(out_$i151);
    goto corral_source_split_2253;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    out_$i167 := $zext.i16.i32(out_$i166);
    goto corral_source_split_2252;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    out_$i166 := $load.i16($M.0, out_$p165);
    goto corral_source_split_2251;

  corral_source_split_2249:
    assume {:verifier.code 0} true;
    out_$p165 := $add.ref($add.ref(out_$p160, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_2250;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 339} spin_lock(out_$p164);
    goto corral_source_split_2249;

  corral_source_split_2247:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(out_$p160, $mul.ref(0, 416)), $mul.ref(48, 1));
    goto corral_source_split_2248;

  $bb59:
    assume out_$i163 == 1;
    goto corral_source_split_2247;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    out_$i163 := $trunc.i8.i1(out_$i162);
    goto corral_source_split_2245;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    out_$i162 := $load.i8($M.0, out_$p161);
    goto corral_source_split_2244;

  corral_source_split_2242:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(out_$p160, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_2243;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    out_$p160 := $bitcast.ref.ref(out_$p159);
    goto corral_source_split_2242;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} out_$p159 := usb_get_serial_port_data(out_$p158);
    goto corral_source_split_2241;

  corral_source_split_2239:
    assume {:verifier.code 0} true;
    out_$p158 := $load.ref($M.0, out_$p157);
    goto corral_source_split_2240;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref($add.ref(out_$p155, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i153, 8));
    goto corral_source_split_2239;

  corral_source_split_2237:
    assume {:verifier.code 0} true;
    out_$p155 := $load.ref($M.0, out_$p154);
    goto corral_source_split_2238;

  corral_source_split_2236:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p8, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_2237;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    out_$i153 := $sext.i32.i64(out_$i139);
    goto corral_source_split_2236;

  $bb57:
    assume out_$i152 == 1;
    goto corral_source_split_2235;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb57, $bb58;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    out_$i152 := $ne.i32(out_$i151, 0);
    goto corral_source_split_2233;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    out_$i151 := $or.i32(out_$i144, out_$i150);
    call {:si_unique_call 337} {:cexpr "txCredits"} boogie_si_record_i32(out_$i151);
    goto corral_source_split_2232;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    out_$i150 := $shl.i32(out_$i149, 8);
    goto corral_source_split_2231;

  corral_source_split_2229:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(out_$i148);
    goto corral_source_split_2230;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    out_$i148 := $load.i8($M.0, out_$p147);
    goto corral_source_split_2229;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref(in_$p10, $mul.ref(out_$i146, 1));
    goto corral_source_split_2228;

  corral_source_split_2226:
    assume {:verifier.code 0} true;
    out_$i146 := $add.i64(out_$i145, 1);
    goto corral_source_split_2227;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    out_$i145 := $sext.i32.i64(out_$i140);
    goto corral_source_split_2226;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    out_$i144 := $zext.i8.i32(out_$i143);
    goto corral_source_split_2225;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    out_$i143 := $load.i8($M.0, out_$p142);
    goto corral_source_split_2224;

  corral_source_split_2222:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref(in_$p10, $mul.ref(out_$i141, 1));
    goto corral_source_split_2223;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i141 := $sext.i32.i64(out_$i140);
    goto corral_source_split_2222;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb68:
    assume out_$i203 == 1;
    goto corral_source_split_2302;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68;

  corral_source_split_2219:
    assume {:verifier.code 0} true;
    out_$i203 := $sgt.i32(out_$i202, out_$i139);
    goto corral_source_split_2220;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    out_$i202 := $zext.i8.i32(out_$i201);
    goto corral_source_split_2219;

  corral_source_split_2217:
    assume {:verifier.code 0} true;
    out_$i201 := $load.i8($M.0, out_$p200);
    goto corral_source_split_2218;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(out_$p199, $mul.ref(0, 272)), $mul.ref(25, 1));
    goto corral_source_split_2217;

  corral_source_split_2215:
    assume {:verifier.code 0} true;
    out_$p199 := $load.ref($M.0, in_$p137);
    goto corral_source_split_2216;

  $bb66_dummy:
    call {:si_unique_call 1} out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i139, out_$i140, out_$p199, out_$p200, out_$i201, out_$i202, out_$i203 := edge_interrupt_callback_loop_$bb55(in_$p5, in_$p8, in_$p10, in_$i12, in_$p64, in_$p137, out_$i141, out_$p142, out_$i143, out_$i144, out_$i145, out_$i146, out_$p147, out_$i148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$p155, out_$p157, out_$p158, out_$p159, out_$p160, out_$p161, out_$i162, out_$i163, out_$p164, out_$p165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$p178, out_$p179, out_$i180, out_$i181, out_$i182, out_$p183, out_$p184, out_$i185, out_$i186, out_$i187, out_$i188, out_$i189, out_$p190, out_$i191, out_$i192, out_$p193, out_$p194, out_$p195, out_$i196, out_$i197, out_$i198, out_$i139, out_$i140, out_$p199, out_$p200, out_$i201, out_$i202, out_$i203);
    return;

  exit:
    return;
}



procedure edge_interrupt_callback_loop_$bb55(in_$p5: ref, in_$p8: ref, in_$p10: ref, in_$i12: i32, in_$p64: ref, in_$p137: ref, in_$i141: i64, in_$p142: ref, in_$i143: i8, in_$i144: i32, in_$i145: i64, in_$i146: i64, in_$p147: ref, in_$i148: i8, in_$i149: i32, in_$i150: i32, in_$i151: i32, in_$i152: i1, in_$i153: i64, in_$p154: ref, in_$p155: ref, in_$p157: ref, in_$p158: ref, in_$p159: ref, in_$p160: ref, in_$p161: ref, in_$i162: i8, in_$i163: i1, in_$p164: ref, in_$p165: ref, in_$i166: i16, in_$i167: i32, in_$i168: i16, in_$i169: i32, in_$i170: i32, in_$i171: i16, in_$p172: ref, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$p178: ref, in_$p179: ref, in_$i180: i24, in_$i181: i24, in_$i182: i24, in_$p183: ref, in_$p184: ref, in_$i185: i8, in_$i186: i64, in_$i187: i64, in_$i188: i64, in_$i189: i1, in_$p190: ref, in_$i191: i16, in_$i192: i32, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$i196: i32, in_$i197: i32, in_$i198: i1, in_$i139: i32, in_$i140: i32, in_$p199: ref, in_$p200: ref, in_$i201: i8, in_$i202: i32, in_$i203: i1) returns (out_$i141: i64, out_$p142: ref, out_$i143: i8, out_$i144: i32, out_$i145: i64, out_$i146: i64, out_$p147: ref, out_$i148: i8, out_$i149: i32, out_$i150: i32, out_$i151: i32, out_$i152: i1, out_$i153: i64, out_$p154: ref, out_$p155: ref, out_$p157: ref, out_$p158: ref, out_$p159: ref, out_$p160: ref, out_$p161: ref, out_$i162: i8, out_$i163: i1, out_$p164: ref, out_$p165: ref, out_$i166: i16, out_$i167: i32, out_$i168: i16, out_$i169: i32, out_$i170: i32, out_$i171: i16, out_$p172: ref, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$p178: ref, out_$p179: ref, out_$i180: i24, out_$i181: i24, out_$i182: i24, out_$p183: ref, out_$p184: ref, out_$i185: i8, out_$i186: i64, out_$i187: i64, out_$i188: i64, out_$i189: i1, out_$p190: ref, out_$i191: i16, out_$i192: i32, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$i196: i32, out_$i197: i32, out_$i198: i1, out_$i139: i32, out_$i140: i32, out_$p199: ref, out_$p200: ref, out_$i201: i8, out_$i202: i32, out_$i203: i1);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, assertsPassed;



implementation process_rcvd_data_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p11: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i45: i1, in_$i46: i1, in_$i49: i1, in_$i50: i8, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i16, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i47: i16, in_$p48: ref, in_$i61: i8, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i24, in_$i74: i24, in_$i75: i24, in_$p76: ref, in_$p77: ref, in_$i78: i8, in_$i79: i64, in_$i80: i64, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$i84: i8, in_$i85: i32, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i8, in_$p98: ref, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$i104: i8, in_$p105: ref, in_$p106: ref, in_$i107: i8, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i8, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i8, in_$i116: i32, in_$i117: i8, in_$p118: ref, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i32, in_$i123: i8, in_$p124: ref, in_$p125: ref, in_$i126: i8, in_$i127: i16, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$p131: ref, in_$i132: i8, in_$i133: i16, in_$i134: i32, in_$i135: i32, in_$i136: i16, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i24, in_$i145: i24, in_$i146: i24, in_$p147: ref, in_$p148: ref, in_$i149: i8, in_$i150: i64, in_$i151: i64, in_$i152: i64, in_$i153: i1, in_$p154: ref, in_$i155: i8, in_$i156: i32, in_$p157: ref, in_$i158: i16, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i43: i16, in_$p44: ref, in_$i163: i32, in_$p164: ref, in_$i165: i16, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$p170: ref, in_$i171: i16, in_$p172: ref, in_$i169: i16, in_$i173: i32, in_$i174: i32, in_$i175: i32, in_$i176: i16, in_$p177: ref, in_$i178: i16, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$i182: i16, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i8, in_$i188: i32, in_$i189: i64, in_$p190: ref, in_$p191: ref, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$i198: i8, in_$i199: i1, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$p205: ref, in_$i206: i24, in_$i207: i24, in_$i208: i24, in_$p209: ref, in_$p210: ref, in_$i211: i8, in_$i212: i64, in_$i213: i64, in_$i214: i64, in_$i215: i1, in_$i216: i32, in_$p217: ref, in_$i218: i8, in_$i219: i32, in_$p220: ref, in_$p221: ref, in_$i222: i32, in_$p223: ref, in_$p224: ref, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$p230: ref, in_$p231: ref, in_$p233: ref, in_$i234: i64, in_$p235: ref, in_$p236: ref, in_$i237: i8, in_$p238: ref, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$i242: i16, in_$p243: ref, in_$i244: i8, in_$i245: i32, in_$i246: i8, in_$p247: ref, in_$i248: i8, in_$i249: i32, in_$i250: i8, in_$p251: ref, in_$i59: i16, in_$p60: ref, in_$i252: i32, in_$i253: i1, in_$p17: ref, in_$i18: i16, in_$i19: i16) returns (out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i45: i1, out_$i46: i1, out_$i49: i1, out_$i50: i8, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i16, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i47: i16, out_$p48: ref, out_$i61: i8, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i24, out_$i74: i24, out_$i75: i24, out_$p76: ref, out_$p77: ref, out_$i78: i8, out_$i79: i64, out_$i80: i64, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$i84: i8, out_$i85: i32, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i8, out_$p98: ref, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$i104: i8, out_$p105: ref, out_$p106: ref, out_$i107: i8, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i8, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i8, out_$i116: i32, out_$i117: i8, out_$p118: ref, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i32, out_$i123: i8, out_$p124: ref, out_$p125: ref, out_$i126: i8, out_$i127: i16, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$p131: ref, out_$i132: i8, out_$i133: i16, out_$i134: i32, out_$i135: i32, out_$i136: i16, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i24, out_$i145: i24, out_$i146: i24, out_$p147: ref, out_$p148: ref, out_$i149: i8, out_$i150: i64, out_$i151: i64, out_$i152: i64, out_$i153: i1, out_$p154: ref, out_$i155: i8, out_$i156: i32, out_$p157: ref, out_$i158: i16, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i43: i16, out_$p44: ref, out_$i163: i32, out_$p164: ref, out_$i165: i16, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$p170: ref, out_$i171: i16, out_$p172: ref, out_$i169: i16, out_$i173: i32, out_$i174: i32, out_$i175: i32, out_$i176: i16, out_$p177: ref, out_$i178: i16, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$i182: i16, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i8, out_$i188: i32, out_$i189: i64, out_$p190: ref, out_$p191: ref, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$i198: i8, out_$i199: i1, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$p205: ref, out_$i206: i24, out_$i207: i24, out_$i208: i24, out_$p209: ref, out_$p210: ref, out_$i211: i8, out_$i212: i64, out_$i213: i64, out_$i214: i64, out_$i215: i1, out_$i216: i32, out_$p217: ref, out_$i218: i8, out_$i219: i32, out_$p220: ref, out_$p221: ref, out_$i222: i32, out_$p223: ref, out_$p224: ref, out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$p230: ref, out_$p231: ref, out_$p233: ref, out_$i234: i64, out_$p235: ref, out_$p236: ref, out_$i237: i8, out_$p238: ref, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$i242: i16, out_$p243: ref, out_$i244: i8, out_$i245: i32, out_$i246: i8, out_$p247: ref, out_$i248: i8, out_$i249: i32, out_$i250: i8, out_$p251: ref, out_$i59: i16, out_$p60: ref, out_$i252: i32, out_$i253: i1, out_$p17: ref, out_$i18: i16, out_$i19: i16)
{

  entry:
    out_$i20, out_$i21, out_$i22, out_$p39, out_$i40, out_$i41, out_$i42, out_$i45, out_$i46, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i47, out_$p48, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i43, out_$p44, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p170, out_$i171, out_$p172, out_$i169, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$p193, out_$p194, out_$p195, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$p205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$p221, out_$i222, out_$p223, out_$p224, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$p231, out_$p233, out_$i234, out_$p235, out_$p236, out_$i237, out_$p238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i59, out_$p60, out_$i252, out_$i253, out_$p17, out_$i18, out_$i19 := in_$i20, in_$i21, in_$i22, in_$p39, in_$i40, in_$i41, in_$i42, in_$i45, in_$i46, in_$i49, in_$i50, in_$p51, in_$p52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$p58, in_$i47, in_$p48, in_$i61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$p69, in_$p70, in_$p71, in_$p72, in_$i73, in_$i74, in_$i75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$i84, in_$i85, in_$p86, in_$i87, in_$i88, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$i94, in_$i95, in_$i96, in_$i97, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$p106, in_$i107, in_$i108, in_$i109, in_$p110, in_$i111, in_$p112, in_$p113, in_$p114, in_$i115, in_$i116, in_$i117, in_$p118, in_$p119, in_$i120, in_$i121, in_$i122, in_$i123, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$p137, in_$p138, in_$p139, in_$p140, in_$p141, in_$p142, in_$p143, in_$i144, in_$i145, in_$i146, in_$p147, in_$p148, in_$i149, in_$i150, in_$i151, in_$i152, in_$i153, in_$p154, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$i160, in_$i161, in_$p162, in_$i43, in_$p44, in_$i163, in_$p164, in_$i165, in_$i166, in_$i167, in_$p168, in_$p170, in_$i171, in_$p172, in_$i169, in_$i173, in_$i174, in_$i175, in_$i176, in_$p177, in_$i178, in_$i179, in_$i180, in_$i181, in_$i182, in_$p183, in_$i184, in_$i185, in_$p186, in_$i187, in_$i188, in_$i189, in_$p190, in_$p191, in_$p193, in_$p194, in_$p195, in_$p196, in_$p197, in_$i198, in_$i199, in_$p200, in_$p201, in_$p202, in_$p203, in_$p204, in_$p205, in_$i206, in_$i207, in_$i208, in_$p209, in_$p210, in_$i211, in_$i212, in_$i213, in_$i214, in_$i215, in_$i216, in_$p217, in_$i218, in_$i219, in_$p220, in_$p221, in_$i222, in_$p223, in_$p224, in_$p226, in_$i227, in_$i228, in_$i229, in_$p230, in_$p231, in_$p233, in_$i234, in_$p235, in_$p236, in_$i237, in_$p238, in_$p239, in_$i240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$i246, in_$p247, in_$i248, in_$i249, in_$i250, in_$p251, in_$i59, in_$p60, in_$i252, in_$i253, in_$p17, in_$i18, in_$i19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3005;

  $bb59:
    assume out_$i253 == 1;
    assume {:verifier.code 0} true;
    out_$p17, out_$i18, out_$i19 := out_$p60, out_$i59, out_$i18;
    goto $bb59_dummy;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$i253 := $ne.i32(out_$i252, 0);
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$i252 := $zext.i16.i32(out_$i59);
    goto corral_source_split_3114;

  $bb29:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3113;

  $bb58:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i18, out_$p17;
    goto $bb29;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i242, out_$p239;
    goto $bb29;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i176, out_$p236;
    goto $bb29;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i66, out_$p63;
    goto $bb29;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i66, out_$p63;
    goto $bb29;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i66, out_$p63;
    goto $bb29;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$i59, out_$p60 := out_$i55, out_$p52;
    goto $bb29;

  corral_source_split_3110:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p58, 1);
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3110;

  $bb27:
    assume out_$i57 == 1;
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$i57 := $eq.i32(out_$i56, 0);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$i56 := $zext.i16.i32(out_$i55);
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$i55 := $trunc.i32.i16(out_$i54);
    call {:si_unique_call 459} {:cexpr "bufferLength"} boogie_si_record_i16(out_$i55);
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$i54 := $sub.i32(out_$i53, 1);
    goto corral_source_split_3104;

  corral_source_split_3102:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i16.i32(out_$i18);
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    out_$p52 := $add.ref(out_$p17, $mul.ref(1, 1));
    goto corral_source_split_3102;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p51, out_$i50);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i50 := $load.i8($M.0, out_$p17);
    goto corral_source_split_3099;

  $bb25:
    assume out_$i49 == 1;
    goto corral_source_split_3098;

  $bb22:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $eq.i32(out_$i40, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb14:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i40, 1);
    assume {:verifier.code 0} true;
    out_$i47, out_$p48 := out_$i18, out_$p17;
    assume true;
    goto $bb22, $bb23;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i41 := $slt.i32(out_$i40, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    out_$i40 := $load.i32($M.0, out_$p39);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3038;

  $bb7:
    assume !(out_$i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_3009:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    out_$i22 := $eq.i32(out_$i20, out_$i21);
    goto corral_source_split_3009;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    out_$i21 := $zext.i16.i32(out_$i18);
    goto corral_source_split_3008;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i32(out_$i19);
    goto corral_source_split_3007;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    goto $bb5;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p113, 3);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p112, out_$i111);
    goto corral_source_split_3201;

  corral_source_split_3199:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1301, 1));
    goto corral_source_split_3200;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i111 := $load.i8($M.0, out_$p110);
    goto corral_source_split_3199;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3198;

  $bb36:
    assume out_$i109 == 1;
    goto corral_source_split_3197;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3149:
    assume {:verifier.code 0} true;
    out_$i109 := $ugt.i32(out_$i108, 7);
    goto corral_source_split_3150;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i8.i32(out_$i107);
    goto corral_source_split_3149;

  corral_source_split_3147:
    assume {:verifier.code 0} true;
    out_$i107 := $load.i8($M.0, out_$p106);
    goto corral_source_split_3148;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1300, 1));
    goto corral_source_split_3147;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p105, out_$i104);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1300, 1));
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$i104 := $trunc.i32.i8(out_$i103);
    goto corral_source_split_3144;

  corral_source_split_3142:
    assume {:verifier.code 0} true;
    out_$i103 := $ashr.i32(out_$i102, 3);
    goto corral_source_split_3143;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$i102 := $and.i32(out_$i101, 120);
    goto corral_source_split_3142;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    out_$i101 := $zext.i8.i32(out_$i100);
    goto corral_source_split_3141;

  corral_source_split_3139:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i8($M.0, out_$p99);
    goto corral_source_split_3140;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3139;

  corral_source_split_3137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p98, out_$i97);
    goto corral_source_split_3138;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3137;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    out_$i97 := $trunc.i32.i8(out_$i96);
    goto corral_source_split_3136;

  corral_source_split_3134:
    assume {:verifier.code 0} true;
    out_$i96 := $and.i32(out_$i95, 7);
    goto corral_source_split_3135;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i95 := $zext.i8.i32(out_$i94);
    goto corral_source_split_3134;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$i94 := $load.i8($M.0, out_$p93);
    goto corral_source_split_3133;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3132;

  $bb34:
    assume out_$i92 == 1;
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3128:
    assume {:verifier.code 0} true;
    out_$i92 := $slt.i32(out_$i91, 0);
    goto corral_source_split_3129;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i91 := $sext.i8.i32(out_$i90);
    goto corral_source_split_3128;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i8($M.0, out_$p89);
    goto corral_source_split_3127;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p89 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3126;

  $bb32:
    assume !(out_$i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_3123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 460} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32(in_$p4, in_$p11, .str.202, .str.200, out_$i85, out_$i88);
    goto corral_source_split_3124;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    out_$i88 := $zext.i8.i32(out_$i87);
    goto corral_source_split_3123;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i8($M.0, out_$p86);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i85 := $zext.i8.i32(out_$i84);
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$i84 := $load.i8($M.0, out_$p83);
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    out_$p83 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3118;

  $bb31:
    assume out_$i82 == 1;
    goto corral_source_split_3117;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$i82 := $ne.i64(out_$i81, 0);
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} out_$i81 := ldv__builtin_expect(out_$i80, 0);
    call {:si_unique_call 458} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i81);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$i80 := $and.i64(out_$i79, 1);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i8.i64(out_$i78);
    goto corral_source_split_3093;

  corral_source_split_3091:
    assume {:verifier.code 0} true;
    out_$i78 := $load.i8($M.6, out_$p77);
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3091;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p76, 0);
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$p76 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p72, out_$i75);
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$i75 := $or.i24(out_$i74, 1690);
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$i74 := $and.i24(out_$i73, $sub.i24(0, 262144));
    goto corral_source_split_3086;

  corral_source_split_3084:
    assume {:verifier.code 0} true;
    out_$i73 := $load.i24($M.5, out_$p72);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    out_$p72 := $bitcast.ref.ref(out_$p71);
    goto corral_source_split_3084;

  corral_source_split_3082:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3083;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p70, .str.202);
    goto corral_source_split_3082;

  corral_source_split_3080:
    assume {:verifier.code 0} true;
    out_$p70 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3081;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p69, .str.2);
    goto corral_source_split_3080;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3079;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p68, .str.200);
    goto corral_source_split_3078;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3077;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p67, .str);
    goto corral_source_split_3076;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(in_$p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3075;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    out_$i66 := $trunc.i32.i16(out_$i65);
    call {:si_unique_call 456} {:cexpr "bufferLength"} boogie_si_record_i16(out_$i66);
    goto corral_source_split_3074;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    out_$i65 := $sub.i32(out_$i64, 1);
    goto corral_source_split_3073;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    out_$i64 := $zext.i16.i32(out_$i47);
    goto corral_source_split_3072;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(out_$p48, $mul.ref(1, 1));
    goto corral_source_split_3071;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p62, out_$i61);
    goto corral_source_split_3070;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3069;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i8($M.0, out_$p48);
    goto corral_source_split_3068;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3067;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb24;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i47, out_$p48 := out_$i55, out_$p52;
    goto $bb24;

  $bb28:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p118, 0);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$p118 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3210;

  SeqInstr_129:
    goto corral_source_split_3209;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} process_rcvd_status(in_$p0, out_$i117, 0);
    goto SeqInstr_128;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$i117 := $trunc.i32.i8(out_$i116);
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    out_$i116 := $zext.i8.i32(out_$i115);
    goto corral_source_split_3207;

  corral_source_split_3205:
    assume {:verifier.code 0} true;
    out_$i115 := $load.i8($M.0, out_$p114);
    goto corral_source_split_3206;

  $bb38:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3205;

  $bb37:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p162, 2);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$p162 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3226;

  $bb42:
    assume out_$i161 == 1;
    goto corral_source_split_3225;

  corral_source_split_3223:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    out_$i161 := $eq.i32(out_$i160, 0);
    goto corral_source_split_3223;

  $bb41:
    assume {:verifier.code 0} true;
    out_$i160 := $zext.i16.i32(out_$i66);
    goto corral_source_split_3222;

  $bb40:
    assume !(out_$i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    goto $bb41;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    call {:si_unique_call 464} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32(in_$p5, in_$p11, .str.203, .str.200, out_$i156, out_$i159);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    out_$i159 := $sext.i16.i32(out_$i158);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i16($M.0, out_$p157);
    goto corral_source_split_3218;

  corral_source_split_3216:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3217;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i156 := $zext.i8.i32(out_$i155);
    goto corral_source_split_3216;

  corral_source_split_3214:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i8($M.0, out_$p154);
    goto corral_source_split_3215;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3214;

  $bb39:
    assume out_$i153 == 1;
    goto corral_source_split_3213;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i153 := $ne.i64(out_$i152, 0);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    call {:si_unique_call 461} out_$i152 := ldv__builtin_expect(out_$i151, 0);
    call {:si_unique_call 462} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i152);
    goto corral_source_split_3194;

  corral_source_split_3192:
    assume {:verifier.code 0} true;
    out_$i151 := $and.i64(out_$i150, 1);
    goto corral_source_split_3193;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i150 := $zext.i8.i64(out_$i149);
    goto corral_source_split_3192;

  corral_source_split_3190:
    assume {:verifier.code 0} true;
    out_$i149 := $load.i8($M.6, out_$p148);
    goto corral_source_split_3191;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    out_$p148 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3190;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p147, 0);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$p147 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p143, out_$i146);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    out_$i146 := $or.i24(out_$i145, 1732);
    goto corral_source_split_3186;

  corral_source_split_3184:
    assume {:verifier.code 0} true;
    out_$i145 := $and.i24(out_$i144, $sub.i24(0, 262144));
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    out_$i144 := $load.i24($M.5, out_$p143);
    goto corral_source_split_3184;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$p143 := $bitcast.ref.ref(out_$p142);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$p142 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p141, .str.203);
    goto corral_source_split_3181;

  corral_source_split_3179:
    assume {:verifier.code 0} true;
    out_$p141 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3180;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p140, .str.2);
    goto corral_source_split_3179;

  corral_source_split_3177:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3178;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p139, .str.200);
    goto corral_source_split_3177;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p138, .str);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$p138 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3174;

  corral_source_split_3172:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p137, out_$i136);
    goto corral_source_split_3173;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3172;

  corral_source_split_3170:
    assume {:verifier.code 0} true;
    out_$i136 := $trunc.i32.i16(out_$i135);
    goto corral_source_split_3171;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    out_$i135 := $or.i32(out_$i130, out_$i134);
    goto corral_source_split_3170;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i16.i32(out_$i133);
    goto corral_source_split_3169;

  corral_source_split_3167:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i8.i16(out_$i132);
    goto corral_source_split_3168;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i8($M.0, out_$p131);
    goto corral_source_split_3167;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1297, 1));
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i130 := $shl.i32(out_$i129, 5);
    goto corral_source_split_3165;

  corral_source_split_3163:
    assume {:verifier.code 0} true;
    out_$i129 := $and.i32(out_$i128, 120);
    goto corral_source_split_3164;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i16.i32(out_$i127);
    goto corral_source_split_3163;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$i127 := $zext.i8.i16(out_$i126);
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i126 := $load.i8($M.0, out_$p125);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$p125 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p124, out_$i123);
    goto corral_source_split_3159;

  corral_source_split_3157:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3158;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    out_$i123 := $trunc.i32.i8(out_$i122);
    goto corral_source_split_3157;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    out_$i122 := $and.i32(out_$i121, 7);
    goto corral_source_split_3156;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    out_$i121 := $zext.i8.i32(out_$i120);
    goto corral_source_split_3155;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    out_$i120 := $load.i8($M.0, out_$p119);
    goto corral_source_split_3154;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1296, 1));
    goto corral_source_split_3153;

  $bb35:
    assume !(out_$i92 == 1);
    goto corral_source_split_3152;

  $bb57:
    assume {:verifier.code 0} true;
    goto corral_source_split_3318;

  $bb50:
    assume !(out_$i185 == 1);
    assume {:verifier.code 0} true;
    out_$p236 := out_$p44;
    goto $bb57;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$p236 := out_$p235;
    goto $bb57;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$p235 := $add.ref(out_$p44, $mul.ref(out_$i234, 1));
    goto corral_source_split_3316;

  $bb56:
    assume {:verifier.code 0} true;
    out_$i234 := $zext.i16.i64(out_$i169);
    goto corral_source_split_3315;

  $bb52:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    goto $bb56;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p233, out_$i229);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$p233 := $add.ref($add.ref($add.ref(out_$p231, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$p231 := $load.ref($M.0, out_$p230);
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$p230 := $add.ref($add.ref(out_$p196, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3310;

  corral_source_split_3308:
    assume {:verifier.code 0} true;
    out_$i229 := $add.i32(out_$i227, out_$i228);
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    out_$i228 := $zext.i16.i32(out_$i169);
    goto corral_source_split_3308;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i227 := $load.i32($M.0, out_$p226);
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$p226 := $add.ref($add.ref($add.ref(out_$p224, $mul.ref(0, 3016)), $mul.ref(1348, 1)), $mul.ref(20, 1));
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$p224 := $load.ref($M.0, out_$p223);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$p223 := $add.ref($add.ref(out_$p196, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} edge_tty_recv(out_$p221, out_$p44, out_$i222);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$i222 := $zext.i16.i32(out_$i169);
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    out_$p221 := $load.ref($M.0, out_$p220);
    goto corral_source_split_3301;

  $bb55:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(out_$p196, $mul.ref(0, 416)), $mul.ref(408, 1));
    goto corral_source_split_3300;

  $bb54:
    assume !(out_$i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32(in_$p6, in_$p11, .str.204, .str.200, out_$i216, out_$i219);
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$i219 := $zext.i8.i32(out_$i218);
    goto corral_source_split_3297;

  corral_source_split_3295:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i8($M.0, out_$p217);
    goto corral_source_split_3296;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3295;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$i216 := $zext.i16.i32(out_$i169);
    goto corral_source_split_3294;

  $bb53:
    assume out_$i215 == 1;
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  corral_source_split_3290:
    assume {:verifier.code 0} true;
    out_$i215 := $ne.i64(out_$i214, 0);
    goto corral_source_split_3291;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} out_$i214 := ldv__builtin_expect(out_$i213, 0);
    call {:si_unique_call 469} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i214);
    goto corral_source_split_3290;

  corral_source_split_3288:
    assume {:verifier.code 0} true;
    out_$i213 := $and.i64(out_$i212, 1);
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    out_$i212 := $zext.i8.i64(out_$i211);
    goto corral_source_split_3288;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i211 := $load.i8($M.6, out_$p210);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$p210 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p209, 0);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3284;

  corral_source_split_3282:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p205, out_$i208);
    goto corral_source_split_3283;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$i208 := $or.i24(out_$i207, 1769);
    goto corral_source_split_3282;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$i207 := $and.i24(out_$i206, $sub.i24(0, 262144));
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i24($M.5, out_$p205);
    goto corral_source_split_3280;

  corral_source_split_3278:
    assume {:verifier.code 0} true;
    out_$p205 := $bitcast.ref.ref(out_$p204);
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    out_$p204 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3278;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p203, .str.204);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$p203 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p202, .str.2);
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$p202 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p201, .str.200);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$p201 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3272;

  corral_source_split_3270:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p200, .str);
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    out_$p200 := $add.ref($add.ref(in_$p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3270;

  $bb51:
    assume out_$i199 == 1;
    goto corral_source_split_3269;

  corral_source_split_3267:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$i199 := $trunc.i8.i1(out_$i198);
    goto corral_source_split_3267;

  corral_source_split_3265:
    assume {:verifier.code 0} true;
    out_$i198 := $load.i8($M.0, out_$p197);
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    out_$p197 := $add.ref($add.ref(out_$p196, $mul.ref(0, 416)), $mul.ref(132, 1));
    goto corral_source_split_3265;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$p196 := $bitcast.ref.ref(out_$p195);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} out_$p195 := usb_get_serial_port_data(out_$p194);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$p194 := $load.ref($M.0, out_$p193);
    goto corral_source_split_3262;

  corral_source_split_3260:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref($add.ref(out_$p191, $mul.ref(0, 272)), $mul.ref(32, 1)), $mul.ref(out_$i189, 8));
    goto corral_source_split_3261;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    out_$p191 := $load.ref($M.0, out_$p190);
    goto corral_source_split_3260;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    out_$p190 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    out_$i189 := $sext.i32.i64(out_$i188);
    goto corral_source_split_3258;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$i188 := $zext.i8.i32(out_$i187);
    goto corral_source_split_3257;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$i187 := $load.i8($M.0, out_$p186);
    goto corral_source_split_3256;

  corral_source_split_3254:
    assume {:verifier.code 0} true;
    out_$p186 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1299, 1));
    goto corral_source_split_3255;

  $bb49:
    assume out_$i185 == 1;
    goto corral_source_split_3254;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i185 := $ne.i32(out_$i184, 0);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$i184 := $zext.i16.i32(out_$i169);
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, out_$p183, out_$i182);
    goto corral_source_split_3250;

  corral_source_split_3248:
    assume {:verifier.code 0} true;
    out_$p183 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3249;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$i182 := $trunc.i32.i16(out_$i181);
    goto corral_source_split_3248;

  corral_source_split_3246:
    assume {:verifier.code 0} true;
    out_$i181 := $sub.i32(out_$i179, out_$i180);
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    out_$i180 := $zext.i16.i32(out_$i169);
    goto corral_source_split_3246;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$i179 := $zext.i16.i32(out_$i178);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i16($M.0, out_$p177);
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i176 := $trunc.i32.i16(out_$i175);
    call {:si_unique_call 466} {:cexpr "bufferLength"} boogie_si_record_i16(out_$i176);
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$i175 := $sub.i32(out_$i173, out_$i174);
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$i174 := $zext.i16.i32(out_$i169);
    goto corral_source_split_3240;

  corral_source_split_3238:
    assume {:verifier.code 0} true;
    out_$i173 := $zext.i16.i32(out_$i43);
    goto corral_source_split_3239;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_3238;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p172, 0);
    assume {:verifier.code 0} true;
    out_$i169 := out_$i171;
    goto $bb48;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    out_$i169 := out_$i43;
    goto $bb48;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p168, 2);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$p168 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3230;

  $bb46:
    assume out_$i167 == 1;
    goto corral_source_split_3229;

  corral_source_split_3045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    out_$i167 := $slt.i32(out_$i163, out_$i166);
    goto corral_source_split_3045;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    out_$i166 := $sext.i16.i32(out_$i165);
    goto corral_source_split_3044;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i16($M.0, out_$p164);
    goto corral_source_split_3043;

  corral_source_split_3041:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3042;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    out_$i163 := $zext.i16.i32(out_$i43);
    goto corral_source_split_3041;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3040;

  $bb16:
    assume {:verifier.code 0} true;
    assume out_$i42 == 1;
    goto $bb17;

  $bb45:
    assume {:verifier.code 0} true;
    out_$i43, out_$p44 := out_$i66, out_$p63;
    goto $bb17;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i161 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb15:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i42 := $slt.i32(out_$i40, 3);
    assume {:verifier.code 0} true;
    out_$i43, out_$p44 := out_$i18, out_$p17;
    assume true;
    goto $bb16, $bb18;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3236;

  corral_source_split_3234:
    assume {:verifier.code 0} true;
    out_$i171 := $load.i16($M.0, out_$p170);
    call {:si_unique_call 465} {:cexpr "rxLen"} boogie_si_record_i16(out_$i171);
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    out_$p170 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1302, 1));
    goto corral_source_split_3234;

  $bb47:
    assume !(out_$i167 == 1);
    goto corral_source_split_3233;

  corral_source_split_3064:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p251, 0);
    goto corral_source_split_3065;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    out_$p251 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1292, 1));
    goto corral_source_split_3064;

  SeqInstr_126:
    goto corral_source_split_3063;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  corral_source_split_3062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 455} process_rcvd_status(in_$p0, out_$i246, out_$i250);
    goto SeqInstr_125;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    out_$i250 := $trunc.i32.i8(out_$i249);
    goto corral_source_split_3062;

  corral_source_split_3060:
    assume {:verifier.code 0} true;
    out_$i249 := $zext.i8.i32(out_$i248);
    goto corral_source_split_3061;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    out_$i248 := $load.i8($M.0, out_$p247);
    goto corral_source_split_3060;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    out_$p247 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1298, 1));
    goto corral_source_split_3059;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    out_$i246 := $trunc.i32.i8(out_$i245);
    goto corral_source_split_3058;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    out_$i245 := $zext.i8.i32(out_$i244);
    goto corral_source_split_3057;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i8($M.0, out_$p243);
    goto corral_source_split_3056;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    out_$p243 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1301, 1));
    goto corral_source_split_3055;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    out_$i242 := $trunc.i32.i16(out_$i241);
    call {:si_unique_call 454} {:cexpr "bufferLength"} boogie_si_record_i16(out_$i242);
    goto corral_source_split_3054;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    out_$i241 := $sub.i32(out_$i240, 1);
    goto corral_source_split_3053;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    out_$i240 := $zext.i16.i32(out_$i18);
    goto corral_source_split_3052;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    out_$p239 := $add.ref(out_$p17, $mul.ref(1, 1));
    goto corral_source_split_3051;

  corral_source_split_3049:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p238, out_$i237);
    goto corral_source_split_3050;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    out_$p238 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1298, 1));
    goto corral_source_split_3049;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    out_$i237 := $load.i8($M.0, out_$p17);
    goto corral_source_split_3048;

  $bb19:
    assume out_$i45 == 1;
    goto corral_source_split_3047;

  $bb18:
    assume !(out_$i42 == 1);
    assume {:verifier.code 0} true;
    out_$i45 := $eq.i32(out_$i40, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i45 == 1);
    goto $bb21;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i49 == 1);
    goto $bb21;

  $bb59_dummy:
    call {:si_unique_call 1} out_$i20, out_$i21, out_$i22, out_$p39, out_$i40, out_$i41, out_$i42, out_$i45, out_$i46, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i47, out_$p48, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i43, out_$p44, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p170, out_$i171, out_$p172, out_$i169, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$p193, out_$p194, out_$p195, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$p205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$p221, out_$i222, out_$p223, out_$p224, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$p231, out_$p233, out_$i234, out_$p235, out_$p236, out_$i237, out_$p238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i59, out_$p60, out_$i252, out_$i253, out_$p17, out_$i18, out_$i19 := process_rcvd_data_loop_$bb4(in_$p0, in_$p4, in_$p5, in_$p6, in_$p11, out_$i20, out_$i21, out_$i22, out_$p39, out_$i40, out_$i41, out_$i42, out_$i45, out_$i46, out_$i49, out_$i50, out_$p51, out_$p52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$p58, out_$i47, out_$p48, out_$i61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$p69, out_$p70, out_$p71, out_$p72, out_$i73, out_$i74, out_$i75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$i84, out_$i85, out_$p86, out_$i87, out_$i88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$i94, out_$i95, out_$i96, out_$i97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$p106, out_$i107, out_$i108, out_$i109, out_$p110, out_$i111, out_$p112, out_$p113, out_$p114, out_$i115, out_$i116, out_$i117, out_$p118, out_$p119, out_$i120, out_$i121, out_$i122, out_$i123, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$p140, out_$p141, out_$p142, out_$p143, out_$i144, out_$i145, out_$i146, out_$p147, out_$p148, out_$i149, out_$i150, out_$i151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$i160, out_$i161, out_$p162, out_$i43, out_$p44, out_$i163, out_$p164, out_$i165, out_$i166, out_$i167, out_$p168, out_$p170, out_$i171, out_$p172, out_$i169, out_$i173, out_$i174, out_$i175, out_$i176, out_$p177, out_$i178, out_$i179, out_$i180, out_$i181, out_$i182, out_$p183, out_$i184, out_$i185, out_$p186, out_$i187, out_$i188, out_$i189, out_$p190, out_$p191, out_$p193, out_$p194, out_$p195, out_$p196, out_$p197, out_$i198, out_$i199, out_$p200, out_$p201, out_$p202, out_$p203, out_$p204, out_$p205, out_$i206, out_$i207, out_$i208, out_$p209, out_$p210, out_$i211, out_$i212, out_$i213, out_$i214, out_$i215, out_$i216, out_$p217, out_$i218, out_$i219, out_$p220, out_$p221, out_$i222, out_$p223, out_$p224, out_$p226, out_$i227, out_$i228, out_$i229, out_$p230, out_$p231, out_$p233, out_$i234, out_$p235, out_$p236, out_$i237, out_$p238, out_$p239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i246, out_$p247, out_$i248, out_$i249, out_$i250, out_$p251, out_$i59, out_$p60, out_$i252, out_$i253, out_$p17, out_$i18, out_$i19);
    return;

  exit:
    return;
}



procedure process_rcvd_data_loop_$bb4(in_$p0: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p11: ref, in_$i20: i32, in_$i21: i32, in_$i22: i1, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i1, in_$i45: i1, in_$i46: i1, in_$i49: i1, in_$i50: i8, in_$p51: ref, in_$p52: ref, in_$i53: i32, in_$i54: i32, in_$i55: i16, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i47: i16, in_$p48: ref, in_$i61: i8, in_$p62: ref, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i16, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$p72: ref, in_$i73: i24, in_$i74: i24, in_$i75: i24, in_$p76: ref, in_$p77: ref, in_$i78: i8, in_$i79: i64, in_$i80: i64, in_$i81: i64, in_$i82: i1, in_$p83: ref, in_$i84: i8, in_$i85: i32, in_$p86: ref, in_$i87: i8, in_$i88: i32, in_$p89: ref, in_$i90: i8, in_$i91: i32, in_$i92: i1, in_$p93: ref, in_$i94: i8, in_$i95: i32, in_$i96: i32, in_$i97: i8, in_$p98: ref, in_$p99: ref, in_$i100: i8, in_$i101: i32, in_$i102: i32, in_$i103: i32, in_$i104: i8, in_$p105: ref, in_$p106: ref, in_$i107: i8, in_$i108: i32, in_$i109: i1, in_$p110: ref, in_$i111: i8, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$i115: i8, in_$i116: i32, in_$i117: i8, in_$p118: ref, in_$p119: ref, in_$i120: i8, in_$i121: i32, in_$i122: i32, in_$i123: i8, in_$p124: ref, in_$p125: ref, in_$i126: i8, in_$i127: i16, in_$i128: i32, in_$i129: i32, in_$i130: i32, in_$p131: ref, in_$i132: i8, in_$i133: i16, in_$i134: i32, in_$i135: i32, in_$i136: i16, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$p140: ref, in_$p141: ref, in_$p142: ref, in_$p143: ref, in_$i144: i24, in_$i145: i24, in_$i146: i24, in_$p147: ref, in_$p148: ref, in_$i149: i8, in_$i150: i64, in_$i151: i64, in_$i152: i64, in_$i153: i1, in_$p154: ref, in_$i155: i8, in_$i156: i32, in_$p157: ref, in_$i158: i16, in_$i159: i32, in_$i160: i32, in_$i161: i1, in_$p162: ref, in_$i43: i16, in_$p44: ref, in_$i163: i32, in_$p164: ref, in_$i165: i16, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$p170: ref, in_$i171: i16, in_$p172: ref, in_$i169: i16, in_$i173: i32, in_$i174: i32, in_$i175: i32, in_$i176: i16, in_$p177: ref, in_$i178: i16, in_$i179: i32, in_$i180: i32, in_$i181: i32, in_$i182: i16, in_$p183: ref, in_$i184: i32, in_$i185: i1, in_$p186: ref, in_$i187: i8, in_$i188: i32, in_$i189: i64, in_$p190: ref, in_$p191: ref, in_$p193: ref, in_$p194: ref, in_$p195: ref, in_$p196: ref, in_$p197: ref, in_$i198: i8, in_$i199: i1, in_$p200: ref, in_$p201: ref, in_$p202: ref, in_$p203: ref, in_$p204: ref, in_$p205: ref, in_$i206: i24, in_$i207: i24, in_$i208: i24, in_$p209: ref, in_$p210: ref, in_$i211: i8, in_$i212: i64, in_$i213: i64, in_$i214: i64, in_$i215: i1, in_$i216: i32, in_$p217: ref, in_$i218: i8, in_$i219: i32, in_$p220: ref, in_$p221: ref, in_$i222: i32, in_$p223: ref, in_$p224: ref, in_$p226: ref, in_$i227: i32, in_$i228: i32, in_$i229: i32, in_$p230: ref, in_$p231: ref, in_$p233: ref, in_$i234: i64, in_$p235: ref, in_$p236: ref, in_$i237: i8, in_$p238: ref, in_$p239: ref, in_$i240: i32, in_$i241: i32, in_$i242: i16, in_$p243: ref, in_$i244: i8, in_$i245: i32, in_$i246: i8, in_$p247: ref, in_$i248: i8, in_$i249: i32, in_$i250: i8, in_$p251: ref, in_$i59: i16, in_$p60: ref, in_$i252: i32, in_$i253: i1, in_$p17: ref, in_$i18: i16, in_$i19: i16) returns (out_$i20: i32, out_$i21: i32, out_$i22: i1, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i1, out_$i45: i1, out_$i46: i1, out_$i49: i1, out_$i50: i8, out_$p51: ref, out_$p52: ref, out_$i53: i32, out_$i54: i32, out_$i55: i16, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i47: i16, out_$p48: ref, out_$i61: i8, out_$p62: ref, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i16, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$p72: ref, out_$i73: i24, out_$i74: i24, out_$i75: i24, out_$p76: ref, out_$p77: ref, out_$i78: i8, out_$i79: i64, out_$i80: i64, out_$i81: i64, out_$i82: i1, out_$p83: ref, out_$i84: i8, out_$i85: i32, out_$p86: ref, out_$i87: i8, out_$i88: i32, out_$p89: ref, out_$i90: i8, out_$i91: i32, out_$i92: i1, out_$p93: ref, out_$i94: i8, out_$i95: i32, out_$i96: i32, out_$i97: i8, out_$p98: ref, out_$p99: ref, out_$i100: i8, out_$i101: i32, out_$i102: i32, out_$i103: i32, out_$i104: i8, out_$p105: ref, out_$p106: ref, out_$i107: i8, out_$i108: i32, out_$i109: i1, out_$p110: ref, out_$i111: i8, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$i115: i8, out_$i116: i32, out_$i117: i8, out_$p118: ref, out_$p119: ref, out_$i120: i8, out_$i121: i32, out_$i122: i32, out_$i123: i8, out_$p124: ref, out_$p125: ref, out_$i126: i8, out_$i127: i16, out_$i128: i32, out_$i129: i32, out_$i130: i32, out_$p131: ref, out_$i132: i8, out_$i133: i16, out_$i134: i32, out_$i135: i32, out_$i136: i16, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$p140: ref, out_$p141: ref, out_$p142: ref, out_$p143: ref, out_$i144: i24, out_$i145: i24, out_$i146: i24, out_$p147: ref, out_$p148: ref, out_$i149: i8, out_$i150: i64, out_$i151: i64, out_$i152: i64, out_$i153: i1, out_$p154: ref, out_$i155: i8, out_$i156: i32, out_$p157: ref, out_$i158: i16, out_$i159: i32, out_$i160: i32, out_$i161: i1, out_$p162: ref, out_$i43: i16, out_$p44: ref, out_$i163: i32, out_$p164: ref, out_$i165: i16, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$p170: ref, out_$i171: i16, out_$p172: ref, out_$i169: i16, out_$i173: i32, out_$i174: i32, out_$i175: i32, out_$i176: i16, out_$p177: ref, out_$i178: i16, out_$i179: i32, out_$i180: i32, out_$i181: i32, out_$i182: i16, out_$p183: ref, out_$i184: i32, out_$i185: i1, out_$p186: ref, out_$i187: i8, out_$i188: i32, out_$i189: i64, out_$p190: ref, out_$p191: ref, out_$p193: ref, out_$p194: ref, out_$p195: ref, out_$p196: ref, out_$p197: ref, out_$i198: i8, out_$i199: i1, out_$p200: ref, out_$p201: ref, out_$p202: ref, out_$p203: ref, out_$p204: ref, out_$p205: ref, out_$i206: i24, out_$i207: i24, out_$i208: i24, out_$p209: ref, out_$p210: ref, out_$i211: i8, out_$i212: i64, out_$i213: i64, out_$i214: i64, out_$i215: i1, out_$i216: i32, out_$p217: ref, out_$i218: i8, out_$i219: i32, out_$p220: ref, out_$p221: ref, out_$i222: i32, out_$p223: ref, out_$p224: ref, out_$p226: ref, out_$i227: i32, out_$i228: i32, out_$i229: i32, out_$p230: ref, out_$p231: ref, out_$p233: ref, out_$i234: i64, out_$p235: ref, out_$p236: ref, out_$i237: i8, out_$p238: ref, out_$p239: ref, out_$i240: i32, out_$i241: i32, out_$i242: i16, out_$p243: ref, out_$i244: i8, out_$i245: i32, out_$i246: i8, out_$p247: ref, out_$i248: i8, out_$i249: i32, out_$i250: i8, out_$p251: ref, out_$i59: i16, out_$p60: ref, out_$i252: i32, out_$i253: i1, out_$p17: ref, out_$i18: i16, out_$i19: i16);
  modifies $M.0, $M.6, $M.5, $M.4, $M.3, $M.2, $M.1, $M.15, $CurrAddr, $M.16, assertsPassed;



implementation block_until_chase_response_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p8: ref, in_$i20: i32, in_$p21: ref, in_$i22: i16, in_$p23: ref, in_$i24: i8, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i24, in_$i33: i24, in_$i34: i24, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i1, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i70: i16, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i24, in_$i101: i24, in_$i102: i24, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$i106: i64, in_$i107: i64, in_$i108: i64, in_$i109: i1, in_$i110: i32, in_$p111: ref, in_$i112: i16, in_$i113: i32, in_$i93: i32, in_vslice_dummy_var_50: i64) returns (out_$i20: i32, out_$p21: ref, out_$i22: i16, out_$p23: ref, out_$i24: i8, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i24, out_$i33: i24, out_$i34: i24, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$i48: i1, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i70: i16, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i24, out_$i101: i24, out_$i102: i24, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$i106: i64, out_$i107: i64, out_$i108: i64, out_$i109: i1, out_$i110: i32, out_$p111: ref, out_$i112: i16, out_$i113: i32, out_$i93: i32, out_vslice_dummy_var_50: i64)
{

  entry:
    out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i93, out_vslice_dummy_var_50 := in_$i20, in_$p21, in_$i22, in_$p23, in_$i24, in_$i25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$p35, in_$p36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$i43, in_$i44, in_$p45, in_$i46, in_$i47, in_$i48, in_$p65, in_$i66, in_$p68, in_$p69, in_$i70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$p94, in_$p95, in_$p96, in_$p97, in_$p98, in_$p99, in_$i100, in_$i101, in_$i102, in_$p103, in_$p104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i93, in_vslice_dummy_var_50;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_5108;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i93;
    goto corral_source_split_5246_dummy;

  $bb23:
    assume {:verifier.code 0} true;
    goto corral_source_split_5246;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i93 := 10;
    goto $bb23;

  $bb22:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i74;
    goto $bb23;

  $bb18:
    assume !(out_$i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_5191:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    out_$i75 := $eq.i32(out_$i74, 0);
    goto corral_source_split_5191;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    out_$i74 := $sub.i32(out_$i20, 1);
    call {:si_unique_call 759} {:cexpr "loop"} boogie_si_record_i32(out_$i74);
    goto corral_source_split_5190;

  $bb15:
    assume out_$i73 == 1;
    goto corral_source_split_5189;

  corral_source_split_5187:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i71, out_$i72);
    goto corral_source_split_5187;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    out_$i72 := $zext.i16.i32(out_$i22);
    goto corral_source_split_5186;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    out_$i71 := $zext.i16.i32(out_$i70);
    goto corral_source_split_5185;

  corral_source_split_5183:
    assume {:verifier.code 0} true;
    out_$i70 := $load.i16($M.0, out_$p69);
    goto corral_source_split_5184;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    out_$p69 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5183;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 758} finish_wait(out_$p68, in_$p1);
    goto corral_source_split_5182;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_5181;

  corral_source_split_5179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} out_vslice_dummy_var_50 := schedule_timeout(out_$i66);
    goto corral_source_split_5180;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    out_$i66 := $sext.i32.i64(250);
    goto corral_source_split_5179;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    call {:si_unique_call 756} prepare_to_wait(out_$p65, in_$p1, 2);
    goto corral_source_split_5178;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p65 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_5177;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb2:
    assume out_$i25 == 1;
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i8.i1(out_$i24);
    goto corral_source_split_5113;

  corral_source_split_5111:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i8($M.0, out_$p23);
    goto corral_source_split_5112;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(136, 1));
    goto corral_source_split_5111;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    out_$i22 := $load.i16($M.0, out_$p21);
    call {:si_unique_call 749} {:cexpr "lastCredits"} boogie_si_record_i16(out_$i22);
    goto corral_source_split_5110;

  corral_source_split_5108:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5109;

  $bb8:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i44, out_$i47);
    goto corral_source_split_5148;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i16.i32(out_$i46);
    goto corral_source_split_5147;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i16($M.0, out_$p45);
    goto corral_source_split_5146;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(2, 1));
    goto corral_source_split_5145;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    out_$i44 := $zext.i16.i32(out_$i43);
    goto corral_source_split_5144;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    out_$i43 := $load.i16($M.0, out_$p42);
    goto corral_source_split_5143;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5142;

  $bb5:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} __dynamic_dev_dbg.ref.ref.ref.ref(in_$p2, in_$p8, .str.184, .str.183);
    goto corral_source_split_5140;

  $bb4:
    assume out_$i41 == 1;
    goto corral_source_split_5139;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_5137;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 750} out_$i40 := ldv__builtin_expect(out_$i39, 0);
    call {:si_unique_call 751} {:cexpr "tmp___0"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_5136;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    out_$i39 := $and.i64(out_$i38, 1);
    goto corral_source_split_5135;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i8.i64(out_$i37);
    goto corral_source_split_5134;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    out_$i37 := $load.i8($M.6, out_$p36);
    goto corral_source_split_5133;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    out_$p36 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5132;

  corral_source_split_5130:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p35, 0);
    goto corral_source_split_5131;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5130;

  corral_source_split_5128:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p31, out_$i34);
    goto corral_source_split_5129;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    out_$i34 := $or.i24(out_$i33, 944);
    goto corral_source_split_5128;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    out_$i33 := $and.i24(out_$i32, $sub.i24(0, 262144));
    goto corral_source_split_5127;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i24($M.5, out_$p31);
    goto corral_source_split_5126;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_5125;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5124;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p29, .str.184);
    goto corral_source_split_5123;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    out_$p29 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5122;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p28, .str.2);
    goto corral_source_split_5121;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5120;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p27, .str.183);
    goto corral_source_split_5119;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5118;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p26, .str);
    goto corral_source_split_5117;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    out_$p26 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5116;

  $bb3:
    assume !(out_$i25 == 1);
    goto corral_source_split_5115;

  $bb25:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 765} __dynamic_dev_dbg.ref.ref.ref.ref.i32.i32(in_$p5, in_$p8, .str.187, .str.183, out_$i110, out_$i113);
    goto corral_source_split_5253;

  corral_source_split_5251:
    assume {:verifier.code 0} true;
    out_$i113 := $zext.i16.i32(out_$i112);
    goto corral_source_split_5252;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    out_$i112 := $load.i16($M.0, out_$p111);
    goto corral_source_split_5251;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(0, 1));
    goto corral_source_split_5250;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    out_$i110 := $zext.i16.i32(out_$i22);
    goto corral_source_split_5249;

  $bb24:
    assume out_$i109 == 1;
    goto corral_source_split_5248;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    out_$i109 := $ne.i64(out_$i108, 0);
    goto corral_source_split_5215;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} out_$i108 := ldv__builtin_expect(out_$i107, 0);
    call {:si_unique_call 761} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i108);
    goto corral_source_split_5214;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    out_$i107 := $and.i64(out_$i106, 1);
    goto corral_source_split_5213;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    out_$i106 := $zext.i8.i64(out_$i105);
    goto corral_source_split_5212;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i8($M.6, out_$p104);
    goto corral_source_split_5211;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    out_$p104 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5210;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p103, 0);
    goto corral_source_split_5209;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    out_$p103 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5208;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p99, out_$i102);
    goto corral_source_split_5207;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    out_$i102 := $or.i24(out_$i101, 970);
    goto corral_source_split_5206;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    out_$i101 := $and.i24(out_$i100, $sub.i24(0, 262144));
    goto corral_source_split_5205;

  corral_source_split_5203:
    assume {:verifier.code 0} true;
    out_$i100 := $load.i24($M.5, out_$p99);
    goto corral_source_split_5204;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    out_$p99 := $bitcast.ref.ref(out_$p98);
    goto corral_source_split_5203;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    out_$p98 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5202;

  corral_source_split_5200:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p97, .str.187);
    goto corral_source_split_5201;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    out_$p97 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5200;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p96, .str.2);
    goto corral_source_split_5199;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5198;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p95, .str.183);
    goto corral_source_split_5197;

  corral_source_split_5195:
    assume {:verifier.code 0} true;
    out_$p95 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5196;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p94, .str);
    goto corral_source_split_5195;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5194;

  $bb16:
    assume !(out_$i73 == 1);
    goto corral_source_split_5193;

  corral_source_split_5246_dummy:
    call {:si_unique_call 1} out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i93, out_vslice_dummy_var_50 := block_until_chase_response_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p5, in_$p8, out_$i20, out_$p21, out_$i22, out_$p23, out_$i24, out_$i25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$p35, out_$p36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$i43, out_$i44, out_$p45, out_$i46, out_$i47, out_$i48, out_$p65, out_$i66, out_$p68, out_$p69, out_$i70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$p94, out_$p95, out_$p96, out_$p97, out_$p98, out_$p99, out_$i100, out_$i101, out_$i102, out_$p103, out_$p104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i93, out_vslice_dummy_var_50);
    return;

  exit:
    return;
}



procedure block_until_chase_response_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p5: ref, in_$p8: ref, in_$i20: i32, in_$p21: ref, in_$i22: i16, in_$p23: ref, in_$i24: i8, in_$i25: i1, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i24, in_$i33: i24, in_$i34: i24, in_$p35: ref, in_$p36: ref, in_$i37: i8, in_$i38: i64, in_$i39: i64, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$i43: i16, in_$i44: i32, in_$p45: ref, in_$i46: i16, in_$i47: i32, in_$i48: i1, in_$p65: ref, in_$i66: i64, in_$p68: ref, in_$p69: ref, in_$i70: i16, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i1, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$p98: ref, in_$p99: ref, in_$i100: i24, in_$i101: i24, in_$i102: i24, in_$p103: ref, in_$p104: ref, in_$i105: i8, in_$i106: i64, in_$i107: i64, in_$i108: i64, in_$i109: i1, in_$i110: i32, in_$p111: ref, in_$i112: i16, in_$i113: i32, in_$i93: i32, in_vslice_dummy_var_50: i64) returns (out_$i20: i32, out_$p21: ref, out_$i22: i16, out_$p23: ref, out_$i24: i8, out_$i25: i1, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i24, out_$i33: i24, out_$i34: i24, out_$p35: ref, out_$p36: ref, out_$i37: i8, out_$i38: i64, out_$i39: i64, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$i43: i16, out_$i44: i32, out_$p45: ref, out_$i46: i16, out_$i47: i32, out_$i48: i1, out_$p65: ref, out_$i66: i64, out_$p68: ref, out_$p69: ref, out_$i70: i16, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i1, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$p98: ref, out_$p99: ref, out_$i100: i24, out_$i101: i24, out_$i102: i24, out_$p103: ref, out_$p104: ref, out_$i105: i8, out_$i106: i64, out_$i107: i64, out_$i108: i64, out_$i109: i1, out_$i110: i32, out_$p111: ref, out_$i112: i16, out_$i113: i32, out_$i93: i32, out_vslice_dummy_var_50: i64);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation block_until_tx_empty_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p7: ref, in_$p20: ref, in_$i23: i32, in_$i24: i32, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i24, in_$i52: i24, in_$i53: i24, in_$p54: ref, in_$p55: ref, in_$i56: i8, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_vslice_dummy_var_51: i64) returns (out_$i23: i32, out_$i24: i32, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i24, out_$i52: i24, out_$i53: i24, out_$p54: ref, out_$p55: ref, out_$i56: i8, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_vslice_dummy_var_51: i64)
{

  entry:
    out_$i23, out_$i24, out_$p41, out_$i42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i82, out_$i83, out_$i84, out_vslice_dummy_var_51 := in_$i23, in_$i24, in_$p41, in_$i42, in_$p44, in_$p45, in_$p46, in_$p47, in_$p48, in_$p49, in_$p50, in_$i51, in_$i52, in_$i53, in_$p54, in_$p55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i82, in_$i83, in_$i84, in_vslice_dummy_var_51;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb23:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    out_$i23, out_$i24 := out_$i83, out_$i82;
    goto $bb23_dummy;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    out_$i84 := $eq.i32(out_$i83, 0);
    goto corral_source_split_5523;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    out_$i83 := $load.i32($M.0, in_$p20);
    call {:si_unique_call 817} {:cexpr "lastCount"} boogie_si_record_i32(out_$i83);
    goto corral_source_split_5522;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_5521;

  $bb15:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i82 := 30;
    goto $bb22;

  $bb21:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i64;
    goto $bb22;

  $bb17:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    out_$i65 := $eq.i32(out_$i64, 0);
    goto corral_source_split_5492;

  corral_source_split_5490:
    assume {:verifier.code 0} true;
    out_$i64 := $sub.i32(out_$i24, 1);
    call {:si_unique_call 813} {:cexpr "loop"} boogie_si_record_i32(out_$i64);
    goto corral_source_split_5491;

  $bb14:
    assume out_$i63 == 1;
    goto corral_source_split_5490;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    out_$i63 := $eq.i32(out_$i62, out_$i23);
    goto corral_source_split_5488;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    out_$i62 := $load.i32($M.0, out_$p61);
    goto corral_source_split_5487;

  $bb13:
    out_$p61 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(8, 1)), $mul.ref(8, 1));
    goto corral_source_split_5486;

  $bb12:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 812} __dynamic_dev_dbg.ref.ref.ref.ref(in_$p3, in_$p7, .str.181, .str.179);
    goto corral_source_split_5484;

  $bb11:
    assume out_$i60 == 1;
    goto corral_source_split_5483;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_5481;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    call {:si_unique_call 810} out_$i59 := ldv__builtin_expect(out_$i58, 0);
    call {:si_unique_call 811} {:cexpr "tmp___1"} boogie_si_record_i64(out_$i59);
    goto corral_source_split_5480;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    out_$i58 := $and.i64(out_$i57, 1);
    goto corral_source_split_5479;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    out_$i57 := $zext.i8.i64(out_$i56);
    goto corral_source_split_5478;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    out_$i56 := $load.i8($M.6, out_$p55);
    goto corral_source_split_5477;

  corral_source_split_5475:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5476;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $M.6 := $store.i8($M.6, out_$p54, 0);
    goto corral_source_split_5475;

  corral_source_split_5473:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5474;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $M.5 := $store.i24($M.5, out_$p50, out_$i53);
    goto corral_source_split_5473;

  corral_source_split_5471:
    assume {:verifier.code 0} true;
    out_$i53 := $or.i24(out_$i52, 1012);
    goto corral_source_split_5472;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    out_$i52 := $and.i24(out_$i51, $sub.i24(0, 262144));
    goto corral_source_split_5471;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    out_$i51 := $load.i24($M.5, out_$p50);
    goto corral_source_split_5470;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    out_$p50 := $bitcast.ref.ref(out_$p49);
    goto corral_source_split_5469;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    out_$p49 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5468;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p48, .str.181);
    goto corral_source_split_5467;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5466;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p47, .str.2);
    goto corral_source_split_5465;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5464;

  corral_source_split_5462:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p46, .str.179);
    goto corral_source_split_5463;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5462;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.1 := $store.ref($M.1, out_$p45, .str);
    goto corral_source_split_5461;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5460;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} finish_wait(out_$p44, in_$p1);
    goto corral_source_split_5459;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_5458;

  corral_source_split_5456:
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} out_vslice_dummy_var_51 := schedule_timeout(out_$i42);
    goto corral_source_split_5457;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(25);
    goto corral_source_split_5456;

  corral_source_split_5454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} prepare_to_wait(out_$p41, in_$p1, 2);
    goto corral_source_split_5455;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref(in_$p0, $mul.ref(0, 416)), $mul.ref(144, 1));
    goto corral_source_split_5454;

  $bb23_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$p41, out_$i42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i82, out_$i83, out_$i84, out_vslice_dummy_var_51 := block_until_tx_empty_loop_$bb4(in_$p0, in_$p1, in_$p3, in_$p7, in_$p20, out_$i23, out_$i24, out_$p41, out_$i42, out_$p44, out_$p45, out_$p46, out_$p47, out_$p48, out_$p49, out_$p50, out_$i51, out_$i52, out_$i53, out_$p54, out_$p55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i82, out_$i83, out_$i84, out_vslice_dummy_var_51);
    return;

  exit:
    return;
}



procedure block_until_tx_empty_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p7: ref, in_$p20: ref, in_$i23: i32, in_$i24: i32, in_$p41: ref, in_$i42: i64, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$p47: ref, in_$p48: ref, in_$p49: ref, in_$p50: ref, in_$i51: i24, in_$i52: i24, in_$i53: i24, in_$p54: ref, in_$p55: ref, in_$i56: i8, in_$i57: i64, in_$i58: i64, in_$i59: i64, in_$i60: i1, in_$p61: ref, in_$i62: i32, in_$i63: i1, in_$i64: i32, in_$i65: i1, in_$i82: i32, in_$i83: i32, in_$i84: i1, in_vslice_dummy_var_51: i64) returns (out_$i23: i32, out_$i24: i32, out_$p41: ref, out_$i42: i64, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$p47: ref, out_$p48: ref, out_$p49: ref, out_$p50: ref, out_$i51: i24, out_$i52: i24, out_$i53: i24, out_$p54: ref, out_$p55: ref, out_$i56: i8, out_$i57: i64, out_$i58: i64, out_$i59: i64, out_$i60: i1, out_$p61: ref, out_$i62: i32, out_$i63: i1, out_$i64: i32, out_$i65: i1, out_$i82: i32, out_$i83: i32, out_$i84: i1, out_vslice_dummy_var_51: i64);
  modifies $M.6, $M.5, $M.4, $M.3, $M.2, $M.1;



implementation load_application_firmware_loop_$bb26(in_$p0: ref, in_$p102: ref, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$i106: i16, in_$i107: i32, in_$i108: i16, in_$i109: i16, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i16, in_$i114: i32, in_$i115: i16, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i119: i32, in_$i120: i16, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p101: ref) returns (out_$p102: ref, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$i106: i16, out_$i107: i32, out_$i108: i16, out_$i109: i16, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i16, out_$i114: i32, out_$i115: i16, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i119: i32, out_$i120: i16, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p101: ref)
{

  entry:
    out_$p102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$p140, out_$i141, out_$i142, out_$p101 := in_$p102, in_$i103, in_$i104, in_$p105, in_$i106, in_$i107, in_$i108, in_$i109, in_$p110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$p121, in_$p122, in_$i123, in_$i124, in_$p125, in_$i126, in_$p140, in_$i141, in_$i142, in_$p101;
    goto $bb26, exit;

  $bb26:
    assume {:verifier.code 0} true;
    goto corral_source_split_7030;

  $bb32:
    assume out_$i142 == 1;
    assume {:verifier.code 0} true;
    out_$p101 := out_$p140;
    goto $bb32_dummy;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    out_$i142 := $ne.i64(out_$i141, 0);
    goto corral_source_split_7097;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    out_$i141 := $p2i.ref.i64(out_$p140);
    goto corral_source_split_7096;

  $bb31:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1033} out_$p140 := ihex_next_binrec(out_$p101);
    goto corral_source_split_7095;

  $bb29:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    out_$p125, out_$i126 := out_$p101, out_$i104;
    assume true;
    goto $bb29;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i123, 0);
    goto corral_source_split_7054;

  SeqInstr_207:
    call {:si_unique_call 1027} {:cexpr "response"} boogie_si_record_i32(out_$i123);
    goto corral_source_split_7053;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} out_$i123 := sram_write(out_$p111, out_$i115, out_$i118, out_$i120, out_$p122);
    goto SeqInstr_206;

  corral_source_split_7051:
    assume {:verifier.code 0} true;
    out_$p122 := $bitcast.ref.ref(out_$p121);
    goto corral_source_split_7052;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    out_$p121 := $add.ref($add.ref(out_$p101, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7051;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    out_$i120 := $trunc.i32.i16(out_$i119);
    goto corral_source_split_7050;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i16.i32(out_$i109);
    goto corral_source_split_7049;

  corral_source_split_7047:
    assume {:verifier.code 0} true;
    out_$i118 := $trunc.i32.i16(out_$i117);
    goto corral_source_split_7048;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    out_$i117 := $zext.i16.i32(out_$i116);
    goto corral_source_split_7047;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    out_$i116 := $trunc.i32.i16(out_$i104);
    goto corral_source_split_7046;

  corral_source_split_7044:
    assume {:verifier.code 0} true;
    out_$i115 := $trunc.i32.i16(out_$i114);
    goto corral_source_split_7045;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    out_$i114 := $zext.i16.i32(out_$i113);
    goto corral_source_split_7044;

  corral_source_split_7042:
    assume {:verifier.code 0} true;
    out_$i113 := $trunc.i32.i16(out_$i112);
    goto corral_source_split_7043;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    out_$i112 := $lshr.i32(out_$i104, 16);
    goto corral_source_split_7042;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$p111 := $load.ref($M.0, out_$p110);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1024} out_$i109 := __fswab16(out_$i108);
    call {:si_unique_call 1025} {:cexpr "tmp___2"} boogie_si_record_i16(out_$i109);
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    out_$i108 := $trunc.i32.i16(out_$i107);
    goto corral_source_split_7038;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i16.i32(out_$i106);
    goto corral_source_split_7037;

  corral_source_split_7035:
    assume {:verifier.code 0} true;
    out_$i106 := $load.i16($M.0, out_$p105);
    goto corral_source_split_7036;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref($add.ref(out_$p101, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7035;

  corral_source_split_7033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1022} out_$i104 := __fswab32(out_$i103);
    call {:si_unique_call 1023} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i104);
    goto corral_source_split_7034;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$i103 := $load.i32($M.0, out_$p102);
    goto corral_source_split_7033;

  $bb27:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref(out_$p101, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7032;

  corral_source_split_7030:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$p140, out_$i141, out_$i142, out_$p101 := load_application_firmware_loop_$bb26(in_$p0, out_$p102, out_$i103, out_$i104, out_$p105, out_$i106, out_$i107, out_$i108, out_$i109, out_$p110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$p121, out_$p122, out_$i123, out_$i124, out_$p125, out_$i126, out_$p140, out_$i141, out_$i142, out_$p101);
    return;

  exit:
    return;
}



procedure load_application_firmware_loop_$bb26(in_$p0: ref, in_$p102: ref, in_$i103: i32, in_$i104: i32, in_$p105: ref, in_$i106: i16, in_$i107: i32, in_$i108: i16, in_$i109: i16, in_$p110: ref, in_$p111: ref, in_$i112: i32, in_$i113: i16, in_$i114: i32, in_$i115: i16, in_$i116: i16, in_$i117: i32, in_$i118: i16, in_$i119: i32, in_$i120: i16, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i126: i32, in_$p140: ref, in_$i141: i64, in_$i142: i1, in_$p101: ref) returns (out_$p102: ref, out_$i103: i32, out_$i104: i32, out_$p105: ref, out_$i106: i16, out_$i107: i32, out_$i108: i16, out_$i109: i16, out_$p110: ref, out_$p111: ref, out_$i112: i32, out_$i113: i16, out_$i114: i32, out_$i115: i16, out_$i116: i16, out_$i117: i32, out_$i118: i16, out_$i119: i32, out_$i120: i16, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i126: i32, out_$p140: ref, out_$i141: i64, out_$i142: i1, out_$p101: ref);
  modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $CurrAddr, assertsPassed;



implementation update_edgeport_E2PROM_loop_$bb29(in_$p0: ref, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$i157: i16, in_$i158: i32, in_$i159: i16, in_$i160: i16, in_$p161: ref, in_$p162: ref, in_$i163: i32, in_$i164: i16, in_$i165: i32, in_$i166: i16, in_$i167: i16, in_$i168: i32, in_$i169: i16, in_$i170: i32, in_$i171: i16, in_$p172: ref, in_$p173: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i32, in_$p191: ref, in_$i192: i64, in_$i193: i1, in_$p152: ref) returns (out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$i157: i16, out_$i158: i32, out_$i159: i16, out_$i160: i16, out_$p161: ref, out_$p162: ref, out_$i163: i32, out_$i164: i16, out_$i165: i32, out_$i166: i16, out_$i167: i16, out_$i168: i32, out_$i169: i16, out_$i170: i32, out_$i171: i16, out_$p172: ref, out_$p173: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i32, out_$p191: ref, out_$i192: i64, out_$i193: i1, out_$p152: ref)
{

  entry:
    out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i175, out_$p176, out_$i177, out_$p191, out_$i192, out_$i193, out_$p152 := in_$p153, in_$i154, in_$i155, in_$p156, in_$i157, in_$i158, in_$i159, in_$i160, in_$p161, in_$p162, in_$i163, in_$i164, in_$i165, in_$i166, in_$i167, in_$i168, in_$i169, in_$i170, in_$i171, in_$p172, in_$p173, in_$i174, in_$i175, in_$p176, in_$i177, in_$p191, in_$i192, in_$i193, in_$p152;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7315;

  $bb35:
    assume out_$i193 == 1;
    assume {:verifier.code 0} true;
    out_$p152 := out_$p191;
    goto $bb35_dummy;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    out_$i193 := $ne.i64(out_$i192, 0);
    goto corral_source_split_7359;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    out_$i192 := $p2i.ref.i64(out_$p191);
    goto corral_source_split_7358;

  $bb34:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1074} out_$p191 := ihex_next_binrec(out_$p152);
    goto corral_source_split_7357;

  $bb32:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    out_$p176, out_$i177 := out_$p152, out_$i155;
    assume true;
    goto $bb32;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    out_$i175 := $slt.i32(out_$i174, 0);
    goto corral_source_split_7339;

  SeqInstr_210:
    call {:si_unique_call 1070} {:cexpr "response"} boogie_si_record_i32(out_$i174);
    goto corral_source_split_7338;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1069} out_$i174 := rom_write(out_$p162, out_$i166, out_$i169, out_$i171, out_$p173);
    goto SeqInstr_209;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    out_$p173 := $bitcast.ref.ref(out_$p172);
    goto corral_source_split_7337;

  corral_source_split_7335:
    assume {:verifier.code 0} true;
    out_$p172 := $add.ref($add.ref(out_$p152, $mul.ref(0, 8)), $mul.ref(6, 1));
    goto corral_source_split_7336;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    out_$i171 := $trunc.i32.i16(out_$i170);
    goto corral_source_split_7335;

  corral_source_split_7333:
    assume {:verifier.code 0} true;
    out_$i170 := $zext.i16.i32(out_$i160);
    goto corral_source_split_7334;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    out_$i169 := $trunc.i32.i16(out_$i168);
    goto corral_source_split_7333;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    out_$i168 := $zext.i16.i32(out_$i167);
    goto corral_source_split_7332;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    out_$i167 := $trunc.i32.i16(out_$i155);
    goto corral_source_split_7331;

  corral_source_split_7329:
    assume {:verifier.code 0} true;
    out_$i166 := $trunc.i32.i16(out_$i165);
    goto corral_source_split_7330;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    out_$i165 := $zext.i16.i32(out_$i164);
    goto corral_source_split_7329;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    out_$i164 := $trunc.i32.i16(out_$i163);
    goto corral_source_split_7328;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    out_$i163 := $lshr.i32(out_$i155, 16);
    goto corral_source_split_7327;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    out_$p162 := $load.ref($M.0, out_$p161);
    goto corral_source_split_7326;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    out_$p161 := $add.ref($add.ref(in_$p0, $mul.ref(0, 1312)), $mul.ref(1304, 1));
    goto corral_source_split_7325;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} out_$i160 := __fswab16(out_$i159);
    call {:si_unique_call 1068} {:cexpr "tmp___3"} boogie_si_record_i16(out_$i160);
    goto corral_source_split_7324;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    out_$i159 := $trunc.i32.i16(out_$i158);
    goto corral_source_split_7323;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    out_$i158 := $zext.i16.i32(out_$i157);
    goto corral_source_split_7322;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    out_$i157 := $load.i16($M.0, out_$p156);
    goto corral_source_split_7321;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    out_$p156 := $add.ref($add.ref(out_$p152, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7320;

  corral_source_split_7318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1065} out_$i155 := __fswab32(out_$i154);
    call {:si_unique_call 1066} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i155);
    goto corral_source_split_7319;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    out_$i154 := $load.i32($M.0, out_$p153);
    goto corral_source_split_7318;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p153 := $add.ref($add.ref(out_$p152, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_7317;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb35_dummy:
    call {:si_unique_call 1} out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i175, out_$p176, out_$i177, out_$p191, out_$i192, out_$i193, out_$p152 := update_edgeport_E2PROM_loop_$bb29(in_$p0, out_$p153, out_$i154, out_$i155, out_$p156, out_$i157, out_$i158, out_$i159, out_$i160, out_$p161, out_$p162, out_$i163, out_$i164, out_$i165, out_$i166, out_$i167, out_$i168, out_$i169, out_$i170, out_$i171, out_$p172, out_$p173, out_$i174, out_$i175, out_$p176, out_$i177, out_$p191, out_$i192, out_$i193, out_$p152);
    return;

  exit:
    return;
}



procedure update_edgeport_E2PROM_loop_$bb29(in_$p0: ref, in_$p153: ref, in_$i154: i32, in_$i155: i32, in_$p156: ref, in_$i157: i16, in_$i158: i32, in_$i159: i16, in_$i160: i16, in_$p161: ref, in_$p162: ref, in_$i163: i32, in_$i164: i16, in_$i165: i32, in_$i166: i16, in_$i167: i16, in_$i168: i32, in_$i169: i16, in_$i170: i32, in_$i171: i16, in_$p172: ref, in_$p173: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i177: i32, in_$p191: ref, in_$i192: i64, in_$i193: i1, in_$p152: ref) returns (out_$p153: ref, out_$i154: i32, out_$i155: i32, out_$p156: ref, out_$i157: i16, out_$i158: i32, out_$i159: i16, out_$i160: i16, out_$p161: ref, out_$p162: ref, out_$i163: i32, out_$i164: i16, out_$i165: i32, out_$i166: i16, out_$i167: i16, out_$i168: i32, out_$i169: i16, out_$i170: i32, out_$i171: i16, out_$p172: ref, out_$p173: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i177: i32, out_$p191: ref, out_$i192: i64, out_$i193: i1, out_$p152: ref);
  modifies $M.0, assertsPassed;



implementation rom_write_loop_$bb8(in_$p0: ref, in_$i1: i16, in_$p5: ref, in_$i15: i32, in_$i16: i1, in_$i17: i16, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i16, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i12: i16, in_$i13: i16, in_$p14: ref, in_$i47: i32, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8) returns (out_$i15: i32, out_$i16: i1, out_$i17: i16, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i16, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i12: i16, out_$i13: i16, out_$p14: ref, out_$i47: i32, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i12, out_$i13, out_$p14, out_$i47, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29 := in_$i15, in_$i16, in_$i17, in_$i18, in_$p19, in_$p20, in_$i21, in_$p22, in_$p23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i12, in_$i13, in_$p14, in_$i47, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7539;

  $bb17:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$p14 := out_$i42, out_$i38, out_$p44;
    goto $bb17_dummy;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i31;
    assume true;
    goto $bb17;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_7580;

  corral_source_split_7578:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i38);
    goto corral_source_split_7579;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p14, $mul.ref(out_$i43, 1));
    goto corral_source_split_7578;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i64(out_$i17);
    goto corral_source_split_7577;

  corral_source_split_7575:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i16(out_$i41);
    call {:si_unique_call 1127} {:cexpr "addr"} boogie_si_record_i16(out_$i42);
    goto corral_source_split_7576;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i39, out_$i40);
    goto corral_source_split_7575;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i17);
    goto corral_source_split_7574;

  corral_source_split_7572:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i12);
    goto corral_source_split_7573;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    call {:si_unique_call 1126} {:cexpr "length"} boogie_si_record_i16(out_$i38);
    goto corral_source_split_7572;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i35, out_$i36);
    goto corral_source_split_7571;

  corral_source_split_7569:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i17);
    goto corral_source_split_7570;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i13);
    goto corral_source_split_7569;

  $bb14:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    assume true;
    goto $bb14;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i31, 0);
    goto corral_source_split_7562;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} out_$i31 := usb_control_msg(out_$p23, out_$i24, 6, 64, out_$i26, out_$i28, in_$p5, out_$i30, 300);
    call {:si_unique_call 1124} {:cexpr "result"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    out_$i30 := $trunc.i32.i16(out_$i29);
    goto corral_source_split_7560;

  corral_source_split_7558:
    assume {:verifier.code 0} true;
    out_$i29 := $zext.i16.i32(out_$i17);
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    out_$i28 := $trunc.i32.i16(out_$i27);
    goto corral_source_split_7558;

  corral_source_split_7556:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(in_$i1);
    goto corral_source_split_7557;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    out_$i26 := $trunc.i32.i16(out_$i25);
    goto corral_source_split_7556;

  corral_source_split_7554:
    assume {:verifier.code 0} true;
    out_$i25 := $zext.i16.i32(out_$i12);
    goto corral_source_split_7555;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    out_$i24 := $or.i32(out_$i21, $sub.i32(0, 2147483648));
    goto corral_source_split_7554;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_7553;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7552;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} out_$i21 := __create_pipe(out_$p20, 0);
    call {:si_unique_call 1122} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i21);
    goto corral_source_split_7551;

  corral_source_split_7549:
    assume {:verifier.code 0} true;
    out_$p20 := $load.ref($M.0, out_$p19);
    goto corral_source_split_7550;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    out_$p19 := $add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7549;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_27 := $M.0;
    out_cmdloc_dummy_var_28 := $M.0;
    call {:si_unique_call 1120} out_cmdloc_dummy_var_29 := $memcpy.i8(out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, in_$p5, out_$p14, out_$i18, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_29;
    goto corral_source_split_7548;

  corral_source_split_7546:
    assume {:verifier.code 0} true;
    out_$i18 := $zext.i16.i64(out_$i17);
    goto corral_source_split_7547;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_7546;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i13;
    goto $bb12;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    out_$i17 := 64;
    goto $bb12;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_7544;

  corral_source_split_7542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    out_$i16 := $ugt.i32(out_$i15, 64);
    goto corral_source_split_7542;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i13);
    goto corral_source_split_7541;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i12, out_$i13, out_$p14, out_$i47, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29 := rom_write_loop_$bb8(in_$p0, in_$i1, in_$p5, out_$i15, out_$i16, out_$i17, out_$i18, out_$p19, out_$p20, out_$i21, out_$p22, out_$p23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i12, out_$i13, out_$p14, out_$i47, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29);
    return;

  exit:
    return;
}



procedure rom_write_loop_$bb8(in_$p0: ref, in_$i1: i16, in_$p5: ref, in_$i15: i32, in_$i16: i1, in_$i17: i16, in_$i18: i64, in_$p19: ref, in_$p20: ref, in_$i21: i32, in_$p22: ref, in_$p23: ref, in_$i24: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i16, in_$i29: i32, in_$i30: i16, in_$i31: i32, in_$i32: i1, in_$i33: i32, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i16, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i12: i16, in_$i13: i16, in_$p14: ref, in_$i47: i32, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8) returns (out_$i15: i32, out_$i16: i1, out_$i17: i16, out_$i18: i64, out_$p19: ref, out_$p20: ref, out_$i21: i32, out_$p22: ref, out_$p23: ref, out_$i24: i32, out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i16, out_$i29: i32, out_$i30: i16, out_$i31: i32, out_$i32: i1, out_$i33: i32, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i16, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i12: i16, out_$i13: i16, out_$p14: ref, out_$i47: i32, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8);
  modifies $M.0;



implementation ihex_validate_fw_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i16, in_$i9: i32, in_$i10: i16, in_$i11: i16, in_$i12: i32, in_$i13: i1, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i16, in_$i19: i16, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$i2: i64) returns (out_$p3: ref, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i16, out_$i9: i32, out_$i10: i16, out_$i11: i16, out_$i12: i32, out_$i13: i1, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i16, out_$i19: i16, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$i2: i64)
{

  entry:
    out_$p3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i2 := in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$i8, in_$i9, in_$i10, in_$i11, in_$i12, in_$i13, in_$p15, in_$i16, in_$i17, in_$i18, in_$i19, in_$i20, in_$i21, in_$i22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i2;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_7597;

  $bb7:
    assume out_$i26 == 1;
    assume {:verifier.code 0} true;
    out_$i2 := out_$i23;
    goto $bb7_dummy;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    out_$i26 := $uge.i64(out_$i25, out_$i23);
    goto corral_source_split_7626;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    out_$i25 := $sub.i64(out_$i24, 6);
    goto corral_source_split_7625;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    out_$i24 := $load.i64($M.26, in_$p1);
    goto corral_source_split_7624;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    out_$i23 := $add.i64(out_$i22, out_$i2);
    call {:si_unique_call 1146} {:cexpr "ofs"} boogie_si_record_i64(out_$i23);
    goto corral_source_split_7623;

  corral_source_split_7621:
    assume {:verifier.code 0} true;
    out_$i22 := $and.i64(out_$i21, $sub.i64(0, 4));
    goto corral_source_split_7622;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    out_$i21 := $add.i64(out_$i20, 9);
    goto corral_source_split_7621;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    out_$i20 := $zext.i16.i64(out_$i19);
    goto corral_source_split_7620;

  corral_source_split_7618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} out_$i19 := __fswab16(out_$i18);
    call {:si_unique_call 1145} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i19);
    goto corral_source_split_7619;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    out_$i18 := $trunc.i32.i16(out_$i17);
    goto corral_source_split_7618;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    out_$i17 := $zext.i16.i32(out_$i16);
    goto corral_source_split_7617;

  corral_source_split_7615:
    assume {:verifier.code 0} true;
    out_$i16 := $load.i16($M.0, out_$p15);
    goto corral_source_split_7616;

  $bb6:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7615;

  $bb4:
    assume !(out_$i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    out_$i13 := $eq.i32(out_$i12, 0);
    goto corral_source_split_7609;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    out_$i12 := $zext.i16.i32(out_$i11);
    goto corral_source_split_7608;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} out_$i11 := __fswab16(out_$i10);
    call {:si_unique_call 1143} {:cexpr "tmp"} boogie_si_record_i16(out_$i11);
    goto corral_source_split_7607;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    out_$i10 := $trunc.i32.i16(out_$i9);
    goto corral_source_split_7606;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    out_$i9 := $zext.i16.i32(out_$i8);
    goto corral_source_split_7605;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    out_$i8 := $load.i16($M.0, out_$p7);
    goto corral_source_split_7604;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(out_$p6, $mul.ref(0, 8)), $mul.ref(4, 1));
    goto corral_source_split_7603;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    out_$p6 := $bitcast.ref.ref(out_$p5);
    goto corral_source_split_7602;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    out_$p5 := $add.ref(out_$p4, $mul.ref(out_$i2, 1));
    goto corral_source_split_7601;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    out_$p4 := $load.ref($M.24, out_$p3);
    goto corral_source_split_7600;

  $bb2:
    assume {:verifier.code 0} true;
    out_$p3 := $add.ref($add.ref(in_$p0, $mul.ref(0, 32)), $mul.ref(8, 1));
    goto corral_source_split_7599;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb7_dummy:
    call {:si_unique_call 1} out_$p3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i2 := ihex_validate_fw_loop_$bb1(in_$p0, in_$p1, out_$p3, out_$p4, out_$p5, out_$p6, out_$p7, out_$i8, out_$i9, out_$i10, out_$i11, out_$i12, out_$i13, out_$p15, out_$i16, out_$i17, out_$i18, out_$i19, out_$i20, out_$i21, out_$i22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i2);
    return;

  exit:
    return;
}



procedure ihex_validate_fw_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$i8: i16, in_$i9: i32, in_$i10: i16, in_$i11: i16, in_$i12: i32, in_$i13: i1, in_$p15: ref, in_$i16: i16, in_$i17: i32, in_$i18: i16, in_$i19: i16, in_$i20: i64, in_$i21: i64, in_$i22: i64, in_$i23: i64, in_$i24: i64, in_$i25: i64, in_$i26: i1, in_$i2: i64) returns (out_$p3: ref, out_$p4: ref, out_$p5: ref, out_$p6: ref, out_$p7: ref, out_$i8: i16, out_$i9: i32, out_$i10: i16, out_$i11: i16, out_$i12: i32, out_$i13: i1, out_$p15: ref, out_$i16: i16, out_$i17: i32, out_$i18: i16, out_$i19: i16, out_$i20: i64, out_$i21: i64, out_$i22: i64, out_$i23: i64, out_$i24: i64, out_$i25: i64, out_$i26: i1, out_$i2: i64);



implementation sram_write_loop_$bb11(in_$p0: ref, in_$i1: i16, in_$p28: ref, in_$i38: i32, in_$i39: i1, in_$i40: i16, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i16, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i16, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i16, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i35: i16, in_$i36: i16, in_$p37: ref, in_$i70: i32, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8) returns (out_$i38: i32, out_$i39: i1, out_$i40: i16, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i16, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i16, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i16, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i35: i16, out_$i36: i16, out_$p37: ref, out_$i70: i32, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8)
{

  entry:
    out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i35, out_$i36, out_$p37, out_$i70, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32 := in_$i38, in_$i39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$p67, in_$i68, in_$i69, in_$i35, in_$i36, in_$p37, in_$i70, in_cmdloc_dummy_var_30, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7674;

  $bb20:
    assume out_$i69 == 1;
    assume {:verifier.code 0} true;
    out_$i35, out_$i36, out_$p37 := out_$i65, out_$i61, out_$p67;
    goto $bb20_dummy;

  corral_source_split_7715:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i54;
    assume true;
    goto $bb20;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    out_$i69 := $ne.i32(out_$i68, 0);
    goto corral_source_split_7715;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    out_$i68 := $zext.i16.i32(out_$i61);
    goto corral_source_split_7714;

  corral_source_split_7712:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref(out_$p37, $mul.ref(out_$i66, 1));
    goto corral_source_split_7713;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    out_$i66 := $zext.i16.i64(out_$i40);
    goto corral_source_split_7712;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    out_$i65 := $trunc.i32.i16(out_$i64);
    call {:si_unique_call 1162} {:cexpr "addr"} boogie_si_record_i16(out_$i65);
    goto corral_source_split_7711;

  corral_source_split_7709:
    assume {:verifier.code 0} true;
    out_$i64 := $add.i32(out_$i62, out_$i63);
    goto corral_source_split_7710;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    out_$i63 := $zext.i16.i32(out_$i40);
    goto corral_source_split_7709;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    out_$i62 := $zext.i16.i32(out_$i35);
    goto corral_source_split_7708;

  corral_source_split_7706:
    assume {:verifier.code 0} true;
    out_$i61 := $trunc.i32.i16(out_$i60);
    call {:si_unique_call 1161} {:cexpr "length"} boogie_si_record_i16(out_$i61);
    goto corral_source_split_7707;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    out_$i60 := $sub.i32(out_$i58, out_$i59);
    goto corral_source_split_7706;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    out_$i59 := $zext.i16.i32(out_$i40);
    goto corral_source_split_7705;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i16.i32(out_$i36);
    goto corral_source_split_7704;

  $bb17:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    out_$i56 := out_$i54;
    assume true;
    goto $bb17;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i54, 0);
    goto corral_source_split_7697;

  corral_source_split_7695:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1158} out_$i54 := usb_control_msg(out_$p46, out_$i47, 4, 64, out_$i49, out_$i51, in_$p28, out_$i53, 300);
    call {:si_unique_call 1159} {:cexpr "result"} boogie_si_record_i32(out_$i54);
    goto corral_source_split_7696;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i16(out_$i52);
    goto corral_source_split_7695;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    out_$i52 := $zext.i16.i32(out_$i40);
    goto corral_source_split_7694;

  corral_source_split_7692:
    assume {:verifier.code 0} true;
    out_$i51 := $trunc.i32.i16(out_$i50);
    goto corral_source_split_7693;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    out_$i50 := $zext.i16.i32(in_$i1);
    goto corral_source_split_7692;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    out_$i49 := $trunc.i32.i16(out_$i48);
    goto corral_source_split_7691;

  corral_source_split_7689:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i16.i32(out_$i35);
    goto corral_source_split_7690;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    out_$i47 := $or.i32(out_$i44, $sub.i32(0, 2147483648));
    goto corral_source_split_7689;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_7688;

  corral_source_split_7686:
    assume {:verifier.code 0} true;
    out_$p45 := $add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7687;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1156} out_$i44 := __create_pipe(out_$p43, 0);
    call {:si_unique_call 1157} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_7686;

  corral_source_split_7684:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_7685;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_7684;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_30 := $M.0;
    out_cmdloc_dummy_var_31 := $M.0;
    call {:si_unique_call 1155} out_cmdloc_dummy_var_32 := $memcpy.i8(out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, in_$p28, out_$p37, out_$i41, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_32;
    goto corral_source_split_7683;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    out_$i41 := $zext.i16.i64(out_$i40);
    goto corral_source_split_7682;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_7681;

  $bb14:
    assume !(out_$i39 == 1);
    assume {:verifier.code 0} true;
    out_$i40 := out_$i36;
    goto $bb15;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    out_$i40 := 64;
    goto $bb15;

  $bb13:
    assume out_$i39 == 1;
    goto corral_source_split_7679;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_7676:
    assume {:verifier.code 0} true;
    out_$i39 := $ugt.i32(out_$i38, 64);
    goto corral_source_split_7677;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i38 := $zext.i16.i32(out_$i36);
    goto corral_source_split_7676;

  corral_source_split_7674:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i35, out_$i36, out_$p37, out_$i70, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32 := sram_write_loop_$bb11(in_$p0, in_$i1, in_$p28, out_$i38, out_$i39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$p67, out_$i68, out_$i69, out_$i35, out_$i36, out_$p37, out_$i70, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32);
    return;

  exit:
    return;
}



procedure sram_write_loop_$bb11(in_$p0: ref, in_$i1: i16, in_$p28: ref, in_$i38: i32, in_$i39: i1, in_$i40: i16, in_$i41: i64, in_$p42: ref, in_$p43: ref, in_$i44: i32, in_$p45: ref, in_$p46: ref, in_$i47: i32, in_$i48: i32, in_$i49: i16, in_$i50: i32, in_$i51: i16, in_$i52: i32, in_$i53: i16, in_$i54: i32, in_$i55: i1, in_$i56: i32, in_$i58: i32, in_$i59: i32, in_$i60: i32, in_$i61: i16, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i16, in_$i66: i64, in_$p67: ref, in_$i68: i32, in_$i69: i1, in_$i35: i16, in_$i36: i16, in_$p37: ref, in_$i70: i32, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8) returns (out_$i38: i32, out_$i39: i1, out_$i40: i16, out_$i41: i64, out_$p42: ref, out_$p43: ref, out_$i44: i32, out_$p45: ref, out_$p46: ref, out_$i47: i32, out_$i48: i32, out_$i49: i16, out_$i50: i32, out_$i51: i16, out_$i52: i32, out_$i53: i16, out_$i54: i32, out_$i55: i1, out_$i56: i32, out_$i58: i32, out_$i59: i32, out_$i60: i32, out_$i61: i16, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i16, out_$i66: i64, out_$p67: ref, out_$i68: i32, out_$i69: i1, out_$i35: i16, out_$i36: i16, out_$p37: ref, out_$i70: i32, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8);
  modifies $M.0;



implementation rom_read_loop_$bb8(in_$p0: ref, in_$i1: i16, in_$p5: ref, in_$i15: i32, in_$i16: i1, in_$i17: i16, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i34: i64, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i16, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i12: i16, in_$i13: i16, in_$p14: ref, in_$i47: i32, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$i15: i32, out_$i16: i1, out_$i17: i16, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i34: i64, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i16, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i12: i16, out_$i13: i16, out_$p14: ref, out_$i47: i32, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8)
{

  entry:
    out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i12, out_$i13, out_$p14, out_$i47, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := in_$i15, in_$i16, in_$i17, in_$p18, in_$p19, in_$i20, in_$p21, in_$p22, in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i30, in_$i31, in_$i32, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$i45, in_$i46, in_$i12, in_$i13, in_$p14, in_$i47, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8259;

  $bb17:
    assume out_$i46 == 1;
    assume {:verifier.code 0} true;
    out_$i12, out_$i13, out_$p14 := out_$i42, out_$i38, out_$p44;
    goto $bb17_dummy;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i30;
    assume true;
    goto $bb17;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_8300;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    out_$i45 := $zext.i16.i32(out_$i38);
    goto corral_source_split_8299;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref(out_$p14, $mul.ref(out_$i43, 1));
    goto corral_source_split_8298;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i64(out_$i17);
    goto corral_source_split_8297;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    out_$i42 := $trunc.i32.i16(out_$i41);
    call {:si_unique_call 1242} {:cexpr "addr"} boogie_si_record_i16(out_$i42);
    goto corral_source_split_8296;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i39, out_$i40);
    goto corral_source_split_8295;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i17);
    goto corral_source_split_8294;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    out_$i39 := $zext.i16.i32(out_$i12);
    goto corral_source_split_8293;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    call {:si_unique_call 1241} {:cexpr "length"} boogie_si_record_i16(out_$i38);
    goto corral_source_split_8292;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    out_$i37 := $sub.i32(out_$i35, out_$i36);
    goto corral_source_split_8291;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i16.i32(out_$i17);
    goto corral_source_split_8290;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    out_$i35 := $zext.i16.i32(out_$i13);
    goto corral_source_split_8289;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_33 := $M.0;
    out_cmdloc_dummy_var_34 := $M.0;
    call {:si_unique_call 1240} out_cmdloc_dummy_var_35 := $memcpy.i8(out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_$p14, in_$p5, out_$i34, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_35;
    goto corral_source_split_8288;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i64(out_$i17);
    goto corral_source_split_8287;

  $bb14:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    out_$i32 := out_$i30;
    assume true;
    goto $bb14;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    out_$i31 := $slt.i32(out_$i30, 0);
    goto corral_source_split_8280;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1237} out_$i30 := usb_control_msg(out_$p22, out_$i23, 5, $sub.i8(0, 64), out_$i25, out_$i27, in_$p5, out_$i29, 300);
    call {:si_unique_call 1238} {:cexpr "result"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_8279;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    out_$i29 := $trunc.i32.i16(out_$i28);
    goto corral_source_split_8278;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    out_$i28 := $zext.i16.i32(out_$i17);
    goto corral_source_split_8277;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    out_$i27 := $trunc.i32.i16(out_$i26);
    goto corral_source_split_8276;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    out_$i26 := $zext.i16.i32(in_$i1);
    goto corral_source_split_8275;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    out_$i25 := $trunc.i32.i16(out_$i24);
    goto corral_source_split_8274;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    out_$i24 := $zext.i16.i32(out_$i12);
    goto corral_source_split_8273;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    out_$i23 := $or.i32(out_$i20, $sub.i32(0, 2147483520));
    goto corral_source_split_8272;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    out_$p22 := $load.ref($M.0, out_$p21);
    goto corral_source_split_8271;

  corral_source_split_8269:
    assume {:verifier.code 0} true;
    out_$p21 := $add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_8270;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1235} out_$i20 := __create_pipe(out_$p19, 0);
    call {:si_unique_call 1236} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i20);
    goto corral_source_split_8269;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    out_$p19 := $load.ref($M.0, out_$p18);
    goto corral_source_split_8268;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 272)), $mul.ref(0, 1));
    goto corral_source_split_8267;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_8266;

  $bb11:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    out_$i17 := out_$i13;
    goto $bb12;

  corral_source_split_8264:
    assume {:verifier.code 0} true;
    out_$i17 := 64;
    goto $bb12;

  $bb10:
    assume out_$i16 == 1;
    goto corral_source_split_8264;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    out_$i16 := $ugt.i32(out_$i15, 64);
    goto corral_source_split_8262;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i13);
    goto corral_source_split_8261;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i12, out_$i13, out_$p14, out_$i47, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35 := rom_read_loop_$bb8(in_$p0, in_$i1, in_$p5, out_$i15, out_$i16, out_$i17, out_$p18, out_$p19, out_$i20, out_$p21, out_$p22, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i30, out_$i31, out_$i32, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$i45, out_$i46, out_$i12, out_$i13, out_$p14, out_$i47, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35);
    return;

  exit:
    return;
}



procedure rom_read_loop_$bb8(in_$p0: ref, in_$i1: i16, in_$p5: ref, in_$i15: i32, in_$i16: i1, in_$i17: i16, in_$p18: ref, in_$p19: ref, in_$i20: i32, in_$p21: ref, in_$p22: ref, in_$i23: i32, in_$i24: i32, in_$i25: i16, in_$i26: i32, in_$i27: i16, in_$i28: i32, in_$i29: i16, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i34: i64, in_$i35: i32, in_$i36: i32, in_$i37: i32, in_$i38: i16, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i16, in_$i43: i64, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i12: i16, in_$i13: i16, in_$p14: ref, in_$i47: i32, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8) returns (out_$i15: i32, out_$i16: i1, out_$i17: i16, out_$p18: ref, out_$p19: ref, out_$i20: i32, out_$p21: ref, out_$p22: ref, out_$i23: i32, out_$i24: i32, out_$i25: i16, out_$i26: i32, out_$i27: i16, out_$i28: i32, out_$i29: i16, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i34: i64, out_$i35: i32, out_$i36: i32, out_$i37: i32, out_$i38: i16, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i16, out_$i43: i64, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i12: i16, out_$i13: i16, out_$p14: ref, out_$i47: i32, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8);
  modifies $M.0;



implementation unicode_to_ascii_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$i5: i32, in_$i9: i1, in_$i10: i32, in_$i12: i64, in_$p13: ref, in_$i14: i16, in_$i15: i8, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i8: i32, in_$i20: i32) returns (out_$i9: i1, out_$i10: i32, out_$i12: i64, out_$p13: ref, out_$i14: i16, out_$i15: i8, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i8: i32, out_$i20: i32)
{

  entry:
    out_$i9, out_$i10, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i8, out_$i20 := in_$i9, in_$i10, in_$i12, in_$p13, in_$i14, in_$i15, in_$i16, in_$p17, in_$i18, in_$i19, in_$i8, in_$i20;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_8314;

  $bb14:
    assume out_$i19 == 1;
    assume {:verifier.code 0} true;
    out_$i8 := out_$i18;
    goto $bb14_dummy;

  corral_source_split_8333:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i18;
    assume true;
    goto $bb14;

  corral_source_split_8332:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(out_$i18, in_$i3);
    goto corral_source_split_8333;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    out_$i18 := $add.i32(out_$i8, 1);
    call {:si_unique_call 1246} {:cexpr "i"} boogie_si_record_i32(out_$i18);
    goto corral_source_split_8332;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $M.27 := $store.i8($M.27, out_$p17, out_$i15);
    goto corral_source_split_8331;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref(in_$p0, $mul.ref(out_$i16, 1));
    goto corral_source_split_8330;

  corral_source_split_8328:
    assume {:verifier.code 0} true;
    out_$i16 := $sext.i32.i64(out_$i8);
    goto corral_source_split_8329;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    out_$i15 := $trunc.i16.i8(out_$i14);
    goto corral_source_split_8328;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$i14 := $load.i16($M.0, out_$p13);
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(in_$p2, $mul.ref(out_$i12, 2));
    goto corral_source_split_8326;

  $bb13:
    assume {:verifier.code 0} true;
    out_$i12 := $sext.i32.i64(out_$i8);
    goto corral_source_split_8325;

  $bb11:
    assume !(out_$i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_8316:
    assume {:verifier.code 0} true;
    out_$i10 := out_$i8;
    assume true;
    goto $bb11;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i9 := $sge.i32(out_$i8, in_$i5);
    goto corral_source_split_8316;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb14_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i8, out_$i20 := unicode_to_ascii_loop_$bb8(in_$p0, in_$p2, in_$i3, in_$i5, out_$i9, out_$i10, out_$i12, out_$p13, out_$i14, out_$i15, out_$i16, out_$p17, out_$i18, out_$i19, out_$i8, out_$i20);
    return;

  exit:
    return;
}



procedure unicode_to_ascii_loop_$bb8(in_$p0: ref, in_$p2: ref, in_$i3: i32, in_$i5: i32, in_$i9: i1, in_$i10: i32, in_$i12: i64, in_$p13: ref, in_$i14: i16, in_$i15: i8, in_$i16: i64, in_$p17: ref, in_$i18: i32, in_$i19: i1, in_$i8: i32, in_$i20: i32) returns (out_$i9: i1, out_$i10: i32, out_$i12: i64, out_$p13: ref, out_$i14: i16, out_$i15: i8, out_$i16: i64, out_$p17: ref, out_$i18: i32, out_$i19: i1, out_$i8: i32, out_$i20: i32);
  modifies $M.27;



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$i104: i32, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i192: i32, in_$i193: i1, in_$p194: ref, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i201: i32, in_$i202: i1, in_$p203: ref, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$i213: i32, in_$i214: i1, in_$p215: ref, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i64, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i250: i32, in_$i251: i64, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i64, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i64, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i32, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$i274: i32, in_$i275: i32, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i280: i32, in_$i281: i32, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i286: i32, in_$i287: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$p292: ref, in_$i293: i32, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$p298: ref, in_$i299: i32, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$i305: i32, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$p310: ref, in_$i311: i32, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i316: i64, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i64, in_$i323: i32, in_$i324: i1, in_$p325: ref, in_$i326: i64, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i64, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i364: i32, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i368: i32, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i372: i32, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i376: i32, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i380: i32, in_$i381: i1, in_$p382: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$i387: i32, in_$i388: i1, in_$p389: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$i399: i32, in_$i400: i1, in_$p401: ref, in_$i403: i32, in_$i404: i1, in_$p405: ref, in_$i407: i32, in_$i408: i1, in_$p409: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i415: i32, in_$i416: i1, in_$p417: ref, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$i421: i32, in_$i422: i1, in_$p423: ref, in_$i424: i32, in_$i425: i1, in_$p426: ref, in_$i427: i32, in_$i428: i1, in_$i430: i32, in_$i431: i32, in_$i432: i32, in_$i433: i1, in_$i434: i32, in_$i435: i1, in_$i436: i1, in_$i437: i1, in_$i438: i1, in_$i439: i1, in_$i440: i1, in_$i441: i1, in_$i442: i1, in_$i443: i1, in_$i444: i1, in_$i445: i1, in_$i446: i1, in_$i447: i1, in_$i448: i1, in_$i449: i1, in_$i450: i1, in_$i451: i1, in_$i452: i1, in_$i453: i1, in_$i454: i1, in_$i455: i1, in_$i456: i1, in_$i457: i1, in_$i458: i1, in_$i459: i32, in_$i460: i1, in_$p461: ref, in_$i462: i32, in_$i463: i1, in_$p464: ref, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i471: i32, in_$i472: i1, in_$p473: ref, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i479: i32, in_$i480: i1, in_$p481: ref, in_$i483: i32, in_$i484: i1, in_$p485: ref, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$i495: i32, in_$i496: i1, in_$p497: ref, in_$i499: i32, in_$i500: i1, in_$p501: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$p506: ref, in_$i507: i32, in_$i508: i32, in_$i509: i1, in_$i510: i32, in_$i511: i1, in_$p512: ref, in_$i513: i32, in_$i514: i1, in_$p515: ref, in_$i516: i32, in_$i517: i1, in_$p518: ref, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$p525: ref, in_$i526: i32, in_$i527: i1, in_$p528: ref, in_$p529: ref, in_$i530: i32, in_$i531: i1, in_$p532: ref, in_$p533: ref, in_$i534: i32, in_$i535: i1, in_$p536: ref, in_$p537: ref, in_$i538: i32, in_$i539: i1, in_$p540: ref, in_$i541: i32, in_$i542: i1, in_$p543: ref, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i553: i32, in_$i554: i1, in_$p555: ref, in_$i557: i32, in_$i558: i1, in_$p559: ref, in_$i560: i32, in_$i561: i32, in_$i562: i32, in_$i563: i1, in_$p564: ref, in_$i565: i32, in_$i566: i64, in_$i568: i32, in_$i569: i1, in_$p570: ref, in_$i571: i32, in_$i572: i64, in_$i574: i32, in_$i575: i1, in_$p576: ref, in_$i577: i32, in_$i578: i64, in_$i580: i32, in_$i581: i1, in_$p582: ref, in_$i583: i32, in_$i584: i64, in_$i586: i32, in_$i587: i1, in_$p588: ref, in_$i589: i32, in_$i590: i32, in_$i592: i32, in_$i593: i1, in_$p594: ref, in_$i595: i32, in_$i596: i32, in_$i598: i32, in_$i599: i1, in_$p600: ref, in_$i601: i32, in_$i602: i32, in_$i604: i32, in_$i605: i1, in_$p606: ref, in_$i607: i32, in_$i608: i32, in_$i610: i32, in_$i611: i1, in_$p612: ref, in_$p613: ref, in_$i614: i32, in_$i616: i32, in_$i617: i1, in_$p618: ref, in_$p619: ref, in_$i620: i32, in_$i622: i32, in_$i623: i1, in_$p624: ref, in_$p625: ref, in_$i626: i32, in_$i628: i32, in_$i629: i1, in_$p630: ref, in_$p631: ref, in_$i632: i32, in_$i634: i32, in_$i635: i1, in_$p636: ref, in_$i637: i64, in_$i639: i32, in_$i640: i1, in_$p641: ref, in_$i642: i64, in_$i644: i32, in_$i645: i1, in_$p646: ref, in_$i647: i64, in_$i649: i32, in_$i650: i1, in_$p651: ref, in_$i652: i64, in_$i654: i32, in_$i655: i1, in_$p656: ref, in_$i657: i32, in_$i658: i32, in_$i659: i1, in_$i660: i32, in_$i661: i1, in_$p662: ref, in_$i663: i32, in_$i664: i1, in_$p665: ref, in_$i666: i32, in_$i667: i1, in_$p668: ref, in_$i670: i32, in_$i671: i1, in_$p672: ref, in_$i674: i32, in_$i675: i1, in_$p676: ref, in_$i678: i32, in_$i679: i1, in_$p680: ref, in_$i682: i32, in_$i683: i1, in_$p684: ref, in_$i685: i32, in_$i686: i32, in_$i687: i1, in_$p688: ref, in_$i689: i32, in_$i690: i32, in_$i691: i1, in_$p692: ref, in_$i693: i32, in_$i694: i32, in_$i695: i1, in_$p696: ref, in_$i697: i32, in_$i698: i32, in_$i699: i1, in_$p700: ref, in_$i701: i32, in_$i702: i1, in_$p703: ref, in_$i704: i32, in_$i705: i1, in_$p706: ref, in_$i708: i32, in_$i709: i1, in_$p710: ref, in_$i712: i32, in_$i713: i1, in_$p714: ref, in_$i716: i32, in_$i717: i1, in_$p718: ref, in_$i720: i32, in_$i721: i1, in_$p722: ref, in_$i724: i32, in_$i725: i1, in_$p726: ref, in_$i728: i32, in_$i729: i1, in_$p730: ref, in_$i732: i32, in_$i733: i1, in_$p734: ref, in_$i736: i32, in_$i737: i1, in_$p738: ref, in_$i739: i32, in_$i740: i1, in_$p741: ref, in_$i742: i32, in_$i743: i1, in_$p744: ref, in_$i745: i32, in_$i746: i1, in_$p747: ref, in_$i748: i32, in_$i749: i1, in_$i751: i32, in_$i752: i32, in_$i753: i32, in_$i754: i1, in_$i755: i32, in_$i756: i1, in_$i757: i1, in_$i758: i1, in_$i759: i32, in_$i760: i1, in_$i761: i32, in_$i762: i1, in_$i763: i32, in_$i764: i1, in_$i765: i32, in_$i766: i32, in_$i767: i1, in_$i768: i32, in_$i769: i1, in_$i770: i32, in_$i771: i1, in_$i772: i32, in_$i773: i1, in_$i774: i1, in_$i775: i1, in_$i776: i1, in_$i777: i1, in_$i778: i1, in_$i779: i1, in_$i780: i1, in_$i781: i1, in_$i782: i1, in_$i783: i1, in_$i784: i1, in_$i785: i1, in_$i786: i1, in_$i787: i1, in_$i788: i1, in_$i789: i1, in_$i790: i1, in_$i791: i1, in_$i792: i1, in_$i793: i1, in_$i794: i1, in_$i795: i1, in_$i796: i1, in_$i797: i32, in_$i798: i1, in_$p799: ref, in_$i800: i32, in_$i801: i1, in_$p802: ref, in_$i803: i32, in_$i804: i1, in_$p805: ref, in_$i806: i32, in_$i807: i1, in_$p808: ref, in_$i809: i32, in_$i810: i1, in_$p811: ref, in_$i813: i32, in_$i814: i1, in_$p815: ref, in_$i817: i32, in_$i818: i1, in_$p819: ref, in_$i821: i32, in_$i822: i1, in_$p823: ref, in_$i825: i32, in_$i826: i1, in_$p827: ref, in_$i829: i32, in_$i830: i1, in_$p831: ref, in_$i833: i32, in_$i834: i1, in_$p835: ref, in_$i837: i32, in_$i838: i1, in_$p839: ref, in_$i841: i32, in_$i842: i1, in_$p843: ref, in_$p844: ref, in_$i845: i32, in_$i846: i32, in_$i847: i1, in_$i848: i32, in_$i849: i1, in_$p850: ref, in_$i851: i32, in_$i852: i1, in_$p853: ref, in_$i854: i32, in_$i855: i1, in_$p856: ref, in_$i857: i32, in_$i858: i1, in_$p859: ref, in_$i860: i32, in_$i861: i1, in_$p862: ref, in_$p863: ref, in_$i864: i32, in_$i865: i1, in_$p866: ref, in_$p867: ref, in_$i868: i32, in_$i869: i1, in_$p870: ref, in_$p871: ref, in_$i872: i32, in_$i873: i1, in_$p874: ref, in_$p875: ref, in_$i876: i32, in_$i877: i1, in_$p878: ref, in_$i879: i32, in_$i880: i1, in_$p881: ref, in_$i883: i32, in_$i884: i1, in_$p885: ref, in_$i887: i32, in_$i888: i1, in_$p889: ref, in_$i891: i32, in_$i892: i1, in_$p893: ref, in_$i895: i32, in_$i896: i1, in_$p897: ref, in_$i898: i32, in_$i899: i32, in_$i900: i32, in_$i901: i1, in_$p902: ref, in_$i903: i32, in_$i904: i64, in_$i906: i32, in_$i907: i1, in_$p908: ref, in_$i909: i32, in_$i910: i64, in_$i912: i32, in_$i913: i1, in_$p914: ref, in_$i915: i32, in_$i916: i64, in_$i918: i32, in_$i919: i1, in_$p920: ref, in_$i921: i32, in_$i922: i64, in_$i924: i32, in_$i925: i1, in_$p926: ref, in_$i927: i32, in_$i928: i32, in_$i930: i32, in_$i931: i1, in_$p932: ref, in_$i933: i32, in_$i934: i32, in_$i936: i32, in_$i937: i1, in_$p938: ref, in_$i939: i32, in_$i940: i32, in_$i942: i32, in_$i943: i1, in_$p944: ref, in_$i945: i32, in_$i946: i32, in_$i948: i32, in_$i949: i1, in_$p950: ref, in_$p951: ref, in_$i952: i32, in_$i954: i32, in_$i955: i1, in_$p956: ref, in_$p957: ref, in_$i958: i32, in_$i960: i32, in_$i961: i1, in_$p962: ref, in_$p963: ref, in_$i964: i32, in_$i966: i32, in_$i967: i1, in_$p968: ref, in_$p969: ref, in_$i970: i32, in_$i972: i32, in_$i973: i1, in_$p974: ref, in_$i975: i64, in_$i977: i32, in_$i978: i1, in_$p979: ref, in_$i980: i64, in_$i982: i32, in_$i983: i1, in_$p984: ref, in_$i985: i64, in_$i987: i32, in_$i988: i1, in_$p989: ref, in_$i990: i64, in_$i992: i32, in_$i993: i1, in_$p994: ref, in_$i995: i32, in_$i996: i32, in_$i997: i1, in_$i998: i32, in_$i999: i1, in_$p1000: ref, in_$i1001: i32, in_$i1002: i1, in_$p1003: ref, in_$i1004: i32, in_$i1005: i1, in_$p1006: ref, in_$i1008: i32, in_$i1009: i1, in_$p1010: ref, in_$i1012: i32, in_$i1013: i1, in_$p1014: ref, in_$i1016: i32, in_$i1017: i1, in_$p1018: ref, in_$i1020: i32, in_$i1021: i1, in_$p1022: ref, in_$i1023: i32, in_$i1024: i32, in_$i1025: i1, in_$p1026: ref, in_$i1027: i32, in_$i1028: i32, in_$i1029: i1, in_$p1030: ref, in_$i1031: i32, in_$i1032: i32, in_$i1033: i1, in_$p1034: ref, in_$i1035: i32, in_$i1036: i32, in_$i1037: i1, in_$p1038: ref, in_$i1039: i32, in_$i1040: i1, in_$p1041: ref, in_$i1042: i32, in_$i1043: i1, in_$p1044: ref, in_$i1046: i32, in_$i1047: i1, in_$p1048: ref, in_$i1050: i32, in_$i1051: i1, in_$p1052: ref, in_$i1054: i32, in_$i1055: i1, in_$p1056: ref, in_$i1058: i32, in_$i1059: i1, in_$p1060: ref, in_$i1062: i32, in_$i1063: i1, in_$p1064: ref, in_$i1066: i32, in_$i1067: i1, in_$p1068: ref, in_$i1070: i32, in_$i1071: i1, in_$p1072: ref, in_$i1074: i32, in_$i1075: i1, in_$p1076: ref, in_$i1077: i32, in_$i1078: i1, in_$p1079: ref, in_$i1080: i32, in_$i1081: i1, in_$p1082: ref, in_$i1083: i32, in_$i1084: i1, in_$p1085: ref, in_$i1086: i32, in_$i1087: i1, in_$i1089: i32, in_$i1090: i32, in_$i1091: i32, in_$i1092: i1, in_$i1093: i32, in_$i1094: i1, in_$i1095: i1, in_$i1096: i1, in_$i1097: i1, in_$i1098: i1, in_$i1099: i1, in_$i1100: i1, in_$i1101: i1, in_$i1102: i1, in_$i1103: i1, in_$i1104: i1, in_$i1105: i1, in_$i1106: i1, in_$i1107: i1, in_$i1108: i1, in_$i1109: i1, in_$i1110: i1, in_$i1111: i1, in_$i1112: i1, in_$i1113: i1, in_$i1114: i1, in_$i1115: i1, in_$i1116: i1, in_$i1117: i1, in_$i1118: i32, in_$i1119: i1, in_$p1120: ref, in_$i1121: i32, in_$i1122: i1, in_$p1123: ref, in_$i1124: i32, in_$i1125: i1, in_$p1126: ref, in_$i1127: i32, in_$i1128: i1, in_$p1129: ref, in_$i1130: i32, in_$i1131: i1, in_$p1132: ref, in_$i1134: i32, in_$i1135: i1, in_$p1136: ref, in_$i1138: i32, in_$i1139: i1, in_$p1140: ref, in_$i1142: i32, in_$i1143: i1, in_$p1144: ref, in_$i1146: i32, in_$i1147: i1, in_$p1148: ref, in_$i1150: i32, in_$i1151: i1, in_$p1152: ref, in_$i1154: i32, in_$i1155: i1, in_$p1156: ref, in_$i1158: i32, in_$i1159: i1, in_$p1160: ref, in_$i1162: i32, in_$i1163: i1, in_$p1164: ref, in_$p1165: ref, in_$i1166: i32, in_$i1167: i32, in_$i1168: i1, in_$i1169: i32, in_$i1170: i1, in_$p1171: ref, in_$i1172: i32, in_$i1173: i1, in_$p1174: ref, in_$i1175: i32, in_$i1176: i1, in_$p1177: ref, in_$i1178: i32, in_$i1179: i1, in_$p1180: ref, in_$i1181: i32, in_$i1182: i1, in_$p1183: ref, in_$p1184: ref, in_$i1185: i32, in_$i1186: i1, in_$p1187: ref, in_$p1188: ref, in_$i1189: i32, in_$i1190: i1, in_$p1191: ref, in_$p1192: ref, in_$i1193: i32, in_$i1194: i1, in_$p1195: ref, in_$p1196: ref, in_$i1197: i32, in_$i1198: i1, in_$p1199: ref, in_$i1200: i32, in_$i1201: i1, in_$p1202: ref, in_$i1204: i32, in_$i1205: i1, in_$p1206: ref, in_$i1208: i32, in_$i1209: i1, in_$p1210: ref, in_$i1212: i32, in_$i1213: i1, in_$p1214: ref, in_$i1216: i32, in_$i1217: i1, in_$p1218: ref, in_$i1219: i32, in_$i1220: i32, in_$i1221: i32, in_$i1222: i1, in_$p1223: ref, in_$i1224: i32, in_$i1225: i64, in_$i1227: i32, in_$i1228: i1, in_$p1229: ref, in_$i1230: i32, in_$i1231: i64, in_$i1233: i32, in_$i1234: i1, in_$p1235: ref, in_$i1236: i32, in_$i1237: i64, in_$i1239: i32, in_$i1240: i1, in_$p1241: ref, in_$i1242: i32, in_$i1243: i64, in_$i1245: i32, in_$i1246: i1, in_$p1247: ref, in_$i1248: i32, in_$i1249: i32, in_$i1251: i32, in_$i1252: i1, in_$p1253: ref, in_$i1254: i32, in_$i1255: i32, in_$i1257: i32, in_$i1258: i1, in_$p1259: ref, in_$i1260: i32, in_$i1261: i32, in_$i1263: i32, in_$i1264: i1, in_$p1265: ref, in_$i1266: i32, in_$i1267: i32, in_$i1269: i32, in_$i1270: i1, in_$p1271: ref, in_$p1272: ref, in_$i1273: i32, in_$i1275: i32, in_$i1276: i1, in_$p1277: ref, in_$p1278: ref, in_$i1279: i32, in_$i1281: i32, in_$i1282: i1, in_$p1283: ref, in_$p1284: ref, in_$i1285: i32, in_$i1287: i32, in_$i1288: i1, in_$p1289: ref, in_$p1290: ref, in_$i1291: i32, in_$i1293: i32, in_$i1294: i1, in_$p1295: ref, in_$i1296: i64, in_$i1298: i32, in_$i1299: i1, in_$p1300: ref, in_$i1301: i64, in_$i1303: i32, in_$i1304: i1, in_$p1305: ref, in_$i1306: i64, in_$i1308: i32, in_$i1309: i1, in_$p1310: ref, in_$i1311: i64, in_$i1313: i32, in_$i1314: i1, in_$p1315: ref, in_$i1316: i32, in_$i1317: i32, in_$i1318: i1, in_$i1319: i32, in_$i1320: i1, in_$p1321: ref, in_$i1322: i32, in_$i1323: i1, in_$p1324: ref, in_$i1325: i32, in_$i1326: i1, in_$p1327: ref, in_$i1329: i32, in_$i1330: i1, in_$p1331: ref, in_$i1333: i32, in_$i1334: i1, in_$p1335: ref, in_$i1337: i32, in_$i1338: i1, in_$p1339: ref, in_$i1341: i32, in_$i1342: i1, in_$p1343: ref, in_$i1344: i32, in_$i1345: i32, in_$i1346: i1, in_$p1347: ref, in_$i1348: i32, in_$i1349: i32, in_$i1350: i1, in_$p1351: ref, in_$i1352: i32, in_$i1353: i32, in_$i1354: i1, in_$p1355: ref, in_$i1356: i32, in_$i1357: i32, in_$i1358: i1, in_$p1359: ref, in_$i1360: i32, in_$i1361: i1, in_$p1362: ref, in_$i1363: i32, in_$i1364: i1, in_$p1365: ref, in_$i1367: i32, in_$i1368: i1, in_$p1369: ref, in_$i1371: i32, in_$i1372: i1, in_$p1373: ref, in_$i1375: i32, in_$i1376: i1, in_$p1377: ref, in_$i1379: i32, in_$i1380: i1, in_$p1381: ref, in_$i1383: i32, in_$i1384: i1, in_$p1385: ref, in_$i1387: i32, in_$i1388: i1, in_$p1389: ref, in_$i1391: i32, in_$i1392: i1, in_$p1393: ref, in_$i1395: i32, in_$i1396: i1, in_$p1397: ref, in_$i1398: i32, in_$i1399: i1, in_$p1400: ref, in_$i1401: i32, in_$i1402: i1, in_$p1403: ref, in_$i1404: i32, in_$i1405: i1, in_$p1406: ref, in_$i1407: i32, in_$i1408: i1, in_$i1410: i32, in_$i1411: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i32, in_vslice_dummy_var_178: i32, in_vslice_dummy_var_179: i32, in_vslice_dummy_var_180: i32, in_vslice_dummy_var_181: i32, in_vslice_dummy_var_182: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32, in_vslice_dummy_var_185: i32, in_vslice_dummy_var_186: i32, in_vslice_dummy_var_187: i32, in_vslice_dummy_var_188: i32, in_vslice_dummy_var_189: i32, in_vslice_dummy_var_190: i32, in_vslice_dummy_var_191: i32, in_vslice_dummy_var_192: i32, in_vslice_dummy_var_193: i32, in_vslice_dummy_var_194: i32, in_vslice_dummy_var_195: i32, in_vslice_dummy_var_196: i32, in_vslice_dummy_var_197: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i32, in_vslice_dummy_var_200: i32, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i32, in_vslice_dummy_var_212: i32, in_vslice_dummy_var_213: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: i32, in_vslice_dummy_var_216: i32, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_237: i32, in_vslice_dummy_var_238: i32, in_vslice_dummy_var_239: i32, in_vslice_dummy_var_240: i32, in_vslice_dummy_var_241: i32, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32) returns (out_$i104: i32, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i192: i32, out_$i193: i1, out_$p194: ref, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i201: i32, out_$i202: i1, out_$p203: ref, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$i213: i32, out_$i214: i1, out_$p215: ref, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i64, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i250: i32, out_$i251: i64, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i64, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i64, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i32, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$i274: i32, out_$i275: i32, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i280: i32, out_$i281: i32, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i286: i32, out_$i287: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$p292: ref, out_$i293: i32, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$p298: ref, out_$i299: i32, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$i305: i32, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$p310: ref, out_$i311: i32, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i316: i64, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i64, out_$i323: i32, out_$i324: i1, out_$p325: ref, out_$i326: i64, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i64, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i364: i32, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i368: i32, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i372: i32, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i376: i32, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i380: i32, out_$i381: i1, out_$p382: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$i387: i32, out_$i388: i1, out_$p389: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$i399: i32, out_$i400: i1, out_$p401: ref, out_$i403: i32, out_$i404: i1, out_$p405: ref, out_$i407: i32, out_$i408: i1, out_$p409: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i415: i32, out_$i416: i1, out_$p417: ref, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$i421: i32, out_$i422: i1, out_$p423: ref, out_$i424: i32, out_$i425: i1, out_$p426: ref, out_$i427: i32, out_$i428: i1, out_$i430: i32, out_$i431: i32, out_$i432: i32, out_$i433: i1, out_$i434: i32, out_$i435: i1, out_$i436: i1, out_$i437: i1, out_$i438: i1, out_$i439: i1, out_$i440: i1, out_$i441: i1, out_$i442: i1, out_$i443: i1, out_$i444: i1, out_$i445: i1, out_$i446: i1, out_$i447: i1, out_$i448: i1, out_$i449: i1, out_$i450: i1, out_$i451: i1, out_$i452: i1, out_$i453: i1, out_$i454: i1, out_$i455: i1, out_$i456: i1, out_$i457: i1, out_$i458: i1, out_$i459: i32, out_$i460: i1, out_$p461: ref, out_$i462: i32, out_$i463: i1, out_$p464: ref, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i471: i32, out_$i472: i1, out_$p473: ref, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i479: i32, out_$i480: i1, out_$p481: ref, out_$i483: i32, out_$i484: i1, out_$p485: ref, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$i495: i32, out_$i496: i1, out_$p497: ref, out_$i499: i32, out_$i500: i1, out_$p501: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$p506: ref, out_$i507: i32, out_$i508: i32, out_$i509: i1, out_$i510: i32, out_$i511: i1, out_$p512: ref, out_$i513: i32, out_$i514: i1, out_$p515: ref, out_$i516: i32, out_$i517: i1, out_$p518: ref, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$p525: ref, out_$i526: i32, out_$i527: i1, out_$p528: ref, out_$p529: ref, out_$i530: i32, out_$i531: i1, out_$p532: ref, out_$p533: ref, out_$i534: i32, out_$i535: i1, out_$p536: ref, out_$p537: ref, out_$i538: i32, out_$i539: i1, out_$p540: ref, out_$i541: i32, out_$i542: i1, out_$p543: ref, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i553: i32, out_$i554: i1, out_$p555: ref, out_$i557: i32, out_$i558: i1, out_$p559: ref, out_$i560: i32, out_$i561: i32, out_$i562: i32, out_$i563: i1, out_$p564: ref, out_$i565: i32, out_$i566: i64, out_$i568: i32, out_$i569: i1, out_$p570: ref, out_$i571: i32, out_$i572: i64, out_$i574: i32, out_$i575: i1, out_$p576: ref, out_$i577: i32, out_$i578: i64, out_$i580: i32, out_$i581: i1, out_$p582: ref, out_$i583: i32, out_$i584: i64, out_$i586: i32, out_$i587: i1, out_$p588: ref, out_$i589: i32, out_$i590: i32, out_$i592: i32, out_$i593: i1, out_$p594: ref, out_$i595: i32, out_$i596: i32, out_$i598: i32, out_$i599: i1, out_$p600: ref, out_$i601: i32, out_$i602: i32, out_$i604: i32, out_$i605: i1, out_$p606: ref, out_$i607: i32, out_$i608: i32, out_$i610: i32, out_$i611: i1, out_$p612: ref, out_$p613: ref, out_$i614: i32, out_$i616: i32, out_$i617: i1, out_$p618: ref, out_$p619: ref, out_$i620: i32, out_$i622: i32, out_$i623: i1, out_$p624: ref, out_$p625: ref, out_$i626: i32, out_$i628: i32, out_$i629: i1, out_$p630: ref, out_$p631: ref, out_$i632: i32, out_$i634: i32, out_$i635: i1, out_$p636: ref, out_$i637: i64, out_$i639: i32, out_$i640: i1, out_$p641: ref, out_$i642: i64, out_$i644: i32, out_$i645: i1, out_$p646: ref, out_$i647: i64, out_$i649: i32, out_$i650: i1, out_$p651: ref, out_$i652: i64, out_$i654: i32, out_$i655: i1, out_$p656: ref, out_$i657: i32, out_$i658: i32, out_$i659: i1, out_$i660: i32, out_$i661: i1, out_$p662: ref, out_$i663: i32, out_$i664: i1, out_$p665: ref, out_$i666: i32, out_$i667: i1, out_$p668: ref, out_$i670: i32, out_$i671: i1, out_$p672: ref, out_$i674: i32, out_$i675: i1, out_$p676: ref, out_$i678: i32, out_$i679: i1, out_$p680: ref, out_$i682: i32, out_$i683: i1, out_$p684: ref, out_$i685: i32, out_$i686: i32, out_$i687: i1, out_$p688: ref, out_$i689: i32, out_$i690: i32, out_$i691: i1, out_$p692: ref, out_$i693: i32, out_$i694: i32, out_$i695: i1, out_$p696: ref, out_$i697: i32, out_$i698: i32, out_$i699: i1, out_$p700: ref, out_$i701: i32, out_$i702: i1, out_$p703: ref, out_$i704: i32, out_$i705: i1, out_$p706: ref, out_$i708: i32, out_$i709: i1, out_$p710: ref, out_$i712: i32, out_$i713: i1, out_$p714: ref, out_$i716: i32, out_$i717: i1, out_$p718: ref, out_$i720: i32, out_$i721: i1, out_$p722: ref, out_$i724: i32, out_$i725: i1, out_$p726: ref, out_$i728: i32, out_$i729: i1, out_$p730: ref, out_$i732: i32, out_$i733: i1, out_$p734: ref, out_$i736: i32, out_$i737: i1, out_$p738: ref, out_$i739: i32, out_$i740: i1, out_$p741: ref, out_$i742: i32, out_$i743: i1, out_$p744: ref, out_$i745: i32, out_$i746: i1, out_$p747: ref, out_$i748: i32, out_$i749: i1, out_$i751: i32, out_$i752: i32, out_$i753: i32, out_$i754: i1, out_$i755: i32, out_$i756: i1, out_$i757: i1, out_$i758: i1, out_$i759: i32, out_$i760: i1, out_$i761: i32, out_$i762: i1, out_$i763: i32, out_$i764: i1, out_$i765: i32, out_$i766: i32, out_$i767: i1, out_$i768: i32, out_$i769: i1, out_$i770: i32, out_$i771: i1, out_$i772: i32, out_$i773: i1, out_$i774: i1, out_$i775: i1, out_$i776: i1, out_$i777: i1, out_$i778: i1, out_$i779: i1, out_$i780: i1, out_$i781: i1, out_$i782: i1, out_$i783: i1, out_$i784: i1, out_$i785: i1, out_$i786: i1, out_$i787: i1, out_$i788: i1, out_$i789: i1, out_$i790: i1, out_$i791: i1, out_$i792: i1, out_$i793: i1, out_$i794: i1, out_$i795: i1, out_$i796: i1, out_$i797: i32, out_$i798: i1, out_$p799: ref, out_$i800: i32, out_$i801: i1, out_$p802: ref, out_$i803: i32, out_$i804: i1, out_$p805: ref, out_$i806: i32, out_$i807: i1, out_$p808: ref, out_$i809: i32, out_$i810: i1, out_$p811: ref, out_$i813: i32, out_$i814: i1, out_$p815: ref, out_$i817: i32, out_$i818: i1, out_$p819: ref, out_$i821: i32, out_$i822: i1, out_$p823: ref, out_$i825: i32, out_$i826: i1, out_$p827: ref, out_$i829: i32, out_$i830: i1, out_$p831: ref, out_$i833: i32, out_$i834: i1, out_$p835: ref, out_$i837: i32, out_$i838: i1, out_$p839: ref, out_$i841: i32, out_$i842: i1, out_$p843: ref, out_$p844: ref, out_$i845: i32, out_$i846: i32, out_$i847: i1, out_$i848: i32, out_$i849: i1, out_$p850: ref, out_$i851: i32, out_$i852: i1, out_$p853: ref, out_$i854: i32, out_$i855: i1, out_$p856: ref, out_$i857: i32, out_$i858: i1, out_$p859: ref, out_$i860: i32, out_$i861: i1, out_$p862: ref, out_$p863: ref, out_$i864: i32, out_$i865: i1, out_$p866: ref, out_$p867: ref, out_$i868: i32, out_$i869: i1, out_$p870: ref, out_$p871: ref, out_$i872: i32, out_$i873: i1, out_$p874: ref, out_$p875: ref, out_$i876: i32, out_$i877: i1, out_$p878: ref, out_$i879: i32, out_$i880: i1, out_$p881: ref, out_$i883: i32, out_$i884: i1, out_$p885: ref, out_$i887: i32, out_$i888: i1, out_$p889: ref, out_$i891: i32, out_$i892: i1, out_$p893: ref, out_$i895: i32, out_$i896: i1, out_$p897: ref, out_$i898: i32, out_$i899: i32, out_$i900: i32, out_$i901: i1, out_$p902: ref, out_$i903: i32, out_$i904: i64, out_$i906: i32, out_$i907: i1, out_$p908: ref, out_$i909: i32, out_$i910: i64, out_$i912: i32, out_$i913: i1, out_$p914: ref, out_$i915: i32, out_$i916: i64, out_$i918: i32, out_$i919: i1, out_$p920: ref, out_$i921: i32, out_$i922: i64, out_$i924: i32, out_$i925: i1, out_$p926: ref, out_$i927: i32, out_$i928: i32, out_$i930: i32, out_$i931: i1, out_$p932: ref, out_$i933: i32, out_$i934: i32, out_$i936: i32, out_$i937: i1, out_$p938: ref, out_$i939: i32, out_$i940: i32, out_$i942: i32, out_$i943: i1, out_$p944: ref, out_$i945: i32, out_$i946: i32, out_$i948: i32, out_$i949: i1, out_$p950: ref, out_$p951: ref, out_$i952: i32, out_$i954: i32, out_$i955: i1, out_$p956: ref, out_$p957: ref, out_$i958: i32, out_$i960: i32, out_$i961: i1, out_$p962: ref, out_$p963: ref, out_$i964: i32, out_$i966: i32, out_$i967: i1, out_$p968: ref, out_$p969: ref, out_$i970: i32, out_$i972: i32, out_$i973: i1, out_$p974: ref, out_$i975: i64, out_$i977: i32, out_$i978: i1, out_$p979: ref, out_$i980: i64, out_$i982: i32, out_$i983: i1, out_$p984: ref, out_$i985: i64, out_$i987: i32, out_$i988: i1, out_$p989: ref, out_$i990: i64, out_$i992: i32, out_$i993: i1, out_$p994: ref, out_$i995: i32, out_$i996: i32, out_$i997: i1, out_$i998: i32, out_$i999: i1, out_$p1000: ref, out_$i1001: i32, out_$i1002: i1, out_$p1003: ref, out_$i1004: i32, out_$i1005: i1, out_$p1006: ref, out_$i1008: i32, out_$i1009: i1, out_$p1010: ref, out_$i1012: i32, out_$i1013: i1, out_$p1014: ref, out_$i1016: i32, out_$i1017: i1, out_$p1018: ref, out_$i1020: i32, out_$i1021: i1, out_$p1022: ref, out_$i1023: i32, out_$i1024: i32, out_$i1025: i1, out_$p1026: ref, out_$i1027: i32, out_$i1028: i32, out_$i1029: i1, out_$p1030: ref, out_$i1031: i32, out_$i1032: i32, out_$i1033: i1, out_$p1034: ref, out_$i1035: i32, out_$i1036: i32, out_$i1037: i1, out_$p1038: ref, out_$i1039: i32, out_$i1040: i1, out_$p1041: ref, out_$i1042: i32, out_$i1043: i1, out_$p1044: ref, out_$i1046: i32, out_$i1047: i1, out_$p1048: ref, out_$i1050: i32, out_$i1051: i1, out_$p1052: ref, out_$i1054: i32, out_$i1055: i1, out_$p1056: ref, out_$i1058: i32, out_$i1059: i1, out_$p1060: ref, out_$i1062: i32, out_$i1063: i1, out_$p1064: ref, out_$i1066: i32, out_$i1067: i1, out_$p1068: ref, out_$i1070: i32, out_$i1071: i1, out_$p1072: ref, out_$i1074: i32, out_$i1075: i1, out_$p1076: ref, out_$i1077: i32, out_$i1078: i1, out_$p1079: ref, out_$i1080: i32, out_$i1081: i1, out_$p1082: ref, out_$i1083: i32, out_$i1084: i1, out_$p1085: ref, out_$i1086: i32, out_$i1087: i1, out_$i1089: i32, out_$i1090: i32, out_$i1091: i32, out_$i1092: i1, out_$i1093: i32, out_$i1094: i1, out_$i1095: i1, out_$i1096: i1, out_$i1097: i1, out_$i1098: i1, out_$i1099: i1, out_$i1100: i1, out_$i1101: i1, out_$i1102: i1, out_$i1103: i1, out_$i1104: i1, out_$i1105: i1, out_$i1106: i1, out_$i1107: i1, out_$i1108: i1, out_$i1109: i1, out_$i1110: i1, out_$i1111: i1, out_$i1112: i1, out_$i1113: i1, out_$i1114: i1, out_$i1115: i1, out_$i1116: i1, out_$i1117: i1, out_$i1118: i32, out_$i1119: i1, out_$p1120: ref, out_$i1121: i32, out_$i1122: i1, out_$p1123: ref, out_$i1124: i32, out_$i1125: i1, out_$p1126: ref, out_$i1127: i32, out_$i1128: i1, out_$p1129: ref, out_$i1130: i32, out_$i1131: i1, out_$p1132: ref, out_$i1134: i32, out_$i1135: i1, out_$p1136: ref, out_$i1138: i32, out_$i1139: i1, out_$p1140: ref, out_$i1142: i32, out_$i1143: i1, out_$p1144: ref, out_$i1146: i32, out_$i1147: i1, out_$p1148: ref, out_$i1150: i32, out_$i1151: i1, out_$p1152: ref, out_$i1154: i32, out_$i1155: i1, out_$p1156: ref, out_$i1158: i32, out_$i1159: i1, out_$p1160: ref, out_$i1162: i32, out_$i1163: i1, out_$p1164: ref, out_$p1165: ref, out_$i1166: i32, out_$i1167: i32, out_$i1168: i1, out_$i1169: i32, out_$i1170: i1, out_$p1171: ref, out_$i1172: i32, out_$i1173: i1, out_$p1174: ref, out_$i1175: i32, out_$i1176: i1, out_$p1177: ref, out_$i1178: i32, out_$i1179: i1, out_$p1180: ref, out_$i1181: i32, out_$i1182: i1, out_$p1183: ref, out_$p1184: ref, out_$i1185: i32, out_$i1186: i1, out_$p1187: ref, out_$p1188: ref, out_$i1189: i32, out_$i1190: i1, out_$p1191: ref, out_$p1192: ref, out_$i1193: i32, out_$i1194: i1, out_$p1195: ref, out_$p1196: ref, out_$i1197: i32, out_$i1198: i1, out_$p1199: ref, out_$i1200: i32, out_$i1201: i1, out_$p1202: ref, out_$i1204: i32, out_$i1205: i1, out_$p1206: ref, out_$i1208: i32, out_$i1209: i1, out_$p1210: ref, out_$i1212: i32, out_$i1213: i1, out_$p1214: ref, out_$i1216: i32, out_$i1217: i1, out_$p1218: ref, out_$i1219: i32, out_$i1220: i32, out_$i1221: i32, out_$i1222: i1, out_$p1223: ref, out_$i1224: i32, out_$i1225: i64, out_$i1227: i32, out_$i1228: i1, out_$p1229: ref, out_$i1230: i32, out_$i1231: i64, out_$i1233: i32, out_$i1234: i1, out_$p1235: ref, out_$i1236: i32, out_$i1237: i64, out_$i1239: i32, out_$i1240: i1, out_$p1241: ref, out_$i1242: i32, out_$i1243: i64, out_$i1245: i32, out_$i1246: i1, out_$p1247: ref, out_$i1248: i32, out_$i1249: i32, out_$i1251: i32, out_$i1252: i1, out_$p1253: ref, out_$i1254: i32, out_$i1255: i32, out_$i1257: i32, out_$i1258: i1, out_$p1259: ref, out_$i1260: i32, out_$i1261: i32, out_$i1263: i32, out_$i1264: i1, out_$p1265: ref, out_$i1266: i32, out_$i1267: i32, out_$i1269: i32, out_$i1270: i1, out_$p1271: ref, out_$p1272: ref, out_$i1273: i32, out_$i1275: i32, out_$i1276: i1, out_$p1277: ref, out_$p1278: ref, out_$i1279: i32, out_$i1281: i32, out_$i1282: i1, out_$p1283: ref, out_$p1284: ref, out_$i1285: i32, out_$i1287: i32, out_$i1288: i1, out_$p1289: ref, out_$p1290: ref, out_$i1291: i32, out_$i1293: i32, out_$i1294: i1, out_$p1295: ref, out_$i1296: i64, out_$i1298: i32, out_$i1299: i1, out_$p1300: ref, out_$i1301: i64, out_$i1303: i32, out_$i1304: i1, out_$p1305: ref, out_$i1306: i64, out_$i1308: i32, out_$i1309: i1, out_$p1310: ref, out_$i1311: i64, out_$i1313: i32, out_$i1314: i1, out_$p1315: ref, out_$i1316: i32, out_$i1317: i32, out_$i1318: i1, out_$i1319: i32, out_$i1320: i1, out_$p1321: ref, out_$i1322: i32, out_$i1323: i1, out_$p1324: ref, out_$i1325: i32, out_$i1326: i1, out_$p1327: ref, out_$i1329: i32, out_$i1330: i1, out_$p1331: ref, out_$i1333: i32, out_$i1334: i1, out_$p1335: ref, out_$i1337: i32, out_$i1338: i1, out_$p1339: ref, out_$i1341: i32, out_$i1342: i1, out_$p1343: ref, out_$i1344: i32, out_$i1345: i32, out_$i1346: i1, out_$p1347: ref, out_$i1348: i32, out_$i1349: i32, out_$i1350: i1, out_$p1351: ref, out_$i1352: i32, out_$i1353: i32, out_$i1354: i1, out_$p1355: ref, out_$i1356: i32, out_$i1357: i32, out_$i1358: i1, out_$p1359: ref, out_$i1360: i32, out_$i1361: i1, out_$p1362: ref, out_$i1363: i32, out_$i1364: i1, out_$p1365: ref, out_$i1367: i32, out_$i1368: i1, out_$p1369: ref, out_$i1371: i32, out_$i1372: i1, out_$p1373: ref, out_$i1375: i32, out_$i1376: i1, out_$p1377: ref, out_$i1379: i32, out_$i1380: i1, out_$p1381: ref, out_$i1383: i32, out_$i1384: i1, out_$p1385: ref, out_$i1387: i32, out_$i1388: i1, out_$p1389: ref, out_$i1391: i32, out_$i1392: i1, out_$p1393: ref, out_$i1395: i32, out_$i1396: i1, out_$p1397: ref, out_$i1398: i32, out_$i1399: i1, out_$p1400: ref, out_$i1401: i32, out_$i1402: i1, out_$p1403: ref, out_$i1404: i32, out_$i1405: i1, out_$p1406: ref, out_$i1407: i32, out_$i1408: i1, out_$i1410: i32, out_$i1411: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i32, out_vslice_dummy_var_178: i32, out_vslice_dummy_var_179: i32, out_vslice_dummy_var_180: i32, out_vslice_dummy_var_181: i32, out_vslice_dummy_var_182: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32, out_vslice_dummy_var_185: i32, out_vslice_dummy_var_186: i32, out_vslice_dummy_var_187: i32, out_vslice_dummy_var_188: i32, out_vslice_dummy_var_189: i32, out_vslice_dummy_var_190: i32, out_vslice_dummy_var_191: i32, out_vslice_dummy_var_192: i32, out_vslice_dummy_var_193: i32, out_vslice_dummy_var_194: i32, out_vslice_dummy_var_195: i32, out_vslice_dummy_var_196: i32, out_vslice_dummy_var_197: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i32, out_vslice_dummy_var_200: i32, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i32, out_vslice_dummy_var_212: i32, out_vslice_dummy_var_213: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: i32, out_vslice_dummy_var_216: i32, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_237: i32, out_vslice_dummy_var_238: i32, out_vslice_dummy_var_239: i32, out_vslice_dummy_var_240: i32, out_vslice_dummy_var_241: i32, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32)
{

  entry:
    out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$p180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$p194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$i205, out_$i206, out_$p207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i214, out_$p215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$i271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$i289, out_$i290, out_$p291, out_$p292, out_$i293, out_$i295, out_$i296, out_$p297, out_$p298, out_$i299, out_$i301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i311, out_$i313, out_$i314, out_$p315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i323, out_$i324, out_$p325, out_$i326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$i383, out_$i384, out_$p385, out_$i387, out_$i388, out_$p389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$p397, out_$i399, out_$i400, out_$p401, out_$i403, out_$i404, out_$p405, out_$i407, out_$i408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i415, out_$i416, out_$p417, out_$i418, out_$i419, out_$p420, out_$i421, out_$i422, out_$p423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p461, out_$i462, out_$i463, out_$p464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$p473, out_$i475, out_$i476, out_$p477, out_$i479, out_$i480, out_$p481, out_$i483, out_$i484, out_$p485, out_$i487, out_$i488, out_$p489, out_$i491, out_$i492, out_$p493, out_$i495, out_$i496, out_$p497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$p525, out_$i526, out_$i527, out_$p528, out_$p529, out_$i530, out_$i531, out_$p532, out_$p533, out_$i534, out_$i535, out_$p536, out_$p537, out_$i538, out_$i539, out_$p540, out_$i541, out_$i542, out_$p543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$i560, out_$i561, out_$i562, out_$i563, out_$p564, out_$i565, out_$i566, out_$i568, out_$i569, out_$p570, out_$i571, out_$i572, out_$i574, out_$i575, out_$p576, out_$i577, out_$i578, out_$i580, out_$i581, out_$p582, out_$i583, out_$i584, out_$i586, out_$i587, out_$p588, out_$i589, out_$i590, out_$i592, out_$i593, out_$p594, out_$i595, out_$i596, out_$i598, out_$i599, out_$p600, out_$i601, out_$i602, out_$i604, out_$i605, out_$p606, out_$i607, out_$i608, out_$i610, out_$i611, out_$p612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$p619, out_$i620, out_$i622, out_$i623, out_$p624, out_$p625, out_$i626, out_$i628, out_$i629, out_$p630, out_$p631, out_$i632, out_$i634, out_$i635, out_$p636, out_$i637, out_$i639, out_$i640, out_$p641, out_$i642, out_$i644, out_$i645, out_$p646, out_$i647, out_$i649, out_$i650, out_$p651, out_$i652, out_$i654, out_$i655, out_$p656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$p665, out_$i666, out_$i667, out_$p668, out_$i670, out_$i671, out_$p672, out_$i674, out_$i675, out_$p676, out_$i678, out_$i679, out_$p680, out_$i682, out_$i683, out_$p684, out_$i685, out_$i686, out_$i687, out_$p688, out_$i689, out_$i690, out_$i691, out_$p692, out_$i693, out_$i694, out_$i695, out_$p696, out_$i697, out_$i698, out_$i699, out_$p700, out_$i701, out_$i702, out_$p703, out_$i704, out_$i705, out_$p706, out_$i708, out_$i709, out_$p710, out_$i712, out_$i713, out_$p714, out_$i716, out_$i717, out_$p718, out_$i720, out_$i721, out_$p722, out_$i724, out_$i725, out_$p726, out_$i728, out_$i729, out_$p730, out_$i732, out_$i733, out_$p734, out_$i736, out_$i737, out_$p738, out_$i739, out_$i740, out_$p741, out_$i742, out_$i743, out_$p744, out_$i745, out_$i746, out_$p747, out_$i748, out_$i749, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$i783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$p799, out_$i800, out_$i801, out_$p802, out_$i803, out_$i804, out_$p805, out_$i806, out_$i807, out_$p808, out_$i809, out_$i810, out_$p811, out_$i813, out_$i814, out_$p815, out_$i817, out_$i818, out_$p819, out_$i821, out_$i822, out_$p823, out_$i825, out_$i826, out_$p827, out_$i829, out_$i830, out_$p831, out_$i833, out_$i834, out_$p835, out_$i837, out_$i838, out_$p839, out_$i841, out_$i842, out_$p843, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$p850, out_$i851, out_$i852, out_$p853, out_$i854, out_$i855, out_$p856, out_$i857, out_$i858, out_$p859, out_$i860, out_$i861, out_$p862, out_$p863, out_$i864, out_$i865, out_$p866, out_$p867, out_$i868, out_$i869, out_$p870, out_$p871, out_$i872, out_$i873, out_$p874, out_$p875, out_$i876, out_$i877, out_$p878, out_$i879, out_$i880, out_$p881, out_$i883, out_$i884, out_$p885, out_$i887, out_$i888, out_$p889, out_$i891, out_$i892, out_$p893, out_$i895, out_$i896, out_$p897, out_$i898, out_$i899, out_$i900, out_$i901, out_$p902, out_$i903, out_$i904, out_$i906, out_$i907, out_$p908, out_$i909, out_$i910, out_$i912, out_$i913, out_$p914, out_$i915, out_$i916, out_$i918, out_$i919, out_$p920, out_$i921, out_$i922, out_$i924, out_$i925, out_$p926, out_$i927, out_$i928, out_$i930, out_$i931, out_$p932, out_$i933, out_$i934, out_$i936, out_$i937, out_$p938, out_$i939, out_$i940, out_$i942, out_$i943, out_$p944, out_$i945, out_$i946, out_$i948, out_$i949, out_$p950, out_$p951, out_$i952, out_$i954, out_$i955, out_$p956, out_$p957, out_$i958, out_$i960, out_$i961, out_$p962, out_$p963, out_$i964, out_$i966, out_$i967, out_$p968, out_$p969, out_$i970, out_$i972, out_$i973, out_$p974, out_$i975, out_$i977, out_$i978, out_$p979, out_$i980, out_$i982, out_$i983, out_$p984, out_$i985, out_$i987, out_$i988, out_$p989, out_$i990, out_$i992, out_$i993, out_$p994, out_$i995, out_$i996, out_$i997, out_$i998, out_$i999, out_$p1000, out_$i1001, out_$i1002, out_$p1003, out_$i1004, out_$i1005, out_$p1006, out_$i1008, out_$i1009, out_$p1010, out_$i1012, out_$i1013, out_$p1014, out_$i1016, out_$i1017, out_$p1018, out_$i1020, out_$i1021, out_$p1022, out_$i1023, out_$i1024, out_$i1025, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$p1030, out_$i1031, out_$i1032, out_$i1033, out_$p1034, out_$i1035, out_$i1036, out_$i1037, out_$p1038, out_$i1039, out_$i1040, out_$p1041, out_$i1042, out_$i1043, out_$p1044, out_$i1046, out_$i1047, out_$p1048, out_$i1050, out_$i1051, out_$p1052, out_$i1054, out_$i1055, out_$p1056, out_$i1058, out_$i1059, out_$p1060, out_$i1062, out_$i1063, out_$p1064, out_$i1066, out_$i1067, out_$p1068, out_$i1070, out_$i1071, out_$p1072, out_$i1074, out_$i1075, out_$p1076, out_$i1077, out_$i1078, out_$p1079, out_$i1080, out_$i1081, out_$p1082, out_$i1083, out_$i1084, out_$p1085, out_$i1086, out_$i1087, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$i1093, out_$i1094, out_$i1095, out_$i1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$i1101, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$i1107, out_$i1108, out_$i1109, out_$i1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$i1115, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$p1120, out_$i1121, out_$i1122, out_$p1123, out_$i1124, out_$i1125, out_$p1126, out_$i1127, out_$i1128, out_$p1129, out_$i1130, out_$i1131, out_$p1132, out_$i1134, out_$i1135, out_$p1136, out_$i1138, out_$i1139, out_$p1140, out_$i1142, out_$i1143, out_$p1144, out_$i1146, out_$i1147, out_$p1148, out_$i1150, out_$i1151, out_$p1152, out_$i1154, out_$i1155, out_$p1156, out_$i1158, out_$i1159, out_$p1160, out_$i1162, out_$i1163, out_$p1164, out_$p1165, out_$i1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$i1172, out_$i1173, out_$p1174, out_$i1175, out_$i1176, out_$p1177, out_$i1178, out_$i1179, out_$p1180, out_$i1181, out_$i1182, out_$p1183, out_$p1184, out_$i1185, out_$i1186, out_$p1187, out_$p1188, out_$i1189, out_$i1190, out_$p1191, out_$p1192, out_$i1193, out_$i1194, out_$p1195, out_$p1196, out_$i1197, out_$i1198, out_$p1199, out_$i1200, out_$i1201, out_$p1202, out_$i1204, out_$i1205, out_$p1206, out_$i1208, out_$i1209, out_$p1210, out_$i1212, out_$i1213, out_$p1214, out_$i1216, out_$i1217, out_$p1218, out_$i1219, out_$i1220, out_$i1221, out_$i1222, out_$p1223, out_$i1224, out_$i1225, out_$i1227, out_$i1228, out_$p1229, out_$i1230, out_$i1231, out_$i1233, out_$i1234, out_$p1235, out_$i1236, out_$i1237, out_$i1239, out_$i1240, out_$p1241, out_$i1242, out_$i1243, out_$i1245, out_$i1246, out_$p1247, out_$i1248, out_$i1249, out_$i1251, out_$i1252, out_$p1253, out_$i1254, out_$i1255, out_$i1257, out_$i1258, out_$p1259, out_$i1260, out_$i1261, out_$i1263, out_$i1264, out_$p1265, out_$i1266, out_$i1267, out_$i1269, out_$i1270, out_$p1271, out_$p1272, out_$i1273, out_$i1275, out_$i1276, out_$p1277, out_$p1278, out_$i1279, out_$i1281, out_$i1282, out_$p1283, out_$p1284, out_$i1285, out_$i1287, out_$i1288, out_$p1289, out_$p1290, out_$i1291, out_$i1293, out_$i1294, out_$p1295, out_$i1296, out_$i1298, out_$i1299, out_$p1300, out_$i1301, out_$i1303, out_$i1304, out_$p1305, out_$i1306, out_$i1308, out_$i1309, out_$p1310, out_$i1311, out_$i1313, out_$i1314, out_$p1315, out_$i1316, out_$i1317, out_$i1318, out_$i1319, out_$i1320, out_$p1321, out_$i1322, out_$i1323, out_$p1324, out_$i1325, out_$i1326, out_$p1327, out_$i1329, out_$i1330, out_$p1331, out_$i1333, out_$i1334, out_$p1335, out_$i1337, out_$i1338, out_$p1339, out_$i1341, out_$i1342, out_$p1343, out_$i1344, out_$i1345, out_$i1346, out_$p1347, out_$i1348, out_$i1349, out_$i1350, out_$p1351, out_$i1352, out_$i1353, out_$i1354, out_$p1355, out_$i1356, out_$i1357, out_$i1358, out_$p1359, out_$i1360, out_$i1361, out_$p1362, out_$i1363, out_$i1364, out_$p1365, out_$i1367, out_$i1368, out_$p1369, out_$i1371, out_$i1372, out_$p1373, out_$i1375, out_$i1376, out_$p1377, out_$i1379, out_$i1380, out_$p1381, out_$i1383, out_$i1384, out_$p1385, out_$i1387, out_$i1388, out_$p1389, out_$i1391, out_$i1392, out_$p1393, out_$i1395, out_$i1396, out_$p1397, out_$i1398, out_$i1399, out_$p1400, out_$i1401, out_$i1402, out_$p1403, out_$i1404, out_$i1405, out_$p1406, out_$i1407, out_$i1408, out_$i1410, out_$i1411, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243 := in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$i139, in_$p140, in_$i141, in_$i142, in_$p143, in_$i144, in_$i145, in_$p146, in_$i147, in_$i148, in_$p149, in_$i150, in_$i151, in_$p152, in_$i154, in_$i155, in_$p156, in_$i158, in_$i159, in_$p160, in_$i162, in_$i163, in_$p164, in_$i166, in_$i167, in_$p168, in_$i170, in_$i171, in_$p172, in_$i174, in_$i175, in_$p176, in_$i178, in_$i179, in_$p180, in_$i182, in_$i183, in_$p184, in_$p185, in_$i186, in_$i187, in_$i188, in_$i189, in_$i190, in_$p191, in_$i192, in_$i193, in_$p194, in_$i195, in_$i196, in_$p197, in_$i198, in_$i199, in_$p200, in_$i201, in_$i202, in_$p203, in_$p204, in_$i205, in_$i206, in_$p207, in_$p208, in_$i209, in_$i210, in_$p211, in_$p212, in_$i213, in_$i214, in_$p215, in_$p216, in_$i217, in_$i218, in_$p219, in_$i221, in_$i222, in_$p223, in_$i225, in_$i226, in_$p227, in_$i229, in_$i230, in_$p231, in_$i233, in_$i234, in_$p235, in_$i236, in_$i237, in_$p238, in_$i239, in_$i240, in_$i241, in_$i242, in_$p243, in_$i244, in_$i245, in_$i247, in_$i248, in_$p249, in_$i250, in_$i251, in_$i253, in_$i254, in_$p255, in_$i256, in_$i257, in_$i259, in_$i260, in_$p261, in_$i262, in_$i263, in_$i265, in_$i266, in_$p267, in_$i268, in_$i269, in_$i271, in_$i272, in_$p273, in_$i274, in_$i275, in_$i277, in_$i278, in_$p279, in_$i280, in_$i281, in_$i283, in_$i284, in_$p285, in_$i286, in_$i287, in_$i289, in_$i290, in_$p291, in_$p292, in_$i293, in_$i295, in_$i296, in_$p297, in_$p298, in_$i299, in_$i301, in_$i302, in_$p303, in_$p304, in_$i305, in_$i307, in_$i308, in_$p309, in_$p310, in_$i311, in_$i313, in_$i314, in_$p315, in_$i316, in_$i318, in_$i319, in_$p320, in_$i321, in_$i323, in_$i324, in_$p325, in_$i326, in_$i328, in_$i329, in_$p330, in_$i331, in_$i333, in_$i334, in_$p335, in_$i336, in_$i337, in_$i338, in_$i339, in_$i340, in_$p341, in_$i342, in_$i343, in_$p344, in_$i345, in_$i346, in_$p347, in_$i349, in_$i350, in_$p351, in_$i353, in_$i354, in_$p355, in_$i357, in_$i358, in_$p359, in_$i361, in_$i362, in_$p363, in_$i364, in_$i365, in_$i366, in_$p367, in_$i368, in_$i369, in_$i370, in_$p371, in_$i372, in_$i373, in_$i374, in_$p375, in_$i376, in_$i377, in_$i378, in_$p379, in_$i380, in_$i381, in_$p382, in_$i383, in_$i384, in_$p385, in_$i387, in_$i388, in_$p389, in_$i391, in_$i392, in_$p393, in_$i395, in_$i396, in_$p397, in_$i399, in_$i400, in_$p401, in_$i403, in_$i404, in_$p405, in_$i407, in_$i408, in_$p409, in_$i411, in_$i412, in_$p413, in_$i415, in_$i416, in_$p417, in_$i418, in_$i419, in_$p420, in_$i421, in_$i422, in_$p423, in_$i424, in_$i425, in_$p426, in_$i427, in_$i428, in_$i430, in_$i431, in_$i432, in_$i433, in_$i434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i446, in_$i447, in_$i448, in_$i449, in_$i450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i455, in_$i456, in_$i457, in_$i458, in_$i459, in_$i460, in_$p461, in_$i462, in_$i463, in_$p464, in_$i465, in_$i466, in_$p467, in_$i468, in_$i469, in_$p470, in_$i471, in_$i472, in_$p473, in_$i475, in_$i476, in_$p477, in_$i479, in_$i480, in_$p481, in_$i483, in_$i484, in_$p485, in_$i487, in_$i488, in_$p489, in_$i491, in_$i492, in_$p493, in_$i495, in_$i496, in_$p497, in_$i499, in_$i500, in_$p501, in_$i503, in_$i504, in_$p505, in_$p506, in_$i507, in_$i508, in_$i509, in_$i510, in_$i511, in_$p512, in_$i513, in_$i514, in_$p515, in_$i516, in_$i517, in_$p518, in_$i519, in_$i520, in_$p521, in_$i522, in_$i523, in_$p524, in_$p525, in_$i526, in_$i527, in_$p528, in_$p529, in_$i530, in_$i531, in_$p532, in_$p533, in_$i534, in_$i535, in_$p536, in_$p537, in_$i538, in_$i539, in_$p540, in_$i541, in_$i542, in_$p543, in_$i545, in_$i546, in_$p547, in_$i549, in_$i550, in_$p551, in_$i553, in_$i554, in_$p555, in_$i557, in_$i558, in_$p559, in_$i560, in_$i561, in_$i562, in_$i563, in_$p564, in_$i565, in_$i566, in_$i568, in_$i569, in_$p570, in_$i571, in_$i572, in_$i574, in_$i575, in_$p576, in_$i577, in_$i578, in_$i580, in_$i581, in_$p582, in_$i583, in_$i584, in_$i586, in_$i587, in_$p588, in_$i589, in_$i590, in_$i592, in_$i593, in_$p594, in_$i595, in_$i596, in_$i598, in_$i599, in_$p600, in_$i601, in_$i602, in_$i604, in_$i605, in_$p606, in_$i607, in_$i608, in_$i610, in_$i611, in_$p612, in_$p613, in_$i614, in_$i616, in_$i617, in_$p618, in_$p619, in_$i620, in_$i622, in_$i623, in_$p624, in_$p625, in_$i626, in_$i628, in_$i629, in_$p630, in_$p631, in_$i632, in_$i634, in_$i635, in_$p636, in_$i637, in_$i639, in_$i640, in_$p641, in_$i642, in_$i644, in_$i645, in_$p646, in_$i647, in_$i649, in_$i650, in_$p651, in_$i652, in_$i654, in_$i655, in_$p656, in_$i657, in_$i658, in_$i659, in_$i660, in_$i661, in_$p662, in_$i663, in_$i664, in_$p665, in_$i666, in_$i667, in_$p668, in_$i670, in_$i671, in_$p672, in_$i674, in_$i675, in_$p676, in_$i678, in_$i679, in_$p680, in_$i682, in_$i683, in_$p684, in_$i685, in_$i686, in_$i687, in_$p688, in_$i689, in_$i690, in_$i691, in_$p692, in_$i693, in_$i694, in_$i695, in_$p696, in_$i697, in_$i698, in_$i699, in_$p700, in_$i701, in_$i702, in_$p703, in_$i704, in_$i705, in_$p706, in_$i708, in_$i709, in_$p710, in_$i712, in_$i713, in_$p714, in_$i716, in_$i717, in_$p718, in_$i720, in_$i721, in_$p722, in_$i724, in_$i725, in_$p726, in_$i728, in_$i729, in_$p730, in_$i732, in_$i733, in_$p734, in_$i736, in_$i737, in_$p738, in_$i739, in_$i740, in_$p741, in_$i742, in_$i743, in_$p744, in_$i745, in_$i746, in_$p747, in_$i748, in_$i749, in_$i751, in_$i752, in_$i753, in_$i754, in_$i755, in_$i756, in_$i757, in_$i758, in_$i759, in_$i760, in_$i761, in_$i762, in_$i763, in_$i764, in_$i765, in_$i766, in_$i767, in_$i768, in_$i769, in_$i770, in_$i771, in_$i772, in_$i773, in_$i774, in_$i775, in_$i776, in_$i777, in_$i778, in_$i779, in_$i780, in_$i781, in_$i782, in_$i783, in_$i784, in_$i785, in_$i786, in_$i787, in_$i788, in_$i789, in_$i790, in_$i791, in_$i792, in_$i793, in_$i794, in_$i795, in_$i796, in_$i797, in_$i798, in_$p799, in_$i800, in_$i801, in_$p802, in_$i803, in_$i804, in_$p805, in_$i806, in_$i807, in_$p808, in_$i809, in_$i810, in_$p811, in_$i813, in_$i814, in_$p815, in_$i817, in_$i818, in_$p819, in_$i821, in_$i822, in_$p823, in_$i825, in_$i826, in_$p827, in_$i829, in_$i830, in_$p831, in_$i833, in_$i834, in_$p835, in_$i837, in_$i838, in_$p839, in_$i841, in_$i842, in_$p843, in_$p844, in_$i845, in_$i846, in_$i847, in_$i848, in_$i849, in_$p850, in_$i851, in_$i852, in_$p853, in_$i854, in_$i855, in_$p856, in_$i857, in_$i858, in_$p859, in_$i860, in_$i861, in_$p862, in_$p863, in_$i864, in_$i865, in_$p866, in_$p867, in_$i868, in_$i869, in_$p870, in_$p871, in_$i872, in_$i873, in_$p874, in_$p875, in_$i876, in_$i877, in_$p878, in_$i879, in_$i880, in_$p881, in_$i883, in_$i884, in_$p885, in_$i887, in_$i888, in_$p889, in_$i891, in_$i892, in_$p893, in_$i895, in_$i896, in_$p897, in_$i898, in_$i899, in_$i900, in_$i901, in_$p902, in_$i903, in_$i904, in_$i906, in_$i907, in_$p908, in_$i909, in_$i910, in_$i912, in_$i913, in_$p914, in_$i915, in_$i916, in_$i918, in_$i919, in_$p920, in_$i921, in_$i922, in_$i924, in_$i925, in_$p926, in_$i927, in_$i928, in_$i930, in_$i931, in_$p932, in_$i933, in_$i934, in_$i936, in_$i937, in_$p938, in_$i939, in_$i940, in_$i942, in_$i943, in_$p944, in_$i945, in_$i946, in_$i948, in_$i949, in_$p950, in_$p951, in_$i952, in_$i954, in_$i955, in_$p956, in_$p957, in_$i958, in_$i960, in_$i961, in_$p962, in_$p963, in_$i964, in_$i966, in_$i967, in_$p968, in_$p969, in_$i970, in_$i972, in_$i973, in_$p974, in_$i975, in_$i977, in_$i978, in_$p979, in_$i980, in_$i982, in_$i983, in_$p984, in_$i985, in_$i987, in_$i988, in_$p989, in_$i990, in_$i992, in_$i993, in_$p994, in_$i995, in_$i996, in_$i997, in_$i998, in_$i999, in_$p1000, in_$i1001, in_$i1002, in_$p1003, in_$i1004, in_$i1005, in_$p1006, in_$i1008, in_$i1009, in_$p1010, in_$i1012, in_$i1013, in_$p1014, in_$i1016, in_$i1017, in_$p1018, in_$i1020, in_$i1021, in_$p1022, in_$i1023, in_$i1024, in_$i1025, in_$p1026, in_$i1027, in_$i1028, in_$i1029, in_$p1030, in_$i1031, in_$i1032, in_$i1033, in_$p1034, in_$i1035, in_$i1036, in_$i1037, in_$p1038, in_$i1039, in_$i1040, in_$p1041, in_$i1042, in_$i1043, in_$p1044, in_$i1046, in_$i1047, in_$p1048, in_$i1050, in_$i1051, in_$p1052, in_$i1054, in_$i1055, in_$p1056, in_$i1058, in_$i1059, in_$p1060, in_$i1062, in_$i1063, in_$p1064, in_$i1066, in_$i1067, in_$p1068, in_$i1070, in_$i1071, in_$p1072, in_$i1074, in_$i1075, in_$p1076, in_$i1077, in_$i1078, in_$p1079, in_$i1080, in_$i1081, in_$p1082, in_$i1083, in_$i1084, in_$p1085, in_$i1086, in_$i1087, in_$i1089, in_$i1090, in_$i1091, in_$i1092, in_$i1093, in_$i1094, in_$i1095, in_$i1096, in_$i1097, in_$i1098, in_$i1099, in_$i1100, in_$i1101, in_$i1102, in_$i1103, in_$i1104, in_$i1105, in_$i1106, in_$i1107, in_$i1108, in_$i1109, in_$i1110, in_$i1111, in_$i1112, in_$i1113, in_$i1114, in_$i1115, in_$i1116, in_$i1117, in_$i1118, in_$i1119, in_$p1120, in_$i1121, in_$i1122, in_$p1123, in_$i1124, in_$i1125, in_$p1126, in_$i1127, in_$i1128, in_$p1129, in_$i1130, in_$i1131, in_$p1132, in_$i1134, in_$i1135, in_$p1136, in_$i1138, in_$i1139, in_$p1140, in_$i1142, in_$i1143, in_$p1144, in_$i1146, in_$i1147, in_$p1148, in_$i1150, in_$i1151, in_$p1152, in_$i1154, in_$i1155, in_$p1156, in_$i1158, in_$i1159, in_$p1160, in_$i1162, in_$i1163, in_$p1164, in_$p1165, in_$i1166, in_$i1167, in_$i1168, in_$i1169, in_$i1170, in_$p1171, in_$i1172, in_$i1173, in_$p1174, in_$i1175, in_$i1176, in_$p1177, in_$i1178, in_$i1179, in_$p1180, in_$i1181, in_$i1182, in_$p1183, in_$p1184, in_$i1185, in_$i1186, in_$p1187, in_$p1188, in_$i1189, in_$i1190, in_$p1191, in_$p1192, in_$i1193, in_$i1194, in_$p1195, in_$p1196, in_$i1197, in_$i1198, in_$p1199, in_$i1200, in_$i1201, in_$p1202, in_$i1204, in_$i1205, in_$p1206, in_$i1208, in_$i1209, in_$p1210, in_$i1212, in_$i1213, in_$p1214, in_$i1216, in_$i1217, in_$p1218, in_$i1219, in_$i1220, in_$i1221, in_$i1222, in_$p1223, in_$i1224, in_$i1225, in_$i1227, in_$i1228, in_$p1229, in_$i1230, in_$i1231, in_$i1233, in_$i1234, in_$p1235, in_$i1236, in_$i1237, in_$i1239, in_$i1240, in_$p1241, in_$i1242, in_$i1243, in_$i1245, in_$i1246, in_$p1247, in_$i1248, in_$i1249, in_$i1251, in_$i1252, in_$p1253, in_$i1254, in_$i1255, in_$i1257, in_$i1258, in_$p1259, in_$i1260, in_$i1261, in_$i1263, in_$i1264, in_$p1265, in_$i1266, in_$i1267, in_$i1269, in_$i1270, in_$p1271, in_$p1272, in_$i1273, in_$i1275, in_$i1276, in_$p1277, in_$p1278, in_$i1279, in_$i1281, in_$i1282, in_$p1283, in_$p1284, in_$i1285, in_$i1287, in_$i1288, in_$p1289, in_$p1290, in_$i1291, in_$i1293, in_$i1294, in_$p1295, in_$i1296, in_$i1298, in_$i1299, in_$p1300, in_$i1301, in_$i1303, in_$i1304, in_$p1305, in_$i1306, in_$i1308, in_$i1309, in_$p1310, in_$i1311, in_$i1313, in_$i1314, in_$p1315, in_$i1316, in_$i1317, in_$i1318, in_$i1319, in_$i1320, in_$p1321, in_$i1322, in_$i1323, in_$p1324, in_$i1325, in_$i1326, in_$p1327, in_$i1329, in_$i1330, in_$p1331, in_$i1333, in_$i1334, in_$p1335, in_$i1337, in_$i1338, in_$p1339, in_$i1341, in_$i1342, in_$p1343, in_$i1344, in_$i1345, in_$i1346, in_$p1347, in_$i1348, in_$i1349, in_$i1350, in_$p1351, in_$i1352, in_$i1353, in_$i1354, in_$p1355, in_$i1356, in_$i1357, in_$i1358, in_$p1359, in_$i1360, in_$i1361, in_$p1362, in_$i1363, in_$i1364, in_$p1365, in_$i1367, in_$i1368, in_$p1369, in_$i1371, in_$i1372, in_$p1373, in_$i1375, in_$i1376, in_$p1377, in_$i1379, in_$i1380, in_$p1381, in_$i1383, in_$i1384, in_$p1385, in_$i1387, in_$i1388, in_$p1389, in_$i1391, in_$i1392, in_$p1393, in_$i1395, in_$i1396, in_$p1397, in_$i1398, in_$i1399, in_$p1400, in_$i1401, in_$i1402, in_$p1403, in_$i1404, in_$i1405, in_$p1406, in_$i1407, in_$i1408, in_$i1410, in_$i1411, in_vslice_dummy_var_80, in_vslice_dummy_var_81, in_vslice_dummy_var_82, in_vslice_dummy_var_83, in_vslice_dummy_var_84, in_vslice_dummy_var_85, in_vslice_dummy_var_86, in_vslice_dummy_var_87, in_vslice_dummy_var_88, in_vslice_dummy_var_89, in_vslice_dummy_var_90, in_vslice_dummy_var_91, in_vslice_dummy_var_92, in_vslice_dummy_var_93, in_vslice_dummy_var_94, in_vslice_dummy_var_95, in_vslice_dummy_var_96, in_vslice_dummy_var_97, in_vslice_dummy_var_98, in_vslice_dummy_var_99, in_vslice_dummy_var_100, in_vslice_dummy_var_101, in_vslice_dummy_var_102, in_vslice_dummy_var_103, in_vslice_dummy_var_104, in_vslice_dummy_var_105, in_vslice_dummy_var_106, in_vslice_dummy_var_107, in_vslice_dummy_var_108, in_vslice_dummy_var_109, in_vslice_dummy_var_110, in_vslice_dummy_var_111, in_vslice_dummy_var_112, in_vslice_dummy_var_113, in_vslice_dummy_var_114, in_vslice_dummy_var_115, in_vslice_dummy_var_116, in_vslice_dummy_var_117, in_vslice_dummy_var_118, in_vslice_dummy_var_119, in_vslice_dummy_var_120, in_vslice_dummy_var_121, in_vslice_dummy_var_122, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176, in_vslice_dummy_var_177, in_vslice_dummy_var_178, in_vslice_dummy_var_179, in_vslice_dummy_var_180, in_vslice_dummy_var_181, in_vslice_dummy_var_182, in_vslice_dummy_var_183, in_vslice_dummy_var_184, in_vslice_dummy_var_185, in_vslice_dummy_var_186, in_vslice_dummy_var_187, in_vslice_dummy_var_188, in_vslice_dummy_var_189, in_vslice_dummy_var_190, in_vslice_dummy_var_191, in_vslice_dummy_var_192, in_vslice_dummy_var_193, in_vslice_dummy_var_194, in_vslice_dummy_var_195, in_vslice_dummy_var_196, in_vslice_dummy_var_197, in_vslice_dummy_var_198, in_vslice_dummy_var_199, in_vslice_dummy_var_200, in_vslice_dummy_var_201, in_vslice_dummy_var_202, in_vslice_dummy_var_203, in_vslice_dummy_var_204, in_vslice_dummy_var_205, in_vslice_dummy_var_206, in_vslice_dummy_var_207, in_vslice_dummy_var_208, in_vslice_dummy_var_209, in_vslice_dummy_var_210, in_vslice_dummy_var_211, in_vslice_dummy_var_212, in_vslice_dummy_var_213, in_vslice_dummy_var_214, in_vslice_dummy_var_215, in_vslice_dummy_var_216, in_vslice_dummy_var_217, in_vslice_dummy_var_218, in_vslice_dummy_var_219, in_vslice_dummy_var_220, in_vslice_dummy_var_221, in_vslice_dummy_var_222, in_vslice_dummy_var_223, in_vslice_dummy_var_224, in_vslice_dummy_var_225, in_vslice_dummy_var_226, in_vslice_dummy_var_227, in_vslice_dummy_var_228, in_vslice_dummy_var_229, in_vslice_dummy_var_230, in_vslice_dummy_var_231, in_vslice_dummy_var_232, in_vslice_dummy_var_233, in_vslice_dummy_var_234, in_vslice_dummy_var_235, in_vslice_dummy_var_236, in_vslice_dummy_var_237, in_vslice_dummy_var_238, in_vslice_dummy_var_239, in_vslice_dummy_var_240, in_vslice_dummy_var_241, in_vslice_dummy_var_242, in_vslice_dummy_var_243;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1346} out_$i104 := __VERIFIER_nondet_int();
    call {:si_unique_call 1347} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i104);
    call {:si_unique_call 1348} {:cexpr "tmp___11"} boogie_si_record_i32(out_$i104);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb285:
    assume {:verifier.code 0} true;
    goto $bb285_dummy;

  $bb1124:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb1122:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb853:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb584:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb554:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb284:
    assume {:verifier.code 0} true;
    goto $bb285;

  $bb17:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb80:
    assume {:verifier.code 0} true;
    goto $bb284;

  $bb283:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb281:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb278:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb266:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb254:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb242:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb236:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb224:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb209:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb206:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb200:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb188:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb176:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb164:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb152:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb149:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb146:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb134:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb122:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb110:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb104:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb92:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb78:
    assume !(out_$i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    goto $bb79;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1359} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8631;

  SeqInstr_240:
    goto corral_source_split_8630;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1358} edge_throttle(out_$p149);
    goto SeqInstr_239;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    out_$p149 := $M.32;
    goto corral_source_split_8629;

  $bb77:
    assume out_$i148 == 1;
    goto corral_source_split_8628;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb77, $bb78;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 2);
    goto corral_source_split_8626;

  $bb76:
    assume {:verifier.code 0} true;
    out_$i147 := $M.45;
    goto corral_source_split_8625;

  $bb75:
    assume !(out_$i145 == 1);
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_8623:
    assume {:verifier.code 0} true;
    goto $bb76;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1357} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8623;

  SeqInstr_237:
    goto corral_source_split_8622;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} edge_throttle(out_$p146);
    goto SeqInstr_236;

  corral_source_split_8620:
    assume {:verifier.code 0} true;
    out_$p146 := $M.32;
    goto corral_source_split_8621;

  $bb74:
    assume out_$i145 == 1;
    goto corral_source_split_8620;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb74, $bb75;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    out_$i145 := $eq.i32(out_$i144, 3);
    goto corral_source_split_8618;

  $bb73:
    assume {:verifier.code 0} true;
    out_$i144 := $M.45;
    goto corral_source_split_8617;

  $bb72:
    assume !(out_$i142 == 1);
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    goto $bb73;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1355} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8615;

  SeqInstr_234:
    goto corral_source_split_8614;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} edge_throttle(out_$p143);
    goto SeqInstr_233;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    out_$p143 := $M.32;
    goto corral_source_split_8613;

  $bb71:
    assume out_$i142 == 1;
    goto corral_source_split_8612;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb71, $bb72;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    out_$i142 := $eq.i32(out_$i141, 1);
    goto corral_source_split_8610;

  $bb70:
    assume {:verifier.code 0} true;
    out_$i141 := $M.45;
    goto corral_source_split_8609;

  $bb69:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    goto $bb70;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1353} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8607;

  SeqInstr_231:
    goto corral_source_split_8606;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} edge_throttle(out_$p140);
    goto SeqInstr_230;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    out_$p140 := $M.32;
    goto corral_source_split_8605;

  $bb68:
    assume out_$i139 == 1;
    goto corral_source_split_8604;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 4);
    goto corral_source_split_8602;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    out_$i138 := $M.45;
    goto corral_source_split_8601;

  $bb66:
    assume out_$i137 == 1;
    goto corral_source_split_8600;

  $bb64:
    assume out_$i136 == 1;
    assume {:verifier.code 0} true;
    out_$i137 := $eq.i32(out_$i113, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb58:
    assume out_$i133 == 1;
    assume {:verifier.code 0} true;
    out_$i136 := $slt.i32(out_$i113, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb46:
    assume out_$i127 == 1;
    assume {:verifier.code 0} true;
    out_$i133 := $slt.i32(out_$i113, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb19:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$i127 := $slt.i32(out_$i113, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i114 := $slt.i32(out_$i113, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_8510:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1349} out_$i113 := __VERIFIER_nondet_int();
    call {:si_unique_call 1350} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i113);
    call {:si_unique_call 1351} {:cexpr "tmp___12"} boogie_si_record_i32(out_$i113);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i112 == 1;
    goto corral_source_split_8510;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8507:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i32(out_$i111, 0);
    goto corral_source_split_8508;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    out_$i111 := $M.45;
    goto corral_source_split_8507;

  $bb14:
    assume out_$i110 == 1;
    goto corral_source_split_8506;

  $bb12:
    assume out_$i109 == 1;
    assume {:verifier.code 0} true;
    out_$i110 := $eq.i32(out_$i104, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i105 == 1;
    assume {:verifier.code 0} true;
    out_$i109 := $slt.i32(out_$i104, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i105 := $slt.i32(out_$i104, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb91:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_8660:
    assume {:verifier.code 0} true;
    goto $bb92;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1367} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8660;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1366} out_vslice_dummy_var_83 := usb_serial_generic_get_icount(out_$p164, in_$p32);
    goto corral_source_split_8659;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    out_$p164 := $M.32;
    goto corral_source_split_8658;

  $bb90:
    assume out_$i163 == 1;
    goto corral_source_split_8657;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb90, $bb91;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 2);
    goto corral_source_split_8655;

  $bb89:
    assume {:verifier.code 0} true;
    out_$i162 := $M.45;
    goto corral_source_split_8654;

  $bb88:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1365} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8652;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1364} out_vslice_dummy_var_82 := usb_serial_generic_get_icount(out_$p160, in_$p32);
    goto corral_source_split_8651;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    out_$p160 := $M.32;
    goto corral_source_split_8650;

  $bb87:
    assume out_$i159 == 1;
    goto corral_source_split_8649;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 3);
    goto corral_source_split_8647;

  $bb86:
    assume {:verifier.code 0} true;
    out_$i158 := $M.45;
    goto corral_source_split_8646;

  $bb85:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    goto $bb86;

  corral_source_split_8643:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1363} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8644;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1362} out_vslice_dummy_var_81 := usb_serial_generic_get_icount(out_$p156, in_$p32);
    goto corral_source_split_8643;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    out_$p156 := $M.32;
    goto corral_source_split_8642;

  $bb84:
    assume out_$i155 == 1;
    goto corral_source_split_8641;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_8639;

  $bb83:
    assume {:verifier.code 0} true;
    out_$i154 := $M.45;
    goto corral_source_split_8638;

  $bb82:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    goto $bb83;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1361} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8636;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1360} out_vslice_dummy_var_80 := usb_serial_generic_get_icount(out_$p152, in_$p32);
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$p152 := $M.32;
    goto corral_source_split_8634;

  $bb81:
    assume out_$i151 == 1;
    goto corral_source_split_8633;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 4);
    goto corral_source_split_8598;

  corral_source_split_8596:
    assume {:verifier.code 0} true;
    out_$i150 := $M.45;
    goto corral_source_split_8597;

  $bb65:
    assume !(out_$i136 == 1);
    goto corral_source_split_8596;

  $bb103:
    assume !(out_$i179 == 1);
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    goto $bb104;

  corral_source_split_8688:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1375} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8689;

  SeqInstr_252:
    goto corral_source_split_8688;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  corral_source_split_8687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} out_vslice_dummy_var_87 := edge_port_probe(out_$p180);
    goto SeqInstr_251;

  corral_source_split_8686:
    assume {:verifier.code 0} true;
    out_$p180 := $M.30;
    goto corral_source_split_8687;

  $bb102:
    assume out_$i179 == 1;
    goto corral_source_split_8686;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb103;

  corral_source_split_8683:
    assume {:verifier.code 0} true;
    out_$i179 := $eq.i32(out_$i178, 2);
    goto corral_source_split_8684;

  $bb101:
    assume {:verifier.code 0} true;
    out_$i178 := $M.45;
    goto corral_source_split_8683;

  $bb100:
    assume !(out_$i175 == 1);
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_8681:
    assume {:verifier.code 0} true;
    goto $bb101;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1373} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8681;

  SeqInstr_249:
    goto corral_source_split_8680;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1372} out_vslice_dummy_var_86 := edge_port_probe(out_$p176);
    goto SeqInstr_248;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    out_$p176 := $M.30;
    goto corral_source_split_8679;

  $bb99:
    assume out_$i175 == 1;
    goto corral_source_split_8678;

  corral_source_split_8676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb99, $bb100;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    out_$i175 := $eq.i32(out_$i174, 3);
    goto corral_source_split_8676;

  $bb98:
    assume {:verifier.code 0} true;
    out_$i174 := $M.45;
    goto corral_source_split_8675;

  $bb97:
    assume !(out_$i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_8673:
    assume {:verifier.code 0} true;
    goto $bb98;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1371} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8673;

  SeqInstr_246:
    goto corral_source_split_8672;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} out_vslice_dummy_var_85 := edge_port_probe(out_$p172);
    goto SeqInstr_245;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    out_$p172 := $M.30;
    goto corral_source_split_8671;

  $bb96:
    assume out_$i171 == 1;
    goto corral_source_split_8670;

  corral_source_split_8668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb96, $bb97;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    out_$i171 := $eq.i32(out_$i170, 1);
    goto corral_source_split_8668;

  $bb95:
    assume {:verifier.code 0} true;
    out_$i170 := $M.45;
    goto corral_source_split_8667;

  $bb94:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_8665:
    assume {:verifier.code 0} true;
    goto $bb95;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1369} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8665;

  SeqInstr_243:
    goto corral_source_split_8664;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1368} out_vslice_dummy_var_84 := edge_port_probe(out_$p168);
    goto SeqInstr_242;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    out_$p168 := $M.30;
    goto corral_source_split_8663;

  $bb93:
    assume out_$i167 == 1;
    goto corral_source_split_8662;

  corral_source_split_8586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb93, $bb94;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 4);
    goto corral_source_split_8586;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$i166 := $M.45;
    goto corral_source_split_8585;

  $bb60:
    assume out_$i134 == 1;
    goto corral_source_split_8584;

  $bb59:
    assume !(out_$i133 == 1);
    assume {:verifier.code 0} true;
    out_$i134 := $slt.i32(out_$i113, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb106:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb109:
    assume {:verifier.code 0} true;
    goto $bb110;

  $bb108:
    assume !(out_$i188 == 1);
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_8700:
    assume {:verifier.code 0} true;
    goto $bb109;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1378} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8700;

  $bb107:
    assume out_$i188 == 1;
    goto corral_source_split_8699;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb107, $bb108;

  corral_source_split_8696:
    assume {:verifier.code 0} true;
    out_$i188 := $eq.i32(out_$i187, 0);
    goto corral_source_split_8697;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    out_$i187 := $M.51;
    goto corral_source_split_8696;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $M.51 := out_$i186;
    call {:si_unique_call 1377} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i186);
    goto corral_source_split_8695;

  SeqInstr_255:
    goto corral_source_split_8694;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1376} out_$i186 := edge_open(out_$p184, out_$p185);
    goto SeqInstr_254;

  corral_source_split_8692:
    assume {:verifier.code 0} true;
    out_$p185 := $M.30;
    goto corral_source_split_8693;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    out_$p184 := $M.32;
    goto corral_source_split_8692;

  $bb105:
    assume out_$i183 == 1;
    goto corral_source_split_8691;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 3);
    goto corral_source_split_8590;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$i182 := $M.45;
    goto corral_source_split_8589;

  $bb62:
    assume out_$i135 == 1;
    goto corral_source_split_8588;

  $bb61:
    assume !(out_$i134 == 1);
    assume {:verifier.code 0} true;
    out_$i135 := $slt.i32(out_$i113, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb121:
    assume !(out_$i199 == 1);
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_8729:
    assume {:verifier.code 0} true;
    goto $bb122;

  corral_source_split_8728:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1386} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8729;

  SeqInstr_267:
    goto corral_source_split_8728;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_8727:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} edge_unthrottle(out_$p200);
    goto SeqInstr_266;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    out_$p200 := $M.32;
    goto corral_source_split_8727;

  $bb120:
    assume out_$i199 == 1;
    goto corral_source_split_8726;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb120, $bb121;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    out_$i199 := $eq.i32(out_$i198, 2);
    goto corral_source_split_8724;

  $bb119:
    assume {:verifier.code 0} true;
    out_$i198 := $M.45;
    goto corral_source_split_8723;

  $bb118:
    assume !(out_$i196 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    goto $bb119;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1384} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8721;

  SeqInstr_264:
    goto corral_source_split_8720;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_8719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} edge_unthrottle(out_$p197);
    goto SeqInstr_263;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    out_$p197 := $M.32;
    goto corral_source_split_8719;

  $bb117:
    assume out_$i196 == 1;
    goto corral_source_split_8718;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb117, $bb118;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    out_$i196 := $eq.i32(out_$i195, 3);
    goto corral_source_split_8716;

  $bb116:
    assume {:verifier.code 0} true;
    out_$i195 := $M.45;
    goto corral_source_split_8715;

  $bb115:
    assume !(out_$i193 == 1);
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    goto $bb116;

  corral_source_split_8712:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1382} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8713;

  SeqInstr_261:
    goto corral_source_split_8712;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} edge_unthrottle(out_$p194);
    goto SeqInstr_260;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    out_$p194 := $M.32;
    goto corral_source_split_8711;

  $bb114:
    assume out_$i193 == 1;
    goto corral_source_split_8710;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb114, $bb115;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    out_$i193 := $eq.i32(out_$i192, 1);
    goto corral_source_split_8708;

  $bb113:
    assume {:verifier.code 0} true;
    out_$i192 := $M.45;
    goto corral_source_split_8707;

  $bb112:
    assume !(out_$i190 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    goto $bb113;

  corral_source_split_8704:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1380} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8705;

  SeqInstr_258:
    goto corral_source_split_8704;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1379} edge_unthrottle(out_$p191);
    goto SeqInstr_257;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    out_$p191 := $M.32;
    goto corral_source_split_8703;

  $bb111:
    assume out_$i190 == 1;
    goto corral_source_split_8702;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  corral_source_split_8593:
    assume {:verifier.code 0} true;
    out_$i190 := $eq.i32(out_$i189, 4);
    goto corral_source_split_8594;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    out_$i189 := $M.45;
    goto corral_source_split_8593;

  $bb63:
    assume !(out_$i135 == 1);
    goto corral_source_split_8592;

  $bb133:
    assume !(out_$i214 == 1);
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    goto $bb134;

  corral_source_split_8761:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1394} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8762;

  SeqInstr_279:
    goto corral_source_split_8761;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1393} edge_set_termios(out_$p215, out_$p216, in_$p30);
    goto SeqInstr_278;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    out_$p216 := $M.30;
    goto corral_source_split_8760;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    out_$p215 := $M.32;
    goto corral_source_split_8759;

  $bb132:
    assume out_$i214 == 1;
    goto corral_source_split_8758;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb132, $bb133;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    out_$i214 := $eq.i32(out_$i213, 2);
    goto corral_source_split_8756;

  $bb131:
    assume {:verifier.code 0} true;
    out_$i213 := $M.45;
    goto corral_source_split_8755;

  $bb130:
    assume !(out_$i210 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_8753:
    assume {:verifier.code 0} true;
    goto $bb131;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1392} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8753;

  SeqInstr_276:
    goto corral_source_split_8752;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} edge_set_termios(out_$p211, out_$p212, in_$p30);
    goto SeqInstr_275;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    out_$p212 := $M.30;
    goto corral_source_split_8751;

  corral_source_split_8749:
    assume {:verifier.code 0} true;
    out_$p211 := $M.32;
    goto corral_source_split_8750;

  $bb129:
    assume out_$i210 == 1;
    goto corral_source_split_8749;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb129, $bb130;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    out_$i210 := $eq.i32(out_$i209, 3);
    goto corral_source_split_8747;

  $bb128:
    assume {:verifier.code 0} true;
    out_$i209 := $M.45;
    goto corral_source_split_8746;

  $bb127:
    assume !(out_$i206 == 1);
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    goto $bb128;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1390} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8744;

  SeqInstr_273:
    goto corral_source_split_8743;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} edge_set_termios(out_$p207, out_$p208, in_$p30);
    goto SeqInstr_272;

  corral_source_split_8741:
    assume {:verifier.code 0} true;
    out_$p208 := $M.30;
    goto corral_source_split_8742;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    out_$p207 := $M.32;
    goto corral_source_split_8741;

  $bb126:
    assume out_$i206 == 1;
    goto corral_source_split_8740;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb126, $bb127;

  corral_source_split_8737:
    assume {:verifier.code 0} true;
    out_$i206 := $eq.i32(out_$i205, 1);
    goto corral_source_split_8738;

  $bb125:
    assume {:verifier.code 0} true;
    out_$i205 := $M.45;
    goto corral_source_split_8737;

  $bb124:
    assume !(out_$i202 == 1);
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    goto $bb125;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1388} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8735;

  SeqInstr_270:
    goto corral_source_split_8734;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_8733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1387} edge_set_termios(out_$p203, out_$p204, in_$p30);
    goto SeqInstr_269;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    out_$p204 := $M.30;
    goto corral_source_split_8733;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    out_$p203 := $M.32;
    goto corral_source_split_8732;

  $bb123:
    assume out_$i202 == 1;
    goto corral_source_split_8731;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb123, $bb124;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i201, 4);
    goto corral_source_split_8574;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    out_$i201 := $M.45;
    goto corral_source_split_8573;

  $bb54:
    assume out_$i131 == 1;
    goto corral_source_split_8572;

  $bb48:
    assume out_$i128 == 1;
    assume {:verifier.code 0} true;
    out_$i131 := $slt.i32(out_$i113, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb54, $bb55;

  $bb47:
    assume !(out_$i127 == 1);
    assume {:verifier.code 0} true;
    out_$i128 := $slt.i32(out_$i113, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb145:
    assume !(out_$i230 == 1);
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    goto $bb146;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1402} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8791;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} out_vslice_dummy_var_91 := edge_port_remove(out_$p231);
    goto corral_source_split_8790;

  corral_source_split_8788:
    assume {:verifier.code 0} true;
    out_$p231 := $M.30;
    goto corral_source_split_8789;

  $bb144:
    assume out_$i230 == 1;
    goto corral_source_split_8788;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb144, $bb145;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    out_$i230 := $eq.i32(out_$i229, 2);
    goto corral_source_split_8786;

  $bb143:
    assume {:verifier.code 0} true;
    out_$i229 := $M.45;
    goto corral_source_split_8785;

  $bb142:
    assume !(out_$i226 == 1);
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    goto $bb143;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1400} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8783;

  corral_source_split_8781:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1399} out_vslice_dummy_var_90 := edge_port_remove(out_$p227);
    goto corral_source_split_8782;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    out_$p227 := $M.30;
    goto corral_source_split_8781;

  $bb141:
    assume out_$i226 == 1;
    goto corral_source_split_8780;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb141, $bb142;

  corral_source_split_8777:
    assume {:verifier.code 0} true;
    out_$i226 := $eq.i32(out_$i225, 3);
    goto corral_source_split_8778;

  $bb140:
    assume {:verifier.code 0} true;
    out_$i225 := $M.45;
    goto corral_source_split_8777;

  $bb139:
    assume !(out_$i222 == 1);
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    goto $bb140;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1398} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8775;

  corral_source_split_8773:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} out_vslice_dummy_var_89 := edge_port_remove(out_$p223);
    goto corral_source_split_8774;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    out_$p223 := $M.30;
    goto corral_source_split_8773;

  $bb138:
    assume out_$i222 == 1;
    goto corral_source_split_8772;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb138, $bb139;

  corral_source_split_8769:
    assume {:verifier.code 0} true;
    out_$i222 := $eq.i32(out_$i221, 1);
    goto corral_source_split_8770;

  $bb137:
    assume {:verifier.code 0} true;
    out_$i221 := $M.45;
    goto corral_source_split_8769;

  $bb136:
    assume !(out_$i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    goto $bb137;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1396} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8767;

  corral_source_split_8765:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} out_vslice_dummy_var_88 := edge_port_remove(out_$p219);
    goto corral_source_split_8766;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    out_$p219 := $M.30;
    goto corral_source_split_8765;

  $bb135:
    assume out_$i218 == 1;
    goto corral_source_split_8764;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb135, $bb136;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    out_$i218 := $eq.i32(out_$i217, 4);
    goto corral_source_split_8578;

  corral_source_split_8576:
    assume {:verifier.code 0} true;
    out_$i217 := $M.45;
    goto corral_source_split_8577;

  $bb56:
    assume out_$i132 == 1;
    goto corral_source_split_8576;

  $bb55:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    out_$i132 := $slt.i32(out_$i113, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb148:
    assume !(out_$i234 == 1);
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    goto $bb149;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1404} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8796;

  SeqInstr_282:
    goto corral_source_split_8795;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  corral_source_split_8794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} edge_bulk_out_data_callback(out_$p235);
    goto SeqInstr_281;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    out_$p235 := $M.29;
    goto corral_source_split_8794;

  $bb147:
    assume out_$i234 == 1;
    goto corral_source_split_8793;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb147, $bb148;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    out_$i234 := $eq.i32(out_$i233, 4);
    goto corral_source_split_8582;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    out_$i233 := $M.45;
    goto corral_source_split_8581;

  $bb57:
    assume !(out_$i132 == 1);
    goto corral_source_split_8580;

  $bb151:
    assume !(out_$i237 == 1);
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_8804:
    assume {:verifier.code 0} true;
    goto $bb152;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    $M.47 := out_$i240;
    call {:si_unique_call 1407} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i240);
    goto corral_source_split_8804;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    out_$i240 := $sub.i32(out_$i239, 1);
    goto corral_source_split_8803;

  corral_source_split_8801:
    assume {:verifier.code 0} true;
    out_$i239 := $M.47;
    goto corral_source_split_8802;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1406} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8801;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1405} edge_release(out_$p238);
    goto corral_source_split_8800;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    out_$p238 := $M.31;
    goto corral_source_split_8799;

  $bb150:
    assume out_$i237 == 1;
    goto corral_source_split_8798;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb150, $bb151;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    out_$i237 := $eq.i32(out_$i236, 2);
    goto corral_source_split_8562;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    out_$i236 := $M.45;
    goto corral_source_split_8561;

  $bb50:
    assume out_$i129 == 1;
    goto corral_source_split_8560;

  $bb49:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    out_$i129 := $slt.i32(out_$i113, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb163:
    assume !(out_$i260 == 1);
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    goto $bb164;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1415} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8841;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} out_vslice_dummy_var_95 := edge_ioctl(out_$p261, out_$i262, out_$i263);
    goto corral_source_split_8840;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    out_$i263 := $load.i64($M.28, in_$p3);
    goto corral_source_split_8839;

  corral_source_split_8837:
    assume {:verifier.code 0} true;
    out_$i262 := $load.i32($M.28, in_$p0);
    goto corral_source_split_8838;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    out_$p261 := $M.32;
    goto corral_source_split_8837;

  $bb162:
    assume out_$i260 == 1;
    goto corral_source_split_8836;

  corral_source_split_8834:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb162, $bb163;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i259, 2);
    goto corral_source_split_8834;

  $bb161:
    assume {:verifier.code 0} true;
    out_$i259 := $M.45;
    goto corral_source_split_8833;

  $bb160:
    assume !(out_$i254 == 1);
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    goto $bb161;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1413} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8831;

  corral_source_split_8829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} out_vslice_dummy_var_94 := edge_ioctl(out_$p255, out_$i256, out_$i257);
    goto corral_source_split_8830;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    out_$i257 := $load.i64($M.28, in_$p3);
    goto corral_source_split_8829;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    out_$i256 := $load.i32($M.28, in_$p0);
    goto corral_source_split_8828;

  corral_source_split_8826:
    assume {:verifier.code 0} true;
    out_$p255 := $M.32;
    goto corral_source_split_8827;

  $bb159:
    assume out_$i254 == 1;
    goto corral_source_split_8826;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb159, $bb160;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    out_$i254 := $eq.i32(out_$i253, 3);
    goto corral_source_split_8824;

  $bb158:
    assume {:verifier.code 0} true;
    out_$i253 := $M.45;
    goto corral_source_split_8823;

  $bb157:
    assume !(out_$i248 == 1);
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_8821:
    assume {:verifier.code 0} true;
    goto $bb158;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1411} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8821;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} out_vslice_dummy_var_93 := edge_ioctl(out_$p249, out_$i250, out_$i251);
    goto corral_source_split_8820;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    out_$i251 := $load.i64($M.28, in_$p3);
    goto corral_source_split_8819;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    out_$i250 := $load.i32($M.28, in_$p0);
    goto corral_source_split_8818;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    out_$p249 := $M.32;
    goto corral_source_split_8817;

  $bb156:
    assume out_$i248 == 1;
    goto corral_source_split_8816;

  corral_source_split_8814:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb156, $bb157;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    out_$i248 := $eq.i32(out_$i247, 1);
    goto corral_source_split_8814;

  $bb155:
    assume {:verifier.code 0} true;
    out_$i247 := $M.45;
    goto corral_source_split_8813;

  $bb154:
    assume !(out_$i242 == 1);
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_8811:
    assume {:verifier.code 0} true;
    goto $bb155;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1409} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8811;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} out_vslice_dummy_var_92 := edge_ioctl(out_$p243, out_$i244, out_$i245);
    goto corral_source_split_8810;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    out_$i245 := $load.i64($M.28, in_$p3);
    goto corral_source_split_8809;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    out_$i244 := $load.i32($M.28, in_$p0);
    goto corral_source_split_8808;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    out_$p243 := $M.32;
    goto corral_source_split_8807;

  $bb153:
    assume out_$i242 == 1;
    goto corral_source_split_8806;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb153, $bb154;

  corral_source_split_8565:
    assume {:verifier.code 0} true;
    out_$i242 := $eq.i32(out_$i241, 4);
    goto corral_source_split_8566;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    out_$i241 := $M.45;
    goto corral_source_split_8565;

  $bb52:
    assume out_$i130 == 1;
    goto corral_source_split_8564;

  $bb51:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    out_$i130 := $slt.i32(out_$i113, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb175:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    goto $bb176;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1423} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8878;

  SeqInstr_294:
    goto corral_source_split_8877;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  corral_source_split_8876:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} out_vslice_dummy_var_99 := edge_tiocmset(out_$p285, out_$i286, out_$i287);
    goto SeqInstr_293;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    out_$i287 := $load.i32($M.28, in_$p5);
    goto corral_source_split_8876;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    out_$i286 := $load.i32($M.28, in_$p2);
    goto corral_source_split_8875;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    out_$p285 := $M.32;
    goto corral_source_split_8874;

  $bb174:
    assume out_$i284 == 1;
    goto corral_source_split_8873;

  corral_source_split_8871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    out_$i284 := $eq.i32(out_$i283, 2);
    goto corral_source_split_8871;

  $bb173:
    assume {:verifier.code 0} true;
    out_$i283 := $M.45;
    goto corral_source_split_8870;

  $bb172:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_8868:
    assume {:verifier.code 0} true;
    goto $bb173;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1421} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8868;

  SeqInstr_291:
    goto corral_source_split_8867;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1420} out_vslice_dummy_var_98 := edge_tiocmset(out_$p279, out_$i280, out_$i281);
    goto SeqInstr_290;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    out_$i281 := $load.i32($M.28, in_$p5);
    goto corral_source_split_8866;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    out_$i280 := $load.i32($M.28, in_$p2);
    goto corral_source_split_8865;

  corral_source_split_8863:
    assume {:verifier.code 0} true;
    out_$p279 := $M.32;
    goto corral_source_split_8864;

  $bb171:
    assume out_$i278 == 1;
    goto corral_source_split_8863;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    out_$i278 := $eq.i32(out_$i277, 3);
    goto corral_source_split_8861;

  $bb170:
    assume {:verifier.code 0} true;
    out_$i277 := $M.45;
    goto corral_source_split_8860;

  $bb169:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_8858:
    assume {:verifier.code 0} true;
    goto $bb170;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1419} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8858;

  SeqInstr_288:
    goto corral_source_split_8857;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1418} out_vslice_dummy_var_97 := edge_tiocmset(out_$p273, out_$i274, out_$i275);
    goto SeqInstr_287;

  corral_source_split_8855:
    assume {:verifier.code 0} true;
    out_$i275 := $load.i32($M.28, in_$p5);
    goto corral_source_split_8856;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    out_$i274 := $load.i32($M.28, in_$p2);
    goto corral_source_split_8855;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    out_$p273 := $M.32;
    goto corral_source_split_8854;

  $bb168:
    assume out_$i272 == 1;
    goto corral_source_split_8853;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb168, $bb169;

  corral_source_split_8850:
    assume {:verifier.code 0} true;
    out_$i272 := $eq.i32(out_$i271, 1);
    goto corral_source_split_8851;

  $bb167:
    assume {:verifier.code 0} true;
    out_$i271 := $M.45;
    goto corral_source_split_8850;

  $bb166:
    assume !(out_$i266 == 1);
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    goto $bb167;

  corral_source_split_8847:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1417} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8848;

  SeqInstr_285:
    goto corral_source_split_8847;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} out_vslice_dummy_var_96 := edge_tiocmset(out_$p267, out_$i268, out_$i269);
    goto SeqInstr_284;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    out_$i269 := $load.i32($M.28, in_$p5);
    goto corral_source_split_8846;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    out_$i268 := $load.i32($M.28, in_$p2);
    goto corral_source_split_8845;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    out_$p267 := $M.32;
    goto corral_source_split_8844;

  $bb165:
    assume out_$i266 == 1;
    goto corral_source_split_8843;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb165, $bb166;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    out_$i266 := $eq.i32(out_$i265, 4);
    goto corral_source_split_8570;

  corral_source_split_8568:
    assume {:verifier.code 0} true;
    out_$i265 := $M.45;
    goto corral_source_split_8569;

  $bb53:
    assume !(out_$i130 == 1);
    goto corral_source_split_8568;

  $bb187:
    assume !(out_$i308 == 1);
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_8915:
    assume {:verifier.code 0} true;
    goto $bb188;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1431} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8915;

  SeqInstr_306:
    goto corral_source_split_8914;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} out_vslice_dummy_var_103 := edge_write(out_$p309, out_$p310, in_$p28, out_$i311);
    goto SeqInstr_305;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    out_$i311 := $load.i32($M.28, in_$p6);
    goto corral_source_split_8913;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    out_$p310 := $M.30;
    goto corral_source_split_8912;

  corral_source_split_8910:
    assume {:verifier.code 0} true;
    out_$p309 := $M.32;
    goto corral_source_split_8911;

  $bb186:
    assume out_$i308 == 1;
    goto corral_source_split_8910;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb186, $bb187;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    out_$i308 := $eq.i32(out_$i307, 2);
    goto corral_source_split_8908;

  $bb185:
    assume {:verifier.code 0} true;
    out_$i307 := $M.45;
    goto corral_source_split_8907;

  $bb184:
    assume !(out_$i302 == 1);
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_8905:
    assume {:verifier.code 0} true;
    goto $bb185;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1429} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8905;

  SeqInstr_303:
    goto corral_source_split_8904;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} out_vslice_dummy_var_102 := edge_write(out_$p303, out_$p304, in_$p28, out_$i305);
    goto SeqInstr_302;

  corral_source_split_8902:
    assume {:verifier.code 0} true;
    out_$i305 := $load.i32($M.28, in_$p6);
    goto corral_source_split_8903;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    out_$p304 := $M.30;
    goto corral_source_split_8902;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    out_$p303 := $M.32;
    goto corral_source_split_8901;

  $bb183:
    assume out_$i302 == 1;
    goto corral_source_split_8900;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb183, $bb184;

  corral_source_split_8897:
    assume {:verifier.code 0} true;
    out_$i302 := $eq.i32(out_$i301, 3);
    goto corral_source_split_8898;

  $bb182:
    assume {:verifier.code 0} true;
    out_$i301 := $M.45;
    goto corral_source_split_8897;

  $bb181:
    assume !(out_$i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    goto $bb182;

  corral_source_split_8894:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1427} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8895;

  SeqInstr_300:
    goto corral_source_split_8894;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1426} out_vslice_dummy_var_101 := edge_write(out_$p297, out_$p298, in_$p28, out_$i299);
    goto SeqInstr_299;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    out_$i299 := $load.i32($M.28, in_$p6);
    goto corral_source_split_8893;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    out_$p298 := $M.30;
    goto corral_source_split_8892;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    out_$p297 := $M.32;
    goto corral_source_split_8891;

  $bb180:
    assume out_$i296 == 1;
    goto corral_source_split_8890;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb180, $bb181;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    out_$i296 := $eq.i32(out_$i295, 1);
    goto corral_source_split_8888;

  $bb179:
    assume {:verifier.code 0} true;
    out_$i295 := $M.45;
    goto corral_source_split_8887;

  $bb178:
    assume !(out_$i290 == 1);
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    goto $bb179;

  corral_source_split_8884:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1425} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8885;

  SeqInstr_297:
    goto corral_source_split_8884;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} out_vslice_dummy_var_100 := edge_write(out_$p291, out_$p292, in_$p28, out_$i293);
    goto SeqInstr_296;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    out_$i293 := $load.i32($M.28, in_$p6);
    goto corral_source_split_8883;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    out_$p292 := $M.30;
    goto corral_source_split_8882;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    out_$p291 := $M.32;
    goto corral_source_split_8881;

  $bb177:
    assume out_$i290 == 1;
    goto corral_source_split_8880;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb177, $bb178;

  corral_source_split_8549:
    assume {:verifier.code 0} true;
    out_$i290 := $eq.i32(out_$i289, 4);
    goto corral_source_split_8550;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    out_$i289 := $M.45;
    goto corral_source_split_8549;

  $bb42:
    assume out_$i125 == 1;
    goto corral_source_split_8548;

  $bb36:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i125 := $slt.i32(out_$i113, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb21:
    assume out_$i115 == 1;
    assume {:verifier.code 0} true;
    out_$i122 := $slt.i32(out_$i113, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb20:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    out_$i115 := $slt.i32(out_$i113, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb199:
    assume !(out_$i329 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    goto $bb200;

  corral_source_split_8947:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1439} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8948;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} out_vslice_dummy_var_107 := usb_serial_generic_tiocmiwait(out_$p330, out_$i331);
    goto corral_source_split_8947;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    out_$i331 := $load.i64($M.28, in_$p4);
    goto corral_source_split_8946;

  corral_source_split_8944:
    assume {:verifier.code 0} true;
    out_$p330 := $M.32;
    goto corral_source_split_8945;

  $bb198:
    assume out_$i329 == 1;
    goto corral_source_split_8944;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    out_$i329 := $eq.i32(out_$i328, 2);
    goto corral_source_split_8942;

  $bb197:
    assume {:verifier.code 0} true;
    out_$i328 := $M.45;
    goto corral_source_split_8941;

  $bb196:
    assume !(out_$i324 == 1);
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_8939:
    assume {:verifier.code 0} true;
    goto $bb197;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1437} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8939;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} out_vslice_dummy_var_106 := usb_serial_generic_tiocmiwait(out_$p325, out_$i326);
    goto corral_source_split_8938;

  corral_source_split_8936:
    assume {:verifier.code 0} true;
    out_$i326 := $load.i64($M.28, in_$p4);
    goto corral_source_split_8937;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    out_$p325 := $M.32;
    goto corral_source_split_8936;

  $bb195:
    assume out_$i324 == 1;
    goto corral_source_split_8935;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb195, $bb196;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    out_$i324 := $eq.i32(out_$i323, 3);
    goto corral_source_split_8933;

  $bb194:
    assume {:verifier.code 0} true;
    out_$i323 := $M.45;
    goto corral_source_split_8932;

  $bb193:
    assume !(out_$i319 == 1);
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb194;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1435} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8930;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1434} out_vslice_dummy_var_105 := usb_serial_generic_tiocmiwait(out_$p320, out_$i321);
    goto corral_source_split_8929;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    out_$i321 := $load.i64($M.28, in_$p4);
    goto corral_source_split_8928;

  corral_source_split_8926:
    assume {:verifier.code 0} true;
    out_$p320 := $M.32;
    goto corral_source_split_8927;

  $bb192:
    assume out_$i319 == 1;
    goto corral_source_split_8926;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb192, $bb193;

  corral_source_split_8923:
    assume {:verifier.code 0} true;
    out_$i319 := $eq.i32(out_$i318, 1);
    goto corral_source_split_8924;

  $bb191:
    assume {:verifier.code 0} true;
    out_$i318 := $M.45;
    goto corral_source_split_8923;

  $bb190:
    assume !(out_$i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    goto $bb191;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1433} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8921;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} out_vslice_dummy_var_104 := usb_serial_generic_tiocmiwait(out_$p315, out_$i316);
    goto corral_source_split_8920;

  corral_source_split_8918:
    assume {:verifier.code 0} true;
    out_$i316 := $load.i64($M.28, in_$p4);
    goto corral_source_split_8919;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    out_$p315 := $M.32;
    goto corral_source_split_8918;

  $bb189:
    assume out_$i314 == 1;
    goto corral_source_split_8917;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb189, $bb190;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    out_$i314 := $eq.i32(out_$i313, 4);
    goto corral_source_split_8554;

  corral_source_split_8552:
    assume {:verifier.code 0} true;
    out_$i313 := $M.45;
    goto corral_source_split_8553;

  $bb44:
    assume out_$i126 == 1;
    goto corral_source_split_8552;

  $bb43:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    out_$i126 := $slt.i32(out_$i113, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb202:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb205:
    assume {:verifier.code 0} true;
    goto $bb206;

  $bb204:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    goto $bb205;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1442} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8958;

  $bb203:
    assume out_$i338 == 1;
    goto corral_source_split_8957;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb203, $bb204;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 0);
    goto corral_source_split_8955;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$i337 := $M.52;
    goto corral_source_split_8954;

  corral_source_split_8952:
    assume {:verifier.code 0} true;
    $M.52 := out_$i336;
    call {:si_unique_call 1441} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i336);
    goto corral_source_split_8953;

  SeqInstr_309:
    goto corral_source_split_8952;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} out_$i336 := edge_startup(out_$p335);
    goto SeqInstr_308;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    out_$p335 := $M.31;
    goto corral_source_split_8951;

  $bb201:
    assume out_$i334 == 1;
    goto corral_source_split_8950;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb201, $bb202;

  corral_source_split_8557:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 2);
    goto corral_source_split_8558;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    out_$i333 := $M.45;
    goto corral_source_split_8557;

  $bb45:
    assume !(out_$i126 == 1);
    goto corral_source_split_8556;

  $bb208:
    assume !(out_$i340 == 1);
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_8963:
    assume {:verifier.code 0} true;
    goto $bb209;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1444} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8963;

  SeqInstr_312:
    goto corral_source_split_8962;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} edge_interrupt_callback(out_$p341);
    goto SeqInstr_311;

  corral_source_split_8960:
    assume {:verifier.code 0} true;
    out_$p341 := $M.29;
    goto corral_source_split_8961;

  $bb207:
    assume out_$i340 == 1;
    goto corral_source_split_8960;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    out_$i340 := $eq.i32(out_$i339, 4);
    goto corral_source_split_8538;

  corral_source_split_8536:
    assume {:verifier.code 0} true;
    out_$i339 := $M.45;
    goto corral_source_split_8537;

  $bb38:
    assume out_$i123 == 1;
    goto corral_source_split_8536;

  $bb37:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    out_$i123 := $slt.i32(out_$i113, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb211:
    assume !(out_$i343 == 1);
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    goto $bb212;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1446} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8968;

  SeqInstr_315:
    goto corral_source_split_8967;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} edge_close(out_$p344);
    goto SeqInstr_314;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    out_$p344 := $M.30;
    goto corral_source_split_8966;

  $bb210:
    assume out_$i343 == 1;
    goto corral_source_split_8965;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb210, $bb211;

  corral_source_split_8541:
    assume {:verifier.code 0} true;
    out_$i343 := $eq.i32(out_$i342, 4);
    goto corral_source_split_8542;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    out_$i342 := $M.45;
    goto corral_source_split_8541;

  $bb40:
    assume out_$i124 == 1;
    goto corral_source_split_8540;

  $bb39:
    assume !(out_$i123 == 1);
    assume {:verifier.code 0} true;
    out_$i124 := $slt.i32(out_$i113, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb223:
    assume !(out_$i358 == 1);
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb224;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1454} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8997;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1453} out_vslice_dummy_var_111 := edge_write_room(out_$p359);
    goto corral_source_split_8996;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    out_$p359 := $M.32;
    goto corral_source_split_8995;

  $bb222:
    assume out_$i358 == 1;
    goto corral_source_split_8994;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb222, $bb223;

  corral_source_split_8991:
    assume {:verifier.code 0} true;
    out_$i358 := $eq.i32(out_$i357, 2);
    goto corral_source_split_8992;

  $bb221:
    assume {:verifier.code 0} true;
    out_$i357 := $M.45;
    goto corral_source_split_8991;

  $bb220:
    assume !(out_$i354 == 1);
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    goto $bb221;

  corral_source_split_8988:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1452} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8989;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1451} out_vslice_dummy_var_110 := edge_write_room(out_$p355);
    goto corral_source_split_8988;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    out_$p355 := $M.32;
    goto corral_source_split_8987;

  $bb219:
    assume out_$i354 == 1;
    goto corral_source_split_8986;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    out_$i354 := $eq.i32(out_$i353, 3);
    goto corral_source_split_8984;

  $bb218:
    assume {:verifier.code 0} true;
    out_$i353 := $M.45;
    goto corral_source_split_8983;

  $bb217:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_8981:
    assume {:verifier.code 0} true;
    goto $bb218;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1450} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8981;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} out_vslice_dummy_var_109 := edge_write_room(out_$p351);
    goto corral_source_split_8980;

  corral_source_split_8978:
    assume {:verifier.code 0} true;
    out_$p351 := $M.32;
    goto corral_source_split_8979;

  $bb216:
    assume out_$i350 == 1;
    goto corral_source_split_8978;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb216, $bb217;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 1);
    goto corral_source_split_8976;

  $bb215:
    assume {:verifier.code 0} true;
    out_$i349 := $M.45;
    goto corral_source_split_8975;

  $bb214:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    goto $bb215;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1448} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_8973;

  corral_source_split_8971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} out_vslice_dummy_var_108 := edge_write_room(out_$p347);
    goto corral_source_split_8972;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    out_$p347 := $M.32;
    goto corral_source_split_8971;

  $bb213:
    assume out_$i346 == 1;
    goto corral_source_split_8970;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    out_$i346 := $eq.i32(out_$i345, 4);
    goto corral_source_split_8546;

  corral_source_split_8544:
    assume {:verifier.code 0} true;
    out_$i345 := $M.45;
    goto corral_source_split_8545;

  $bb41:
    assume !(out_$i124 == 1);
    goto corral_source_split_8544;

  $bb235:
    assume !(out_$i374 == 1);
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    goto $bb236;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1462} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9030;

  SeqInstr_327:
    goto corral_source_split_9029;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} edge_break(out_$p375, out_$i376);
    goto SeqInstr_326;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    out_$i376 := $load.i32($M.28, in_$p1);
    goto corral_source_split_9028;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    out_$p375 := $M.32;
    goto corral_source_split_9027;

  $bb234:
    assume out_$i374 == 1;
    goto corral_source_split_9026;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb234, $bb235;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    out_$i374 := $eq.i32(out_$i373, 2);
    goto corral_source_split_9024;

  $bb233:
    assume {:verifier.code 0} true;
    out_$i373 := $M.45;
    goto corral_source_split_9023;

  $bb232:
    assume !(out_$i370 == 1);
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    goto $bb233;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1460} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9021;

  SeqInstr_324:
    goto corral_source_split_9020;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} edge_break(out_$p371, out_$i372);
    goto SeqInstr_323;

  corral_source_split_9018:
    assume {:verifier.code 0} true;
    out_$i372 := $load.i32($M.28, in_$p1);
    goto corral_source_split_9019;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    out_$p371 := $M.32;
    goto corral_source_split_9018;

  $bb231:
    assume out_$i370 == 1;
    goto corral_source_split_9017;

  corral_source_split_9015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb231, $bb232;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    out_$i370 := $eq.i32(out_$i369, 3);
    goto corral_source_split_9015;

  $bb230:
    assume {:verifier.code 0} true;
    out_$i369 := $M.45;
    goto corral_source_split_9014;

  $bb229:
    assume !(out_$i366 == 1);
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    goto $bb230;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1458} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9012;

  SeqInstr_321:
    goto corral_source_split_9011;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} edge_break(out_$p367, out_$i368);
    goto SeqInstr_320;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    out_$i368 := $load.i32($M.28, in_$p1);
    goto corral_source_split_9010;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    out_$p367 := $M.32;
    goto corral_source_split_9009;

  $bb228:
    assume out_$i366 == 1;
    goto corral_source_split_9008;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb228, $bb229;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    out_$i366 := $eq.i32(out_$i365, 1);
    goto corral_source_split_9006;

  $bb227:
    assume {:verifier.code 0} true;
    out_$i365 := $M.45;
    goto corral_source_split_9005;

  $bb226:
    assume !(out_$i362 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1456} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_9003;

  SeqInstr_318:
    goto corral_source_split_9002;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1455} edge_break(out_$p363, out_$i364);
    goto SeqInstr_317;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    out_$i364 := $load.i32($M.28, in_$p1);
    goto corral_source_split_9001;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    out_$p363 := $M.32;
    goto corral_source_split_9000;

  $bb225:
    assume out_$i362 == 1;
    goto corral_source_split_8999;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    out_$i362 := $eq.i32(out_$i361, 4);
    goto corral_source_split_8526;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    out_$i361 := $M.45;
    goto corral_source_split_8525;

  $bb32:
    assume out_$i120 == 1;
    goto corral_source_split_8524;

  $bb23:
    assume out_$i116 == 1;
    assume {:verifier.code 0} true;
    out_$i120 := $slt.i32(out_$i113, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb22:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$i116 := $slt.i32(out_$i113, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb241:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    goto $bb242;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1466} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} edge_disconnect(out_$p382);
    goto corral_source_split_9042;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    out_$p382 := $M.31;
    goto corral_source_split_9041;

  $bb240:
    assume out_$i381 == 1;
    goto corral_source_split_9040;

  corral_source_split_9038:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb240, $bb241;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    out_$i381 := $eq.i32(out_$i380, 3);
    goto corral_source_split_9038;

  $bb239:
    assume {:verifier.code 0} true;
    out_$i380 := $M.45;
    goto corral_source_split_9037;

  $bb238:
    assume !(out_$i378 == 1);
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_9035:
    assume {:verifier.code 0} true;
    goto $bb239;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1464} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9035;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1463} edge_disconnect(out_$p379);
    goto corral_source_split_9034;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    out_$p379 := $M.31;
    goto corral_source_split_9033;

  $bb237:
    assume out_$i378 == 1;
    goto corral_source_split_9032;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb237, $bb238;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    out_$i378 := $eq.i32(out_$i377, 4);
    goto corral_source_split_8530;

  corral_source_split_8528:
    assume {:verifier.code 0} true;
    out_$i377 := $M.45;
    goto corral_source_split_8529;

  $bb34:
    assume out_$i121 == 1;
    goto corral_source_split_8528;

  $bb33:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    out_$i121 := $slt.i32(out_$i113, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb253:
    assume !(out_$i396 == 1);
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    goto $bb254;

  corral_source_split_9071:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1474} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9072;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1473} out_vslice_dummy_var_115 := edge_chars_in_buffer(out_$p397);
    goto corral_source_split_9071;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    out_$p397 := $M.32;
    goto corral_source_split_9070;

  $bb252:
    assume out_$i396 == 1;
    goto corral_source_split_9069;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb252, $bb253;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    out_$i396 := $eq.i32(out_$i395, 2);
    goto corral_source_split_9067;

  $bb251:
    assume {:verifier.code 0} true;
    out_$i395 := $M.45;
    goto corral_source_split_9066;

  $bb250:
    assume !(out_$i392 == 1);
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    goto $bb251;

  corral_source_split_9063:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1472} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9064;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} out_vslice_dummy_var_114 := edge_chars_in_buffer(out_$p393);
    goto corral_source_split_9063;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    out_$p393 := $M.32;
    goto corral_source_split_9062;

  $bb249:
    assume out_$i392 == 1;
    goto corral_source_split_9061;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb249, $bb250;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    out_$i392 := $eq.i32(out_$i391, 3);
    goto corral_source_split_9059;

  $bb248:
    assume {:verifier.code 0} true;
    out_$i391 := $M.45;
    goto corral_source_split_9058;

  $bb247:
    assume !(out_$i388 == 1);
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    goto $bb248;

  corral_source_split_9055:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1470} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9056;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} out_vslice_dummy_var_113 := edge_chars_in_buffer(out_$p389);
    goto corral_source_split_9055;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    out_$p389 := $M.32;
    goto corral_source_split_9054;

  $bb246:
    assume out_$i388 == 1;
    goto corral_source_split_9053;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb246, $bb247;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    out_$i388 := $eq.i32(out_$i387, 1);
    goto corral_source_split_9051;

  $bb245:
    assume {:verifier.code 0} true;
    out_$i387 := $M.45;
    goto corral_source_split_9050;

  $bb244:
    assume !(out_$i384 == 1);
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    goto $bb245;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1468} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_9048;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} out_vslice_dummy_var_112 := edge_chars_in_buffer(out_$p385);
    goto corral_source_split_9047;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    out_$p385 := $M.32;
    goto corral_source_split_9046;

  $bb243:
    assume out_$i384 == 1;
    goto corral_source_split_9045;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb243, $bb244;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    out_$i384 := $eq.i32(out_$i383, 4);
    goto corral_source_split_8534;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$i383 := $M.45;
    goto corral_source_split_8533;

  $bb35:
    assume !(out_$i121 == 1);
    goto corral_source_split_8532;

  $bb265:
    assume !(out_$i412 == 1);
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    goto $bb266;

  corral_source_split_9100:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1482} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9101;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1481} out_vslice_dummy_var_119 := edge_tiocmget(out_$p413);
    goto corral_source_split_9100;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    out_$p413 := $M.32;
    goto corral_source_split_9099;

  $bb264:
    assume out_$i412 == 1;
    goto corral_source_split_9098;

  corral_source_split_9096:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb264, $bb265;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    out_$i412 := $eq.i32(out_$i411, 2);
    goto corral_source_split_9096;

  $bb263:
    assume {:verifier.code 0} true;
    out_$i411 := $M.45;
    goto corral_source_split_9095;

  $bb262:
    assume !(out_$i408 == 1);
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    goto $bb263;

  corral_source_split_9092:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1480} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9093;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1479} out_vslice_dummy_var_118 := edge_tiocmget(out_$p409);
    goto corral_source_split_9092;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    out_$p409 := $M.32;
    goto corral_source_split_9091;

  $bb261:
    assume out_$i408 == 1;
    goto corral_source_split_9090;

  corral_source_split_9088:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb261, $bb262;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    out_$i408 := $eq.i32(out_$i407, 3);
    goto corral_source_split_9088;

  $bb260:
    assume {:verifier.code 0} true;
    out_$i407 := $M.45;
    goto corral_source_split_9087;

  $bb259:
    assume !(out_$i404 == 1);
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    goto $bb260;

  corral_source_split_9084:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1478} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9085;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1477} out_vslice_dummy_var_117 := edge_tiocmget(out_$p405);
    goto corral_source_split_9084;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    out_$p405 := $M.32;
    goto corral_source_split_9083;

  $bb258:
    assume out_$i404 == 1;
    goto corral_source_split_9082;

  corral_source_split_9080:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb258, $bb259;

  corral_source_split_9079:
    assume {:verifier.code 0} true;
    out_$i404 := $eq.i32(out_$i403, 1);
    goto corral_source_split_9080;

  $bb257:
    assume {:verifier.code 0} true;
    out_$i403 := $M.45;
    goto corral_source_split_9079;

  $bb256:
    assume !(out_$i400 == 1);
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb257;

  corral_source_split_9076:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1476} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_9077;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} out_vslice_dummy_var_116 := edge_tiocmget(out_$p401);
    goto corral_source_split_9076;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    out_$p401 := $M.32;
    goto corral_source_split_9075;

  $bb255:
    assume out_$i400 == 1;
    goto corral_source_split_9074;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb255, $bb256;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    out_$i400 := $eq.i32(out_$i399, 4);
    goto corral_source_split_8514;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    out_$i399 := $M.45;
    goto corral_source_split_8513;

  $bb25:
    assume out_$i117 == 1;
    goto corral_source_split_8512;

  $bb24:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := $slt.i32(out_$i113, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb277:
    assume !(out_$i425 == 1);
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_9130:
    assume {:verifier.code 0} true;
    goto $bb278;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1490} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9130;

  SeqInstr_339:
    goto corral_source_split_9129;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1489} edge_bulk_in_callback(out_$p426);
    goto SeqInstr_338;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    out_$p426 := $M.29;
    goto corral_source_split_9128;

  $bb276:
    assume out_$i425 == 1;
    goto corral_source_split_9127;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb276, $bb277;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    out_$i425 := $eq.i32(out_$i424, 2);
    goto corral_source_split_9125;

  $bb275:
    assume {:verifier.code 0} true;
    out_$i424 := $M.45;
    goto corral_source_split_9124;

  $bb274:
    assume !(out_$i422 == 1);
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    goto $bb275;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $M.45 := 3;
    call {:si_unique_call 1488} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_9122;

  SeqInstr_336:
    goto corral_source_split_9121;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1487} edge_bulk_in_callback(out_$p423);
    goto SeqInstr_335;

  corral_source_split_9119:
    assume {:verifier.code 0} true;
    out_$p423 := $M.29;
    goto corral_source_split_9120;

  $bb273:
    assume out_$i422 == 1;
    goto corral_source_split_9119;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb273, $bb274;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    out_$i422 := $eq.i32(out_$i421, 3);
    goto corral_source_split_9117;

  $bb272:
    assume {:verifier.code 0} true;
    out_$i421 := $M.45;
    goto corral_source_split_9116;

  $bb271:
    assume !(out_$i419 == 1);
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_9114:
    assume {:verifier.code 0} true;
    goto $bb272;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1486} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9114;

  SeqInstr_333:
    goto corral_source_split_9113;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} edge_bulk_in_callback(out_$p420);
    goto SeqInstr_332;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    out_$p420 := $M.29;
    goto corral_source_split_9112;

  $bb270:
    assume out_$i419 == 1;
    goto corral_source_split_9111;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb270, $bb271;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    out_$i419 := $eq.i32(out_$i418, 1);
    goto corral_source_split_9109;

  $bb269:
    assume {:verifier.code 0} true;
    out_$i418 := $M.45;
    goto corral_source_split_9108;

  $bb268:
    assume !(out_$i416 == 1);
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    goto $bb269;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $M.45 := 4;
    call {:si_unique_call 1484} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(4);
    goto corral_source_split_9106;

  SeqInstr_330:
    goto corral_source_split_9105;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1483} edge_bulk_in_callback(out_$p417);
    goto SeqInstr_329;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    out_$p417 := $M.29;
    goto corral_source_split_9104;

  $bb267:
    assume out_$i416 == 1;
    goto corral_source_split_9103;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb267, $bb268;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    out_$i416 := $eq.i32(out_$i415, 4);
    goto corral_source_split_8518;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    out_$i415 := $M.45;
    goto corral_source_split_8517;

  $bb27:
    assume out_$i118 == 1;
    goto corral_source_split_8516;

  $bb26:
    assume !(out_$i117 == 1);
    assume {:verifier.code 0} true;
    out_$i118 := $slt.i32(out_$i113, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb280:
    assume !(out_$i428 == 1);
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_9137:
    assume {:verifier.code 0} true;
    goto $bb281;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    $M.47 := out_$i431;
    call {:si_unique_call 1493} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i431);
    goto corral_source_split_9137;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    out_$i431 := $add.i32(out_$i430, 1);
    goto corral_source_split_9136;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    out_$i430 := $M.47;
    goto corral_source_split_9135;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $M.45 := 2;
    call {:si_unique_call 1492} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_9134;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} out_vslice_dummy_var_120 := ldv_probe_4();
    goto corral_source_split_9133;

  $bb279:
    assume out_$i428 == 1;
    goto corral_source_split_9132;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb279, $bb280;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$i428 := $eq.i32(out_$i427, 1);
    goto corral_source_split_8522;

  corral_source_split_8520:
    assume {:verifier.code 0} true;
    out_$i427 := $M.45;
    goto corral_source_split_8521;

  $bb29:
    assume out_$i119 == 1;
    goto corral_source_split_8520;

  $bb28:
    assume !(out_$i118 == 1);
    assume {:verifier.code 0} true;
    out_$i119 := $eq.i32(out_$i113, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1494} ldv_stop();
    goto corral_source_split_9139;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb282;

  $bb30:
    assume {:verifier.code 0} true;
    assume !(out_$i119 == 1);
    goto $bb31;

  $bb67:
    assume {:verifier.code 0} true;
    assume !(out_$i137 == 1);
    goto $bb31;

  $bb287:
    assume !(out_$i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb350:
    assume {:verifier.code 0} true;
    goto $bb554;

  $bb553:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb551:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb548:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb536:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb524:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb512:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb506:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb494:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb482:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb479:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb476:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb470:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb458:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb446:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb434:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb422:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb419:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb407:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb404:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb362:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb349:
    assume {:verifier.code 0} true;
    goto $bb350;

  $bb348:
    assume !(out_$i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_9262:
    assume {:verifier.code 0} true;
    goto $bb349;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1505} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9262;

  SeqInstr_351:
    goto corral_source_split_9261;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  corral_source_split_9260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} edge_throttle(out_$p470);
    goto SeqInstr_350;

  corral_source_split_9259:
    assume {:verifier.code 0} true;
    out_$p470 := $M.36;
    goto corral_source_split_9260;

  $bb347:
    assume out_$i469 == 1;
    goto corral_source_split_9259;

  corral_source_split_9257:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb347, $bb348;

  corral_source_split_9256:
    assume {:verifier.code 0} true;
    out_$i469 := $eq.i32(out_$i468, 2);
    goto corral_source_split_9257;

  $bb346:
    assume {:verifier.code 0} true;
    out_$i468 := $M.46;
    goto corral_source_split_9256;

  $bb345:
    assume !(out_$i466 == 1);
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_9254:
    assume {:verifier.code 0} true;
    goto $bb346;

  corral_source_split_9253:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1503} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9254;

  SeqInstr_348:
    goto corral_source_split_9253;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  corral_source_split_9252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} edge_throttle(out_$p467);
    goto SeqInstr_347;

  corral_source_split_9251:
    assume {:verifier.code 0} true;
    out_$p467 := $M.36;
    goto corral_source_split_9252;

  $bb344:
    assume out_$i466 == 1;
    goto corral_source_split_9251;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  corral_source_split_9248:
    assume {:verifier.code 0} true;
    out_$i466 := $eq.i32(out_$i465, 3);
    goto corral_source_split_9249;

  $bb343:
    assume {:verifier.code 0} true;
    out_$i465 := $M.46;
    goto corral_source_split_9248;

  $bb342:
    assume !(out_$i463 == 1);
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_9246:
    assume {:verifier.code 0} true;
    goto $bb343;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1501} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9246;

  SeqInstr_345:
    goto corral_source_split_9245;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} edge_throttle(out_$p464);
    goto SeqInstr_344;

  corral_source_split_9243:
    assume {:verifier.code 0} true;
    out_$p464 := $M.36;
    goto corral_source_split_9244;

  $bb341:
    assume out_$i463 == 1;
    goto corral_source_split_9243;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_9240:
    assume {:verifier.code 0} true;
    out_$i463 := $eq.i32(out_$i462, 1);
    goto corral_source_split_9241;

  $bb340:
    assume {:verifier.code 0} true;
    out_$i462 := $M.46;
    goto corral_source_split_9240;

  $bb339:
    assume !(out_$i460 == 1);
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_9238:
    assume {:verifier.code 0} true;
    goto $bb340;

  corral_source_split_9237:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1499} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9238;

  SeqInstr_342:
    goto corral_source_split_9237;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} edge_throttle(out_$p461);
    goto SeqInstr_341;

  corral_source_split_9235:
    assume {:verifier.code 0} true;
    out_$p461 := $M.36;
    goto corral_source_split_9236;

  $bb338:
    assume out_$i460 == 1;
    goto corral_source_split_9235;

  corral_source_split_9233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb338, $bb339;

  corral_source_split_9232:
    assume {:verifier.code 0} true;
    out_$i460 := $eq.i32(out_$i459, 4);
    goto corral_source_split_9233;

  corral_source_split_9231:
    assume {:verifier.code 0} true;
    out_$i459 := $M.46;
    goto corral_source_split_9232;

  $bb336:
    assume out_$i458 == 1;
    goto corral_source_split_9231;

  $bb334:
    assume out_$i457 == 1;
    assume {:verifier.code 0} true;
    out_$i458 := $eq.i32(out_$i434, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb336, $bb337;

  $bb328:
    assume out_$i454 == 1;
    assume {:verifier.code 0} true;
    out_$i457 := $slt.i32(out_$i434, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb334, $bb335;

  $bb316:
    assume out_$i448 == 1;
    assume {:verifier.code 0} true;
    out_$i454 := $slt.i32(out_$i434, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb328, $bb329;

  $bb289:
    assume out_$i435 == 1;
    assume {:verifier.code 0} true;
    out_$i448 := $slt.i32(out_$i434, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb316, $bb317;

  $bb288:
    assume {:verifier.code 0} true;
    out_$i435 := $slt.i32(out_$i434, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb289, $bb290;

  corral_source_split_9141:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1495} out_$i434 := __VERIFIER_nondet_int();
    call {:si_unique_call 1496} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i434);
    call {:si_unique_call 1497} {:cexpr "tmp___13"} boogie_si_record_i32(out_$i434);
    assume {:verifier.code 0} true;
    goto $bb288;

  $bb286:
    assume out_$i433 == 1;
    goto corral_source_split_9141;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb286, $bb287;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$i433 := $ne.i32(out_$i432, 0);
    goto corral_source_split_8504;

  corral_source_split_8502:
    assume {:verifier.code 0} true;
    out_$i432 := $M.46;
    goto corral_source_split_8503;

  $bb13:
    assume !(out_$i109 == 1);
    goto corral_source_split_8502;

  $bb361:
    assume !(out_$i484 == 1);
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_9291:
    assume {:verifier.code 0} true;
    goto $bb362;

  corral_source_split_9290:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1513} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9291;

  corral_source_split_9289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} out_vslice_dummy_var_124 := usb_serial_generic_get_icount(out_$p485, in_$p37);
    goto corral_source_split_9290;

  corral_source_split_9288:
    assume {:verifier.code 0} true;
    out_$p485 := $M.36;
    goto corral_source_split_9289;

  $bb360:
    assume out_$i484 == 1;
    goto corral_source_split_9288;

  corral_source_split_9286:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb360, $bb361;

  corral_source_split_9285:
    assume {:verifier.code 0} true;
    out_$i484 := $eq.i32(out_$i483, 2);
    goto corral_source_split_9286;

  $bb359:
    assume {:verifier.code 0} true;
    out_$i483 := $M.46;
    goto corral_source_split_9285;

  $bb358:
    assume !(out_$i480 == 1);
    assume {:verifier.code 0} true;
    goto $bb359;

  corral_source_split_9283:
    assume {:verifier.code 0} true;
    goto $bb359;

  corral_source_split_9282:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1511} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9283;

  corral_source_split_9281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} out_vslice_dummy_var_123 := usb_serial_generic_get_icount(out_$p481, in_$p37);
    goto corral_source_split_9282;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    out_$p481 := $M.36;
    goto corral_source_split_9281;

  $bb357:
    assume out_$i480 == 1;
    goto corral_source_split_9280;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb357, $bb358;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    out_$i480 := $eq.i32(out_$i479, 3);
    goto corral_source_split_9278;

  $bb356:
    assume {:verifier.code 0} true;
    out_$i479 := $M.46;
    goto corral_source_split_9277;

  $bb355:
    assume !(out_$i476 == 1);
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    goto $bb356;

  corral_source_split_9274:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1509} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9275;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} out_vslice_dummy_var_122 := usb_serial_generic_get_icount(out_$p477, in_$p37);
    goto corral_source_split_9274;

  corral_source_split_9272:
    assume {:verifier.code 0} true;
    out_$p477 := $M.36;
    goto corral_source_split_9273;

  $bb354:
    assume out_$i476 == 1;
    goto corral_source_split_9272;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb354, $bb355;

  corral_source_split_9269:
    assume {:verifier.code 0} true;
    out_$i476 := $eq.i32(out_$i475, 1);
    goto corral_source_split_9270;

  $bb353:
    assume {:verifier.code 0} true;
    out_$i475 := $M.46;
    goto corral_source_split_9269;

  $bb352:
    assume !(out_$i472 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    goto $bb353;

  corral_source_split_9266:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1507} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9267;

  corral_source_split_9265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1506} out_vslice_dummy_var_121 := usb_serial_generic_get_icount(out_$p473, in_$p37);
    goto corral_source_split_9266;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    out_$p473 := $M.36;
    goto corral_source_split_9265;

  $bb351:
    assume out_$i472 == 1;
    goto corral_source_split_9264;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb351, $bb352;

  corral_source_split_9228:
    assume {:verifier.code 0} true;
    out_$i472 := $eq.i32(out_$i471, 4);
    goto corral_source_split_9229;

  corral_source_split_9227:
    assume {:verifier.code 0} true;
    out_$i471 := $M.46;
    goto corral_source_split_9228;

  $bb335:
    assume !(out_$i457 == 1);
    goto corral_source_split_9227;

  $bb373:
    assume !(out_$i500 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  corral_source_split_9320:
    assume {:verifier.code 0} true;
    goto $bb374;

  corral_source_split_9319:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1521} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9320;

  SeqInstr_363:
    goto corral_source_split_9319;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  corral_source_split_9318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} out_vslice_dummy_var_128 := edge_port_probe(out_$p501);
    goto SeqInstr_362;

  corral_source_split_9317:
    assume {:verifier.code 0} true;
    out_$p501 := $M.34;
    goto corral_source_split_9318;

  $bb372:
    assume out_$i500 == 1;
    goto corral_source_split_9317;

  corral_source_split_9315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  corral_source_split_9314:
    assume {:verifier.code 0} true;
    out_$i500 := $eq.i32(out_$i499, 2);
    goto corral_source_split_9315;

  $bb371:
    assume {:verifier.code 0} true;
    out_$i499 := $M.46;
    goto corral_source_split_9314;

  $bb370:
    assume !(out_$i496 == 1);
    assume {:verifier.code 0} true;
    goto $bb371;

  corral_source_split_9312:
    assume {:verifier.code 0} true;
    goto $bb371;

  corral_source_split_9311:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1519} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9312;

  SeqInstr_360:
    goto corral_source_split_9311;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  corral_source_split_9310:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} out_vslice_dummy_var_127 := edge_port_probe(out_$p497);
    goto SeqInstr_359;

  corral_source_split_9309:
    assume {:verifier.code 0} true;
    out_$p497 := $M.34;
    goto corral_source_split_9310;

  $bb369:
    assume out_$i496 == 1;
    goto corral_source_split_9309;

  corral_source_split_9307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb369, $bb370;

  corral_source_split_9306:
    assume {:verifier.code 0} true;
    out_$i496 := $eq.i32(out_$i495, 3);
    goto corral_source_split_9307;

  $bb368:
    assume {:verifier.code 0} true;
    out_$i495 := $M.46;
    goto corral_source_split_9306;

  $bb367:
    assume !(out_$i492 == 1);
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_9304:
    assume {:verifier.code 0} true;
    goto $bb368;

  corral_source_split_9303:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1517} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9304;

  SeqInstr_357:
    goto corral_source_split_9303;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  corral_source_split_9302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} out_vslice_dummy_var_126 := edge_port_probe(out_$p493);
    goto SeqInstr_356;

  corral_source_split_9301:
    assume {:verifier.code 0} true;
    out_$p493 := $M.34;
    goto corral_source_split_9302;

  $bb366:
    assume out_$i492 == 1;
    goto corral_source_split_9301;

  corral_source_split_9299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb366, $bb367;

  corral_source_split_9298:
    assume {:verifier.code 0} true;
    out_$i492 := $eq.i32(out_$i491, 1);
    goto corral_source_split_9299;

  $bb365:
    assume {:verifier.code 0} true;
    out_$i491 := $M.46;
    goto corral_source_split_9298;

  $bb364:
    assume !(out_$i488 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_9296:
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_9295:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1515} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9296;

  SeqInstr_354:
    goto corral_source_split_9295;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  corral_source_split_9294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} out_vslice_dummy_var_125 := edge_port_probe(out_$p489);
    goto SeqInstr_353;

  corral_source_split_9293:
    assume {:verifier.code 0} true;
    out_$p489 := $M.34;
    goto corral_source_split_9294;

  $bb363:
    assume out_$i488 == 1;
    goto corral_source_split_9293;

  corral_source_split_9217:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    out_$i488 := $eq.i32(out_$i487, 4);
    goto corral_source_split_9217;

  corral_source_split_9215:
    assume {:verifier.code 0} true;
    out_$i487 := $M.46;
    goto corral_source_split_9216;

  $bb330:
    assume out_$i455 == 1;
    goto corral_source_split_9215;

  $bb329:
    assume !(out_$i454 == 1);
    assume {:verifier.code 0} true;
    out_$i455 := $slt.i32(out_$i434, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb330, $bb331;

  $bb376:
    assume !(out_$i504 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb379:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb378:
    assume !(out_$i509 == 1);
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_9331:
    assume {:verifier.code 0} true;
    goto $bb379;

  corral_source_split_9330:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1524} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9331;

  $bb377:
    assume out_$i509 == 1;
    goto corral_source_split_9330;

  corral_source_split_9328:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb377, $bb378;

  corral_source_split_9327:
    assume {:verifier.code 0} true;
    out_$i509 := $eq.i32(out_$i508, 0);
    goto corral_source_split_9328;

  corral_source_split_9326:
    assume {:verifier.code 0} true;
    out_$i508 := $M.53;
    goto corral_source_split_9327;

  corral_source_split_9325:
    assume {:verifier.code 0} true;
    $M.53 := out_$i507;
    call {:si_unique_call 1523} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i507);
    goto corral_source_split_9326;

  SeqInstr_366:
    goto corral_source_split_9325;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  corral_source_split_9324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} out_$i507 := edge_open(out_$p505, out_$p506);
    goto SeqInstr_365;

  corral_source_split_9323:
    assume {:verifier.code 0} true;
    out_$p506 := $M.34;
    goto corral_source_split_9324;

  corral_source_split_9322:
    assume {:verifier.code 0} true;
    out_$p505 := $M.36;
    goto corral_source_split_9323;

  $bb375:
    assume out_$i504 == 1;
    goto corral_source_split_9322;

  corral_source_split_9221:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb375, $bb376;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    out_$i504 := $eq.i32(out_$i503, 3);
    goto corral_source_split_9221;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    out_$i503 := $M.46;
    goto corral_source_split_9220;

  $bb332:
    assume out_$i456 == 1;
    goto corral_source_split_9219;

  $bb331:
    assume !(out_$i455 == 1);
    assume {:verifier.code 0} true;
    out_$i456 := $slt.i32(out_$i434, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb391:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb392;

  corral_source_split_9360:
    assume {:verifier.code 0} true;
    goto $bb392;

  corral_source_split_9359:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1532} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9360;

  SeqInstr_378:
    goto corral_source_split_9359;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_9358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} edge_unthrottle(out_$p521);
    goto SeqInstr_377;

  corral_source_split_9357:
    assume {:verifier.code 0} true;
    out_$p521 := $M.36;
    goto corral_source_split_9358;

  $bb390:
    assume out_$i520 == 1;
    goto corral_source_split_9357;

  corral_source_split_9355:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb390, $bb391;

  corral_source_split_9354:
    assume {:verifier.code 0} true;
    out_$i520 := $eq.i32(out_$i519, 2);
    goto corral_source_split_9355;

  $bb389:
    assume {:verifier.code 0} true;
    out_$i519 := $M.46;
    goto corral_source_split_9354;

  $bb388:
    assume !(out_$i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_9352:
    assume {:verifier.code 0} true;
    goto $bb389;

  corral_source_split_9351:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1530} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9352;

  SeqInstr_375:
    goto corral_source_split_9351;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  corral_source_split_9350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} edge_unthrottle(out_$p518);
    goto SeqInstr_374;

  corral_source_split_9349:
    assume {:verifier.code 0} true;
    out_$p518 := $M.36;
    goto corral_source_split_9350;

  $bb387:
    assume out_$i517 == 1;
    goto corral_source_split_9349;

  corral_source_split_9347:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb387, $bb388;

  corral_source_split_9346:
    assume {:verifier.code 0} true;
    out_$i517 := $eq.i32(out_$i516, 3);
    goto corral_source_split_9347;

  $bb386:
    assume {:verifier.code 0} true;
    out_$i516 := $M.46;
    goto corral_source_split_9346;

  $bb385:
    assume !(out_$i514 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_9344:
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_9343:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1528} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9344;

  SeqInstr_372:
    goto corral_source_split_9343;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  corral_source_split_9342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} edge_unthrottle(out_$p515);
    goto SeqInstr_371;

  corral_source_split_9341:
    assume {:verifier.code 0} true;
    out_$p515 := $M.36;
    goto corral_source_split_9342;

  $bb384:
    assume out_$i514 == 1;
    goto corral_source_split_9341;

  corral_source_split_9339:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_9338:
    assume {:verifier.code 0} true;
    out_$i514 := $eq.i32(out_$i513, 1);
    goto corral_source_split_9339;

  $bb383:
    assume {:verifier.code 0} true;
    out_$i513 := $M.46;
    goto corral_source_split_9338;

  $bb382:
    assume !(out_$i511 == 1);
    assume {:verifier.code 0} true;
    goto $bb383;

  corral_source_split_9336:
    assume {:verifier.code 0} true;
    goto $bb383;

  corral_source_split_9335:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1526} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9336;

  SeqInstr_369:
    goto corral_source_split_9335;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  corral_source_split_9334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} edge_unthrottle(out_$p512);
    goto SeqInstr_368;

  corral_source_split_9333:
    assume {:verifier.code 0} true;
    out_$p512 := $M.36;
    goto corral_source_split_9334;

  $bb381:
    assume out_$i511 == 1;
    goto corral_source_split_9333;

  corral_source_split_9225:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb381, $bb382;

  corral_source_split_9224:
    assume {:verifier.code 0} true;
    out_$i511 := $eq.i32(out_$i510, 4);
    goto corral_source_split_9225;

  corral_source_split_9223:
    assume {:verifier.code 0} true;
    out_$i510 := $M.46;
    goto corral_source_split_9224;

  $bb333:
    assume !(out_$i456 == 1);
    goto corral_source_split_9223;

  $bb403:
    assume !(out_$i535 == 1);
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_9393:
    assume {:verifier.code 0} true;
    goto $bb404;

  corral_source_split_9392:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1540} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9393;

  SeqInstr_390:
    goto corral_source_split_9392;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  corral_source_split_9391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1539} edge_set_termios(out_$p536, out_$p537, in_$p34);
    goto SeqInstr_389;

  corral_source_split_9390:
    assume {:verifier.code 0} true;
    out_$p537 := $M.34;
    goto corral_source_split_9391;

  corral_source_split_9389:
    assume {:verifier.code 0} true;
    out_$p536 := $M.36;
    goto corral_source_split_9390;

  $bb402:
    assume out_$i535 == 1;
    goto corral_source_split_9389;

  corral_source_split_9387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb402, $bb403;

  corral_source_split_9386:
    assume {:verifier.code 0} true;
    out_$i535 := $eq.i32(out_$i534, 2);
    goto corral_source_split_9387;

  $bb401:
    assume {:verifier.code 0} true;
    out_$i534 := $M.46;
    goto corral_source_split_9386;

  $bb400:
    assume !(out_$i531 == 1);
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_9384:
    assume {:verifier.code 0} true;
    goto $bb401;

  corral_source_split_9383:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1538} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9384;

  SeqInstr_387:
    goto corral_source_split_9383;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  corral_source_split_9382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} edge_set_termios(out_$p532, out_$p533, in_$p34);
    goto SeqInstr_386;

  corral_source_split_9381:
    assume {:verifier.code 0} true;
    out_$p533 := $M.34;
    goto corral_source_split_9382;

  corral_source_split_9380:
    assume {:verifier.code 0} true;
    out_$p532 := $M.36;
    goto corral_source_split_9381;

  $bb399:
    assume out_$i531 == 1;
    goto corral_source_split_9380;

  corral_source_split_9378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb399, $bb400;

  corral_source_split_9377:
    assume {:verifier.code 0} true;
    out_$i531 := $eq.i32(out_$i530, 3);
    goto corral_source_split_9378;

  $bb398:
    assume {:verifier.code 0} true;
    out_$i530 := $M.46;
    goto corral_source_split_9377;

  $bb397:
    assume !(out_$i527 == 1);
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_9375:
    assume {:verifier.code 0} true;
    goto $bb398;

  corral_source_split_9374:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1536} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9375;

  SeqInstr_384:
    goto corral_source_split_9374;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  corral_source_split_9373:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} edge_set_termios(out_$p528, out_$p529, in_$p34);
    goto SeqInstr_383;

  corral_source_split_9372:
    assume {:verifier.code 0} true;
    out_$p529 := $M.34;
    goto corral_source_split_9373;

  corral_source_split_9371:
    assume {:verifier.code 0} true;
    out_$p528 := $M.36;
    goto corral_source_split_9372;

  $bb396:
    assume out_$i527 == 1;
    goto corral_source_split_9371;

  corral_source_split_9369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb396, $bb397;

  corral_source_split_9368:
    assume {:verifier.code 0} true;
    out_$i527 := $eq.i32(out_$i526, 1);
    goto corral_source_split_9369;

  $bb395:
    assume {:verifier.code 0} true;
    out_$i526 := $M.46;
    goto corral_source_split_9368;

  $bb394:
    assume !(out_$i523 == 1);
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_9366:
    assume {:verifier.code 0} true;
    goto $bb395;

  corral_source_split_9365:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1534} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9366;

  SeqInstr_381:
    goto corral_source_split_9365;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  corral_source_split_9364:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} edge_set_termios(out_$p524, out_$p525, in_$p34);
    goto SeqInstr_380;

  corral_source_split_9363:
    assume {:verifier.code 0} true;
    out_$p525 := $M.34;
    goto corral_source_split_9364;

  corral_source_split_9362:
    assume {:verifier.code 0} true;
    out_$p524 := $M.36;
    goto corral_source_split_9363;

  $bb393:
    assume out_$i523 == 1;
    goto corral_source_split_9362;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb393, $bb394;

  corral_source_split_9204:
    assume {:verifier.code 0} true;
    out_$i523 := $eq.i32(out_$i522, 4);
    goto corral_source_split_9205;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    out_$i522 := $M.46;
    goto corral_source_split_9204;

  $bb324:
    assume out_$i452 == 1;
    goto corral_source_split_9203;

  $bb318:
    assume out_$i449 == 1;
    assume {:verifier.code 0} true;
    out_$i452 := $slt.i32(out_$i434, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb324, $bb325;

  $bb317:
    assume !(out_$i448 == 1);
    assume {:verifier.code 0} true;
    out_$i449 := $slt.i32(out_$i434, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb318, $bb319;

  $bb406:
    assume !(out_$i539 == 1);
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_9398:
    assume {:verifier.code 0} true;
    goto $bb407;

  corral_source_split_9397:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1542} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9398;

  SeqInstr_393:
    goto corral_source_split_9397;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  corral_source_split_9396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1541} edge_bulk_out_data_callback(out_$p540);
    goto SeqInstr_392;

  corral_source_split_9395:
    assume {:verifier.code 0} true;
    out_$p540 := $M.33;
    goto corral_source_split_9396;

  $bb405:
    assume out_$i539 == 1;
    goto corral_source_split_9395;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb405, $bb406;

  corral_source_split_9208:
    assume {:verifier.code 0} true;
    out_$i539 := $eq.i32(out_$i538, 4);
    goto corral_source_split_9209;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    out_$i538 := $M.46;
    goto corral_source_split_9208;

  $bb326:
    assume out_$i453 == 1;
    goto corral_source_split_9207;

  $bb325:
    assume !(out_$i452 == 1);
    assume {:verifier.code 0} true;
    out_$i453 := $slt.i32(out_$i434, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb418:
    assume !(out_$i554 == 1);
    assume {:verifier.code 0} true;
    goto $bb419;

  corral_source_split_9427:
    assume {:verifier.code 0} true;
    goto $bb419;

  corral_source_split_9426:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1550} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9427;

  corral_source_split_9425:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1549} out_vslice_dummy_var_132 := edge_port_remove(out_$p555);
    goto corral_source_split_9426;

  corral_source_split_9424:
    assume {:verifier.code 0} true;
    out_$p555 := $M.34;
    goto corral_source_split_9425;

  $bb417:
    assume out_$i554 == 1;
    goto corral_source_split_9424;

  corral_source_split_9422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb417, $bb418;

  corral_source_split_9421:
    assume {:verifier.code 0} true;
    out_$i554 := $eq.i32(out_$i553, 2);
    goto corral_source_split_9422;

  $bb416:
    assume {:verifier.code 0} true;
    out_$i553 := $M.46;
    goto corral_source_split_9421;

  $bb415:
    assume !(out_$i550 == 1);
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_9419:
    assume {:verifier.code 0} true;
    goto $bb416;

  corral_source_split_9418:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1548} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9419;

  corral_source_split_9417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1547} out_vslice_dummy_var_131 := edge_port_remove(out_$p551);
    goto corral_source_split_9418;

  corral_source_split_9416:
    assume {:verifier.code 0} true;
    out_$p551 := $M.34;
    goto corral_source_split_9417;

  $bb414:
    assume out_$i550 == 1;
    goto corral_source_split_9416;

  corral_source_split_9414:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb414, $bb415;

  corral_source_split_9413:
    assume {:verifier.code 0} true;
    out_$i550 := $eq.i32(out_$i549, 3);
    goto corral_source_split_9414;

  $bb413:
    assume {:verifier.code 0} true;
    out_$i549 := $M.46;
    goto corral_source_split_9413;

  $bb412:
    assume !(out_$i546 == 1);
    assume {:verifier.code 0} true;
    goto $bb413;

  corral_source_split_9411:
    assume {:verifier.code 0} true;
    goto $bb413;

  corral_source_split_9410:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1546} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9411;

  corral_source_split_9409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1545} out_vslice_dummy_var_130 := edge_port_remove(out_$p547);
    goto corral_source_split_9410;

  corral_source_split_9408:
    assume {:verifier.code 0} true;
    out_$p547 := $M.34;
    goto corral_source_split_9409;

  $bb411:
    assume out_$i546 == 1;
    goto corral_source_split_9408;

  corral_source_split_9406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb411, $bb412;

  corral_source_split_9405:
    assume {:verifier.code 0} true;
    out_$i546 := $eq.i32(out_$i545, 1);
    goto corral_source_split_9406;

  $bb410:
    assume {:verifier.code 0} true;
    out_$i545 := $M.46;
    goto corral_source_split_9405;

  $bb409:
    assume !(out_$i542 == 1);
    assume {:verifier.code 0} true;
    goto $bb410;

  corral_source_split_9403:
    assume {:verifier.code 0} true;
    goto $bb410;

  corral_source_split_9402:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9403;

  corral_source_split_9401:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1543} out_vslice_dummy_var_129 := edge_port_remove(out_$p543);
    goto corral_source_split_9402;

  corral_source_split_9400:
    assume {:verifier.code 0} true;
    out_$p543 := $M.34;
    goto corral_source_split_9401;

  $bb408:
    assume out_$i542 == 1;
    goto corral_source_split_9400;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb408, $bb409;

  corral_source_split_9212:
    assume {:verifier.code 0} true;
    out_$i542 := $eq.i32(out_$i541, 4);
    goto corral_source_split_9213;

  corral_source_split_9211:
    assume {:verifier.code 0} true;
    out_$i541 := $M.46;
    goto corral_source_split_9212;

  $bb327:
    assume !(out_$i453 == 1);
    goto corral_source_split_9211;

  $bb421:
    assume !(out_$i558 == 1);
    assume {:verifier.code 0} true;
    goto $bb422;

  corral_source_split_9435:
    assume {:verifier.code 0} true;
    goto $bb422;

  corral_source_split_9434:
    assume {:verifier.code 0} true;
    $M.47 := out_$i561;
    call {:si_unique_call 1553} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i561);
    goto corral_source_split_9435;

  corral_source_split_9433:
    assume {:verifier.code 0} true;
    out_$i561 := $sub.i32(out_$i560, 1);
    goto corral_source_split_9434;

  corral_source_split_9432:
    assume {:verifier.code 0} true;
    out_$i560 := $M.47;
    goto corral_source_split_9433;

  corral_source_split_9431:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1552} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9432;

  corral_source_split_9430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1551} edge_release(out_$p559);
    goto corral_source_split_9431;

  corral_source_split_9429:
    assume {:verifier.code 0} true;
    out_$p559 := $M.35;
    goto corral_source_split_9430;

  $bb420:
    assume out_$i558 == 1;
    goto corral_source_split_9429;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb420, $bb421;

  corral_source_split_9192:
    assume {:verifier.code 0} true;
    out_$i558 := $eq.i32(out_$i557, 2);
    goto corral_source_split_9193;

  corral_source_split_9191:
    assume {:verifier.code 0} true;
    out_$i557 := $M.46;
    goto corral_source_split_9192;

  $bb320:
    assume out_$i450 == 1;
    goto corral_source_split_9191;

  $bb319:
    assume !(out_$i449 == 1);
    assume {:verifier.code 0} true;
    out_$i450 := $slt.i32(out_$i434, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb433:
    assume !(out_$i581 == 1);
    assume {:verifier.code 0} true;
    goto $bb434;

  corral_source_split_9472:
    assume {:verifier.code 0} true;
    goto $bb434;

  corral_source_split_9471:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9472;

  corral_source_split_9470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} out_vslice_dummy_var_136 := edge_ioctl(out_$p582, out_$i583, out_$i584);
    goto corral_source_split_9471;

  corral_source_split_9469:
    assume {:verifier.code 0} true;
    out_$i584 := $load.i64($M.28, in_$p9);
    goto corral_source_split_9470;

  corral_source_split_9468:
    assume {:verifier.code 0} true;
    out_$i583 := $load.i32($M.28, in_$p12);
    goto corral_source_split_9469;

  corral_source_split_9467:
    assume {:verifier.code 0} true;
    out_$p582 := $M.36;
    goto corral_source_split_9468;

  $bb432:
    assume out_$i581 == 1;
    goto corral_source_split_9467;

  corral_source_split_9465:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb432, $bb433;

  corral_source_split_9464:
    assume {:verifier.code 0} true;
    out_$i581 := $eq.i32(out_$i580, 2);
    goto corral_source_split_9465;

  $bb431:
    assume {:verifier.code 0} true;
    out_$i580 := $M.46;
    goto corral_source_split_9464;

  $bb430:
    assume !(out_$i575 == 1);
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_9462:
    assume {:verifier.code 0} true;
    goto $bb431;

  corral_source_split_9461:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9462;

  corral_source_split_9460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} out_vslice_dummy_var_135 := edge_ioctl(out_$p576, out_$i577, out_$i578);
    goto corral_source_split_9461;

  corral_source_split_9459:
    assume {:verifier.code 0} true;
    out_$i578 := $load.i64($M.28, in_$p9);
    goto corral_source_split_9460;

  corral_source_split_9458:
    assume {:verifier.code 0} true;
    out_$i577 := $load.i32($M.28, in_$p12);
    goto corral_source_split_9459;

  corral_source_split_9457:
    assume {:verifier.code 0} true;
    out_$p576 := $M.36;
    goto corral_source_split_9458;

  $bb429:
    assume out_$i575 == 1;
    goto corral_source_split_9457;

  corral_source_split_9455:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb429, $bb430;

  corral_source_split_9454:
    assume {:verifier.code 0} true;
    out_$i575 := $eq.i32(out_$i574, 3);
    goto corral_source_split_9455;

  $bb428:
    assume {:verifier.code 0} true;
    out_$i574 := $M.46;
    goto corral_source_split_9454;

  $bb427:
    assume !(out_$i569 == 1);
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_9452:
    assume {:verifier.code 0} true;
    goto $bb428;

  corral_source_split_9451:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9452;

  corral_source_split_9450:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} out_vslice_dummy_var_134 := edge_ioctl(out_$p570, out_$i571, out_$i572);
    goto corral_source_split_9451;

  corral_source_split_9449:
    assume {:verifier.code 0} true;
    out_$i572 := $load.i64($M.28, in_$p9);
    goto corral_source_split_9450;

  corral_source_split_9448:
    assume {:verifier.code 0} true;
    out_$i571 := $load.i32($M.28, in_$p12);
    goto corral_source_split_9449;

  corral_source_split_9447:
    assume {:verifier.code 0} true;
    out_$p570 := $M.36;
    goto corral_source_split_9448;

  $bb426:
    assume out_$i569 == 1;
    goto corral_source_split_9447;

  corral_source_split_9445:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb426, $bb427;

  corral_source_split_9444:
    assume {:verifier.code 0} true;
    out_$i569 := $eq.i32(out_$i568, 1);
    goto corral_source_split_9445;

  $bb425:
    assume {:verifier.code 0} true;
    out_$i568 := $M.46;
    goto corral_source_split_9444;

  $bb424:
    assume !(out_$i563 == 1);
    assume {:verifier.code 0} true;
    goto $bb425;

  corral_source_split_9442:
    assume {:verifier.code 0} true;
    goto $bb425;

  corral_source_split_9441:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1555} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9442;

  corral_source_split_9440:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1554} out_vslice_dummy_var_133 := edge_ioctl(out_$p564, out_$i565, out_$i566);
    goto corral_source_split_9441;

  corral_source_split_9439:
    assume {:verifier.code 0} true;
    out_$i566 := $load.i64($M.28, in_$p9);
    goto corral_source_split_9440;

  corral_source_split_9438:
    assume {:verifier.code 0} true;
    out_$i565 := $load.i32($M.28, in_$p12);
    goto corral_source_split_9439;

  corral_source_split_9437:
    assume {:verifier.code 0} true;
    out_$p564 := $M.36;
    goto corral_source_split_9438;

  $bb423:
    assume out_$i563 == 1;
    goto corral_source_split_9437;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb423, $bb424;

  corral_source_split_9196:
    assume {:verifier.code 0} true;
    out_$i563 := $eq.i32(out_$i562, 4);
    goto corral_source_split_9197;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    out_$i562 := $M.46;
    goto corral_source_split_9196;

  $bb322:
    assume out_$i451 == 1;
    goto corral_source_split_9195;

  $bb321:
    assume !(out_$i450 == 1);
    assume {:verifier.code 0} true;
    out_$i451 := $slt.i32(out_$i434, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb322, $bb323;

  $bb445:
    assume !(out_$i605 == 1);
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_9509:
    assume {:verifier.code 0} true;
    goto $bb446;

  corral_source_split_9508:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9509;

  SeqInstr_405:
    goto corral_source_split_9508;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  corral_source_split_9507:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} out_vslice_dummy_var_140 := edge_tiocmset(out_$p606, out_$i607, out_$i608);
    goto SeqInstr_404;

  corral_source_split_9506:
    assume {:verifier.code 0} true;
    out_$i608 := $load.i32($M.28, in_$p11);
    goto corral_source_split_9507;

  corral_source_split_9505:
    assume {:verifier.code 0} true;
    out_$i607 := $load.i32($M.28, in_$p10);
    goto corral_source_split_9506;

  corral_source_split_9504:
    assume {:verifier.code 0} true;
    out_$p606 := $M.36;
    goto corral_source_split_9505;

  $bb444:
    assume out_$i605 == 1;
    goto corral_source_split_9504;

  corral_source_split_9502:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb444, $bb445;

  corral_source_split_9501:
    assume {:verifier.code 0} true;
    out_$i605 := $eq.i32(out_$i604, 2);
    goto corral_source_split_9502;

  $bb443:
    assume {:verifier.code 0} true;
    out_$i604 := $M.46;
    goto corral_source_split_9501;

  $bb442:
    assume !(out_$i599 == 1);
    assume {:verifier.code 0} true;
    goto $bb443;

  corral_source_split_9499:
    assume {:verifier.code 0} true;
    goto $bb443;

  corral_source_split_9498:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9499;

  SeqInstr_402:
    goto corral_source_split_9498;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  corral_source_split_9497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} out_vslice_dummy_var_139 := edge_tiocmset(out_$p600, out_$i601, out_$i602);
    goto SeqInstr_401;

  corral_source_split_9496:
    assume {:verifier.code 0} true;
    out_$i602 := $load.i32($M.28, in_$p11);
    goto corral_source_split_9497;

  corral_source_split_9495:
    assume {:verifier.code 0} true;
    out_$i601 := $load.i32($M.28, in_$p10);
    goto corral_source_split_9496;

  corral_source_split_9494:
    assume {:verifier.code 0} true;
    out_$p600 := $M.36;
    goto corral_source_split_9495;

  $bb441:
    assume out_$i599 == 1;
    goto corral_source_split_9494;

  corral_source_split_9492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb441, $bb442;

  corral_source_split_9491:
    assume {:verifier.code 0} true;
    out_$i599 := $eq.i32(out_$i598, 3);
    goto corral_source_split_9492;

  $bb440:
    assume {:verifier.code 0} true;
    out_$i598 := $M.46;
    goto corral_source_split_9491;

  $bb439:
    assume !(out_$i593 == 1);
    assume {:verifier.code 0} true;
    goto $bb440;

  corral_source_split_9489:
    assume {:verifier.code 0} true;
    goto $bb440;

  corral_source_split_9488:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9489;

  SeqInstr_399:
    goto corral_source_split_9488;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  corral_source_split_9487:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} out_vslice_dummy_var_138 := edge_tiocmset(out_$p594, out_$i595, out_$i596);
    goto SeqInstr_398;

  corral_source_split_9486:
    assume {:verifier.code 0} true;
    out_$i596 := $load.i32($M.28, in_$p11);
    goto corral_source_split_9487;

  corral_source_split_9485:
    assume {:verifier.code 0} true;
    out_$i595 := $load.i32($M.28, in_$p10);
    goto corral_source_split_9486;

  corral_source_split_9484:
    assume {:verifier.code 0} true;
    out_$p594 := $M.36;
    goto corral_source_split_9485;

  $bb438:
    assume out_$i593 == 1;
    goto corral_source_split_9484;

  corral_source_split_9482:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb438, $bb439;

  corral_source_split_9481:
    assume {:verifier.code 0} true;
    out_$i593 := $eq.i32(out_$i592, 1);
    goto corral_source_split_9482;

  $bb437:
    assume {:verifier.code 0} true;
    out_$i592 := $M.46;
    goto corral_source_split_9481;

  $bb436:
    assume !(out_$i587 == 1);
    assume {:verifier.code 0} true;
    goto $bb437;

  corral_source_split_9479:
    assume {:verifier.code 0} true;
    goto $bb437;

  corral_source_split_9478:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9479;

  SeqInstr_396:
    goto corral_source_split_9478;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  corral_source_split_9477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} out_vslice_dummy_var_137 := edge_tiocmset(out_$p588, out_$i589, out_$i590);
    goto SeqInstr_395;

  corral_source_split_9476:
    assume {:verifier.code 0} true;
    out_$i590 := $load.i32($M.28, in_$p11);
    goto corral_source_split_9477;

  corral_source_split_9475:
    assume {:verifier.code 0} true;
    out_$i589 := $load.i32($M.28, in_$p10);
    goto corral_source_split_9476;

  corral_source_split_9474:
    assume {:verifier.code 0} true;
    out_$p588 := $M.36;
    goto corral_source_split_9475;

  $bb435:
    assume out_$i587 == 1;
    goto corral_source_split_9474;

  corral_source_split_9201:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb435, $bb436;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    out_$i587 := $eq.i32(out_$i586, 4);
    goto corral_source_split_9201;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    out_$i586 := $M.46;
    goto corral_source_split_9200;

  $bb323:
    assume !(out_$i451 == 1);
    goto corral_source_split_9199;

  $bb457:
    assume !(out_$i629 == 1);
    assume {:verifier.code 0} true;
    goto $bb458;

  corral_source_split_9546:
    assume {:verifier.code 0} true;
    goto $bb458;

  corral_source_split_9545:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9546;

  SeqInstr_417:
    goto corral_source_split_9545;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  corral_source_split_9544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} out_vslice_dummy_var_144 := edge_write(out_$p630, out_$p631, in_$p35, out_$i632);
    goto SeqInstr_416;

  corral_source_split_9543:
    assume {:verifier.code 0} true;
    out_$i632 := $load.i32($M.28, in_$p8);
    goto corral_source_split_9544;

  corral_source_split_9542:
    assume {:verifier.code 0} true;
    out_$p631 := $M.34;
    goto corral_source_split_9543;

  corral_source_split_9541:
    assume {:verifier.code 0} true;
    out_$p630 := $M.36;
    goto corral_source_split_9542;

  $bb456:
    assume out_$i629 == 1;
    goto corral_source_split_9541;

  corral_source_split_9539:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb456, $bb457;

  corral_source_split_9538:
    assume {:verifier.code 0} true;
    out_$i629 := $eq.i32(out_$i628, 2);
    goto corral_source_split_9539;

  $bb455:
    assume {:verifier.code 0} true;
    out_$i628 := $M.46;
    goto corral_source_split_9538;

  $bb454:
    assume !(out_$i623 == 1);
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_9536:
    assume {:verifier.code 0} true;
    goto $bb455;

  corral_source_split_9535:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9536;

  SeqInstr_414:
    goto corral_source_split_9535;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  corral_source_split_9534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_vslice_dummy_var_143 := edge_write(out_$p624, out_$p625, in_$p35, out_$i626);
    goto SeqInstr_413;

  corral_source_split_9533:
    assume {:verifier.code 0} true;
    out_$i626 := $load.i32($M.28, in_$p8);
    goto corral_source_split_9534;

  corral_source_split_9532:
    assume {:verifier.code 0} true;
    out_$p625 := $M.34;
    goto corral_source_split_9533;

  corral_source_split_9531:
    assume {:verifier.code 0} true;
    out_$p624 := $M.36;
    goto corral_source_split_9532;

  $bb453:
    assume out_$i623 == 1;
    goto corral_source_split_9531;

  corral_source_split_9529:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb453, $bb454;

  corral_source_split_9528:
    assume {:verifier.code 0} true;
    out_$i623 := $eq.i32(out_$i622, 3);
    goto corral_source_split_9529;

  $bb452:
    assume {:verifier.code 0} true;
    out_$i622 := $M.46;
    goto corral_source_split_9528;

  $bb451:
    assume !(out_$i617 == 1);
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_9526:
    assume {:verifier.code 0} true;
    goto $bb452;

  corral_source_split_9525:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9526;

  SeqInstr_411:
    goto corral_source_split_9525;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  corral_source_split_9524:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} out_vslice_dummy_var_142 := edge_write(out_$p618, out_$p619, in_$p35, out_$i620);
    goto SeqInstr_410;

  corral_source_split_9523:
    assume {:verifier.code 0} true;
    out_$i620 := $load.i32($M.28, in_$p8);
    goto corral_source_split_9524;

  corral_source_split_9522:
    assume {:verifier.code 0} true;
    out_$p619 := $M.34;
    goto corral_source_split_9523;

  corral_source_split_9521:
    assume {:verifier.code 0} true;
    out_$p618 := $M.36;
    goto corral_source_split_9522;

  $bb450:
    assume out_$i617 == 1;
    goto corral_source_split_9521;

  corral_source_split_9519:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb450, $bb451;

  corral_source_split_9518:
    assume {:verifier.code 0} true;
    out_$i617 := $eq.i32(out_$i616, 1);
    goto corral_source_split_9519;

  $bb449:
    assume {:verifier.code 0} true;
    out_$i616 := $M.46;
    goto corral_source_split_9518;

  $bb448:
    assume !(out_$i611 == 1);
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_9516:
    assume {:verifier.code 0} true;
    goto $bb449;

  corral_source_split_9515:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9516;

  SeqInstr_408:
    goto corral_source_split_9515;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  corral_source_split_9514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} out_vslice_dummy_var_141 := edge_write(out_$p612, out_$p613, in_$p35, out_$i614);
    goto SeqInstr_407;

  corral_source_split_9513:
    assume {:verifier.code 0} true;
    out_$i614 := $load.i32($M.28, in_$p8);
    goto corral_source_split_9514;

  corral_source_split_9512:
    assume {:verifier.code 0} true;
    out_$p613 := $M.34;
    goto corral_source_split_9513;

  corral_source_split_9511:
    assume {:verifier.code 0} true;
    out_$p612 := $M.36;
    goto corral_source_split_9512;

  $bb447:
    assume out_$i611 == 1;
    goto corral_source_split_9511;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb447, $bb448;

  corral_source_split_9180:
    assume {:verifier.code 0} true;
    out_$i611 := $eq.i32(out_$i610, 4);
    goto corral_source_split_9181;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    out_$i610 := $M.46;
    goto corral_source_split_9180;

  $bb312:
    assume out_$i446 == 1;
    goto corral_source_split_9179;

  $bb306:
    assume out_$i443 == 1;
    assume {:verifier.code 0} true;
    out_$i446 := $slt.i32(out_$i434, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb312, $bb313;

  $bb291:
    assume out_$i436 == 1;
    assume {:verifier.code 0} true;
    out_$i443 := $slt.i32(out_$i434, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb306, $bb307;

  $bb290:
    assume !(out_$i435 == 1);
    assume {:verifier.code 0} true;
    out_$i436 := $slt.i32(out_$i434, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb291, $bb292;

  $bb469:
    assume !(out_$i650 == 1);
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_9579:
    assume {:verifier.code 0} true;
    goto $bb470;

  corral_source_split_9578:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9579;

  corral_source_split_9577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_vslice_dummy_var_148 := usb_serial_generic_tiocmiwait(out_$p651, out_$i652);
    goto corral_source_split_9578;

  corral_source_split_9576:
    assume {:verifier.code 0} true;
    out_$i652 := $load.i64($M.28, in_$p7);
    goto corral_source_split_9577;

  corral_source_split_9575:
    assume {:verifier.code 0} true;
    out_$p651 := $M.36;
    goto corral_source_split_9576;

  $bb468:
    assume out_$i650 == 1;
    goto corral_source_split_9575;

  corral_source_split_9573:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb468, $bb469;

  corral_source_split_9572:
    assume {:verifier.code 0} true;
    out_$i650 := $eq.i32(out_$i649, 2);
    goto corral_source_split_9573;

  $bb467:
    assume {:verifier.code 0} true;
    out_$i649 := $M.46;
    goto corral_source_split_9572;

  $bb466:
    assume !(out_$i645 == 1);
    assume {:verifier.code 0} true;
    goto $bb467;

  corral_source_split_9570:
    assume {:verifier.code 0} true;
    goto $bb467;

  corral_source_split_9569:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9570;

  corral_source_split_9568:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} out_vslice_dummy_var_147 := usb_serial_generic_tiocmiwait(out_$p646, out_$i647);
    goto corral_source_split_9569;

  corral_source_split_9567:
    assume {:verifier.code 0} true;
    out_$i647 := $load.i64($M.28, in_$p7);
    goto corral_source_split_9568;

  corral_source_split_9566:
    assume {:verifier.code 0} true;
    out_$p646 := $M.36;
    goto corral_source_split_9567;

  $bb465:
    assume out_$i645 == 1;
    goto corral_source_split_9566;

  corral_source_split_9564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb465, $bb466;

  corral_source_split_9563:
    assume {:verifier.code 0} true;
    out_$i645 := $eq.i32(out_$i644, 3);
    goto corral_source_split_9564;

  $bb464:
    assume {:verifier.code 0} true;
    out_$i644 := $M.46;
    goto corral_source_split_9563;

  $bb463:
    assume !(out_$i640 == 1);
    assume {:verifier.code 0} true;
    goto $bb464;

  corral_source_split_9561:
    assume {:verifier.code 0} true;
    goto $bb464;

  corral_source_split_9560:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9561;

  corral_source_split_9559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} out_vslice_dummy_var_146 := usb_serial_generic_tiocmiwait(out_$p641, out_$i642);
    goto corral_source_split_9560;

  corral_source_split_9558:
    assume {:verifier.code 0} true;
    out_$i642 := $load.i64($M.28, in_$p7);
    goto corral_source_split_9559;

  corral_source_split_9557:
    assume {:verifier.code 0} true;
    out_$p641 := $M.36;
    goto corral_source_split_9558;

  $bb462:
    assume out_$i640 == 1;
    goto corral_source_split_9557;

  corral_source_split_9555:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb462, $bb463;

  corral_source_split_9554:
    assume {:verifier.code 0} true;
    out_$i640 := $eq.i32(out_$i639, 1);
    goto corral_source_split_9555;

  $bb461:
    assume {:verifier.code 0} true;
    out_$i639 := $M.46;
    goto corral_source_split_9554;

  $bb460:
    assume !(out_$i635 == 1);
    assume {:verifier.code 0} true;
    goto $bb461;

  corral_source_split_9552:
    assume {:verifier.code 0} true;
    goto $bb461;

  corral_source_split_9551:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9552;

  corral_source_split_9550:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} out_vslice_dummy_var_145 := usb_serial_generic_tiocmiwait(out_$p636, out_$i637);
    goto corral_source_split_9551;

  corral_source_split_9549:
    assume {:verifier.code 0} true;
    out_$i637 := $load.i64($M.28, in_$p7);
    goto corral_source_split_9550;

  corral_source_split_9548:
    assume {:verifier.code 0} true;
    out_$p636 := $M.36;
    goto corral_source_split_9549;

  $bb459:
    assume out_$i635 == 1;
    goto corral_source_split_9548;

  corral_source_split_9185:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb459, $bb460;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    out_$i635 := $eq.i32(out_$i634, 4);
    goto corral_source_split_9185;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    out_$i634 := $M.46;
    goto corral_source_split_9184;

  $bb314:
    assume out_$i447 == 1;
    goto corral_source_split_9183;

  $bb313:
    assume !(out_$i446 == 1);
    assume {:verifier.code 0} true;
    out_$i447 := $slt.i32(out_$i434, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb472:
    assume !(out_$i655 == 1);
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb475:
    assume {:verifier.code 0} true;
    goto $bb476;

  $bb474:
    assume !(out_$i659 == 1);
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_9589:
    assume {:verifier.code 0} true;
    goto $bb475;

  corral_source_split_9588:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1588} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9589;

  $bb473:
    assume out_$i659 == 1;
    goto corral_source_split_9588;

  corral_source_split_9586:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb473, $bb474;

  corral_source_split_9585:
    assume {:verifier.code 0} true;
    out_$i659 := $eq.i32(out_$i658, 0);
    goto corral_source_split_9586;

  corral_source_split_9584:
    assume {:verifier.code 0} true;
    out_$i658 := $M.54;
    goto corral_source_split_9585;

  corral_source_split_9583:
    assume {:verifier.code 0} true;
    $M.54 := out_$i657;
    call {:si_unique_call 1587} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i657);
    goto corral_source_split_9584;

  SeqInstr_420:
    goto corral_source_split_9583;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  corral_source_split_9582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} out_$i657 := edge_startup(out_$p656);
    goto SeqInstr_419;

  corral_source_split_9581:
    assume {:verifier.code 0} true;
    out_$p656 := $M.35;
    goto corral_source_split_9582;

  $bb471:
    assume out_$i655 == 1;
    goto corral_source_split_9581;

  corral_source_split_9189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb471, $bb472;

  corral_source_split_9188:
    assume {:verifier.code 0} true;
    out_$i655 := $eq.i32(out_$i654, 2);
    goto corral_source_split_9189;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    out_$i654 := $M.46;
    goto corral_source_split_9188;

  $bb315:
    assume !(out_$i447 == 1);
    goto corral_source_split_9187;

  $bb478:
    assume !(out_$i661 == 1);
    assume {:verifier.code 0} true;
    goto $bb479;

  corral_source_split_9594:
    assume {:verifier.code 0} true;
    goto $bb479;

  corral_source_split_9593:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1590} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9594;

  SeqInstr_423:
    goto corral_source_split_9593;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  corral_source_split_9592:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1589} edge_interrupt_callback(out_$p662);
    goto SeqInstr_422;

  corral_source_split_9591:
    assume {:verifier.code 0} true;
    out_$p662 := $M.33;
    goto corral_source_split_9592;

  $bb477:
    assume out_$i661 == 1;
    goto corral_source_split_9591;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb477, $bb478;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    out_$i661 := $eq.i32(out_$i660, 4);
    goto corral_source_split_9169;

  corral_source_split_9167:
    assume {:verifier.code 0} true;
    out_$i660 := $M.46;
    goto corral_source_split_9168;

  $bb308:
    assume out_$i444 == 1;
    goto corral_source_split_9167;

  $bb307:
    assume !(out_$i443 == 1);
    assume {:verifier.code 0} true;
    out_$i444 := $slt.i32(out_$i434, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb481:
    assume !(out_$i664 == 1);
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_9599:
    assume {:verifier.code 0} true;
    goto $bb482;

  corral_source_split_9598:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1592} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9599;

  SeqInstr_426:
    goto corral_source_split_9598;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  corral_source_split_9597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1591} edge_close(out_$p665);
    goto SeqInstr_425;

  corral_source_split_9596:
    assume {:verifier.code 0} true;
    out_$p665 := $M.34;
    goto corral_source_split_9597;

  $bb480:
    assume out_$i664 == 1;
    goto corral_source_split_9596;

  corral_source_split_9173:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb480, $bb481;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    out_$i664 := $eq.i32(out_$i663, 4);
    goto corral_source_split_9173;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    out_$i663 := $M.46;
    goto corral_source_split_9172;

  $bb310:
    assume out_$i445 == 1;
    goto corral_source_split_9171;

  $bb309:
    assume !(out_$i444 == 1);
    assume {:verifier.code 0} true;
    out_$i445 := $slt.i32(out_$i434, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb310, $bb311;

  $bb493:
    assume !(out_$i679 == 1);
    assume {:verifier.code 0} true;
    goto $bb494;

  corral_source_split_9628:
    assume {:verifier.code 0} true;
    goto $bb494;

  corral_source_split_9627:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1600} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9628;

  corral_source_split_9626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1599} out_vslice_dummy_var_152 := edge_write_room(out_$p680);
    goto corral_source_split_9627;

  corral_source_split_9625:
    assume {:verifier.code 0} true;
    out_$p680 := $M.36;
    goto corral_source_split_9626;

  $bb492:
    assume out_$i679 == 1;
    goto corral_source_split_9625;

  corral_source_split_9623:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb492, $bb493;

  corral_source_split_9622:
    assume {:verifier.code 0} true;
    out_$i679 := $eq.i32(out_$i678, 2);
    goto corral_source_split_9623;

  $bb491:
    assume {:verifier.code 0} true;
    out_$i678 := $M.46;
    goto corral_source_split_9622;

  $bb490:
    assume !(out_$i675 == 1);
    assume {:verifier.code 0} true;
    goto $bb491;

  corral_source_split_9620:
    assume {:verifier.code 0} true;
    goto $bb491;

  corral_source_split_9619:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1598} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9620;

  corral_source_split_9618:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1597} out_vslice_dummy_var_151 := edge_write_room(out_$p676);
    goto corral_source_split_9619;

  corral_source_split_9617:
    assume {:verifier.code 0} true;
    out_$p676 := $M.36;
    goto corral_source_split_9618;

  $bb489:
    assume out_$i675 == 1;
    goto corral_source_split_9617;

  corral_source_split_9615:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb489, $bb490;

  corral_source_split_9614:
    assume {:verifier.code 0} true;
    out_$i675 := $eq.i32(out_$i674, 3);
    goto corral_source_split_9615;

  $bb488:
    assume {:verifier.code 0} true;
    out_$i674 := $M.46;
    goto corral_source_split_9614;

  $bb487:
    assume !(out_$i671 == 1);
    assume {:verifier.code 0} true;
    goto $bb488;

  corral_source_split_9612:
    assume {:verifier.code 0} true;
    goto $bb488;

  corral_source_split_9611:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1596} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9612;

  corral_source_split_9610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1595} out_vslice_dummy_var_150 := edge_write_room(out_$p672);
    goto corral_source_split_9611;

  corral_source_split_9609:
    assume {:verifier.code 0} true;
    out_$p672 := $M.36;
    goto corral_source_split_9610;

  $bb486:
    assume out_$i671 == 1;
    goto corral_source_split_9609;

  corral_source_split_9607:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb486, $bb487;

  corral_source_split_9606:
    assume {:verifier.code 0} true;
    out_$i671 := $eq.i32(out_$i670, 1);
    goto corral_source_split_9607;

  $bb485:
    assume {:verifier.code 0} true;
    out_$i670 := $M.46;
    goto corral_source_split_9606;

  $bb484:
    assume !(out_$i667 == 1);
    assume {:verifier.code 0} true;
    goto $bb485;

  corral_source_split_9604:
    assume {:verifier.code 0} true;
    goto $bb485;

  corral_source_split_9603:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1594} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9604;

  corral_source_split_9602:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1593} out_vslice_dummy_var_149 := edge_write_room(out_$p668);
    goto corral_source_split_9603;

  corral_source_split_9601:
    assume {:verifier.code 0} true;
    out_$p668 := $M.36;
    goto corral_source_split_9602;

  $bb483:
    assume out_$i667 == 1;
    goto corral_source_split_9601;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb483, $bb484;

  corral_source_split_9176:
    assume {:verifier.code 0} true;
    out_$i667 := $eq.i32(out_$i666, 4);
    goto corral_source_split_9177;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    out_$i666 := $M.46;
    goto corral_source_split_9176;

  $bb311:
    assume !(out_$i445 == 1);
    goto corral_source_split_9175;

  $bb505:
    assume !(out_$i695 == 1);
    assume {:verifier.code 0} true;
    goto $bb506;

  corral_source_split_9661:
    assume {:verifier.code 0} true;
    goto $bb506;

  corral_source_split_9660:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1608} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9661;

  SeqInstr_438:
    goto corral_source_split_9660;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  corral_source_split_9659:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1607} edge_break(out_$p696, out_$i697);
    goto SeqInstr_437;

  corral_source_split_9658:
    assume {:verifier.code 0} true;
    out_$i697 := $load.i32($M.28, in_$p13);
    goto corral_source_split_9659;

  corral_source_split_9657:
    assume {:verifier.code 0} true;
    out_$p696 := $M.36;
    goto corral_source_split_9658;

  $bb504:
    assume out_$i695 == 1;
    goto corral_source_split_9657;

  corral_source_split_9655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb504, $bb505;

  corral_source_split_9654:
    assume {:verifier.code 0} true;
    out_$i695 := $eq.i32(out_$i694, 2);
    goto corral_source_split_9655;

  $bb503:
    assume {:verifier.code 0} true;
    out_$i694 := $M.46;
    goto corral_source_split_9654;

  $bb502:
    assume !(out_$i691 == 1);
    assume {:verifier.code 0} true;
    goto $bb503;

  corral_source_split_9652:
    assume {:verifier.code 0} true;
    goto $bb503;

  corral_source_split_9651:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1606} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9652;

  SeqInstr_435:
    goto corral_source_split_9651;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  corral_source_split_9650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1605} edge_break(out_$p692, out_$i693);
    goto SeqInstr_434;

  corral_source_split_9649:
    assume {:verifier.code 0} true;
    out_$i693 := $load.i32($M.28, in_$p13);
    goto corral_source_split_9650;

  corral_source_split_9648:
    assume {:verifier.code 0} true;
    out_$p692 := $M.36;
    goto corral_source_split_9649;

  $bb501:
    assume out_$i691 == 1;
    goto corral_source_split_9648;

  corral_source_split_9646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb501, $bb502;

  corral_source_split_9645:
    assume {:verifier.code 0} true;
    out_$i691 := $eq.i32(out_$i690, 3);
    goto corral_source_split_9646;

  $bb500:
    assume {:verifier.code 0} true;
    out_$i690 := $M.46;
    goto corral_source_split_9645;

  $bb499:
    assume !(out_$i687 == 1);
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_9643:
    assume {:verifier.code 0} true;
    goto $bb500;

  corral_source_split_9642:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1604} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9643;

  SeqInstr_432:
    goto corral_source_split_9642;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  corral_source_split_9641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} edge_break(out_$p688, out_$i689);
    goto SeqInstr_431;

  corral_source_split_9640:
    assume {:verifier.code 0} true;
    out_$i689 := $load.i32($M.28, in_$p13);
    goto corral_source_split_9641;

  corral_source_split_9639:
    assume {:verifier.code 0} true;
    out_$p688 := $M.36;
    goto corral_source_split_9640;

  $bb498:
    assume out_$i687 == 1;
    goto corral_source_split_9639;

  corral_source_split_9637:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb498, $bb499;

  corral_source_split_9636:
    assume {:verifier.code 0} true;
    out_$i687 := $eq.i32(out_$i686, 1);
    goto corral_source_split_9637;

  $bb497:
    assume {:verifier.code 0} true;
    out_$i686 := $M.46;
    goto corral_source_split_9636;

  $bb496:
    assume !(out_$i683 == 1);
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_9634:
    assume {:verifier.code 0} true;
    goto $bb497;

  corral_source_split_9633:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1602} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9634;

  SeqInstr_429:
    goto corral_source_split_9633;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  corral_source_split_9632:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1601} edge_break(out_$p684, out_$i685);
    goto SeqInstr_428;

  corral_source_split_9631:
    assume {:verifier.code 0} true;
    out_$i685 := $load.i32($M.28, in_$p13);
    goto corral_source_split_9632;

  corral_source_split_9630:
    assume {:verifier.code 0} true;
    out_$p684 := $M.36;
    goto corral_source_split_9631;

  $bb495:
    assume out_$i683 == 1;
    goto corral_source_split_9630;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb495, $bb496;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    out_$i683 := $eq.i32(out_$i682, 4);
    goto corral_source_split_9157;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    out_$i682 := $M.46;
    goto corral_source_split_9156;

  $bb302:
    assume out_$i441 == 1;
    goto corral_source_split_9155;

  $bb293:
    assume out_$i437 == 1;
    assume {:verifier.code 0} true;
    out_$i441 := $slt.i32(out_$i434, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb292:
    assume !(out_$i436 == 1);
    assume {:verifier.code 0} true;
    out_$i437 := $slt.i32(out_$i434, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb511:
    assume !(out_$i702 == 1);
    assume {:verifier.code 0} true;
    goto $bb512;

  corral_source_split_9674:
    assume {:verifier.code 0} true;
    goto $bb512;

  corral_source_split_9673:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1612} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9674;

  corral_source_split_9672:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1611} edge_disconnect(out_$p703);
    goto corral_source_split_9673;

  corral_source_split_9671:
    assume {:verifier.code 0} true;
    out_$p703 := $M.35;
    goto corral_source_split_9672;

  $bb510:
    assume out_$i702 == 1;
    goto corral_source_split_9671;

  corral_source_split_9669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb510, $bb511;

  corral_source_split_9668:
    assume {:verifier.code 0} true;
    out_$i702 := $eq.i32(out_$i701, 3);
    goto corral_source_split_9669;

  $bb509:
    assume {:verifier.code 0} true;
    out_$i701 := $M.46;
    goto corral_source_split_9668;

  $bb508:
    assume !(out_$i699 == 1);
    assume {:verifier.code 0} true;
    goto $bb509;

  corral_source_split_9666:
    assume {:verifier.code 0} true;
    goto $bb509;

  corral_source_split_9665:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1610} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9666;

  corral_source_split_9664:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1609} edge_disconnect(out_$p700);
    goto corral_source_split_9665;

  corral_source_split_9663:
    assume {:verifier.code 0} true;
    out_$p700 := $M.35;
    goto corral_source_split_9664;

  $bb507:
    assume out_$i699 == 1;
    goto corral_source_split_9663;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb507, $bb508;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    out_$i699 := $eq.i32(out_$i698, 4);
    goto corral_source_split_9161;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    out_$i698 := $M.46;
    goto corral_source_split_9160;

  $bb304:
    assume out_$i442 == 1;
    goto corral_source_split_9159;

  $bb303:
    assume !(out_$i441 == 1);
    assume {:verifier.code 0} true;
    out_$i442 := $slt.i32(out_$i434, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb304, $bb305;

  $bb523:
    assume !(out_$i717 == 1);
    assume {:verifier.code 0} true;
    goto $bb524;

  corral_source_split_9703:
    assume {:verifier.code 0} true;
    goto $bb524;

  corral_source_split_9702:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1620} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9703;

  corral_source_split_9701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1619} out_vslice_dummy_var_156 := edge_chars_in_buffer(out_$p718);
    goto corral_source_split_9702;

  corral_source_split_9700:
    assume {:verifier.code 0} true;
    out_$p718 := $M.36;
    goto corral_source_split_9701;

  $bb522:
    assume out_$i717 == 1;
    goto corral_source_split_9700;

  corral_source_split_9698:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb522, $bb523;

  corral_source_split_9697:
    assume {:verifier.code 0} true;
    out_$i717 := $eq.i32(out_$i716, 2);
    goto corral_source_split_9698;

  $bb521:
    assume {:verifier.code 0} true;
    out_$i716 := $M.46;
    goto corral_source_split_9697;

  $bb520:
    assume !(out_$i713 == 1);
    assume {:verifier.code 0} true;
    goto $bb521;

  corral_source_split_9695:
    assume {:verifier.code 0} true;
    goto $bb521;

  corral_source_split_9694:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1618} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9695;

  corral_source_split_9693:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1617} out_vslice_dummy_var_155 := edge_chars_in_buffer(out_$p714);
    goto corral_source_split_9694;

  corral_source_split_9692:
    assume {:verifier.code 0} true;
    out_$p714 := $M.36;
    goto corral_source_split_9693;

  $bb519:
    assume out_$i713 == 1;
    goto corral_source_split_9692;

  corral_source_split_9690:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb519, $bb520;

  corral_source_split_9689:
    assume {:verifier.code 0} true;
    out_$i713 := $eq.i32(out_$i712, 3);
    goto corral_source_split_9690;

  $bb518:
    assume {:verifier.code 0} true;
    out_$i712 := $M.46;
    goto corral_source_split_9689;

  $bb517:
    assume !(out_$i709 == 1);
    assume {:verifier.code 0} true;
    goto $bb518;

  corral_source_split_9687:
    assume {:verifier.code 0} true;
    goto $bb518;

  corral_source_split_9686:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1616} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9687;

  corral_source_split_9685:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1615} out_vslice_dummy_var_154 := edge_chars_in_buffer(out_$p710);
    goto corral_source_split_9686;

  corral_source_split_9684:
    assume {:verifier.code 0} true;
    out_$p710 := $M.36;
    goto corral_source_split_9685;

  $bb516:
    assume out_$i709 == 1;
    goto corral_source_split_9684;

  corral_source_split_9682:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb516, $bb517;

  corral_source_split_9681:
    assume {:verifier.code 0} true;
    out_$i709 := $eq.i32(out_$i708, 1);
    goto corral_source_split_9682;

  $bb515:
    assume {:verifier.code 0} true;
    out_$i708 := $M.46;
    goto corral_source_split_9681;

  $bb514:
    assume !(out_$i705 == 1);
    assume {:verifier.code 0} true;
    goto $bb515;

  corral_source_split_9679:
    assume {:verifier.code 0} true;
    goto $bb515;

  corral_source_split_9678:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1614} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9679;

  corral_source_split_9677:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1613} out_vslice_dummy_var_153 := edge_chars_in_buffer(out_$p706);
    goto corral_source_split_9678;

  corral_source_split_9676:
    assume {:verifier.code 0} true;
    out_$p706 := $M.36;
    goto corral_source_split_9677;

  $bb513:
    assume out_$i705 == 1;
    goto corral_source_split_9676;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb513, $bb514;

  corral_source_split_9164:
    assume {:verifier.code 0} true;
    out_$i705 := $eq.i32(out_$i704, 4);
    goto corral_source_split_9165;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    out_$i704 := $M.46;
    goto corral_source_split_9164;

  $bb305:
    assume !(out_$i442 == 1);
    goto corral_source_split_9163;

  $bb535:
    assume !(out_$i733 == 1);
    assume {:verifier.code 0} true;
    goto $bb536;

  corral_source_split_9732:
    assume {:verifier.code 0} true;
    goto $bb536;

  corral_source_split_9731:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1628} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9732;

  corral_source_split_9730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1627} out_vslice_dummy_var_160 := edge_tiocmget(out_$p734);
    goto corral_source_split_9731;

  corral_source_split_9729:
    assume {:verifier.code 0} true;
    out_$p734 := $M.36;
    goto corral_source_split_9730;

  $bb534:
    assume out_$i733 == 1;
    goto corral_source_split_9729;

  corral_source_split_9727:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb534, $bb535;

  corral_source_split_9726:
    assume {:verifier.code 0} true;
    out_$i733 := $eq.i32(out_$i732, 2);
    goto corral_source_split_9727;

  $bb533:
    assume {:verifier.code 0} true;
    out_$i732 := $M.46;
    goto corral_source_split_9726;

  $bb532:
    assume !(out_$i729 == 1);
    assume {:verifier.code 0} true;
    goto $bb533;

  corral_source_split_9724:
    assume {:verifier.code 0} true;
    goto $bb533;

  corral_source_split_9723:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1626} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9724;

  corral_source_split_9722:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} out_vslice_dummy_var_159 := edge_tiocmget(out_$p730);
    goto corral_source_split_9723;

  corral_source_split_9721:
    assume {:verifier.code 0} true;
    out_$p730 := $M.36;
    goto corral_source_split_9722;

  $bb531:
    assume out_$i729 == 1;
    goto corral_source_split_9721;

  corral_source_split_9719:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb531, $bb532;

  corral_source_split_9718:
    assume {:verifier.code 0} true;
    out_$i729 := $eq.i32(out_$i728, 3);
    goto corral_source_split_9719;

  $bb530:
    assume {:verifier.code 0} true;
    out_$i728 := $M.46;
    goto corral_source_split_9718;

  $bb529:
    assume !(out_$i725 == 1);
    assume {:verifier.code 0} true;
    goto $bb530;

  corral_source_split_9716:
    assume {:verifier.code 0} true;
    goto $bb530;

  corral_source_split_9715:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1624} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9716;

  corral_source_split_9714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1623} out_vslice_dummy_var_158 := edge_tiocmget(out_$p726);
    goto corral_source_split_9715;

  corral_source_split_9713:
    assume {:verifier.code 0} true;
    out_$p726 := $M.36;
    goto corral_source_split_9714;

  $bb528:
    assume out_$i725 == 1;
    goto corral_source_split_9713;

  corral_source_split_9711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb528, $bb529;

  corral_source_split_9710:
    assume {:verifier.code 0} true;
    out_$i725 := $eq.i32(out_$i724, 1);
    goto corral_source_split_9711;

  $bb527:
    assume {:verifier.code 0} true;
    out_$i724 := $M.46;
    goto corral_source_split_9710;

  $bb526:
    assume !(out_$i721 == 1);
    assume {:verifier.code 0} true;
    goto $bb527;

  corral_source_split_9708:
    assume {:verifier.code 0} true;
    goto $bb527;

  corral_source_split_9707:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1622} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9708;

  corral_source_split_9706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1621} out_vslice_dummy_var_157 := edge_tiocmget(out_$p722);
    goto corral_source_split_9707;

  corral_source_split_9705:
    assume {:verifier.code 0} true;
    out_$p722 := $M.36;
    goto corral_source_split_9706;

  $bb525:
    assume out_$i721 == 1;
    goto corral_source_split_9705;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb525, $bb526;

  corral_source_split_9144:
    assume {:verifier.code 0} true;
    out_$i721 := $eq.i32(out_$i720, 4);
    goto corral_source_split_9145;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    out_$i720 := $M.46;
    goto corral_source_split_9144;

  $bb295:
    assume out_$i438 == 1;
    goto corral_source_split_9143;

  $bb294:
    assume !(out_$i437 == 1);
    assume {:verifier.code 0} true;
    out_$i438 := $slt.i32(out_$i434, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb295, $bb296;

  $bb547:
    assume !(out_$i746 == 1);
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_9761:
    assume {:verifier.code 0} true;
    goto $bb548;

  corral_source_split_9760:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1636} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9761;

  SeqInstr_450:
    goto corral_source_split_9760;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  corral_source_split_9759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1635} edge_bulk_in_callback(out_$p747);
    goto SeqInstr_449;

  corral_source_split_9758:
    assume {:verifier.code 0} true;
    out_$p747 := $M.33;
    goto corral_source_split_9759;

  $bb546:
    assume out_$i746 == 1;
    goto corral_source_split_9758;

  corral_source_split_9756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb546, $bb547;

  corral_source_split_9755:
    assume {:verifier.code 0} true;
    out_$i746 := $eq.i32(out_$i745, 2);
    goto corral_source_split_9756;

  $bb545:
    assume {:verifier.code 0} true;
    out_$i745 := $M.46;
    goto corral_source_split_9755;

  $bb544:
    assume !(out_$i743 == 1);
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_9753:
    assume {:verifier.code 0} true;
    goto $bb545;

  corral_source_split_9752:
    assume {:verifier.code 0} true;
    $M.46 := 3;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(3);
    goto corral_source_split_9753;

  SeqInstr_447:
    goto corral_source_split_9752;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  corral_source_split_9751:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1633} edge_bulk_in_callback(out_$p744);
    goto SeqInstr_446;

  corral_source_split_9750:
    assume {:verifier.code 0} true;
    out_$p744 := $M.33;
    goto corral_source_split_9751;

  $bb543:
    assume out_$i743 == 1;
    goto corral_source_split_9750;

  corral_source_split_9748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb543, $bb544;

  corral_source_split_9747:
    assume {:verifier.code 0} true;
    out_$i743 := $eq.i32(out_$i742, 3);
    goto corral_source_split_9748;

  $bb542:
    assume {:verifier.code 0} true;
    out_$i742 := $M.46;
    goto corral_source_split_9747;

  $bb541:
    assume !(out_$i740 == 1);
    assume {:verifier.code 0} true;
    goto $bb542;

  corral_source_split_9745:
    assume {:verifier.code 0} true;
    goto $bb542;

  corral_source_split_9744:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1632} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9745;

  SeqInstr_444:
    goto corral_source_split_9744;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  corral_source_split_9743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} edge_bulk_in_callback(out_$p741);
    goto SeqInstr_443;

  corral_source_split_9742:
    assume {:verifier.code 0} true;
    out_$p741 := $M.33;
    goto corral_source_split_9743;

  $bb540:
    assume out_$i740 == 1;
    goto corral_source_split_9742;

  corral_source_split_9740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb540, $bb541;

  corral_source_split_9739:
    assume {:verifier.code 0} true;
    out_$i740 := $eq.i32(out_$i739, 1);
    goto corral_source_split_9740;

  $bb539:
    assume {:verifier.code 0} true;
    out_$i739 := $M.46;
    goto corral_source_split_9739;

  $bb538:
    assume !(out_$i737 == 1);
    assume {:verifier.code 0} true;
    goto $bb539;

  corral_source_split_9737:
    assume {:verifier.code 0} true;
    goto $bb539;

  corral_source_split_9736:
    assume {:verifier.code 0} true;
    $M.46 := 4;
    call {:si_unique_call 1630} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(4);
    goto corral_source_split_9737;

  SeqInstr_441:
    goto corral_source_split_9736;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_9735:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} edge_bulk_in_callback(out_$p738);
    goto SeqInstr_440;

  corral_source_split_9734:
    assume {:verifier.code 0} true;
    out_$p738 := $M.33;
    goto corral_source_split_9735;

  $bb537:
    assume out_$i737 == 1;
    goto corral_source_split_9734;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb537, $bb538;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    out_$i737 := $eq.i32(out_$i736, 4);
    goto corral_source_split_9149;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    out_$i736 := $M.46;
    goto corral_source_split_9148;

  $bb297:
    assume out_$i439 == 1;
    goto corral_source_split_9147;

  $bb296:
    assume !(out_$i438 == 1);
    assume {:verifier.code 0} true;
    out_$i439 := $slt.i32(out_$i434, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb297, $bb298;

  $bb550:
    assume !(out_$i749 == 1);
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_9768:
    assume {:verifier.code 0} true;
    goto $bb551;

  corral_source_split_9767:
    assume {:verifier.code 0} true;
    $M.47 := out_$i752;
    call {:si_unique_call 1639} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i752);
    goto corral_source_split_9768;

  corral_source_split_9766:
    assume {:verifier.code 0} true;
    out_$i752 := $add.i32(out_$i751, 1);
    goto corral_source_split_9767;

  corral_source_split_9765:
    assume {:verifier.code 0} true;
    out_$i751 := $M.47;
    goto corral_source_split_9766;

  corral_source_split_9764:
    assume {:verifier.code 0} true;
    $M.46 := 2;
    call {:si_unique_call 1638} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(2);
    goto corral_source_split_9765;

  corral_source_split_9763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1637} out_vslice_dummy_var_161 := ldv_probe_1();
    goto corral_source_split_9764;

  $bb549:
    assume out_$i749 == 1;
    goto corral_source_split_9763;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb549, $bb550;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    out_$i749 := $eq.i32(out_$i748, 1);
    goto corral_source_split_9153;

  corral_source_split_9151:
    assume {:verifier.code 0} true;
    out_$i748 := $M.46;
    goto corral_source_split_9152;

  $bb299:
    assume out_$i440 == 1;
    goto corral_source_split_9151;

  $bb298:
    assume !(out_$i439 == 1);
    assume {:verifier.code 0} true;
    out_$i440 := $eq.i32(out_$i434, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_9770:
    assume {:verifier.code 0} true;
    goto $bb553;

  $bb552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_stop();
    goto corral_source_split_9770;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb552;

  $bb300:
    assume {:verifier.code 0} true;
    assume !(out_$i440 == 1);
    goto $bb301;

  $bb337:
    assume {:verifier.code 0} true;
    assume !(out_$i458 == 1);
    goto $bb301;

  $bb556:
    assume !(out_$i754 == 1);
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb572:
    assume {:verifier.code 0} true;
    goto $bb584;

  $bb583:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb581:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb571:
    assume {:verifier.code 0} true;
    goto $bb572;

  $bb567:
    assume {:verifier.code 0} true;
    goto $bb571;

  $bb566:
    assume {:verifier.code 0} true;
    assume !(out_$i760 == 1);
    goto $bb567;

  $bb569:
    assume {:verifier.code 0} true;
    assume !(out_$i762 == 1);
    goto $bb567;

  corral_source_split_9784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb569;

  corral_source_split_9783:
    assume {:verifier.code 0} true;
    out_$i762 := $eq.i32(out_$i761, 0);
    goto corral_source_split_9784;

  corral_source_split_9782:
    assume {:verifier.code 0} true;
    out_$i761 := $M.47;
    goto corral_source_split_9783;

  $bb565:
    assume out_$i760 == 1;
    goto corral_source_split_9782;

  corral_source_split_9780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb565, $bb566;

  corral_source_split_9779:
    assume {:verifier.code 0} true;
    out_$i760 := $eq.i32(out_$i759, 3);
    goto corral_source_split_9780;

  corral_source_split_9778:
    assume {:verifier.code 0} true;
    out_$i759 := $M.48;
    goto corral_source_split_9779;

  $bb563:
    assume out_$i758 == 1;
    goto corral_source_split_9778;

  $bb558:
    assume out_$i756 == 1;
    assume {:verifier.code 0} true;
    out_$i758 := $eq.i32(out_$i755, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb563, $bb564;

  $bb557:
    assume {:verifier.code 0} true;
    out_$i756 := $slt.i32(out_$i755, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb558, $bb559;

  corral_source_split_9772:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} out_$i755 := __VERIFIER_nondet_int();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i755);
    call {:si_unique_call 1643} {:cexpr "tmp___14"} boogie_si_record_i32(out_$i755);
    assume {:verifier.code 0} true;
    goto $bb557;

  $bb555:
    assume out_$i754 == 1;
    goto corral_source_split_9772;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb555, $bb556;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    out_$i754 := $ne.i32(out_$i753, 0);
    goto corral_source_split_8492;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$i753 := $M.48;
    goto corral_source_split_8491;

  $bb5:
    assume out_$i106 == 1;
    goto corral_source_split_8490;

  $bb4:
    assume !(out_$i105 == 1);
    assume {:verifier.code 0} true;
    out_$i106 := $slt.i32(out_$i104, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb574:
    assume !(out_$i764 == 1);
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb580:
    assume {:verifier.code 0} true;
    goto $bb581;

  $bb579:
    assume !(out_$i769 == 1);
    assume {:verifier.code 0} true;
    goto $bb580;

  corral_source_split_9810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb579;

  corral_source_split_9809:
    assume {:verifier.code 0} true;
    out_$i769 := $ne.i32(out_$i768, 0);
    goto corral_source_split_9810;

  $bb577:
    assume {:verifier.code 0} true;
    out_$i768 := $M.55;
    goto corral_source_split_9809;

  $bb576:
    assume !(out_$i767 == 1);
    assume {:verifier.code 0} true;
    goto $bb577;

  corral_source_split_9807:
    assume {:verifier.code 0} true;
    goto $bb577;

  corral_source_split_9806:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1657} ldv_initialize_usb_serial_driver_4();
    goto corral_source_split_9807;

  corral_source_split_9805:
    assume {:verifier.code 0} true;
    $M.45 := 1;
    call {:si_unique_call 1656} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_9806;

  corral_source_split_9804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1655} ldv_initialize_usb_serial_driver_1();
    goto corral_source_split_9805;

  corral_source_split_9803:
    assume {:verifier.code 0} true;
    $M.46 := 1;
    call {:si_unique_call 1654} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_9804;

  corral_source_split_9802:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1653} ldv_initialize_usb_serial_driver_3();
    goto corral_source_split_9803;

  corral_source_split_9801:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1652} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9802;

  corral_source_split_9800:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1651} ldv_initialize_usb_serial_driver_2();
    goto corral_source_split_9801;

  corral_source_split_9799:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1650} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9800;

  corral_source_split_9798:
    assume {:verifier.code 0} true;
    $M.48 := 3;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_9799;

  $bb575:
    assume out_$i767 == 1;
    goto corral_source_split_9798;

  corral_source_split_9796:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb575, $bb576;

  corral_source_split_9795:
    assume {:verifier.code 0} true;
    out_$i767 := $eq.i32(out_$i766, 0);
    goto corral_source_split_9796;

  corral_source_split_9794:
    assume {:verifier.code 0} true;
    out_$i766 := $M.55;
    goto corral_source_split_9795;

  corral_source_split_9793:
    assume {:verifier.code 0} true;
    $M.55 := out_$i765;
    call {:si_unique_call 1648} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i765);
    goto corral_source_split_9794;

  corral_source_split_9792:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1647} out_$i765 := usb_serial_module_init();
    goto corral_source_split_9793;

  $bb573:
    assume out_$i764 == 1;
    goto corral_source_split_9792;

  corral_source_split_9776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb573, $bb574;

  corral_source_split_9775:
    assume {:verifier.code 0} true;
    out_$i764 := $eq.i32(out_$i763, 1);
    goto corral_source_split_9776;

  corral_source_split_9774:
    assume {:verifier.code 0} true;
    out_$i763 := $M.48;
    goto corral_source_split_9775;

  $bb560:
    assume out_$i757 == 1;
    goto corral_source_split_9774;

  $bb559:
    assume !(out_$i756 == 1);
    assume {:verifier.code 0} true;
    out_$i757 := $eq.i32(out_$i755, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb560, $bb561;

  corral_source_split_9815:
    assume {:verifier.code 0} true;
    goto $bb583;

  $bb582:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1659} ldv_stop();
    goto corral_source_split_9815;

  $bb562:
    assume {:verifier.code 0} true;
    goto $bb582;

  $bb561:
    assume {:verifier.code 0} true;
    assume !(out_$i757 == 1);
    goto $bb562;

  $bb564:
    assume {:verifier.code 0} true;
    assume !(out_$i758 == 1);
    goto $bb562;

  $bb586:
    assume !(out_$i771 == 1);
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb649:
    assume {:verifier.code 0} true;
    goto $bb853;

  $bb852:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb850:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb847:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb835:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb823:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb811:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb805:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb793:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb781:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb778:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb775:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb769:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb757:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb745:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb733:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb721:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb718:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb706:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb703:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb691:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb679:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb673:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb661:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb648:
    assume {:verifier.code 0} true;
    goto $bb649;

  $bb647:
    assume !(out_$i807 == 1);
    assume {:verifier.code 0} true;
    goto $bb648;

  corral_source_split_9938:
    assume {:verifier.code 0} true;
    goto $bb648;

  corral_source_split_9937:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1670} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9938;

  SeqInstr_462:
    goto corral_source_split_9937;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  corral_source_split_9936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1669} edge_throttle(out_$p808);
    goto SeqInstr_461;

  corral_source_split_9935:
    assume {:verifier.code 0} true;
    out_$p808 := $M.44;
    goto corral_source_split_9936;

  $bb646:
    assume out_$i807 == 1;
    goto corral_source_split_9935;

  corral_source_split_9933:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb646, $bb647;

  corral_source_split_9932:
    assume {:verifier.code 0} true;
    out_$i807 := $eq.i32(out_$i806, 2);
    goto corral_source_split_9933;

  $bb645:
    assume {:verifier.code 0} true;
    out_$i806 := $M.49;
    goto corral_source_split_9932;

  $bb644:
    assume !(out_$i804 == 1);
    assume {:verifier.code 0} true;
    goto $bb645;

  corral_source_split_9930:
    assume {:verifier.code 0} true;
    goto $bb645;

  corral_source_split_9929:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1668} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9930;

  SeqInstr_459:
    goto corral_source_split_9929;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  corral_source_split_9928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1667} edge_throttle(out_$p805);
    goto SeqInstr_458;

  corral_source_split_9927:
    assume {:verifier.code 0} true;
    out_$p805 := $M.44;
    goto corral_source_split_9928;

  $bb643:
    assume out_$i804 == 1;
    goto corral_source_split_9927;

  corral_source_split_9925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb643, $bb644;

  corral_source_split_9924:
    assume {:verifier.code 0} true;
    out_$i804 := $eq.i32(out_$i803, 3);
    goto corral_source_split_9925;

  $bb642:
    assume {:verifier.code 0} true;
    out_$i803 := $M.49;
    goto corral_source_split_9924;

  $bb641:
    assume !(out_$i801 == 1);
    assume {:verifier.code 0} true;
    goto $bb642;

  corral_source_split_9922:
    assume {:verifier.code 0} true;
    goto $bb642;

  corral_source_split_9921:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1666} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9922;

  SeqInstr_456:
    goto corral_source_split_9921;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  corral_source_split_9920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1665} edge_throttle(out_$p802);
    goto SeqInstr_455;

  corral_source_split_9919:
    assume {:verifier.code 0} true;
    out_$p802 := $M.44;
    goto corral_source_split_9920;

  $bb640:
    assume out_$i801 == 1;
    goto corral_source_split_9919;

  corral_source_split_9917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb640, $bb641;

  corral_source_split_9916:
    assume {:verifier.code 0} true;
    out_$i801 := $eq.i32(out_$i800, 1);
    goto corral_source_split_9917;

  $bb639:
    assume {:verifier.code 0} true;
    out_$i800 := $M.49;
    goto corral_source_split_9916;

  $bb638:
    assume !(out_$i798 == 1);
    assume {:verifier.code 0} true;
    goto $bb639;

  corral_source_split_9914:
    assume {:verifier.code 0} true;
    goto $bb639;

  corral_source_split_9913:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1664} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9914;

  SeqInstr_453:
    goto corral_source_split_9913;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  corral_source_split_9912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1663} edge_throttle(out_$p799);
    goto SeqInstr_452;

  corral_source_split_9911:
    assume {:verifier.code 0} true;
    out_$p799 := $M.44;
    goto corral_source_split_9912;

  $bb637:
    assume out_$i798 == 1;
    goto corral_source_split_9911;

  corral_source_split_9909:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb637, $bb638;

  corral_source_split_9908:
    assume {:verifier.code 0} true;
    out_$i798 := $eq.i32(out_$i797, 4);
    goto corral_source_split_9909;

  corral_source_split_9907:
    assume {:verifier.code 0} true;
    out_$i797 := $M.49;
    goto corral_source_split_9908;

  $bb635:
    assume out_$i796 == 1;
    goto corral_source_split_9907;

  $bb633:
    assume out_$i795 == 1;
    assume {:verifier.code 0} true;
    out_$i796 := $eq.i32(out_$i772, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb635, $bb636;

  $bb627:
    assume out_$i792 == 1;
    assume {:verifier.code 0} true;
    out_$i795 := $slt.i32(out_$i772, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb633, $bb634;

  $bb615:
    assume out_$i786 == 1;
    assume {:verifier.code 0} true;
    out_$i792 := $slt.i32(out_$i772, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb627, $bb628;

  $bb588:
    assume out_$i773 == 1;
    assume {:verifier.code 0} true;
    out_$i786 := $slt.i32(out_$i772, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb615, $bb616;

  $bb587:
    assume {:verifier.code 0} true;
    out_$i773 := $slt.i32(out_$i772, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb588, $bb589;

  corral_source_split_9817:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1660} out_$i772 := __VERIFIER_nondet_int();
    call {:si_unique_call 1661} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i772);
    call {:si_unique_call 1662} {:cexpr "tmp___15"} boogie_si_record_i32(out_$i772);
    assume {:verifier.code 0} true;
    goto $bb587;

  $bb585:
    assume out_$i771 == 1;
    goto corral_source_split_9817;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb585, $bb586;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$i771 := $ne.i32(out_$i770, 0);
    goto corral_source_split_8496;

  corral_source_split_8494:
    assume {:verifier.code 0} true;
    out_$i770 := $M.49;
    goto corral_source_split_8495;

  $bb7:
    assume out_$i107 == 1;
    goto corral_source_split_8494;

  $bb6:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    out_$i107 := $slt.i32(out_$i104, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb660:
    assume !(out_$i822 == 1);
    assume {:verifier.code 0} true;
    goto $bb661;

  corral_source_split_9967:
    assume {:verifier.code 0} true;
    goto $bb661;

  corral_source_split_9966:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1678} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9967;

  corral_source_split_9965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1677} out_vslice_dummy_var_165 := usb_serial_generic_get_icount(out_$p823, in_$p40);
    goto corral_source_split_9966;

  corral_source_split_9964:
    assume {:verifier.code 0} true;
    out_$p823 := $M.44;
    goto corral_source_split_9965;

  $bb659:
    assume out_$i822 == 1;
    goto corral_source_split_9964;

  corral_source_split_9962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb659, $bb660;

  corral_source_split_9961:
    assume {:verifier.code 0} true;
    out_$i822 := $eq.i32(out_$i821, 2);
    goto corral_source_split_9962;

  $bb658:
    assume {:verifier.code 0} true;
    out_$i821 := $M.49;
    goto corral_source_split_9961;

  $bb657:
    assume !(out_$i818 == 1);
    assume {:verifier.code 0} true;
    goto $bb658;

  corral_source_split_9959:
    assume {:verifier.code 0} true;
    goto $bb658;

  corral_source_split_9958:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1676} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9959;

  corral_source_split_9957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1675} out_vslice_dummy_var_164 := usb_serial_generic_get_icount(out_$p819, in_$p40);
    goto corral_source_split_9958;

  corral_source_split_9956:
    assume {:verifier.code 0} true;
    out_$p819 := $M.44;
    goto corral_source_split_9957;

  $bb656:
    assume out_$i818 == 1;
    goto corral_source_split_9956;

  corral_source_split_9954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb656, $bb657;

  corral_source_split_9953:
    assume {:verifier.code 0} true;
    out_$i818 := $eq.i32(out_$i817, 3);
    goto corral_source_split_9954;

  $bb655:
    assume {:verifier.code 0} true;
    out_$i817 := $M.49;
    goto corral_source_split_9953;

  $bb654:
    assume !(out_$i814 == 1);
    assume {:verifier.code 0} true;
    goto $bb655;

  corral_source_split_9951:
    assume {:verifier.code 0} true;
    goto $bb655;

  corral_source_split_9950:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1674} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9951;

  corral_source_split_9949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1673} out_vslice_dummy_var_163 := usb_serial_generic_get_icount(out_$p815, in_$p40);
    goto corral_source_split_9950;

  corral_source_split_9948:
    assume {:verifier.code 0} true;
    out_$p815 := $M.44;
    goto corral_source_split_9949;

  $bb653:
    assume out_$i814 == 1;
    goto corral_source_split_9948;

  corral_source_split_9946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb653, $bb654;

  corral_source_split_9945:
    assume {:verifier.code 0} true;
    out_$i814 := $eq.i32(out_$i813, 1);
    goto corral_source_split_9946;

  $bb652:
    assume {:verifier.code 0} true;
    out_$i813 := $M.49;
    goto corral_source_split_9945;

  $bb651:
    assume !(out_$i810 == 1);
    assume {:verifier.code 0} true;
    goto $bb652;

  corral_source_split_9943:
    assume {:verifier.code 0} true;
    goto $bb652;

  corral_source_split_9942:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1672} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9943;

  corral_source_split_9941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1671} out_vslice_dummy_var_162 := usb_serial_generic_get_icount(out_$p811, in_$p40);
    goto corral_source_split_9942;

  corral_source_split_9940:
    assume {:verifier.code 0} true;
    out_$p811 := $M.44;
    goto corral_source_split_9941;

  $bb650:
    assume out_$i810 == 1;
    goto corral_source_split_9940;

  corral_source_split_9905:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb650, $bb651;

  corral_source_split_9904:
    assume {:verifier.code 0} true;
    out_$i810 := $eq.i32(out_$i809, 4);
    goto corral_source_split_9905;

  corral_source_split_9903:
    assume {:verifier.code 0} true;
    out_$i809 := $M.49;
    goto corral_source_split_9904;

  $bb634:
    assume !(out_$i795 == 1);
    goto corral_source_split_9903;

  $bb672:
    assume !(out_$i838 == 1);
    assume {:verifier.code 0} true;
    goto $bb673;

  corral_source_split_9996:
    assume {:verifier.code 0} true;
    goto $bb673;

  corral_source_split_9995:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1686} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9996;

  SeqInstr_474:
    goto corral_source_split_9995;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  corral_source_split_9994:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1685} out_vslice_dummy_var_169 := edge_port_probe(out_$p839);
    goto SeqInstr_473;

  corral_source_split_9993:
    assume {:verifier.code 0} true;
    out_$p839 := $M.42;
    goto corral_source_split_9994;

  $bb671:
    assume out_$i838 == 1;
    goto corral_source_split_9993;

  corral_source_split_9991:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb671, $bb672;

  corral_source_split_9990:
    assume {:verifier.code 0} true;
    out_$i838 := $eq.i32(out_$i837, 2);
    goto corral_source_split_9991;

  $bb670:
    assume {:verifier.code 0} true;
    out_$i837 := $M.49;
    goto corral_source_split_9990;

  $bb669:
    assume !(out_$i834 == 1);
    assume {:verifier.code 0} true;
    goto $bb670;

  corral_source_split_9988:
    assume {:verifier.code 0} true;
    goto $bb670;

  corral_source_split_9987:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1684} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9988;

  SeqInstr_471:
    goto corral_source_split_9987;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  corral_source_split_9986:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1683} out_vslice_dummy_var_168 := edge_port_probe(out_$p835);
    goto SeqInstr_470;

  corral_source_split_9985:
    assume {:verifier.code 0} true;
    out_$p835 := $M.42;
    goto corral_source_split_9986;

  $bb668:
    assume out_$i834 == 1;
    goto corral_source_split_9985;

  corral_source_split_9983:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb668, $bb669;

  corral_source_split_9982:
    assume {:verifier.code 0} true;
    out_$i834 := $eq.i32(out_$i833, 3);
    goto corral_source_split_9983;

  $bb667:
    assume {:verifier.code 0} true;
    out_$i833 := $M.49;
    goto corral_source_split_9982;

  $bb666:
    assume !(out_$i830 == 1);
    assume {:verifier.code 0} true;
    goto $bb667;

  corral_source_split_9980:
    assume {:verifier.code 0} true;
    goto $bb667;

  corral_source_split_9979:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1682} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9980;

  SeqInstr_468:
    goto corral_source_split_9979;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  corral_source_split_9978:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1681} out_vslice_dummy_var_167 := edge_port_probe(out_$p831);
    goto SeqInstr_467;

  corral_source_split_9977:
    assume {:verifier.code 0} true;
    out_$p831 := $M.42;
    goto corral_source_split_9978;

  $bb665:
    assume out_$i830 == 1;
    goto corral_source_split_9977;

  corral_source_split_9975:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb665, $bb666;

  corral_source_split_9974:
    assume {:verifier.code 0} true;
    out_$i830 := $eq.i32(out_$i829, 1);
    goto corral_source_split_9975;

  $bb664:
    assume {:verifier.code 0} true;
    out_$i829 := $M.49;
    goto corral_source_split_9974;

  $bb663:
    assume !(out_$i826 == 1);
    assume {:verifier.code 0} true;
    goto $bb664;

  corral_source_split_9972:
    assume {:verifier.code 0} true;
    goto $bb664;

  corral_source_split_9971:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1680} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_9972;

  SeqInstr_465:
    goto corral_source_split_9971;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  corral_source_split_9970:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1679} out_vslice_dummy_var_166 := edge_port_probe(out_$p827);
    goto SeqInstr_464;

  corral_source_split_9969:
    assume {:verifier.code 0} true;
    out_$p827 := $M.42;
    goto corral_source_split_9970;

  $bb662:
    assume out_$i826 == 1;
    goto corral_source_split_9969;

  corral_source_split_9893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb662, $bb663;

  corral_source_split_9892:
    assume {:verifier.code 0} true;
    out_$i826 := $eq.i32(out_$i825, 4);
    goto corral_source_split_9893;

  corral_source_split_9891:
    assume {:verifier.code 0} true;
    out_$i825 := $M.49;
    goto corral_source_split_9892;

  $bb629:
    assume out_$i793 == 1;
    goto corral_source_split_9891;

  $bb628:
    assume !(out_$i792 == 1);
    assume {:verifier.code 0} true;
    out_$i793 := $slt.i32(out_$i772, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb629, $bb630;

  $bb675:
    assume !(out_$i842 == 1);
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb678:
    assume {:verifier.code 0} true;
    goto $bb679;

  $bb677:
    assume !(out_$i847 == 1);
    assume {:verifier.code 0} true;
    goto $bb678;

  corral_source_split_10007:
    assume {:verifier.code 0} true;
    goto $bb678;

  corral_source_split_10006:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10007;

  $bb676:
    assume out_$i847 == 1;
    goto corral_source_split_10006;

  corral_source_split_10004:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb676, $bb677;

  corral_source_split_10003:
    assume {:verifier.code 0} true;
    out_$i847 := $eq.i32(out_$i846, 0);
    goto corral_source_split_10004;

  corral_source_split_10002:
    assume {:verifier.code 0} true;
    out_$i846 := $M.56;
    goto corral_source_split_10003;

  corral_source_split_10001:
    assume {:verifier.code 0} true;
    $M.56 := out_$i845;
    call {:si_unique_call 1688} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i845);
    goto corral_source_split_10002;

  SeqInstr_477:
    goto corral_source_split_10001;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  corral_source_split_10000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1687} out_$i845 := edge_open(out_$p843, out_$p844);
    goto SeqInstr_476;

  corral_source_split_9999:
    assume {:verifier.code 0} true;
    out_$p844 := $M.42;
    goto corral_source_split_10000;

  corral_source_split_9998:
    assume {:verifier.code 0} true;
    out_$p843 := $M.44;
    goto corral_source_split_9999;

  $bb674:
    assume out_$i842 == 1;
    goto corral_source_split_9998;

  corral_source_split_9897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb674, $bb675;

  corral_source_split_9896:
    assume {:verifier.code 0} true;
    out_$i842 := $eq.i32(out_$i841, 3);
    goto corral_source_split_9897;

  corral_source_split_9895:
    assume {:verifier.code 0} true;
    out_$i841 := $M.49;
    goto corral_source_split_9896;

  $bb631:
    assume out_$i794 == 1;
    goto corral_source_split_9895;

  $bb630:
    assume !(out_$i793 == 1);
    assume {:verifier.code 0} true;
    out_$i794 := $slt.i32(out_$i772, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb631, $bb632;

  $bb690:
    assume !(out_$i858 == 1);
    assume {:verifier.code 0} true;
    goto $bb691;

  corral_source_split_10036:
    assume {:verifier.code 0} true;
    goto $bb691;

  corral_source_split_10035:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1697} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10036;

  SeqInstr_489:
    goto corral_source_split_10035;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  corral_source_split_10034:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1696} edge_unthrottle(out_$p859);
    goto SeqInstr_488;

  corral_source_split_10033:
    assume {:verifier.code 0} true;
    out_$p859 := $M.44;
    goto corral_source_split_10034;

  $bb689:
    assume out_$i858 == 1;
    goto corral_source_split_10033;

  corral_source_split_10031:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb689, $bb690;

  corral_source_split_10030:
    assume {:verifier.code 0} true;
    out_$i858 := $eq.i32(out_$i857, 2);
    goto corral_source_split_10031;

  $bb688:
    assume {:verifier.code 0} true;
    out_$i857 := $M.49;
    goto corral_source_split_10030;

  $bb687:
    assume !(out_$i855 == 1);
    assume {:verifier.code 0} true;
    goto $bb688;

  corral_source_split_10028:
    assume {:verifier.code 0} true;
    goto $bb688;

  corral_source_split_10027:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1695} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10028;

  SeqInstr_486:
    goto corral_source_split_10027;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  corral_source_split_10026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1694} edge_unthrottle(out_$p856);
    goto SeqInstr_485;

  corral_source_split_10025:
    assume {:verifier.code 0} true;
    out_$p856 := $M.44;
    goto corral_source_split_10026;

  $bb686:
    assume out_$i855 == 1;
    goto corral_source_split_10025;

  corral_source_split_10023:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb686, $bb687;

  corral_source_split_10022:
    assume {:verifier.code 0} true;
    out_$i855 := $eq.i32(out_$i854, 3);
    goto corral_source_split_10023;

  $bb685:
    assume {:verifier.code 0} true;
    out_$i854 := $M.49;
    goto corral_source_split_10022;

  $bb684:
    assume !(out_$i852 == 1);
    assume {:verifier.code 0} true;
    goto $bb685;

  corral_source_split_10020:
    assume {:verifier.code 0} true;
    goto $bb685;

  corral_source_split_10019:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10020;

  SeqInstr_483:
    goto corral_source_split_10019;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_10018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} edge_unthrottle(out_$p853);
    goto SeqInstr_482;

  corral_source_split_10017:
    assume {:verifier.code 0} true;
    out_$p853 := $M.44;
    goto corral_source_split_10018;

  $bb683:
    assume out_$i852 == 1;
    goto corral_source_split_10017;

  corral_source_split_10015:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb683, $bb684;

  corral_source_split_10014:
    assume {:verifier.code 0} true;
    out_$i852 := $eq.i32(out_$i851, 1);
    goto corral_source_split_10015;

  $bb682:
    assume {:verifier.code 0} true;
    out_$i851 := $M.49;
    goto corral_source_split_10014;

  $bb681:
    assume !(out_$i849 == 1);
    assume {:verifier.code 0} true;
    goto $bb682;

  corral_source_split_10012:
    assume {:verifier.code 0} true;
    goto $bb682;

  corral_source_split_10011:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10012;

  SeqInstr_480:
    goto corral_source_split_10011;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_10010:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} edge_unthrottle(out_$p850);
    goto SeqInstr_479;

  corral_source_split_10009:
    assume {:verifier.code 0} true;
    out_$p850 := $M.44;
    goto corral_source_split_10010;

  $bb680:
    assume out_$i849 == 1;
    goto corral_source_split_10009;

  corral_source_split_9901:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb680, $bb681;

  corral_source_split_9900:
    assume {:verifier.code 0} true;
    out_$i849 := $eq.i32(out_$i848, 4);
    goto corral_source_split_9901;

  corral_source_split_9899:
    assume {:verifier.code 0} true;
    out_$i848 := $M.49;
    goto corral_source_split_9900;

  $bb632:
    assume !(out_$i794 == 1);
    goto corral_source_split_9899;

  $bb702:
    assume !(out_$i873 == 1);
    assume {:verifier.code 0} true;
    goto $bb703;

  corral_source_split_10069:
    assume {:verifier.code 0} true;
    goto $bb703;

  corral_source_split_10068:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10069;

  SeqInstr_501:
    goto corral_source_split_10068;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  corral_source_split_10067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} edge_set_termios(out_$p874, out_$p875, in_$p42);
    goto SeqInstr_500;

  corral_source_split_10066:
    assume {:verifier.code 0} true;
    out_$p875 := $M.42;
    goto corral_source_split_10067;

  corral_source_split_10065:
    assume {:verifier.code 0} true;
    out_$p874 := $M.44;
    goto corral_source_split_10066;

  $bb701:
    assume out_$i873 == 1;
    goto corral_source_split_10065;

  corral_source_split_10063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb701, $bb702;

  corral_source_split_10062:
    assume {:verifier.code 0} true;
    out_$i873 := $eq.i32(out_$i872, 2);
    goto corral_source_split_10063;

  $bb700:
    assume {:verifier.code 0} true;
    out_$i872 := $M.49;
    goto corral_source_split_10062;

  $bb699:
    assume !(out_$i869 == 1);
    assume {:verifier.code 0} true;
    goto $bb700;

  corral_source_split_10060:
    assume {:verifier.code 0} true;
    goto $bb700;

  corral_source_split_10059:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10060;

  SeqInstr_498:
    goto corral_source_split_10059;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_10058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} edge_set_termios(out_$p870, out_$p871, in_$p42);
    goto SeqInstr_497;

  corral_source_split_10057:
    assume {:verifier.code 0} true;
    out_$p871 := $M.42;
    goto corral_source_split_10058;

  corral_source_split_10056:
    assume {:verifier.code 0} true;
    out_$p870 := $M.44;
    goto corral_source_split_10057;

  $bb698:
    assume out_$i869 == 1;
    goto corral_source_split_10056;

  corral_source_split_10054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb698, $bb699;

  corral_source_split_10053:
    assume {:verifier.code 0} true;
    out_$i869 := $eq.i32(out_$i868, 3);
    goto corral_source_split_10054;

  $bb697:
    assume {:verifier.code 0} true;
    out_$i868 := $M.49;
    goto corral_source_split_10053;

  $bb696:
    assume !(out_$i865 == 1);
    assume {:verifier.code 0} true;
    goto $bb697;

  corral_source_split_10051:
    assume {:verifier.code 0} true;
    goto $bb697;

  corral_source_split_10050:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10051;

  SeqInstr_495:
    goto corral_source_split_10050;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  corral_source_split_10049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} edge_set_termios(out_$p866, out_$p867, in_$p42);
    goto SeqInstr_494;

  corral_source_split_10048:
    assume {:verifier.code 0} true;
    out_$p867 := $M.42;
    goto corral_source_split_10049;

  corral_source_split_10047:
    assume {:verifier.code 0} true;
    out_$p866 := $M.44;
    goto corral_source_split_10048;

  $bb695:
    assume out_$i865 == 1;
    goto corral_source_split_10047;

  corral_source_split_10045:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb695, $bb696;

  corral_source_split_10044:
    assume {:verifier.code 0} true;
    out_$i865 := $eq.i32(out_$i864, 1);
    goto corral_source_split_10045;

  $bb694:
    assume {:verifier.code 0} true;
    out_$i864 := $M.49;
    goto corral_source_split_10044;

  $bb693:
    assume !(out_$i861 == 1);
    assume {:verifier.code 0} true;
    goto $bb694;

  corral_source_split_10042:
    assume {:verifier.code 0} true;
    goto $bb694;

  corral_source_split_10041:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10042;

  SeqInstr_492:
    goto corral_source_split_10041;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  corral_source_split_10040:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} edge_set_termios(out_$p862, out_$p863, in_$p42);
    goto SeqInstr_491;

  corral_source_split_10039:
    assume {:verifier.code 0} true;
    out_$p863 := $M.42;
    goto corral_source_split_10040;

  corral_source_split_10038:
    assume {:verifier.code 0} true;
    out_$p862 := $M.44;
    goto corral_source_split_10039;

  $bb692:
    assume out_$i861 == 1;
    goto corral_source_split_10038;

  corral_source_split_9881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb692, $bb693;

  corral_source_split_9880:
    assume {:verifier.code 0} true;
    out_$i861 := $eq.i32(out_$i860, 4);
    goto corral_source_split_9881;

  corral_source_split_9879:
    assume {:verifier.code 0} true;
    out_$i860 := $M.49;
    goto corral_source_split_9880;

  $bb623:
    assume out_$i790 == 1;
    goto corral_source_split_9879;

  $bb617:
    assume out_$i787 == 1;
    assume {:verifier.code 0} true;
    out_$i790 := $slt.i32(out_$i772, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb623, $bb624;

  $bb616:
    assume !(out_$i786 == 1);
    assume {:verifier.code 0} true;
    out_$i787 := $slt.i32(out_$i772, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb617, $bb618;

  $bb705:
    assume !(out_$i877 == 1);
    assume {:verifier.code 0} true;
    goto $bb706;

  corral_source_split_10074:
    assume {:verifier.code 0} true;
    goto $bb706;

  corral_source_split_10073:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10074;

  SeqInstr_504:
    goto corral_source_split_10073;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  corral_source_split_10072:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} edge_bulk_out_data_callback(out_$p878);
    goto SeqInstr_503;

  corral_source_split_10071:
    assume {:verifier.code 0} true;
    out_$p878 := $M.41;
    goto corral_source_split_10072;

  $bb704:
    assume out_$i877 == 1;
    goto corral_source_split_10071;

  corral_source_split_9885:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb704, $bb705;

  corral_source_split_9884:
    assume {:verifier.code 0} true;
    out_$i877 := $eq.i32(out_$i876, 4);
    goto corral_source_split_9885;

  corral_source_split_9883:
    assume {:verifier.code 0} true;
    out_$i876 := $M.49;
    goto corral_source_split_9884;

  $bb625:
    assume out_$i791 == 1;
    goto corral_source_split_9883;

  $bb624:
    assume !(out_$i790 == 1);
    assume {:verifier.code 0} true;
    out_$i791 := $slt.i32(out_$i772, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb625, $bb626;

  $bb717:
    assume !(out_$i892 == 1);
    assume {:verifier.code 0} true;
    goto $bb718;

  corral_source_split_10103:
    assume {:verifier.code 0} true;
    goto $bb718;

  corral_source_split_10102:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10103;

  corral_source_split_10101:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} out_vslice_dummy_var_173 := edge_port_remove(out_$p893);
    goto corral_source_split_10102;

  corral_source_split_10100:
    assume {:verifier.code 0} true;
    out_$p893 := $M.42;
    goto corral_source_split_10101;

  $bb716:
    assume out_$i892 == 1;
    goto corral_source_split_10100;

  corral_source_split_10098:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb716, $bb717;

  corral_source_split_10097:
    assume {:verifier.code 0} true;
    out_$i892 := $eq.i32(out_$i891, 2);
    goto corral_source_split_10098;

  $bb715:
    assume {:verifier.code 0} true;
    out_$i891 := $M.49;
    goto corral_source_split_10097;

  $bb714:
    assume !(out_$i888 == 1);
    assume {:verifier.code 0} true;
    goto $bb715;

  corral_source_split_10095:
    assume {:verifier.code 0} true;
    goto $bb715;

  corral_source_split_10094:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10095;

  corral_source_split_10093:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} out_vslice_dummy_var_172 := edge_port_remove(out_$p889);
    goto corral_source_split_10094;

  corral_source_split_10092:
    assume {:verifier.code 0} true;
    out_$p889 := $M.42;
    goto corral_source_split_10093;

  $bb713:
    assume out_$i888 == 1;
    goto corral_source_split_10092;

  corral_source_split_10090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb713, $bb714;

  corral_source_split_10089:
    assume {:verifier.code 0} true;
    out_$i888 := $eq.i32(out_$i887, 3);
    goto corral_source_split_10090;

  $bb712:
    assume {:verifier.code 0} true;
    out_$i887 := $M.49;
    goto corral_source_split_10089;

  $bb711:
    assume !(out_$i884 == 1);
    assume {:verifier.code 0} true;
    goto $bb712;

  corral_source_split_10087:
    assume {:verifier.code 0} true;
    goto $bb712;

  corral_source_split_10086:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10087;

  corral_source_split_10085:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} out_vslice_dummy_var_171 := edge_port_remove(out_$p885);
    goto corral_source_split_10086;

  corral_source_split_10084:
    assume {:verifier.code 0} true;
    out_$p885 := $M.42;
    goto corral_source_split_10085;

  $bb710:
    assume out_$i884 == 1;
    goto corral_source_split_10084;

  corral_source_split_10082:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb710, $bb711;

  corral_source_split_10081:
    assume {:verifier.code 0} true;
    out_$i884 := $eq.i32(out_$i883, 1);
    goto corral_source_split_10082;

  $bb709:
    assume {:verifier.code 0} true;
    out_$i883 := $M.49;
    goto corral_source_split_10081;

  $bb708:
    assume !(out_$i880 == 1);
    assume {:verifier.code 0} true;
    goto $bb709;

  corral_source_split_10079:
    assume {:verifier.code 0} true;
    goto $bb709;

  corral_source_split_10078:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10079;

  corral_source_split_10077:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} out_vslice_dummy_var_170 := edge_port_remove(out_$p881);
    goto corral_source_split_10078;

  corral_source_split_10076:
    assume {:verifier.code 0} true;
    out_$p881 := $M.42;
    goto corral_source_split_10077;

  $bb707:
    assume out_$i880 == 1;
    goto corral_source_split_10076;

  corral_source_split_9889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb707, $bb708;

  corral_source_split_9888:
    assume {:verifier.code 0} true;
    out_$i880 := $eq.i32(out_$i879, 4);
    goto corral_source_split_9889;

  corral_source_split_9887:
    assume {:verifier.code 0} true;
    out_$i879 := $M.49;
    goto corral_source_split_9888;

  $bb626:
    assume !(out_$i791 == 1);
    goto corral_source_split_9887;

  $bb720:
    assume !(out_$i896 == 1);
    assume {:verifier.code 0} true;
    goto $bb721;

  corral_source_split_10111:
    assume {:verifier.code 0} true;
    goto $bb721;

  corral_source_split_10110:
    assume {:verifier.code 0} true;
    $M.47 := out_$i899;
    call {:si_unique_call 1718} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i899);
    goto corral_source_split_10111;

  corral_source_split_10109:
    assume {:verifier.code 0} true;
    out_$i899 := $sub.i32(out_$i898, 1);
    goto corral_source_split_10110;

  corral_source_split_10108:
    assume {:verifier.code 0} true;
    out_$i898 := $M.47;
    goto corral_source_split_10109;

  corral_source_split_10107:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1717} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10108;

  corral_source_split_10106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} edge_release(out_$p897);
    goto corral_source_split_10107;

  corral_source_split_10105:
    assume {:verifier.code 0} true;
    out_$p897 := $M.43;
    goto corral_source_split_10106;

  $bb719:
    assume out_$i896 == 1;
    goto corral_source_split_10105;

  corral_source_split_9869:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb719, $bb720;

  corral_source_split_9868:
    assume {:verifier.code 0} true;
    out_$i896 := $eq.i32(out_$i895, 2);
    goto corral_source_split_9869;

  corral_source_split_9867:
    assume {:verifier.code 0} true;
    out_$i895 := $M.49;
    goto corral_source_split_9868;

  $bb619:
    assume out_$i788 == 1;
    goto corral_source_split_9867;

  $bb618:
    assume !(out_$i787 == 1);
    assume {:verifier.code 0} true;
    out_$i788 := $slt.i32(out_$i772, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb619, $bb620;

  $bb732:
    assume !(out_$i919 == 1);
    assume {:verifier.code 0} true;
    goto $bb733;

  corral_source_split_10148:
    assume {:verifier.code 0} true;
    goto $bb733;

  corral_source_split_10147:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10148;

  corral_source_split_10146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} out_vslice_dummy_var_177 := edge_ioctl(out_$p920, out_$i921, out_$i922);
    goto corral_source_split_10147;

  corral_source_split_10145:
    assume {:verifier.code 0} true;
    out_$i922 := $load.i64($M.28, in_$p16);
    goto corral_source_split_10146;

  corral_source_split_10144:
    assume {:verifier.code 0} true;
    out_$i921 := $load.i32($M.28, in_$p15);
    goto corral_source_split_10145;

  corral_source_split_10143:
    assume {:verifier.code 0} true;
    out_$p920 := $M.44;
    goto corral_source_split_10144;

  $bb731:
    assume out_$i919 == 1;
    goto corral_source_split_10143;

  corral_source_split_10141:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb731, $bb732;

  corral_source_split_10140:
    assume {:verifier.code 0} true;
    out_$i919 := $eq.i32(out_$i918, 2);
    goto corral_source_split_10141;

  $bb730:
    assume {:verifier.code 0} true;
    out_$i918 := $M.49;
    goto corral_source_split_10140;

  $bb729:
    assume !(out_$i913 == 1);
    assume {:verifier.code 0} true;
    goto $bb730;

  corral_source_split_10138:
    assume {:verifier.code 0} true;
    goto $bb730;

  corral_source_split_10137:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1724} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10138;

  corral_source_split_10136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1723} out_vslice_dummy_var_176 := edge_ioctl(out_$p914, out_$i915, out_$i916);
    goto corral_source_split_10137;

  corral_source_split_10135:
    assume {:verifier.code 0} true;
    out_$i916 := $load.i64($M.28, in_$p16);
    goto corral_source_split_10136;

  corral_source_split_10134:
    assume {:verifier.code 0} true;
    out_$i915 := $load.i32($M.28, in_$p15);
    goto corral_source_split_10135;

  corral_source_split_10133:
    assume {:verifier.code 0} true;
    out_$p914 := $M.44;
    goto corral_source_split_10134;

  $bb728:
    assume out_$i913 == 1;
    goto corral_source_split_10133;

  corral_source_split_10131:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb728, $bb729;

  corral_source_split_10130:
    assume {:verifier.code 0} true;
    out_$i913 := $eq.i32(out_$i912, 3);
    goto corral_source_split_10131;

  $bb727:
    assume {:verifier.code 0} true;
    out_$i912 := $M.49;
    goto corral_source_split_10130;

  $bb726:
    assume !(out_$i907 == 1);
    assume {:verifier.code 0} true;
    goto $bb727;

  corral_source_split_10128:
    assume {:verifier.code 0} true;
    goto $bb727;

  corral_source_split_10127:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10128;

  corral_source_split_10126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1721} out_vslice_dummy_var_175 := edge_ioctl(out_$p908, out_$i909, out_$i910);
    goto corral_source_split_10127;

  corral_source_split_10125:
    assume {:verifier.code 0} true;
    out_$i910 := $load.i64($M.28, in_$p16);
    goto corral_source_split_10126;

  corral_source_split_10124:
    assume {:verifier.code 0} true;
    out_$i909 := $load.i32($M.28, in_$p15);
    goto corral_source_split_10125;

  corral_source_split_10123:
    assume {:verifier.code 0} true;
    out_$p908 := $M.44;
    goto corral_source_split_10124;

  $bb725:
    assume out_$i907 == 1;
    goto corral_source_split_10123;

  corral_source_split_10121:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb725, $bb726;

  corral_source_split_10120:
    assume {:verifier.code 0} true;
    out_$i907 := $eq.i32(out_$i906, 1);
    goto corral_source_split_10121;

  $bb724:
    assume {:verifier.code 0} true;
    out_$i906 := $M.49;
    goto corral_source_split_10120;

  $bb723:
    assume !(out_$i901 == 1);
    assume {:verifier.code 0} true;
    goto $bb724;

  corral_source_split_10118:
    assume {:verifier.code 0} true;
    goto $bb724;

  corral_source_split_10117:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1720} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10118;

  corral_source_split_10116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1719} out_vslice_dummy_var_174 := edge_ioctl(out_$p902, out_$i903, out_$i904);
    goto corral_source_split_10117;

  corral_source_split_10115:
    assume {:verifier.code 0} true;
    out_$i904 := $load.i64($M.28, in_$p16);
    goto corral_source_split_10116;

  corral_source_split_10114:
    assume {:verifier.code 0} true;
    out_$i903 := $load.i32($M.28, in_$p15);
    goto corral_source_split_10115;

  corral_source_split_10113:
    assume {:verifier.code 0} true;
    out_$p902 := $M.44;
    goto corral_source_split_10114;

  $bb722:
    assume out_$i901 == 1;
    goto corral_source_split_10113;

  corral_source_split_9873:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb722, $bb723;

  corral_source_split_9872:
    assume {:verifier.code 0} true;
    out_$i901 := $eq.i32(out_$i900, 4);
    goto corral_source_split_9873;

  corral_source_split_9871:
    assume {:verifier.code 0} true;
    out_$i900 := $M.49;
    goto corral_source_split_9872;

  $bb621:
    assume out_$i789 == 1;
    goto corral_source_split_9871;

  $bb620:
    assume !(out_$i788 == 1);
    assume {:verifier.code 0} true;
    out_$i789 := $slt.i32(out_$i772, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb621, $bb622;

  $bb744:
    assume !(out_$i943 == 1);
    assume {:verifier.code 0} true;
    goto $bb745;

  corral_source_split_10185:
    assume {:verifier.code 0} true;
    goto $bb745;

  corral_source_split_10184:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10185;

  SeqInstr_516:
    goto corral_source_split_10184;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_10183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1733} out_vslice_dummy_var_181 := edge_tiocmset(out_$p944, out_$i945, out_$i946);
    goto SeqInstr_515;

  corral_source_split_10182:
    assume {:verifier.code 0} true;
    out_$i946 := $load.i32($M.28, in_$p14);
    goto corral_source_split_10183;

  corral_source_split_10181:
    assume {:verifier.code 0} true;
    out_$i945 := $load.i32($M.28, in_$p19);
    goto corral_source_split_10182;

  corral_source_split_10180:
    assume {:verifier.code 0} true;
    out_$p944 := $M.44;
    goto corral_source_split_10181;

  $bb743:
    assume out_$i943 == 1;
    goto corral_source_split_10180;

  corral_source_split_10178:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb743, $bb744;

  corral_source_split_10177:
    assume {:verifier.code 0} true;
    out_$i943 := $eq.i32(out_$i942, 2);
    goto corral_source_split_10178;

  $bb742:
    assume {:verifier.code 0} true;
    out_$i942 := $M.49;
    goto corral_source_split_10177;

  $bb741:
    assume !(out_$i937 == 1);
    assume {:verifier.code 0} true;
    goto $bb742;

  corral_source_split_10175:
    assume {:verifier.code 0} true;
    goto $bb742;

  corral_source_split_10174:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1732} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10175;

  SeqInstr_513:
    goto corral_source_split_10174;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_10173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1731} out_vslice_dummy_var_180 := edge_tiocmset(out_$p938, out_$i939, out_$i940);
    goto SeqInstr_512;

  corral_source_split_10172:
    assume {:verifier.code 0} true;
    out_$i940 := $load.i32($M.28, in_$p14);
    goto corral_source_split_10173;

  corral_source_split_10171:
    assume {:verifier.code 0} true;
    out_$i939 := $load.i32($M.28, in_$p19);
    goto corral_source_split_10172;

  corral_source_split_10170:
    assume {:verifier.code 0} true;
    out_$p938 := $M.44;
    goto corral_source_split_10171;

  $bb740:
    assume out_$i937 == 1;
    goto corral_source_split_10170;

  corral_source_split_10168:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb740, $bb741;

  corral_source_split_10167:
    assume {:verifier.code 0} true;
    out_$i937 := $eq.i32(out_$i936, 3);
    goto corral_source_split_10168;

  $bb739:
    assume {:verifier.code 0} true;
    out_$i936 := $M.49;
    goto corral_source_split_10167;

  $bb738:
    assume !(out_$i931 == 1);
    assume {:verifier.code 0} true;
    goto $bb739;

  corral_source_split_10165:
    assume {:verifier.code 0} true;
    goto $bb739;

  corral_source_split_10164:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1730} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10165;

  SeqInstr_510:
    goto corral_source_split_10164;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  corral_source_split_10163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1729} out_vslice_dummy_var_179 := edge_tiocmset(out_$p932, out_$i933, out_$i934);
    goto SeqInstr_509;

  corral_source_split_10162:
    assume {:verifier.code 0} true;
    out_$i934 := $load.i32($M.28, in_$p14);
    goto corral_source_split_10163;

  corral_source_split_10161:
    assume {:verifier.code 0} true;
    out_$i933 := $load.i32($M.28, in_$p19);
    goto corral_source_split_10162;

  corral_source_split_10160:
    assume {:verifier.code 0} true;
    out_$p932 := $M.44;
    goto corral_source_split_10161;

  $bb737:
    assume out_$i931 == 1;
    goto corral_source_split_10160;

  corral_source_split_10158:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb737, $bb738;

  corral_source_split_10157:
    assume {:verifier.code 0} true;
    out_$i931 := $eq.i32(out_$i930, 1);
    goto corral_source_split_10158;

  $bb736:
    assume {:verifier.code 0} true;
    out_$i930 := $M.49;
    goto corral_source_split_10157;

  $bb735:
    assume !(out_$i925 == 1);
    assume {:verifier.code 0} true;
    goto $bb736;

  corral_source_split_10155:
    assume {:verifier.code 0} true;
    goto $bb736;

  corral_source_split_10154:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1728} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10155;

  SeqInstr_507:
    goto corral_source_split_10154;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  corral_source_split_10153:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} out_vslice_dummy_var_178 := edge_tiocmset(out_$p926, out_$i927, out_$i928);
    goto SeqInstr_506;

  corral_source_split_10152:
    assume {:verifier.code 0} true;
    out_$i928 := $load.i32($M.28, in_$p14);
    goto corral_source_split_10153;

  corral_source_split_10151:
    assume {:verifier.code 0} true;
    out_$i927 := $load.i32($M.28, in_$p19);
    goto corral_source_split_10152;

  corral_source_split_10150:
    assume {:verifier.code 0} true;
    out_$p926 := $M.44;
    goto corral_source_split_10151;

  $bb734:
    assume out_$i925 == 1;
    goto corral_source_split_10150;

  corral_source_split_9877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb734, $bb735;

  corral_source_split_9876:
    assume {:verifier.code 0} true;
    out_$i925 := $eq.i32(out_$i924, 4);
    goto corral_source_split_9877;

  corral_source_split_9875:
    assume {:verifier.code 0} true;
    out_$i924 := $M.49;
    goto corral_source_split_9876;

  $bb622:
    assume !(out_$i789 == 1);
    goto corral_source_split_9875;

  $bb756:
    assume !(out_$i967 == 1);
    assume {:verifier.code 0} true;
    goto $bb757;

  corral_source_split_10222:
    assume {:verifier.code 0} true;
    goto $bb757;

  corral_source_split_10221:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10222;

  SeqInstr_528:
    goto corral_source_split_10221;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  corral_source_split_10220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1741} out_vslice_dummy_var_185 := edge_write(out_$p968, out_$p969, in_$p38, out_$i970);
    goto SeqInstr_527;

  corral_source_split_10219:
    assume {:verifier.code 0} true;
    out_$i970 := $load.i32($M.28, in_$p20);
    goto corral_source_split_10220;

  corral_source_split_10218:
    assume {:verifier.code 0} true;
    out_$p969 := $M.42;
    goto corral_source_split_10219;

  corral_source_split_10217:
    assume {:verifier.code 0} true;
    out_$p968 := $M.44;
    goto corral_source_split_10218;

  $bb755:
    assume out_$i967 == 1;
    goto corral_source_split_10217;

  corral_source_split_10215:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb755, $bb756;

  corral_source_split_10214:
    assume {:verifier.code 0} true;
    out_$i967 := $eq.i32(out_$i966, 2);
    goto corral_source_split_10215;

  $bb754:
    assume {:verifier.code 0} true;
    out_$i966 := $M.49;
    goto corral_source_split_10214;

  $bb753:
    assume !(out_$i961 == 1);
    assume {:verifier.code 0} true;
    goto $bb754;

  corral_source_split_10212:
    assume {:verifier.code 0} true;
    goto $bb754;

  corral_source_split_10211:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1740} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10212;

  SeqInstr_525:
    goto corral_source_split_10211;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_10210:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1739} out_vslice_dummy_var_184 := edge_write(out_$p962, out_$p963, in_$p38, out_$i964);
    goto SeqInstr_524;

  corral_source_split_10209:
    assume {:verifier.code 0} true;
    out_$i964 := $load.i32($M.28, in_$p20);
    goto corral_source_split_10210;

  corral_source_split_10208:
    assume {:verifier.code 0} true;
    out_$p963 := $M.42;
    goto corral_source_split_10209;

  corral_source_split_10207:
    assume {:verifier.code 0} true;
    out_$p962 := $M.44;
    goto corral_source_split_10208;

  $bb752:
    assume out_$i961 == 1;
    goto corral_source_split_10207;

  corral_source_split_10205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb752, $bb753;

  corral_source_split_10204:
    assume {:verifier.code 0} true;
    out_$i961 := $eq.i32(out_$i960, 3);
    goto corral_source_split_10205;

  $bb751:
    assume {:verifier.code 0} true;
    out_$i960 := $M.49;
    goto corral_source_split_10204;

  $bb750:
    assume !(out_$i955 == 1);
    assume {:verifier.code 0} true;
    goto $bb751;

  corral_source_split_10202:
    assume {:verifier.code 0} true;
    goto $bb751;

  corral_source_split_10201:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1738} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10202;

  SeqInstr_522:
    goto corral_source_split_10201;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_10200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} out_vslice_dummy_var_183 := edge_write(out_$p956, out_$p957, in_$p38, out_$i958);
    goto SeqInstr_521;

  corral_source_split_10199:
    assume {:verifier.code 0} true;
    out_$i958 := $load.i32($M.28, in_$p20);
    goto corral_source_split_10200;

  corral_source_split_10198:
    assume {:verifier.code 0} true;
    out_$p957 := $M.42;
    goto corral_source_split_10199;

  corral_source_split_10197:
    assume {:verifier.code 0} true;
    out_$p956 := $M.44;
    goto corral_source_split_10198;

  $bb749:
    assume out_$i955 == 1;
    goto corral_source_split_10197;

  corral_source_split_10195:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb749, $bb750;

  corral_source_split_10194:
    assume {:verifier.code 0} true;
    out_$i955 := $eq.i32(out_$i954, 1);
    goto corral_source_split_10195;

  $bb748:
    assume {:verifier.code 0} true;
    out_$i954 := $M.49;
    goto corral_source_split_10194;

  $bb747:
    assume !(out_$i949 == 1);
    assume {:verifier.code 0} true;
    goto $bb748;

  corral_source_split_10192:
    assume {:verifier.code 0} true;
    goto $bb748;

  corral_source_split_10191:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1736} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10192;

  SeqInstr_519:
    goto corral_source_split_10191;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_10190:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1735} out_vslice_dummy_var_182 := edge_write(out_$p950, out_$p951, in_$p38, out_$i952);
    goto SeqInstr_518;

  corral_source_split_10189:
    assume {:verifier.code 0} true;
    out_$i952 := $load.i32($M.28, in_$p20);
    goto corral_source_split_10190;

  corral_source_split_10188:
    assume {:verifier.code 0} true;
    out_$p951 := $M.42;
    goto corral_source_split_10189;

  corral_source_split_10187:
    assume {:verifier.code 0} true;
    out_$p950 := $M.44;
    goto corral_source_split_10188;

  $bb746:
    assume out_$i949 == 1;
    goto corral_source_split_10187;

  corral_source_split_9857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb746, $bb747;

  corral_source_split_9856:
    assume {:verifier.code 0} true;
    out_$i949 := $eq.i32(out_$i948, 4);
    goto corral_source_split_9857;

  corral_source_split_9855:
    assume {:verifier.code 0} true;
    out_$i948 := $M.49;
    goto corral_source_split_9856;

  $bb611:
    assume out_$i784 == 1;
    goto corral_source_split_9855;

  $bb605:
    assume out_$i781 == 1;
    assume {:verifier.code 0} true;
    out_$i784 := $slt.i32(out_$i772, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb611, $bb612;

  $bb590:
    assume out_$i774 == 1;
    assume {:verifier.code 0} true;
    out_$i781 := $slt.i32(out_$i772, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb605, $bb606;

  $bb589:
    assume !(out_$i773 == 1);
    assume {:verifier.code 0} true;
    out_$i774 := $slt.i32(out_$i772, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb590, $bb591;

  $bb768:
    assume !(out_$i988 == 1);
    assume {:verifier.code 0} true;
    goto $bb769;

  corral_source_split_10255:
    assume {:verifier.code 0} true;
    goto $bb769;

  corral_source_split_10254:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1750} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10255;

  corral_source_split_10253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1749} out_vslice_dummy_var_189 := usb_serial_generic_tiocmiwait(out_$p989, out_$i990);
    goto corral_source_split_10254;

  corral_source_split_10252:
    assume {:verifier.code 0} true;
    out_$i990 := $load.i64($M.28, in_$p18);
    goto corral_source_split_10253;

  corral_source_split_10251:
    assume {:verifier.code 0} true;
    out_$p989 := $M.44;
    goto corral_source_split_10252;

  $bb767:
    assume out_$i988 == 1;
    goto corral_source_split_10251;

  corral_source_split_10249:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb767, $bb768;

  corral_source_split_10248:
    assume {:verifier.code 0} true;
    out_$i988 := $eq.i32(out_$i987, 2);
    goto corral_source_split_10249;

  $bb766:
    assume {:verifier.code 0} true;
    out_$i987 := $M.49;
    goto corral_source_split_10248;

  $bb765:
    assume !(out_$i983 == 1);
    assume {:verifier.code 0} true;
    goto $bb766;

  corral_source_split_10246:
    assume {:verifier.code 0} true;
    goto $bb766;

  corral_source_split_10245:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1748} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10246;

  corral_source_split_10244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1747} out_vslice_dummy_var_188 := usb_serial_generic_tiocmiwait(out_$p984, out_$i985);
    goto corral_source_split_10245;

  corral_source_split_10243:
    assume {:verifier.code 0} true;
    out_$i985 := $load.i64($M.28, in_$p18);
    goto corral_source_split_10244;

  corral_source_split_10242:
    assume {:verifier.code 0} true;
    out_$p984 := $M.44;
    goto corral_source_split_10243;

  $bb764:
    assume out_$i983 == 1;
    goto corral_source_split_10242;

  corral_source_split_10240:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb764, $bb765;

  corral_source_split_10239:
    assume {:verifier.code 0} true;
    out_$i983 := $eq.i32(out_$i982, 3);
    goto corral_source_split_10240;

  $bb763:
    assume {:verifier.code 0} true;
    out_$i982 := $M.49;
    goto corral_source_split_10239;

  $bb762:
    assume !(out_$i978 == 1);
    assume {:verifier.code 0} true;
    goto $bb763;

  corral_source_split_10237:
    assume {:verifier.code 0} true;
    goto $bb763;

  corral_source_split_10236:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1746} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10237;

  corral_source_split_10235:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} out_vslice_dummy_var_187 := usb_serial_generic_tiocmiwait(out_$p979, out_$i980);
    goto corral_source_split_10236;

  corral_source_split_10234:
    assume {:verifier.code 0} true;
    out_$i980 := $load.i64($M.28, in_$p18);
    goto corral_source_split_10235;

  corral_source_split_10233:
    assume {:verifier.code 0} true;
    out_$p979 := $M.44;
    goto corral_source_split_10234;

  $bb761:
    assume out_$i978 == 1;
    goto corral_source_split_10233;

  corral_source_split_10231:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb761, $bb762;

  corral_source_split_10230:
    assume {:verifier.code 0} true;
    out_$i978 := $eq.i32(out_$i977, 1);
    goto corral_source_split_10231;

  $bb760:
    assume {:verifier.code 0} true;
    out_$i977 := $M.49;
    goto corral_source_split_10230;

  $bb759:
    assume !(out_$i973 == 1);
    assume {:verifier.code 0} true;
    goto $bb760;

  corral_source_split_10228:
    assume {:verifier.code 0} true;
    goto $bb760;

  corral_source_split_10227:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1744} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10228;

  corral_source_split_10226:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} out_vslice_dummy_var_186 := usb_serial_generic_tiocmiwait(out_$p974, out_$i975);
    goto corral_source_split_10227;

  corral_source_split_10225:
    assume {:verifier.code 0} true;
    out_$i975 := $load.i64($M.28, in_$p18);
    goto corral_source_split_10226;

  corral_source_split_10224:
    assume {:verifier.code 0} true;
    out_$p974 := $M.44;
    goto corral_source_split_10225;

  $bb758:
    assume out_$i973 == 1;
    goto corral_source_split_10224;

  corral_source_split_9861:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb758, $bb759;

  corral_source_split_9860:
    assume {:verifier.code 0} true;
    out_$i973 := $eq.i32(out_$i972, 4);
    goto corral_source_split_9861;

  corral_source_split_9859:
    assume {:verifier.code 0} true;
    out_$i972 := $M.49;
    goto corral_source_split_9860;

  $bb613:
    assume out_$i785 == 1;
    goto corral_source_split_9859;

  $bb612:
    assume !(out_$i784 == 1);
    assume {:verifier.code 0} true;
    out_$i785 := $slt.i32(out_$i772, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb613, $bb614;

  $bb771:
    assume !(out_$i993 == 1);
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb774:
    assume {:verifier.code 0} true;
    goto $bb775;

  $bb773:
    assume !(out_$i997 == 1);
    assume {:verifier.code 0} true;
    goto $bb774;

  corral_source_split_10265:
    assume {:verifier.code 0} true;
    goto $bb774;

  corral_source_split_10264:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1753} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10265;

  $bb772:
    assume out_$i997 == 1;
    goto corral_source_split_10264;

  corral_source_split_10262:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb772, $bb773;

  corral_source_split_10261:
    assume {:verifier.code 0} true;
    out_$i997 := $eq.i32(out_$i996, 0);
    goto corral_source_split_10262;

  corral_source_split_10260:
    assume {:verifier.code 0} true;
    out_$i996 := $M.57;
    goto corral_source_split_10261;

  corral_source_split_10259:
    assume {:verifier.code 0} true;
    $M.57 := out_$i995;
    call {:si_unique_call 1752} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i995);
    goto corral_source_split_10260;

  SeqInstr_531:
    goto corral_source_split_10259;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_10258:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1751} out_$i995 := edge_startup(out_$p994);
    goto SeqInstr_530;

  corral_source_split_10257:
    assume {:verifier.code 0} true;
    out_$p994 := $M.43;
    goto corral_source_split_10258;

  $bb770:
    assume out_$i993 == 1;
    goto corral_source_split_10257;

  corral_source_split_9865:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb770, $bb771;

  corral_source_split_9864:
    assume {:verifier.code 0} true;
    out_$i993 := $eq.i32(out_$i992, 2);
    goto corral_source_split_9865;

  corral_source_split_9863:
    assume {:verifier.code 0} true;
    out_$i992 := $M.49;
    goto corral_source_split_9864;

  $bb614:
    assume !(out_$i785 == 1);
    goto corral_source_split_9863;

  $bb777:
    assume !(out_$i999 == 1);
    assume {:verifier.code 0} true;
    goto $bb778;

  corral_source_split_10270:
    assume {:verifier.code 0} true;
    goto $bb778;

  corral_source_split_10269:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1755} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10270;

  SeqInstr_534:
    goto corral_source_split_10269;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  corral_source_split_10268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1754} edge_interrupt_callback(out_$p1000);
    goto SeqInstr_533;

  corral_source_split_10267:
    assume {:verifier.code 0} true;
    out_$p1000 := $M.41;
    goto corral_source_split_10268;

  $bb776:
    assume out_$i999 == 1;
    goto corral_source_split_10267;

  corral_source_split_9845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb776, $bb777;

  corral_source_split_9844:
    assume {:verifier.code 0} true;
    out_$i999 := $eq.i32(out_$i998, 4);
    goto corral_source_split_9845;

  corral_source_split_9843:
    assume {:verifier.code 0} true;
    out_$i998 := $M.49;
    goto corral_source_split_9844;

  $bb607:
    assume out_$i782 == 1;
    goto corral_source_split_9843;

  $bb606:
    assume !(out_$i781 == 1);
    assume {:verifier.code 0} true;
    out_$i782 := $slt.i32(out_$i772, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb607, $bb608;

  $bb780:
    assume !(out_$i1002 == 1);
    assume {:verifier.code 0} true;
    goto $bb781;

  corral_source_split_10275:
    assume {:verifier.code 0} true;
    goto $bb781;

  corral_source_split_10274:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1757} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10275;

  SeqInstr_537:
    goto corral_source_split_10274;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_10273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1756} edge_close(out_$p1003);
    goto SeqInstr_536;

  corral_source_split_10272:
    assume {:verifier.code 0} true;
    out_$p1003 := $M.42;
    goto corral_source_split_10273;

  $bb779:
    assume out_$i1002 == 1;
    goto corral_source_split_10272;

  corral_source_split_9849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb779, $bb780;

  corral_source_split_9848:
    assume {:verifier.code 0} true;
    out_$i1002 := $eq.i32(out_$i1001, 4);
    goto corral_source_split_9849;

  corral_source_split_9847:
    assume {:verifier.code 0} true;
    out_$i1001 := $M.49;
    goto corral_source_split_9848;

  $bb609:
    assume out_$i783 == 1;
    goto corral_source_split_9847;

  $bb608:
    assume !(out_$i782 == 1);
    assume {:verifier.code 0} true;
    out_$i783 := $slt.i32(out_$i772, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb609, $bb610;

  $bb792:
    assume !(out_$i1017 == 1);
    assume {:verifier.code 0} true;
    goto $bb793;

  corral_source_split_10304:
    assume {:verifier.code 0} true;
    goto $bb793;

  corral_source_split_10303:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1765} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10304;

  corral_source_split_10302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1764} out_vslice_dummy_var_193 := edge_write_room(out_$p1018);
    goto corral_source_split_10303;

  corral_source_split_10301:
    assume {:verifier.code 0} true;
    out_$p1018 := $M.44;
    goto corral_source_split_10302;

  $bb791:
    assume out_$i1017 == 1;
    goto corral_source_split_10301;

  corral_source_split_10299:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb791, $bb792;

  corral_source_split_10298:
    assume {:verifier.code 0} true;
    out_$i1017 := $eq.i32(out_$i1016, 2);
    goto corral_source_split_10299;

  $bb790:
    assume {:verifier.code 0} true;
    out_$i1016 := $M.49;
    goto corral_source_split_10298;

  $bb789:
    assume !(out_$i1013 == 1);
    assume {:verifier.code 0} true;
    goto $bb790;

  corral_source_split_10296:
    assume {:verifier.code 0} true;
    goto $bb790;

  corral_source_split_10295:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1763} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10296;

  corral_source_split_10294:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1762} out_vslice_dummy_var_192 := edge_write_room(out_$p1014);
    goto corral_source_split_10295;

  corral_source_split_10293:
    assume {:verifier.code 0} true;
    out_$p1014 := $M.44;
    goto corral_source_split_10294;

  $bb788:
    assume out_$i1013 == 1;
    goto corral_source_split_10293;

  corral_source_split_10291:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb788, $bb789;

  corral_source_split_10290:
    assume {:verifier.code 0} true;
    out_$i1013 := $eq.i32(out_$i1012, 3);
    goto corral_source_split_10291;

  $bb787:
    assume {:verifier.code 0} true;
    out_$i1012 := $M.49;
    goto corral_source_split_10290;

  $bb786:
    assume !(out_$i1009 == 1);
    assume {:verifier.code 0} true;
    goto $bb787;

  corral_source_split_10288:
    assume {:verifier.code 0} true;
    goto $bb787;

  corral_source_split_10287:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1761} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10288;

  corral_source_split_10286:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1760} out_vslice_dummy_var_191 := edge_write_room(out_$p1010);
    goto corral_source_split_10287;

  corral_source_split_10285:
    assume {:verifier.code 0} true;
    out_$p1010 := $M.44;
    goto corral_source_split_10286;

  $bb785:
    assume out_$i1009 == 1;
    goto corral_source_split_10285;

  corral_source_split_10283:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb785, $bb786;

  corral_source_split_10282:
    assume {:verifier.code 0} true;
    out_$i1009 := $eq.i32(out_$i1008, 1);
    goto corral_source_split_10283;

  $bb784:
    assume {:verifier.code 0} true;
    out_$i1008 := $M.49;
    goto corral_source_split_10282;

  $bb783:
    assume !(out_$i1005 == 1);
    assume {:verifier.code 0} true;
    goto $bb784;

  corral_source_split_10280:
    assume {:verifier.code 0} true;
    goto $bb784;

  corral_source_split_10279:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10280;

  corral_source_split_10278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} out_vslice_dummy_var_190 := edge_write_room(out_$p1006);
    goto corral_source_split_10279;

  corral_source_split_10277:
    assume {:verifier.code 0} true;
    out_$p1006 := $M.44;
    goto corral_source_split_10278;

  $bb782:
    assume out_$i1005 == 1;
    goto corral_source_split_10277;

  corral_source_split_9853:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb782, $bb783;

  corral_source_split_9852:
    assume {:verifier.code 0} true;
    out_$i1005 := $eq.i32(out_$i1004, 4);
    goto corral_source_split_9853;

  corral_source_split_9851:
    assume {:verifier.code 0} true;
    out_$i1004 := $M.49;
    goto corral_source_split_9852;

  $bb610:
    assume !(out_$i783 == 1);
    goto corral_source_split_9851;

  $bb804:
    assume !(out_$i1033 == 1);
    assume {:verifier.code 0} true;
    goto $bb805;

  corral_source_split_10337:
    assume {:verifier.code 0} true;
    goto $bb805;

  corral_source_split_10336:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1773} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10337;

  SeqInstr_549:
    goto corral_source_split_10336;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_10335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1772} edge_break(out_$p1034, out_$i1035);
    goto SeqInstr_548;

  corral_source_split_10334:
    assume {:verifier.code 0} true;
    out_$i1035 := $load.i32($M.28, in_$p17);
    goto corral_source_split_10335;

  corral_source_split_10333:
    assume {:verifier.code 0} true;
    out_$p1034 := $M.44;
    goto corral_source_split_10334;

  $bb803:
    assume out_$i1033 == 1;
    goto corral_source_split_10333;

  corral_source_split_10331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb803, $bb804;

  corral_source_split_10330:
    assume {:verifier.code 0} true;
    out_$i1033 := $eq.i32(out_$i1032, 2);
    goto corral_source_split_10331;

  $bb802:
    assume {:verifier.code 0} true;
    out_$i1032 := $M.49;
    goto corral_source_split_10330;

  $bb801:
    assume !(out_$i1029 == 1);
    assume {:verifier.code 0} true;
    goto $bb802;

  corral_source_split_10328:
    assume {:verifier.code 0} true;
    goto $bb802;

  corral_source_split_10327:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1771} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10328;

  SeqInstr_546:
    goto corral_source_split_10327;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_10326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1770} edge_break(out_$p1030, out_$i1031);
    goto SeqInstr_545;

  corral_source_split_10325:
    assume {:verifier.code 0} true;
    out_$i1031 := $load.i32($M.28, in_$p17);
    goto corral_source_split_10326;

  corral_source_split_10324:
    assume {:verifier.code 0} true;
    out_$p1030 := $M.44;
    goto corral_source_split_10325;

  $bb800:
    assume out_$i1029 == 1;
    goto corral_source_split_10324;

  corral_source_split_10322:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb800, $bb801;

  corral_source_split_10321:
    assume {:verifier.code 0} true;
    out_$i1029 := $eq.i32(out_$i1028, 3);
    goto corral_source_split_10322;

  $bb799:
    assume {:verifier.code 0} true;
    out_$i1028 := $M.49;
    goto corral_source_split_10321;

  $bb798:
    assume !(out_$i1025 == 1);
    assume {:verifier.code 0} true;
    goto $bb799;

  corral_source_split_10319:
    assume {:verifier.code 0} true;
    goto $bb799;

  corral_source_split_10318:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1769} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10319;

  SeqInstr_543:
    goto corral_source_split_10318;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_10317:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1768} edge_break(out_$p1026, out_$i1027);
    goto SeqInstr_542;

  corral_source_split_10316:
    assume {:verifier.code 0} true;
    out_$i1027 := $load.i32($M.28, in_$p17);
    goto corral_source_split_10317;

  corral_source_split_10315:
    assume {:verifier.code 0} true;
    out_$p1026 := $M.44;
    goto corral_source_split_10316;

  $bb797:
    assume out_$i1025 == 1;
    goto corral_source_split_10315;

  corral_source_split_10313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb797, $bb798;

  corral_source_split_10312:
    assume {:verifier.code 0} true;
    out_$i1025 := $eq.i32(out_$i1024, 1);
    goto corral_source_split_10313;

  $bb796:
    assume {:verifier.code 0} true;
    out_$i1024 := $M.49;
    goto corral_source_split_10312;

  $bb795:
    assume !(out_$i1021 == 1);
    assume {:verifier.code 0} true;
    goto $bb796;

  corral_source_split_10310:
    assume {:verifier.code 0} true;
    goto $bb796;

  corral_source_split_10309:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1767} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10310;

  SeqInstr_540:
    goto corral_source_split_10309;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_10308:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1766} edge_break(out_$p1022, out_$i1023);
    goto SeqInstr_539;

  corral_source_split_10307:
    assume {:verifier.code 0} true;
    out_$i1023 := $load.i32($M.28, in_$p17);
    goto corral_source_split_10308;

  corral_source_split_10306:
    assume {:verifier.code 0} true;
    out_$p1022 := $M.44;
    goto corral_source_split_10307;

  $bb794:
    assume out_$i1021 == 1;
    goto corral_source_split_10306;

  corral_source_split_9833:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb794, $bb795;

  corral_source_split_9832:
    assume {:verifier.code 0} true;
    out_$i1021 := $eq.i32(out_$i1020, 4);
    goto corral_source_split_9833;

  corral_source_split_9831:
    assume {:verifier.code 0} true;
    out_$i1020 := $M.49;
    goto corral_source_split_9832;

  $bb601:
    assume out_$i779 == 1;
    goto corral_source_split_9831;

  $bb592:
    assume out_$i775 == 1;
    assume {:verifier.code 0} true;
    out_$i779 := $slt.i32(out_$i772, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb601, $bb602;

  $bb591:
    assume !(out_$i774 == 1);
    assume {:verifier.code 0} true;
    out_$i775 := $slt.i32(out_$i772, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb592, $bb593;

  $bb810:
    assume !(out_$i1040 == 1);
    assume {:verifier.code 0} true;
    goto $bb811;

  corral_source_split_10350:
    assume {:verifier.code 0} true;
    goto $bb811;

  corral_source_split_10349:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1777} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10350;

  corral_source_split_10348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1776} edge_disconnect(out_$p1041);
    goto corral_source_split_10349;

  corral_source_split_10347:
    assume {:verifier.code 0} true;
    out_$p1041 := $M.43;
    goto corral_source_split_10348;

  $bb809:
    assume out_$i1040 == 1;
    goto corral_source_split_10347;

  corral_source_split_10345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb809, $bb810;

  corral_source_split_10344:
    assume {:verifier.code 0} true;
    out_$i1040 := $eq.i32(out_$i1039, 3);
    goto corral_source_split_10345;

  $bb808:
    assume {:verifier.code 0} true;
    out_$i1039 := $M.49;
    goto corral_source_split_10344;

  $bb807:
    assume !(out_$i1037 == 1);
    assume {:verifier.code 0} true;
    goto $bb808;

  corral_source_split_10342:
    assume {:verifier.code 0} true;
    goto $bb808;

  corral_source_split_10341:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1775} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10342;

  corral_source_split_10340:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1774} edge_disconnect(out_$p1038);
    goto corral_source_split_10341;

  corral_source_split_10339:
    assume {:verifier.code 0} true;
    out_$p1038 := $M.43;
    goto corral_source_split_10340;

  $bb806:
    assume out_$i1037 == 1;
    goto corral_source_split_10339;

  corral_source_split_9837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb806, $bb807;

  corral_source_split_9836:
    assume {:verifier.code 0} true;
    out_$i1037 := $eq.i32(out_$i1036, 4);
    goto corral_source_split_9837;

  corral_source_split_9835:
    assume {:verifier.code 0} true;
    out_$i1036 := $M.49;
    goto corral_source_split_9836;

  $bb603:
    assume out_$i780 == 1;
    goto corral_source_split_9835;

  $bb602:
    assume !(out_$i779 == 1);
    assume {:verifier.code 0} true;
    out_$i780 := $slt.i32(out_$i772, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb603, $bb604;

  $bb822:
    assume !(out_$i1055 == 1);
    assume {:verifier.code 0} true;
    goto $bb823;

  corral_source_split_10379:
    assume {:verifier.code 0} true;
    goto $bb823;

  corral_source_split_10378:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1785} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10379;

  corral_source_split_10377:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1784} out_vslice_dummy_var_197 := edge_chars_in_buffer(out_$p1056);
    goto corral_source_split_10378;

  corral_source_split_10376:
    assume {:verifier.code 0} true;
    out_$p1056 := $M.44;
    goto corral_source_split_10377;

  $bb821:
    assume out_$i1055 == 1;
    goto corral_source_split_10376;

  corral_source_split_10374:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb821, $bb822;

  corral_source_split_10373:
    assume {:verifier.code 0} true;
    out_$i1055 := $eq.i32(out_$i1054, 2);
    goto corral_source_split_10374;

  $bb820:
    assume {:verifier.code 0} true;
    out_$i1054 := $M.49;
    goto corral_source_split_10373;

  $bb819:
    assume !(out_$i1051 == 1);
    assume {:verifier.code 0} true;
    goto $bb820;

  corral_source_split_10371:
    assume {:verifier.code 0} true;
    goto $bb820;

  corral_source_split_10370:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1783} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10371;

  corral_source_split_10369:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1782} out_vslice_dummy_var_196 := edge_chars_in_buffer(out_$p1052);
    goto corral_source_split_10370;

  corral_source_split_10368:
    assume {:verifier.code 0} true;
    out_$p1052 := $M.44;
    goto corral_source_split_10369;

  $bb818:
    assume out_$i1051 == 1;
    goto corral_source_split_10368;

  corral_source_split_10366:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb818, $bb819;

  corral_source_split_10365:
    assume {:verifier.code 0} true;
    out_$i1051 := $eq.i32(out_$i1050, 3);
    goto corral_source_split_10366;

  $bb817:
    assume {:verifier.code 0} true;
    out_$i1050 := $M.49;
    goto corral_source_split_10365;

  $bb816:
    assume !(out_$i1047 == 1);
    assume {:verifier.code 0} true;
    goto $bb817;

  corral_source_split_10363:
    assume {:verifier.code 0} true;
    goto $bb817;

  corral_source_split_10362:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1781} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10363;

  corral_source_split_10361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1780} out_vslice_dummy_var_195 := edge_chars_in_buffer(out_$p1048);
    goto corral_source_split_10362;

  corral_source_split_10360:
    assume {:verifier.code 0} true;
    out_$p1048 := $M.44;
    goto corral_source_split_10361;

  $bb815:
    assume out_$i1047 == 1;
    goto corral_source_split_10360;

  corral_source_split_10358:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb815, $bb816;

  corral_source_split_10357:
    assume {:verifier.code 0} true;
    out_$i1047 := $eq.i32(out_$i1046, 1);
    goto corral_source_split_10358;

  $bb814:
    assume {:verifier.code 0} true;
    out_$i1046 := $M.49;
    goto corral_source_split_10357;

  $bb813:
    assume !(out_$i1043 == 1);
    assume {:verifier.code 0} true;
    goto $bb814;

  corral_source_split_10355:
    assume {:verifier.code 0} true;
    goto $bb814;

  corral_source_split_10354:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1779} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10355;

  corral_source_split_10353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1778} out_vslice_dummy_var_194 := edge_chars_in_buffer(out_$p1044);
    goto corral_source_split_10354;

  corral_source_split_10352:
    assume {:verifier.code 0} true;
    out_$p1044 := $M.44;
    goto corral_source_split_10353;

  $bb812:
    assume out_$i1043 == 1;
    goto corral_source_split_10352;

  corral_source_split_9841:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb812, $bb813;

  corral_source_split_9840:
    assume {:verifier.code 0} true;
    out_$i1043 := $eq.i32(out_$i1042, 4);
    goto corral_source_split_9841;

  corral_source_split_9839:
    assume {:verifier.code 0} true;
    out_$i1042 := $M.49;
    goto corral_source_split_9840;

  $bb604:
    assume !(out_$i780 == 1);
    goto corral_source_split_9839;

  $bb834:
    assume !(out_$i1071 == 1);
    assume {:verifier.code 0} true;
    goto $bb835;

  corral_source_split_10408:
    assume {:verifier.code 0} true;
    goto $bb835;

  corral_source_split_10407:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1793} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10408;

  corral_source_split_10406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1792} out_vslice_dummy_var_201 := edge_tiocmget(out_$p1072);
    goto corral_source_split_10407;

  corral_source_split_10405:
    assume {:verifier.code 0} true;
    out_$p1072 := $M.44;
    goto corral_source_split_10406;

  $bb833:
    assume out_$i1071 == 1;
    goto corral_source_split_10405;

  corral_source_split_10403:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb833, $bb834;

  corral_source_split_10402:
    assume {:verifier.code 0} true;
    out_$i1071 := $eq.i32(out_$i1070, 2);
    goto corral_source_split_10403;

  $bb832:
    assume {:verifier.code 0} true;
    out_$i1070 := $M.49;
    goto corral_source_split_10402;

  $bb831:
    assume !(out_$i1067 == 1);
    assume {:verifier.code 0} true;
    goto $bb832;

  corral_source_split_10400:
    assume {:verifier.code 0} true;
    goto $bb832;

  corral_source_split_10399:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1791} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10400;

  corral_source_split_10398:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1790} out_vslice_dummy_var_200 := edge_tiocmget(out_$p1068);
    goto corral_source_split_10399;

  corral_source_split_10397:
    assume {:verifier.code 0} true;
    out_$p1068 := $M.44;
    goto corral_source_split_10398;

  $bb830:
    assume out_$i1067 == 1;
    goto corral_source_split_10397;

  corral_source_split_10395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb830, $bb831;

  corral_source_split_10394:
    assume {:verifier.code 0} true;
    out_$i1067 := $eq.i32(out_$i1066, 3);
    goto corral_source_split_10395;

  $bb829:
    assume {:verifier.code 0} true;
    out_$i1066 := $M.49;
    goto corral_source_split_10394;

  $bb828:
    assume !(out_$i1063 == 1);
    assume {:verifier.code 0} true;
    goto $bb829;

  corral_source_split_10392:
    assume {:verifier.code 0} true;
    goto $bb829;

  corral_source_split_10391:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1789} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10392;

  corral_source_split_10390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1788} out_vslice_dummy_var_199 := edge_tiocmget(out_$p1064);
    goto corral_source_split_10391;

  corral_source_split_10389:
    assume {:verifier.code 0} true;
    out_$p1064 := $M.44;
    goto corral_source_split_10390;

  $bb827:
    assume out_$i1063 == 1;
    goto corral_source_split_10389;

  corral_source_split_10387:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb827, $bb828;

  corral_source_split_10386:
    assume {:verifier.code 0} true;
    out_$i1063 := $eq.i32(out_$i1062, 1);
    goto corral_source_split_10387;

  $bb826:
    assume {:verifier.code 0} true;
    out_$i1062 := $M.49;
    goto corral_source_split_10386;

  $bb825:
    assume !(out_$i1059 == 1);
    assume {:verifier.code 0} true;
    goto $bb826;

  corral_source_split_10384:
    assume {:verifier.code 0} true;
    goto $bb826;

  corral_source_split_10383:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1787} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10384;

  corral_source_split_10382:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1786} out_vslice_dummy_var_198 := edge_tiocmget(out_$p1060);
    goto corral_source_split_10383;

  corral_source_split_10381:
    assume {:verifier.code 0} true;
    out_$p1060 := $M.44;
    goto corral_source_split_10382;

  $bb824:
    assume out_$i1059 == 1;
    goto corral_source_split_10381;

  corral_source_split_9821:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb824, $bb825;

  corral_source_split_9820:
    assume {:verifier.code 0} true;
    out_$i1059 := $eq.i32(out_$i1058, 4);
    goto corral_source_split_9821;

  corral_source_split_9819:
    assume {:verifier.code 0} true;
    out_$i1058 := $M.49;
    goto corral_source_split_9820;

  $bb594:
    assume out_$i776 == 1;
    goto corral_source_split_9819;

  $bb593:
    assume !(out_$i775 == 1);
    assume {:verifier.code 0} true;
    out_$i776 := $slt.i32(out_$i772, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb594, $bb595;

  $bb846:
    assume !(out_$i1084 == 1);
    assume {:verifier.code 0} true;
    goto $bb847;

  corral_source_split_10437:
    assume {:verifier.code 0} true;
    goto $bb847;

  corral_source_split_10436:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10437;

  SeqInstr_561:
    goto corral_source_split_10436;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_10435:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1800} edge_bulk_in_callback(out_$p1085);
    goto SeqInstr_560;

  corral_source_split_10434:
    assume {:verifier.code 0} true;
    out_$p1085 := $M.41;
    goto corral_source_split_10435;

  $bb845:
    assume out_$i1084 == 1;
    goto corral_source_split_10434;

  corral_source_split_10432:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb845, $bb846;

  corral_source_split_10431:
    assume {:verifier.code 0} true;
    out_$i1084 := $eq.i32(out_$i1083, 2);
    goto corral_source_split_10432;

  $bb844:
    assume {:verifier.code 0} true;
    out_$i1083 := $M.49;
    goto corral_source_split_10431;

  $bb843:
    assume !(out_$i1081 == 1);
    assume {:verifier.code 0} true;
    goto $bb844;

  corral_source_split_10429:
    assume {:verifier.code 0} true;
    goto $bb844;

  corral_source_split_10428:
    assume {:verifier.code 0} true;
    $M.49 := 3;
    call {:si_unique_call 1799} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_10429;

  SeqInstr_558:
    goto corral_source_split_10428;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_10427:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1798} edge_bulk_in_callback(out_$p1082);
    goto SeqInstr_557;

  corral_source_split_10426:
    assume {:verifier.code 0} true;
    out_$p1082 := $M.41;
    goto corral_source_split_10427;

  $bb842:
    assume out_$i1081 == 1;
    goto corral_source_split_10426;

  corral_source_split_10424:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb842, $bb843;

  corral_source_split_10423:
    assume {:verifier.code 0} true;
    out_$i1081 := $eq.i32(out_$i1080, 3);
    goto corral_source_split_10424;

  $bb841:
    assume {:verifier.code 0} true;
    out_$i1080 := $M.49;
    goto corral_source_split_10423;

  $bb840:
    assume !(out_$i1078 == 1);
    assume {:verifier.code 0} true;
    goto $bb841;

  corral_source_split_10421:
    assume {:verifier.code 0} true;
    goto $bb841;

  corral_source_split_10420:
    assume {:verifier.code 0} true;
    $M.49 := 1;
    call {:si_unique_call 1797} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_10421;

  SeqInstr_555:
    goto corral_source_split_10420;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_10419:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1796} edge_bulk_in_callback(out_$p1079);
    goto SeqInstr_554;

  corral_source_split_10418:
    assume {:verifier.code 0} true;
    out_$p1079 := $M.41;
    goto corral_source_split_10419;

  $bb839:
    assume out_$i1078 == 1;
    goto corral_source_split_10418;

  corral_source_split_10416:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb839, $bb840;

  corral_source_split_10415:
    assume {:verifier.code 0} true;
    out_$i1078 := $eq.i32(out_$i1077, 1);
    goto corral_source_split_10416;

  $bb838:
    assume {:verifier.code 0} true;
    out_$i1077 := $M.49;
    goto corral_source_split_10415;

  $bb837:
    assume !(out_$i1075 == 1);
    assume {:verifier.code 0} true;
    goto $bb838;

  corral_source_split_10413:
    assume {:verifier.code 0} true;
    goto $bb838;

  corral_source_split_10412:
    assume {:verifier.code 0} true;
    $M.49 := 4;
    call {:si_unique_call 1795} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(4);
    goto corral_source_split_10413;

  SeqInstr_552:
    goto corral_source_split_10412;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_10411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1794} edge_bulk_in_callback(out_$p1076);
    goto SeqInstr_551;

  corral_source_split_10410:
    assume {:verifier.code 0} true;
    out_$p1076 := $M.41;
    goto corral_source_split_10411;

  $bb836:
    assume out_$i1075 == 1;
    goto corral_source_split_10410;

  corral_source_split_9825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb836, $bb837;

  corral_source_split_9824:
    assume {:verifier.code 0} true;
    out_$i1075 := $eq.i32(out_$i1074, 4);
    goto corral_source_split_9825;

  corral_source_split_9823:
    assume {:verifier.code 0} true;
    out_$i1074 := $M.49;
    goto corral_source_split_9824;

  $bb596:
    assume out_$i777 == 1;
    goto corral_source_split_9823;

  $bb595:
    assume !(out_$i776 == 1);
    assume {:verifier.code 0} true;
    out_$i777 := $slt.i32(out_$i772, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb596, $bb597;

  $bb849:
    assume !(out_$i1087 == 1);
    assume {:verifier.code 0} true;
    goto $bb850;

  corral_source_split_10444:
    assume {:verifier.code 0} true;
    goto $bb850;

  corral_source_split_10443:
    assume {:verifier.code 0} true;
    $M.47 := out_$i1090;
    call {:si_unique_call 1804} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i1090);
    goto corral_source_split_10444;

  corral_source_split_10442:
    assume {:verifier.code 0} true;
    out_$i1090 := $add.i32(out_$i1089, 1);
    goto corral_source_split_10443;

  corral_source_split_10441:
    assume {:verifier.code 0} true;
    out_$i1089 := $M.47;
    goto corral_source_split_10442;

  corral_source_split_10440:
    assume {:verifier.code 0} true;
    $M.49 := 2;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_10441;

  corral_source_split_10439:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1802} out_vslice_dummy_var_202 := ldv_probe_3();
    goto corral_source_split_10440;

  $bb848:
    assume out_$i1087 == 1;
    goto corral_source_split_10439;

  corral_source_split_9829:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb848, $bb849;

  corral_source_split_9828:
    assume {:verifier.code 0} true;
    out_$i1087 := $eq.i32(out_$i1086, 1);
    goto corral_source_split_9829;

  corral_source_split_9827:
    assume {:verifier.code 0} true;
    out_$i1086 := $M.49;
    goto corral_source_split_9828;

  $bb598:
    assume out_$i778 == 1;
    goto corral_source_split_9827;

  $bb597:
    assume !(out_$i777 == 1);
    assume {:verifier.code 0} true;
    out_$i778 := $eq.i32(out_$i772, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb598, $bb599;

  corral_source_split_10446:
    assume {:verifier.code 0} true;
    goto $bb852;

  $bb851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1805} ldv_stop();
    goto corral_source_split_10446;

  $bb600:
    assume {:verifier.code 0} true;
    goto $bb851;

  $bb599:
    assume {:verifier.code 0} true;
    assume !(out_$i778 == 1);
    goto $bb600;

  $bb636:
    assume {:verifier.code 0} true;
    assume !(out_$i796 == 1);
    goto $bb600;

  $bb855:
    assume !(out_$i1092 == 1);
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb918:
    assume {:verifier.code 0} true;
    goto $bb1122;

  $bb1121:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1119:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1116:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1104:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1092:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1080:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1074:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1062:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1050:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1047:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1044:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1038:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1026:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1014:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb1002:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb990:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb987:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb975:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb972:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb960:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb948:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb942:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb930:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb917:
    assume {:verifier.code 0} true;
    goto $bb918;

  $bb916:
    assume !(out_$i1128 == 1);
    assume {:verifier.code 0} true;
    goto $bb917;

  corral_source_split_10569:
    assume {:verifier.code 0} true;
    goto $bb917;

  corral_source_split_10568:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1816} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10569;

  SeqInstr_573:
    goto corral_source_split_10568;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_10567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1815} edge_throttle(out_$p1129);
    goto SeqInstr_572;

  corral_source_split_10566:
    assume {:verifier.code 0} true;
    out_$p1129 := $M.40;
    goto corral_source_split_10567;

  $bb915:
    assume out_$i1128 == 1;
    goto corral_source_split_10566;

  corral_source_split_10564:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb915, $bb916;

  corral_source_split_10563:
    assume {:verifier.code 0} true;
    out_$i1128 := $eq.i32(out_$i1127, 2);
    goto corral_source_split_10564;

  $bb914:
    assume {:verifier.code 0} true;
    out_$i1127 := $M.50;
    goto corral_source_split_10563;

  $bb913:
    assume !(out_$i1125 == 1);
    assume {:verifier.code 0} true;
    goto $bb914;

  corral_source_split_10561:
    assume {:verifier.code 0} true;
    goto $bb914;

  corral_source_split_10560:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1814} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10561;

  SeqInstr_570:
    goto corral_source_split_10560;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_10559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1813} edge_throttle(out_$p1126);
    goto SeqInstr_569;

  corral_source_split_10558:
    assume {:verifier.code 0} true;
    out_$p1126 := $M.40;
    goto corral_source_split_10559;

  $bb912:
    assume out_$i1125 == 1;
    goto corral_source_split_10558;

  corral_source_split_10556:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb912, $bb913;

  corral_source_split_10555:
    assume {:verifier.code 0} true;
    out_$i1125 := $eq.i32(out_$i1124, 3);
    goto corral_source_split_10556;

  $bb911:
    assume {:verifier.code 0} true;
    out_$i1124 := $M.50;
    goto corral_source_split_10555;

  $bb910:
    assume !(out_$i1122 == 1);
    assume {:verifier.code 0} true;
    goto $bb911;

  corral_source_split_10553:
    assume {:verifier.code 0} true;
    goto $bb911;

  corral_source_split_10552:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1812} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10553;

  SeqInstr_567:
    goto corral_source_split_10552;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_10551:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1811} edge_throttle(out_$p1123);
    goto SeqInstr_566;

  corral_source_split_10550:
    assume {:verifier.code 0} true;
    out_$p1123 := $M.40;
    goto corral_source_split_10551;

  $bb909:
    assume out_$i1122 == 1;
    goto corral_source_split_10550;

  corral_source_split_10548:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb909, $bb910;

  corral_source_split_10547:
    assume {:verifier.code 0} true;
    out_$i1122 := $eq.i32(out_$i1121, 1);
    goto corral_source_split_10548;

  $bb908:
    assume {:verifier.code 0} true;
    out_$i1121 := $M.50;
    goto corral_source_split_10547;

  $bb907:
    assume !(out_$i1119 == 1);
    assume {:verifier.code 0} true;
    goto $bb908;

  corral_source_split_10545:
    assume {:verifier.code 0} true;
    goto $bb908;

  corral_source_split_10544:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1810} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10545;

  SeqInstr_564:
    goto corral_source_split_10544;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_10543:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1809} edge_throttle(out_$p1120);
    goto SeqInstr_563;

  corral_source_split_10542:
    assume {:verifier.code 0} true;
    out_$p1120 := $M.40;
    goto corral_source_split_10543;

  $bb906:
    assume out_$i1119 == 1;
    goto corral_source_split_10542;

  corral_source_split_10540:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb906, $bb907;

  corral_source_split_10539:
    assume {:verifier.code 0} true;
    out_$i1119 := $eq.i32(out_$i1118, 4);
    goto corral_source_split_10540;

  corral_source_split_10538:
    assume {:verifier.code 0} true;
    out_$i1118 := $M.50;
    goto corral_source_split_10539;

  $bb904:
    assume out_$i1117 == 1;
    goto corral_source_split_10538;

  $bb902:
    assume out_$i1116 == 1;
    assume {:verifier.code 0} true;
    out_$i1117 := $eq.i32(out_$i1093, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb904, $bb905;

  $bb896:
    assume out_$i1113 == 1;
    assume {:verifier.code 0} true;
    out_$i1116 := $slt.i32(out_$i1093, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb902, $bb903;

  $bb884:
    assume out_$i1107 == 1;
    assume {:verifier.code 0} true;
    out_$i1113 := $slt.i32(out_$i1093, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb896, $bb897;

  $bb857:
    assume out_$i1094 == 1;
    assume {:verifier.code 0} true;
    out_$i1107 := $slt.i32(out_$i1093, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb884, $bb885;

  $bb856:
    assume {:verifier.code 0} true;
    out_$i1094 := $slt.i32(out_$i1093, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb857, $bb858;

  corral_source_split_10448:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1806} out_$i1093 := __VERIFIER_nondet_int();
    call {:si_unique_call 1807} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i1093);
    call {:si_unique_call 1808} {:cexpr "tmp___16"} boogie_si_record_i32(out_$i1093);
    assume {:verifier.code 0} true;
    goto $bb856;

  $bb854:
    assume out_$i1092 == 1;
    goto corral_source_split_10448;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb854, $bb855;

  corral_source_split_8499:
    assume {:verifier.code 0} true;
    out_$i1092 := $ne.i32(out_$i1091, 0);
    goto corral_source_split_8500;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    out_$i1091 := $M.50;
    goto corral_source_split_8499;

  $bb9:
    assume out_$i108 == 1;
    goto corral_source_split_8498;

  $bb8:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i104, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb929:
    assume !(out_$i1143 == 1);
    assume {:verifier.code 0} true;
    goto $bb930;

  corral_source_split_10598:
    assume {:verifier.code 0} true;
    goto $bb930;

  corral_source_split_10597:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1824} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10598;

  corral_source_split_10596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1823} out_vslice_dummy_var_206 := usb_serial_generic_get_icount(out_$p1144, in_$p44);
    goto corral_source_split_10597;

  corral_source_split_10595:
    assume {:verifier.code 0} true;
    out_$p1144 := $M.40;
    goto corral_source_split_10596;

  $bb928:
    assume out_$i1143 == 1;
    goto corral_source_split_10595;

  corral_source_split_10593:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb928, $bb929;

  corral_source_split_10592:
    assume {:verifier.code 0} true;
    out_$i1143 := $eq.i32(out_$i1142, 2);
    goto corral_source_split_10593;

  $bb927:
    assume {:verifier.code 0} true;
    out_$i1142 := $M.50;
    goto corral_source_split_10592;

  $bb926:
    assume !(out_$i1139 == 1);
    assume {:verifier.code 0} true;
    goto $bb927;

  corral_source_split_10590:
    assume {:verifier.code 0} true;
    goto $bb927;

  corral_source_split_10589:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1822} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10590;

  corral_source_split_10588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1821} out_vslice_dummy_var_205 := usb_serial_generic_get_icount(out_$p1140, in_$p44);
    goto corral_source_split_10589;

  corral_source_split_10587:
    assume {:verifier.code 0} true;
    out_$p1140 := $M.40;
    goto corral_source_split_10588;

  $bb925:
    assume out_$i1139 == 1;
    goto corral_source_split_10587;

  corral_source_split_10585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb925, $bb926;

  corral_source_split_10584:
    assume {:verifier.code 0} true;
    out_$i1139 := $eq.i32(out_$i1138, 3);
    goto corral_source_split_10585;

  $bb924:
    assume {:verifier.code 0} true;
    out_$i1138 := $M.50;
    goto corral_source_split_10584;

  $bb923:
    assume !(out_$i1135 == 1);
    assume {:verifier.code 0} true;
    goto $bb924;

  corral_source_split_10582:
    assume {:verifier.code 0} true;
    goto $bb924;

  corral_source_split_10581:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1820} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10582;

  corral_source_split_10580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1819} out_vslice_dummy_var_204 := usb_serial_generic_get_icount(out_$p1136, in_$p44);
    goto corral_source_split_10581;

  corral_source_split_10579:
    assume {:verifier.code 0} true;
    out_$p1136 := $M.40;
    goto corral_source_split_10580;

  $bb922:
    assume out_$i1135 == 1;
    goto corral_source_split_10579;

  corral_source_split_10577:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb922, $bb923;

  corral_source_split_10576:
    assume {:verifier.code 0} true;
    out_$i1135 := $eq.i32(out_$i1134, 1);
    goto corral_source_split_10577;

  $bb921:
    assume {:verifier.code 0} true;
    out_$i1134 := $M.50;
    goto corral_source_split_10576;

  $bb920:
    assume !(out_$i1131 == 1);
    assume {:verifier.code 0} true;
    goto $bb921;

  corral_source_split_10574:
    assume {:verifier.code 0} true;
    goto $bb921;

  corral_source_split_10573:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1818} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10574;

  corral_source_split_10572:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1817} out_vslice_dummy_var_203 := usb_serial_generic_get_icount(out_$p1132, in_$p44);
    goto corral_source_split_10573;

  corral_source_split_10571:
    assume {:verifier.code 0} true;
    out_$p1132 := $M.40;
    goto corral_source_split_10572;

  $bb919:
    assume out_$i1131 == 1;
    goto corral_source_split_10571;

  corral_source_split_10536:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb919, $bb920;

  corral_source_split_10535:
    assume {:verifier.code 0} true;
    out_$i1131 := $eq.i32(out_$i1130, 4);
    goto corral_source_split_10536;

  corral_source_split_10534:
    assume {:verifier.code 0} true;
    out_$i1130 := $M.50;
    goto corral_source_split_10535;

  $bb903:
    assume !(out_$i1116 == 1);
    goto corral_source_split_10534;

  $bb941:
    assume !(out_$i1159 == 1);
    assume {:verifier.code 0} true;
    goto $bb942;

  corral_source_split_10627:
    assume {:verifier.code 0} true;
    goto $bb942;

  corral_source_split_10626:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1832} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10627;

  SeqInstr_585:
    goto corral_source_split_10626;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  corral_source_split_10625:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1831} out_vslice_dummy_var_210 := edge_port_probe(out_$p1160);
    goto SeqInstr_584;

  corral_source_split_10624:
    assume {:verifier.code 0} true;
    out_$p1160 := $M.38;
    goto corral_source_split_10625;

  $bb940:
    assume out_$i1159 == 1;
    goto corral_source_split_10624;

  corral_source_split_10622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb940, $bb941;

  corral_source_split_10621:
    assume {:verifier.code 0} true;
    out_$i1159 := $eq.i32(out_$i1158, 2);
    goto corral_source_split_10622;

  $bb939:
    assume {:verifier.code 0} true;
    out_$i1158 := $M.50;
    goto corral_source_split_10621;

  $bb938:
    assume !(out_$i1155 == 1);
    assume {:verifier.code 0} true;
    goto $bb939;

  corral_source_split_10619:
    assume {:verifier.code 0} true;
    goto $bb939;

  corral_source_split_10618:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1830} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10619;

  SeqInstr_582:
    goto corral_source_split_10618;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  corral_source_split_10617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1829} out_vslice_dummy_var_209 := edge_port_probe(out_$p1156);
    goto SeqInstr_581;

  corral_source_split_10616:
    assume {:verifier.code 0} true;
    out_$p1156 := $M.38;
    goto corral_source_split_10617;

  $bb937:
    assume out_$i1155 == 1;
    goto corral_source_split_10616;

  corral_source_split_10614:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb937, $bb938;

  corral_source_split_10613:
    assume {:verifier.code 0} true;
    out_$i1155 := $eq.i32(out_$i1154, 3);
    goto corral_source_split_10614;

  $bb936:
    assume {:verifier.code 0} true;
    out_$i1154 := $M.50;
    goto corral_source_split_10613;

  $bb935:
    assume !(out_$i1151 == 1);
    assume {:verifier.code 0} true;
    goto $bb936;

  corral_source_split_10611:
    assume {:verifier.code 0} true;
    goto $bb936;

  corral_source_split_10610:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1828} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10611;

  SeqInstr_579:
    goto corral_source_split_10610;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_10609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1827} out_vslice_dummy_var_208 := edge_port_probe(out_$p1152);
    goto SeqInstr_578;

  corral_source_split_10608:
    assume {:verifier.code 0} true;
    out_$p1152 := $M.38;
    goto corral_source_split_10609;

  $bb934:
    assume out_$i1151 == 1;
    goto corral_source_split_10608;

  corral_source_split_10606:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb934, $bb935;

  corral_source_split_10605:
    assume {:verifier.code 0} true;
    out_$i1151 := $eq.i32(out_$i1150, 1);
    goto corral_source_split_10606;

  $bb933:
    assume {:verifier.code 0} true;
    out_$i1150 := $M.50;
    goto corral_source_split_10605;

  $bb932:
    assume !(out_$i1147 == 1);
    assume {:verifier.code 0} true;
    goto $bb933;

  corral_source_split_10603:
    assume {:verifier.code 0} true;
    goto $bb933;

  corral_source_split_10602:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1826} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10603;

  SeqInstr_576:
    goto corral_source_split_10602;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_10601:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1825} out_vslice_dummy_var_207 := edge_port_probe(out_$p1148);
    goto SeqInstr_575;

  corral_source_split_10600:
    assume {:verifier.code 0} true;
    out_$p1148 := $M.38;
    goto corral_source_split_10601;

  $bb931:
    assume out_$i1147 == 1;
    goto corral_source_split_10600;

  corral_source_split_10524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb931, $bb932;

  corral_source_split_10523:
    assume {:verifier.code 0} true;
    out_$i1147 := $eq.i32(out_$i1146, 4);
    goto corral_source_split_10524;

  corral_source_split_10522:
    assume {:verifier.code 0} true;
    out_$i1146 := $M.50;
    goto corral_source_split_10523;

  $bb898:
    assume out_$i1114 == 1;
    goto corral_source_split_10522;

  $bb897:
    assume !(out_$i1113 == 1);
    assume {:verifier.code 0} true;
    out_$i1114 := $slt.i32(out_$i1093, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb898, $bb899;

  $bb944:
    assume !(out_$i1163 == 1);
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb947:
    assume {:verifier.code 0} true;
    goto $bb948;

  $bb946:
    assume !(out_$i1168 == 1);
    assume {:verifier.code 0} true;
    goto $bb947;

  corral_source_split_10638:
    assume {:verifier.code 0} true;
    goto $bb947;

  corral_source_split_10637:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1835} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10638;

  $bb945:
    assume out_$i1168 == 1;
    goto corral_source_split_10637;

  corral_source_split_10635:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb945, $bb946;

  corral_source_split_10634:
    assume {:verifier.code 0} true;
    out_$i1168 := $eq.i32(out_$i1167, 0);
    goto corral_source_split_10635;

  corral_source_split_10633:
    assume {:verifier.code 0} true;
    out_$i1167 := $M.58;
    goto corral_source_split_10634;

  corral_source_split_10632:
    assume {:verifier.code 0} true;
    $M.58 := out_$i1166;
    call {:si_unique_call 1834} {:cexpr "ldv_retval_8"} boogie_si_record_i32(out_$i1166);
    goto corral_source_split_10633;

  SeqInstr_588:
    goto corral_source_split_10632;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  corral_source_split_10631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1833} out_$i1166 := edge_open(out_$p1164, out_$p1165);
    goto SeqInstr_587;

  corral_source_split_10630:
    assume {:verifier.code 0} true;
    out_$p1165 := $M.38;
    goto corral_source_split_10631;

  corral_source_split_10629:
    assume {:verifier.code 0} true;
    out_$p1164 := $M.40;
    goto corral_source_split_10630;

  $bb943:
    assume out_$i1163 == 1;
    goto corral_source_split_10629;

  corral_source_split_10528:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb943, $bb944;

  corral_source_split_10527:
    assume {:verifier.code 0} true;
    out_$i1163 := $eq.i32(out_$i1162, 3);
    goto corral_source_split_10528;

  corral_source_split_10526:
    assume {:verifier.code 0} true;
    out_$i1162 := $M.50;
    goto corral_source_split_10527;

  $bb900:
    assume out_$i1115 == 1;
    goto corral_source_split_10526;

  $bb899:
    assume !(out_$i1114 == 1);
    assume {:verifier.code 0} true;
    out_$i1115 := $slt.i32(out_$i1093, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb900, $bb901;

  $bb959:
    assume !(out_$i1179 == 1);
    assume {:verifier.code 0} true;
    goto $bb960;

  corral_source_split_10667:
    assume {:verifier.code 0} true;
    goto $bb960;

  corral_source_split_10666:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1843} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10667;

  SeqInstr_600:
    goto corral_source_split_10666;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  corral_source_split_10665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1842} edge_unthrottle(out_$p1180);
    goto SeqInstr_599;

  corral_source_split_10664:
    assume {:verifier.code 0} true;
    out_$p1180 := $M.40;
    goto corral_source_split_10665;

  $bb958:
    assume out_$i1179 == 1;
    goto corral_source_split_10664;

  corral_source_split_10662:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb958, $bb959;

  corral_source_split_10661:
    assume {:verifier.code 0} true;
    out_$i1179 := $eq.i32(out_$i1178, 2);
    goto corral_source_split_10662;

  $bb957:
    assume {:verifier.code 0} true;
    out_$i1178 := $M.50;
    goto corral_source_split_10661;

  $bb956:
    assume !(out_$i1176 == 1);
    assume {:verifier.code 0} true;
    goto $bb957;

  corral_source_split_10659:
    assume {:verifier.code 0} true;
    goto $bb957;

  corral_source_split_10658:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1841} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10659;

  SeqInstr_597:
    goto corral_source_split_10658;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  corral_source_split_10657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1840} edge_unthrottle(out_$p1177);
    goto SeqInstr_596;

  corral_source_split_10656:
    assume {:verifier.code 0} true;
    out_$p1177 := $M.40;
    goto corral_source_split_10657;

  $bb955:
    assume out_$i1176 == 1;
    goto corral_source_split_10656;

  corral_source_split_10654:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb955, $bb956;

  corral_source_split_10653:
    assume {:verifier.code 0} true;
    out_$i1176 := $eq.i32(out_$i1175, 3);
    goto corral_source_split_10654;

  $bb954:
    assume {:verifier.code 0} true;
    out_$i1175 := $M.50;
    goto corral_source_split_10653;

  $bb953:
    assume !(out_$i1173 == 1);
    assume {:verifier.code 0} true;
    goto $bb954;

  corral_source_split_10651:
    assume {:verifier.code 0} true;
    goto $bb954;

  corral_source_split_10650:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1839} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10651;

  SeqInstr_594:
    goto corral_source_split_10650;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  corral_source_split_10649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1838} edge_unthrottle(out_$p1174);
    goto SeqInstr_593;

  corral_source_split_10648:
    assume {:verifier.code 0} true;
    out_$p1174 := $M.40;
    goto corral_source_split_10649;

  $bb952:
    assume out_$i1173 == 1;
    goto corral_source_split_10648;

  corral_source_split_10646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb952, $bb953;

  corral_source_split_10645:
    assume {:verifier.code 0} true;
    out_$i1173 := $eq.i32(out_$i1172, 1);
    goto corral_source_split_10646;

  $bb951:
    assume {:verifier.code 0} true;
    out_$i1172 := $M.50;
    goto corral_source_split_10645;

  $bb950:
    assume !(out_$i1170 == 1);
    assume {:verifier.code 0} true;
    goto $bb951;

  corral_source_split_10643:
    assume {:verifier.code 0} true;
    goto $bb951;

  corral_source_split_10642:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1837} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10643;

  SeqInstr_591:
    goto corral_source_split_10642;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  corral_source_split_10641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1836} edge_unthrottle(out_$p1171);
    goto SeqInstr_590;

  corral_source_split_10640:
    assume {:verifier.code 0} true;
    out_$p1171 := $M.40;
    goto corral_source_split_10641;

  $bb949:
    assume out_$i1170 == 1;
    goto corral_source_split_10640;

  corral_source_split_10532:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb949, $bb950;

  corral_source_split_10531:
    assume {:verifier.code 0} true;
    out_$i1170 := $eq.i32(out_$i1169, 4);
    goto corral_source_split_10532;

  corral_source_split_10530:
    assume {:verifier.code 0} true;
    out_$i1169 := $M.50;
    goto corral_source_split_10531;

  $bb901:
    assume !(out_$i1115 == 1);
    goto corral_source_split_10530;

  $bb971:
    assume !(out_$i1194 == 1);
    assume {:verifier.code 0} true;
    goto $bb972;

  corral_source_split_10700:
    assume {:verifier.code 0} true;
    goto $bb972;

  corral_source_split_10699:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1851} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10700;

  SeqInstr_612:
    goto corral_source_split_10699;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  corral_source_split_10698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1850} edge_set_termios(out_$p1195, out_$p1196, in_$p46);
    goto SeqInstr_611;

  corral_source_split_10697:
    assume {:verifier.code 0} true;
    out_$p1196 := $M.38;
    goto corral_source_split_10698;

  corral_source_split_10696:
    assume {:verifier.code 0} true;
    out_$p1195 := $M.40;
    goto corral_source_split_10697;

  $bb970:
    assume out_$i1194 == 1;
    goto corral_source_split_10696;

  corral_source_split_10694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb970, $bb971;

  corral_source_split_10693:
    assume {:verifier.code 0} true;
    out_$i1194 := $eq.i32(out_$i1193, 2);
    goto corral_source_split_10694;

  $bb969:
    assume {:verifier.code 0} true;
    out_$i1193 := $M.50;
    goto corral_source_split_10693;

  $bb968:
    assume !(out_$i1190 == 1);
    assume {:verifier.code 0} true;
    goto $bb969;

  corral_source_split_10691:
    assume {:verifier.code 0} true;
    goto $bb969;

  corral_source_split_10690:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1849} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10691;

  SeqInstr_609:
    goto corral_source_split_10690;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  corral_source_split_10689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1848} edge_set_termios(out_$p1191, out_$p1192, in_$p46);
    goto SeqInstr_608;

  corral_source_split_10688:
    assume {:verifier.code 0} true;
    out_$p1192 := $M.38;
    goto corral_source_split_10689;

  corral_source_split_10687:
    assume {:verifier.code 0} true;
    out_$p1191 := $M.40;
    goto corral_source_split_10688;

  $bb967:
    assume out_$i1190 == 1;
    goto corral_source_split_10687;

  corral_source_split_10685:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb967, $bb968;

  corral_source_split_10684:
    assume {:verifier.code 0} true;
    out_$i1190 := $eq.i32(out_$i1189, 3);
    goto corral_source_split_10685;

  $bb966:
    assume {:verifier.code 0} true;
    out_$i1189 := $M.50;
    goto corral_source_split_10684;

  $bb965:
    assume !(out_$i1186 == 1);
    assume {:verifier.code 0} true;
    goto $bb966;

  corral_source_split_10682:
    assume {:verifier.code 0} true;
    goto $bb966;

  corral_source_split_10681:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1847} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10682;

  SeqInstr_606:
    goto corral_source_split_10681;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  corral_source_split_10680:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1846} edge_set_termios(out_$p1187, out_$p1188, in_$p46);
    goto SeqInstr_605;

  corral_source_split_10679:
    assume {:verifier.code 0} true;
    out_$p1188 := $M.38;
    goto corral_source_split_10680;

  corral_source_split_10678:
    assume {:verifier.code 0} true;
    out_$p1187 := $M.40;
    goto corral_source_split_10679;

  $bb964:
    assume out_$i1186 == 1;
    goto corral_source_split_10678;

  corral_source_split_10676:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb964, $bb965;

  corral_source_split_10675:
    assume {:verifier.code 0} true;
    out_$i1186 := $eq.i32(out_$i1185, 1);
    goto corral_source_split_10676;

  $bb963:
    assume {:verifier.code 0} true;
    out_$i1185 := $M.50;
    goto corral_source_split_10675;

  $bb962:
    assume !(out_$i1182 == 1);
    assume {:verifier.code 0} true;
    goto $bb963;

  corral_source_split_10673:
    assume {:verifier.code 0} true;
    goto $bb963;

  corral_source_split_10672:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1845} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10673;

  SeqInstr_603:
    goto corral_source_split_10672;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  corral_source_split_10671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1844} edge_set_termios(out_$p1183, out_$p1184, in_$p46);
    goto SeqInstr_602;

  corral_source_split_10670:
    assume {:verifier.code 0} true;
    out_$p1184 := $M.38;
    goto corral_source_split_10671;

  corral_source_split_10669:
    assume {:verifier.code 0} true;
    out_$p1183 := $M.40;
    goto corral_source_split_10670;

  $bb961:
    assume out_$i1182 == 1;
    goto corral_source_split_10669;

  corral_source_split_10512:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb961, $bb962;

  corral_source_split_10511:
    assume {:verifier.code 0} true;
    out_$i1182 := $eq.i32(out_$i1181, 4);
    goto corral_source_split_10512;

  corral_source_split_10510:
    assume {:verifier.code 0} true;
    out_$i1181 := $M.50;
    goto corral_source_split_10511;

  $bb892:
    assume out_$i1111 == 1;
    goto corral_source_split_10510;

  $bb886:
    assume out_$i1108 == 1;
    assume {:verifier.code 0} true;
    out_$i1111 := $slt.i32(out_$i1093, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb892, $bb893;

  $bb885:
    assume !(out_$i1107 == 1);
    assume {:verifier.code 0} true;
    out_$i1108 := $slt.i32(out_$i1093, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb886, $bb887;

  $bb974:
    assume !(out_$i1198 == 1);
    assume {:verifier.code 0} true;
    goto $bb975;

  corral_source_split_10705:
    assume {:verifier.code 0} true;
    goto $bb975;

  corral_source_split_10704:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1853} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10705;

  SeqInstr_615:
    goto corral_source_split_10704;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  corral_source_split_10703:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1852} edge_bulk_out_data_callback(out_$p1199);
    goto SeqInstr_614;

  corral_source_split_10702:
    assume {:verifier.code 0} true;
    out_$p1199 := $M.37;
    goto corral_source_split_10703;

  $bb973:
    assume out_$i1198 == 1;
    goto corral_source_split_10702;

  corral_source_split_10516:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb973, $bb974;

  corral_source_split_10515:
    assume {:verifier.code 0} true;
    out_$i1198 := $eq.i32(out_$i1197, 4);
    goto corral_source_split_10516;

  corral_source_split_10514:
    assume {:verifier.code 0} true;
    out_$i1197 := $M.50;
    goto corral_source_split_10515;

  $bb894:
    assume out_$i1112 == 1;
    goto corral_source_split_10514;

  $bb893:
    assume !(out_$i1111 == 1);
    assume {:verifier.code 0} true;
    out_$i1112 := $slt.i32(out_$i1093, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb894, $bb895;

  $bb986:
    assume !(out_$i1213 == 1);
    assume {:verifier.code 0} true;
    goto $bb987;

  corral_source_split_10734:
    assume {:verifier.code 0} true;
    goto $bb987;

  corral_source_split_10733:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1861} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10734;

  corral_source_split_10732:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1860} out_vslice_dummy_var_214 := edge_port_remove(out_$p1214);
    goto corral_source_split_10733;

  corral_source_split_10731:
    assume {:verifier.code 0} true;
    out_$p1214 := $M.38;
    goto corral_source_split_10732;

  $bb985:
    assume out_$i1213 == 1;
    goto corral_source_split_10731;

  corral_source_split_10729:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb985, $bb986;

  corral_source_split_10728:
    assume {:verifier.code 0} true;
    out_$i1213 := $eq.i32(out_$i1212, 2);
    goto corral_source_split_10729;

  $bb984:
    assume {:verifier.code 0} true;
    out_$i1212 := $M.50;
    goto corral_source_split_10728;

  $bb983:
    assume !(out_$i1209 == 1);
    assume {:verifier.code 0} true;
    goto $bb984;

  corral_source_split_10726:
    assume {:verifier.code 0} true;
    goto $bb984;

  corral_source_split_10725:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1859} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10726;

  corral_source_split_10724:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1858} out_vslice_dummy_var_213 := edge_port_remove(out_$p1210);
    goto corral_source_split_10725;

  corral_source_split_10723:
    assume {:verifier.code 0} true;
    out_$p1210 := $M.38;
    goto corral_source_split_10724;

  $bb982:
    assume out_$i1209 == 1;
    goto corral_source_split_10723;

  corral_source_split_10721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb982, $bb983;

  corral_source_split_10720:
    assume {:verifier.code 0} true;
    out_$i1209 := $eq.i32(out_$i1208, 3);
    goto corral_source_split_10721;

  $bb981:
    assume {:verifier.code 0} true;
    out_$i1208 := $M.50;
    goto corral_source_split_10720;

  $bb980:
    assume !(out_$i1205 == 1);
    assume {:verifier.code 0} true;
    goto $bb981;

  corral_source_split_10718:
    assume {:verifier.code 0} true;
    goto $bb981;

  corral_source_split_10717:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1857} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10718;

  corral_source_split_10716:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1856} out_vslice_dummy_var_212 := edge_port_remove(out_$p1206);
    goto corral_source_split_10717;

  corral_source_split_10715:
    assume {:verifier.code 0} true;
    out_$p1206 := $M.38;
    goto corral_source_split_10716;

  $bb979:
    assume out_$i1205 == 1;
    goto corral_source_split_10715;

  corral_source_split_10713:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb979, $bb980;

  corral_source_split_10712:
    assume {:verifier.code 0} true;
    out_$i1205 := $eq.i32(out_$i1204, 1);
    goto corral_source_split_10713;

  $bb978:
    assume {:verifier.code 0} true;
    out_$i1204 := $M.50;
    goto corral_source_split_10712;

  $bb977:
    assume !(out_$i1201 == 1);
    assume {:verifier.code 0} true;
    goto $bb978;

  corral_source_split_10710:
    assume {:verifier.code 0} true;
    goto $bb978;

  corral_source_split_10709:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1855} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10710;

  corral_source_split_10708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1854} out_vslice_dummy_var_211 := edge_port_remove(out_$p1202);
    goto corral_source_split_10709;

  corral_source_split_10707:
    assume {:verifier.code 0} true;
    out_$p1202 := $M.38;
    goto corral_source_split_10708;

  $bb976:
    assume out_$i1201 == 1;
    goto corral_source_split_10707;

  corral_source_split_10520:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb976, $bb977;

  corral_source_split_10519:
    assume {:verifier.code 0} true;
    out_$i1201 := $eq.i32(out_$i1200, 4);
    goto corral_source_split_10520;

  corral_source_split_10518:
    assume {:verifier.code 0} true;
    out_$i1200 := $M.50;
    goto corral_source_split_10519;

  $bb895:
    assume !(out_$i1112 == 1);
    goto corral_source_split_10518;

  $bb989:
    assume !(out_$i1217 == 1);
    assume {:verifier.code 0} true;
    goto $bb990;

  corral_source_split_10742:
    assume {:verifier.code 0} true;
    goto $bb990;

  corral_source_split_10741:
    assume {:verifier.code 0} true;
    $M.47 := out_$i1220;
    call {:si_unique_call 1864} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i1220);
    goto corral_source_split_10742;

  corral_source_split_10740:
    assume {:verifier.code 0} true;
    out_$i1220 := $sub.i32(out_$i1219, 1);
    goto corral_source_split_10741;

  corral_source_split_10739:
    assume {:verifier.code 0} true;
    out_$i1219 := $M.47;
    goto corral_source_split_10740;

  corral_source_split_10738:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1863} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10739;

  corral_source_split_10737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1862} edge_release(out_$p1218);
    goto corral_source_split_10738;

  corral_source_split_10736:
    assume {:verifier.code 0} true;
    out_$p1218 := $M.39;
    goto corral_source_split_10737;

  $bb988:
    assume out_$i1217 == 1;
    goto corral_source_split_10736;

  corral_source_split_10500:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb988, $bb989;

  corral_source_split_10499:
    assume {:verifier.code 0} true;
    out_$i1217 := $eq.i32(out_$i1216, 2);
    goto corral_source_split_10500;

  corral_source_split_10498:
    assume {:verifier.code 0} true;
    out_$i1216 := $M.50;
    goto corral_source_split_10499;

  $bb888:
    assume out_$i1109 == 1;
    goto corral_source_split_10498;

  $bb887:
    assume !(out_$i1108 == 1);
    assume {:verifier.code 0} true;
    out_$i1109 := $slt.i32(out_$i1093, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb888, $bb889;

  $bb1001:
    assume !(out_$i1240 == 1);
    assume {:verifier.code 0} true;
    goto $bb1002;

  corral_source_split_10779:
    assume {:verifier.code 0} true;
    goto $bb1002;

  corral_source_split_10778:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1872} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10779;

  corral_source_split_10777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1871} out_vslice_dummy_var_218 := edge_ioctl(out_$p1241, out_$i1242, out_$i1243);
    goto corral_source_split_10778;

  corral_source_split_10776:
    assume {:verifier.code 0} true;
    out_$i1243 := $load.i64($M.28, in_$p26);
    goto corral_source_split_10777;

  corral_source_split_10775:
    assume {:verifier.code 0} true;
    out_$i1242 := $load.i32($M.28, in_$p25);
    goto corral_source_split_10776;

  corral_source_split_10774:
    assume {:verifier.code 0} true;
    out_$p1241 := $M.40;
    goto corral_source_split_10775;

  $bb1000:
    assume out_$i1240 == 1;
    goto corral_source_split_10774;

  corral_source_split_10772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1000, $bb1001;

  corral_source_split_10771:
    assume {:verifier.code 0} true;
    out_$i1240 := $eq.i32(out_$i1239, 2);
    goto corral_source_split_10772;

  $bb999:
    assume {:verifier.code 0} true;
    out_$i1239 := $M.50;
    goto corral_source_split_10771;

  $bb998:
    assume !(out_$i1234 == 1);
    assume {:verifier.code 0} true;
    goto $bb999;

  corral_source_split_10769:
    assume {:verifier.code 0} true;
    goto $bb999;

  corral_source_split_10768:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1870} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10769;

  corral_source_split_10767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1869} out_vslice_dummy_var_217 := edge_ioctl(out_$p1235, out_$i1236, out_$i1237);
    goto corral_source_split_10768;

  corral_source_split_10766:
    assume {:verifier.code 0} true;
    out_$i1237 := $load.i64($M.28, in_$p26);
    goto corral_source_split_10767;

  corral_source_split_10765:
    assume {:verifier.code 0} true;
    out_$i1236 := $load.i32($M.28, in_$p25);
    goto corral_source_split_10766;

  corral_source_split_10764:
    assume {:verifier.code 0} true;
    out_$p1235 := $M.40;
    goto corral_source_split_10765;

  $bb997:
    assume out_$i1234 == 1;
    goto corral_source_split_10764;

  corral_source_split_10762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb997, $bb998;

  corral_source_split_10761:
    assume {:verifier.code 0} true;
    out_$i1234 := $eq.i32(out_$i1233, 3);
    goto corral_source_split_10762;

  $bb996:
    assume {:verifier.code 0} true;
    out_$i1233 := $M.50;
    goto corral_source_split_10761;

  $bb995:
    assume !(out_$i1228 == 1);
    assume {:verifier.code 0} true;
    goto $bb996;

  corral_source_split_10759:
    assume {:verifier.code 0} true;
    goto $bb996;

  corral_source_split_10758:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1868} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10759;

  corral_source_split_10757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1867} out_vslice_dummy_var_216 := edge_ioctl(out_$p1229, out_$i1230, out_$i1231);
    goto corral_source_split_10758;

  corral_source_split_10756:
    assume {:verifier.code 0} true;
    out_$i1231 := $load.i64($M.28, in_$p26);
    goto corral_source_split_10757;

  corral_source_split_10755:
    assume {:verifier.code 0} true;
    out_$i1230 := $load.i32($M.28, in_$p25);
    goto corral_source_split_10756;

  corral_source_split_10754:
    assume {:verifier.code 0} true;
    out_$p1229 := $M.40;
    goto corral_source_split_10755;

  $bb994:
    assume out_$i1228 == 1;
    goto corral_source_split_10754;

  corral_source_split_10752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb994, $bb995;

  corral_source_split_10751:
    assume {:verifier.code 0} true;
    out_$i1228 := $eq.i32(out_$i1227, 1);
    goto corral_source_split_10752;

  $bb993:
    assume {:verifier.code 0} true;
    out_$i1227 := $M.50;
    goto corral_source_split_10751;

  $bb992:
    assume !(out_$i1222 == 1);
    assume {:verifier.code 0} true;
    goto $bb993;

  corral_source_split_10749:
    assume {:verifier.code 0} true;
    goto $bb993;

  corral_source_split_10748:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1866} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10749;

  corral_source_split_10747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1865} out_vslice_dummy_var_215 := edge_ioctl(out_$p1223, out_$i1224, out_$i1225);
    goto corral_source_split_10748;

  corral_source_split_10746:
    assume {:verifier.code 0} true;
    out_$i1225 := $load.i64($M.28, in_$p26);
    goto corral_source_split_10747;

  corral_source_split_10745:
    assume {:verifier.code 0} true;
    out_$i1224 := $load.i32($M.28, in_$p25);
    goto corral_source_split_10746;

  corral_source_split_10744:
    assume {:verifier.code 0} true;
    out_$p1223 := $M.40;
    goto corral_source_split_10745;

  $bb991:
    assume out_$i1222 == 1;
    goto corral_source_split_10744;

  corral_source_split_10504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb991, $bb992;

  corral_source_split_10503:
    assume {:verifier.code 0} true;
    out_$i1222 := $eq.i32(out_$i1221, 4);
    goto corral_source_split_10504;

  corral_source_split_10502:
    assume {:verifier.code 0} true;
    out_$i1221 := $M.50;
    goto corral_source_split_10503;

  $bb890:
    assume out_$i1110 == 1;
    goto corral_source_split_10502;

  $bb889:
    assume !(out_$i1109 == 1);
    assume {:verifier.code 0} true;
    out_$i1110 := $slt.i32(out_$i1093, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb890, $bb891;

  $bb1013:
    assume !(out_$i1264 == 1);
    assume {:verifier.code 0} true;
    goto $bb1014;

  corral_source_split_10816:
    assume {:verifier.code 0} true;
    goto $bb1014;

  corral_source_split_10815:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1880} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10816;

  SeqInstr_627:
    goto corral_source_split_10815;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  corral_source_split_10814:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1879} out_vslice_dummy_var_222 := edge_tiocmset(out_$p1265, out_$i1266, out_$i1267);
    goto SeqInstr_626;

  corral_source_split_10813:
    assume {:verifier.code 0} true;
    out_$i1267 := $load.i32($M.28, in_$p27);
    goto corral_source_split_10814;

  corral_source_split_10812:
    assume {:verifier.code 0} true;
    out_$i1266 := $load.i32($M.28, in_$p21);
    goto corral_source_split_10813;

  corral_source_split_10811:
    assume {:verifier.code 0} true;
    out_$p1265 := $M.40;
    goto corral_source_split_10812;

  $bb1012:
    assume out_$i1264 == 1;
    goto corral_source_split_10811;

  corral_source_split_10809:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1012, $bb1013;

  corral_source_split_10808:
    assume {:verifier.code 0} true;
    out_$i1264 := $eq.i32(out_$i1263, 2);
    goto corral_source_split_10809;

  $bb1011:
    assume {:verifier.code 0} true;
    out_$i1263 := $M.50;
    goto corral_source_split_10808;

  $bb1010:
    assume !(out_$i1258 == 1);
    assume {:verifier.code 0} true;
    goto $bb1011;

  corral_source_split_10806:
    assume {:verifier.code 0} true;
    goto $bb1011;

  corral_source_split_10805:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1878} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10806;

  SeqInstr_624:
    goto corral_source_split_10805;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  corral_source_split_10804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1877} out_vslice_dummy_var_221 := edge_tiocmset(out_$p1259, out_$i1260, out_$i1261);
    goto SeqInstr_623;

  corral_source_split_10803:
    assume {:verifier.code 0} true;
    out_$i1261 := $load.i32($M.28, in_$p27);
    goto corral_source_split_10804;

  corral_source_split_10802:
    assume {:verifier.code 0} true;
    out_$i1260 := $load.i32($M.28, in_$p21);
    goto corral_source_split_10803;

  corral_source_split_10801:
    assume {:verifier.code 0} true;
    out_$p1259 := $M.40;
    goto corral_source_split_10802;

  $bb1009:
    assume out_$i1258 == 1;
    goto corral_source_split_10801;

  corral_source_split_10799:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1009, $bb1010;

  corral_source_split_10798:
    assume {:verifier.code 0} true;
    out_$i1258 := $eq.i32(out_$i1257, 3);
    goto corral_source_split_10799;

  $bb1008:
    assume {:verifier.code 0} true;
    out_$i1257 := $M.50;
    goto corral_source_split_10798;

  $bb1007:
    assume !(out_$i1252 == 1);
    assume {:verifier.code 0} true;
    goto $bb1008;

  corral_source_split_10796:
    assume {:verifier.code 0} true;
    goto $bb1008;

  corral_source_split_10795:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1876} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10796;

  SeqInstr_621:
    goto corral_source_split_10795;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  corral_source_split_10794:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1875} out_vslice_dummy_var_220 := edge_tiocmset(out_$p1253, out_$i1254, out_$i1255);
    goto SeqInstr_620;

  corral_source_split_10793:
    assume {:verifier.code 0} true;
    out_$i1255 := $load.i32($M.28, in_$p27);
    goto corral_source_split_10794;

  corral_source_split_10792:
    assume {:verifier.code 0} true;
    out_$i1254 := $load.i32($M.28, in_$p21);
    goto corral_source_split_10793;

  corral_source_split_10791:
    assume {:verifier.code 0} true;
    out_$p1253 := $M.40;
    goto corral_source_split_10792;

  $bb1006:
    assume out_$i1252 == 1;
    goto corral_source_split_10791;

  corral_source_split_10789:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1006, $bb1007;

  corral_source_split_10788:
    assume {:verifier.code 0} true;
    out_$i1252 := $eq.i32(out_$i1251, 1);
    goto corral_source_split_10789;

  $bb1005:
    assume {:verifier.code 0} true;
    out_$i1251 := $M.50;
    goto corral_source_split_10788;

  $bb1004:
    assume !(out_$i1246 == 1);
    assume {:verifier.code 0} true;
    goto $bb1005;

  corral_source_split_10786:
    assume {:verifier.code 0} true;
    goto $bb1005;

  corral_source_split_10785:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1874} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10786;

  SeqInstr_618:
    goto corral_source_split_10785;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  corral_source_split_10784:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1873} out_vslice_dummy_var_219 := edge_tiocmset(out_$p1247, out_$i1248, out_$i1249);
    goto SeqInstr_617;

  corral_source_split_10783:
    assume {:verifier.code 0} true;
    out_$i1249 := $load.i32($M.28, in_$p27);
    goto corral_source_split_10784;

  corral_source_split_10782:
    assume {:verifier.code 0} true;
    out_$i1248 := $load.i32($M.28, in_$p21);
    goto corral_source_split_10783;

  corral_source_split_10781:
    assume {:verifier.code 0} true;
    out_$p1247 := $M.40;
    goto corral_source_split_10782;

  $bb1003:
    assume out_$i1246 == 1;
    goto corral_source_split_10781;

  corral_source_split_10508:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1003, $bb1004;

  corral_source_split_10507:
    assume {:verifier.code 0} true;
    out_$i1246 := $eq.i32(out_$i1245, 4);
    goto corral_source_split_10508;

  corral_source_split_10506:
    assume {:verifier.code 0} true;
    out_$i1245 := $M.50;
    goto corral_source_split_10507;

  $bb891:
    assume !(out_$i1110 == 1);
    goto corral_source_split_10506;

  $bb1025:
    assume !(out_$i1288 == 1);
    assume {:verifier.code 0} true;
    goto $bb1026;

  corral_source_split_10853:
    assume {:verifier.code 0} true;
    goto $bb1026;

  corral_source_split_10852:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1888} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10853;

  SeqInstr_639:
    goto corral_source_split_10852;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  corral_source_split_10851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1887} out_vslice_dummy_var_226 := edge_write(out_$p1289, out_$p1290, in_$p47, out_$i1291);
    goto SeqInstr_638;

  corral_source_split_10850:
    assume {:verifier.code 0} true;
    out_$i1291 := $load.i32($M.28, in_$p22);
    goto corral_source_split_10851;

  corral_source_split_10849:
    assume {:verifier.code 0} true;
    out_$p1290 := $M.38;
    goto corral_source_split_10850;

  corral_source_split_10848:
    assume {:verifier.code 0} true;
    out_$p1289 := $M.40;
    goto corral_source_split_10849;

  $bb1024:
    assume out_$i1288 == 1;
    goto corral_source_split_10848;

  corral_source_split_10846:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1024, $bb1025;

  corral_source_split_10845:
    assume {:verifier.code 0} true;
    out_$i1288 := $eq.i32(out_$i1287, 2);
    goto corral_source_split_10846;

  $bb1023:
    assume {:verifier.code 0} true;
    out_$i1287 := $M.50;
    goto corral_source_split_10845;

  $bb1022:
    assume !(out_$i1282 == 1);
    assume {:verifier.code 0} true;
    goto $bb1023;

  corral_source_split_10843:
    assume {:verifier.code 0} true;
    goto $bb1023;

  corral_source_split_10842:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1886} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10843;

  SeqInstr_636:
    goto corral_source_split_10842;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_10841:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1885} out_vslice_dummy_var_225 := edge_write(out_$p1283, out_$p1284, in_$p47, out_$i1285);
    goto SeqInstr_635;

  corral_source_split_10840:
    assume {:verifier.code 0} true;
    out_$i1285 := $load.i32($M.28, in_$p22);
    goto corral_source_split_10841;

  corral_source_split_10839:
    assume {:verifier.code 0} true;
    out_$p1284 := $M.38;
    goto corral_source_split_10840;

  corral_source_split_10838:
    assume {:verifier.code 0} true;
    out_$p1283 := $M.40;
    goto corral_source_split_10839;

  $bb1021:
    assume out_$i1282 == 1;
    goto corral_source_split_10838;

  corral_source_split_10836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1021, $bb1022;

  corral_source_split_10835:
    assume {:verifier.code 0} true;
    out_$i1282 := $eq.i32(out_$i1281, 3);
    goto corral_source_split_10836;

  $bb1020:
    assume {:verifier.code 0} true;
    out_$i1281 := $M.50;
    goto corral_source_split_10835;

  $bb1019:
    assume !(out_$i1276 == 1);
    assume {:verifier.code 0} true;
    goto $bb1020;

  corral_source_split_10833:
    assume {:verifier.code 0} true;
    goto $bb1020;

  corral_source_split_10832:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1884} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10833;

  SeqInstr_633:
    goto corral_source_split_10832;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  corral_source_split_10831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1883} out_vslice_dummy_var_224 := edge_write(out_$p1277, out_$p1278, in_$p47, out_$i1279);
    goto SeqInstr_632;

  corral_source_split_10830:
    assume {:verifier.code 0} true;
    out_$i1279 := $load.i32($M.28, in_$p22);
    goto corral_source_split_10831;

  corral_source_split_10829:
    assume {:verifier.code 0} true;
    out_$p1278 := $M.38;
    goto corral_source_split_10830;

  corral_source_split_10828:
    assume {:verifier.code 0} true;
    out_$p1277 := $M.40;
    goto corral_source_split_10829;

  $bb1018:
    assume out_$i1276 == 1;
    goto corral_source_split_10828;

  corral_source_split_10826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1018, $bb1019;

  corral_source_split_10825:
    assume {:verifier.code 0} true;
    out_$i1276 := $eq.i32(out_$i1275, 1);
    goto corral_source_split_10826;

  $bb1017:
    assume {:verifier.code 0} true;
    out_$i1275 := $M.50;
    goto corral_source_split_10825;

  $bb1016:
    assume !(out_$i1270 == 1);
    assume {:verifier.code 0} true;
    goto $bb1017;

  corral_source_split_10823:
    assume {:verifier.code 0} true;
    goto $bb1017;

  corral_source_split_10822:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1882} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10823;

  SeqInstr_630:
    goto corral_source_split_10822;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  corral_source_split_10821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1881} out_vslice_dummy_var_223 := edge_write(out_$p1271, out_$p1272, in_$p47, out_$i1273);
    goto SeqInstr_629;

  corral_source_split_10820:
    assume {:verifier.code 0} true;
    out_$i1273 := $load.i32($M.28, in_$p22);
    goto corral_source_split_10821;

  corral_source_split_10819:
    assume {:verifier.code 0} true;
    out_$p1272 := $M.38;
    goto corral_source_split_10820;

  corral_source_split_10818:
    assume {:verifier.code 0} true;
    out_$p1271 := $M.40;
    goto corral_source_split_10819;

  $bb1015:
    assume out_$i1270 == 1;
    goto corral_source_split_10818;

  corral_source_split_10488:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1015, $bb1016;

  corral_source_split_10487:
    assume {:verifier.code 0} true;
    out_$i1270 := $eq.i32(out_$i1269, 4);
    goto corral_source_split_10488;

  corral_source_split_10486:
    assume {:verifier.code 0} true;
    out_$i1269 := $M.50;
    goto corral_source_split_10487;

  $bb880:
    assume out_$i1105 == 1;
    goto corral_source_split_10486;

  $bb874:
    assume out_$i1102 == 1;
    assume {:verifier.code 0} true;
    out_$i1105 := $slt.i32(out_$i1093, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb880, $bb881;

  $bb859:
    assume out_$i1095 == 1;
    assume {:verifier.code 0} true;
    out_$i1102 := $slt.i32(out_$i1093, 14);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb874, $bb875;

  $bb858:
    assume !(out_$i1094 == 1);
    assume {:verifier.code 0} true;
    out_$i1095 := $slt.i32(out_$i1093, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb859, $bb860;

  $bb1037:
    assume !(out_$i1309 == 1);
    assume {:verifier.code 0} true;
    goto $bb1038;

  corral_source_split_10886:
    assume {:verifier.code 0} true;
    goto $bb1038;

  corral_source_split_10885:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1896} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10886;

  corral_source_split_10884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1895} out_vslice_dummy_var_230 := usb_serial_generic_tiocmiwait(out_$p1310, out_$i1311);
    goto corral_source_split_10885;

  corral_source_split_10883:
    assume {:verifier.code 0} true;
    out_$i1311 := $load.i64($M.28, in_$p23);
    goto corral_source_split_10884;

  corral_source_split_10882:
    assume {:verifier.code 0} true;
    out_$p1310 := $M.40;
    goto corral_source_split_10883;

  $bb1036:
    assume out_$i1309 == 1;
    goto corral_source_split_10882;

  corral_source_split_10880:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1036, $bb1037;

  corral_source_split_10879:
    assume {:verifier.code 0} true;
    out_$i1309 := $eq.i32(out_$i1308, 2);
    goto corral_source_split_10880;

  $bb1035:
    assume {:verifier.code 0} true;
    out_$i1308 := $M.50;
    goto corral_source_split_10879;

  $bb1034:
    assume !(out_$i1304 == 1);
    assume {:verifier.code 0} true;
    goto $bb1035;

  corral_source_split_10877:
    assume {:verifier.code 0} true;
    goto $bb1035;

  corral_source_split_10876:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1894} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10877;

  corral_source_split_10875:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1893} out_vslice_dummy_var_229 := usb_serial_generic_tiocmiwait(out_$p1305, out_$i1306);
    goto corral_source_split_10876;

  corral_source_split_10874:
    assume {:verifier.code 0} true;
    out_$i1306 := $load.i64($M.28, in_$p23);
    goto corral_source_split_10875;

  corral_source_split_10873:
    assume {:verifier.code 0} true;
    out_$p1305 := $M.40;
    goto corral_source_split_10874;

  $bb1033:
    assume out_$i1304 == 1;
    goto corral_source_split_10873;

  corral_source_split_10871:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1033, $bb1034;

  corral_source_split_10870:
    assume {:verifier.code 0} true;
    out_$i1304 := $eq.i32(out_$i1303, 3);
    goto corral_source_split_10871;

  $bb1032:
    assume {:verifier.code 0} true;
    out_$i1303 := $M.50;
    goto corral_source_split_10870;

  $bb1031:
    assume !(out_$i1299 == 1);
    assume {:verifier.code 0} true;
    goto $bb1032;

  corral_source_split_10868:
    assume {:verifier.code 0} true;
    goto $bb1032;

  corral_source_split_10867:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1892} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10868;

  corral_source_split_10866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1891} out_vslice_dummy_var_228 := usb_serial_generic_tiocmiwait(out_$p1300, out_$i1301);
    goto corral_source_split_10867;

  corral_source_split_10865:
    assume {:verifier.code 0} true;
    out_$i1301 := $load.i64($M.28, in_$p23);
    goto corral_source_split_10866;

  corral_source_split_10864:
    assume {:verifier.code 0} true;
    out_$p1300 := $M.40;
    goto corral_source_split_10865;

  $bb1030:
    assume out_$i1299 == 1;
    goto corral_source_split_10864;

  corral_source_split_10862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1030, $bb1031;

  corral_source_split_10861:
    assume {:verifier.code 0} true;
    out_$i1299 := $eq.i32(out_$i1298, 1);
    goto corral_source_split_10862;

  $bb1029:
    assume {:verifier.code 0} true;
    out_$i1298 := $M.50;
    goto corral_source_split_10861;

  $bb1028:
    assume !(out_$i1294 == 1);
    assume {:verifier.code 0} true;
    goto $bb1029;

  corral_source_split_10859:
    assume {:verifier.code 0} true;
    goto $bb1029;

  corral_source_split_10858:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1890} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10859;

  corral_source_split_10857:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1889} out_vslice_dummy_var_227 := usb_serial_generic_tiocmiwait(out_$p1295, out_$i1296);
    goto corral_source_split_10858;

  corral_source_split_10856:
    assume {:verifier.code 0} true;
    out_$i1296 := $load.i64($M.28, in_$p23);
    goto corral_source_split_10857;

  corral_source_split_10855:
    assume {:verifier.code 0} true;
    out_$p1295 := $M.40;
    goto corral_source_split_10856;

  $bb1027:
    assume out_$i1294 == 1;
    goto corral_source_split_10855;

  corral_source_split_10492:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1027, $bb1028;

  corral_source_split_10491:
    assume {:verifier.code 0} true;
    out_$i1294 := $eq.i32(out_$i1293, 4);
    goto corral_source_split_10492;

  corral_source_split_10490:
    assume {:verifier.code 0} true;
    out_$i1293 := $M.50;
    goto corral_source_split_10491;

  $bb882:
    assume out_$i1106 == 1;
    goto corral_source_split_10490;

  $bb881:
    assume !(out_$i1105 == 1);
    assume {:verifier.code 0} true;
    out_$i1106 := $slt.i32(out_$i1093, 13);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb882, $bb883;

  $bb1040:
    assume !(out_$i1314 == 1);
    assume {:verifier.code 0} true;
    goto $bb1044;

  $bb1043:
    assume {:verifier.code 0} true;
    goto $bb1044;

  $bb1042:
    assume !(out_$i1318 == 1);
    assume {:verifier.code 0} true;
    goto $bb1043;

  corral_source_split_10896:
    assume {:verifier.code 0} true;
    goto $bb1043;

  corral_source_split_10895:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1899} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10896;

  $bb1041:
    assume out_$i1318 == 1;
    goto corral_source_split_10895;

  corral_source_split_10893:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1041, $bb1042;

  corral_source_split_10892:
    assume {:verifier.code 0} true;
    out_$i1318 := $eq.i32(out_$i1317, 0);
    goto corral_source_split_10893;

  corral_source_split_10891:
    assume {:verifier.code 0} true;
    out_$i1317 := $M.59;
    goto corral_source_split_10892;

  corral_source_split_10890:
    assume {:verifier.code 0} true;
    $M.59 := out_$i1316;
    call {:si_unique_call 1898} {:cexpr "ldv_retval_7"} boogie_si_record_i32(out_$i1316);
    goto corral_source_split_10891;

  SeqInstr_642:
    goto corral_source_split_10890;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  corral_source_split_10889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1897} out_$i1316 := edge_startup(out_$p1315);
    goto SeqInstr_641;

  corral_source_split_10888:
    assume {:verifier.code 0} true;
    out_$p1315 := $M.39;
    goto corral_source_split_10889;

  $bb1039:
    assume out_$i1314 == 1;
    goto corral_source_split_10888;

  corral_source_split_10496:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1039, $bb1040;

  corral_source_split_10495:
    assume {:verifier.code 0} true;
    out_$i1314 := $eq.i32(out_$i1313, 2);
    goto corral_source_split_10496;

  corral_source_split_10494:
    assume {:verifier.code 0} true;
    out_$i1313 := $M.50;
    goto corral_source_split_10495;

  $bb883:
    assume !(out_$i1106 == 1);
    goto corral_source_split_10494;

  $bb1046:
    assume !(out_$i1320 == 1);
    assume {:verifier.code 0} true;
    goto $bb1047;

  corral_source_split_10901:
    assume {:verifier.code 0} true;
    goto $bb1047;

  corral_source_split_10900:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1901} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10901;

  SeqInstr_645:
    goto corral_source_split_10900;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  corral_source_split_10899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1900} edge_interrupt_callback(out_$p1321);
    goto SeqInstr_644;

  corral_source_split_10898:
    assume {:verifier.code 0} true;
    out_$p1321 := $M.37;
    goto corral_source_split_10899;

  $bb1045:
    assume out_$i1320 == 1;
    goto corral_source_split_10898;

  corral_source_split_10476:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1045, $bb1046;

  corral_source_split_10475:
    assume {:verifier.code 0} true;
    out_$i1320 := $eq.i32(out_$i1319, 4);
    goto corral_source_split_10476;

  corral_source_split_10474:
    assume {:verifier.code 0} true;
    out_$i1319 := $M.50;
    goto corral_source_split_10475;

  $bb876:
    assume out_$i1103 == 1;
    goto corral_source_split_10474;

  $bb875:
    assume !(out_$i1102 == 1);
    assume {:verifier.code 0} true;
    out_$i1103 := $slt.i32(out_$i1093, 15);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb876, $bb877;

  $bb1049:
    assume !(out_$i1323 == 1);
    assume {:verifier.code 0} true;
    goto $bb1050;

  corral_source_split_10906:
    assume {:verifier.code 0} true;
    goto $bb1050;

  corral_source_split_10905:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1903} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10906;

  SeqInstr_648:
    goto corral_source_split_10905;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  corral_source_split_10904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1902} edge_close(out_$p1324);
    goto SeqInstr_647;

  corral_source_split_10903:
    assume {:verifier.code 0} true;
    out_$p1324 := $M.38;
    goto corral_source_split_10904;

  $bb1048:
    assume out_$i1323 == 1;
    goto corral_source_split_10903;

  corral_source_split_10480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1048, $bb1049;

  corral_source_split_10479:
    assume {:verifier.code 0} true;
    out_$i1323 := $eq.i32(out_$i1322, 4);
    goto corral_source_split_10480;

  corral_source_split_10478:
    assume {:verifier.code 0} true;
    out_$i1322 := $M.50;
    goto corral_source_split_10479;

  $bb878:
    assume out_$i1104 == 1;
    goto corral_source_split_10478;

  $bb877:
    assume !(out_$i1103 == 1);
    assume {:verifier.code 0} true;
    out_$i1104 := $slt.i32(out_$i1093, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb878, $bb879;

  $bb1061:
    assume !(out_$i1338 == 1);
    assume {:verifier.code 0} true;
    goto $bb1062;

  corral_source_split_10935:
    assume {:verifier.code 0} true;
    goto $bb1062;

  corral_source_split_10934:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1911} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10935;

  corral_source_split_10933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1910} out_vslice_dummy_var_234 := edge_write_room(out_$p1339);
    goto corral_source_split_10934;

  corral_source_split_10932:
    assume {:verifier.code 0} true;
    out_$p1339 := $M.40;
    goto corral_source_split_10933;

  $bb1060:
    assume out_$i1338 == 1;
    goto corral_source_split_10932;

  corral_source_split_10930:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1060, $bb1061;

  corral_source_split_10929:
    assume {:verifier.code 0} true;
    out_$i1338 := $eq.i32(out_$i1337, 2);
    goto corral_source_split_10930;

  $bb1059:
    assume {:verifier.code 0} true;
    out_$i1337 := $M.50;
    goto corral_source_split_10929;

  $bb1058:
    assume !(out_$i1334 == 1);
    assume {:verifier.code 0} true;
    goto $bb1059;

  corral_source_split_10927:
    assume {:verifier.code 0} true;
    goto $bb1059;

  corral_source_split_10926:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1909} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10927;

  corral_source_split_10925:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1908} out_vslice_dummy_var_233 := edge_write_room(out_$p1335);
    goto corral_source_split_10926;

  corral_source_split_10924:
    assume {:verifier.code 0} true;
    out_$p1335 := $M.40;
    goto corral_source_split_10925;

  $bb1057:
    assume out_$i1334 == 1;
    goto corral_source_split_10924;

  corral_source_split_10922:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1057, $bb1058;

  corral_source_split_10921:
    assume {:verifier.code 0} true;
    out_$i1334 := $eq.i32(out_$i1333, 3);
    goto corral_source_split_10922;

  $bb1056:
    assume {:verifier.code 0} true;
    out_$i1333 := $M.50;
    goto corral_source_split_10921;

  $bb1055:
    assume !(out_$i1330 == 1);
    assume {:verifier.code 0} true;
    goto $bb1056;

  corral_source_split_10919:
    assume {:verifier.code 0} true;
    goto $bb1056;

  corral_source_split_10918:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1907} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10919;

  corral_source_split_10917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1906} out_vslice_dummy_var_232 := edge_write_room(out_$p1331);
    goto corral_source_split_10918;

  corral_source_split_10916:
    assume {:verifier.code 0} true;
    out_$p1331 := $M.40;
    goto corral_source_split_10917;

  $bb1054:
    assume out_$i1330 == 1;
    goto corral_source_split_10916;

  corral_source_split_10914:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1054, $bb1055;

  corral_source_split_10913:
    assume {:verifier.code 0} true;
    out_$i1330 := $eq.i32(out_$i1329, 1);
    goto corral_source_split_10914;

  $bb1053:
    assume {:verifier.code 0} true;
    out_$i1329 := $M.50;
    goto corral_source_split_10913;

  $bb1052:
    assume !(out_$i1326 == 1);
    assume {:verifier.code 0} true;
    goto $bb1053;

  corral_source_split_10911:
    assume {:verifier.code 0} true;
    goto $bb1053;

  corral_source_split_10910:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1905} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10911;

  corral_source_split_10909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1904} out_vslice_dummy_var_231 := edge_write_room(out_$p1327);
    goto corral_source_split_10910;

  corral_source_split_10908:
    assume {:verifier.code 0} true;
    out_$p1327 := $M.40;
    goto corral_source_split_10909;

  $bb1051:
    assume out_$i1326 == 1;
    goto corral_source_split_10908;

  corral_source_split_10484:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1051, $bb1052;

  corral_source_split_10483:
    assume {:verifier.code 0} true;
    out_$i1326 := $eq.i32(out_$i1325, 4);
    goto corral_source_split_10484;

  corral_source_split_10482:
    assume {:verifier.code 0} true;
    out_$i1325 := $M.50;
    goto corral_source_split_10483;

  $bb879:
    assume !(out_$i1104 == 1);
    goto corral_source_split_10482;

  $bb1073:
    assume !(out_$i1354 == 1);
    assume {:verifier.code 0} true;
    goto $bb1074;

  corral_source_split_10968:
    assume {:verifier.code 0} true;
    goto $bb1074;

  corral_source_split_10967:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1919} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10968;

  SeqInstr_660:
    goto corral_source_split_10967;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  corral_source_split_10966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1918} edge_break(out_$p1355, out_$i1356);
    goto SeqInstr_659;

  corral_source_split_10965:
    assume {:verifier.code 0} true;
    out_$i1356 := $load.i32($M.28, in_$p24);
    goto corral_source_split_10966;

  corral_source_split_10964:
    assume {:verifier.code 0} true;
    out_$p1355 := $M.40;
    goto corral_source_split_10965;

  $bb1072:
    assume out_$i1354 == 1;
    goto corral_source_split_10964;

  corral_source_split_10962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1072, $bb1073;

  corral_source_split_10961:
    assume {:verifier.code 0} true;
    out_$i1354 := $eq.i32(out_$i1353, 2);
    goto corral_source_split_10962;

  $bb1071:
    assume {:verifier.code 0} true;
    out_$i1353 := $M.50;
    goto corral_source_split_10961;

  $bb1070:
    assume !(out_$i1350 == 1);
    assume {:verifier.code 0} true;
    goto $bb1071;

  corral_source_split_10959:
    assume {:verifier.code 0} true;
    goto $bb1071;

  corral_source_split_10958:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1917} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_10959;

  SeqInstr_657:
    goto corral_source_split_10958;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  corral_source_split_10957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1916} edge_break(out_$p1351, out_$i1352);
    goto SeqInstr_656;

  corral_source_split_10956:
    assume {:verifier.code 0} true;
    out_$i1352 := $load.i32($M.28, in_$p24);
    goto corral_source_split_10957;

  corral_source_split_10955:
    assume {:verifier.code 0} true;
    out_$p1351 := $M.40;
    goto corral_source_split_10956;

  $bb1069:
    assume out_$i1350 == 1;
    goto corral_source_split_10955;

  corral_source_split_10953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1069, $bb1070;

  corral_source_split_10952:
    assume {:verifier.code 0} true;
    out_$i1350 := $eq.i32(out_$i1349, 3);
    goto corral_source_split_10953;

  $bb1068:
    assume {:verifier.code 0} true;
    out_$i1349 := $M.50;
    goto corral_source_split_10952;

  $bb1067:
    assume !(out_$i1346 == 1);
    assume {:verifier.code 0} true;
    goto $bb1068;

  corral_source_split_10950:
    assume {:verifier.code 0} true;
    goto $bb1068;

  corral_source_split_10949:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1915} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10950;

  SeqInstr_654:
    goto corral_source_split_10949;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  corral_source_split_10948:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1914} edge_break(out_$p1347, out_$i1348);
    goto SeqInstr_653;

  corral_source_split_10947:
    assume {:verifier.code 0} true;
    out_$i1348 := $load.i32($M.28, in_$p24);
    goto corral_source_split_10948;

  corral_source_split_10946:
    assume {:verifier.code 0} true;
    out_$p1347 := $M.40;
    goto corral_source_split_10947;

  $bb1066:
    assume out_$i1346 == 1;
    goto corral_source_split_10946;

  corral_source_split_10944:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1066, $bb1067;

  corral_source_split_10943:
    assume {:verifier.code 0} true;
    out_$i1346 := $eq.i32(out_$i1345, 1);
    goto corral_source_split_10944;

  $bb1065:
    assume {:verifier.code 0} true;
    out_$i1345 := $M.50;
    goto corral_source_split_10943;

  $bb1064:
    assume !(out_$i1342 == 1);
    assume {:verifier.code 0} true;
    goto $bb1065;

  corral_source_split_10941:
    assume {:verifier.code 0} true;
    goto $bb1065;

  corral_source_split_10940:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1913} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10941;

  SeqInstr_651:
    goto corral_source_split_10940;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  corral_source_split_10939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1912} edge_break(out_$p1343, out_$i1344);
    goto SeqInstr_650;

  corral_source_split_10938:
    assume {:verifier.code 0} true;
    out_$i1344 := $load.i32($M.28, in_$p24);
    goto corral_source_split_10939;

  corral_source_split_10937:
    assume {:verifier.code 0} true;
    out_$p1343 := $M.40;
    goto corral_source_split_10938;

  $bb1063:
    assume out_$i1342 == 1;
    goto corral_source_split_10937;

  corral_source_split_10464:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1063, $bb1064;

  corral_source_split_10463:
    assume {:verifier.code 0} true;
    out_$i1342 := $eq.i32(out_$i1341, 4);
    goto corral_source_split_10464;

  corral_source_split_10462:
    assume {:verifier.code 0} true;
    out_$i1341 := $M.50;
    goto corral_source_split_10463;

  $bb870:
    assume out_$i1100 == 1;
    goto corral_source_split_10462;

  $bb861:
    assume out_$i1096 == 1;
    assume {:verifier.code 0} true;
    out_$i1100 := $slt.i32(out_$i1093, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb870, $bb871;

  $bb860:
    assume !(out_$i1095 == 1);
    assume {:verifier.code 0} true;
    out_$i1096 := $slt.i32(out_$i1093, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb861, $bb862;

  $bb1079:
    assume !(out_$i1361 == 1);
    assume {:verifier.code 0} true;
    goto $bb1080;

  corral_source_split_10981:
    assume {:verifier.code 0} true;
    goto $bb1080;

  corral_source_split_10980:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1923} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10981;

  corral_source_split_10979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1922} edge_disconnect(out_$p1362);
    goto corral_source_split_10980;

  corral_source_split_10978:
    assume {:verifier.code 0} true;
    out_$p1362 := $M.39;
    goto corral_source_split_10979;

  $bb1078:
    assume out_$i1361 == 1;
    goto corral_source_split_10978;

  corral_source_split_10976:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1078, $bb1079;

  corral_source_split_10975:
    assume {:verifier.code 0} true;
    out_$i1361 := $eq.i32(out_$i1360, 3);
    goto corral_source_split_10976;

  $bb1077:
    assume {:verifier.code 0} true;
    out_$i1360 := $M.50;
    goto corral_source_split_10975;

  $bb1076:
    assume !(out_$i1358 == 1);
    assume {:verifier.code 0} true;
    goto $bb1077;

  corral_source_split_10973:
    assume {:verifier.code 0} true;
    goto $bb1077;

  corral_source_split_10972:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1921} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_10973;

  corral_source_split_10971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1920} edge_disconnect(out_$p1359);
    goto corral_source_split_10972;

  corral_source_split_10970:
    assume {:verifier.code 0} true;
    out_$p1359 := $M.39;
    goto corral_source_split_10971;

  $bb1075:
    assume out_$i1358 == 1;
    goto corral_source_split_10970;

  corral_source_split_10468:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1075, $bb1076;

  corral_source_split_10467:
    assume {:verifier.code 0} true;
    out_$i1358 := $eq.i32(out_$i1357, 4);
    goto corral_source_split_10468;

  corral_source_split_10466:
    assume {:verifier.code 0} true;
    out_$i1357 := $M.50;
    goto corral_source_split_10467;

  $bb872:
    assume out_$i1101 == 1;
    goto corral_source_split_10466;

  $bb871:
    assume !(out_$i1100 == 1);
    assume {:verifier.code 0} true;
    out_$i1101 := $slt.i32(out_$i1093, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb872, $bb873;

  $bb1091:
    assume !(out_$i1376 == 1);
    assume {:verifier.code 0} true;
    goto $bb1092;

  corral_source_split_11010:
    assume {:verifier.code 0} true;
    goto $bb1092;

  corral_source_split_11009:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1931} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11010;

  corral_source_split_11008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1930} out_vslice_dummy_var_238 := edge_chars_in_buffer(out_$p1377);
    goto corral_source_split_11009;

  corral_source_split_11007:
    assume {:verifier.code 0} true;
    out_$p1377 := $M.40;
    goto corral_source_split_11008;

  $bb1090:
    assume out_$i1376 == 1;
    goto corral_source_split_11007;

  corral_source_split_11005:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1090, $bb1091;

  corral_source_split_11004:
    assume {:verifier.code 0} true;
    out_$i1376 := $eq.i32(out_$i1375, 2);
    goto corral_source_split_11005;

  $bb1089:
    assume {:verifier.code 0} true;
    out_$i1375 := $M.50;
    goto corral_source_split_11004;

  $bb1088:
    assume !(out_$i1372 == 1);
    assume {:verifier.code 0} true;
    goto $bb1089;

  corral_source_split_11002:
    assume {:verifier.code 0} true;
    goto $bb1089;

  corral_source_split_11001:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1929} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11002;

  corral_source_split_11000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1928} out_vslice_dummy_var_237 := edge_chars_in_buffer(out_$p1373);
    goto corral_source_split_11001;

  corral_source_split_10999:
    assume {:verifier.code 0} true;
    out_$p1373 := $M.40;
    goto corral_source_split_11000;

  $bb1087:
    assume out_$i1372 == 1;
    goto corral_source_split_10999;

  corral_source_split_10997:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1087, $bb1088;

  corral_source_split_10996:
    assume {:verifier.code 0} true;
    out_$i1372 := $eq.i32(out_$i1371, 3);
    goto corral_source_split_10997;

  $bb1086:
    assume {:verifier.code 0} true;
    out_$i1371 := $M.50;
    goto corral_source_split_10996;

  $bb1085:
    assume !(out_$i1368 == 1);
    assume {:verifier.code 0} true;
    goto $bb1086;

  corral_source_split_10994:
    assume {:verifier.code 0} true;
    goto $bb1086;

  corral_source_split_10993:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1927} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_10994;

  corral_source_split_10992:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1926} out_vslice_dummy_var_236 := edge_chars_in_buffer(out_$p1369);
    goto corral_source_split_10993;

  corral_source_split_10991:
    assume {:verifier.code 0} true;
    out_$p1369 := $M.40;
    goto corral_source_split_10992;

  $bb1084:
    assume out_$i1368 == 1;
    goto corral_source_split_10991;

  corral_source_split_10989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1084, $bb1085;

  corral_source_split_10988:
    assume {:verifier.code 0} true;
    out_$i1368 := $eq.i32(out_$i1367, 1);
    goto corral_source_split_10989;

  $bb1083:
    assume {:verifier.code 0} true;
    out_$i1367 := $M.50;
    goto corral_source_split_10988;

  $bb1082:
    assume !(out_$i1364 == 1);
    assume {:verifier.code 0} true;
    goto $bb1083;

  corral_source_split_10986:
    assume {:verifier.code 0} true;
    goto $bb1083;

  corral_source_split_10985:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1925} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_10986;

  corral_source_split_10984:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1924} out_vslice_dummy_var_235 := edge_chars_in_buffer(out_$p1365);
    goto corral_source_split_10985;

  corral_source_split_10983:
    assume {:verifier.code 0} true;
    out_$p1365 := $M.40;
    goto corral_source_split_10984;

  $bb1081:
    assume out_$i1364 == 1;
    goto corral_source_split_10983;

  corral_source_split_10472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1081, $bb1082;

  corral_source_split_10471:
    assume {:verifier.code 0} true;
    out_$i1364 := $eq.i32(out_$i1363, 4);
    goto corral_source_split_10472;

  corral_source_split_10470:
    assume {:verifier.code 0} true;
    out_$i1363 := $M.50;
    goto corral_source_split_10471;

  $bb873:
    assume !(out_$i1101 == 1);
    goto corral_source_split_10470;

  $bb1103:
    assume !(out_$i1392 == 1);
    assume {:verifier.code 0} true;
    goto $bb1104;

  corral_source_split_11039:
    assume {:verifier.code 0} true;
    goto $bb1104;

  corral_source_split_11038:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1939} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11039;

  corral_source_split_11037:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1938} out_vslice_dummy_var_242 := edge_tiocmget(out_$p1393);
    goto corral_source_split_11038;

  corral_source_split_11036:
    assume {:verifier.code 0} true;
    out_$p1393 := $M.40;
    goto corral_source_split_11037;

  $bb1102:
    assume out_$i1392 == 1;
    goto corral_source_split_11036;

  corral_source_split_11034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1102, $bb1103;

  corral_source_split_11033:
    assume {:verifier.code 0} true;
    out_$i1392 := $eq.i32(out_$i1391, 2);
    goto corral_source_split_11034;

  $bb1101:
    assume {:verifier.code 0} true;
    out_$i1391 := $M.50;
    goto corral_source_split_11033;

  $bb1100:
    assume !(out_$i1388 == 1);
    assume {:verifier.code 0} true;
    goto $bb1101;

  corral_source_split_11031:
    assume {:verifier.code 0} true;
    goto $bb1101;

  corral_source_split_11030:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1937} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11031;

  corral_source_split_11029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1936} out_vslice_dummy_var_241 := edge_tiocmget(out_$p1389);
    goto corral_source_split_11030;

  corral_source_split_11028:
    assume {:verifier.code 0} true;
    out_$p1389 := $M.40;
    goto corral_source_split_11029;

  $bb1099:
    assume out_$i1388 == 1;
    goto corral_source_split_11028;

  corral_source_split_11026:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1099, $bb1100;

  corral_source_split_11025:
    assume {:verifier.code 0} true;
    out_$i1388 := $eq.i32(out_$i1387, 3);
    goto corral_source_split_11026;

  $bb1098:
    assume {:verifier.code 0} true;
    out_$i1387 := $M.50;
    goto corral_source_split_11025;

  $bb1097:
    assume !(out_$i1384 == 1);
    assume {:verifier.code 0} true;
    goto $bb1098;

  corral_source_split_11023:
    assume {:verifier.code 0} true;
    goto $bb1098;

  corral_source_split_11022:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1935} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11023;

  corral_source_split_11021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1934} out_vslice_dummy_var_240 := edge_tiocmget(out_$p1385);
    goto corral_source_split_11022;

  corral_source_split_11020:
    assume {:verifier.code 0} true;
    out_$p1385 := $M.40;
    goto corral_source_split_11021;

  $bb1096:
    assume out_$i1384 == 1;
    goto corral_source_split_11020;

  corral_source_split_11018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1096, $bb1097;

  corral_source_split_11017:
    assume {:verifier.code 0} true;
    out_$i1384 := $eq.i32(out_$i1383, 1);
    goto corral_source_split_11018;

  $bb1095:
    assume {:verifier.code 0} true;
    out_$i1383 := $M.50;
    goto corral_source_split_11017;

  $bb1094:
    assume !(out_$i1380 == 1);
    assume {:verifier.code 0} true;
    goto $bb1095;

  corral_source_split_11015:
    assume {:verifier.code 0} true;
    goto $bb1095;

  corral_source_split_11014:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1933} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_11015;

  corral_source_split_11013:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1932} out_vslice_dummy_var_239 := edge_tiocmget(out_$p1381);
    goto corral_source_split_11014;

  corral_source_split_11012:
    assume {:verifier.code 0} true;
    out_$p1381 := $M.40;
    goto corral_source_split_11013;

  $bb1093:
    assume out_$i1380 == 1;
    goto corral_source_split_11012;

  corral_source_split_10452:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1093, $bb1094;

  corral_source_split_10451:
    assume {:verifier.code 0} true;
    out_$i1380 := $eq.i32(out_$i1379, 4);
    goto corral_source_split_10452;

  corral_source_split_10450:
    assume {:verifier.code 0} true;
    out_$i1379 := $M.50;
    goto corral_source_split_10451;

  $bb863:
    assume out_$i1097 == 1;
    goto corral_source_split_10450;

  $bb862:
    assume !(out_$i1096 == 1);
    assume {:verifier.code 0} true;
    out_$i1097 := $slt.i32(out_$i1093, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb863, $bb864;

  $bb1115:
    assume !(out_$i1405 == 1);
    assume {:verifier.code 0} true;
    goto $bb1116;

  corral_source_split_11068:
    assume {:verifier.code 0} true;
    goto $bb1116;

  corral_source_split_11067:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1947} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11068;

  SeqInstr_672:
    goto corral_source_split_11067;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  corral_source_split_11066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1946} edge_bulk_in_callback(out_$p1406);
    goto SeqInstr_671;

  corral_source_split_11065:
    assume {:verifier.code 0} true;
    out_$p1406 := $M.37;
    goto corral_source_split_11066;

  $bb1114:
    assume out_$i1405 == 1;
    goto corral_source_split_11065;

  corral_source_split_11063:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1114, $bb1115;

  corral_source_split_11062:
    assume {:verifier.code 0} true;
    out_$i1405 := $eq.i32(out_$i1404, 2);
    goto corral_source_split_11063;

  $bb1113:
    assume {:verifier.code 0} true;
    out_$i1404 := $M.50;
    goto corral_source_split_11062;

  $bb1112:
    assume !(out_$i1402 == 1);
    assume {:verifier.code 0} true;
    goto $bb1113;

  corral_source_split_11060:
    assume {:verifier.code 0} true;
    goto $bb1113;

  corral_source_split_11059:
    assume {:verifier.code 0} true;
    $M.50 := 3;
    call {:si_unique_call 1945} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_11060;

  SeqInstr_669:
    goto corral_source_split_11059;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  corral_source_split_11058:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1944} edge_bulk_in_callback(out_$p1403);
    goto SeqInstr_668;

  corral_source_split_11057:
    assume {:verifier.code 0} true;
    out_$p1403 := $M.37;
    goto corral_source_split_11058;

  $bb1111:
    assume out_$i1402 == 1;
    goto corral_source_split_11057;

  corral_source_split_11055:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1111, $bb1112;

  corral_source_split_11054:
    assume {:verifier.code 0} true;
    out_$i1402 := $eq.i32(out_$i1401, 3);
    goto corral_source_split_11055;

  $bb1110:
    assume {:verifier.code 0} true;
    out_$i1401 := $M.50;
    goto corral_source_split_11054;

  $bb1109:
    assume !(out_$i1399 == 1);
    assume {:verifier.code 0} true;
    goto $bb1110;

  corral_source_split_11052:
    assume {:verifier.code 0} true;
    goto $bb1110;

  corral_source_split_11051:
    assume {:verifier.code 0} true;
    $M.50 := 1;
    call {:si_unique_call 1943} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_11052;

  SeqInstr_666:
    goto corral_source_split_11051;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  corral_source_split_11050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1942} edge_bulk_in_callback(out_$p1400);
    goto SeqInstr_665;

  corral_source_split_11049:
    assume {:verifier.code 0} true;
    out_$p1400 := $M.37;
    goto corral_source_split_11050;

  $bb1108:
    assume out_$i1399 == 1;
    goto corral_source_split_11049;

  corral_source_split_11047:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1108, $bb1109;

  corral_source_split_11046:
    assume {:verifier.code 0} true;
    out_$i1399 := $eq.i32(out_$i1398, 1);
    goto corral_source_split_11047;

  $bb1107:
    assume {:verifier.code 0} true;
    out_$i1398 := $M.50;
    goto corral_source_split_11046;

  $bb1106:
    assume !(out_$i1396 == 1);
    assume {:verifier.code 0} true;
    goto $bb1107;

  corral_source_split_11044:
    assume {:verifier.code 0} true;
    goto $bb1107;

  corral_source_split_11043:
    assume {:verifier.code 0} true;
    $M.50 := 4;
    call {:si_unique_call 1941} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_11044;

  SeqInstr_663:
    goto corral_source_split_11043;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  corral_source_split_11042:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1940} edge_bulk_in_callback(out_$p1397);
    goto SeqInstr_662;

  corral_source_split_11041:
    assume {:verifier.code 0} true;
    out_$p1397 := $M.37;
    goto corral_source_split_11042;

  $bb1105:
    assume out_$i1396 == 1;
    goto corral_source_split_11041;

  corral_source_split_10456:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1105, $bb1106;

  corral_source_split_10455:
    assume {:verifier.code 0} true;
    out_$i1396 := $eq.i32(out_$i1395, 4);
    goto corral_source_split_10456;

  corral_source_split_10454:
    assume {:verifier.code 0} true;
    out_$i1395 := $M.50;
    goto corral_source_split_10455;

  $bb865:
    assume out_$i1098 == 1;
    goto corral_source_split_10454;

  $bb864:
    assume !(out_$i1097 == 1);
    assume {:verifier.code 0} true;
    out_$i1098 := $slt.i32(out_$i1093, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb865, $bb866;

  $bb1118:
    assume !(out_$i1408 == 1);
    assume {:verifier.code 0} true;
    goto $bb1119;

  corral_source_split_11075:
    assume {:verifier.code 0} true;
    goto $bb1119;

  corral_source_split_11074:
    assume {:verifier.code 0} true;
    $M.47 := out_$i1411;
    call {:si_unique_call 1950} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i1411);
    goto corral_source_split_11075;

  corral_source_split_11073:
    assume {:verifier.code 0} true;
    out_$i1411 := $add.i32(out_$i1410, 1);
    goto corral_source_split_11074;

  corral_source_split_11072:
    assume {:verifier.code 0} true;
    out_$i1410 := $M.47;
    goto corral_source_split_11073;

  corral_source_split_11071:
    assume {:verifier.code 0} true;
    $M.50 := 2;
    call {:si_unique_call 1949} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_11072;

  corral_source_split_11070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1948} out_vslice_dummy_var_243 := ldv_probe_2();
    goto corral_source_split_11071;

  $bb1117:
    assume out_$i1408 == 1;
    goto corral_source_split_11070;

  corral_source_split_10460:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1117, $bb1118;

  corral_source_split_10459:
    assume {:verifier.code 0} true;
    out_$i1408 := $eq.i32(out_$i1407, 1);
    goto corral_source_split_10460;

  corral_source_split_10458:
    assume {:verifier.code 0} true;
    out_$i1407 := $M.50;
    goto corral_source_split_10459;

  $bb867:
    assume out_$i1099 == 1;
    goto corral_source_split_10458;

  $bb866:
    assume !(out_$i1098 == 1);
    assume {:verifier.code 0} true;
    out_$i1099 := $eq.i32(out_$i1093, 22);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb867, $bb868;

  corral_source_split_11077:
    assume {:verifier.code 0} true;
    goto $bb1121;

  $bb1120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1951} ldv_stop();
    goto corral_source_split_11077;

  $bb869:
    assume {:verifier.code 0} true;
    goto $bb1120;

  $bb868:
    assume {:verifier.code 0} true;
    assume !(out_$i1099 == 1);
    goto $bb869;

  $bb905:
    assume {:verifier.code 0} true;
    assume !(out_$i1117 == 1);
    goto $bb869;

  corral_source_split_11079:
    assume {:verifier.code 0} true;
    goto $bb1124;

  $bb1123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1952} ldv_stop();
    goto corral_source_split_11079;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb1123;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i108 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i110 == 1);
    goto $bb11;

  $bb285_dummy:
    call {:si_unique_call 1} out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$p180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$p194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$i205, out_$i206, out_$p207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i214, out_$p215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$i271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$i289, out_$i290, out_$p291, out_$p292, out_$i293, out_$i295, out_$i296, out_$p297, out_$p298, out_$i299, out_$i301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i311, out_$i313, out_$i314, out_$p315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i323, out_$i324, out_$p325, out_$i326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$i383, out_$i384, out_$p385, out_$i387, out_$i388, out_$p389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$p397, out_$i399, out_$i400, out_$p401, out_$i403, out_$i404, out_$p405, out_$i407, out_$i408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i415, out_$i416, out_$p417, out_$i418, out_$i419, out_$p420, out_$i421, out_$i422, out_$p423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p461, out_$i462, out_$i463, out_$p464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$p473, out_$i475, out_$i476, out_$p477, out_$i479, out_$i480, out_$p481, out_$i483, out_$i484, out_$p485, out_$i487, out_$i488, out_$p489, out_$i491, out_$i492, out_$p493, out_$i495, out_$i496, out_$p497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$p525, out_$i526, out_$i527, out_$p528, out_$p529, out_$i530, out_$i531, out_$p532, out_$p533, out_$i534, out_$i535, out_$p536, out_$p537, out_$i538, out_$i539, out_$p540, out_$i541, out_$i542, out_$p543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$i560, out_$i561, out_$i562, out_$i563, out_$p564, out_$i565, out_$i566, out_$i568, out_$i569, out_$p570, out_$i571, out_$i572, out_$i574, out_$i575, out_$p576, out_$i577, out_$i578, out_$i580, out_$i581, out_$p582, out_$i583, out_$i584, out_$i586, out_$i587, out_$p588, out_$i589, out_$i590, out_$i592, out_$i593, out_$p594, out_$i595, out_$i596, out_$i598, out_$i599, out_$p600, out_$i601, out_$i602, out_$i604, out_$i605, out_$p606, out_$i607, out_$i608, out_$i610, out_$i611, out_$p612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$p619, out_$i620, out_$i622, out_$i623, out_$p624, out_$p625, out_$i626, out_$i628, out_$i629, out_$p630, out_$p631, out_$i632, out_$i634, out_$i635, out_$p636, out_$i637, out_$i639, out_$i640, out_$p641, out_$i642, out_$i644, out_$i645, out_$p646, out_$i647, out_$i649, out_$i650, out_$p651, out_$i652, out_$i654, out_$i655, out_$p656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$p665, out_$i666, out_$i667, out_$p668, out_$i670, out_$i671, out_$p672, out_$i674, out_$i675, out_$p676, out_$i678, out_$i679, out_$p680, out_$i682, out_$i683, out_$p684, out_$i685, out_$i686, out_$i687, out_$p688, out_$i689, out_$i690, out_$i691, out_$p692, out_$i693, out_$i694, out_$i695, out_$p696, out_$i697, out_$i698, out_$i699, out_$p700, out_$i701, out_$i702, out_$p703, out_$i704, out_$i705, out_$p706, out_$i708, out_$i709, out_$p710, out_$i712, out_$i713, out_$p714, out_$i716, out_$i717, out_$p718, out_$i720, out_$i721, out_$p722, out_$i724, out_$i725, out_$p726, out_$i728, out_$i729, out_$p730, out_$i732, out_$i733, out_$p734, out_$i736, out_$i737, out_$p738, out_$i739, out_$i740, out_$p741, out_$i742, out_$i743, out_$p744, out_$i745, out_$i746, out_$p747, out_$i748, out_$i749, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$i783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$p799, out_$i800, out_$i801, out_$p802, out_$i803, out_$i804, out_$p805, out_$i806, out_$i807, out_$p808, out_$i809, out_$i810, out_$p811, out_$i813, out_$i814, out_$p815, out_$i817, out_$i818, out_$p819, out_$i821, out_$i822, out_$p823, out_$i825, out_$i826, out_$p827, out_$i829, out_$i830, out_$p831, out_$i833, out_$i834, out_$p835, out_$i837, out_$i838, out_$p839, out_$i841, out_$i842, out_$p843, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$p850, out_$i851, out_$i852, out_$p853, out_$i854, out_$i855, out_$p856, out_$i857, out_$i858, out_$p859, out_$i860, out_$i861, out_$p862, out_$p863, out_$i864, out_$i865, out_$p866, out_$p867, out_$i868, out_$i869, out_$p870, out_$p871, out_$i872, out_$i873, out_$p874, out_$p875, out_$i876, out_$i877, out_$p878, out_$i879, out_$i880, out_$p881, out_$i883, out_$i884, out_$p885, out_$i887, out_$i888, out_$p889, out_$i891, out_$i892, out_$p893, out_$i895, out_$i896, out_$p897, out_$i898, out_$i899, out_$i900, out_$i901, out_$p902, out_$i903, out_$i904, out_$i906, out_$i907, out_$p908, out_$i909, out_$i910, out_$i912, out_$i913, out_$p914, out_$i915, out_$i916, out_$i918, out_$i919, out_$p920, out_$i921, out_$i922, out_$i924, out_$i925, out_$p926, out_$i927, out_$i928, out_$i930, out_$i931, out_$p932, out_$i933, out_$i934, out_$i936, out_$i937, out_$p938, out_$i939, out_$i940, out_$i942, out_$i943, out_$p944, out_$i945, out_$i946, out_$i948, out_$i949, out_$p950, out_$p951, out_$i952, out_$i954, out_$i955, out_$p956, out_$p957, out_$i958, out_$i960, out_$i961, out_$p962, out_$p963, out_$i964, out_$i966, out_$i967, out_$p968, out_$p969, out_$i970, out_$i972, out_$i973, out_$p974, out_$i975, out_$i977, out_$i978, out_$p979, out_$i980, out_$i982, out_$i983, out_$p984, out_$i985, out_$i987, out_$i988, out_$p989, out_$i990, out_$i992, out_$i993, out_$p994, out_$i995, out_$i996, out_$i997, out_$i998, out_$i999, out_$p1000, out_$i1001, out_$i1002, out_$p1003, out_$i1004, out_$i1005, out_$p1006, out_$i1008, out_$i1009, out_$p1010, out_$i1012, out_$i1013, out_$p1014, out_$i1016, out_$i1017, out_$p1018, out_$i1020, out_$i1021, out_$p1022, out_$i1023, out_$i1024, out_$i1025, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$p1030, out_$i1031, out_$i1032, out_$i1033, out_$p1034, out_$i1035, out_$i1036, out_$i1037, out_$p1038, out_$i1039, out_$i1040, out_$p1041, out_$i1042, out_$i1043, out_$p1044, out_$i1046, out_$i1047, out_$p1048, out_$i1050, out_$i1051, out_$p1052, out_$i1054, out_$i1055, out_$p1056, out_$i1058, out_$i1059, out_$p1060, out_$i1062, out_$i1063, out_$p1064, out_$i1066, out_$i1067, out_$p1068, out_$i1070, out_$i1071, out_$p1072, out_$i1074, out_$i1075, out_$p1076, out_$i1077, out_$i1078, out_$p1079, out_$i1080, out_$i1081, out_$p1082, out_$i1083, out_$i1084, out_$p1085, out_$i1086, out_$i1087, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$i1093, out_$i1094, out_$i1095, out_$i1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$i1101, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$i1107, out_$i1108, out_$i1109, out_$i1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$i1115, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$p1120, out_$i1121, out_$i1122, out_$p1123, out_$i1124, out_$i1125, out_$p1126, out_$i1127, out_$i1128, out_$p1129, out_$i1130, out_$i1131, out_$p1132, out_$i1134, out_$i1135, out_$p1136, out_$i1138, out_$i1139, out_$p1140, out_$i1142, out_$i1143, out_$p1144, out_$i1146, out_$i1147, out_$p1148, out_$i1150, out_$i1151, out_$p1152, out_$i1154, out_$i1155, out_$p1156, out_$i1158, out_$i1159, out_$p1160, out_$i1162, out_$i1163, out_$p1164, out_$p1165, out_$i1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$i1172, out_$i1173, out_$p1174, out_$i1175, out_$i1176, out_$p1177, out_$i1178, out_$i1179, out_$p1180, out_$i1181, out_$i1182, out_$p1183, out_$p1184, out_$i1185, out_$i1186, out_$p1187, out_$p1188, out_$i1189, out_$i1190, out_$p1191, out_$p1192, out_$i1193, out_$i1194, out_$p1195, out_$p1196, out_$i1197, out_$i1198, out_$p1199, out_$i1200, out_$i1201, out_$p1202, out_$i1204, out_$i1205, out_$p1206, out_$i1208, out_$i1209, out_$p1210, out_$i1212, out_$i1213, out_$p1214, out_$i1216, out_$i1217, out_$p1218, out_$i1219, out_$i1220, out_$i1221, out_$i1222, out_$p1223, out_$i1224, out_$i1225, out_$i1227, out_$i1228, out_$p1229, out_$i1230, out_$i1231, out_$i1233, out_$i1234, out_$p1235, out_$i1236, out_$i1237, out_$i1239, out_$i1240, out_$p1241, out_$i1242, out_$i1243, out_$i1245, out_$i1246, out_$p1247, out_$i1248, out_$i1249, out_$i1251, out_$i1252, out_$p1253, out_$i1254, out_$i1255, out_$i1257, out_$i1258, out_$p1259, out_$i1260, out_$i1261, out_$i1263, out_$i1264, out_$p1265, out_$i1266, out_$i1267, out_$i1269, out_$i1270, out_$p1271, out_$p1272, out_$i1273, out_$i1275, out_$i1276, out_$p1277, out_$p1278, out_$i1279, out_$i1281, out_$i1282, out_$p1283, out_$p1284, out_$i1285, out_$i1287, out_$i1288, out_$p1289, out_$p1290, out_$i1291, out_$i1293, out_$i1294, out_$p1295, out_$i1296, out_$i1298, out_$i1299, out_$p1300, out_$i1301, out_$i1303, out_$i1304, out_$p1305, out_$i1306, out_$i1308, out_$i1309, out_$p1310, out_$i1311, out_$i1313, out_$i1314, out_$p1315, out_$i1316, out_$i1317, out_$i1318, out_$i1319, out_$i1320, out_$p1321, out_$i1322, out_$i1323, out_$p1324, out_$i1325, out_$i1326, out_$p1327, out_$i1329, out_$i1330, out_$p1331, out_$i1333, out_$i1334, out_$p1335, out_$i1337, out_$i1338, out_$p1339, out_$i1341, out_$i1342, out_$p1343, out_$i1344, out_$i1345, out_$i1346, out_$p1347, out_$i1348, out_$i1349, out_$i1350, out_$p1351, out_$i1352, out_$i1353, out_$i1354, out_$p1355, out_$i1356, out_$i1357, out_$i1358, out_$p1359, out_$i1360, out_$i1361, out_$p1362, out_$i1363, out_$i1364, out_$p1365, out_$i1367, out_$i1368, out_$p1369, out_$i1371, out_$i1372, out_$p1373, out_$i1375, out_$i1376, out_$p1377, out_$i1379, out_$i1380, out_$p1381, out_$i1383, out_$i1384, out_$p1385, out_$i1387, out_$i1388, out_$p1389, out_$i1391, out_$i1392, out_$p1393, out_$i1395, out_$i1396, out_$p1397, out_$i1398, out_$i1399, out_$p1400, out_$i1401, out_$i1402, out_$p1403, out_$i1404, out_$i1405, out_$p1406, out_$i1407, out_$i1408, out_$i1410, out_$i1411, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$p17, in_$p18, in_$p19, in_$p20, in_$p21, in_$p22, in_$p23, in_$p24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p30, in_$p32, in_$p34, in_$p35, in_$p37, in_$p38, in_$p40, in_$p42, in_$p44, in_$p46, in_$p47, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$i139, out_$p140, out_$i141, out_$i142, out_$p143, out_$i144, out_$i145, out_$p146, out_$i147, out_$i148, out_$p149, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i170, out_$i171, out_$p172, out_$i174, out_$i175, out_$p176, out_$i178, out_$i179, out_$p180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i187, out_$i188, out_$i189, out_$i190, out_$p191, out_$i192, out_$i193, out_$p194, out_$i195, out_$i196, out_$p197, out_$i198, out_$i199, out_$p200, out_$i201, out_$i202, out_$p203, out_$p204, out_$i205, out_$i206, out_$p207, out_$p208, out_$i209, out_$i210, out_$p211, out_$p212, out_$i213, out_$i214, out_$p215, out_$p216, out_$i217, out_$i218, out_$p219, out_$i221, out_$i222, out_$p223, out_$i225, out_$i226, out_$p227, out_$i229, out_$i230, out_$p231, out_$i233, out_$i234, out_$p235, out_$i236, out_$i237, out_$p238, out_$i239, out_$i240, out_$i241, out_$i242, out_$p243, out_$i244, out_$i245, out_$i247, out_$i248, out_$p249, out_$i250, out_$i251, out_$i253, out_$i254, out_$p255, out_$i256, out_$i257, out_$i259, out_$i260, out_$p261, out_$i262, out_$i263, out_$i265, out_$i266, out_$p267, out_$i268, out_$i269, out_$i271, out_$i272, out_$p273, out_$i274, out_$i275, out_$i277, out_$i278, out_$p279, out_$i280, out_$i281, out_$i283, out_$i284, out_$p285, out_$i286, out_$i287, out_$i289, out_$i290, out_$p291, out_$p292, out_$i293, out_$i295, out_$i296, out_$p297, out_$p298, out_$i299, out_$i301, out_$i302, out_$p303, out_$p304, out_$i305, out_$i307, out_$i308, out_$p309, out_$p310, out_$i311, out_$i313, out_$i314, out_$p315, out_$i316, out_$i318, out_$i319, out_$p320, out_$i321, out_$i323, out_$i324, out_$p325, out_$i326, out_$i328, out_$i329, out_$p330, out_$i331, out_$i333, out_$i334, out_$p335, out_$i336, out_$i337, out_$i338, out_$i339, out_$i340, out_$p341, out_$i342, out_$i343, out_$p344, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i353, out_$i354, out_$p355, out_$i357, out_$i358, out_$p359, out_$i361, out_$i362, out_$p363, out_$i364, out_$i365, out_$i366, out_$p367, out_$i368, out_$i369, out_$i370, out_$p371, out_$i372, out_$i373, out_$i374, out_$p375, out_$i376, out_$i377, out_$i378, out_$p379, out_$i380, out_$i381, out_$p382, out_$i383, out_$i384, out_$p385, out_$i387, out_$i388, out_$p389, out_$i391, out_$i392, out_$p393, out_$i395, out_$i396, out_$p397, out_$i399, out_$i400, out_$p401, out_$i403, out_$i404, out_$p405, out_$i407, out_$i408, out_$p409, out_$i411, out_$i412, out_$p413, out_$i415, out_$i416, out_$p417, out_$i418, out_$i419, out_$p420, out_$i421, out_$i422, out_$p423, out_$i424, out_$i425, out_$p426, out_$i427, out_$i428, out_$i430, out_$i431, out_$i432, out_$i433, out_$i434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i447, out_$i448, out_$i449, out_$i450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$p461, out_$i462, out_$i463, out_$p464, out_$i465, out_$i466, out_$p467, out_$i468, out_$i469, out_$p470, out_$i471, out_$i472, out_$p473, out_$i475, out_$i476, out_$p477, out_$i479, out_$i480, out_$p481, out_$i483, out_$i484, out_$p485, out_$i487, out_$i488, out_$p489, out_$i491, out_$i492, out_$p493, out_$i495, out_$i496, out_$p497, out_$i499, out_$i500, out_$p501, out_$i503, out_$i504, out_$p505, out_$p506, out_$i507, out_$i508, out_$i509, out_$i510, out_$i511, out_$p512, out_$i513, out_$i514, out_$p515, out_$i516, out_$i517, out_$p518, out_$i519, out_$i520, out_$p521, out_$i522, out_$i523, out_$p524, out_$p525, out_$i526, out_$i527, out_$p528, out_$p529, out_$i530, out_$i531, out_$p532, out_$p533, out_$i534, out_$i535, out_$p536, out_$p537, out_$i538, out_$i539, out_$p540, out_$i541, out_$i542, out_$p543, out_$i545, out_$i546, out_$p547, out_$i549, out_$i550, out_$p551, out_$i553, out_$i554, out_$p555, out_$i557, out_$i558, out_$p559, out_$i560, out_$i561, out_$i562, out_$i563, out_$p564, out_$i565, out_$i566, out_$i568, out_$i569, out_$p570, out_$i571, out_$i572, out_$i574, out_$i575, out_$p576, out_$i577, out_$i578, out_$i580, out_$i581, out_$p582, out_$i583, out_$i584, out_$i586, out_$i587, out_$p588, out_$i589, out_$i590, out_$i592, out_$i593, out_$p594, out_$i595, out_$i596, out_$i598, out_$i599, out_$p600, out_$i601, out_$i602, out_$i604, out_$i605, out_$p606, out_$i607, out_$i608, out_$i610, out_$i611, out_$p612, out_$p613, out_$i614, out_$i616, out_$i617, out_$p618, out_$p619, out_$i620, out_$i622, out_$i623, out_$p624, out_$p625, out_$i626, out_$i628, out_$i629, out_$p630, out_$p631, out_$i632, out_$i634, out_$i635, out_$p636, out_$i637, out_$i639, out_$i640, out_$p641, out_$i642, out_$i644, out_$i645, out_$p646, out_$i647, out_$i649, out_$i650, out_$p651, out_$i652, out_$i654, out_$i655, out_$p656, out_$i657, out_$i658, out_$i659, out_$i660, out_$i661, out_$p662, out_$i663, out_$i664, out_$p665, out_$i666, out_$i667, out_$p668, out_$i670, out_$i671, out_$p672, out_$i674, out_$i675, out_$p676, out_$i678, out_$i679, out_$p680, out_$i682, out_$i683, out_$p684, out_$i685, out_$i686, out_$i687, out_$p688, out_$i689, out_$i690, out_$i691, out_$p692, out_$i693, out_$i694, out_$i695, out_$p696, out_$i697, out_$i698, out_$i699, out_$p700, out_$i701, out_$i702, out_$p703, out_$i704, out_$i705, out_$p706, out_$i708, out_$i709, out_$p710, out_$i712, out_$i713, out_$p714, out_$i716, out_$i717, out_$p718, out_$i720, out_$i721, out_$p722, out_$i724, out_$i725, out_$p726, out_$i728, out_$i729, out_$p730, out_$i732, out_$i733, out_$p734, out_$i736, out_$i737, out_$p738, out_$i739, out_$i740, out_$p741, out_$i742, out_$i743, out_$p744, out_$i745, out_$i746, out_$p747, out_$i748, out_$i749, out_$i751, out_$i752, out_$i753, out_$i754, out_$i755, out_$i756, out_$i757, out_$i758, out_$i759, out_$i760, out_$i761, out_$i762, out_$i763, out_$i764, out_$i765, out_$i766, out_$i767, out_$i768, out_$i769, out_$i770, out_$i771, out_$i772, out_$i773, out_$i774, out_$i775, out_$i776, out_$i777, out_$i778, out_$i779, out_$i780, out_$i781, out_$i782, out_$i783, out_$i784, out_$i785, out_$i786, out_$i787, out_$i788, out_$i789, out_$i790, out_$i791, out_$i792, out_$i793, out_$i794, out_$i795, out_$i796, out_$i797, out_$i798, out_$p799, out_$i800, out_$i801, out_$p802, out_$i803, out_$i804, out_$p805, out_$i806, out_$i807, out_$p808, out_$i809, out_$i810, out_$p811, out_$i813, out_$i814, out_$p815, out_$i817, out_$i818, out_$p819, out_$i821, out_$i822, out_$p823, out_$i825, out_$i826, out_$p827, out_$i829, out_$i830, out_$p831, out_$i833, out_$i834, out_$p835, out_$i837, out_$i838, out_$p839, out_$i841, out_$i842, out_$p843, out_$p844, out_$i845, out_$i846, out_$i847, out_$i848, out_$i849, out_$p850, out_$i851, out_$i852, out_$p853, out_$i854, out_$i855, out_$p856, out_$i857, out_$i858, out_$p859, out_$i860, out_$i861, out_$p862, out_$p863, out_$i864, out_$i865, out_$p866, out_$p867, out_$i868, out_$i869, out_$p870, out_$p871, out_$i872, out_$i873, out_$p874, out_$p875, out_$i876, out_$i877, out_$p878, out_$i879, out_$i880, out_$p881, out_$i883, out_$i884, out_$p885, out_$i887, out_$i888, out_$p889, out_$i891, out_$i892, out_$p893, out_$i895, out_$i896, out_$p897, out_$i898, out_$i899, out_$i900, out_$i901, out_$p902, out_$i903, out_$i904, out_$i906, out_$i907, out_$p908, out_$i909, out_$i910, out_$i912, out_$i913, out_$p914, out_$i915, out_$i916, out_$i918, out_$i919, out_$p920, out_$i921, out_$i922, out_$i924, out_$i925, out_$p926, out_$i927, out_$i928, out_$i930, out_$i931, out_$p932, out_$i933, out_$i934, out_$i936, out_$i937, out_$p938, out_$i939, out_$i940, out_$i942, out_$i943, out_$p944, out_$i945, out_$i946, out_$i948, out_$i949, out_$p950, out_$p951, out_$i952, out_$i954, out_$i955, out_$p956, out_$p957, out_$i958, out_$i960, out_$i961, out_$p962, out_$p963, out_$i964, out_$i966, out_$i967, out_$p968, out_$p969, out_$i970, out_$i972, out_$i973, out_$p974, out_$i975, out_$i977, out_$i978, out_$p979, out_$i980, out_$i982, out_$i983, out_$p984, out_$i985, out_$i987, out_$i988, out_$p989, out_$i990, out_$i992, out_$i993, out_$p994, out_$i995, out_$i996, out_$i997, out_$i998, out_$i999, out_$p1000, out_$i1001, out_$i1002, out_$p1003, out_$i1004, out_$i1005, out_$p1006, out_$i1008, out_$i1009, out_$p1010, out_$i1012, out_$i1013, out_$p1014, out_$i1016, out_$i1017, out_$p1018, out_$i1020, out_$i1021, out_$p1022, out_$i1023, out_$i1024, out_$i1025, out_$p1026, out_$i1027, out_$i1028, out_$i1029, out_$p1030, out_$i1031, out_$i1032, out_$i1033, out_$p1034, out_$i1035, out_$i1036, out_$i1037, out_$p1038, out_$i1039, out_$i1040, out_$p1041, out_$i1042, out_$i1043, out_$p1044, out_$i1046, out_$i1047, out_$p1048, out_$i1050, out_$i1051, out_$p1052, out_$i1054, out_$i1055, out_$p1056, out_$i1058, out_$i1059, out_$p1060, out_$i1062, out_$i1063, out_$p1064, out_$i1066, out_$i1067, out_$p1068, out_$i1070, out_$i1071, out_$p1072, out_$i1074, out_$i1075, out_$p1076, out_$i1077, out_$i1078, out_$p1079, out_$i1080, out_$i1081, out_$p1082, out_$i1083, out_$i1084, out_$p1085, out_$i1086, out_$i1087, out_$i1089, out_$i1090, out_$i1091, out_$i1092, out_$i1093, out_$i1094, out_$i1095, out_$i1096, out_$i1097, out_$i1098, out_$i1099, out_$i1100, out_$i1101, out_$i1102, out_$i1103, out_$i1104, out_$i1105, out_$i1106, out_$i1107, out_$i1108, out_$i1109, out_$i1110, out_$i1111, out_$i1112, out_$i1113, out_$i1114, out_$i1115, out_$i1116, out_$i1117, out_$i1118, out_$i1119, out_$p1120, out_$i1121, out_$i1122, out_$p1123, out_$i1124, out_$i1125, out_$p1126, out_$i1127, out_$i1128, out_$p1129, out_$i1130, out_$i1131, out_$p1132, out_$i1134, out_$i1135, out_$p1136, out_$i1138, out_$i1139, out_$p1140, out_$i1142, out_$i1143, out_$p1144, out_$i1146, out_$i1147, out_$p1148, out_$i1150, out_$i1151, out_$p1152, out_$i1154, out_$i1155, out_$p1156, out_$i1158, out_$i1159, out_$p1160, out_$i1162, out_$i1163, out_$p1164, out_$p1165, out_$i1166, out_$i1167, out_$i1168, out_$i1169, out_$i1170, out_$p1171, out_$i1172, out_$i1173, out_$p1174, out_$i1175, out_$i1176, out_$p1177, out_$i1178, out_$i1179, out_$p1180, out_$i1181, out_$i1182, out_$p1183, out_$p1184, out_$i1185, out_$i1186, out_$p1187, out_$p1188, out_$i1189, out_$i1190, out_$p1191, out_$p1192, out_$i1193, out_$i1194, out_$p1195, out_$p1196, out_$i1197, out_$i1198, out_$p1199, out_$i1200, out_$i1201, out_$p1202, out_$i1204, out_$i1205, out_$p1206, out_$i1208, out_$i1209, out_$p1210, out_$i1212, out_$i1213, out_$p1214, out_$i1216, out_$i1217, out_$p1218, out_$i1219, out_$i1220, out_$i1221, out_$i1222, out_$p1223, out_$i1224, out_$i1225, out_$i1227, out_$i1228, out_$p1229, out_$i1230, out_$i1231, out_$i1233, out_$i1234, out_$p1235, out_$i1236, out_$i1237, out_$i1239, out_$i1240, out_$p1241, out_$i1242, out_$i1243, out_$i1245, out_$i1246, out_$p1247, out_$i1248, out_$i1249, out_$i1251, out_$i1252, out_$p1253, out_$i1254, out_$i1255, out_$i1257, out_$i1258, out_$p1259, out_$i1260, out_$i1261, out_$i1263, out_$i1264, out_$p1265, out_$i1266, out_$i1267, out_$i1269, out_$i1270, out_$p1271, out_$p1272, out_$i1273, out_$i1275, out_$i1276, out_$p1277, out_$p1278, out_$i1279, out_$i1281, out_$i1282, out_$p1283, out_$p1284, out_$i1285, out_$i1287, out_$i1288, out_$p1289, out_$p1290, out_$i1291, out_$i1293, out_$i1294, out_$p1295, out_$i1296, out_$i1298, out_$i1299, out_$p1300, out_$i1301, out_$i1303, out_$i1304, out_$p1305, out_$i1306, out_$i1308, out_$i1309, out_$p1310, out_$i1311, out_$i1313, out_$i1314, out_$p1315, out_$i1316, out_$i1317, out_$i1318, out_$i1319, out_$i1320, out_$p1321, out_$i1322, out_$i1323, out_$p1324, out_$i1325, out_$i1326, out_$p1327, out_$i1329, out_$i1330, out_$p1331, out_$i1333, out_$i1334, out_$p1335, out_$i1337, out_$i1338, out_$p1339, out_$i1341, out_$i1342, out_$p1343, out_$i1344, out_$i1345, out_$i1346, out_$p1347, out_$i1348, out_$i1349, out_$i1350, out_$p1351, out_$i1352, out_$i1353, out_$i1354, out_$p1355, out_$i1356, out_$i1357, out_$i1358, out_$p1359, out_$i1360, out_$i1361, out_$p1362, out_$i1363, out_$i1364, out_$p1365, out_$i1367, out_$i1368, out_$p1369, out_$i1371, out_$i1372, out_$p1373, out_$i1375, out_$i1376, out_$p1377, out_$i1379, out_$i1380, out_$p1381, out_$i1383, out_$i1384, out_$p1385, out_$i1387, out_$i1388, out_$p1389, out_$i1391, out_$i1392, out_$p1393, out_$i1395, out_$i1396, out_$p1397, out_$i1398, out_$i1399, out_$p1400, out_$i1401, out_$i1402, out_$p1403, out_$i1404, out_$i1405, out_$p1406, out_$i1407, out_$i1408, out_$i1410, out_$i1411, out_vslice_dummy_var_80, out_vslice_dummy_var_81, out_vslice_dummy_var_82, out_vslice_dummy_var_83, out_vslice_dummy_var_84, out_vslice_dummy_var_85, out_vslice_dummy_var_86, out_vslice_dummy_var_87, out_vslice_dummy_var_88, out_vslice_dummy_var_89, out_vslice_dummy_var_90, out_vslice_dummy_var_91, out_vslice_dummy_var_92, out_vslice_dummy_var_93, out_vslice_dummy_var_94, out_vslice_dummy_var_95, out_vslice_dummy_var_96, out_vslice_dummy_var_97, out_vslice_dummy_var_98, out_vslice_dummy_var_99, out_vslice_dummy_var_100, out_vslice_dummy_var_101, out_vslice_dummy_var_102, out_vslice_dummy_var_103, out_vslice_dummy_var_104, out_vslice_dummy_var_105, out_vslice_dummy_var_106, out_vslice_dummy_var_107, out_vslice_dummy_var_108, out_vslice_dummy_var_109, out_vslice_dummy_var_110, out_vslice_dummy_var_111, out_vslice_dummy_var_112, out_vslice_dummy_var_113, out_vslice_dummy_var_114, out_vslice_dummy_var_115, out_vslice_dummy_var_116, out_vslice_dummy_var_117, out_vslice_dummy_var_118, out_vslice_dummy_var_119, out_vslice_dummy_var_120, out_vslice_dummy_var_121, out_vslice_dummy_var_122, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176, out_vslice_dummy_var_177, out_vslice_dummy_var_178, out_vslice_dummy_var_179, out_vslice_dummy_var_180, out_vslice_dummy_var_181, out_vslice_dummy_var_182, out_vslice_dummy_var_183, out_vslice_dummy_var_184, out_vslice_dummy_var_185, out_vslice_dummy_var_186, out_vslice_dummy_var_187, out_vslice_dummy_var_188, out_vslice_dummy_var_189, out_vslice_dummy_var_190, out_vslice_dummy_var_191, out_vslice_dummy_var_192, out_vslice_dummy_var_193, out_vslice_dummy_var_194, out_vslice_dummy_var_195, out_vslice_dummy_var_196, out_vslice_dummy_var_197, out_vslice_dummy_var_198, out_vslice_dummy_var_199, out_vslice_dummy_var_200, out_vslice_dummy_var_201, out_vslice_dummy_var_202, out_vslice_dummy_var_203, out_vslice_dummy_var_204, out_vslice_dummy_var_205, out_vslice_dummy_var_206, out_vslice_dummy_var_207, out_vslice_dummy_var_208, out_vslice_dummy_var_209, out_vslice_dummy_var_210, out_vslice_dummy_var_211, out_vslice_dummy_var_212, out_vslice_dummy_var_213, out_vslice_dummy_var_214, out_vslice_dummy_var_215, out_vslice_dummy_var_216, out_vslice_dummy_var_217, out_vslice_dummy_var_218, out_vslice_dummy_var_219, out_vslice_dummy_var_220, out_vslice_dummy_var_221, out_vslice_dummy_var_222, out_vslice_dummy_var_223, out_vslice_dummy_var_224, out_vslice_dummy_var_225, out_vslice_dummy_var_226, out_vslice_dummy_var_227, out_vslice_dummy_var_228, out_vslice_dummy_var_229, out_vslice_dummy_var_230, out_vslice_dummy_var_231, out_vslice_dummy_var_232, out_vslice_dummy_var_233, out_vslice_dummy_var_234, out_vslice_dummy_var_235, out_vslice_dummy_var_236, out_vslice_dummy_var_237, out_vslice_dummy_var_238, out_vslice_dummy_var_239, out_vslice_dummy_var_240, out_vslice_dummy_var_241, out_vslice_dummy_var_242, out_vslice_dummy_var_243);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$p20: ref, in_$p21: ref, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p30: ref, in_$p32: ref, in_$p34: ref, in_$p35: ref, in_$p37: ref, in_$p38: ref, in_$p40: ref, in_$p42: ref, in_$p44: ref, in_$p46: ref, in_$p47: ref, in_$i104: i32, in_$i105: i1, in_$i106: i1, in_$i107: i1, in_$i108: i1, in_$i109: i1, in_$i110: i1, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i1, in_$i115: i1, in_$i116: i1, in_$i117: i1, in_$i118: i1, in_$i119: i1, in_$i120: i1, in_$i121: i1, in_$i122: i1, in_$i123: i1, in_$i124: i1, in_$i125: i1, in_$i126: i1, in_$i127: i1, in_$i128: i1, in_$i129: i1, in_$i130: i1, in_$i131: i1, in_$i132: i1, in_$i133: i1, in_$i134: i1, in_$i135: i1, in_$i136: i1, in_$i137: i1, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i141: i32, in_$i142: i1, in_$p143: ref, in_$i144: i32, in_$i145: i1, in_$p146: ref, in_$i147: i32, in_$i148: i1, in_$p149: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i170: i32, in_$i171: i1, in_$p172: ref, in_$i174: i32, in_$i175: i1, in_$p176: ref, in_$i178: i32, in_$i179: i1, in_$p180: ref, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$i186: i32, in_$i187: i32, in_$i188: i1, in_$i189: i32, in_$i190: i1, in_$p191: ref, in_$i192: i32, in_$i193: i1, in_$p194: ref, in_$i195: i32, in_$i196: i1, in_$p197: ref, in_$i198: i32, in_$i199: i1, in_$p200: ref, in_$i201: i32, in_$i202: i1, in_$p203: ref, in_$p204: ref, in_$i205: i32, in_$i206: i1, in_$p207: ref, in_$p208: ref, in_$i209: i32, in_$i210: i1, in_$p211: ref, in_$p212: ref, in_$i213: i32, in_$i214: i1, in_$p215: ref, in_$p216: ref, in_$i217: i32, in_$i218: i1, in_$p219: ref, in_$i221: i32, in_$i222: i1, in_$p223: ref, in_$i225: i32, in_$i226: i1, in_$p227: ref, in_$i229: i32, in_$i230: i1, in_$p231: ref, in_$i233: i32, in_$i234: i1, in_$p235: ref, in_$i236: i32, in_$i237: i1, in_$p238: ref, in_$i239: i32, in_$i240: i32, in_$i241: i32, in_$i242: i1, in_$p243: ref, in_$i244: i32, in_$i245: i64, in_$i247: i32, in_$i248: i1, in_$p249: ref, in_$i250: i32, in_$i251: i64, in_$i253: i32, in_$i254: i1, in_$p255: ref, in_$i256: i32, in_$i257: i64, in_$i259: i32, in_$i260: i1, in_$p261: ref, in_$i262: i32, in_$i263: i64, in_$i265: i32, in_$i266: i1, in_$p267: ref, in_$i268: i32, in_$i269: i32, in_$i271: i32, in_$i272: i1, in_$p273: ref, in_$i274: i32, in_$i275: i32, in_$i277: i32, in_$i278: i1, in_$p279: ref, in_$i280: i32, in_$i281: i32, in_$i283: i32, in_$i284: i1, in_$p285: ref, in_$i286: i32, in_$i287: i32, in_$i289: i32, in_$i290: i1, in_$p291: ref, in_$p292: ref, in_$i293: i32, in_$i295: i32, in_$i296: i1, in_$p297: ref, in_$p298: ref, in_$i299: i32, in_$i301: i32, in_$i302: i1, in_$p303: ref, in_$p304: ref, in_$i305: i32, in_$i307: i32, in_$i308: i1, in_$p309: ref, in_$p310: ref, in_$i311: i32, in_$i313: i32, in_$i314: i1, in_$p315: ref, in_$i316: i64, in_$i318: i32, in_$i319: i1, in_$p320: ref, in_$i321: i64, in_$i323: i32, in_$i324: i1, in_$p325: ref, in_$i326: i64, in_$i328: i32, in_$i329: i1, in_$p330: ref, in_$i331: i64, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i336: i32, in_$i337: i32, in_$i338: i1, in_$i339: i32, in_$i340: i1, in_$p341: ref, in_$i342: i32, in_$i343: i1, in_$p344: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i353: i32, in_$i354: i1, in_$p355: ref, in_$i357: i32, in_$i358: i1, in_$p359: ref, in_$i361: i32, in_$i362: i1, in_$p363: ref, in_$i364: i32, in_$i365: i32, in_$i366: i1, in_$p367: ref, in_$i368: i32, in_$i369: i32, in_$i370: i1, in_$p371: ref, in_$i372: i32, in_$i373: i32, in_$i374: i1, in_$p375: ref, in_$i376: i32, in_$i377: i32, in_$i378: i1, in_$p379: ref, in_$i380: i32, in_$i381: i1, in_$p382: ref, in_$i383: i32, in_$i384: i1, in_$p385: ref, in_$i387: i32, in_$i388: i1, in_$p389: ref, in_$i391: i32, in_$i392: i1, in_$p393: ref, in_$i395: i32, in_$i396: i1, in_$p397: ref, in_$i399: i32, in_$i400: i1, in_$p401: ref, in_$i403: i32, in_$i404: i1, in_$p405: ref, in_$i407: i32, in_$i408: i1, in_$p409: ref, in_$i411: i32, in_$i412: i1, in_$p413: ref, in_$i415: i32, in_$i416: i1, in_$p417: ref, in_$i418: i32, in_$i419: i1, in_$p420: ref, in_$i421: i32, in_$i422: i1, in_$p423: ref, in_$i424: i32, in_$i425: i1, in_$p426: ref, in_$i427: i32, in_$i428: i1, in_$i430: i32, in_$i431: i32, in_$i432: i32, in_$i433: i1, in_$i434: i32, in_$i435: i1, in_$i436: i1, in_$i437: i1, in_$i438: i1, in_$i439: i1, in_$i440: i1, in_$i441: i1, in_$i442: i1, in_$i443: i1, in_$i444: i1, in_$i445: i1, in_$i446: i1, in_$i447: i1, in_$i448: i1, in_$i449: i1, in_$i450: i1, in_$i451: i1, in_$i452: i1, in_$i453: i1, in_$i454: i1, in_$i455: i1, in_$i456: i1, in_$i457: i1, in_$i458: i1, in_$i459: i32, in_$i460: i1, in_$p461: ref, in_$i462: i32, in_$i463: i1, in_$p464: ref, in_$i465: i32, in_$i466: i1, in_$p467: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i471: i32, in_$i472: i1, in_$p473: ref, in_$i475: i32, in_$i476: i1, in_$p477: ref, in_$i479: i32, in_$i480: i1, in_$p481: ref, in_$i483: i32, in_$i484: i1, in_$p485: ref, in_$i487: i32, in_$i488: i1, in_$p489: ref, in_$i491: i32, in_$i492: i1, in_$p493: ref, in_$i495: i32, in_$i496: i1, in_$p497: ref, in_$i499: i32, in_$i500: i1, in_$p501: ref, in_$i503: i32, in_$i504: i1, in_$p505: ref, in_$p506: ref, in_$i507: i32, in_$i508: i32, in_$i509: i1, in_$i510: i32, in_$i511: i1, in_$p512: ref, in_$i513: i32, in_$i514: i1, in_$p515: ref, in_$i516: i32, in_$i517: i1, in_$p518: ref, in_$i519: i32, in_$i520: i1, in_$p521: ref, in_$i522: i32, in_$i523: i1, in_$p524: ref, in_$p525: ref, in_$i526: i32, in_$i527: i1, in_$p528: ref, in_$p529: ref, in_$i530: i32, in_$i531: i1, in_$p532: ref, in_$p533: ref, in_$i534: i32, in_$i535: i1, in_$p536: ref, in_$p537: ref, in_$i538: i32, in_$i539: i1, in_$p540: ref, in_$i541: i32, in_$i542: i1, in_$p543: ref, in_$i545: i32, in_$i546: i1, in_$p547: ref, in_$i549: i32, in_$i550: i1, in_$p551: ref, in_$i553: i32, in_$i554: i1, in_$p555: ref, in_$i557: i32, in_$i558: i1, in_$p559: ref, in_$i560: i32, in_$i561: i32, in_$i562: i32, in_$i563: i1, in_$p564: ref, in_$i565: i32, in_$i566: i64, in_$i568: i32, in_$i569: i1, in_$p570: ref, in_$i571: i32, in_$i572: i64, in_$i574: i32, in_$i575: i1, in_$p576: ref, in_$i577: i32, in_$i578: i64, in_$i580: i32, in_$i581: i1, in_$p582: ref, in_$i583: i32, in_$i584: i64, in_$i586: i32, in_$i587: i1, in_$p588: ref, in_$i589: i32, in_$i590: i32, in_$i592: i32, in_$i593: i1, in_$p594: ref, in_$i595: i32, in_$i596: i32, in_$i598: i32, in_$i599: i1, in_$p600: ref, in_$i601: i32, in_$i602: i32, in_$i604: i32, in_$i605: i1, in_$p606: ref, in_$i607: i32, in_$i608: i32, in_$i610: i32, in_$i611: i1, in_$p612: ref, in_$p613: ref, in_$i614: i32, in_$i616: i32, in_$i617: i1, in_$p618: ref, in_$p619: ref, in_$i620: i32, in_$i622: i32, in_$i623: i1, in_$p624: ref, in_$p625: ref, in_$i626: i32, in_$i628: i32, in_$i629: i1, in_$p630: ref, in_$p631: ref, in_$i632: i32, in_$i634: i32, in_$i635: i1, in_$p636: ref, in_$i637: i64, in_$i639: i32, in_$i640: i1, in_$p641: ref, in_$i642: i64, in_$i644: i32, in_$i645: i1, in_$p646: ref, in_$i647: i64, in_$i649: i32, in_$i650: i1, in_$p651: ref, in_$i652: i64, in_$i654: i32, in_$i655: i1, in_$p656: ref, in_$i657: i32, in_$i658: i32, in_$i659: i1, in_$i660: i32, in_$i661: i1, in_$p662: ref, in_$i663: i32, in_$i664: i1, in_$p665: ref, in_$i666: i32, in_$i667: i1, in_$p668: ref, in_$i670: i32, in_$i671: i1, in_$p672: ref, in_$i674: i32, in_$i675: i1, in_$p676: ref, in_$i678: i32, in_$i679: i1, in_$p680: ref, in_$i682: i32, in_$i683: i1, in_$p684: ref, in_$i685: i32, in_$i686: i32, in_$i687: i1, in_$p688: ref, in_$i689: i32, in_$i690: i32, in_$i691: i1, in_$p692: ref, in_$i693: i32, in_$i694: i32, in_$i695: i1, in_$p696: ref, in_$i697: i32, in_$i698: i32, in_$i699: i1, in_$p700: ref, in_$i701: i32, in_$i702: i1, in_$p703: ref, in_$i704: i32, in_$i705: i1, in_$p706: ref, in_$i708: i32, in_$i709: i1, in_$p710: ref, in_$i712: i32, in_$i713: i1, in_$p714: ref, in_$i716: i32, in_$i717: i1, in_$p718: ref, in_$i720: i32, in_$i721: i1, in_$p722: ref, in_$i724: i32, in_$i725: i1, in_$p726: ref, in_$i728: i32, in_$i729: i1, in_$p730: ref, in_$i732: i32, in_$i733: i1, in_$p734: ref, in_$i736: i32, in_$i737: i1, in_$p738: ref, in_$i739: i32, in_$i740: i1, in_$p741: ref, in_$i742: i32, in_$i743: i1, in_$p744: ref, in_$i745: i32, in_$i746: i1, in_$p747: ref, in_$i748: i32, in_$i749: i1, in_$i751: i32, in_$i752: i32, in_$i753: i32, in_$i754: i1, in_$i755: i32, in_$i756: i1, in_$i757: i1, in_$i758: i1, in_$i759: i32, in_$i760: i1, in_$i761: i32, in_$i762: i1, in_$i763: i32, in_$i764: i1, in_$i765: i32, in_$i766: i32, in_$i767: i1, in_$i768: i32, in_$i769: i1, in_$i770: i32, in_$i771: i1, in_$i772: i32, in_$i773: i1, in_$i774: i1, in_$i775: i1, in_$i776: i1, in_$i777: i1, in_$i778: i1, in_$i779: i1, in_$i780: i1, in_$i781: i1, in_$i782: i1, in_$i783: i1, in_$i784: i1, in_$i785: i1, in_$i786: i1, in_$i787: i1, in_$i788: i1, in_$i789: i1, in_$i790: i1, in_$i791: i1, in_$i792: i1, in_$i793: i1, in_$i794: i1, in_$i795: i1, in_$i796: i1, in_$i797: i32, in_$i798: i1, in_$p799: ref, in_$i800: i32, in_$i801: i1, in_$p802: ref, in_$i803: i32, in_$i804: i1, in_$p805: ref, in_$i806: i32, in_$i807: i1, in_$p808: ref, in_$i809: i32, in_$i810: i1, in_$p811: ref, in_$i813: i32, in_$i814: i1, in_$p815: ref, in_$i817: i32, in_$i818: i1, in_$p819: ref, in_$i821: i32, in_$i822: i1, in_$p823: ref, in_$i825: i32, in_$i826: i1, in_$p827: ref, in_$i829: i32, in_$i830: i1, in_$p831: ref, in_$i833: i32, in_$i834: i1, in_$p835: ref, in_$i837: i32, in_$i838: i1, in_$p839: ref, in_$i841: i32, in_$i842: i1, in_$p843: ref, in_$p844: ref, in_$i845: i32, in_$i846: i32, in_$i847: i1, in_$i848: i32, in_$i849: i1, in_$p850: ref, in_$i851: i32, in_$i852: i1, in_$p853: ref, in_$i854: i32, in_$i855: i1, in_$p856: ref, in_$i857: i32, in_$i858: i1, in_$p859: ref, in_$i860: i32, in_$i861: i1, in_$p862: ref, in_$p863: ref, in_$i864: i32, in_$i865: i1, in_$p866: ref, in_$p867: ref, in_$i868: i32, in_$i869: i1, in_$p870: ref, in_$p871: ref, in_$i872: i32, in_$i873: i1, in_$p874: ref, in_$p875: ref, in_$i876: i32, in_$i877: i1, in_$p878: ref, in_$i879: i32, in_$i880: i1, in_$p881: ref, in_$i883: i32, in_$i884: i1, in_$p885: ref, in_$i887: i32, in_$i888: i1, in_$p889: ref, in_$i891: i32, in_$i892: i1, in_$p893: ref, in_$i895: i32, in_$i896: i1, in_$p897: ref, in_$i898: i32, in_$i899: i32, in_$i900: i32, in_$i901: i1, in_$p902: ref, in_$i903: i32, in_$i904: i64, in_$i906: i32, in_$i907: i1, in_$p908: ref, in_$i909: i32, in_$i910: i64, in_$i912: i32, in_$i913: i1, in_$p914: ref, in_$i915: i32, in_$i916: i64, in_$i918: i32, in_$i919: i1, in_$p920: ref, in_$i921: i32, in_$i922: i64, in_$i924: i32, in_$i925: i1, in_$p926: ref, in_$i927: i32, in_$i928: i32, in_$i930: i32, in_$i931: i1, in_$p932: ref, in_$i933: i32, in_$i934: i32, in_$i936: i32, in_$i937: i1, in_$p938: ref, in_$i939: i32, in_$i940: i32, in_$i942: i32, in_$i943: i1, in_$p944: ref, in_$i945: i32, in_$i946: i32, in_$i948: i32, in_$i949: i1, in_$p950: ref, in_$p951: ref, in_$i952: i32, in_$i954: i32, in_$i955: i1, in_$p956: ref, in_$p957: ref, in_$i958: i32, in_$i960: i32, in_$i961: i1, in_$p962: ref, in_$p963: ref, in_$i964: i32, in_$i966: i32, in_$i967: i1, in_$p968: ref, in_$p969: ref, in_$i970: i32, in_$i972: i32, in_$i973: i1, in_$p974: ref, in_$i975: i64, in_$i977: i32, in_$i978: i1, in_$p979: ref, in_$i980: i64, in_$i982: i32, in_$i983: i1, in_$p984: ref, in_$i985: i64, in_$i987: i32, in_$i988: i1, in_$p989: ref, in_$i990: i64, in_$i992: i32, in_$i993: i1, in_$p994: ref, in_$i995: i32, in_$i996: i32, in_$i997: i1, in_$i998: i32, in_$i999: i1, in_$p1000: ref, in_$i1001: i32, in_$i1002: i1, in_$p1003: ref, in_$i1004: i32, in_$i1005: i1, in_$p1006: ref, in_$i1008: i32, in_$i1009: i1, in_$p1010: ref, in_$i1012: i32, in_$i1013: i1, in_$p1014: ref, in_$i1016: i32, in_$i1017: i1, in_$p1018: ref, in_$i1020: i32, in_$i1021: i1, in_$p1022: ref, in_$i1023: i32, in_$i1024: i32, in_$i1025: i1, in_$p1026: ref, in_$i1027: i32, in_$i1028: i32, in_$i1029: i1, in_$p1030: ref, in_$i1031: i32, in_$i1032: i32, in_$i1033: i1, in_$p1034: ref, in_$i1035: i32, in_$i1036: i32, in_$i1037: i1, in_$p1038: ref, in_$i1039: i32, in_$i1040: i1, in_$p1041: ref, in_$i1042: i32, in_$i1043: i1, in_$p1044: ref, in_$i1046: i32, in_$i1047: i1, in_$p1048: ref, in_$i1050: i32, in_$i1051: i1, in_$p1052: ref, in_$i1054: i32, in_$i1055: i1, in_$p1056: ref, in_$i1058: i32, in_$i1059: i1, in_$p1060: ref, in_$i1062: i32, in_$i1063: i1, in_$p1064: ref, in_$i1066: i32, in_$i1067: i1, in_$p1068: ref, in_$i1070: i32, in_$i1071: i1, in_$p1072: ref, in_$i1074: i32, in_$i1075: i1, in_$p1076: ref, in_$i1077: i32, in_$i1078: i1, in_$p1079: ref, in_$i1080: i32, in_$i1081: i1, in_$p1082: ref, in_$i1083: i32, in_$i1084: i1, in_$p1085: ref, in_$i1086: i32, in_$i1087: i1, in_$i1089: i32, in_$i1090: i32, in_$i1091: i32, in_$i1092: i1, in_$i1093: i32, in_$i1094: i1, in_$i1095: i1, in_$i1096: i1, in_$i1097: i1, in_$i1098: i1, in_$i1099: i1, in_$i1100: i1, in_$i1101: i1, in_$i1102: i1, in_$i1103: i1, in_$i1104: i1, in_$i1105: i1, in_$i1106: i1, in_$i1107: i1, in_$i1108: i1, in_$i1109: i1, in_$i1110: i1, in_$i1111: i1, in_$i1112: i1, in_$i1113: i1, in_$i1114: i1, in_$i1115: i1, in_$i1116: i1, in_$i1117: i1, in_$i1118: i32, in_$i1119: i1, in_$p1120: ref, in_$i1121: i32, in_$i1122: i1, in_$p1123: ref, in_$i1124: i32, in_$i1125: i1, in_$p1126: ref, in_$i1127: i32, in_$i1128: i1, in_$p1129: ref, in_$i1130: i32, in_$i1131: i1, in_$p1132: ref, in_$i1134: i32, in_$i1135: i1, in_$p1136: ref, in_$i1138: i32, in_$i1139: i1, in_$p1140: ref, in_$i1142: i32, in_$i1143: i1, in_$p1144: ref, in_$i1146: i32, in_$i1147: i1, in_$p1148: ref, in_$i1150: i32, in_$i1151: i1, in_$p1152: ref, in_$i1154: i32, in_$i1155: i1, in_$p1156: ref, in_$i1158: i32, in_$i1159: i1, in_$p1160: ref, in_$i1162: i32, in_$i1163: i1, in_$p1164: ref, in_$p1165: ref, in_$i1166: i32, in_$i1167: i32, in_$i1168: i1, in_$i1169: i32, in_$i1170: i1, in_$p1171: ref, in_$i1172: i32, in_$i1173: i1, in_$p1174: ref, in_$i1175: i32, in_$i1176: i1, in_$p1177: ref, in_$i1178: i32, in_$i1179: i1, in_$p1180: ref, in_$i1181: i32, in_$i1182: i1, in_$p1183: ref, in_$p1184: ref, in_$i1185: i32, in_$i1186: i1, in_$p1187: ref, in_$p1188: ref, in_$i1189: i32, in_$i1190: i1, in_$p1191: ref, in_$p1192: ref, in_$i1193: i32, in_$i1194: i1, in_$p1195: ref, in_$p1196: ref, in_$i1197: i32, in_$i1198: i1, in_$p1199: ref, in_$i1200: i32, in_$i1201: i1, in_$p1202: ref, in_$i1204: i32, in_$i1205: i1, in_$p1206: ref, in_$i1208: i32, in_$i1209: i1, in_$p1210: ref, in_$i1212: i32, in_$i1213: i1, in_$p1214: ref, in_$i1216: i32, in_$i1217: i1, in_$p1218: ref, in_$i1219: i32, in_$i1220: i32, in_$i1221: i32, in_$i1222: i1, in_$p1223: ref, in_$i1224: i32, in_$i1225: i64, in_$i1227: i32, in_$i1228: i1, in_$p1229: ref, in_$i1230: i32, in_$i1231: i64, in_$i1233: i32, in_$i1234: i1, in_$p1235: ref, in_$i1236: i32, in_$i1237: i64, in_$i1239: i32, in_$i1240: i1, in_$p1241: ref, in_$i1242: i32, in_$i1243: i64, in_$i1245: i32, in_$i1246: i1, in_$p1247: ref, in_$i1248: i32, in_$i1249: i32, in_$i1251: i32, in_$i1252: i1, in_$p1253: ref, in_$i1254: i32, in_$i1255: i32, in_$i1257: i32, in_$i1258: i1, in_$p1259: ref, in_$i1260: i32, in_$i1261: i32, in_$i1263: i32, in_$i1264: i1, in_$p1265: ref, in_$i1266: i32, in_$i1267: i32, in_$i1269: i32, in_$i1270: i1, in_$p1271: ref, in_$p1272: ref, in_$i1273: i32, in_$i1275: i32, in_$i1276: i1, in_$p1277: ref, in_$p1278: ref, in_$i1279: i32, in_$i1281: i32, in_$i1282: i1, in_$p1283: ref, in_$p1284: ref, in_$i1285: i32, in_$i1287: i32, in_$i1288: i1, in_$p1289: ref, in_$p1290: ref, in_$i1291: i32, in_$i1293: i32, in_$i1294: i1, in_$p1295: ref, in_$i1296: i64, in_$i1298: i32, in_$i1299: i1, in_$p1300: ref, in_$i1301: i64, in_$i1303: i32, in_$i1304: i1, in_$p1305: ref, in_$i1306: i64, in_$i1308: i32, in_$i1309: i1, in_$p1310: ref, in_$i1311: i64, in_$i1313: i32, in_$i1314: i1, in_$p1315: ref, in_$i1316: i32, in_$i1317: i32, in_$i1318: i1, in_$i1319: i32, in_$i1320: i1, in_$p1321: ref, in_$i1322: i32, in_$i1323: i1, in_$p1324: ref, in_$i1325: i32, in_$i1326: i1, in_$p1327: ref, in_$i1329: i32, in_$i1330: i1, in_$p1331: ref, in_$i1333: i32, in_$i1334: i1, in_$p1335: ref, in_$i1337: i32, in_$i1338: i1, in_$p1339: ref, in_$i1341: i32, in_$i1342: i1, in_$p1343: ref, in_$i1344: i32, in_$i1345: i32, in_$i1346: i1, in_$p1347: ref, in_$i1348: i32, in_$i1349: i32, in_$i1350: i1, in_$p1351: ref, in_$i1352: i32, in_$i1353: i32, in_$i1354: i1, in_$p1355: ref, in_$i1356: i32, in_$i1357: i32, in_$i1358: i1, in_$p1359: ref, in_$i1360: i32, in_$i1361: i1, in_$p1362: ref, in_$i1363: i32, in_$i1364: i1, in_$p1365: ref, in_$i1367: i32, in_$i1368: i1, in_$p1369: ref, in_$i1371: i32, in_$i1372: i1, in_$p1373: ref, in_$i1375: i32, in_$i1376: i1, in_$p1377: ref, in_$i1379: i32, in_$i1380: i1, in_$p1381: ref, in_$i1383: i32, in_$i1384: i1, in_$p1385: ref, in_$i1387: i32, in_$i1388: i1, in_$p1389: ref, in_$i1391: i32, in_$i1392: i1, in_$p1393: ref, in_$i1395: i32, in_$i1396: i1, in_$p1397: ref, in_$i1398: i32, in_$i1399: i1, in_$p1400: ref, in_$i1401: i32, in_$i1402: i1, in_$p1403: ref, in_$i1404: i32, in_$i1405: i1, in_$p1406: ref, in_$i1407: i32, in_$i1408: i1, in_$i1410: i32, in_$i1411: i32, in_vslice_dummy_var_80: i32, in_vslice_dummy_var_81: i32, in_vslice_dummy_var_82: i32, in_vslice_dummy_var_83: i32, in_vslice_dummy_var_84: i32, in_vslice_dummy_var_85: i32, in_vslice_dummy_var_86: i32, in_vslice_dummy_var_87: i32, in_vslice_dummy_var_88: i32, in_vslice_dummy_var_89: i32, in_vslice_dummy_var_90: i32, in_vslice_dummy_var_91: i32, in_vslice_dummy_var_92: i32, in_vslice_dummy_var_93: i32, in_vslice_dummy_var_94: i32, in_vslice_dummy_var_95: i32, in_vslice_dummy_var_96: i32, in_vslice_dummy_var_97: i32, in_vslice_dummy_var_98: i32, in_vslice_dummy_var_99: i32, in_vslice_dummy_var_100: i32, in_vslice_dummy_var_101: i32, in_vslice_dummy_var_102: i32, in_vslice_dummy_var_103: i32, in_vslice_dummy_var_104: i32, in_vslice_dummy_var_105: i32, in_vslice_dummy_var_106: i32, in_vslice_dummy_var_107: i32, in_vslice_dummy_var_108: i32, in_vslice_dummy_var_109: i32, in_vslice_dummy_var_110: i32, in_vslice_dummy_var_111: i32, in_vslice_dummy_var_112: i32, in_vslice_dummy_var_113: i32, in_vslice_dummy_var_114: i32, in_vslice_dummy_var_115: i32, in_vslice_dummy_var_116: i32, in_vslice_dummy_var_117: i32, in_vslice_dummy_var_118: i32, in_vslice_dummy_var_119: i32, in_vslice_dummy_var_120: i32, in_vslice_dummy_var_121: i32, in_vslice_dummy_var_122: i32, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32, in_vslice_dummy_var_177: i32, in_vslice_dummy_var_178: i32, in_vslice_dummy_var_179: i32, in_vslice_dummy_var_180: i32, in_vslice_dummy_var_181: i32, in_vslice_dummy_var_182: i32, in_vslice_dummy_var_183: i32, in_vslice_dummy_var_184: i32, in_vslice_dummy_var_185: i32, in_vslice_dummy_var_186: i32, in_vslice_dummy_var_187: i32, in_vslice_dummy_var_188: i32, in_vslice_dummy_var_189: i32, in_vslice_dummy_var_190: i32, in_vslice_dummy_var_191: i32, in_vslice_dummy_var_192: i32, in_vslice_dummy_var_193: i32, in_vslice_dummy_var_194: i32, in_vslice_dummy_var_195: i32, in_vslice_dummy_var_196: i32, in_vslice_dummy_var_197: i32, in_vslice_dummy_var_198: i32, in_vslice_dummy_var_199: i32, in_vslice_dummy_var_200: i32, in_vslice_dummy_var_201: i32, in_vslice_dummy_var_202: i32, in_vslice_dummy_var_203: i32, in_vslice_dummy_var_204: i32, in_vslice_dummy_var_205: i32, in_vslice_dummy_var_206: i32, in_vslice_dummy_var_207: i32, in_vslice_dummy_var_208: i32, in_vslice_dummy_var_209: i32, in_vslice_dummy_var_210: i32, in_vslice_dummy_var_211: i32, in_vslice_dummy_var_212: i32, in_vslice_dummy_var_213: i32, in_vslice_dummy_var_214: i32, in_vslice_dummy_var_215: i32, in_vslice_dummy_var_216: i32, in_vslice_dummy_var_217: i32, in_vslice_dummy_var_218: i32, in_vslice_dummy_var_219: i32, in_vslice_dummy_var_220: i32, in_vslice_dummy_var_221: i32, in_vslice_dummy_var_222: i32, in_vslice_dummy_var_223: i32, in_vslice_dummy_var_224: i32, in_vslice_dummy_var_225: i32, in_vslice_dummy_var_226: i32, in_vslice_dummy_var_227: i32, in_vslice_dummy_var_228: i32, in_vslice_dummy_var_229: i32, in_vslice_dummy_var_230: i32, in_vslice_dummy_var_231: i32, in_vslice_dummy_var_232: i32, in_vslice_dummy_var_233: i32, in_vslice_dummy_var_234: i32, in_vslice_dummy_var_235: i32, in_vslice_dummy_var_236: i32, in_vslice_dummy_var_237: i32, in_vslice_dummy_var_238: i32, in_vslice_dummy_var_239: i32, in_vslice_dummy_var_240: i32, in_vslice_dummy_var_241: i32, in_vslice_dummy_var_242: i32, in_vslice_dummy_var_243: i32) returns (out_$i104: i32, out_$i105: i1, out_$i106: i1, out_$i107: i1, out_$i108: i1, out_$i109: i1, out_$i110: i1, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i1, out_$i115: i1, out_$i116: i1, out_$i117: i1, out_$i118: i1, out_$i119: i1, out_$i120: i1, out_$i121: i1, out_$i122: i1, out_$i123: i1, out_$i124: i1, out_$i125: i1, out_$i126: i1, out_$i127: i1, out_$i128: i1, out_$i129: i1, out_$i130: i1, out_$i131: i1, out_$i132: i1, out_$i133: i1, out_$i134: i1, out_$i135: i1, out_$i136: i1, out_$i137: i1, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i141: i32, out_$i142: i1, out_$p143: ref, out_$i144: i32, out_$i145: i1, out_$p146: ref, out_$i147: i32, out_$i148: i1, out_$p149: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i170: i32, out_$i171: i1, out_$p172: ref, out_$i174: i32, out_$i175: i1, out_$p176: ref, out_$i178: i32, out_$i179: i1, out_$p180: ref, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$i186: i32, out_$i187: i32, out_$i188: i1, out_$i189: i32, out_$i190: i1, out_$p191: ref, out_$i192: i32, out_$i193: i1, out_$p194: ref, out_$i195: i32, out_$i196: i1, out_$p197: ref, out_$i198: i32, out_$i199: i1, out_$p200: ref, out_$i201: i32, out_$i202: i1, out_$p203: ref, out_$p204: ref, out_$i205: i32, out_$i206: i1, out_$p207: ref, out_$p208: ref, out_$i209: i32, out_$i210: i1, out_$p211: ref, out_$p212: ref, out_$i213: i32, out_$i214: i1, out_$p215: ref, out_$p216: ref, out_$i217: i32, out_$i218: i1, out_$p219: ref, out_$i221: i32, out_$i222: i1, out_$p223: ref, out_$i225: i32, out_$i226: i1, out_$p227: ref, out_$i229: i32, out_$i230: i1, out_$p231: ref, out_$i233: i32, out_$i234: i1, out_$p235: ref, out_$i236: i32, out_$i237: i1, out_$p238: ref, out_$i239: i32, out_$i240: i32, out_$i241: i32, out_$i242: i1, out_$p243: ref, out_$i244: i32, out_$i245: i64, out_$i247: i32, out_$i248: i1, out_$p249: ref, out_$i250: i32, out_$i251: i64, out_$i253: i32, out_$i254: i1, out_$p255: ref, out_$i256: i32, out_$i257: i64, out_$i259: i32, out_$i260: i1, out_$p261: ref, out_$i262: i32, out_$i263: i64, out_$i265: i32, out_$i266: i1, out_$p267: ref, out_$i268: i32, out_$i269: i32, out_$i271: i32, out_$i272: i1, out_$p273: ref, out_$i274: i32, out_$i275: i32, out_$i277: i32, out_$i278: i1, out_$p279: ref, out_$i280: i32, out_$i281: i32, out_$i283: i32, out_$i284: i1, out_$p285: ref, out_$i286: i32, out_$i287: i32, out_$i289: i32, out_$i290: i1, out_$p291: ref, out_$p292: ref, out_$i293: i32, out_$i295: i32, out_$i296: i1, out_$p297: ref, out_$p298: ref, out_$i299: i32, out_$i301: i32, out_$i302: i1, out_$p303: ref, out_$p304: ref, out_$i305: i32, out_$i307: i32, out_$i308: i1, out_$p309: ref, out_$p310: ref, out_$i311: i32, out_$i313: i32, out_$i314: i1, out_$p315: ref, out_$i316: i64, out_$i318: i32, out_$i319: i1, out_$p320: ref, out_$i321: i64, out_$i323: i32, out_$i324: i1, out_$p325: ref, out_$i326: i64, out_$i328: i32, out_$i329: i1, out_$p330: ref, out_$i331: i64, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i336: i32, out_$i337: i32, out_$i338: i1, out_$i339: i32, out_$i340: i1, out_$p341: ref, out_$i342: i32, out_$i343: i1, out_$p344: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i353: i32, out_$i354: i1, out_$p355: ref, out_$i357: i32, out_$i358: i1, out_$p359: ref, out_$i361: i32, out_$i362: i1, out_$p363: ref, out_$i364: i32, out_$i365: i32, out_$i366: i1, out_$p367: ref, out_$i368: i32, out_$i369: i32, out_$i370: i1, out_$p371: ref, out_$i372: i32, out_$i373: i32, out_$i374: i1, out_$p375: ref, out_$i376: i32, out_$i377: i32, out_$i378: i1, out_$p379: ref, out_$i380: i32, out_$i381: i1, out_$p382: ref, out_$i383: i32, out_$i384: i1, out_$p385: ref, out_$i387: i32, out_$i388: i1, out_$p389: ref, out_$i391: i32, out_$i392: i1, out_$p393: ref, out_$i395: i32, out_$i396: i1, out_$p397: ref, out_$i399: i32, out_$i400: i1, out_$p401: ref, out_$i403: i32, out_$i404: i1, out_$p405: ref, out_$i407: i32, out_$i408: i1, out_$p409: ref, out_$i411: i32, out_$i412: i1, out_$p413: ref, out_$i415: i32, out_$i416: i1, out_$p417: ref, out_$i418: i32, out_$i419: i1, out_$p420: ref, out_$i421: i32, out_$i422: i1, out_$p423: ref, out_$i424: i32, out_$i425: i1, out_$p426: ref, out_$i427: i32, out_$i428: i1, out_$i430: i32, out_$i431: i32, out_$i432: i32, out_$i433: i1, out_$i434: i32, out_$i435: i1, out_$i436: i1, out_$i437: i1, out_$i438: i1, out_$i439: i1, out_$i440: i1, out_$i441: i1, out_$i442: i1, out_$i443: i1, out_$i444: i1, out_$i445: i1, out_$i446: i1, out_$i447: i1, out_$i448: i1, out_$i449: i1, out_$i450: i1, out_$i451: i1, out_$i452: i1, out_$i453: i1, out_$i454: i1, out_$i455: i1, out_$i456: i1, out_$i457: i1, out_$i458: i1, out_$i459: i32, out_$i460: i1, out_$p461: ref, out_$i462: i32, out_$i463: i1, out_$p464: ref, out_$i465: i32, out_$i466: i1, out_$p467: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i471: i32, out_$i472: i1, out_$p473: ref, out_$i475: i32, out_$i476: i1, out_$p477: ref, out_$i479: i32, out_$i480: i1, out_$p481: ref, out_$i483: i32, out_$i484: i1, out_$p485: ref, out_$i487: i32, out_$i488: i1, out_$p489: ref, out_$i491: i32, out_$i492: i1, out_$p493: ref, out_$i495: i32, out_$i496: i1, out_$p497: ref, out_$i499: i32, out_$i500: i1, out_$p501: ref, out_$i503: i32, out_$i504: i1, out_$p505: ref, out_$p506: ref, out_$i507: i32, out_$i508: i32, out_$i509: i1, out_$i510: i32, out_$i511: i1, out_$p512: ref, out_$i513: i32, out_$i514: i1, out_$p515: ref, out_$i516: i32, out_$i517: i1, out_$p518: ref, out_$i519: i32, out_$i520: i1, out_$p521: ref, out_$i522: i32, out_$i523: i1, out_$p524: ref, out_$p525: ref, out_$i526: i32, out_$i527: i1, out_$p528: ref, out_$p529: ref, out_$i530: i32, out_$i531: i1, out_$p532: ref, out_$p533: ref, out_$i534: i32, out_$i535: i1, out_$p536: ref, out_$p537: ref, out_$i538: i32, out_$i539: i1, out_$p540: ref, out_$i541: i32, out_$i542: i1, out_$p543: ref, out_$i545: i32, out_$i546: i1, out_$p547: ref, out_$i549: i32, out_$i550: i1, out_$p551: ref, out_$i553: i32, out_$i554: i1, out_$p555: ref, out_$i557: i32, out_$i558: i1, out_$p559: ref, out_$i560: i32, out_$i561: i32, out_$i562: i32, out_$i563: i1, out_$p564: ref, out_$i565: i32, out_$i566: i64, out_$i568: i32, out_$i569: i1, out_$p570: ref, out_$i571: i32, out_$i572: i64, out_$i574: i32, out_$i575: i1, out_$p576: ref, out_$i577: i32, out_$i578: i64, out_$i580: i32, out_$i581: i1, out_$p582: ref, out_$i583: i32, out_$i584: i64, out_$i586: i32, out_$i587: i1, out_$p588: ref, out_$i589: i32, out_$i590: i32, out_$i592: i32, out_$i593: i1, out_$p594: ref, out_$i595: i32, out_$i596: i32, out_$i598: i32, out_$i599: i1, out_$p600: ref, out_$i601: i32, out_$i602: i32, out_$i604: i32, out_$i605: i1, out_$p606: ref, out_$i607: i32, out_$i608: i32, out_$i610: i32, out_$i611: i1, out_$p612: ref, out_$p613: ref, out_$i614: i32, out_$i616: i32, out_$i617: i1, out_$p618: ref, out_$p619: ref, out_$i620: i32, out_$i622: i32, out_$i623: i1, out_$p624: ref, out_$p625: ref, out_$i626: i32, out_$i628: i32, out_$i629: i1, out_$p630: ref, out_$p631: ref, out_$i632: i32, out_$i634: i32, out_$i635: i1, out_$p636: ref, out_$i637: i64, out_$i639: i32, out_$i640: i1, out_$p641: ref, out_$i642: i64, out_$i644: i32, out_$i645: i1, out_$p646: ref, out_$i647: i64, out_$i649: i32, out_$i650: i1, out_$p651: ref, out_$i652: i64, out_$i654: i32, out_$i655: i1, out_$p656: ref, out_$i657: i32, out_$i658: i32, out_$i659: i1, out_$i660: i32, out_$i661: i1, out_$p662: ref, out_$i663: i32, out_$i664: i1, out_$p665: ref, out_$i666: i32, out_$i667: i1, out_$p668: ref, out_$i670: i32, out_$i671: i1, out_$p672: ref, out_$i674: i32, out_$i675: i1, out_$p676: ref, out_$i678: i32, out_$i679: i1, out_$p680: ref, out_$i682: i32, out_$i683: i1, out_$p684: ref, out_$i685: i32, out_$i686: i32, out_$i687: i1, out_$p688: ref, out_$i689: i32, out_$i690: i32, out_$i691: i1, out_$p692: ref, out_$i693: i32, out_$i694: i32, out_$i695: i1, out_$p696: ref, out_$i697: i32, out_$i698: i32, out_$i699: i1, out_$p700: ref, out_$i701: i32, out_$i702: i1, out_$p703: ref, out_$i704: i32, out_$i705: i1, out_$p706: ref, out_$i708: i32, out_$i709: i1, out_$p710: ref, out_$i712: i32, out_$i713: i1, out_$p714: ref, out_$i716: i32, out_$i717: i1, out_$p718: ref, out_$i720: i32, out_$i721: i1, out_$p722: ref, out_$i724: i32, out_$i725: i1, out_$p726: ref, out_$i728: i32, out_$i729: i1, out_$p730: ref, out_$i732: i32, out_$i733: i1, out_$p734: ref, out_$i736: i32, out_$i737: i1, out_$p738: ref, out_$i739: i32, out_$i740: i1, out_$p741: ref, out_$i742: i32, out_$i743: i1, out_$p744: ref, out_$i745: i32, out_$i746: i1, out_$p747: ref, out_$i748: i32, out_$i749: i1, out_$i751: i32, out_$i752: i32, out_$i753: i32, out_$i754: i1, out_$i755: i32, out_$i756: i1, out_$i757: i1, out_$i758: i1, out_$i759: i32, out_$i760: i1, out_$i761: i32, out_$i762: i1, out_$i763: i32, out_$i764: i1, out_$i765: i32, out_$i766: i32, out_$i767: i1, out_$i768: i32, out_$i769: i1, out_$i770: i32, out_$i771: i1, out_$i772: i32, out_$i773: i1, out_$i774: i1, out_$i775: i1, out_$i776: i1, out_$i777: i1, out_$i778: i1, out_$i779: i1, out_$i780: i1, out_$i781: i1, out_$i782: i1, out_$i783: i1, out_$i784: i1, out_$i785: i1, out_$i786: i1, out_$i787: i1, out_$i788: i1, out_$i789: i1, out_$i790: i1, out_$i791: i1, out_$i792: i1, out_$i793: i1, out_$i794: i1, out_$i795: i1, out_$i796: i1, out_$i797: i32, out_$i798: i1, out_$p799: ref, out_$i800: i32, out_$i801: i1, out_$p802: ref, out_$i803: i32, out_$i804: i1, out_$p805: ref, out_$i806: i32, out_$i807: i1, out_$p808: ref, out_$i809: i32, out_$i810: i1, out_$p811: ref, out_$i813: i32, out_$i814: i1, out_$p815: ref, out_$i817: i32, out_$i818: i1, out_$p819: ref, out_$i821: i32, out_$i822: i1, out_$p823: ref, out_$i825: i32, out_$i826: i1, out_$p827: ref, out_$i829: i32, out_$i830: i1, out_$p831: ref, out_$i833: i32, out_$i834: i1, out_$p835: ref, out_$i837: i32, out_$i838: i1, out_$p839: ref, out_$i841: i32, out_$i842: i1, out_$p843: ref, out_$p844: ref, out_$i845: i32, out_$i846: i32, out_$i847: i1, out_$i848: i32, out_$i849: i1, out_$p850: ref, out_$i851: i32, out_$i852: i1, out_$p853: ref, out_$i854: i32, out_$i855: i1, out_$p856: ref, out_$i857: i32, out_$i858: i1, out_$p859: ref, out_$i860: i32, out_$i861: i1, out_$p862: ref, out_$p863: ref, out_$i864: i32, out_$i865: i1, out_$p866: ref, out_$p867: ref, out_$i868: i32, out_$i869: i1, out_$p870: ref, out_$p871: ref, out_$i872: i32, out_$i873: i1, out_$p874: ref, out_$p875: ref, out_$i876: i32, out_$i877: i1, out_$p878: ref, out_$i879: i32, out_$i880: i1, out_$p881: ref, out_$i883: i32, out_$i884: i1, out_$p885: ref, out_$i887: i32, out_$i888: i1, out_$p889: ref, out_$i891: i32, out_$i892: i1, out_$p893: ref, out_$i895: i32, out_$i896: i1, out_$p897: ref, out_$i898: i32, out_$i899: i32, out_$i900: i32, out_$i901: i1, out_$p902: ref, out_$i903: i32, out_$i904: i64, out_$i906: i32, out_$i907: i1, out_$p908: ref, out_$i909: i32, out_$i910: i64, out_$i912: i32, out_$i913: i1, out_$p914: ref, out_$i915: i32, out_$i916: i64, out_$i918: i32, out_$i919: i1, out_$p920: ref, out_$i921: i32, out_$i922: i64, out_$i924: i32, out_$i925: i1, out_$p926: ref, out_$i927: i32, out_$i928: i32, out_$i930: i32, out_$i931: i1, out_$p932: ref, out_$i933: i32, out_$i934: i32, out_$i936: i32, out_$i937: i1, out_$p938: ref, out_$i939: i32, out_$i940: i32, out_$i942: i32, out_$i943: i1, out_$p944: ref, out_$i945: i32, out_$i946: i32, out_$i948: i32, out_$i949: i1, out_$p950: ref, out_$p951: ref, out_$i952: i32, out_$i954: i32, out_$i955: i1, out_$p956: ref, out_$p957: ref, out_$i958: i32, out_$i960: i32, out_$i961: i1, out_$p962: ref, out_$p963: ref, out_$i964: i32, out_$i966: i32, out_$i967: i1, out_$p968: ref, out_$p969: ref, out_$i970: i32, out_$i972: i32, out_$i973: i1, out_$p974: ref, out_$i975: i64, out_$i977: i32, out_$i978: i1, out_$p979: ref, out_$i980: i64, out_$i982: i32, out_$i983: i1, out_$p984: ref, out_$i985: i64, out_$i987: i32, out_$i988: i1, out_$p989: ref, out_$i990: i64, out_$i992: i32, out_$i993: i1, out_$p994: ref, out_$i995: i32, out_$i996: i32, out_$i997: i1, out_$i998: i32, out_$i999: i1, out_$p1000: ref, out_$i1001: i32, out_$i1002: i1, out_$p1003: ref, out_$i1004: i32, out_$i1005: i1, out_$p1006: ref, out_$i1008: i32, out_$i1009: i1, out_$p1010: ref, out_$i1012: i32, out_$i1013: i1, out_$p1014: ref, out_$i1016: i32, out_$i1017: i1, out_$p1018: ref, out_$i1020: i32, out_$i1021: i1, out_$p1022: ref, out_$i1023: i32, out_$i1024: i32, out_$i1025: i1, out_$p1026: ref, out_$i1027: i32, out_$i1028: i32, out_$i1029: i1, out_$p1030: ref, out_$i1031: i32, out_$i1032: i32, out_$i1033: i1, out_$p1034: ref, out_$i1035: i32, out_$i1036: i32, out_$i1037: i1, out_$p1038: ref, out_$i1039: i32, out_$i1040: i1, out_$p1041: ref, out_$i1042: i32, out_$i1043: i1, out_$p1044: ref, out_$i1046: i32, out_$i1047: i1, out_$p1048: ref, out_$i1050: i32, out_$i1051: i1, out_$p1052: ref, out_$i1054: i32, out_$i1055: i1, out_$p1056: ref, out_$i1058: i32, out_$i1059: i1, out_$p1060: ref, out_$i1062: i32, out_$i1063: i1, out_$p1064: ref, out_$i1066: i32, out_$i1067: i1, out_$p1068: ref, out_$i1070: i32, out_$i1071: i1, out_$p1072: ref, out_$i1074: i32, out_$i1075: i1, out_$p1076: ref, out_$i1077: i32, out_$i1078: i1, out_$p1079: ref, out_$i1080: i32, out_$i1081: i1, out_$p1082: ref, out_$i1083: i32, out_$i1084: i1, out_$p1085: ref, out_$i1086: i32, out_$i1087: i1, out_$i1089: i32, out_$i1090: i32, out_$i1091: i32, out_$i1092: i1, out_$i1093: i32, out_$i1094: i1, out_$i1095: i1, out_$i1096: i1, out_$i1097: i1, out_$i1098: i1, out_$i1099: i1, out_$i1100: i1, out_$i1101: i1, out_$i1102: i1, out_$i1103: i1, out_$i1104: i1, out_$i1105: i1, out_$i1106: i1, out_$i1107: i1, out_$i1108: i1, out_$i1109: i1, out_$i1110: i1, out_$i1111: i1, out_$i1112: i1, out_$i1113: i1, out_$i1114: i1, out_$i1115: i1, out_$i1116: i1, out_$i1117: i1, out_$i1118: i32, out_$i1119: i1, out_$p1120: ref, out_$i1121: i32, out_$i1122: i1, out_$p1123: ref, out_$i1124: i32, out_$i1125: i1, out_$p1126: ref, out_$i1127: i32, out_$i1128: i1, out_$p1129: ref, out_$i1130: i32, out_$i1131: i1, out_$p1132: ref, out_$i1134: i32, out_$i1135: i1, out_$p1136: ref, out_$i1138: i32, out_$i1139: i1, out_$p1140: ref, out_$i1142: i32, out_$i1143: i1, out_$p1144: ref, out_$i1146: i32, out_$i1147: i1, out_$p1148: ref, out_$i1150: i32, out_$i1151: i1, out_$p1152: ref, out_$i1154: i32, out_$i1155: i1, out_$p1156: ref, out_$i1158: i32, out_$i1159: i1, out_$p1160: ref, out_$i1162: i32, out_$i1163: i1, out_$p1164: ref, out_$p1165: ref, out_$i1166: i32, out_$i1167: i32, out_$i1168: i1, out_$i1169: i32, out_$i1170: i1, out_$p1171: ref, out_$i1172: i32, out_$i1173: i1, out_$p1174: ref, out_$i1175: i32, out_$i1176: i1, out_$p1177: ref, out_$i1178: i32, out_$i1179: i1, out_$p1180: ref, out_$i1181: i32, out_$i1182: i1, out_$p1183: ref, out_$p1184: ref, out_$i1185: i32, out_$i1186: i1, out_$p1187: ref, out_$p1188: ref, out_$i1189: i32, out_$i1190: i1, out_$p1191: ref, out_$p1192: ref, out_$i1193: i32, out_$i1194: i1, out_$p1195: ref, out_$p1196: ref, out_$i1197: i32, out_$i1198: i1, out_$p1199: ref, out_$i1200: i32, out_$i1201: i1, out_$p1202: ref, out_$i1204: i32, out_$i1205: i1, out_$p1206: ref, out_$i1208: i32, out_$i1209: i1, out_$p1210: ref, out_$i1212: i32, out_$i1213: i1, out_$p1214: ref, out_$i1216: i32, out_$i1217: i1, out_$p1218: ref, out_$i1219: i32, out_$i1220: i32, out_$i1221: i32, out_$i1222: i1, out_$p1223: ref, out_$i1224: i32, out_$i1225: i64, out_$i1227: i32, out_$i1228: i1, out_$p1229: ref, out_$i1230: i32, out_$i1231: i64, out_$i1233: i32, out_$i1234: i1, out_$p1235: ref, out_$i1236: i32, out_$i1237: i64, out_$i1239: i32, out_$i1240: i1, out_$p1241: ref, out_$i1242: i32, out_$i1243: i64, out_$i1245: i32, out_$i1246: i1, out_$p1247: ref, out_$i1248: i32, out_$i1249: i32, out_$i1251: i32, out_$i1252: i1, out_$p1253: ref, out_$i1254: i32, out_$i1255: i32, out_$i1257: i32, out_$i1258: i1, out_$p1259: ref, out_$i1260: i32, out_$i1261: i32, out_$i1263: i32, out_$i1264: i1, out_$p1265: ref, out_$i1266: i32, out_$i1267: i32, out_$i1269: i32, out_$i1270: i1, out_$p1271: ref, out_$p1272: ref, out_$i1273: i32, out_$i1275: i32, out_$i1276: i1, out_$p1277: ref, out_$p1278: ref, out_$i1279: i32, out_$i1281: i32, out_$i1282: i1, out_$p1283: ref, out_$p1284: ref, out_$i1285: i32, out_$i1287: i32, out_$i1288: i1, out_$p1289: ref, out_$p1290: ref, out_$i1291: i32, out_$i1293: i32, out_$i1294: i1, out_$p1295: ref, out_$i1296: i64, out_$i1298: i32, out_$i1299: i1, out_$p1300: ref, out_$i1301: i64, out_$i1303: i32, out_$i1304: i1, out_$p1305: ref, out_$i1306: i64, out_$i1308: i32, out_$i1309: i1, out_$p1310: ref, out_$i1311: i64, out_$i1313: i32, out_$i1314: i1, out_$p1315: ref, out_$i1316: i32, out_$i1317: i32, out_$i1318: i1, out_$i1319: i32, out_$i1320: i1, out_$p1321: ref, out_$i1322: i32, out_$i1323: i1, out_$p1324: ref, out_$i1325: i32, out_$i1326: i1, out_$p1327: ref, out_$i1329: i32, out_$i1330: i1, out_$p1331: ref, out_$i1333: i32, out_$i1334: i1, out_$p1335: ref, out_$i1337: i32, out_$i1338: i1, out_$p1339: ref, out_$i1341: i32, out_$i1342: i1, out_$p1343: ref, out_$i1344: i32, out_$i1345: i32, out_$i1346: i1, out_$p1347: ref, out_$i1348: i32, out_$i1349: i32, out_$i1350: i1, out_$p1351: ref, out_$i1352: i32, out_$i1353: i32, out_$i1354: i1, out_$p1355: ref, out_$i1356: i32, out_$i1357: i32, out_$i1358: i1, out_$p1359: ref, out_$i1360: i32, out_$i1361: i1, out_$p1362: ref, out_$i1363: i32, out_$i1364: i1, out_$p1365: ref, out_$i1367: i32, out_$i1368: i1, out_$p1369: ref, out_$i1371: i32, out_$i1372: i1, out_$p1373: ref, out_$i1375: i32, out_$i1376: i1, out_$p1377: ref, out_$i1379: i32, out_$i1380: i1, out_$p1381: ref, out_$i1383: i32, out_$i1384: i1, out_$p1385: ref, out_$i1387: i32, out_$i1388: i1, out_$p1389: ref, out_$i1391: i32, out_$i1392: i1, out_$p1393: ref, out_$i1395: i32, out_$i1396: i1, out_$p1397: ref, out_$i1398: i32, out_$i1399: i1, out_$p1400: ref, out_$i1401: i32, out_$i1402: i1, out_$p1403: ref, out_$i1404: i32, out_$i1405: i1, out_$p1406: ref, out_$i1407: i32, out_$i1408: i1, out_$i1410: i32, out_$i1411: i32, out_vslice_dummy_var_80: i32, out_vslice_dummy_var_81: i32, out_vslice_dummy_var_82: i32, out_vslice_dummy_var_83: i32, out_vslice_dummy_var_84: i32, out_vslice_dummy_var_85: i32, out_vslice_dummy_var_86: i32, out_vslice_dummy_var_87: i32, out_vslice_dummy_var_88: i32, out_vslice_dummy_var_89: i32, out_vslice_dummy_var_90: i32, out_vslice_dummy_var_91: i32, out_vslice_dummy_var_92: i32, out_vslice_dummy_var_93: i32, out_vslice_dummy_var_94: i32, out_vslice_dummy_var_95: i32, out_vslice_dummy_var_96: i32, out_vslice_dummy_var_97: i32, out_vslice_dummy_var_98: i32, out_vslice_dummy_var_99: i32, out_vslice_dummy_var_100: i32, out_vslice_dummy_var_101: i32, out_vslice_dummy_var_102: i32, out_vslice_dummy_var_103: i32, out_vslice_dummy_var_104: i32, out_vslice_dummy_var_105: i32, out_vslice_dummy_var_106: i32, out_vslice_dummy_var_107: i32, out_vslice_dummy_var_108: i32, out_vslice_dummy_var_109: i32, out_vslice_dummy_var_110: i32, out_vslice_dummy_var_111: i32, out_vslice_dummy_var_112: i32, out_vslice_dummy_var_113: i32, out_vslice_dummy_var_114: i32, out_vslice_dummy_var_115: i32, out_vslice_dummy_var_116: i32, out_vslice_dummy_var_117: i32, out_vslice_dummy_var_118: i32, out_vslice_dummy_var_119: i32, out_vslice_dummy_var_120: i32, out_vslice_dummy_var_121: i32, out_vslice_dummy_var_122: i32, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32, out_vslice_dummy_var_177: i32, out_vslice_dummy_var_178: i32, out_vslice_dummy_var_179: i32, out_vslice_dummy_var_180: i32, out_vslice_dummy_var_181: i32, out_vslice_dummy_var_182: i32, out_vslice_dummy_var_183: i32, out_vslice_dummy_var_184: i32, out_vslice_dummy_var_185: i32, out_vslice_dummy_var_186: i32, out_vslice_dummy_var_187: i32, out_vslice_dummy_var_188: i32, out_vslice_dummy_var_189: i32, out_vslice_dummy_var_190: i32, out_vslice_dummy_var_191: i32, out_vslice_dummy_var_192: i32, out_vslice_dummy_var_193: i32, out_vslice_dummy_var_194: i32, out_vslice_dummy_var_195: i32, out_vslice_dummy_var_196: i32, out_vslice_dummy_var_197: i32, out_vslice_dummy_var_198: i32, out_vslice_dummy_var_199: i32, out_vslice_dummy_var_200: i32, out_vslice_dummy_var_201: i32, out_vslice_dummy_var_202: i32, out_vslice_dummy_var_203: i32, out_vslice_dummy_var_204: i32, out_vslice_dummy_var_205: i32, out_vslice_dummy_var_206: i32, out_vslice_dummy_var_207: i32, out_vslice_dummy_var_208: i32, out_vslice_dummy_var_209: i32, out_vslice_dummy_var_210: i32, out_vslice_dummy_var_211: i32, out_vslice_dummy_var_212: i32, out_vslice_dummy_var_213: i32, out_vslice_dummy_var_214: i32, out_vslice_dummy_var_215: i32, out_vslice_dummy_var_216: i32, out_vslice_dummy_var_217: i32, out_vslice_dummy_var_218: i32, out_vslice_dummy_var_219: i32, out_vslice_dummy_var_220: i32, out_vslice_dummy_var_221: i32, out_vslice_dummy_var_222: i32, out_vslice_dummy_var_223: i32, out_vslice_dummy_var_224: i32, out_vslice_dummy_var_225: i32, out_vslice_dummy_var_226: i32, out_vslice_dummy_var_227: i32, out_vslice_dummy_var_228: i32, out_vslice_dummy_var_229: i32, out_vslice_dummy_var_230: i32, out_vslice_dummy_var_231: i32, out_vslice_dummy_var_232: i32, out_vslice_dummy_var_233: i32, out_vslice_dummy_var_234: i32, out_vslice_dummy_var_235: i32, out_vslice_dummy_var_236: i32, out_vslice_dummy_var_237: i32, out_vslice_dummy_var_238: i32, out_vslice_dummy_var_239: i32, out_vslice_dummy_var_240: i32, out_vslice_dummy_var_241: i32, out_vslice_dummy_var_242: i32, out_vslice_dummy_var_243: i32);
  modifies $M.45, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.0, $M.14, $CurrAddr, assertsPassed, $M.51, $M.7, $M.21, $M.22, $M.19, $M.20, $M.16, $M.47, $M.9, $M.10, $M.11, $M.12, $M.13, $M.52, $M.27, $M.23, $M.15, $M.46, $M.53, $M.54, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.41, $M.42, $M.43, $M.44, $M.49, $M.37, $M.38, $M.39, $M.40, $M.50, $M.48, $M.55, $M.56, $M.57, $M.58, $M.59;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();


