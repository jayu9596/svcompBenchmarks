var $M.0: [ref]i8;

var $M.2: [ref]ref;

var $M.3: [ref]ref;

var $M.4: [ref]ref;

var $M.5: [ref]ref;

var $M.6: [ref]i24;

var $M.7: [ref]i8;

var $M.8: [ref]ref;

var $M.9: [ref]i8;

var $M.11: [ref]i8;

var $M.12: [ref]i8;

var $M.13: i8;

var $M.14: [ref]i8;

var $M.15: [ref]i8;

var $M.16: [ref]i8;

var $M.17: [ref]i8;

var $M.18: [ref]i8;

var $M.19: [ref]i8;

var $M.20: [ref]i8;

var $M.21: [ref]i8;

var $M.22: i32;

var $M.23: [ref]i8;

var $M.24: [ref]i8;

var $M.25: [ref]i8;

var $M.26: [ref]i8;

var $M.27: i32;

var $M.28: ref;

var $M.29: i32;

var $M.30: ref;

var $M.31: i32;

var $M.32: ref;

var $M.33: i32;

var $M.34: ref;

var $M.35: [ref]i8;

var $M.36: [ref]i8;

var $M.37: [ref]i8;

var $M.39: [ref]ref;

var $M.40: [ref]i8;

var $M.41: [ref]i8;

var $M.42: [ref]i8;

var $M.43: [ref]i8;

var $M.44: [ref]i8;

var $M.45: [ref]i8;

var $M.46: [ref]i8;

var $M.47: [ref]i8;

var $M.48: [ref]i8;

var $M.50: [ref]i32;

var $M.51: [ref]i8;

var $M.52: [ref]i8;

var $M.53: [ref]i8;

var $M.54: [ref]i8;

var $M.55: [ref]i8;

var $M.57: [ref]i8;

var $M.58: [ref]i8;

var $M.59: [ref]i8;

var $M.60: [ref]i8;

var $M.61: [ref]i8;

var $M.62: [ref]i8;

var $M.63: [ref]i8;

var $M.64: [ref]ref;

var $M.66: [ref]ref;

var $M.67: [ref]i64;

var $M.68: [ref]i32;

var $M.69: [ref]i32;

var $M.70: [ref]i32;

var $M.71: [ref]i32;

var $M.72: [ref]i8;

var $M.73: [ref]ref;

var $M.74: [ref]i64;

var $M.75: [ref]i32;

var $M.76: i32;

var $M.77: i32;

var $M.78: [ref]i8;

var $M.79: [ref]i8;

var $M.80: [ref]i8;

var $M.81: [ref]i8;

var $M.82: [ref]i8;

var $M.83: [ref]i8;

var $M.84: [ref]i8;

var $M.85: [ref]i8;

var $M.86: ref;

var $M.87: ref;

var $M.89: [ref]i64;

var $M.90: ref;

var $M.91: i32;

var $M.92: i32;

var $M.93: i32;

var $M.94: i32;

var $M.95: i32;

var $M.96: i32;

var $M.97: i32;

var $M.98: i32;

var $M.99: i32;

var $M.100: i32;

var $M.101: i32;

var $M.102: i32;

var $M.103: i32;

var $M.104: i32;

var $CurrAddr: ref;

var assertsPassed: bool;

type i1 = int;

type i5 = int;

type i6 = int;

type i8 = int;

type i16 = int;

type i24 = int;

type i32 = int;

type i40 = int;

type i48 = int;

type i56 = int;

type i64 = int;

type i80 = int;

type i88 = int;

type i96 = int;

type i128 = int;

type i160 = int;

type i256 = int;

type ref = i64;

type float;

const $0: i32;

axiom $0 == 0;

const $1: i32;

axiom $1 == 1;

const $0.ref: ref;

axiom $0.ref == 0;

const $1.ref: ref;

axiom $1.ref == 1;

const $2.ref: ref;

axiom $2.ref == 2;

const $3.ref: ref;

axiom $3.ref == 3;

const $4.ref: ref;

axiom $4.ref == 4;

const $5.ref: ref;

axiom $5.ref == 5;

const $6.ref: ref;

axiom $6.ref == 6;

const $7.ref: ref;

axiom $7.ref == 7;

const $8.ref: ref;

axiom $8.ref == 8;

const $9.ref: ref;

axiom $9.ref == 9;

const $10.ref: ref;

axiom $10.ref == 10;

const $11.ref: ref;

axiom $11.ref == 11;

const $12.ref: ref;

axiom $12.ref == 12;

const $13.ref: ref;

axiom $13.ref == 13;

const $14.ref: ref;

axiom $14.ref == 14;

const $1024.ref: ref;

axiom $1024.ref == 1024;

axiom $GLOBALS_BOTTOM == $sub.ref(0, 466005);

axiom $EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

axiom $MALLOC_TOP == 9223372036854775807;

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) : bv64;

function {:builtin "bv2int"} $bv2int.64(i: bv64) : i64;

function {:inline} $p2i.ref.i8(p: ref) : i8
{
  $trunc.i64.i8(p)
}

function {:inline} $i2p.i8.ref(i: i8) : ref
{
  $zext.i8.i64(i)
}

function {:inline} $p2i.ref.i16(p: ref) : i16
{
  $trunc.i64.i16(p)
}

function {:inline} $i2p.i16.ref(i: i16) : ref
{
  $zext.i16.i64(i)
}

function {:inline} $p2i.ref.i32(p: ref) : i32
{
  $trunc.i64.i32(p)
}

function {:inline} $i2p.i32.ref(i: i32) : ref
{
  $zext.i32.i64(i)
}

function {:inline} $p2i.ref.i64(p: ref) : i64
{
  p
}

function {:inline} $i2p.i64.ref(i: i64) : ref
{
  i
}

function {:inline} $eq.ref(p1: ref, p2: ref) : i1
{
  (if $eq.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $eq.ref.bool(p1: ref, p2: ref) : bool
{
  $eq.i64.bool(p1, p2)
}

function {:inline} $ne.ref(p1: ref, p2: ref) : i1
{
  (if $ne.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ne.ref.bool(p1: ref, p2: ref) : bool
{
  $ne.i64.bool(p1, p2)
}

function {:inline} $ugt.ref(p1: ref, p2: ref) : i1
{
  (if $ugt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ugt.ref.bool(p1: ref, p2: ref) : bool
{
  $ugt.i64.bool(p1, p2)
}

function {:inline} $uge.ref(p1: ref, p2: ref) : i1
{
  (if $uge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $uge.ref.bool(p1: ref, p2: ref) : bool
{
  $uge.i64.bool(p1, p2)
}

function {:inline} $ult.ref(p1: ref, p2: ref) : i1
{
  (if $ult.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ult.ref.bool(p1: ref, p2: ref) : bool
{
  $ult.i64.bool(p1, p2)
}

function {:inline} $ule.ref(p1: ref, p2: ref) : i1
{
  (if $ule.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $ule.ref.bool(p1: ref, p2: ref) : bool
{
  $ule.i64.bool(p1, p2)
}

function {:inline} $sgt.ref(p1: ref, p2: ref) : i1
{
  (if $sgt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sgt.ref.bool(p1: ref, p2: ref) : bool
{
  $sgt.i64.bool(p1, p2)
}

function {:inline} $sge.ref(p1: ref, p2: ref) : i1
{
  (if $sge.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sge.ref.bool(p1: ref, p2: ref) : bool
{
  $sge.i64.bool(p1, p2)
}

function {:inline} $slt.ref(p1: ref, p2: ref) : i1
{
  (if $slt.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $slt.ref.bool(p1: ref, p2: ref) : bool
{
  $slt.i64.bool(p1, p2)
}

function {:inline} $sle.ref(p1: ref, p2: ref) : i1
{
  (if $sle.i64.bool(p1, p2) then 1 else 0)
}

function {:inline} $sle.ref.bool(p1: ref, p2: ref) : bool
{
  $sle.i64.bool(p1, p2)
}

function {:inline} $add.ref(p1: ref, p2: ref) : ref
{
  $add.i64(p1, p2)
}

function {:inline} $sub.ref(p1: ref, p2: ref) : ref
{
  $sub.i64(p1, p2)
}

function {:inline} $mul.ref(p1: ref, p2: ref) : ref
{
  $mul.i64(p1, p2)
}

const LDV_IN_INTERRUPT: ref;

axiom LDV_IN_INTERRUPT == $sub.ref(0, 1028);

const probed_2: ref;

axiom probed_2 == $sub.ref(0, 2056);

const ldv_timer_1_0: ref;

axiom ldv_timer_1_0 == $sub.ref(0, 3084);

const ldv_timer_list_1_0: ref;

axiom ldv_timer_list_1_0 == $sub.ref(0, 4116);

const ldv_timer_1_1: ref;

axiom ldv_timer_1_1 == $sub.ref(0, 5144);

const ldv_timer_list_1_1: ref;

axiom ldv_timer_list_1_1 == $sub.ref(0, 6176);

const ldv_timer_1_2: ref;

axiom ldv_timer_1_2 == $sub.ref(0, 7204);

const ldv_timer_list_1_2: ref;

axiom ldv_timer_list_1_2 == $sub.ref(0, 8236);

const ldv_timer_1_3: ref;

axiom ldv_timer_1_3 == $sub.ref(0, 9264);

const ldv_timer_list_1_3: ref;

axiom ldv_timer_list_1_3 == $sub.ref(0, 10296);

const oxu_hc_driver_group0: ref;

axiom oxu_hc_driver_group0 == $sub.ref(0, 11328);

const oxu_hc_driver_group1: ref;

axiom oxu_hc_driver_group1 == $sub.ref(0, 12360);

const oxu_driver_group1: ref;

axiom oxu_driver_group1 == $sub.ref(0, 13392);

const ref_cnt: ref;

axiom ref_cnt == $sub.ref(0, 14420);

const ldv_state_variable_4: ref;

axiom ldv_state_variable_4 == $sub.ref(0, 15448);

const ldv_state_variable_1: ref;

axiom ldv_state_variable_1 == $sub.ref(0, 16476);

const ldv_state_variable_0: ref;

axiom ldv_state_variable_0 == $sub.ref(0, 17504);

const ldv_state_variable_3: ref;

axiom ldv_state_variable_3 == $sub.ref(0, 18532);

const ldv_state_variable_2: ref;

axiom ldv_state_variable_2 == $sub.ref(0, 19560);

const ldv_retval_0: ref;

axiom ldv_retval_0 == $sub.ref(0, 20588);

const ldv_retval_1: ref;

axiom ldv_retval_1 == $sub.ref(0, 21616);

const ldv_retval_2: ref;

axiom ldv_retval_2 == $sub.ref(0, 22644);

const ldv_retval_6: ref;

axiom ldv_retval_6 == $sub.ref(0, 23672);

const ldv_retval_5: ref;

axiom ldv_retval_5 == $sub.ref(0, 24700);

const ldv_retval_4: ref;

axiom ldv_retval_4 == $sub.ref(0, 25728);

const ldv_retval_3: ref;

axiom ldv_retval_3 == $sub.ref(0, 26756);

const ldv_spin: ref;

axiom ldv_spin == $sub.ref(0, 27784);

const oxu_hc_driver: ref;

axiom oxu_hc_driver == $sub.ref(0, 29160);

const oxu_driver: ref;

axiom oxu_driver == $sub.ref(0, 30360);

const park: ref;

axiom park == $sub.ref(0, 31388);

const log2_irq_thresh: ref;

axiom log2_irq_thresh == $sub.ref(0, 32416);

const ignore_oc: ref;

axiom ignore_oc == $sub.ref(0, 33441);

const {:count 4} fls_strings: ref;

axiom fls_strings == $sub.ref(0, 34497);

const {:count 5} .str.38: ref;

axiom .str.38 == $sub.ref(0, 35526);

const {:count 4} .str.39: ref;

axiom .str.39 == $sub.ref(0, 36554);

const {:count 4} .str.40: ref;

axiom .str.40 == $sub.ref(0, 37582);

const {:count 3} .str.41: ref;

axiom .str.41 == $sub.ref(0, 38609);

const {:count 13} .str.113: ref;

axiom .str.113 == $sub.ref(0, 39646);

const platform_bus_type: ref;

axiom platform_bus_type == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32776));

const {:count 25} .str.114: ref;

axiom .str.114 == $sub.ref(0, 40695);

const {:count 13} .str.2: ref;

axiom .str.2 == $sub.ref(0, 41732);

const {:count 14} .str.115: ref;

axiom .str.115 == $sub.ref(0, 42770);

const .str: ref;

axiom .str == $sub.ref(0, 44004);

const {:count 17} .str.116: ref;

axiom .str.116 == $sub.ref(0, 45045);

const {:count 24} .str.117: ref;

axiom .str.117 == $sub.ref(0, 46093);

const {:count 25} .str.118: ref;

axiom .str.118 == $sub.ref(0, 47142);

const {:count 29} .str.119: ref;

axiom .str.119 == $sub.ref(0, 48195);

const {:count 18} .str.120: ref;

axiom .str.120 == $sub.ref(0, 49237);

const {:count 19} .str.121: ref;

axiom .str.121 == $sub.ref(0, 50280);

const {:count 31} .str.122: ref;

axiom .str.122 == $sub.ref(0, 51335);

const {:count 31} .str.123: ref;

axiom .str.123 == $sub.ref(0, 52390);

const {:count 13} .str.129: ref;

axiom .str.129 == $sub.ref(0, 53427);

const {:count 13} .str.130: ref;

axiom .str.130 == $sub.ref(0, 54464);

const {:count 9} .str.124: ref;

axiom .str.124 == $sub.ref(0, 55497);

const {:count 13} .str.125: ref;

axiom .str.125 == $sub.ref(0, 56534);

const {:count 13} .str.126: ref;

axiom .str.126 == $sub.ref(0, 57571);

const {:count 14} .str.127: ref;

axiom .str.127 == $sub.ref(0, 58609);

const {:count 32} .str.128: ref;

axiom .str.128 == $sub.ref(0, 59665);

const {:count 13} .str.131: ref;

axiom .str.131 == $sub.ref(0, 60702);

const jiffies: ref;

axiom jiffies == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32784));

const {:count 15} .str.47: ref;

axiom .str.47 == $sub.ref(0, 61741);

const {:count 19} .str.48: ref;

axiom .str.48 == $sub.ref(0, 62784);

const .str.24: ref;

axiom .str.24 == $sub.ref(0, 63809);

const {:count 18} .str.49: ref;

axiom .str.49 == $sub.ref(0, 64851);

const {:count 16} .str.50: ref;

axiom .str.50 == $sub.ref(0, 65891);

const {:count 18} .str.51: ref;

axiom .str.51 == $sub.ref(0, 66933);

const {:count 14} .str.16: ref;

axiom .str.16 == $sub.ref(0, 67971);

const {:count 36} .str.17: ref;

axiom .str.17 == $sub.ref(0, 69031);

const {:count 21} .str.1: ref;

axiom .str.1 == $sub.ref(0, 70076);

const {:count 11} .str.3: ref;

axiom .str.3 == $sub.ref(0, 71111);

const {:count 22} .str.4: ref;

axiom .str.4 == $sub.ref(0, 72157);

const {:count 19} .str.9: ref;

axiom .str.9 == $sub.ref(0, 73200);

const {:count 41} .str.10: ref;

axiom .str.10 == $sub.ref(0, 74265);

const {:count 12} .str.11: ref;

axiom .str.11 == $sub.ref(0, 75301);

const {:count 23} .str.12: ref;

axiom .str.12 == $sub.ref(0, 76348);

const {:count 17} .str.14: ref;

axiom .str.14 == $sub.ref(0, 77389);

const {:count 39} .str.15: ref;

axiom .str.15 == $sub.ref(0, 78452);

const {:count 35} .str.13: ref;

axiom .str.13 == $sub.ref(0, 79511);

const {:count 16} .str.5: ref;

axiom .str.5 == $sub.ref(0, 80551);

const {:count 28} .str.6: ref;

axiom .str.6 == $sub.ref(0, 81603);

const {:count 3} .str.7: ref;

axiom .str.7 == $sub.ref(0, 82630);

const {:count 4} .str.8: ref;

axiom .str.8 == $sub.ref(0, 83658);

const {:count 25} .str.89: ref;

axiom .str.89 == $sub.ref(0, 84707);

const {:count 24} .str.90: ref;

axiom .str.90 == $sub.ref(0, 85755);

const {:count 16} .str.91: ref;

axiom .str.91 == $sub.ref(0, 86795);

const {:count 23} .str.92: ref;

axiom .str.92 == $sub.ref(0, 87842);

const {:count 10} .str.93: ref;

axiom .str.93 == $sub.ref(0, 88876);

const {:count 4} .str.20: ref;

axiom .str.20 == $sub.ref(0, 89904);

const {:count 4} .str.97: ref;

axiom .str.97 == $sub.ref(0, 90932);

const {:count 2} .str.98: ref;

axiom .str.98 == $sub.ref(0, 91958);

const {:count 2} .str.99: ref;

axiom .str.99 == $sub.ref(0, 92984);

const {:count 2} .str.100: ref;

axiom .str.100 == $sub.ref(0, 94010);

const {:count 2} .str.28: ref;

axiom .str.28 == $sub.ref(0, 95036);

const {:count 7} .str.102: ref;

axiom .str.102 == $sub.ref(0, 96067);

const {:count 7} .str.103: ref;

axiom .str.103 == $sub.ref(0, 97098);

const {:count 7} .str.104: ref;

axiom .str.104 == $sub.ref(0, 98129);

const {:count 9} .str.105: ref;

axiom .str.105 == $sub.ref(0, 99162);

const {:count 8} .str.106: ref;

axiom .str.106 == $sub.ref(0, 100194);

const {:count 5} .str.107: ref;

axiom .str.107 == $sub.ref(0, 101223);

const {:count 4} .str.108: ref;

axiom .str.108 == $sub.ref(0, 102251);

const {:count 5} .str.109: ref;

axiom .str.109 == $sub.ref(0, 103280);

const {:count 4} .str.110: ref;

axiom .str.110 == $sub.ref(0, 104308);

const {:count 5} .str.111: ref;

axiom .str.111 == $sub.ref(0, 105337);

const {:count 9} .str.112: ref;

axiom .str.112 == $sub.ref(0, 106370);

const {:count 53} .str.101: ref;

axiom .str.101 == $sub.ref(0, 107447);

const {:count 21} .str.94: ref;

axiom .str.94 == $sub.ref(0, 108492);

const {:count 41} .str.95: ref;

axiom .str.95 == $sub.ref(0, 109557);

const {:count 20} .str.96: ref;

axiom .str.96 == $sub.ref(0, 110601);

const {:count 10} .str.46: ref;

axiom .str.46 == $sub.ref(0, 111635);

const {:count 26} .str.45: ref;

axiom .str.45 == $sub.ref(0, 112685);

const {:count 16} .str.42: ref;

axiom .str.42 == $sub.ref(0, 113725);

const {:count 22} .str.43: ref;

axiom .str.43 == $sub.ref(0, 114771);

const {:count 32} .str.44: ref;

axiom .str.44 == $sub.ref(0, 115827);

const {:count 12} .str.87: ref;

axiom .str.87 == $sub.ref(0, 116863);

const {:count 31} .str.88: ref;

axiom .str.88 == $sub.ref(0, 117918);

const {:count 11} .str.85: ref;

axiom .str.85 == $sub.ref(0, 118953);

const {:count 25} .str.86: ref;

axiom .str.86 == $sub.ref(0, 120002);

const {:count 8} .str.82: ref;

axiom .str.82 == $sub.ref(0, 121034);

const {:count 31} .str.83: ref;

axiom .str.83 == $sub.ref(0, 122089);

const {:count 23} .str.84: ref;

axiom .str.84 == $sub.ref(0, 123136);

const {:count 20} .str.81: ref;

axiom .str.81 == $sub.ref(0, 124180);

const {:count 13} .str.58: ref;

axiom .str.58 == $sub.ref(0, 125217);

const {:count 13} .str.59: ref;

axiom .str.59 == $sub.ref(0, 126254);

const {:count 21} .str.80: ref;

axiom .str.80 == $sub.ref(0, 127299);

const {:count 19} .str.74: ref;

axiom .str.74 == $sub.ref(0, 128342);

const {:count 9} .str.75: ref;

axiom .str.75 == $sub.ref(0, 129375);

const {:count 7} .str.33: ref;

axiom .str.33 == $sub.ref(0, 130406);

const {:count 10} .str.34: ref;

axiom .str.34 == $sub.ref(0, 131440);

const {:count 6} .str.66: ref;

axiom .str.66 == $sub.ref(0, 132470);

const {:count 6} .str.67: ref;

axiom .str.67 == $sub.ref(0, 133500);

const {:count 5} .str.68: ref;

axiom .str.68 == $sub.ref(0, 134529);

const {:count 7} .str.69: ref;

axiom .str.69 == $sub.ref(0, 135560);

const {:count 5} .str.70: ref;

axiom .str.70 == $sub.ref(0, 136589);

const {:count 5} .str.71: ref;

axiom .str.71 == $sub.ref(0, 137618);

const {:count 5} .str.72: ref;

axiom .str.72 == $sub.ref(0, 138647);

const {:count 5} .str.73: ref;

axiom .str.73 == $sub.ref(0, 139676);

const {:count 36} .str.65: ref;

axiom .str.65 == $sub.ref(0, 140736);

const {:count 6} .str.25: ref;

axiom .str.25 == $sub.ref(0, 141766);

const {:count 11} .str.26: ref;

axiom .str.26 == $sub.ref(0, 142801);

const {:count 5} .str.29: ref;

axiom .str.29 == $sub.ref(0, 143830);

const {:count 7} .str.30: ref;

axiom .str.30 == $sub.ref(0, 144861);

const {:count 8} .str.31: ref;

axiom .str.31 == $sub.ref(0, 145893);

const {:count 6} .str.32: ref;

axiom .str.32 == $sub.ref(0, 146923);

const {:count 7} .str.35: ref;

axiom .str.35 == $sub.ref(0, 147954);

const {:count 4} .str.36: ref;

axiom .str.36 == $sub.ref(0, 148982);

const {:count 5} .str.37: ref;

axiom .str.37 == $sub.ref(0, 150011);

const {:count 57} .str.27: ref;

axiom .str.27 == $sub.ref(0, 151092);

const {:count 16} .str.76: ref;

axiom .str.76 == $sub.ref(0, 152132);

const {:count 21} .str.77: ref;

axiom .str.77 == $sub.ref(0, 153177);

const {:count 3} .str.78: ref;

axiom .str.78 == $sub.ref(0, 154204);

const {:count 5} .str.79: ref;

axiom .str.79 == $sub.ref(0, 155233);

const {:count 5} .str.18: ref;

axiom .str.18 == $sub.ref(0, 156262);

const {:count 8} .str.19: ref;

axiom .str.19 == $sub.ref(0, 157294);

const {:count 22} .str.23: ref;

axiom .str.23 == $sub.ref(0, 158340);

const {:count 52} .str.21: ref;

axiom .str.21 == $sub.ref(0, 159416);

const {:count 7} .str.22: ref;

axiom .str.22 == $sub.ref(0, 160447);

const {:count 25} .str.52: ref;

axiom .str.52 == $sub.ref(0, 161496);

const {:count 21} .str.53: ref;

axiom .str.53 == $sub.ref(0, 162541);

const {:count 13} .str.54: ref;

axiom .str.54 == $sub.ref(0, 163578);

const {:count 9} .str.55: ref;

axiom .str.55 == $sub.ref(0, 164611);

const {:count 14} .str.56: ref;

axiom .str.56 == $sub.ref(0, 165649);

const {:count 22} .str.57: ref;

axiom .str.57 == $sub.ref(0, 166695);

const {:count 15} .str.60: ref;

axiom .str.60 == $sub.ref(0, 167734);

const {:count 16} .str.61: ref;

axiom .str.61 == $sub.ref(0, 168774);

const {:count 23} .str.62: ref;

axiom .str.62 == $sub.ref(0, 169821);

const {:count 6} .str.63: ref;

axiom .str.63 == $sub.ref(0, 170851);

const {:count 13} .str.64: ref;

axiom .str.64 == $sub.ref(0, 171888);

const __this_module: ref;

axiom __this_module == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32792));

const env_value_str: ref;

axiom env_value_str == $sub.ref(0, 172920);

const {:count 3} .str.1.274: ref;

axiom .str.1.274 == $sub.ref(0, 173947);

const {:count 14} .str.388: ref;

axiom .str.388 == $sub.ref(0, 174985);

const errno_global: ref;

axiom errno_global == $sub.ref(0, 176013);

const llvm.dbg.declare: ref;

axiom llvm.dbg.declare == $sub.ref(0, 177045);

procedure llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);



const malloc: ref;

axiom malloc == $sub.ref(0, 178077);

procedure malloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation malloc($i0: i64) returns ($r: ref)
{

  anon0:
    call {:si_unique_call 0} $r := $malloc($i0);
    return;
}



const oxu_drv_probe: ref;

axiom oxu_drv_probe == $sub.ref(0, 179109);

procedure oxu_drv_probe($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $CurrAddr, $M.8, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_drv_probe($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i32;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i1;
  var $i36: i8;
  var $i37: i1;
  var $i38: i64;
  var $i39: i32;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i24;
  var $i62: i24;
  var $i63: i24;
  var $p64: ref;
  var $p65: ref;
  var $i66: i8;
  var $i67: i64;
  var $i68: i64;
  var $i69: i64;
  var $i70: i1;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $i40: i32;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 2} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1;

  corral_source_split_1:
    assume {:verifier.code 0} true;
    call {:si_unique_call 3} $i3 := usb_disabled();
    call {:si_unique_call 4} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_2;

  corral_source_split_2:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3;

  corral_source_split_3:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 5} $p6 := platform_get_resource($p0, 1024, 0);
    goto corral_source_split_9;

  corral_source_split_9:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_10;

  corral_source_split_10:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_11;

  corral_source_split_11:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p6, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_19;

  corral_source_split_19:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_20;

  corral_source_split_20:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 8} {:cexpr "irq"} boogie_si_record_i32($i14);
    goto corral_source_split_21;

  corral_source_split_21:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_22;

  corral_source_split_22:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p15, .str.2);
    goto corral_source_split_23;

  corral_source_split_23:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_24;

  corral_source_split_24:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p16, .str.115);
    goto corral_source_split_25;

  corral_source_split_25:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_26;

  corral_source_split_26:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, .str);
    goto corral_source_split_27;

  corral_source_split_27:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_28;

  corral_source_split_28:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p18, .str.116);
    goto corral_source_split_29;

  corral_source_split_29:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_30;

  corral_source_split_30:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_31;

  corral_source_split_31:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.6, $p20);
    goto corral_source_split_32;

  corral_source_split_32:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_33;

  corral_source_split_33:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 3825);
    goto corral_source_split_34;

  corral_source_split_34:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p20, $i23);
    goto corral_source_split_35;

  corral_source_split_35:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_36;

  corral_source_split_36:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p24, 0);
    goto corral_source_split_37;

  corral_source_split_37:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_38;

  corral_source_split_38:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.7, $p25);
    goto corral_source_split_39;

  corral_source_split_39:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_40;

  corral_source_split_40:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_41;

  corral_source_split_41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 9} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 10} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_42;

  corral_source_split_42:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_43;

  corral_source_split_43:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 12} $p32 := platform_get_resource($p0, 512, 0);
    goto corral_source_split_49;

  corral_source_split_49:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_50;

  corral_source_split_50:
    assume {:verifier.code 0} true;
    call {:si_unique_call 13} $p34 := devm_ioremap_resource($p33, $p32);
    goto corral_source_split_51;

  corral_source_split_51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 14} $i35 := IS_ERR($p34);
    goto corral_source_split_52;

  corral_source_split_52:
    assume {:verifier.code 0} true;
    $i36 := $zext.i1.i8($i35);
    call {:si_unique_call 15} {:cexpr "tmp___3"} boogie_si_record_i8($i36);
    goto corral_source_split_53;

  corral_source_split_53:
    assume {:verifier.code 0} true;
    $i37 := $trunc.i8.i1($i36);
    goto corral_source_split_54;

  corral_source_split_54:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p32, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_66;

  corral_source_split_66:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    call {:si_unique_call 21} {:cexpr "memstart"} boogie_si_record_i64($i42);
    goto corral_source_split_67;

  corral_source_split_67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 22} $i43 := resource_size($p32);
    call {:si_unique_call 23} {:cexpr "tmp___4"} boogie_si_record_i64($i43);
    goto corral_source_split_68;

  corral_source_split_68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 24} $i44 := irq_set_irq_type($i14, 2);
    call {:si_unique_call 25} {:cexpr "ret"} boogie_si_record_i32($i44);
    goto corral_source_split_69;

  corral_source_split_69:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_70;

  corral_source_split_70:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_76;

  corral_source_split_76:
    assume {:verifier.code 0} true;
    call {:si_unique_call 27} $p48 := devm_kzalloc($p47, 16, 208);
    goto corral_source_split_77;

  corral_source_split_77:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p48);
    goto corral_source_split_78;

  corral_source_split_78:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_79;

  corral_source_split_79:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_80;

  corral_source_split_80:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p49);
    goto corral_source_split_84;

  corral_source_split_84:
    assume {:verifier.code 0} true;
    call {:si_unique_call 28} platform_set_drvdata($p0, $p52);
    goto corral_source_split_85;

  corral_source_split_85:
    assume {:verifier.code 0} true;
    call {:si_unique_call 29} $i53 := oxu_init($p0, $i42, $i43, $p34, $i14);
    goto SeqInstr_1, SeqInstr_2;

  SeqInstr_2:
    assume assertsPassed;
    goto SeqInstr_3;

  SeqInstr_3:
    call {:si_unique_call 30} {:cexpr "ret"} boogie_si_record_i32($i53);
    goto corral_source_split_86;

  corral_source_split_86:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 0);
    goto corral_source_split_87;

  corral_source_split_87:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_117;

  corral_source_split_117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 34} _dev_info.ref.ref($p72, .str.119);
    goto corral_source_split_118;

  corral_source_split_118:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p49);
    goto corral_source_split_119;

  corral_source_split_119:
    assume {:verifier.code 0} true;
    call {:si_unique_call 35} platform_set_drvdata($p0, $p73);
    goto corral_source_split_120;

  corral_source_split_120:
    assume {:verifier.code 0} true;
    $i5 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7;

  corral_source_split_7:
    assume {:verifier.code 0} true;
    $r := $i5;
    return;

  $bb21:
    assume $i54 == 1;
    goto corral_source_split_89;

  corral_source_split_89:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_90;

  corral_source_split_90:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p55, .str.2);
    goto corral_source_split_91;

  corral_source_split_91:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_92;

  corral_source_split_92:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p56, .str.115);
    goto corral_source_split_93;

  corral_source_split_93:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_94;

  corral_source_split_94:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p57, .str);
    goto corral_source_split_95;

  corral_source_split_95:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_96;

  corral_source_split_96:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p58, .str.118);
    goto corral_source_split_97;

  corral_source_split_97:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_98;

  corral_source_split_98:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p59);
    goto corral_source_split_99;

  corral_source_split_99:
    assume {:verifier.code 0} true;
    $i61 := $load.i24($M.6, $p60);
    goto corral_source_split_100;

  corral_source_split_100:
    assume {:verifier.code 0} true;
    $i62 := $and.i24($i61, $sub.i24(0, 262144));
    goto corral_source_split_101;

  corral_source_split_101:
    assume {:verifier.code 0} true;
    $i63 := $or.i24($i62, 3855);
    goto corral_source_split_102;

  corral_source_split_102:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p60, $i63);
    goto corral_source_split_103;

  corral_source_split_103:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_104;

  corral_source_split_104:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p64, 0);
    goto corral_source_split_105;

  corral_source_split_105:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_106;

  corral_source_split_106:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.7, $p65);
    goto corral_source_split_107;

  corral_source_split_107:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i64($i66);
    goto corral_source_split_108;

  corral_source_split_108:
    assume {:verifier.code 0} true;
    $i68 := $and.i64($i67, 1);
    goto corral_source_split_109;

  corral_source_split_109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 31} $i69 := ldv__builtin_expect($i68, 0);
    call {:si_unique_call 32} {:cexpr "tmp___6"} boogie_si_record_i64($i69);
    goto corral_source_split_110;

  corral_source_split_110:
    assume {:verifier.code 0} true;
    $i70 := $ne.i64($i69, 0);
    goto corral_source_split_111;

  corral_source_split_111:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i40 := $i53;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_60;

  corral_source_split_60:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_61;

  corral_source_split_61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 19} $p75 := dev_name($p74);
    goto corral_source_split_62;

  corral_source_split_62:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_63;

  corral_source_split_63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 20} dev_err.ref.ref.ref.i32($p76, .str.120, $p75, $i40);
    goto corral_source_split_64;

  corral_source_split_64:
    assume {:verifier.code 0} true;
    $i5 := $i40;
    goto $bb3;

  $bb23:
    assume $i70 == 1;
    goto corral_source_split_113;

  corral_source_split_113:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_114;

  corral_source_split_114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 33} __dynamic_dev_dbg.ref.ref.ref($p2, $p71, .str.118);
    goto corral_source_split_115;

  corral_source_split_115:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_1:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i51 == 1;
    goto corral_source_split_82;

  corral_source_split_82:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 14);
    goto $bb13;

  $bb15:
    assume $i45 == 1;
    goto corral_source_split_72;

  corral_source_split_72:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_73;

  corral_source_split_73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 26} dev_err.ref.ref($p46, .str.117);
    goto corral_source_split_74;

  corral_source_split_74:
    assume {:verifier.code 0} true;
    $i40 := $sub.i32(0, 14);
    goto $bb13;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_56;

  corral_source_split_56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 16} $i38 := PTR_ERR($p34);
    call {:si_unique_call 17} {:cexpr "tmp___2"} boogie_si_record_i64($i38);
    goto corral_source_split_57;

  corral_source_split_57:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i64.i32($i38);
    call {:si_unique_call 18} {:cexpr "ret"} boogie_si_record_i32($i39);
    goto corral_source_split_58;

  corral_source_split_58:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb13;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_45;

  corral_source_split_45:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_46;

  corral_source_split_46:
    assume {:verifier.code 0} true;
    call {:si_unique_call 11} __dynamic_dev_dbg.ref.ref.ref.i32($p1, $p31, .str.116, $i14);
    goto corral_source_split_47;

  corral_source_split_47:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i8 == 1;
    goto corral_source_split_13;

  corral_source_split_13:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_14;

  corral_source_split_14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 6} $p10 := dev_name($p9);
    goto corral_source_split_15;

  corral_source_split_15:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_16;

  corral_source_split_16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 7} dev_err.ref.ref.ref($p11, .str.114, $p10);
    goto corral_source_split_17;

  corral_source_split_17:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_5;

  corral_source_split_5:
    assume {:verifier.code 0} true;
    $i5 := $sub.i32(0, 19);
    goto $bb3;
}



const oxu_drv_remove: ref;

axiom oxu_drv_remove == $sub.ref(0, 180141);

procedure oxu_drv_remove($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation oxu_drv_remove($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_122;

  corral_source_split_122:
    assume {:verifier.code 0} true;
    call {:si_unique_call 36} $p1 := platform_get_drvdata($p0);
    goto corral_source_split_123;

  corral_source_split_123:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_124;

  corral_source_split_124:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_125;

  corral_source_split_125:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_126;

  corral_source_split_126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 37} oxu_remove($p0, $p5);
    goto corral_source_split_127;

  corral_source_split_127:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_128;

  corral_source_split_128:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_129;

  corral_source_split_129:
    assume {:verifier.code 0} true;
    call {:si_unique_call 38} oxu_remove($p0, $p8);
    goto corral_source_split_130;

  corral_source_split_130:
    assume {:verifier.code 0} true;
    $r := 0;
    return;
}



const oxu_drv_shutdown: ref;

axiom oxu_drv_shutdown == $sub.ref(0, 181173);

procedure oxu_drv_shutdown($p0: ref);
  free requires assertsPassed;



implementation oxu_drv_shutdown($p0: ref)
{
  var vslice_dummy_var_64: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_132;

  corral_source_split_132:
    assume {:verifier.code 0} true;
    call {:si_unique_call 39} vslice_dummy_var_64 := oxu_drv_remove($p0);
    goto corral_source_split_133;

  corral_source_split_133:
    assume {:verifier.code 0} true;
    return;
}



const platform_get_drvdata: ref;

axiom platform_get_drvdata == $sub.ref(0, 182205);

procedure platform_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_135;

  corral_source_split_135:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_136;

  corral_source_split_136:
    assume {:verifier.code 0} true;
    call {:si_unique_call 40} $p2 := dev_get_drvdata($p1);
    goto corral_source_split_137;

  corral_source_split_137:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const oxu_remove: ref;

axiom oxu_remove == $sub.ref(0, 183237);

procedure oxu_remove($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation oxu_remove($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_139;

  corral_source_split_139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 41} usb_remove_hcd($p1);
    goto corral_source_split_140;

  corral_source_split_140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 42} usb_put_hcd($p1);
    goto corral_source_split_141;

  corral_source_split_141:
    assume {:verifier.code 0} true;
    return;
}



const usb_remove_hcd: ref;

axiom usb_remove_hcd == $sub.ref(0, 184269);

procedure usb_remove_hcd($p0: ref);
  free requires assertsPassed;



implementation usb_remove_hcd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_143;

  corral_source_split_143:
    assume {:verifier.code 0} true;
    return;
}



const usb_put_hcd: ref;

axiom usb_put_hcd == $sub.ref(0, 185301);

procedure usb_put_hcd($p0: ref);
  free requires assertsPassed;



implementation usb_put_hcd($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_145;

  corral_source_split_145:
    assume {:verifier.code 0} true;
    return;
}



const dev_get_drvdata: ref;

axiom dev_get_drvdata == $sub.ref(0, 186333);

procedure dev_get_drvdata($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_get_drvdata($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_147;

  corral_source_split_147:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_148;

  corral_source_split_148:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_149;

  corral_source_split_149:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_disabled: ref;

axiom usb_disabled == $sub.ref(0, 187365);

procedure usb_disabled() returns ($r: i32);
  free requires assertsPassed;



implementation usb_disabled() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_151;

  corral_source_split_151:
    assume {:verifier.code 1} true;
    call {:si_unique_call 43} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 44} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_152;

  corral_source_split_152:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const platform_get_resource: ref;

axiom platform_get_resource == $sub.ref(0, 188397);

procedure platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation platform_get_resource($p0: ref, $i1: i32, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 45} {:cexpr "platform_get_resource:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 46} {:cexpr "platform_get_resource:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_154;

  corral_source_split_154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 47} $p3 := external_alloc();
    goto corral_source_split_155;

  corral_source_split_155:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_156;

  corral_source_split_156:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const dev_name: ref;

axiom dev_name == $sub.ref(0, 189429);

procedure dev_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation dev_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $p9: ref;
  var $p7: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_158;

  corral_source_split_158:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_159;

  corral_source_split_159:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_160;

  corral_source_split_160:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_161;

  corral_source_split_161:
    assume {:verifier.code 0} true;
    $i4 := $ne.i64($i3, 0);
    goto corral_source_split_162;

  corral_source_split_162:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(16, 1));
    goto corral_source_split_170;

  corral_source_split_170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 48} $p9 := kobject_name($p8);
    goto corral_source_split_171;

  corral_source_split_171:
    assume {:verifier.code 0} true;
    $p7 := $p9;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_168;

  corral_source_split_168:
    assume {:verifier.code 0} true;
    $r := $p7;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_164;

  corral_source_split_164:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(312, 1));
    goto corral_source_split_165;

  corral_source_split_165:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_166;

  corral_source_split_166:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const dev_err: ref;

axiom dev_err == $sub.ref(0, 190461);

procedure dev_err.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref($p0: ref, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_173;

  corral_source_split_173:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_175;

  corral_source_split_175:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32($p0: ref, $p1: ref, p.2: ref, p.3: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_177;

  corral_source_split_177:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, p.2: ref, p.3: i32, p.4: i32, p.5: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_179;

  corral_source_split_179:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32);
  free requires assertsPassed;



implementation dev_err.ref.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: i32)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_181;

  corral_source_split_181:
    assume {:verifier.code 0} true;
    return;
}



procedure dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref);
  free requires assertsPassed;



implementation dev_err.ref.ref.ref($p0: ref, $p1: ref, p.2: ref)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_183;

  corral_source_split_183:
    assume {:verifier.code 0} true;
    return;
}



const ldv__builtin_expect: ref;

axiom ldv__builtin_expect == $sub.ref(0, 191493);

procedure ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64);
  free requires assertsPassed;



implementation ldv__builtin_expect($i0: i64, $i1: i64) returns ($r: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 49} {:cexpr "ldv__builtin_expect:arg:exp"} boogie_si_record_i64($i0);
    call {:si_unique_call 50} {:cexpr "ldv__builtin_expect:arg:c"} boogie_si_record_i64($i1);
    goto corral_source_split_185;

  corral_source_split_185:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __dynamic_dev_dbg: ref;

axiom __dynamic_dev_dbg == $sub.ref(0, 192525);

procedure __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_187;

  corral_source_split_187:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_189;

  corral_source_split_189:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref($p0: ref, $p1: ref, $p2: ref)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_191;

  corral_source_split_191:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_193;

  corral_source_split_193:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: ref, p.4: i32, p.5: ref)
{

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_195;

  corral_source_split_195:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i32);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref.i32.i32.i32($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: ref, p.6: i32, p.7: i32, p.8: i32)
{

  $bb5:
    assume {:verifier.code 0} true;
    goto corral_source_split_197;

  corral_source_split_197:
    assume {:verifier.code 0} true;
    return;
}



procedure __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: ref);
  free requires assertsPassed;



implementation __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref($p0: ref, $p1: ref, $p2: ref, p.3: i32, p.4: i32, p.5: ref)
{

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_199;

  corral_source_split_199:
    assume {:verifier.code 0} true;
    return;
}



const devm_ioremap_resource: ref;

axiom devm_ioremap_resource == $sub.ref(0, 193557);

procedure devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref);
  free requires assertsPassed;



implementation devm_ioremap_resource($p0: ref, $p1: ref) returns ($r: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_201;

  corral_source_split_201:
    assume {:verifier.code 0} true;
    call {:si_unique_call 51} $p2 := external_alloc();
    goto corral_source_split_202;

  corral_source_split_202:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const IS_ERR: ref;

axiom IS_ERR == $sub.ref(0, 194589);

procedure IS_ERR($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation IS_ERR($p0: ref) returns ($r: i1)
{
  var $i1: i1;
  var $i2: i8;
  var $i3: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_204;

  corral_source_split_204:
    assume {:verifier.code 0} true;
    call {:si_unique_call 52} $i1 := ldv_is_err($p0);
    goto corral_source_split_205;

  corral_source_split_205:
    assume {:verifier.code 0} true;
    $i2 := $zext.i1.i8($i1);
    call {:si_unique_call 53} {:cexpr "tmp"} boogie_si_record_i8($i2);
    goto corral_source_split_206;

  corral_source_split_206:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i8.i1($i2);
    goto corral_source_split_207;

  corral_source_split_207:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const PTR_ERR: ref;

axiom PTR_ERR == $sub.ref(0, 195621);

procedure PTR_ERR($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation PTR_ERR($p0: ref) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_209;

  corral_source_split_209:
    assume {:verifier.code 0} true;
    call {:si_unique_call 54} $i1 := ldv_ptr_err($p0);
    call {:si_unique_call 55} {:cexpr "tmp"} boogie_si_record_i64($i1);
    goto corral_source_split_210;

  corral_source_split_210:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const resource_size: ref;

axiom resource_size == $sub.ref(0, 196653);

procedure resource_size($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation resource_size($p0: ref) returns ($r: i64)
{
  var $p1: ref;
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_212;

  corral_source_split_212:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(8, 1));
    goto corral_source_split_213;

  corral_source_split_213:
    assume {:verifier.code 0} true;
    $i2 := $load.i64($M.0, $p1);
    goto corral_source_split_214;

  corral_source_split_214:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 56)), $mul.ref(0, 1));
    goto corral_source_split_215;

  corral_source_split_215:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_216;

  corral_source_split_216:
    assume {:verifier.code 0} true;
    $i5 := $sub.i64($i2, $i4);
    goto corral_source_split_217;

  corral_source_split_217:
    assume {:verifier.code 0} true;
    $i6 := $add.i64($i5, 1);
    goto corral_source_split_218;

  corral_source_split_218:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const irq_set_irq_type: ref;

axiom irq_set_irq_type == $sub.ref(0, 197685);

procedure irq_set_irq_type($i0: i32, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation irq_set_irq_type($i0: i32, $i1: i32) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 56} {:cexpr "irq_set_irq_type:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 57} {:cexpr "irq_set_irq_type:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_220;

  corral_source_split_220:
    assume {:verifier.code 1} true;
    call {:si_unique_call 58} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 59} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_221;

  corral_source_split_221:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const devm_kzalloc: ref;

axiom devm_kzalloc == $sub.ref(0, 198717);

procedure devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kzalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $i3: i32;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 60} {:cexpr "devm_kzalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 61} {:cexpr "devm_kzalloc:arg:gfp"} boogie_si_record_i32($i2);
    goto corral_source_split_223;

  corral_source_split_223:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 32768);
    goto corral_source_split_224;

  corral_source_split_224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 62} $p4 := devm_kmalloc($p0, $i1, $i3);
    goto corral_source_split_225;

  corral_source_split_225:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const platform_set_drvdata: ref;

axiom platform_set_drvdata == $sub.ref(0, 199749);

procedure platform_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation platform_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_227;

  corral_source_split_227:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_228;

  corral_source_split_228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 63} dev_set_drvdata($p2, $p1);
    goto corral_source_split_229;

  corral_source_split_229:
    assume {:verifier.code 0} true;
    return;
}



const oxu_init: ref;

axiom oxu_init == $sub.ref(0, 200781);

procedure oxu_init($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.8, $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_init($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32) returns ($r: i32)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i1;
  var $i14: i8;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $i19: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i1;
  var $i26: i8;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $i31: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $p37: ref;
  var $p38: ref;
  var $p40: ref;
  var $p41: ref;
  var $i20: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 64} {:cexpr "oxu_init:arg:memstart"} boogie_si_record_i64($i1);
    call {:si_unique_call 65} {:cexpr "oxu_init:arg:memlen"} boogie_si_record_i64($i2);
    call {:si_unique_call 66} {:cexpr "oxu_init:arg:irq"} boogie_si_record_i32($i4);
    goto corral_source_split_231;

  corral_source_split_231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 67} $p5 := platform_get_drvdata($p0);
    goto corral_source_split_232;

  corral_source_split_232:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_233;

  corral_source_split_233:
    assume {:verifier.code 0} true;
    call {:si_unique_call 68} oxu_configuration($p0, $p3);
    goto SeqInstr_4, SeqInstr_5;

  SeqInstr_5:
    assume assertsPassed;
    goto SeqInstr_6;

  SeqInstr_6:
    goto corral_source_split_234;

  corral_source_split_234:
    assume {:verifier.code 0} true;
    call {:si_unique_call 69} $i7 := oxu_verify_id($p0, $p3);
    goto SeqInstr_7, SeqInstr_8;

  SeqInstr_8:
    assume assertsPassed;
    goto SeqInstr_9;

  SeqInstr_9:
    call {:si_unique_call 70} {:cexpr "ret"} boogie_si_record_i32($i7);
    goto corral_source_split_235;

  corral_source_split_235:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_236;

  corral_source_split_236:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 72} $p11 := oxu_create($p0, $i1, $i2, $p3, $i4, 1);
    goto corral_source_split_244;

  corral_source_split_244:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_245;

  corral_source_split_245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 73} $i13 := IS_ERR($p12);
    goto corral_source_split_246;

  corral_source_split_246:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i8($i13);
    call {:si_unique_call 74} {:cexpr "tmp___1"} boogie_si_record_i8($i14);
    goto corral_source_split_247;

  corral_source_split_247:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i8.i1($i14);
    goto corral_source_split_248;

  corral_source_split_248:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_259;

  corral_source_split_259:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p22, $p11);
    goto corral_source_split_260;

  corral_source_split_260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 79} $p23 := oxu_create($p0, $i1, $i2, $p3, $i4, 0);
    goto corral_source_split_261;

  corral_source_split_261:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_262;

  corral_source_split_262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 80} $i25 := IS_ERR($p24);
    goto corral_source_split_263;

  corral_source_split_263:
    assume {:verifier.code 0} true;
    $i26 := $zext.i1.i8($i25);
    call {:si_unique_call 81} {:cexpr "tmp___3"} boogie_si_record_i8($i26);
    goto corral_source_split_264;

  corral_source_split_264:
    assume {:verifier.code 0} true;
    $i27 := $trunc.i8.i1($i26);
    goto corral_source_split_265;

  corral_source_split_265:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(1, 8));
    goto corral_source_split_281;

  corral_source_split_281:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p33, $p23);
    goto corral_source_split_282;

  corral_source_split_282:
    assume {:verifier.code 0} true;
    call {:si_unique_call 88} $i34 := oxu_readl($p3, 20);
    goto SeqInstr_10, SeqInstr_11;

  SeqInstr_11:
    assume assertsPassed;
    goto SeqInstr_12;

  SeqInstr_12:
    call {:si_unique_call 89} {:cexpr "tmp___4"} boogie_si_record_i32($i34);
    goto corral_source_split_283;

  corral_source_split_283:
    assume {:verifier.code 0} true;
    $i35 := $or.i32($i34, 3);
    goto corral_source_split_284;

  corral_source_split_284:
    assume {:verifier.code 0} true;
    call {:si_unique_call 90} oxu_writel($p3, 20, $i35);
    goto corral_source_split_285;

  corral_source_split_285:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_242;

  corral_source_split_242:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_10:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i27 == 1;
    goto corral_source_split_267;

  corral_source_split_267:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_268;

  corral_source_split_268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 82} dev_err.ref.ref($p28, .str.123);
    goto corral_source_split_269;

  corral_source_split_269:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p23);
    goto corral_source_split_270;

  corral_source_split_270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 83} $i30 := PTR_ERR($p29);
    call {:si_unique_call 84} {:cexpr "tmp___2"} boogie_si_record_i64($i30);
    goto corral_source_split_271;

  corral_source_split_271:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i30);
    call {:si_unique_call 85} {:cexpr "ret"} boogie_si_record_i32($i31);
    goto corral_source_split_272;

  corral_source_split_272:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_274;

  corral_source_split_274:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_275;

  corral_source_split_275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 86} usb_remove_hcd($p38);
    goto corral_source_split_276;

  corral_source_split_276:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1)), $mul.ref(0, 8));
    goto corral_source_split_277;

  corral_source_split_277:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_278;

  corral_source_split_278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 87} usb_put_hcd($p41);
    goto corral_source_split_279;

  corral_source_split_279:
    assume {:verifier.code 0} true;
    $i20 := $i31;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_257;

  corral_source_split_257:
    assume {:verifier.code 0} true;
    $i10 := $i20;
    goto $bb3;

  $bb5:
    assume $i15 == 1;
    goto corral_source_split_250;

  corral_source_split_250:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_251;

  corral_source_split_251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 75} dev_err.ref.ref($p16, .str.122);
    goto corral_source_split_252;

  corral_source_split_252:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p11);
    goto corral_source_split_253;

  corral_source_split_253:
    assume {:verifier.code 0} true;
    call {:si_unique_call 76} $i18 := PTR_ERR($p17);
    call {:si_unique_call 77} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_254;

  corral_source_split_254:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i64.i32($i18);
    call {:si_unique_call 78} {:cexpr "ret"} boogie_si_record_i32($i19);
    goto corral_source_split_255;

  corral_source_split_255:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_238;

  corral_source_split_238:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_239;

  corral_source_split_239:
    assume {:verifier.code 0} true;
    call {:si_unique_call 71} dev_err.ref.ref($p9, .str.121);
    goto corral_source_split_240;

  corral_source_split_240:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 19);
    goto $bb3;

  SeqInstr_7:
    assume !assertsPassed;
    return;

  SeqInstr_4:
    assume !assertsPassed;
    return;
}



const _dev_info: ref;

axiom _dev_info == $sub.ref(0, 201813);

procedure _dev_info.ref.ref.i32.i32.i32.i32.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: ref, p.7: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.i32.i32.i32.ref.ref($p0: ref, $p1: ref, p.2: i32, p.3: i32, p.4: i32, p.5: i32, p.6: ref, p.7: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_287;

  corral_source_split_287:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32.ref.i32.i32($p0: ref, $p1: ref, p.2: i32, p.3: ref, p.4: i32, p.5: i32)
{

  $bb1:
    assume {:verifier.code 0} true;
    goto corral_source_split_289;

  corral_source_split_289:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32);
  free requires assertsPassed;



implementation _dev_info.ref.ref.i32($p0: ref, $p1: ref, p.2: i32)
{

  $bb2:
    assume {:verifier.code 0} true;
    goto corral_source_split_291;

  corral_source_split_291:
    assume {:verifier.code 0} true;
    return;
}



procedure _dev_info.ref.ref($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation _dev_info.ref.ref($p0: ref, $p1: ref)
{

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_293;

  corral_source_split_293:
    assume {:verifier.code 0} true;
    return;
}



const oxu_configuration: ref;

axiom oxu_configuration == $sub.ref(0, 202845);

procedure oxu_configuration($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_configuration($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_295;

  corral_source_split_295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 91} oxu_writel($p1, 4, 893);
    goto corral_source_split_296;

  corral_source_split_296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 92} oxu_writel($p1, 8, 1);
    goto corral_source_split_297;

  corral_source_split_297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 93} oxu_writel($p1, 4, 893);
    goto corral_source_split_298;

  corral_source_split_298:
    assume {:verifier.code 0} true;
    call {:si_unique_call 94} $i2 := oxu_readl($p1, 12);
    goto SeqInstr_13, SeqInstr_14;

  SeqInstr_14:
    assume assertsPassed;
    goto SeqInstr_15;

  SeqInstr_15:
    call {:si_unique_call 95} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_299;

  corral_source_split_299:
    assume {:verifier.code 0} true;
    $i3 := $or.i32($i2, 64);
    goto corral_source_split_300;

  corral_source_split_300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 96} oxu_writel($p1, 12, $i3);
    goto corral_source_split_301;

  corral_source_split_301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 97} oxu_writel($p1, 104, 19712);
    goto corral_source_split_302;

  corral_source_split_302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 98} $i4 := oxu_readl($p1, 28);
    goto SeqInstr_16, SeqInstr_17;

  SeqInstr_17:
    assume assertsPassed;
    goto SeqInstr_18;

  SeqInstr_18:
    call {:si_unique_call 99} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_303;

  corral_source_split_303:
    assume {:verifier.code 0} true;
    $i5 := $or.i32($i4, 9);
    goto corral_source_split_304;

  corral_source_split_304:
    assume {:verifier.code 0} true;
    call {:si_unique_call 100} oxu_writel($p1, 28, $i5);
    goto corral_source_split_305;

  corral_source_split_305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 101} oxu_writel($p1, 24, 255);
    goto corral_source_split_306;

  corral_source_split_306:
    assume {:verifier.code 0} true;
    call {:si_unique_call 102} oxu_writel($p1, 16, 255);
    goto corral_source_split_307;

  corral_source_split_307:
    assume {:verifier.code 0} true;
    call {:si_unique_call 103} oxu_writel($p1, 20, 192);
    goto corral_source_split_308;

  corral_source_split_308:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_16:
    assume !assertsPassed;
    return;

  SeqInstr_13:
    assume !assertsPassed;
    return;
}



const oxu_verify_id: ref;

axiom oxu_verify_id == $sub.ref(0, 203877);

procedure oxu_verify_id($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.8, $CurrAddr, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_verify_id($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i64;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i32;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 104} $p2 := $alloc($mul.ref(32, $zext.i32.i64(1)));
    goto corral_source_split_310;

  corral_source_split_310:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(0, 8));
    goto corral_source_split_311;

  corral_source_split_311:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p3, .str.124);
    goto corral_source_split_312;

  corral_source_split_312:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(1, 8));
    goto corral_source_split_313;

  corral_source_split_313:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p4, .str.125);
    goto corral_source_split_314;

  corral_source_split_314:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(2, 8));
    goto corral_source_split_315;

  corral_source_split_315:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p5, .str.126);
    goto corral_source_split_316;

  corral_source_split_316:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref(3, 8));
    goto corral_source_split_317;

  corral_source_split_317:
    assume {:verifier.code 0} true;
    $M.8 := $store.ref($M.8, $p6, .str.124);
    goto corral_source_split_318;

  corral_source_split_318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 105} $i7 := oxu_readl($p1, 0);
    goto SeqInstr_19, SeqInstr_20;

  SeqInstr_20:
    assume assertsPassed;
    goto SeqInstr_21;

  SeqInstr_21:
    call {:si_unique_call 106} {:cexpr "id"} boogie_si_record_i32($i7);
    goto corral_source_split_319;

  corral_source_split_319:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_320;

  corral_source_split_320:
    assume {:verifier.code 0} true;
    call {:si_unique_call 107} _dev_info.ref.ref.i32($p8, .str.127, $i7);
    goto corral_source_split_321;

  corral_source_split_321:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i7, $sub.i32(0, 65536));
    goto corral_source_split_322;

  corral_source_split_322:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 553648128);
    goto corral_source_split_323;

  corral_source_split_323:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_329;

  corral_source_split_329:
    assume {:verifier.code 0} true;
    $i13 := $lshr.i32($i7, 16);
    goto corral_source_split_330;

  corral_source_split_330:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i7, 768);
    goto corral_source_split_331;

  corral_source_split_331:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i14, 8);
    goto corral_source_split_332;

  corral_source_split_332:
    assume {:verifier.code 0} true;
    $i16 := $zext.i32.i64($i15);
    goto corral_source_split_333;

  corral_source_split_333:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 32)), $mul.ref($i16, 8));
    goto corral_source_split_334;

  corral_source_split_334:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.8, $p17);
    goto corral_source_split_335;

  corral_source_split_335:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i7, 240);
    goto corral_source_split_336;

  corral_source_split_336:
    assume {:verifier.code 0} true;
    $i20 := $lshr.i32($i19, 4);
    goto corral_source_split_337;

  corral_source_split_337:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i7, 15);
    goto corral_source_split_338;

  corral_source_split_338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 108} _dev_info.ref.ref.i32.ref.i32.i32($p12, .str.128, $i13, $p18, $i20, $i21);
    goto corral_source_split_339;

  corral_source_split_339:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_327;

  corral_source_split_327:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_325;

  corral_source_split_325:
    assume {:verifier.code 0} true;
    $i11 := $sub.i32(0, 1);
    goto $bb3;

  SeqInstr_19:
    assume !assertsPassed;
    return;
}



const oxu_create: ref;

axiom oxu_create == $sub.ref(0, 204909);

procedure oxu_create($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation oxu_create($p0: ref, $i1: i64, $i2: i64, $p3: ref, $i4: i32, $i5: i32) returns ($r: ref)
{
  var $p6: ref;
  var $i7: i1;
  var $i8: i64;
  var $p9: ref;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $p15: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $p25: ref;
  var $i26: i8;
  var $i27: i8;
  var $i28: i8;
  var $i29: i8;
  var $i30: i32;
  var $i31: i1;
  var $i32: i64;
  var $p33: ref;
  var $p36: ref;
  var $p37: ref;
  var $p17: ref;
  var vslice_dummy_var_65: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 109} {:cexpr "oxu_create:arg:memstart"} boogie_si_record_i64($i1);
    call {:si_unique_call 110} {:cexpr "oxu_create:arg:memlen"} boogie_si_record_i64($i2);
    call {:si_unique_call 111} {:cexpr "oxu_create:arg:irq"} boogie_si_record_i32($i4);
    call {:si_unique_call 112} {:cexpr "oxu_create:arg:otg"} boogie_si_record_i32($i5);
    goto corral_source_split_341;

  corral_source_split_341:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 1480)), $mul.ref(16, 1));
    goto corral_source_split_342;

  corral_source_split_342:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i5, 0);
    goto corral_source_split_343;

  corral_source_split_343:
    assume {:verifier.code 0} true;
    $i8 := (if $i7 == 1 then 1024 else 2048);
    goto corral_source_split_344;

  corral_source_split_344:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($p3, $mul.ref($i8, 1));
    goto corral_source_split_345;

  corral_source_split_345:
    assume {:verifier.code 0} true;
    call {:si_unique_call 113} oxu_writel($p9, 424, 35);
    goto corral_source_split_346;

  corral_source_split_346:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i5, 0);
    goto corral_source_split_347;

  corral_source_split_347:
    assume {:verifier.code 0} true;
    $p11 := (if $i10 == 1 then .str.129 else .str.130);
    goto corral_source_split_348;

  corral_source_split_348:
    assume {:verifier.code 0} true;
    call {:si_unique_call 114} $p12 := usb_create_hcd(oxu_hc_driver, $p6, $p11);
    goto corral_source_split_349;

  corral_source_split_349:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_350;

  corral_source_split_350:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_351;

  corral_source_split_351:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p12, $mul.ref(0, 968)), $mul.ref(592, 1));
    goto corral_source_split_359;

  corral_source_split_359:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p18, $i1);
    goto corral_source_split_360;

  corral_source_split_360:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p12, $mul.ref(0, 968)), $mul.ref(600, 1));
    goto corral_source_split_361;

  corral_source_split_361:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i2);
    goto corral_source_split_362;

  corral_source_split_362:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p12, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_363;

  corral_source_split_363:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p20, $p3);
    goto corral_source_split_364;

  corral_source_split_364:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p12, $mul.ref(0, 968)), $mul.ref(580, 1));
    goto corral_source_split_365;

  corral_source_split_365:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $i4);
    goto corral_source_split_366;

  corral_source_split_366:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p12, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_367;

  corral_source_split_367:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p22, 0);
    goto corral_source_split_368;

  corral_source_split_368:
    assume {:verifier.code 0} true;
    call {:si_unique_call 116} $p23 := hcd_to_oxu($p12);
    goto corral_source_split_369;

  corral_source_split_369:
    assume {:verifier.code 0} true;
    $i24 := $trunc.i32.i8($i5);
    goto corral_source_split_370;

  corral_source_split_370:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p23);
    goto corral_source_split_371;

  corral_source_split_371:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_372;

  corral_source_split_372:
    assume {:verifier.code 0} true;
    $i27 := $and.i8($i24, 1);
    goto corral_source_split_373;

  corral_source_split_373:
    assume {:verifier.code 0} true;
    $i28 := $and.i8($i26, $sub.i8(0, 2));
    goto corral_source_split_374;

  corral_source_split_374:
    assume {:verifier.code 0} true;
    $i29 := $or.i8($i28, $i27);
    goto corral_source_split_375;

  corral_source_split_375:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p25, $i29);
    goto corral_source_split_376;

  corral_source_split_376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 117} $i30 := usb_add_hcd($p12, $i4, 128);
    call {:si_unique_call 118} {:cexpr "ret"} boogie_si_record_i32($i30);
    goto corral_source_split_377;

  corral_source_split_377:
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i30, 0);
    goto corral_source_split_378;

  corral_source_split_378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($add.ref($p12, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_385;

  corral_source_split_385:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_386;

  corral_source_split_386:
    assume {:verifier.code 0} true;
    call {:si_unique_call 120} vslice_dummy_var_65 := device_wakeup_enable($p37);
    goto corral_source_split_387;

  corral_source_split_387:
    assume {:verifier.code 0} true;
    $p17 := $p12;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_357;

  corral_source_split_357:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb5:
    assume $i31 == 1;
    goto corral_source_split_380;

  corral_source_split_380:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i30);
    goto corral_source_split_381;

  corral_source_split_381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 119} $p33 := ERR_PTR($i32);
    goto corral_source_split_382;

  corral_source_split_382:
    assume {:verifier.code 0} true;
    goto corral_source_split_383;

  corral_source_split_383:
    assume {:verifier.code 0} true;
    $p17 := $p33;
    goto $bb3;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_353;

  corral_source_split_353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 115} $p15 := ERR_PTR($sub.i64(0, 12));
    goto corral_source_split_354;

  corral_source_split_354:
    assume {:verifier.code 0} true;
    goto corral_source_split_355;

  corral_source_split_355:
    assume {:verifier.code 0} true;
    $p17 := $p15;
    goto $bb3;
}



const oxu_readl: ref;

axiom oxu_readl == $sub.ref(0, 205941);

procedure oxu_readl($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_readl($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 121} {:cexpr "oxu_readl:arg:reg"} boogie_si_record_i32($i1);
    goto corral_source_split_389;

  corral_source_split_389:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_390;

  corral_source_split_390:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p0, $mul.ref($i2, 1));
    goto corral_source_split_391;

  corral_source_split_391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 122} $i4 := readl($p3);
    goto SeqInstr_22, SeqInstr_23;

  SeqInstr_23:
    assume assertsPassed;
    goto SeqInstr_24;

  SeqInstr_24:
    call {:si_unique_call 123} {:cexpr "tmp"} boogie_si_record_i32($i4);
    goto corral_source_split_392;

  corral_source_split_392:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;

  SeqInstr_22:
    assume !assertsPassed;
    return;
}



const oxu_writel: ref;

axiom oxu_writel == $sub.ref(0, 206973);

procedure oxu_writel($p0: ref, $i1: i32, $i2: i32);
  free requires assertsPassed;



implementation oxu_writel($p0: ref, $i1: i32, $i2: i32)
{
  var $i3: i64;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 124} {:cexpr "oxu_writel:arg:reg"} boogie_si_record_i32($i1);
    call {:si_unique_call 125} {:cexpr "oxu_writel:arg:val"} boogie_si_record_i32($i2);
    goto corral_source_split_394;

  corral_source_split_394:
    assume {:verifier.code 0} true;
    $i3 := $zext.i32.i64($i1);
    goto corral_source_split_395;

  corral_source_split_395:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p0, $mul.ref($i3, 1));
    goto corral_source_split_396;

  corral_source_split_396:
    assume {:verifier.code 0} true;
    call {:si_unique_call 126} writel($i2, $p4);
    goto corral_source_split_397;

  corral_source_split_397:
    assume {:verifier.code 0} true;
    return;
}



const writel: ref;

axiom writel == $sub.ref(0, 208005);

procedure writel($i0: i32, $p1: ref);
  free requires assertsPassed;



implementation writel($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 127} {:cexpr "writel:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_399;

  corral_source_split_399:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    call {:si_unique_call 128} devirtbounce(0, $i0, $p2);
    goto corral_source_split_400;

  corral_source_split_400:
    assume {:verifier.code 0} true;
    return;
}



const readl: ref;

axiom readl == $sub.ref(0, 209037);

procedure readl($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation readl($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_402;

  corral_source_split_402:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    call {:si_unique_call 129} $i2 := devirtbounce.1(0, $p1);
    goto SeqInstr_25, SeqInstr_26;

  SeqInstr_26:
    assume assertsPassed;
    goto SeqInstr_27;

  SeqInstr_27:
    call {:si_unique_call 130} {:cexpr "ret"} boogie_si_record_i32($i2);
    goto corral_source_split_403;

  corral_source_split_403:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_25:
    assume !assertsPassed;
    return;
}



const usb_create_hcd: ref;

axiom usb_create_hcd == $sub.ref(0, 210069);

procedure usb_create_hcd($p0: ref, $p1: ref, $p2: ref) returns ($r: ref);
  free requires assertsPassed;



implementation usb_create_hcd($p0: ref, $p1: ref, $p2: ref) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_405;

  corral_source_split_405:
    assume {:verifier.code 0} true;
    call {:si_unique_call 131} $p3 := external_alloc();
    goto corral_source_split_406;

  corral_source_split_406:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_407;

  corral_source_split_407:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const ERR_PTR: ref;

axiom ERR_PTR == $sub.ref(0, 211101);

procedure ERR_PTR($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ERR_PTR($i0: i64) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 132} {:cexpr "ERR_PTR:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_409;

  corral_source_split_409:
    assume {:verifier.code 0} true;
    call {:si_unique_call 133} $p1 := ldv_err_ptr($i0);
    goto corral_source_split_410;

  corral_source_split_410:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const hcd_to_oxu: ref;

axiom hcd_to_oxu == $sub.ref(0, 212133);

procedure hcd_to_oxu($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation hcd_to_oxu($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_412;

  corral_source_split_412:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(968, 1));
    goto corral_source_split_413;

  corral_source_split_413:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_414;

  corral_source_split_414:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const usb_add_hcd: ref;

axiom usb_add_hcd == $sub.ref(0, 213165);

procedure usb_add_hcd($p0: ref, $i1: i32, $i2: i64) returns ($r: i32);
  free requires assertsPassed;



implementation usb_add_hcd($p0: ref, $i1: i32, $i2: i64) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 134} {:cexpr "usb_add_hcd:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 135} {:cexpr "usb_add_hcd:arg:arg2"} boogie_si_record_i64($i2);
    goto corral_source_split_416;

  corral_source_split_416:
    assume {:verifier.code 1} true;
    call {:si_unique_call 136} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 137} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_417;

  corral_source_split_417:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const device_wakeup_enable: ref;

axiom device_wakeup_enable == $sub.ref(0, 214197);

procedure device_wakeup_enable($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation device_wakeup_enable($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_419;

  corral_source_split_419:
    assume {:verifier.code 1} true;
    call {:si_unique_call 138} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 139} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_420;

  corral_source_split_420:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_err_ptr: ref;

axiom ldv_err_ptr == $sub.ref(0, 215229);

procedure ldv_err_ptr($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation ldv_err_ptr($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 140} {:cexpr "ldv_err_ptr:arg:error"} boogie_si_record_i64($i0);
    goto corral_source_split_422;

  corral_source_split_422:
    assume {:verifier.code 0} true;
    $i1 := $sub.i64(2012, $i0);
    goto corral_source_split_423;

  corral_source_split_423:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_424;

  corral_source_split_424:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const external_alloc: ref;

axiom external_alloc == $sub.ref(0, 216261);

procedure external_alloc() returns ($r: ref);
  free requires assertsPassed;



implementation external_alloc() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_426;

  corral_source_split_426:
    assume {:verifier.code 1} true;
    call {:si_unique_call 141} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 142} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_427;

  corral_source_split_427:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const dev_set_drvdata: ref;

axiom dev_set_drvdata == $sub.ref(0, 217293);

procedure dev_set_drvdata($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation dev_set_drvdata($p0: ref, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_429;

  corral_source_split_429:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(512, 1));
    goto corral_source_split_430;

  corral_source_split_430:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p1);
    goto corral_source_split_431;

  corral_source_split_431:
    assume {:verifier.code 0} true;
    return;
}



const devm_kmalloc: ref;

axiom devm_kmalloc == $sub.ref(0, 218325);

procedure devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;



implementation devm_kmalloc($p0: ref, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 143} {:cexpr "devm_kmalloc:arg:arg1"} boogie_si_record_i64($i1);
    call {:si_unique_call 144} {:cexpr "devm_kmalloc:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_433;

  corral_source_split_433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 145} $p3 := external_alloc();
    goto corral_source_split_434;

  corral_source_split_434:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;
}



const ldv_ptr_err: ref;

axiom ldv_ptr_err == $sub.ref(0, 219357);

procedure ldv_ptr_err($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation ldv_ptr_err($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_436;

  corral_source_split_436:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_437;

  corral_source_split_437:
    assume {:verifier.code 0} true;
    $i2 := $sub.i64(2012, $i1);
    goto corral_source_split_438;

  corral_source_split_438:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_is_err: ref;

axiom ldv_is_err == $sub.ref(0, 220389);

procedure ldv_is_err($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation ldv_is_err($p0: ref) returns ($r: i1)
{
  var $i1: i64;
  var $i2: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_440;

  corral_source_split_440:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_441;

  corral_source_split_441:
    assume {:verifier.code 0} true;
    $i2 := $ugt.i64($i1, 2012);
    goto corral_source_split_442;

  corral_source_split_442:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const kobject_name: ref;

axiom kobject_name == $sub.ref(0, 221421);

procedure kobject_name($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation kobject_name($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_444;

  corral_source_split_444:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 296)), $mul.ref(0, 1));
    goto corral_source_split_445;

  corral_source_split_445:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_446;

  corral_source_split_446:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const oxu_irq: ref;

axiom oxu_irq == $sub.ref(0, 222453);

procedure oxu_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.63, $M.0, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_irq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i8;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i8;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var vslice_dummy_var_66: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_448;

  corral_source_split_448:
    assume {:verifier.code 0} true;
    call {:si_unique_call 146} $p1 := hcd_to_oxu($p0);
    goto corral_source_split_449;

  corral_source_split_449:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_450;

  corral_source_split_450:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_451;

  corral_source_split_451:
    assume {:verifier.code 0} true;
    call {:si_unique_call 147} $i4 := oxu_readl($p3, 16);
    goto SeqInstr_28, SeqInstr_29;

  SeqInstr_29:
    assume assertsPassed;
    goto SeqInstr_30;

  SeqInstr_30:
    call {:si_unique_call 148} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_452;

  corral_source_split_452:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_453;

  corral_source_split_453:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_454;

  corral_source_split_454:
    assume {:verifier.code 0} true;
    call {:si_unique_call 149} $i7 := oxu_readl($p6, 20);
    goto SeqInstr_31, SeqInstr_32;

  SeqInstr_32:
    assume assertsPassed;
    goto SeqInstr_33;

  SeqInstr_33:
    call {:si_unique_call 150} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_455;

  corral_source_split_455:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_456;

  corral_source_split_456:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_457;

  corral_source_split_457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 151} oxu_writel($p9, 24, $i7);
    goto corral_source_split_458;

  corral_source_split_458:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p1);
    goto corral_source_split_459;

  corral_source_split_459:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p10, $mul.ref(0, 1));
    goto corral_source_split_460;

  corral_source_split_460:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.9, $p11);
    goto corral_source_split_461;

  corral_source_split_461:
    assume {:verifier.code 0} true;
    $i13 := $zext.i8.i32($i12);
    goto corral_source_split_462;

  corral_source_split_462:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_463;

  corral_source_split_463:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p1);
    goto corral_source_split_469;

  corral_source_split_469:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($p17, $mul.ref(0, 1));
    goto corral_source_split_470;

  corral_source_split_470:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.9, $p18);
    goto corral_source_split_471;

  corral_source_split_471:
    assume {:verifier.code 0} true;
    $i20 := $zext.i8.i32($i19);
    goto corral_source_split_472;

  corral_source_split_472:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_473;

  corral_source_split_473:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i21 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_481;

  corral_source_split_481:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_482;

  corral_source_split_482:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_483;

  corral_source_split_483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 153} oxu_writel($p27, 20, $i7);
    goto corral_source_split_484;

  corral_source_split_484:
    assume {:verifier.code 0} true;
    $r := $i25;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_477;

  corral_source_split_477:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i4, 2);
    goto corral_source_split_478;

  corral_source_split_478:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_479;

  corral_source_split_479:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb9;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 152} vslice_dummy_var_66 := oxu210_hcd_irq($p0);
    goto SeqInstr_34, SeqInstr_35;

  SeqInstr_35:
    assume assertsPassed;
    goto SeqInstr_36;

  SeqInstr_36:
    goto corral_source_split_475;

  corral_source_split_475:
    assume {:verifier.code 0} true;
    $i25 := 1;
    goto $bb12;

  SeqInstr_34:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_465;

  corral_source_split_465:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i4, 1);
    goto corral_source_split_466;

  corral_source_split_466:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_467;

  corral_source_split_467:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i16 == 1);
    goto $bb3;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb5;

  SeqInstr_31:
    assume !assertsPassed;
    return;

  SeqInstr_28:
    assume !assertsPassed;
    return;
}



const oxu_reset: ref;

axiom oxu_reset == $sub.ref(0, 223485);

procedure oxu_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $CurrAddr, $M.22, $M.63, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.8, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, assertsPassed, $M.58, $M.59;



implementation oxu_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $i16: i8;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $i51: i32;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $p57: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var vslice_dummy_var_67: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 154} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_486;

  corral_source_split_486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 155} $p2 := hcd_to_oxu($p0);
    goto corral_source_split_487;

  corral_source_split_487:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_488;

  corral_source_split_488:
    assume {:verifier.code 0} true;
    call {:si_unique_call 156} vslice_dummy_var_67 := spinlock_check($p3);
    goto corral_source_split_489;

  corral_source_split_489:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(80, 1)), $mul.ref(0, 1));
    goto corral_source_split_490;

  corral_source_split_490:
    assume {:verifier.code 0} true;
    $p7 := $bitcast.ref.ref($p6);
    goto corral_source_split_491;

  corral_source_split_491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 157} __raw_spin_lock_init($p7, .str.52, $p1);
    goto corral_source_split_492;

  corral_source_split_492:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(736, 1));
    goto corral_source_split_493;

  corral_source_split_493:
    assume {:verifier.code 0} true;
    call {:si_unique_call 158} INIT_LIST_HEAD($p8);
    goto corral_source_split_494;

  corral_source_split_494:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(760, 1));
    goto corral_source_split_495;

  corral_source_split_495:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p9, 0);
    goto corral_source_split_496;

  corral_source_split_496:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_497;

  corral_source_split_497:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_498;

  corral_source_split_498:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 1424)), $mul.ref(1160, 1));
    goto corral_source_split_499;

  corral_source_split_499:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $0.ref);
    goto corral_source_split_500;

  corral_source_split_500:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p2);
    goto corral_source_split_501;

  corral_source_split_501:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p14, $mul.ref(0, 1));
    goto corral_source_split_502;

  corral_source_split_502:
    assume {:verifier.code 0} true;
    $i16 := $load.i8($M.0, $p15);
    goto corral_source_split_503;

  corral_source_split_503:
    assume {:verifier.code 0} true;
    $i17 := $zext.i8.i32($i16);
    goto corral_source_split_504;

  corral_source_split_504:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_505;

  corral_source_split_505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    goto corral_source_split_535;

  corral_source_split_535:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_536;

  corral_source_split_536:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_537;

  corral_source_split_537:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p43);
    goto corral_source_split_538;

  corral_source_split_538:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($p44, $mul.ref(2304, 20));
    goto corral_source_split_539;

  corral_source_split_539:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(280, 1));
    goto corral_source_split_540;

  corral_source_split_540:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p46, $p45);
    goto corral_source_split_541;

  corral_source_split_541:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(280, 1));
    goto corral_source_split_542;

  corral_source_split_542:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_543;

  corral_source_split_543:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_544;

  corral_source_split_544:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_545;

  corral_source_split_545:
    assume {:verifier.code 0} true;
    call {:si_unique_call 161} $i51 := readl($p50);
    goto SeqInstr_40, SeqInstr_41;

  SeqInstr_41:
    assume assertsPassed;
    goto SeqInstr_42;

  SeqInstr_42:
    call {:si_unique_call 162} {:cexpr "tmp___1"} boogie_si_record_i32($i51);
    goto corral_source_split_546;

  corral_source_split_546:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_547;

  corral_source_split_547:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_548;

  corral_source_split_548:
    assume {:verifier.code 0} true;
    $i54 := $zext.i32.i64($i51);
    goto corral_source_split_549;

  corral_source_split_549:
    assume {:verifier.code 0} true;
    $i55 := $and.i64($i54, 255);
    goto corral_source_split_550;

  corral_source_split_550:
    assume {:verifier.code 0} true;
    $i56 := $add.i64($i55, 2304);
    goto corral_source_split_551;

  corral_source_split_551:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($p53, $mul.ref($i56, 1));
    goto corral_source_split_552;

  corral_source_split_552:
    assume {:verifier.code 0} true;
    goto corral_source_split_553;

  corral_source_split_553:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_554;

  corral_source_split_554:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p59, $p57);
    goto corral_source_split_555;

  corral_source_split_555:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_556;

  corral_source_split_556:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_557;

  corral_source_split_557:
    assume {:verifier.code 0} true;
    $p62 := $bitcast.ref.ref($p61);
    goto corral_source_split_558;

  corral_source_split_558:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p62, $mul.ref(57344, 15104));
    goto corral_source_split_559;

  corral_source_split_559:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_560;

  corral_source_split_560:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p64, $p63);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(280, 1));
    goto corral_source_split_562;

  corral_source_split_562:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_563;

  corral_source_split_563:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 20)), $mul.ref(4, 1));
    goto corral_source_split_564;

  corral_source_split_564:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_565;

  corral_source_split_565:
    assume {:verifier.code 0} true;
    call {:si_unique_call 163} $i69 := readl($p68);
    goto SeqInstr_43, SeqInstr_44;

  SeqInstr_44:
    assume assertsPassed;
    goto SeqInstr_45;

  SeqInstr_45:
    goto corral_source_split_566;

  corral_source_split_566:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_567;

  corral_source_split_567:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_568;

  corral_source_split_568:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(764, 1));
    goto corral_source_split_569;

  corral_source_split_569:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 32);
    goto corral_source_split_570;

  corral_source_split_570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 164} $i72 := oxu_hcd_init($p0);
    goto SeqInstr_46, SeqInstr_47;

  SeqInstr_47:
    assume assertsPassed;
    goto SeqInstr_48;

  SeqInstr_48:
    call {:si_unique_call 165} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_571;

  corral_source_split_571:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_572;

  corral_source_split_572:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i74 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_576;

  corral_source_split_576:
    assume {:verifier.code 0} true;
    $r := $i74;
    return;

  $bb4:
    assume $i73 == 1;
    goto corral_source_split_574;

  corral_source_split_574:
    assume {:verifier.code 0} true;
    $i74 := $i72;
    goto $bb6;

  SeqInstr_46:
    assume !assertsPassed;
    return;

  SeqInstr_43:
    assume !assertsPassed;
    return;

  SeqInstr_40:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_507;

  corral_source_split_507:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_508;

  corral_source_split_508:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_509;

  corral_source_split_509:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p20);
    goto corral_source_split_510;

  corral_source_split_510:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($p21, $mul.ref(1280, 20));
    goto corral_source_split_511;

  corral_source_split_511:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(280, 1));
    goto corral_source_split_512;

  corral_source_split_512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p23, $p22);
    goto corral_source_split_513;

  corral_source_split_513:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(280, 1));
    goto corral_source_split_514;

  corral_source_split_514:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_515;

  corral_source_split_515:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p25, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_516;

  corral_source_split_516:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_517;

  corral_source_split_517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 159} $i28 := readl($p27);
    goto SeqInstr_37, SeqInstr_38;

  SeqInstr_38:
    assume assertsPassed;
    goto SeqInstr_39;

  SeqInstr_39:
    call {:si_unique_call 160} {:cexpr "tmp___0"} boogie_si_record_i32($i28);
    goto corral_source_split_518;

  corral_source_split_518:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_519;

  corral_source_split_519:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_520;

  corral_source_split_520:
    assume {:verifier.code 0} true;
    $i31 := $zext.i32.i64($i28);
    goto corral_source_split_521;

  corral_source_split_521:
    assume {:verifier.code 0} true;
    $i32 := $and.i64($i31, 255);
    goto corral_source_split_522;

  corral_source_split_522:
    assume {:verifier.code 0} true;
    $i33 := $add.i64($i32, 1280);
    goto corral_source_split_523;

  corral_source_split_523:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($p30, $mul.ref($i33, 1));
    goto corral_source_split_524;

  corral_source_split_524:
    assume {:verifier.code 0} true;
    goto corral_source_split_525;

  corral_source_split_525:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_526;

  corral_source_split_526:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $p34);
    goto corral_source_split_527;

  corral_source_split_527:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(584, 1));
    goto corral_source_split_528;

  corral_source_split_528:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_529;

  corral_source_split_529:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_530;

  corral_source_split_530:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($p39, $mul.ref(90112, 15104));
    goto corral_source_split_531;

  corral_source_split_531:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_532;

  corral_source_split_532:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p41, $p40);
    goto corral_source_split_533;

  corral_source_split_533:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_37:
    assume !assertsPassed;
    return;
}



const oxu_run: ref;

axiom oxu_run == $sub.ref(0, 224517);

procedure oxu_run($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.63, $CurrAddr, $M.27, $M.29, $M.31, $M.33, $M.22, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.8, $M.28, $M.30, $M.32, $M.34, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_run($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i16;
  var $i7: i16;
  var $i8: i32;
  var $i9: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $i22: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $i62: i24;
  var $i63: i24;
  var $i64: i24;
  var $p65: ref;
  var $p66: ref;
  var $i67: i8;
  var $i68: i64;
  var $i69: i64;
  var $i70: i64;
  var $i71: i1;
  var $p72: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $i91: i32;
  var $i92: i32;
  var $p93: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i8;
  var $i99: i32;
  var $i100: i32;
  var $p101: ref;
  var $i102: i8;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $i108: i1;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i10: i32;
  var vslice_dummy_var_68: i32;
  var vslice_dummy_var_69: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 166} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 167} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_578;

  corral_source_split_578:
    assume {:verifier.code 0} true;
    call {:si_unique_call 168} $p3 := hcd_to_oxu($p0);
    goto corral_source_split_579;

  corral_source_split_579:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(576, 1));
    goto corral_source_split_580;

  corral_source_split_580:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_581;

  corral_source_split_581:
    assume {:verifier.code 0} true;
    $i6 := $and.i16($i5, $sub.i16(0, 17));
    goto corral_source_split_582;

  corral_source_split_582:
    assume {:verifier.code 0} true;
    $i7 := $or.i16($i6, 16);
    goto corral_source_split_583;

  corral_source_split_583:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p4, $i7);
    goto corral_source_split_584;

  corral_source_split_584:
    assume {:verifier.code 0} true;
    call {:si_unique_call 169} $i8 := ehci_reset($p3);
    goto SeqInstr_49, SeqInstr_50;

  SeqInstr_50:
    assume assertsPassed;
    goto SeqInstr_51;

  SeqInstr_51:
    call {:si_unique_call 170} {:cexpr "retval"} boogie_si_record_i32($i8);
    goto corral_source_split_585;

  corral_source_split_585:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_586;

  corral_source_split_586:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(408, 1));
    goto corral_source_split_593;

  corral_source_split_593:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_594;

  corral_source_split_594:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_595;

  corral_source_split_595:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_596;

  corral_source_split_596:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_597;

  corral_source_split_597:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 68)), $mul.ref(20, 1));
    goto corral_source_split_598;

  corral_source_split_598:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_599;

  corral_source_split_599:
    assume {:verifier.code 0} true;
    call {:si_unique_call 172} writel($i13, $p17);
    goto corral_source_split_600;

  corral_source_split_600:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_601;

  corral_source_split_601:
    assume {:verifier.code 0} true;
    $p19 := $load.ref($M.0, $p18);
    goto corral_source_split_602;

  corral_source_split_602:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_603;

  corral_source_split_603:
    assume {:verifier.code 0} true;
    $i21 := $load.i64($M.0, $p20);
    goto corral_source_split_604;

  corral_source_split_604:
    assume {:verifier.code 0} true;
    $i22 := $trunc.i64.i32($i21);
    goto corral_source_split_605;

  corral_source_split_605:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_606;

  corral_source_split_606:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_607;

  corral_source_split_607:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 68)), $mul.ref(24, 1));
    goto corral_source_split_608;

  corral_source_split_608:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_609;

  corral_source_split_609:
    assume {:verifier.code 0} true;
    call {:si_unique_call 173} writel($i22, $p26);
    goto corral_source_split_610;

  corral_source_split_610:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(280, 1));
    goto corral_source_split_611;

  corral_source_split_611:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_612;

  corral_source_split_612:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_613;

  corral_source_split_613:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_614;

  corral_source_split_614:
    assume {:verifier.code 0} true;
    call {:si_unique_call 174} $i31 := readl($p30);
    goto SeqInstr_55, SeqInstr_56;

  SeqInstr_56:
    assume assertsPassed;
    goto SeqInstr_57;

  SeqInstr_57:
    call {:si_unique_call 175} {:cexpr "hcc_params"} boogie_si_record_i32($i31);
    goto corral_source_split_615;

  corral_source_split_615:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 1);
    goto corral_source_split_616;

  corral_source_split_616:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_617;

  corral_source_split_617:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_626;

  corral_source_split_626:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_627;

  corral_source_split_627:
    assume {:verifier.code 0} true;
    $i40 := $and.i32($i39, $sub.i32(0, 243));
    goto corral_source_split_628;

  corral_source_split_628:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_629;

  corral_source_split_629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p41, $i40);
    goto corral_source_split_630;

  corral_source_split_630:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_631;

  corral_source_split_631:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_632;

  corral_source_split_632:
    assume {:verifier.code 0} true;
    $i44 := $or.i32($i43, 1);
    goto corral_source_split_633;

  corral_source_split_633:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_634;

  corral_source_split_634:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_635;

  corral_source_split_635:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_636;

  corral_source_split_636:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_637;

  corral_source_split_637:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_638;

  corral_source_split_638:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_639;

  corral_source_split_639:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_640;

  corral_source_split_640:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_641;

  corral_source_split_641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 177} writel($i47, $p51);
    goto corral_source_split_642;

  corral_source_split_642:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p1);
    goto corral_source_split_643;

  corral_source_split_643:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_644;

  corral_source_split_644:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_645;

  corral_source_split_645:
    assume {:verifier.code 0} true;
    call {:si_unique_call 178} vslice_dummy_var_68 := dbg_command_buf($p52, 80, .str.18, $i54);
    goto corral_source_split_646;

  corral_source_split_646:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_647;

  corral_source_split_647:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p56, .str.2);
    goto corral_source_split_648;

  corral_source_split_648:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_649;

  corral_source_split_649:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p57, .str.19);
    goto corral_source_split_650;

  corral_source_split_650:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_651;

  corral_source_split_651:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p58, .str);
    goto corral_source_split_652;

  corral_source_split_652:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_653;

  corral_source_split_653:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p59, .str.20);
    goto corral_source_split_654;

  corral_source_split_654:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_655;

  corral_source_split_655:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_656;

  corral_source_split_656:
    assume {:verifier.code 0} true;
    $i62 := $load.i24($M.6, $p61);
    goto corral_source_split_657;

  corral_source_split_657:
    assume {:verifier.code 0} true;
    $i63 := $and.i24($i62, $sub.i24(0, 262144));
    goto corral_source_split_658;

  corral_source_split_658:
    assume {:verifier.code 0} true;
    $i64 := $or.i24($i63, 2742);
    goto corral_source_split_659;

  corral_source_split_659:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p61, $i64);
    goto corral_source_split_660;

  corral_source_split_660:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_661;

  corral_source_split_661:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p65, 0);
    goto corral_source_split_662;

  corral_source_split_662:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_663;

  corral_source_split_663:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.7, $p66);
    goto corral_source_split_664;

  corral_source_split_664:
    assume {:verifier.code 0} true;
    $i68 := $zext.i8.i64($i67);
    goto corral_source_split_665;

  corral_source_split_665:
    assume {:verifier.code 0} true;
    $i69 := $and.i64($i68, 1);
    goto corral_source_split_666;

  corral_source_split_666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 179} $i70 := ldv__builtin_expect($i69, 0);
    call {:si_unique_call 180} {:cexpr "tmp___1"} boogie_si_record_i64($i70);
    goto corral_source_split_667;

  corral_source_split_667:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, 0);
    goto corral_source_split_668;

  corral_source_split_668:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_677;

  corral_source_split_677:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p77, 1);
    goto corral_source_split_678;

  corral_source_split_678:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_679;

  corral_source_split_679:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_680;

  corral_source_split_680:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p79, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_681;

  corral_source_split_681:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_682;

  corral_source_split_682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 183} writel(1, $p81);
    goto corral_source_split_683;

  corral_source_split_683:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_684;

  corral_source_split_684:
    assume {:verifier.code 0} true;
    $p83 := $load.ref($M.0, $p82);
    goto corral_source_split_685;

  corral_source_split_685:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p83, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_686;

  corral_source_split_686:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p84);
    goto corral_source_split_687;

  corral_source_split_687:
    assume {:verifier.code 0} true;
    call {:si_unique_call 184} vslice_dummy_var_69 := readl($p85);
    goto SeqInstr_58, SeqInstr_59;

  SeqInstr_59:
    assume assertsPassed;
    goto SeqInstr_60;

  SeqInstr_60:
    goto corral_source_split_688;

  corral_source_split_688:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(280, 1));
    goto corral_source_split_689;

  corral_source_split_689:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_690;

  corral_source_split_690:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 20)), $mul.ref(0, 1));
    goto corral_source_split_691;

  corral_source_split_691:
    assume {:verifier.code 0} true;
    $p90 := $bitcast.ref.ref($p89);
    goto corral_source_split_692;

  corral_source_split_692:
    assume {:verifier.code 0} true;
    call {:si_unique_call 185} $i91 := readl($p90);
    goto SeqInstr_61, SeqInstr_62;

  SeqInstr_62:
    assume assertsPassed;
    goto SeqInstr_63;

  SeqInstr_63:
    call {:si_unique_call 186} {:cexpr "tmp___2"} boogie_si_record_i32($i91);
    goto corral_source_split_693;

  corral_source_split_693:
    assume {:verifier.code 0} true;
    $i92 := $lshr.i32($i91, 16);
    call {:si_unique_call 187} {:cexpr "temp"} boogie_si_record_i32($i92);
    goto corral_source_split_694;

  corral_source_split_694:
    assume {:verifier.code 0} true;
    call {:si_unique_call 188} $p93 := oxu_to_hcd($p3);
    goto corral_source_split_695;

  corral_source_split_695:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p93, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_696;

  corral_source_split_696:
    assume {:verifier.code 0} true;
    $p96 := $load.ref($M.12, $p95);
    goto corral_source_split_697;

  corral_source_split_697:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(764, 1));
    goto corral_source_split_698;

  corral_source_split_698:
    assume {:verifier.code 0} true;
    $i98 := $load.i8($M.0, $p97);
    goto corral_source_split_699;

  corral_source_split_699:
    assume {:verifier.code 0} true;
    $i99 := $zext.i8.i32($i98);
    goto corral_source_split_700;

  corral_source_split_700:
    assume {:verifier.code 0} true;
    $i100 := $ashr.i32($i99, 4);
    goto corral_source_split_701;

  corral_source_split_701:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(764, 1));
    goto corral_source_split_702;

  corral_source_split_702:
    assume {:verifier.code 0} true;
    $i102 := $load.i8($M.0, $p101);
    goto corral_source_split_703;

  corral_source_split_703:
    assume {:verifier.code 0} true;
    $i103 := $zext.i8.i32($i102);
    goto corral_source_split_704;

  corral_source_split_704:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 15);
    goto corral_source_split_705;

  corral_source_split_705:
    assume {:verifier.code 0} true;
    $i105 := $lshr.i32($i92, 8);
    goto corral_source_split_706;

  corral_source_split_706:
    assume {:verifier.code 0} true;
    $i106 := $and.i32($i92, 255);
    goto corral_source_split_707;

  corral_source_split_707:
    assume {:verifier.code 0} true;
    $i107 := $M.13;
    goto corral_source_split_708;

  corral_source_split_708:
    assume {:verifier.code 0} true;
    $i108 := $trunc.i8.i1($i107);
    goto corral_source_split_709;

  corral_source_split_709:
    assume {:verifier.code 0} true;
    $p109 := (if $i108 == 1 then .str.23 else .str.24);
    goto corral_source_split_710;

  corral_source_split_710:
    assume {:verifier.code 0} true;
    call {:si_unique_call 189} _dev_info.ref.ref.i32.i32.i32.i32.ref.ref($p96, .str.21, $i100, $i104, $i105, $i106, .str.22, $p109);
    goto corral_source_split_711;

  corral_source_split_711:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_712;

  corral_source_split_712:
    assume {:verifier.code 0} true;
    $p111 := $load.ref($M.0, $p110);
    goto corral_source_split_713;

  corral_source_split_713:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p111, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_714;

  corral_source_split_714:
    assume {:verifier.code 0} true;
    $p113 := $bitcast.ref.ref($p112);
    goto corral_source_split_715;

  corral_source_split_715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 190} writel(55, $p113);
    goto corral_source_split_716;

  corral_source_split_716:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_591;

  corral_source_split_591:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_61:
    assume !assertsPassed;
    return;

  SeqInstr_58:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i71 == 1;
    goto corral_source_split_670;

  corral_source_split_670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 181} $p72 := oxu_to_hcd($p3);
    goto corral_source_split_671;

  corral_source_split_671:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p72, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_672;

  corral_source_split_672:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.11, $p74);
    goto corral_source_split_673;

  corral_source_split_673:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p1);
    goto corral_source_split_674;

  corral_source_split_674:
    assume {:verifier.code 0} true;
    call {:si_unique_call 182} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p75, .str.20, $p76);
    goto corral_source_split_675;

  corral_source_split_675:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb5:
    assume $i33 == 1;
    goto corral_source_split_619;

  corral_source_split_619:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_620;

  corral_source_split_620:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_621;

  corral_source_split_621:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 68)), $mul.ref(16, 1));
    goto corral_source_split_622;

  corral_source_split_622:
    assume {:verifier.code 0} true;
    $p37 := $bitcast.ref.ref($p36);
    goto corral_source_split_623;

  corral_source_split_623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 176} writel(0, $p37);
    goto corral_source_split_624;

  corral_source_split_624:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_55:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_588;

  corral_source_split_588:
    assume {:verifier.code 0} true;
    call {:si_unique_call 171} ehci_mem_cleanup($p3);
    goto SeqInstr_52, SeqInstr_53;

  SeqInstr_53:
    assume assertsPassed;
    goto SeqInstr_54;

  SeqInstr_54:
    goto corral_source_split_589;

  corral_source_split_589:
    assume {:verifier.code 0} true;
    $i10 := $i8;
    goto $bb3;

  SeqInstr_52:
    assume !assertsPassed;
    return;

  SeqInstr_49:
    assume !assertsPassed;
    return;
}



const oxu_stop: ref;

axiom oxu_stop == $sub.ref(0, 225549);

procedure oxu_stop($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_stop($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i32;
  var $p32: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var vslice_dummy_var_70: i32;
  var vslice_dummy_var_71: i32;
  var vslice_dummy_var_72: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 191} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 192} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_718;

  corral_source_split_718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 193} $p3 := hcd_to_oxu($p0);
    goto corral_source_split_719;

  corral_source_split_719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 194} ehci_port_power($p3, 0);
    goto SeqInstr_64, SeqInstr_65;

  SeqInstr_65:
    assume assertsPassed;
    goto SeqInstr_66;

  SeqInstr_66:
    goto corral_source_split_720;

  corral_source_split_720:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(576, 1));
    goto corral_source_split_721;

  corral_source_split_721:
    assume {:verifier.code 0} true;
    call {:si_unique_call 195} vslice_dummy_var_70 := ldv_del_timer_sync_27($p4);
    goto corral_source_split_722;

  corral_source_split_722:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_723;

  corral_source_split_723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 196} spin_lock_irq($p6);
    goto corral_source_split_724;

  corral_source_split_724:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_725;

  corral_source_split_725:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    goto corral_source_split_726;

  corral_source_split_726:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i8, 1);
    goto corral_source_split_727;

  corral_source_split_727:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_728;

  corral_source_split_728:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 198} vslice_dummy_var_71 := ehci_reset($p3);
    goto SeqInstr_70, SeqInstr_71;

  SeqInstr_71:
    assume assertsPassed;
    goto SeqInstr_72;

  SeqInstr_72:
    goto corral_source_split_733;

  corral_source_split_733:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_734;

  corral_source_split_734:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_735;

  corral_source_split_735:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_736;

  corral_source_split_736:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_737;

  corral_source_split_737:
    assume {:verifier.code 0} true;
    call {:si_unique_call 199} writel(0, $p15);
    goto corral_source_split_738;

  corral_source_split_738:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_739;

  corral_source_split_739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 200} spin_unlock_irq($p16);
    goto corral_source_split_740;

  corral_source_split_740:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_741;

  corral_source_split_741:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_742;

  corral_source_split_742:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_743;

  corral_source_split_743:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_744;

  corral_source_split_744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 201} writel(0, $p20);
    goto corral_source_split_745;

  corral_source_split_745:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_746;

  corral_source_split_746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 202} spin_lock_irq($p21);
    goto corral_source_split_747;

  corral_source_split_747:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_748;

  corral_source_split_748:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_749;

  corral_source_split_749:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_750;

  corral_source_split_750:
    assume {:verifier.code 0} true;
    $i25 := $ne.i64($i24, 0);
    goto corral_source_split_751;

  corral_source_split_751:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_756;

  corral_source_split_756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 204} spin_unlock_irq($p26);
    goto corral_source_split_757;

  corral_source_split_757:
    assume {:verifier.code 0} true;
    call {:si_unique_call 205} ehci_mem_cleanup($p3);
    goto SeqInstr_76, SeqInstr_77;

  SeqInstr_77:
    assume assertsPassed;
    goto SeqInstr_78;

  SeqInstr_78:
    goto corral_source_split_758;

  corral_source_split_758:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_759;

  corral_source_split_759:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_760;

  corral_source_split_760:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_761;

  corral_source_split_761:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_762;

  corral_source_split_762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 206} $i31 := readl($p30);
    goto SeqInstr_79, SeqInstr_80;

  SeqInstr_80:
    assume assertsPassed;
    goto SeqInstr_81;

  SeqInstr_81:
    call {:si_unique_call 207} {:cexpr "tmp___0"} boogie_si_record_i32($i31);
    goto corral_source_split_763;

  corral_source_split_763:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p1);
    goto corral_source_split_764;

  corral_source_split_764:
    assume {:verifier.code 0} true;
    call {:si_unique_call 208} vslice_dummy_var_72 := dbg_status_buf($p32, 80, .str.74, $i31);
    goto corral_source_split_765;

  corral_source_split_765:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_766;

  corral_source_split_766:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p34, .str.2);
    goto corral_source_split_767;

  corral_source_split_767:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_768;

  corral_source_split_768:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p35, .str.75);
    goto corral_source_split_769;

  corral_source_split_769:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_770;

  corral_source_split_770:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p36, .str);
    goto corral_source_split_771;

  corral_source_split_771:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_772;

  corral_source_split_772:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p37, .str.20);
    goto corral_source_split_773;

  corral_source_split_773:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_774;

  corral_source_split_774:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_775;

  corral_source_split_775:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.6, $p39);
    goto corral_source_split_776;

  corral_source_split_776:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_777;

  corral_source_split_777:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 2793);
    goto corral_source_split_778;

  corral_source_split_778:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p39, $i42);
    goto corral_source_split_779;

  corral_source_split_779:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_780;

  corral_source_split_780:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p43, 0);
    goto corral_source_split_781;

  corral_source_split_781:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_782;

  corral_source_split_782:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.7, $p44);
    goto corral_source_split_783;

  corral_source_split_783:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_784;

  corral_source_split_784:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_785;

  corral_source_split_785:
    assume {:verifier.code 0} true;
    call {:si_unique_call 209} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 210} {:cexpr "tmp___2"} boogie_si_record_i64($i48);
    goto corral_source_split_786;

  corral_source_split_786:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_787;

  corral_source_split_787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i49 == 1;
    goto corral_source_split_789;

  corral_source_split_789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 211} $p50 := oxu_to_hcd($p3);
    goto corral_source_split_790;

  corral_source_split_790:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_791;

  corral_source_split_791:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.14, $p52);
    goto corral_source_split_792;

  corral_source_split_792:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p1);
    goto corral_source_split_793;

  corral_source_split_793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 212} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p53, .str.20, $p54);
    goto corral_source_split_794;

  corral_source_split_794:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_79:
    assume !assertsPassed;
    return;

  SeqInstr_76:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i25 == 1;
    goto corral_source_split_753;

  corral_source_split_753:
    assume {:verifier.code 0} true;
    call {:si_unique_call 203} ehci_work($p3);
    goto SeqInstr_73, SeqInstr_74;

  SeqInstr_74:
    assume assertsPassed;
    goto SeqInstr_75;

  SeqInstr_75:
    goto corral_source_split_754;

  corral_source_split_754:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_73:
    assume !assertsPassed;
    return;

  SeqInstr_70:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_730;

  corral_source_split_730:
    assume {:verifier.code 0} true;
    call {:si_unique_call 197} ehci_quiesce($p3);
    goto SeqInstr_67, SeqInstr_68;

  SeqInstr_68:
    assume assertsPassed;
    goto SeqInstr_69;

  SeqInstr_69:
    goto corral_source_split_731;

  corral_source_split_731:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_67:
    assume !assertsPassed;
    return;

  SeqInstr_64:
    assume !assertsPassed;
    return;
}



const oxu_shutdown: ref;

axiom oxu_shutdown == $sub.ref(0, 226581);

procedure oxu_shutdown($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_shutdown($p0: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var vslice_dummy_var_73: i32;
  var vslice_dummy_var_74: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_796;

  corral_source_split_796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 213} $p1 := hcd_to_oxu($p0);
    goto corral_source_split_797;

  corral_source_split_797:
    assume {:verifier.code 0} true;
    call {:si_unique_call 214} vslice_dummy_var_73 := ehci_halt($p1);
    goto SeqInstr_82, SeqInstr_83;

  SeqInstr_83:
    assume assertsPassed;
    goto SeqInstr_84;

  SeqInstr_84:
    goto corral_source_split_798;

  corral_source_split_798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 215} ehci_turn_off_all_ports($p1);
    goto corral_source_split_799;

  corral_source_split_799:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_800;

  corral_source_split_800:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_801;

  corral_source_split_801:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_802;

  corral_source_split_802:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_803;

  corral_source_split_803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 216} writel(0, $p6);
    goto corral_source_split_804;

  corral_source_split_804:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_805;

  corral_source_split_805:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_806;

  corral_source_split_806:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_807;

  corral_source_split_807:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_808;

  corral_source_split_808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 217} vslice_dummy_var_74 := readl($p10);
    goto SeqInstr_85, SeqInstr_86;

  SeqInstr_86:
    assume assertsPassed;
    goto SeqInstr_87;

  SeqInstr_87:
    goto corral_source_split_809;

  corral_source_split_809:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_85:
    assume !assertsPassed;
    return;

  SeqInstr_82:
    assume !assertsPassed;
    return;
}



const oxu_get_frame: ref;

axiom oxu_get_frame == $sub.ref(0, 227613);

procedure oxu_get_frame($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_get_frame($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_811;

  corral_source_split_811:
    assume {:verifier.code 0} true;
    call {:si_unique_call 218} $p1 := hcd_to_oxu($p0);
    goto corral_source_split_812;

  corral_source_split_812:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_813;

  corral_source_split_813:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.15, $p2);
    goto corral_source_split_814;

  corral_source_split_814:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_815;

  corral_source_split_815:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_816;

  corral_source_split_816:
    assume {:verifier.code 0} true;
    call {:si_unique_call 219} $i6 := readl($p5);
    goto SeqInstr_88, SeqInstr_89;

  SeqInstr_89:
    assume assertsPassed;
    goto SeqInstr_90;

  SeqInstr_90:
    call {:si_unique_call 220} {:cexpr "tmp___0"} boogie_si_record_i32($i6);
    goto corral_source_split_817;

  corral_source_split_817:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 3);
    goto corral_source_split_818;

  corral_source_split_818:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_819;

  corral_source_split_819:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.15, $p8);
    goto corral_source_split_820;

  corral_source_split_820:
    assume {:verifier.code 0} true;
    $i10 := $urem.i32($i7, $i9);
    goto corral_source_split_821;

  corral_source_split_821:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_88:
    assume !assertsPassed;
    return;
}



const oxu_urb_enqueue: ref;

axiom oxu_urb_enqueue == $sub.ref(0, 228645);

procedure oxu_urb_enqueue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.60, $M.50, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.58, $M.59, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.48, $M.46, $M.47, assertsPassed;



implementation oxu_urb_enqueue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i32;
  var $i24: i1;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $i30: i64;
  var $i31: i1;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $i47: i1;
  var $i48: i32;
  var $i49: i1;
  var $i25: i32;
  var $p50: ref;
  var $p51: ref;
  var $i52: i64;
  var $i53: i1;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i1;
  var $i75: i32;
  var $i9: i32;
  var cmdloc_dummy_var_0: [ref]i8;
  var cmdloc_dummy_var_1: [ref]i8;
  var cmdloc_dummy_var_2: [ref]i8;
  var cmdloc_dummy_var_3: [ref]i8;
  var cmdloc_dummy_var_4: [ref]i8;
  var cmdloc_dummy_var_5: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 221} {:cexpr "oxu_urb_enqueue:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_823;

  corral_source_split_823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 222} $p3 := hcd_to_oxu($p0);
    goto corral_source_split_824;

  corral_source_split_824:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_825;

  corral_source_split_825:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_826;

  corral_source_split_826:
    assume {:verifier.code 0} true;
    $i6 := $lshr.i32($i5, 30);
    goto corral_source_split_827;

  corral_source_split_827:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 3);
    goto corral_source_split_828;

  corral_source_split_828:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_835;

  corral_source_split_835:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_836;

  corral_source_split_836:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_837;

  corral_source_split_837:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_838;

  corral_source_split_838:
    assume {:verifier.code 0} true;
    $i14 := $udiv.i32($i13, 4096);
    call {:si_unique_call 225} {:cexpr "num"} boogie_si_record_i32($i14);
    goto corral_source_split_839;

  corral_source_split_839:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_840;

  corral_source_split_840:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_841;

  corral_source_split_841:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i16, 4095);
    call {:si_unique_call 226} {:cexpr "rem"} boogie_si_record_i32($i17);
    goto corral_source_split_842;

  corral_source_split_842:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_843;

  corral_source_split_843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $i20 := $i14;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_848;

  corral_source_split_848:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 1);
    goto corral_source_split_849;

  corral_source_split_849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $i23 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_854;

  corral_source_split_854:
    assume {:verifier.code 0} true;
    $i24 := $sgt.i32($i23, 0);
    goto corral_source_split_855;

  corral_source_split_855:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    call $p50, $p51, $i52, $i53, $i54, $i55, $p56 := oxu_urb_enqueue_loop_$bb33($p3, $p50, $p51, $i52, $i53, $i54, $i55, $p56);
    goto $bb33_last;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_905;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    $i52 := $p2i.ref.i64($p51);
    goto corral_source_split_906;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    $i53 := $eq.i64($i52, 0);
    goto corral_source_split_907;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i54 := $p2i.ref.i64($p51);
    goto corral_source_split_912;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    $i55 := $eq.i64($i54, 0);
    goto corral_source_split_913;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    $p56 := $p50;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_915;

  corral_source_split_915:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p1);
    goto corral_source_split_916;

  corral_source_split_916:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_3 := $M.0;
    cmdloc_dummy_var_4 := $M.0;
    call {:si_unique_call 239} cmdloc_dummy_var_5 := $memcpy.i8(cmdloc_dummy_var_3, cmdloc_dummy_var_4, $p57, $p58, 192, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_5;
    goto corral_source_split_917;

  corral_source_split_917:
    assume {:verifier.code 0} true;
    $i59 := $sgt.i32($i17, 0);
    goto corral_source_split_918;

  corral_source_split_918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i59 == 1);
    goto corral_source_split_922;

  corral_source_split_922:
    assume {:verifier.code 0} true;
    $i60 := 4096;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto corral_source_split_924;

  corral_source_split_924:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p56, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_925;

  corral_source_split_925:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i60);
    goto corral_source_split_926;

  corral_source_split_926:
    assume {:verifier.code 0} true;
    $i62 := $add.i32($i20, $sub.i32(0, 1));
    goto corral_source_split_927;

  corral_source_split_927:
    assume {:verifier.code 0} true;
    $i63 := $mul.i32($i62, 4096);
    goto corral_source_split_928;

  corral_source_split_928:
    assume {:verifier.code 0} true;
    $i64 := $sext.i32.i64($i63);
    goto corral_source_split_929;

  corral_source_split_929:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($p11, $mul.ref($i64, 1));
    goto corral_source_split_930;

  corral_source_split_930:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p56, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_931;

  corral_source_split_931:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p66, $p65);
    goto corral_source_split_932;

  corral_source_split_932:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p56, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_933;

  corral_source_split_933:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p67, $0.ref);
    goto corral_source_split_934;

  corral_source_split_934:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p56);
    goto corral_source_split_935;

  corral_source_split_935:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p68, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_936;

  corral_source_split_936:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p69, $p1);
    goto corral_source_split_937;

  corral_source_split_937:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p56);
    goto corral_source_split_938;

  corral_source_split_938:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_939;

  corral_source_split_939:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p71, 1);
    goto corral_source_split_940;

  corral_source_split_940:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    call $i72, $i73, $i74, $i75 := oxu_urb_enqueue_loop_$bb43($p0, $i2, $p56, $i72, $i73, $i74, $i75);
    goto $bb43_last;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  SeqInstr_102:
    call {:si_unique_call 241} {:cexpr "ret"} boogie_si_record_i32($i72);
    goto corral_source_split_942;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_943;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i72, 0);
    goto corral_source_split_948;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    $i75 := $i72;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i74 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $i9 := $i75;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_833;

  corral_source_split_833:
    assume {:verifier.code 0} true;
    $r := $i9;
    return;

  $bb47:
    assume {:verifier.code 0} true;
    assume $i74 == 1;
    goto $bb47_dummy;

  $bb44:
    assume $i73 == 1;
    goto corral_source_split_945;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} schedule();
    goto corral_source_split_946;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto $bb46;

  SeqInstr_100:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i59 == 1;
    goto corral_source_split_920;

  corral_source_split_920:
    assume {:verifier.code 0} true;
    $i60 := $i17;
    goto $bb42;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i55 == 1;
    goto $bb37_dummy;

  $bb34:
    assume $i53 == 1;
    goto corral_source_split_909;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} schedule();
    goto corral_source_split_910;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb11:
    assume $i24 == 1;
    goto corral_source_split_857;

  corral_source_split_857:
    assume {:verifier.code 0} true;
    $i25 := 0;
    goto $bb14;

  $bb14:
    call $p26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $i48, $i49, $i25, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2 := oxu_urb_enqueue_loop_$bb14($p0, $p1, $i2, $p3, $p11, $i23, $p26, $p27, $i28, $i29, $i30, $i31, $p32, $p33, $p34, $p35, $i36, $i37, $p38, $p39, $p40, $p41, $p42, $p43, $p44, $i45, $i46, $i47, $i48, $i49, $i25, cmdloc_dummy_var_0, cmdloc_dummy_var_1, cmdloc_dummy_var_2);
    goto $bb14_last;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call $p26, $p27, $i28, $i29, $i30, $i31, $p32 := oxu_urb_enqueue_loop_$bb16($p3, $p26, $p27, $i28, $i29, $i30, $i31, $p32);
    goto $bb16_last;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_862;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_863;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_864;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i30 := $p2i.ref.i64($p27);
    goto corral_source_split_869;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    $i31 := $eq.i64($i30, 0);
    goto corral_source_split_870;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    $p32 := $p26;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p33 := $bitcast.ref.ref($p32);
    goto corral_source_split_872;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p1);
    goto corral_source_split_873;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_0 := $M.0;
    cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 232} cmdloc_dummy_var_2 := $memcpy.i8(cmdloc_dummy_var_0, cmdloc_dummy_var_1, $p33, $p34, 192, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_2;
    goto corral_source_split_874;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p32, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_875;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p35, 4096);
    goto corral_source_split_876;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    $i36 := $mul.i32($i25, 4096);
    goto corral_source_split_877;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i36);
    goto corral_source_split_878;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($p11, $mul.ref($i37, 1));
    goto corral_source_split_879;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p32, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_880;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p39, $p38);
    goto corral_source_split_881;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p32, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_882;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $0.ref);
    goto corral_source_split_883;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p32);
    goto corral_source_split_884;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_885;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p1);
    goto corral_source_split_886;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p32);
    goto corral_source_split_887;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_888;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, 0);
    goto corral_source_split_889;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    call $i45, $i46, $i47 := oxu_urb_enqueue_loop_$bb23($p0, $i2, $p32, $i45, $i46, $i47);
    goto $bb23_last;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  SeqInstr_99:
    call {:si_unique_call 234} {:cexpr "ret"} boogie_si_record_i32($i45);
    goto corral_source_split_891;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    $i46 := $ne.i32($i45, 0);
    goto corral_source_split_892;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i47 := $ne.i32($i45, 0);
    goto corral_source_split_897;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i25, 1);
    call {:si_unique_call 236} {:cexpr "i"} boogie_si_record_i32($i48);
    goto corral_source_split_899;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    $i49 := $sgt.i32($i23, $i48);
    goto corral_source_split_900;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i49 == 1);
    goto corral_source_split_902;

  corral_source_split_902:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb30:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i25 := $i48;
    goto $bb30_dummy;

  $bb27:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb27_dummy;

  $bb24:
    assume $i46 == 1;
    goto corral_source_split_894;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} schedule();
    goto corral_source_split_895;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb26;

  SeqInstr_97:
    assume !assertsPassed;
    return;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb20_dummy;

  $bb17:
    assume $i29 == 1;
    goto corral_source_split_866;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} schedule();
    goto corral_source_split_867;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i21 == 1;
    goto corral_source_split_851;

  corral_source_split_851:
    assume {:verifier.code 0} true;
    call {:si_unique_call 228} $i22 := __oxu_urb_enqueue($p0, $p1, $i2);
    goto SeqInstr_94, SeqInstr_95;

  SeqInstr_95:
    assume assertsPassed;
    goto SeqInstr_96;

  SeqInstr_96:
    call {:si_unique_call 229} {:cexpr "tmp___1"} boogie_si_record_i32($i22);
    goto corral_source_split_852;

  corral_source_split_852:
    assume {:verifier.code 0} true;
    $i9 := $i22;
    goto $bb3;

  SeqInstr_94:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_845;

  corral_source_split_845:
    assume {:verifier.code 0} true;
    $i19 := $add.i32($i14, 1);
    call {:si_unique_call 227} {:cexpr "num"} boogie_si_record_i32($i19);
    goto corral_source_split_846;

  corral_source_split_846:
    assume {:verifier.code 0} true;
    $i20 := $i19;
    goto $bb7;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_830;

  corral_source_split_830:
    assume {:verifier.code 0} true;
    call {:si_unique_call 223} $i8 := __oxu_urb_enqueue($p0, $p1, $i2);
    goto SeqInstr_91, SeqInstr_92;

  SeqInstr_92:
    assume assertsPassed;
    goto SeqInstr_93;

  SeqInstr_93:
    call {:si_unique_call 224} {:cexpr "tmp___0"} boogie_si_record_i32($i8);
    goto corral_source_split_831;

  corral_source_split_831:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb3;

  SeqInstr_91:
    assume !assertsPassed;
    return;

  $bb47_dummy:
    assume false;
    return;

  $bb43_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} $i72 := __oxu_urb_enqueue($p0, $p56, $i2);
    goto SeqInstr_100, SeqInstr_101;

  $bb37_dummy:
    assume false;
    return;

  $bb33_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} $p50 := oxu_murb_alloc($p3);
    goto corral_source_split_904;

  $bb27_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} $i45 := __oxu_urb_enqueue($p0, $p32, $i2);
    goto SeqInstr_97, SeqInstr_98;

  $bb20_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} $p26 := oxu_murb_alloc($p3);
    goto corral_source_split_861;

  $bb30_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;
}



const oxu_urb_dequeue: ref;

axiom oxu_urb_dequeue == $sub.ref(0, 229677);

procedure oxu_urb_dequeue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.0, $M.50, $CurrAddr, $M.60, $M.48, $M.46, $M.57, $M.47, $M.58, $M.59, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.8, $M.39, assertsPassed;



implementation oxu_urb_dequeue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i64;
  var $i21: i1;
  var $p22: ref;
  var $i23: i8;
  var $i24: i32;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i24;
  var $i36: i24;
  var $i37: i24;
  var $p38: ref;
  var $p39: ref;
  var $i40: i8;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $p45: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i8;
  var $i51: i32;
  var $p52: ref;
  var $i53: i32;
  var $i54: i1;
  var $p55: ref;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $p60: ref;
  var $i61: i1;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $i65: i32;
  var vslice_dummy_var_75: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 243} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 244} {:cexpr "oxu_urb_dequeue:arg:status"} boogie_si_record_i32($i2);
    goto corral_source_split_950;

  corral_source_split_950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 245} $p4 := hcd_to_oxu($p0);
    goto corral_source_split_951;

  corral_source_split_951:
    assume {:verifier.code 0} true;
    call {:si_unique_call 246} ldv_spin_lock();
    goto corral_source_split_952;

  corral_source_split_952:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_953;

  corral_source_split_953:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_954;

  corral_source_split_954:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 30);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_965;

  corral_source_split_965:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_966;

  corral_source_split_966:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_967;

  corral_source_split_967:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p14);
    goto corral_source_split_968;

  corral_source_split_968:
    assume {:verifier.code 0} true;
    $i16 := $eq.i64($i15, 0);
    goto corral_source_split_969;

  corral_source_split_969:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 247} unlink_async($p4, $p14);
    goto SeqInstr_103, SeqInstr_104;

  SeqInstr_104:
    assume assertsPassed;
    goto SeqInstr_105;

  SeqInstr_105:
    goto corral_source_split_973;

  corral_source_split_973:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p4, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1021;

  corral_source_split_1021:
    assume {:verifier.code 0} true;
    call {:si_unique_call 256} spin_unlock_irqrestore($p66, $u0);
    goto corral_source_split_1022;

  corral_source_split_1022:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_1041;

  corral_source_split_1041:
    assume {:verifier.code 0} true;
    $r := $i65;
    return;

  SeqInstr_103:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i16 == 1;
    goto corral_source_split_971;

  corral_source_split_971:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_956;

  corral_source_split_956:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i11 == 1);
    goto $bb9;

  $bb10:
    assume $i11 == 1;
    goto corral_source_split_958;

  corral_source_split_958:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_959;

  corral_source_split_959:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_960;

  corral_source_split_960:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_961;

  corral_source_split_961:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p19);
    goto corral_source_split_962;

  corral_source_split_962:
    assume {:verifier.code 0} true;
    $i21 := $eq.i64($i20, 0);
    goto corral_source_split_963;

  corral_source_split_963:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_977;

  corral_source_split_977:
    assume {:verifier.code 0} true;
    $i23 := $load.i8($M.0, $p22);
    goto corral_source_split_978;

  corral_source_split_978:
    assume {:verifier.code 0} true;
    $i24 := $zext.i8.i32($i23);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i25 := $slt.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i24, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_989;

  corral_source_split_989:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p29, .str.2);
    goto corral_source_split_990;

  corral_source_split_990:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_991;

  corral_source_split_991:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p30, .str.42);
    goto corral_source_split_992;

  corral_source_split_992:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_993;

  corral_source_split_993:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p31, .str);
    goto corral_source_split_994;

  corral_source_split_994:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_995;

  corral_source_split_995:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p32, .str.43);
    goto corral_source_split_996;

  corral_source_split_996:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_997;

  corral_source_split_997:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_998;

  corral_source_split_998:
    assume {:verifier.code 0} true;
    $i35 := $load.i24($M.6, $p34);
    goto corral_source_split_999;

  corral_source_split_999:
    assume {:verifier.code 0} true;
    $i36 := $and.i24($i35, $sub.i24(0, 262144));
    goto corral_source_split_1000;

  corral_source_split_1000:
    assume {:verifier.code 0} true;
    $i37 := $or.i24($i36, 2980);
    goto corral_source_split_1001;

  corral_source_split_1001:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p34, $i37);
    goto corral_source_split_1002;

  corral_source_split_1002:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1003;

  corral_source_split_1003:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p38, 0);
    goto corral_source_split_1004;

  corral_source_split_1004:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1005;

  corral_source_split_1005:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.7, $p39);
    goto corral_source_split_1006;

  corral_source_split_1006:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i64($i40);
    goto corral_source_split_1007;

  corral_source_split_1007:
    assume {:verifier.code 0} true;
    $i42 := $and.i64($i41, 1);
    goto corral_source_split_1008;

  corral_source_split_1008:
    assume {:verifier.code 0} true;
    call {:si_unique_call 252} $i43 := ldv__builtin_expect($i42, 0);
    call {:si_unique_call 253} {:cexpr "tmp___1"} boogie_si_record_i64($i43);
    goto corral_source_split_1009;

  corral_source_split_1009:
    assume {:verifier.code 0} true;
    $i44 := $ne.i64($i43, 0);
    goto corral_source_split_1010;

  corral_source_split_1010:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb31:
    assume $i44 == 1;
    goto corral_source_split_1012;

  corral_source_split_1012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 254} $p45 := oxu_to_hcd($p4);
    goto corral_source_split_1013;

  corral_source_split_1013:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($add.ref($p45, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1014;

  corral_source_split_1014:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1015;

  corral_source_split_1015:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_1016;

  corral_source_split_1016:
    assume {:verifier.code 0} true;
    $i50 := $load.i8($M.0, $p49);
    goto corral_source_split_1017;

  corral_source_split_1017:
    assume {:verifier.code 0} true;
    $i51 := $zext.i8.i32($i50);
    goto corral_source_split_1018;

  corral_source_split_1018:
    assume {:verifier.code 0} true;
    call {:si_unique_call 255} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p3, $p48, .str.43, $p19, $i51);
    goto corral_source_split_1019;

  corral_source_split_1019:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 248} vslice_dummy_var_75 := qh_completions($p4, $p19);
    goto SeqInstr_106, SeqInstr_107;

  SeqInstr_107:
    assume assertsPassed;
    goto SeqInstr_108;

  SeqInstr_108:
    goto corral_source_split_980;

  corral_source_split_980:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p19, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_985;

  corral_source_split_985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 250} $i53 := list_empty($p52);
    call {:si_unique_call 251} {:cexpr "tmp___2"} boogie_si_record_i32($i53);
    goto corral_source_split_986;

  corral_source_split_986:
    assume {:verifier.code 0} true;
    $i54 := $eq.i32($i53, 0);
    goto corral_source_split_987;

  corral_source_split_987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    assume !($i54 == 1);
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb35:
    assume $i54 == 1;
    goto corral_source_split_1024;

  corral_source_split_1024:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_1025;

  corral_source_split_1025:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_1026;

  corral_source_split_1026:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 1);
    goto corral_source_split_1027;

  corral_source_split_1027:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_1028;

  corral_source_split_1028:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb37;

  $bb38:
    assume $i58 == 1;
    goto corral_source_split_1030;

  corral_source_split_1030:
    assume {:verifier.code 0} true;
    call {:si_unique_call 257} $i59 := qh_schedule($p4, $p19);
    goto SeqInstr_112, SeqInstr_113;

  SeqInstr_113:
    assume assertsPassed;
    goto SeqInstr_114;

  SeqInstr_114:
    call {:si_unique_call 258} {:cexpr "status___0"} boogie_si_record_i32($i59);
    goto corral_source_split_1031;

  corral_source_split_1031:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1032;

  corral_source_split_1032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 259} spin_unlock_irqrestore($p60, $u0);
    goto corral_source_split_1033;

  corral_source_split_1033:
    assume {:verifier.code 0} true;
    $i61 := $ne.i32($i59, 0);
    goto corral_source_split_1034;

  corral_source_split_1034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $i65 := $i59;
    goto $bb43;

  $bb40:
    assume $i61 == 1;
    goto corral_source_split_1036;

  corral_source_split_1036:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1037;

  corral_source_split_1037:
    assume {:verifier.code 0} true;
    $p64 := $load.ref($M.0, $p63);
    goto corral_source_split_1038;

  corral_source_split_1038:
    assume {:verifier.code 0} true;
    call {:si_unique_call 260} dev_err.ref.ref.ref.i32($p64, .str.44, $p19, $i59);
    goto corral_source_split_1039;

  corral_source_split_1039:
    assume {:verifier.code 0} true;
    goto $bb42;

  SeqInstr_112:
    assume !assertsPassed;
    return;

  SeqInstr_106:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i25 == 1;
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i24, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb26;

  $bb27:
    assume $i27 == 1;
    goto corral_source_split_982;

  corral_source_split_982:
    assume {:verifier.code 0} true;
    call {:si_unique_call 249} intr_deschedule($p4, $p19);
    goto SeqInstr_109, SeqInstr_110;

  SeqInstr_110:
    assume assertsPassed;
    goto SeqInstr_111;

  SeqInstr_111:
    goto corral_source_split_983;

  corral_source_split_983:
    assume {:verifier.code 0} true;
    goto $bb24;

  SeqInstr_109:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i21 == 1;
    goto corral_source_split_975;

  corral_source_split_975:
    assume {:verifier.code 0} true;
    goto $bb15;
}



const oxu_endpoint_disable: ref;

axiom oxu_endpoint_disable == $sub.ref(0, 230709);

procedure oxu_endpoint_disable($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.60, $M.48, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.50, $M.46, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr, $M.47, $M.58, $M.59, $M.8, $M.39, assertsPassed;



implementation oxu_endpoint_disable($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i32;
  var $i20: i1;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $i26: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i64;
  var $i34: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p36: ref;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p42: ref;
  var $p35: ref;
  var $i47: i64;
  var $i48: i1;
  var $p49: ref;
  var $p51: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $i58: i32;
  var $i59: i1;
  var $p27: ref;
  var $p25: ref;
  var $p60: ref;
  var $p50: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $p71: ref;
  var $i72: i8;
  var $i73: i32;
  var $i74: i1;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var vslice_dummy_var_76: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1043;

  corral_source_split_1043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 261} $p2 := hcd_to_oxu($p0);
    goto corral_source_split_1044;

  corral_source_split_1044:
    assume {:verifier.code 0} true;
    call {:si_unique_call 262} ldv_spin_lock();
    goto corral_source_split_1045;

  corral_source_split_1045:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1046;

  corral_source_split_1046:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_1047;

  corral_source_split_1047:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_1048;

  corral_source_split_1048:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_1049;

  corral_source_split_1049:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_1050;

  corral_source_split_1050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i7 == 1);
    goto corral_source_split_1052;

  corral_source_split_1052:
    assume {:verifier.code 0} true;
    $p8 := $p4;
    goto $bb4;

  $bb4:
    call $p8, $p9, $i10, $i11, $p12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $p22, $i23, $i26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p37, $p38, $p39, $i40, $i41, $p36, $i43, $i44, $i45, $p46, $p42, $p35, $i47, $i48, $p49, $p51, $p53, $p54, $i55, $i56, $p27, vslice_dummy_var_76 := oxu_endpoint_disable_loop_$bb4($p0, $p2, $p3, $p8, $p9, $i10, $i11, $p12, $i13, $i14, $i15, $p16, $p17, $i18, $i19, $i20, $i21, $p22, $i23, $i26, $p28, $p29, $p30, $p31, $p32, $i33, $i34, $p37, $p38, $p39, $i40, $i41, $p36, $i43, $i44, $i45, $p46, $p42, $p35, $i47, $i48, $p49, $p51, $p53, $p54, $i55, $i56, $p27, vslice_dummy_var_76);
    goto $bb4_last;

  $bb7:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_1059;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_1060;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 0);
    goto corral_source_split_1061;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_1074;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_1075;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 1);
    goto corral_source_split_1076;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_1077;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_1083;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_1084;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i32($i18);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i20 := $slt.i32($i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i19, 3);
    assume {:verifier.code 0} true;
    $p22, $i23 := $p8, $i19;
    assume true;
    goto $bb18, $bb20;

  $bb20:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 3);
    assume {:verifier.code 0} true;
    $p25 := $p22;
    assume {:branchcond $i24} true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p60 := $p25;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_1148;

  corral_source_split_1148:
    assume {:verifier.code 0} true;
    $p50 := $p60;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto corral_source_split_1124;

  corral_source_split_1124:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p50, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_1125;

  corral_source_split_1125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 269} $i62 := list_empty($p61);
    call {:si_unique_call 270} {:cexpr "tmp___2"} boogie_si_record_i32($i62);
    goto corral_source_split_1126;

  corral_source_split_1126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 271} $p63 := oxu_to_hcd($p2);
    goto corral_source_split_1127;

  corral_source_split_1127:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1128;

  corral_source_split_1128:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_1129;

  corral_source_split_1129:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_1130;

  corral_source_split_1130:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_1131;

  corral_source_split_1131:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_1132;

  corral_source_split_1132:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p50, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_1133;

  corral_source_split_1133:
    assume {:verifier.code 0} true;
    $i72 := $load.i8($M.0, $p71);
    goto corral_source_split_1134;

  corral_source_split_1134:
    assume {:verifier.code 0} true;
    $i73 := $zext.i8.i32($i72);
    goto corral_source_split_1135;

  corral_source_split_1135:
    assume {:verifier.code 0} true;
    $i74 := $ne.i32($i62, 0);
    goto corral_source_split_1136;

  corral_source_split_1136:
    assume {:verifier.code 0} true;
    $p75 := (if $i74 == 1 then .str.24 else .str.46);
    goto corral_source_split_1137;

  corral_source_split_1137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 272} dev_err.ref.ref.ref.i32.i32.ref($p66, .str.45, $p50, $i70, $i73, $p75);
    goto corral_source_split_1138;

  corral_source_split_1138:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p1, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_1145;

  corral_source_split_1145:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p76, $0.ref);
    goto corral_source_split_1146;

  corral_source_split_1146:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1056;

  corral_source_split_1056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 263} spin_unlock_irqrestore($p77, $u0);
    goto corral_source_split_1057;

  corral_source_split_1057:
    assume {:verifier.code 0} true;
    return;

  $bb21:
    assume $i24 == 1;
    goto corral_source_split_1086;

  corral_source_split_1086:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p22, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_1087;

  corral_source_split_1087:
    assume {:verifier.code 0} true;
    call {:si_unique_call 267} $i58 := list_empty($p57);
    call {:si_unique_call 268} {:cexpr "tmp___1"} boogie_si_record_i32($i58);
    goto corral_source_split_1088;

  corral_source_split_1088:
    assume {:verifier.code 0} true;
    $i59 := $ne.i32($i58, 0);
    goto corral_source_split_1089;

  corral_source_split_1089:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i59 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p60 := $p22;
    goto $bb46;

  $bb42:
    assume $i59 == 1;
    goto corral_source_split_1142;

  corral_source_split_1142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 274} qh_put($p22);
    goto SeqInstr_118, SeqInstr_119;

  SeqInstr_119:
    assume assertsPassed;
    goto SeqInstr_120;

  SeqInstr_120:
    goto corral_source_split_1143;

  corral_source_split_1143:
    assume {:verifier.code 0} true;
    goto $bb44;

  SeqInstr_118:
    assume !assertsPassed;
    return;

  $bb18:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1065;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} spin_unlock_irqrestore($p51, $u0);
    goto corral_source_split_1066;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} vslice_dummy_var_76 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_1067;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} ldv_spin_lock();
    goto corral_source_split_1068;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p3);
    goto corral_source_split_1069;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p53);
    goto corral_source_split_1070;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_1071;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_1072;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb41;

  $bb41:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $p8 := $p53;
    goto $bb41_dummy;

  $bb5:
    assume $i56 == 1;
    goto corral_source_split_1054;

  corral_source_split_1054:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb16:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i19, 1);
    assume {:verifier.code 0} true;
    $p27 := $p8;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p25 := $p27;
    goto $bb23;

  $bb24:
    assume $i26 == 1;
    goto corral_source_split_1091;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_1092;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    $p29 := $load.ref($M.0, $p28);
    goto corral_source_split_1093;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p29, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_1094;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_1095;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_1096;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    $i33 := $p2i.ref.i64($p32);
    goto corral_source_split_1097;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    $i34 := $ne.i64($i33, 0);
    goto corral_source_split_1098;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    $p35 := $p32;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i34 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p35);
    goto corral_source_split_1119;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    $i48 := $eq.i64($i47, 0);
    goto corral_source_split_1120;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    $p49 := $p8;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} unlink_async($p2, $p8);
    goto SeqInstr_115, SeqInstr_116;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  SeqInstr_117:
    goto corral_source_split_1140;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_115:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i48 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_1122;

  corral_source_split_1122:
    assume {:verifier.code 0} true;
    $p50 := $p49;
    goto $bb39;

  $bb26:
    assume $i34 == 1;
    goto corral_source_split_1100;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    $p36 := $p32;
    goto $bb29;

  $bb29:
    call $p37, $p38, $p39, $i40, $i41, $p36, $i43, $i44, $i45, $p46, $p42 := oxu_endpoint_disable_loop_$bb29($p8, $p37, $p38, $p39, $i40, $i41, $p36, $i43, $i44, $i45, $p46, $p42);
    goto $bb29_last;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p36);
    goto corral_source_split_1103;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p8);
    goto corral_source_split_1104;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i43, $i44);
    goto corral_source_split_1105;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    $p46 := $p36;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    $p35 := $p46;
    goto $bb28;

  $bb34:
    assume $i45 == 1;
    goto corral_source_split_1115;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_1107;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p37);
    goto corral_source_split_1108;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_1109;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p39);
    goto corral_source_split_1110;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_1111;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    $p42 := $p39;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1113;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    $p35 := $p42;
    goto $bb28;

  $bb32:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    $p36 := $p39;
    goto $bb32_dummy;

  $bb12:
    assume $i15 == 1;
    goto corral_source_split_1079;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_1080;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 3);
    goto corral_source_split_1081;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb8:
    assume $i11 == 1;
    goto corral_source_split_1063;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb2;

  $bb32_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1102;

  $bb41_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;
}



const oxu_hub_status_data: ref;

axiom oxu_hub_status_data == $sub.ref(0, 231741);

procedure oxu_hub_status_data($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_hub_status_data($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i8;
  var $i16: i1;
  var $i17: i32;
  var $i18: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i64;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i1;
  var $i31: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $i38: i64;
  var $i39: i64;
  var $p41: ref;
  var $i42: i64;
  var $i43: i64;
  var $i44: i1;
  var $i45: i1;
  var $i46: i8;
  var $i47: i32;
  var $i48: i32;
  var $i49: i32;
  var $i50: i8;
  var $i51: i32;
  var $i52: i32;
  var $i53: i8;
  var $p54: ref;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i8;
  var $p63: ref;
  var $i64: i32;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $i20: i32;
  var $i21: i32;
  var $i68: i32;
  var $i19: i32;
  var $p69: ref;
  var $i70: i1;
  var $i71: i32;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_1150;

  corral_source_split_1150:
    assume {:verifier.code 0} true;
    call {:si_unique_call 275} $p2 := hcd_to_oxu($p0);
    goto corral_source_split_1151;

  corral_source_split_1151:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_1152;

  corral_source_split_1152:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_1153;

  corral_source_split_1153:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 1);
    goto corral_source_split_1154;

  corral_source_split_1154:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_1155;

  corral_source_split_1155:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, 0);
    goto corral_source_split_1161;

  corral_source_split_1161:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_1162;

  corral_source_split_1162:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_1163;

  corral_source_split_1163:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 15);
    call {:si_unique_call 276} {:cexpr "ports"} boogie_si_record_i32($i10);
    goto corral_source_split_1164;

  corral_source_split_1164:
    assume {:verifier.code 0} true;
    $i11 := $sgt.i32($i10, 7);
    goto corral_source_split_1165;

  corral_source_split_1165:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_1172;

  corral_source_split_1172:
    assume {:verifier.code 0} true;
    $i15 := $M.13;
    goto corral_source_split_1173;

  corral_source_split_1173:
    assume {:verifier.code 0} true;
    $i16 := $trunc.i8.i1($i15);
    goto corral_source_split_1174;

  corral_source_split_1174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i16 == 1);
    goto corral_source_split_1176;

  corral_source_split_1176:
    assume {:verifier.code 0} true;
    $i17 := 42;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_1178;

  corral_source_split_1178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 278} ldv_spin_lock();
    goto corral_source_split_1179;

  corral_source_split_1179:
    assume {:verifier.code 0} true;
    $i18 := $slt.i32(0, $i10);
    goto corral_source_split_1180;

  corral_source_split_1180:
    assume {:verifier.code 0} true;
    $i19 := 0;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1247;

  corral_source_split_1247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 282} spin_unlock_irqrestore($p69, $u0);
    goto corral_source_split_1248;

  corral_source_split_1248:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i19, 0);
    goto corral_source_split_1249;

  corral_source_split_1249:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i70 == 1);
    goto corral_source_split_1253;

  corral_source_split_1253:
    assume {:verifier.code 0} true;
    $i71 := 0;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto corral_source_split_1255;

  corral_source_split_1255:
    assume {:verifier.code 0} true;
    $i7 := $i71;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_1159;

  corral_source_split_1159:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;

  $bb34:
    assume $i70 == 1;
    goto corral_source_split_1251;

  corral_source_split_1251:
    assume {:verifier.code 0} true;
    $i71 := $i14;
    goto $bb36;

  $bb11:
    assume $i18 == 1;
    goto corral_source_split_1182;

  corral_source_split_1182:
    assume {:verifier.code 0} true;
    $i20, $i21 := 0, 0;
    goto $bb14;

  $bb14:
    call $p22, $p23, $p24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i20, $i21, $i68 := oxu_hub_status_data_loop_$bb14($p1, $p2, $i10, $i17, $p22, $p23, $p24, $p25, $i26, $p27, $i28, $i29, $i30, $i31, $p33, $i34, $i35, $i36, $i37, $i38, $i39, $p41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $p54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $p63, $i64, $i65, $i66, $i67, $i20, $i21, $i68);
    goto $bb14_last;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1186;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_1187;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_1188;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    $p25 := $bitcast.ref.ref($p24);
    goto corral_source_split_1189;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    $i26 := $sext.i32.i64($i20);
    goto corral_source_split_1190;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($p25, $mul.ref($i26, 1));
    goto corral_source_split_1191;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} $i28 := readl($p27);
    goto SeqInstr_121, SeqInstr_122;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  SeqInstr_123:
    call {:si_unique_call 280} {:cexpr "temp"} boogie_si_record_i32($i28);
    goto corral_source_split_1192;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 1);
    goto corral_source_split_1193;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_1194;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i28, $i17);
    goto corral_source_split_1201;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1202;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  $bb21:
    assume !($i35 == 1);
    goto corral_source_split_1206;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i28, 64);
    goto corral_source_split_1207;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_1208;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i20, $i21;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    $i66 := $add.i32($i64, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32($i66);
    goto corral_source_split_1242;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    $i67 := $slt.i32($i66, $i10);
    goto corral_source_split_1243;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    $i68 := $i65;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1245;

  corral_source_split_1245:
    assume {:verifier.code 0} true;
    $i19 := $i68;
    goto $bb13;

  $bb31:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    $i20, $i21 := $i66, $i65;
    goto $bb31_dummy;

  $bb22:
    assume $i37 == 1;
    goto corral_source_split_1210;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, jiffies);
    goto corral_source_split_1211;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i20);
    goto corral_source_split_1212;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i39, 8));
    goto corral_source_split_1213;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    $i42 := $load.i64($M.0, $p41);
    goto corral_source_split_1214;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    $i43 := $sub.i64($i38, $i42);
    goto corral_source_split_1215;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    $i44 := $sge.i64($i43, 0);
    goto corral_source_split_1216;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i44 == 1);
    goto $bb24;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i45 := $sle.i32($i20, 6);
    goto corral_source_split_1204;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i45 == 1);
    goto corral_source_split_1229;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1230;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    $i55 := $load.i8($M.0, $p54);
    goto corral_source_split_1231;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    $i56 := $sext.i8.i32($i55);
    goto corral_source_split_1232;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    $i57 := $add.i32($i20, $sub.i32(0, 7));
    goto corral_source_split_1233;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    $i58 := $shl.i32(1, $i57);
    goto corral_source_split_1234;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i32.i8($i58);
    goto corral_source_split_1235;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    $i60 := $sext.i8.i32($i59);
    goto corral_source_split_1236;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    $i61 := $or.i32($i56, $i60);
    goto corral_source_split_1237;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    $i62 := $trunc.i32.i8($i61);
    goto corral_source_split_1238;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1239;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p63, $i62);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i64, $i65 := $i20, 4;
    goto $bb30;

  $bb27:
    assume $i45 == 1;
    goto corral_source_split_1218;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p1);
    goto corral_source_split_1219;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    $i47 := $sext.i8.i32($i46);
    goto corral_source_split_1220;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i20, 1);
    goto corral_source_split_1221;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    $i49 := $shl.i32(1, $i48);
    goto corral_source_split_1222;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    $i50 := $trunc.i32.i8($i49);
    goto corral_source_split_1223;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    $i51 := $sext.i8.i32($i50);
    goto corral_source_split_1224;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    $i52 := $or.i32($i47, $i51);
    goto corral_source_split_1225;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    $i53 := $trunc.i32.i8($i52);
    goto corral_source_split_1226;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p1, $i53);
    goto corral_source_split_1227;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb19:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb20;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_1196;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    $i31 := $sext.i32.i64($i20);
    goto corral_source_split_1197;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i31, 8));
    goto corral_source_split_1198;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p33, 0);
    goto corral_source_split_1199;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    goto $bb18;

  SeqInstr_121:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i17 := 10;
    goto $bb10;

  $bb5:
    assume $i11 == 1;
    goto corral_source_split_1167;

  corral_source_split_1167:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p1, $mul.ref(1, 1));
    goto corral_source_split_1168;

  corral_source_split_1168:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_1169;

  corral_source_split_1169:
    assume {:verifier.code 0} true;
    $i13 := $add.i32(1, 1);
    call {:si_unique_call 277} {:cexpr "retval"} boogie_si_record_i32($i13);
    goto corral_source_split_1170;

  corral_source_split_1170:
    assume {:verifier.code 0} true;
    $i14 := $i13;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_1157;

  corral_source_split_1157:
    assume {:verifier.code 0} true;
    $i7 := 0;
    goto $bb3;

  $bb31_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;
}



const oxu_hub_control: ref;

axiom oxu_hub_control == $sub.ref(0, 232773);

procedure oxu_hub_control($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref, $i5: i16) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.24, $M.25, $CurrAddr, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.8, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_hub_control($p0: ref, $i1: i16, $i2: i16, $i3: i16, $p4: ref, $i5: i16) returns ($r: i32)
{
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;
  var $i25: i1;
  var $i26: i1;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $i37: i1;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i52: i1;
  var $i53: i1;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i32;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $p64: ref;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i32;
  var $p73: ref;
  var $i74: i64;
  var $i75: i64;
  var $i76: i64;
  var $i77: i32;
  var $i78: i64;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i32;
  var $i84: i1;
  var $i85: i32;
  var $p86: ref;
  var $i87: i32;
  var $i88: i32;
  var $p89: ref;
  var $i90: i32;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p98: ref;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i32;
  var $i105: i16;
  var $p106: ref;
  var $i107: i32;
  var $i108: i32;
  var $i109: i1;
  var $i110: i32;
  var $i111: i32;
  var $i112: i32;
  var $i113: i1;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i1;
  var $i118: i8;
  var $i119: i1;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i125: i64;
  var $p127: ref;
  var $i128: i64;
  var $i129: i1;
  var $i130: i64;
  var $i131: i64;
  var $i132: i64;
  var $i133: i32;
  var $i134: i64;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $i139: i32;
  var $i140: i64;
  var $p142: ref;
  var $i143: i64;
  var $i148: i64;
  var $i149: i32;
  var $i150: i64;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $i155: i1;
  var $i156: i32;
  var $i157: i32;
  var $i158: i64;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $p165: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $p170: ref;
  var $p171: ref;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i32;
  var $i145: i32;
  var $i146: i32;
  var $i147: i32;
  var $i178: i32;
  var $i179: i32;
  var $i180: i32;
  var $i181: i32;
  var $i182: i1;
  var $i183: i64;
  var $i184: i32;
  var $i185: i64;
  var $p187: ref;
  var $i188: i64;
  var $i189: i64;
  var $i190: i1;
  var $i191: i32;
  var $i192: i32;
  var $i193: i64;
  var $p195: ref;
  var $i196: i32;
  var $p197: ref;
  var $p198: ref;
  var $i199: i32;
  var $i200: i1;
  var $p201: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $i208: i32;
  var $i209: i32;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $i216: i64;
  var $p217: ref;
  var $i218: i32;
  var $i219: i1;
  var $i220: i32;
  var $i221: i32;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $i229: i24;
  var $i230: i24;
  var $i231: i24;
  var $p232: ref;
  var $p233: ref;
  var $i234: i8;
  var $i235: i64;
  var $i236: i64;
  var $i237: i64;
  var $i238: i1;
  var $p239: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i32;
  var $i244: i32;
  var $p245: ref;
  var $i246: i32;
  var $i247: i32;
  var $i248: i32;
  var $i249: i32;
  var $i250: i1;
  var $i251: i32;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i32;
  var $i256: i1;
  var $i257: i32;
  var $i258: i32;
  var $i259: i32;
  var $i260: i1;
  var $i261: i32;
  var $i262: i32;
  var $i263: i32;
  var $i264: i1;
  var $i265: i32;
  var $i266: i32;
  var $i267: i32;
  var $i268: i1;
  var $i269: i32;
  var $i270: i32;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i32;
  var $i275: i32;
  var $i276: i1;
  var $p277: ref;
  var $i278: i32;
  var $i279: i32;
  var $p281: ref;
  var $p282: ref;
  var $p283: ref;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i24;
  var $i288: i24;
  var $i289: i24;
  var $p290: ref;
  var $p291: ref;
  var $i292: i8;
  var $i293: i64;
  var $i294: i64;
  var $i295: i64;
  var $i296: i1;
  var $p297: ref;
  var $p299: ref;
  var $p300: ref;
  var $p301: ref;
  var $i302: i32;
  var $i303: i1;
  var $i304: i1;
  var $i305: i1;
  var $i306: i32;
  var $i307: i32;
  var $i308: i32;
  var $i309: i32;
  var $i310: i16;
  var $i311: i32;
  var $i312: i1;
  var $i313: i32;
  var $i314: i1;
  var $i315: i32;
  var $i316: i32;
  var $i317: i16;
  var $p318: ref;
  var $i319: i32;
  var $i320: i32;
  var $i321: i1;
  var $i322: i32;
  var $i323: i32;
  var $i324: i1;
  var $i325: i1;
  var $i326: i1;
  var $i327: i1;
  var $i328: i1;
  var $i329: i1;
  var $i330: i1;
  var $i331: i32;
  var $i332: i1;
  var $i333: i32;
  var $i334: i1;
  var $p336: ref;
  var $p337: ref;
  var $p338: ref;
  var $i339: i1;
  var $i340: i8;
  var $i341: i1;
  var $i342: i32;
  var $i343: i32;
  var $i344: i32;
  var $p345: ref;
  var $p346: ref;
  var $i347: i32;
  var $i348: i32;
  var $i349: i1;
  var $i350: i32;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $i354: i32;
  var $i355: i32;
  var $i356: i64;
  var $i357: i64;
  var $i358: i64;
  var $i359: i32;
  var $i360: i64;
  var $p362: ref;
  var $p363: ref;
  var $i364: i1;
  var $i365: i1;
  var $i367: i32;
  var $i368: i32;
  var $p369: ref;
  var $p370: ref;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $i38: i32;
  var $p375: ref;
  var cmdloc_dummy_var_6: [ref]i8;
  var cmdloc_dummy_var_7: [ref]i8;
  var vslice_dummy_var_77: i32;
  var vslice_dummy_var_78: i32;
  var vslice_dummy_var_79: i32;
  var vslice_dummy_var_80: i32;
  var vslice_dummy_var_81: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 283} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 284} $p7 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 285} $p8 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 286} {:cexpr "oxu_hub_control:arg:typeReq"} boogie_si_record_i16($i1);
    call {:si_unique_call 287} {:cexpr "oxu_hub_control:arg:wValue"} boogie_si_record_i16($i2);
    call {:si_unique_call 288} {:cexpr "oxu_hub_control:arg:wIndex"} boogie_si_record_i16($i3);
    call {:si_unique_call 289} {:cexpr "oxu_hub_control:arg:wLength"} boogie_si_record_i16($i5);
    goto corral_source_split_1257;

  corral_source_split_1257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 290} $p9 := hcd_to_oxu($p0);
    goto corral_source_split_1258;

  corral_source_split_1258:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_1259;

  corral_source_split_1259:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.0, $p10);
    goto corral_source_split_1260;

  corral_source_split_1260:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 15);
    call {:si_unique_call 291} {:cexpr "ports"} boogie_si_record_i32($i12);
    goto corral_source_split_1261;

  corral_source_split_1261:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1262;

  corral_source_split_1262:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_1263;

  corral_source_split_1263:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_1264;

  corral_source_split_1264:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_1265;

  corral_source_split_1265:
    assume {:verifier.code 0} true;
    $i17 := $zext.i16.i64($i3);
    goto corral_source_split_1266;

  corral_source_split_1266:
    assume {:verifier.code 0} true;
    $i18 := $add.i64($i17, $sub.i64(0, 1));
    goto corral_source_split_1267;

  corral_source_split_1267:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($p16, $mul.ref($i18, 4));
    goto corral_source_split_1268;

  corral_source_split_1268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 292} ldv_spin_lock();
    goto corral_source_split_1269;

  corral_source_split_1269:
    assume {:verifier.code 0} true;
    $i20 := $zext.i16.i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i21 := $slt.i32($i20, 8963);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    $i22 := $slt.i32($i20, 40966);
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    $i23 := $slt.i32($i20, 41728);
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i20, 41728);
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb218;

  $bb218:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb219;

  $bb219:
    assume {:verifier.code 0} true;
    $i38 := $sub.i32(0, 32);
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_1301;

  corral_source_split_1301:
    assume {:verifier.code 0} true;
    $p375 := $add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1302;

  corral_source_split_1302:
    assume {:verifier.code 0} true;
    call {:si_unique_call 297} spin_unlock_irqrestore($p375, $u0);
    goto corral_source_split_1303;

  corral_source_split_1303:
    assume {:verifier.code 0} true;
    $r := $i38;
    return;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_1271;

  corral_source_split_1271:
    assume {:verifier.code 0} true;
    $i99 := $zext.i16.i32($i3);
    goto corral_source_split_1272;

  corral_source_split_1272:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_1273;

  corral_source_split_1273:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb86, $bb88;

  $bb88:
    assume !($i100 == 1);
    goto corral_source_split_1386;

  corral_source_split_1386:
    assume {:verifier.code 0} true;
    $i101 := $zext.i16.i32($i3);
    goto corral_source_split_1387;

  corral_source_split_1387:
    assume {:verifier.code 0} true;
    $i102 := $sgt.i32($i101, $i12);
    goto corral_source_split_1388;

  corral_source_split_1388:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $i103 := $zext.i16.i32($i3);
    goto corral_source_split_1390;

  corral_source_split_1390:
    assume {:verifier.code 0} true;
    $i104 := $sub.i32($i103, 1);
    goto corral_source_split_1391;

  corral_source_split_1391:
    assume {:verifier.code 0} true;
    $i105 := $trunc.i32.i16($i104);
    call {:si_unique_call 311} {:cexpr "wIndex"} boogie_si_record_i16($i105);
    goto corral_source_split_1392;

  corral_source_split_1392:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p19);
    goto corral_source_split_1393;

  corral_source_split_1393:
    assume {:verifier.code 0} true;
    call {:si_unique_call 312} $i107 := readl($p106);
    goto SeqInstr_130, SeqInstr_131;

  SeqInstr_131:
    assume assertsPassed;
    goto SeqInstr_132;

  SeqInstr_132:
    call {:si_unique_call 313} {:cexpr "temp"} boogie_si_record_i32($i107);
    goto corral_source_split_1394;

  corral_source_split_1394:
    assume {:verifier.code 0} true;
    $i108 := $and.i32($i107, 2);
    goto corral_source_split_1395;

  corral_source_split_1395:
    assume {:verifier.code 0} true;
    $i109 := $ne.i32($i108, 0);
    goto corral_source_split_1396;

  corral_source_split_1396:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb92, $bb93;

  $bb93:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    $i111 := 0;
    goto $bb94;

  $bb94:
    assume {:verifier.code 0} true;
    goto corral_source_split_1401;

  corral_source_split_1401:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i107, 8);
    goto corral_source_split_1402;

  corral_source_split_1402:
    assume {:verifier.code 0} true;
    $i113 := $ne.i32($i112, 0);
    goto corral_source_split_1403;

  corral_source_split_1403:
    assume {:verifier.code 0} true;
    assume {:branchcond $i113} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    $i115 := $i111;
    goto $bb97;

  $bb97:
    assume {:verifier.code 0} true;
    goto corral_source_split_1408;

  corral_source_split_1408:
    assume {:verifier.code 0} true;
    $i116 := $and.i32($i107, 32);
    goto corral_source_split_1409;

  corral_source_split_1409:
    assume {:verifier.code 0} true;
    $i117 := $ne.i32($i116, 0);
    goto corral_source_split_1410;

  corral_source_split_1410:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb98, $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    assume !($i117 == 1);
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $i121 := $i115;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto corral_source_split_1419;

  corral_source_split_1419:
    assume {:verifier.code 0} true;
    $i122 := $and.i32($i107, 64);
    goto corral_source_split_1420;

  corral_source_split_1420:
    assume {:verifier.code 0} true;
    $i123 := $ne.i32($i122, 0);
    goto corral_source_split_1421;

  corral_source_split_1421:
    assume {:verifier.code 0} true;
    assume {:branchcond $i123} true;
    goto $bb104, $bb105;

  $bb105:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    $i178, $i179, $i180 := $i107, $i121, 0;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1482;

  corral_source_split_1482:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i178, 256);
    goto corral_source_split_1483;

  corral_source_split_1483:
    assume {:verifier.code 0} true;
    $i182 := $ne.i32($i181, 0);
    goto corral_source_split_1484;

  corral_source_split_1484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb116, $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    assume !($i182 == 1);
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    $i211, $i212, $i213 := $i178, $i179, $i180;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1521;

  corral_source_split_1521:
    assume {:verifier.code 0} true;
    $i214 := $and.i32($i211, 1);
    goto corral_source_split_1522;

  corral_source_split_1522:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_1523;

  corral_source_split_1523:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    $i248 := $i211;
    goto $bb133;

  $bb133:
    assume {:verifier.code 0} true;
    goto corral_source_split_1572;

  corral_source_split_1572:
    assume {:verifier.code 0} true;
    $i249 := $and.i32($i248, 1);
    goto corral_source_split_1573;

  corral_source_split_1573:
    assume {:verifier.code 0} true;
    $i250 := $ne.i32($i249, 0);
    goto corral_source_split_1574;

  corral_source_split_1574:
    assume {:verifier.code 0} true;
    assume {:branchcond $i250} true;
    goto $bb134, $bb135;

  $bb135:
    assume !($i250 == 1);
    assume {:verifier.code 0} true;
    $i254 := $i212;
    goto $bb136;

  $bb136:
    assume {:verifier.code 0} true;
    goto corral_source_split_1581;

  corral_source_split_1581:
    assume {:verifier.code 0} true;
    $i255 := $and.i32($i248, 4);
    goto corral_source_split_1582;

  corral_source_split_1582:
    assume {:verifier.code 0} true;
    $i256 := $ne.i32($i255, 0);
    goto corral_source_split_1583;

  corral_source_split_1583:
    assume {:verifier.code 0} true;
    assume {:branchcond $i256} true;
    goto $bb137, $bb138;

  $bb138:
    assume !($i256 == 1);
    assume {:verifier.code 0} true;
    $i258 := $i254;
    goto $bb139;

  $bb139:
    assume {:verifier.code 0} true;
    goto corral_source_split_1588;

  corral_source_split_1588:
    assume {:verifier.code 0} true;
    $i259 := $and.i32($i248, 192);
    goto corral_source_split_1589;

  corral_source_split_1589:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i259, 0);
    goto corral_source_split_1590;

  corral_source_split_1590:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb140, $bb141;

  $bb141:
    assume !($i260 == 1);
    assume {:verifier.code 0} true;
    $i262 := $i258;
    goto $bb142;

  $bb142:
    assume {:verifier.code 0} true;
    goto corral_source_split_1595;

  corral_source_split_1595:
    assume {:verifier.code 0} true;
    $i263 := $and.i32($i248, 16);
    goto corral_source_split_1596;

  corral_source_split_1596:
    assume {:verifier.code 0} true;
    $i264 := $ne.i32($i263, 0);
    goto corral_source_split_1597;

  corral_source_split_1597:
    assume {:verifier.code 0} true;
    assume {:branchcond $i264} true;
    goto $bb143, $bb144;

  $bb144:
    assume !($i264 == 1);
    assume {:verifier.code 0} true;
    $i266 := $i262;
    goto $bb145;

  $bb145:
    assume {:verifier.code 0} true;
    goto corral_source_split_1602;

  corral_source_split_1602:
    assume {:verifier.code 0} true;
    $i267 := $and.i32($i248, 256);
    goto corral_source_split_1603;

  corral_source_split_1603:
    assume {:verifier.code 0} true;
    $i268 := $ne.i32($i267, 0);
    goto corral_source_split_1604;

  corral_source_split_1604:
    assume {:verifier.code 0} true;
    assume {:branchcond $i268} true;
    goto $bb146, $bb147;

  $bb147:
    assume !($i268 == 1);
    assume {:verifier.code 0} true;
    $i270 := $i266;
    goto $bb148;

  $bb148:
    assume {:verifier.code 0} true;
    goto corral_source_split_1609;

  corral_source_split_1609:
    assume {:verifier.code 0} true;
    $i271 := $and.i32($i248, 4096);
    goto corral_source_split_1610;

  corral_source_split_1610:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_1611;

  corral_source_split_1611:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb149, $bb150;

  $bb150:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    $i274 := $i270;
    goto $bb151;

  $bb151:
    assume {:verifier.code 0} true;
    goto corral_source_split_1616;

  corral_source_split_1616:
    assume {:verifier.code 0} true;
    $i275 := $and.i32($i274, $sub.i32(0, 65536));
    goto corral_source_split_1617;

  corral_source_split_1617:
    assume {:verifier.code 0} true;
    $i276 := $ne.i32($i275, 0);
    goto corral_source_split_1618;

  corral_source_split_1618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb152, $bb153;

  $bb153:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 365} put_unaligned_le32($i274, $p4);
    goto corral_source_split_1655;

  corral_source_split_1655:
    assume {:verifier.code 0} true;
    goto $bb158;

  $bb158:
    assume {:verifier.code 0} true;
    $i38 := $i213;
    goto $bb41;

  $bb152:
    assume $i276 == 1;
    goto corral_source_split_1620;

  corral_source_split_1620:
    assume {:verifier.code 0} true;
    $p277 := $bitcast.ref.ref($p7);
    goto corral_source_split_1621;

  corral_source_split_1621:
    assume {:verifier.code 0} true;
    $i278 := $zext.i16.i32($i105);
    goto corral_source_split_1622;

  corral_source_split_1622:
    assume {:verifier.code 0} true;
    $i279 := $add.i32($i278, 1);
    goto corral_source_split_1623;

  corral_source_split_1623:
    assume {:verifier.code 0} true;
    call {:si_unique_call 360} vslice_dummy_var_79 := dbg_port_buf($p277, 80, .str.93, $i279, $i248);
    goto corral_source_split_1624;

  corral_source_split_1624:
    assume {:verifier.code 0} true;
    $p281 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1625;

  corral_source_split_1625:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p281, .str.2);
    goto corral_source_split_1626;

  corral_source_split_1626:
    assume {:verifier.code 0} true;
    $p282 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1627;

  corral_source_split_1627:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p282, .str.91);
    goto corral_source_split_1628;

  corral_source_split_1628:
    assume {:verifier.code 0} true;
    $p283 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1629;

  corral_source_split_1629:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p283, .str);
    goto corral_source_split_1630;

  corral_source_split_1630:
    assume {:verifier.code 0} true;
    $p284 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1631;

  corral_source_split_1631:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p284, .str.20);
    goto corral_source_split_1632;

  corral_source_split_1632:
    assume {:verifier.code 0} true;
    $p285 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1633;

  corral_source_split_1633:
    assume {:verifier.code 0} true;
    $p286 := $bitcast.ref.ref($p285);
    goto corral_source_split_1634;

  corral_source_split_1634:
    assume {:verifier.code 0} true;
    $i287 := $load.i24($M.6, $p286);
    goto corral_source_split_1635;

  corral_source_split_1635:
    assume {:verifier.code 0} true;
    $i288 := $and.i24($i287, $sub.i24(0, 262144));
    goto corral_source_split_1636;

  corral_source_split_1636:
    assume {:verifier.code 0} true;
    $i289 := $or.i24($i288, 3362);
    goto corral_source_split_1637;

  corral_source_split_1637:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p286, $i289);
    goto corral_source_split_1638;

  corral_source_split_1638:
    assume {:verifier.code 0} true;
    $p290 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1639;

  corral_source_split_1639:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p290, 0);
    goto corral_source_split_1640;

  corral_source_split_1640:
    assume {:verifier.code 0} true;
    $p291 := $add.ref($add.ref($p8, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1641;

  corral_source_split_1641:
    assume {:verifier.code 0} true;
    $i292 := $load.i8($M.7, $p291);
    goto corral_source_split_1642;

  corral_source_split_1642:
    assume {:verifier.code 0} true;
    $i293 := $zext.i8.i64($i292);
    goto corral_source_split_1643;

  corral_source_split_1643:
    assume {:verifier.code 0} true;
    $i294 := $and.i64($i293, 1);
    goto corral_source_split_1644;

  corral_source_split_1644:
    assume {:verifier.code 0} true;
    call {:si_unique_call 361} $i295 := ldv__builtin_expect($i294, 0);
    call {:si_unique_call 362} {:cexpr "tmp___12"} boogie_si_record_i64($i295);
    goto corral_source_split_1645;

  corral_source_split_1645:
    assume {:verifier.code 0} true;
    $i296 := $ne.i64($i295, 0);
    goto corral_source_split_1646;

  corral_source_split_1646:
    assume {:verifier.code 0} true;
    assume {:branchcond $i296} true;
    goto $bb154, $bb155;

  $bb155:
    assume !($i296 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb154:
    assume $i296 == 1;
    goto corral_source_split_1648;

  corral_source_split_1648:
    assume {:verifier.code 0} true;
    call {:si_unique_call 363} $p297 := oxu_to_hcd($p9);
    goto corral_source_split_1649;

  corral_source_split_1649:
    assume {:verifier.code 0} true;
    $p299 := $add.ref($add.ref($add.ref($p297, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1650;

  corral_source_split_1650:
    assume {:verifier.code 0} true;
    $p300 := $load.ref($M.19, $p299);
    goto corral_source_split_1651;

  corral_source_split_1651:
    assume {:verifier.code 0} true;
    $p301 := $bitcast.ref.ref($p7);
    goto corral_source_split_1652;

  corral_source_split_1652:
    assume {:verifier.code 0} true;
    call {:si_unique_call 364} __dynamic_dev_dbg.ref.ref.ref.ref($p8, $p300, .str.20, $p301);
    goto corral_source_split_1653;

  corral_source_split_1653:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb149:
    assume $i272 == 1;
    goto corral_source_split_1613;

  corral_source_split_1613:
    assume {:verifier.code 0} true;
    $i273 := $or.i32($i270, 256);
    call {:si_unique_call 359} {:cexpr "status"} boogie_si_record_i32($i273);
    goto corral_source_split_1614;

  corral_source_split_1614:
    assume {:verifier.code 0} true;
    $i274 := $i273;
    goto $bb151;

  $bb146:
    assume $i268 == 1;
    goto corral_source_split_1606;

  corral_source_split_1606:
    assume {:verifier.code 0} true;
    $i269 := $or.i32($i266, 16);
    call {:si_unique_call 358} {:cexpr "status"} boogie_si_record_i32($i269);
    goto corral_source_split_1607;

  corral_source_split_1607:
    assume {:verifier.code 0} true;
    $i270 := $i269;
    goto $bb148;

  $bb143:
    assume $i264 == 1;
    goto corral_source_split_1599;

  corral_source_split_1599:
    assume {:verifier.code 0} true;
    $i265 := $or.i32($i262, 8);
    call {:si_unique_call 357} {:cexpr "status"} boogie_si_record_i32($i265);
    goto corral_source_split_1600;

  corral_source_split_1600:
    assume {:verifier.code 0} true;
    $i266 := $i265;
    goto $bb145;

  $bb140:
    assume $i260 == 1;
    goto corral_source_split_1592;

  corral_source_split_1592:
    assume {:verifier.code 0} true;
    $i261 := $or.i32($i258, 4);
    call {:si_unique_call 356} {:cexpr "status"} boogie_si_record_i32($i261);
    goto corral_source_split_1593;

  corral_source_split_1593:
    assume {:verifier.code 0} true;
    $i262 := $i261;
    goto $bb142;

  $bb137:
    assume $i256 == 1;
    goto corral_source_split_1585;

  corral_source_split_1585:
    assume {:verifier.code 0} true;
    $i257 := $or.i32($i254, 2);
    call {:si_unique_call 355} {:cexpr "status"} boogie_si_record_i32($i257);
    goto corral_source_split_1586;

  corral_source_split_1586:
    assume {:verifier.code 0} true;
    $i258 := $i257;
    goto $bb139;

  $bb134:
    assume $i250 == 1;
    goto corral_source_split_1576;

  corral_source_split_1576:
    assume {:verifier.code 0} true;
    $i251 := $or.i32($i212, 1);
    call {:si_unique_call 351} {:cexpr "status"} boogie_si_record_i32($i251);
    goto corral_source_split_1577;

  corral_source_split_1577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 352} $i252 := oxu_port_speed($p9, $i248);
    call {:si_unique_call 353} {:cexpr "tmp___10"} boogie_si_record_i32($i252);
    goto corral_source_split_1578;

  corral_source_split_1578:
    assume {:verifier.code 0} true;
    $i253 := $or.i32($i252, $i251);
    call {:si_unique_call 354} {:cexpr "status"} boogie_si_record_i32($i253);
    goto corral_source_split_1579;

  corral_source_split_1579:
    assume {:verifier.code 0} true;
    $i254 := $i253;
    goto $bb136;

  $bb125:
    assume $i215 == 1;
    goto corral_source_split_1525;

  corral_source_split_1525:
    assume {:verifier.code 0} true;
    $i216 := $zext.i16.i64($i105);
    goto corral_source_split_1526;

  corral_source_split_1526:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(568, 1));
    goto corral_source_split_1527;

  corral_source_split_1527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 340} $i218 := variable_test_bit($i216, $p217);
    call {:si_unique_call 341} {:cexpr "tmp___9"} boogie_si_record_i32($i218);
    goto corral_source_split_1528;

  corral_source_split_1528:
    assume {:verifier.code 0} true;
    $i219 := $ne.i32($i218, 0);
    goto corral_source_split_1529;

  corral_source_split_1529:
    assume {:verifier.code 0} true;
    assume {:branchcond $i219} true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i219 == 1);
    assume {:verifier.code 0} true;
    $i247 := $i211;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    goto corral_source_split_1570;

  corral_source_split_1570:
    assume {:verifier.code 0} true;
    $i248 := $i247;
    goto $bb133;

  $bb127:
    assume $i219 == 1;
    goto corral_source_split_1531;

  corral_source_split_1531:
    assume {:verifier.code 0} true;
    $i220 := $and.i32($i211, $sub.i32(0, 43));
    call {:si_unique_call 342} {:cexpr "temp"} boogie_si_record_i32($i220);
    goto corral_source_split_1532;

  corral_source_split_1532:
    assume {:verifier.code 0} true;
    $i221 := $or.i32($i220, 8192);
    call {:si_unique_call 343} {:cexpr "temp"} boogie_si_record_i32($i221);
    goto corral_source_split_1533;

  corral_source_split_1533:
    assume {:verifier.code 0} true;
    $p222 := $bitcast.ref.ref($p19);
    goto corral_source_split_1534;

  corral_source_split_1534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 344} writel($i221, $p222);
    goto corral_source_split_1535;

  corral_source_split_1535:
    assume {:verifier.code 0} true;
    $p223 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1536;

  corral_source_split_1536:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p223, .str.2);
    goto corral_source_split_1537;

  corral_source_split_1537:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1538;

  corral_source_split_1538:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p224, .str.91);
    goto corral_source_split_1539;

  corral_source_split_1539:
    assume {:verifier.code 0} true;
    $p225 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1540;

  corral_source_split_1540:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p225, .str);
    goto corral_source_split_1541;

  corral_source_split_1541:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1542;

  corral_source_split_1542:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p226, .str.92);
    goto corral_source_split_1543;

  corral_source_split_1543:
    assume {:verifier.code 0} true;
    $p227 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1544;

  corral_source_split_1544:
    assume {:verifier.code 0} true;
    $p228 := $bitcast.ref.ref($p227);
    goto corral_source_split_1545;

  corral_source_split_1545:
    assume {:verifier.code 0} true;
    $i229 := $load.i24($M.6, $p228);
    goto corral_source_split_1546;

  corral_source_split_1546:
    assume {:verifier.code 0} true;
    $i230 := $and.i24($i229, $sub.i24(0, 262144));
    goto corral_source_split_1547;

  corral_source_split_1547:
    assume {:verifier.code 0} true;
    $i231 := $or.i24($i230, 3333);
    goto corral_source_split_1548;

  corral_source_split_1548:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p228, $i231);
    goto corral_source_split_1549;

  corral_source_split_1549:
    assume {:verifier.code 0} true;
    $p232 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1550;

  corral_source_split_1550:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p232, 0);
    goto corral_source_split_1551;

  corral_source_split_1551:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1552;

  corral_source_split_1552:
    assume {:verifier.code 0} true;
    $i234 := $load.i8($M.7, $p233);
    goto corral_source_split_1553;

  corral_source_split_1553:
    assume {:verifier.code 0} true;
    $i235 := $zext.i8.i64($i234);
    goto corral_source_split_1554;

  corral_source_split_1554:
    assume {:verifier.code 0} true;
    $i236 := $and.i64($i235, 1);
    goto corral_source_split_1555;

  corral_source_split_1555:
    assume {:verifier.code 0} true;
    call {:si_unique_call 345} $i237 := ldv__builtin_expect($i236, 0);
    call {:si_unique_call 346} {:cexpr "tmp___8"} boogie_si_record_i64($i237);
    goto corral_source_split_1556;

  corral_source_split_1556:
    assume {:verifier.code 0} true;
    $i238 := $ne.i64($i237, 0);
    goto corral_source_split_1557;

  corral_source_split_1557:
    assume {:verifier.code 0} true;
    assume {:branchcond $i238} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i238 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    $p245 := $bitcast.ref.ref($p19);
    goto corral_source_split_1567;

  corral_source_split_1567:
    assume {:verifier.code 0} true;
    call {:si_unique_call 349} $i246 := readl($p245);
    goto SeqInstr_145, SeqInstr_146;

  SeqInstr_146:
    assume assertsPassed;
    goto SeqInstr_147;

  SeqInstr_147:
    call {:si_unique_call 350} {:cexpr "temp"} boogie_si_record_i32($i246);
    goto corral_source_split_1568;

  corral_source_split_1568:
    assume {:verifier.code 0} true;
    $i247 := $i246;
    goto $bb132;

  SeqInstr_145:
    assume !assertsPassed;
    return;

  $bb129:
    assume $i238 == 1;
    goto corral_source_split_1559;

  corral_source_split_1559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 347} $p239 := oxu_to_hcd($p9);
    goto corral_source_split_1560;

  corral_source_split_1560:
    assume {:verifier.code 0} true;
    $p241 := $add.ref($add.ref($add.ref($p239, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1561;

  corral_source_split_1561:
    assume {:verifier.code 0} true;
    $p242 := $load.ref($M.18, $p241);
    goto corral_source_split_1562;

  corral_source_split_1562:
    assume {:verifier.code 0} true;
    $i243 := $zext.i16.i32($i105);
    goto corral_source_split_1563;

  corral_source_split_1563:
    assume {:verifier.code 0} true;
    $i244 := $add.i32($i243, 1);
    goto corral_source_split_1564;

  corral_source_split_1564:
    assume {:verifier.code 0} true;
    call {:si_unique_call 348} __dynamic_dev_dbg.ref.ref.ref.i32($p6, $p242, .str.92, $i244);
    goto corral_source_split_1565;

  corral_source_split_1565:
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb116:
    assume $i182 == 1;
    goto corral_source_split_1486;

  corral_source_split_1486:
    assume {:verifier.code 0} true;
    $i183 := $load.i64($M.0, jiffies);
    goto corral_source_split_1487;

  corral_source_split_1487:
    assume {:verifier.code 0} true;
    $i184 := $zext.i16.i32($i105);
    goto corral_source_split_1488;

  corral_source_split_1488:
    assume {:verifier.code 0} true;
    $i185 := $sext.i32.i64($i184);
    goto corral_source_split_1489;

  corral_source_split_1489:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i185, 8));
    goto corral_source_split_1490;

  corral_source_split_1490:
    assume {:verifier.code 0} true;
    $i188 := $load.i64($M.0, $p187);
    goto corral_source_split_1491;

  corral_source_split_1491:
    assume {:verifier.code 0} true;
    $i189 := $sub.i64($i183, $i188);
    goto corral_source_split_1492;

  corral_source_split_1492:
    assume {:verifier.code 0} true;
    $i190 := $sge.i64($i189, 0);
    goto corral_source_split_1493;

  corral_source_split_1493:
    assume {:verifier.code 0} true;
    assume {:branchcond $i190} true;
    goto $bb119, $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    assume !($i190 == 1);
    goto $bb118;

  $bb119:
    assume $i190 == 1;
    goto corral_source_split_1495;

  corral_source_split_1495:
    assume {:verifier.code 0} true;
    $i191 := $or.i32($i179, 1048576);
    call {:si_unique_call 330} {:cexpr "status"} boogie_si_record_i32($i191);
    goto corral_source_split_1496;

  corral_source_split_1496:
    assume {:verifier.code 0} true;
    $i192 := $zext.i16.i32($i105);
    goto corral_source_split_1497;

  corral_source_split_1497:
    assume {:verifier.code 0} true;
    $i193 := $sext.i32.i64($i192);
    goto corral_source_split_1498;

  corral_source_split_1498:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i193, 8));
    goto corral_source_split_1499;

  corral_source_split_1499:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p195, 0);
    goto corral_source_split_1500;

  corral_source_split_1500:
    assume {:verifier.code 0} true;
    $i196 := $and.i32($i178, $sub.i32(0, 299));
    goto corral_source_split_1501;

  corral_source_split_1501:
    assume {:verifier.code 0} true;
    $p197 := $bitcast.ref.ref($p19);
    goto corral_source_split_1502;

  corral_source_split_1502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 331} writel($i196, $p197);
    goto corral_source_split_1503;

  corral_source_split_1503:
    assume {:verifier.code 0} true;
    $p198 := $bitcast.ref.ref($p19);
    goto corral_source_split_1504;

  corral_source_split_1504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 332} $i199 := handshake($p9, $p198, 256, 0, 750);
    goto SeqInstr_139, SeqInstr_140;

  SeqInstr_140:
    assume assertsPassed;
    goto SeqInstr_141;

  SeqInstr_141:
    call {:si_unique_call 333} {:cexpr "retval"} boogie_si_record_i32($i199);
    goto corral_source_split_1505;

  corral_source_split_1505:
    assume {:verifier.code 0} true;
    $i200 := $ne.i32($i199, 0);
    goto corral_source_split_1506;

  corral_source_split_1506:
    assume {:verifier.code 0} true;
    assume {:branchcond $i200} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i200 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $p207 := $bitcast.ref.ref($p19);
    goto corral_source_split_1516;

  corral_source_split_1516:
    assume {:verifier.code 0} true;
    call {:si_unique_call 336} $i208 := readl($p207);
    goto SeqInstr_142, SeqInstr_143;

  SeqInstr_143:
    assume assertsPassed;
    goto SeqInstr_144;

  SeqInstr_144:
    call {:si_unique_call 337} {:cexpr "tmp___5"} boogie_si_record_i32($i208);
    goto corral_source_split_1517;

  corral_source_split_1517:
    assume {:verifier.code 0} true;
    $i209 := $zext.i16.i32($i105);
    goto corral_source_split_1518;

  corral_source_split_1518:
    assume {:verifier.code 0} true;
    call {:si_unique_call 338} $i210 := check_reset_complete($p9, $i209, $p19, $i208);
    call {:si_unique_call 339} {:cexpr "tmp___6"} boogie_si_record_i32($i210);
    goto corral_source_split_1519;

  corral_source_split_1519:
    assume {:verifier.code 0} true;
    $i211, $i212, $i213 := $i210, $i191, $i199;
    goto $bb124;

  SeqInstr_142:
    assume !assertsPassed;
    return;

  $bb121:
    assume $i200 == 1;
    goto corral_source_split_1508;

  corral_source_split_1508:
    assume {:verifier.code 0} true;
    call {:si_unique_call 334} $p201 := oxu_to_hcd($p9);
    goto corral_source_split_1509;

  corral_source_split_1509:
    assume {:verifier.code 0} true;
    $p203 := $add.ref($add.ref($add.ref($p201, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1510;

  corral_source_split_1510:
    assume {:verifier.code 0} true;
    $p204 := $load.ref($M.17, $p203);
    goto corral_source_split_1511;

  corral_source_split_1511:
    assume {:verifier.code 0} true;
    $i205 := $zext.i16.i32($i105);
    goto corral_source_split_1512;

  corral_source_split_1512:
    assume {:verifier.code 0} true;
    $i206 := $add.i32($i205, 1);
    goto corral_source_split_1513;

  corral_source_split_1513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 335} dev_err.ref.ref.i32.i32($p204, .str.90, $i206, $i199);
    goto corral_source_split_1514;

  corral_source_split_1514:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_139:
    assume !assertsPassed;
    return;

  $bb104:
    assume $i123 == 1;
    goto corral_source_split_1423;

  corral_source_split_1423:
    assume {:verifier.code 0} true;
    $i124 := $zext.i16.i32($i105);
    goto corral_source_split_1424;

  corral_source_split_1424:
    assume {:verifier.code 0} true;
    $i125 := $sext.i32.i64($i124);
    goto corral_source_split_1425;

  corral_source_split_1425:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i125, 8));
    goto corral_source_split_1426;

  corral_source_split_1426:
    assume {:verifier.code 0} true;
    $i128 := $load.i64($M.0, $p127);
    goto corral_source_split_1427;

  corral_source_split_1427:
    assume {:verifier.code 0} true;
    $i129 := $eq.i64($i128, 0);
    goto corral_source_split_1428;

  corral_source_split_1428:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i129 == 1);
    goto corral_source_split_1446;

  corral_source_split_1446:
    assume {:verifier.code 0} true;
    $i148 := $load.i64($M.0, jiffies);
    goto corral_source_split_1447;

  corral_source_split_1447:
    assume {:verifier.code 0} true;
    $i149 := $zext.i16.i32($i105);
    goto corral_source_split_1448;

  corral_source_split_1448:
    assume {:verifier.code 0} true;
    $i150 := $sext.i32.i64($i149);
    goto corral_source_split_1449;

  corral_source_split_1449:
    assume {:verifier.code 0} true;
    $p152 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i150, 8));
    goto corral_source_split_1450;

  corral_source_split_1450:
    assume {:verifier.code 0} true;
    $i153 := $load.i64($M.0, $p152);
    goto corral_source_split_1451;

  corral_source_split_1451:
    assume {:verifier.code 0} true;
    $i154 := $sub.i64($i148, $i153);
    goto corral_source_split_1452;

  corral_source_split_1452:
    assume {:verifier.code 0} true;
    $i155 := $sge.i64($i154, 0);
    goto corral_source_split_1453;

  corral_source_split_1453:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    $i175, $i176, $i177 := $i107, $i121, 0;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i145, $i146, $i147 := $i175, $i176, $i177;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1455;

  corral_source_split_1455:
    assume {:verifier.code 0} true;
    $i178, $i179, $i180 := $i145, $i146, $i147;
    goto $bb115;

  $bb109:
    assume $i155 == 1;
    goto corral_source_split_1457;

  corral_source_split_1457:
    assume {:verifier.code 0} true;
    $i156 := $or.i32($i121, 262144);
    call {:si_unique_call 321} {:cexpr "status"} boogie_si_record_i32($i156);
    goto corral_source_split_1458;

  corral_source_split_1458:
    assume {:verifier.code 0} true;
    $i157 := $zext.i16.i32($i105);
    goto corral_source_split_1459;

  corral_source_split_1459:
    assume {:verifier.code 0} true;
    $i158 := $sext.i32.i64($i157);
    goto corral_source_split_1460;

  corral_source_split_1460:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i158, 8));
    goto corral_source_split_1461;

  corral_source_split_1461:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p160, 0);
    goto corral_source_split_1462;

  corral_source_split_1462:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p19);
    goto corral_source_split_1463;

  corral_source_split_1463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 322} $i162 := readl($p161);
    goto SeqInstr_133, SeqInstr_134;

  SeqInstr_134:
    assume assertsPassed;
    goto SeqInstr_135;

  SeqInstr_135:
    call {:si_unique_call 323} {:cexpr "temp"} boogie_si_record_i32($i162);
    goto corral_source_split_1464;

  corral_source_split_1464:
    assume {:verifier.code 0} true;
    $i163 := $and.i32($i162, $sub.i32(0, 107));
    goto corral_source_split_1465;

  corral_source_split_1465:
    assume {:verifier.code 0} true;
    $p164 := $bitcast.ref.ref($p19);
    goto corral_source_split_1466;

  corral_source_split_1466:
    assume {:verifier.code 0} true;
    call {:si_unique_call 324} writel($i163, $p164);
    goto corral_source_split_1467;

  corral_source_split_1467:
    assume {:verifier.code 0} true;
    $p165 := $bitcast.ref.ref($p19);
    goto corral_source_split_1468;

  corral_source_split_1468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 325} $i166 := handshake($p9, $p165, 64, 0, 2000);
    goto SeqInstr_136, SeqInstr_137;

  SeqInstr_137:
    assume assertsPassed;
    goto SeqInstr_138;

  SeqInstr_138:
    call {:si_unique_call 326} {:cexpr "retval"} boogie_si_record_i32($i166);
    goto corral_source_split_1469;

  corral_source_split_1469:
    assume {:verifier.code 0} true;
    $i167 := $ne.i32($i166, 0);
    goto corral_source_split_1470;

  corral_source_split_1470:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb111, $bb112;

  $bb112:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb113;

  $bb113:
    assume {:verifier.code 0} true;
    $i174 := $and.i32($i162, $sub.i32(0, 3265));
    call {:si_unique_call 329} {:cexpr "temp"} boogie_si_record_i32($i174);
    goto corral_source_split_1480;

  corral_source_split_1480:
    assume {:verifier.code 0} true;
    $i175, $i176, $i177 := $i174, $i156, $i166;
    goto $bb114;

  $bb111:
    assume $i167 == 1;
    goto corral_source_split_1472;

  corral_source_split_1472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 327} $p168 := oxu_to_hcd($p9);
    goto corral_source_split_1473;

  corral_source_split_1473:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p168, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1474;

  corral_source_split_1474:
    assume {:verifier.code 0} true;
    $p171 := $load.ref($M.16, $p170);
    goto corral_source_split_1475;

  corral_source_split_1475:
    assume {:verifier.code 0} true;
    $i172 := $zext.i16.i32($i105);
    goto corral_source_split_1476;

  corral_source_split_1476:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i172, 1);
    goto corral_source_split_1477;

  corral_source_split_1477:
    assume {:verifier.code 0} true;
    call {:si_unique_call 328} dev_err.ref.ref.i32.i32($p171, .str.89, $i173, $i166);
    goto corral_source_split_1478;

  corral_source_split_1478:
    assume {:verifier.code 0} true;
    goto $bb40;

  SeqInstr_136:
    assume !assertsPassed;
    return;

  SeqInstr_133:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i129 == 1;
    goto corral_source_split_1430;

  corral_source_split_1430:
    assume {:verifier.code 0} true;
    call {:si_unique_call 317} $i130 := msecs_to_jiffies(20);
    call {:si_unique_call 318} {:cexpr "tmp___1"} boogie_si_record_i64($i130);
    goto corral_source_split_1431;

  corral_source_split_1431:
    assume {:verifier.code 0} true;
    $i131 := $load.i64($M.0, jiffies);
    goto corral_source_split_1432;

  corral_source_split_1432:
    assume {:verifier.code 0} true;
    $i132 := $add.i64($i130, $i131);
    goto corral_source_split_1433;

  corral_source_split_1433:
    assume {:verifier.code 0} true;
    $i133 := $zext.i16.i32($i105);
    goto corral_source_split_1434;

  corral_source_split_1434:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i133);
    goto corral_source_split_1435;

  corral_source_split_1435:
    assume {:verifier.code 0} true;
    $p136 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i134, 8));
    goto corral_source_split_1436;

  corral_source_split_1436:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p136, $i132);
    goto corral_source_split_1437;

  corral_source_split_1437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 319} $p137 := oxu_to_hcd($p9);
    goto corral_source_split_1438;

  corral_source_split_1438:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p137, $mul.ref(0, 968)), $mul.ref(328, 1));
    goto corral_source_split_1439;

  corral_source_split_1439:
    assume {:verifier.code 0} true;
    $i139 := $zext.i16.i32($i105);
    goto corral_source_split_1440;

  corral_source_split_1440:
    assume {:verifier.code 0} true;
    $i140 := $sext.i32.i64($i139);
    goto corral_source_split_1441;

  corral_source_split_1441:
    assume {:verifier.code 0} true;
    $p142 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i140, 8));
    goto corral_source_split_1442;

  corral_source_split_1442:
    assume {:verifier.code 0} true;
    $i143 := $load.i64($M.0, $p142);
    goto corral_source_split_1443;

  corral_source_split_1443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 320} vslice_dummy_var_78 := ldv_mod_timer_28($p138, $i143);
    goto corral_source_split_1444;

  corral_source_split_1444:
    assume {:verifier.code 0} true;
    $i145, $i146, $i147 := $i107, $i121, 0;
    goto $bb108;

  $bb98:
    assume $i117 == 1;
    goto corral_source_split_1412;

  corral_source_split_1412:
    assume {:verifier.code 0} true;
    $i118 := $M.13;
    goto corral_source_split_1413;

  corral_source_split_1413:
    assume {:verifier.code 0} true;
    $i119 := $trunc.i8.i1($i118);
    goto corral_source_split_1414;

  corral_source_split_1414:
    assume {:verifier.code 0} true;
    assume {:branchcond $i119} true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i119 == 1);
    goto corral_source_split_1416;

  corral_source_split_1416:
    assume {:verifier.code 0} true;
    $i120 := $or.i32($i115, 524288);
    call {:si_unique_call 316} {:cexpr "status"} boogie_si_record_i32($i120);
    goto corral_source_split_1417;

  corral_source_split_1417:
    assume {:verifier.code 0} true;
    $i121 := $i120;
    goto $bb103;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i119 == 1;
    goto $bb100;

  $bb95:
    assume $i113 == 1;
    goto corral_source_split_1405;

  corral_source_split_1405:
    assume {:verifier.code 0} true;
    $i114 := $or.i32($i111, 131072);
    call {:si_unique_call 315} {:cexpr "status"} boogie_si_record_i32($i114);
    goto corral_source_split_1406;

  corral_source_split_1406:
    assume {:verifier.code 0} true;
    $i115 := $i114;
    goto $bb97;

  $bb92:
    assume $i109 == 1;
    goto corral_source_split_1398;

  corral_source_split_1398:
    assume {:verifier.code 0} true;
    $i110 := $or.i32(0, 65536);
    call {:si_unique_call 314} {:cexpr "status"} boogie_si_record_i32($i110);
    goto corral_source_split_1399;

  corral_source_split_1399:
    assume {:verifier.code 0} true;
    $i111 := $i110;
    goto $bb94;

  SeqInstr_130:
    assume !assertsPassed;
    return;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb86:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb87;

  $bb6:
    assume $i23 == 1;
    assume {:verifier.code 0} true;
    $i25 := $eq.i32($i20, 40966);
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb10;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_1275;

  corral_source_split_1275:
    assume {:verifier.code 0} true;
    $p98 := $bitcast.ref.ref($p4);
    goto corral_source_split_1276;

  corral_source_split_1276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 293} ehci_hub_descriptor($p9, $p98);
    goto corral_source_split_1277;

  corral_source_split_1277:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb41;

  $bb4:
    assume $i22 == 1;
    assume {:verifier.code 0} true;
    $i26 := $slt.i32($i20, 40960);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i20, 40960);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb10;

  $bb15:
    assume $i27 == 1;
    goto corral_source_split_1279;

  corral_source_split_1279:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_6 := $M.0;
    call {:si_unique_call 294} cmdloc_dummy_var_7 := $memset.i8(cmdloc_dummy_var_6, $p4, 0, 4, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_7;
    goto corral_source_split_1280;

  corral_source_split_1280:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb41;

  $bb13:
    assume $i26 == 1;
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i20, 8963);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb17:
    assume $i28 == 1;
    goto corral_source_split_1282;

  corral_source_split_1282:
    assume {:verifier.code 0} true;
    $i306 := $zext.i16.i32($i3);
    goto corral_source_split_1283;

  corral_source_split_1283:
    assume {:verifier.code 0} true;
    $i307 := $ashr.i32($i306, 8);
    call {:si_unique_call 295} {:cexpr "selector"} boogie_si_record_i32($i307);
    goto corral_source_split_1284;

  corral_source_split_1284:
    assume {:verifier.code 0} true;
    $i308 := $zext.i16.i32($i3);
    goto corral_source_split_1285;

  corral_source_split_1285:
    assume {:verifier.code 0} true;
    $i309 := $and.i32($i308, 255);
    goto corral_source_split_1286;

  corral_source_split_1286:
    assume {:verifier.code 0} true;
    $i310 := $trunc.i32.i16($i309);
    call {:si_unique_call 296} {:cexpr "wIndex"} boogie_si_record_i16($i310);
    goto corral_source_split_1287;

  corral_source_split_1287:
    assume {:verifier.code 0} true;
    $i311 := $zext.i16.i32($i310);
    goto corral_source_split_1288;

  corral_source_split_1288:
    assume {:verifier.code 0} true;
    $i312 := $eq.i32($i311, 0);
    goto corral_source_split_1289;

  corral_source_split_1289:
    assume {:verifier.code 0} true;
    assume {:branchcond $i312} true;
    goto $bb170, $bb172;

  $bb172:
    assume !($i312 == 1);
    goto corral_source_split_1659;

  corral_source_split_1659:
    assume {:verifier.code 0} true;
    $i313 := $zext.i16.i32($i310);
    goto corral_source_split_1660;

  corral_source_split_1660:
    assume {:verifier.code 0} true;
    $i314 := $sgt.i32($i313, $i12);
    goto corral_source_split_1661;

  corral_source_split_1661:
    assume {:verifier.code 0} true;
    assume {:branchcond $i314} true;
    goto $bb173, $bb174;

  $bb174:
    assume !($i314 == 1);
    assume {:verifier.code 0} true;
    goto $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    $i315 := $zext.i16.i32($i310);
    goto corral_source_split_1663;

  corral_source_split_1663:
    assume {:verifier.code 0} true;
    $i316 := $sub.i32($i315, 1);
    goto corral_source_split_1664;

  corral_source_split_1664:
    assume {:verifier.code 0} true;
    $i317 := $trunc.i32.i16($i316);
    call {:si_unique_call 366} {:cexpr "wIndex"} boogie_si_record_i16($i317);
    goto corral_source_split_1665;

  corral_source_split_1665:
    assume {:verifier.code 0} true;
    $p318 := $bitcast.ref.ref($p19);
    goto corral_source_split_1666;

  corral_source_split_1666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 367} $i319 := readl($p318);
    goto SeqInstr_148, SeqInstr_149;

  SeqInstr_149:
    assume assertsPassed;
    goto SeqInstr_150;

  SeqInstr_150:
    call {:si_unique_call 368} {:cexpr "temp"} boogie_si_record_i32($i319);
    goto corral_source_split_1667;

  corral_source_split_1667:
    assume {:verifier.code 0} true;
    $i320 := $and.i32($i319, 8192);
    goto corral_source_split_1668;

  corral_source_split_1668:
    assume {:verifier.code 0} true;
    $i321 := $ne.i32($i320, 0);
    goto corral_source_split_1669;

  corral_source_split_1669:
    assume {:verifier.code 0} true;
    assume {:branchcond $i321} true;
    goto $bb176, $bb177;

  $bb177:
    assume !($i321 == 1);
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    $i322 := $and.i32($i319, $sub.i32(0, 43));
    call {:si_unique_call 369} {:cexpr "temp"} boogie_si_record_i32($i322);
    goto corral_source_split_1673;

  corral_source_split_1673:
    assume {:verifier.code 0} true;
    $i323 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb179;

  $bb179:
    assume {:verifier.code 0} true;
    $i324 := $slt.i32($i323, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i324} true;
    goto $bb180, $bb181;

  $bb181:
    assume !($i324 == 1);
    assume {:verifier.code 0} true;
    $i325 := $slt.i32($i323, 21);
    assume {:verifier.code 0} true;
    assume {:branchcond $i325} true;
    goto $bb182, $bb183;

  $bb183:
    assume !($i325 == 1);
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i323, 21);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume {:verifier.code 0} true;
    assume !($i326 == 1);
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb217;

  $bb217:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb184:
    assume $i326 == 1;
    goto corral_source_split_1675;

  corral_source_split_1675:
    assume {:verifier.code 0} true;
    $i364 := $eq.i32($i307, 0);
    goto corral_source_split_1676;

  corral_source_split_1676:
    assume {:verifier.code 0} true;
    assume {:branchcond $i364} true;
    goto $bb211, $bb213;

  $bb213:
    assume !($i364 == 1);
    goto corral_source_split_1736;

  corral_source_split_1736:
    assume {:verifier.code 0} true;
    $i365 := $ugt.i32($i307, 5);
    goto corral_source_split_1737;

  corral_source_split_1737:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb214, $bb215;

  $bb215:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb216;

  $bb216:
    assume {:verifier.code 0} true;
    call {:si_unique_call 381} ehci_quiesce($p9);
    goto SeqInstr_154, SeqInstr_155;

  SeqInstr_155:
    assume assertsPassed;
    goto SeqInstr_156;

  SeqInstr_156:
    goto corral_source_split_1739;

  corral_source_split_1739:
    assume {:verifier.code 0} true;
    call {:si_unique_call 382} vslice_dummy_var_81 := ehci_halt($p9);
    goto SeqInstr_157, SeqInstr_158;

  SeqInstr_158:
    assume assertsPassed;
    goto SeqInstr_159;

  SeqInstr_159:
    goto corral_source_split_1740;

  corral_source_split_1740:
    assume {:verifier.code 0} true;
    $i367 := $shl.i32($i307, 16);
    goto corral_source_split_1741;

  corral_source_split_1741:
    assume {:verifier.code 0} true;
    $i368 := $or.i32($i367, $i322);
    call {:si_unique_call 383} {:cexpr "temp"} boogie_si_record_i32($i368);
    goto corral_source_split_1742;

  corral_source_split_1742:
    assume {:verifier.code 0} true;
    $p369 := $bitcast.ref.ref($p19);
    goto corral_source_split_1743;

  corral_source_split_1743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 384} writel($i368, $p369);
    goto corral_source_split_1744;

  corral_source_split_1744:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    $p370 := $add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1711;

  corral_source_split_1711:
    assume {:verifier.code 0} true;
    $p371 := $load.ref($M.0, $p370);
    goto corral_source_split_1712;

  corral_source_split_1712:
    assume {:verifier.code 0} true;
    $p372 := $add.ref($add.ref($p371, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_1713;

  corral_source_split_1713:
    assume {:verifier.code 0} true;
    $p373 := $bitcast.ref.ref($p372);
    goto corral_source_split_1714;

  corral_source_split_1714:
    assume {:verifier.code 0} true;
    call {:si_unique_call 374} vslice_dummy_var_80 := readl($p373);
    goto SeqInstr_151, SeqInstr_152;

  SeqInstr_152:
    assume assertsPassed;
    goto SeqInstr_153;

  SeqInstr_153:
    goto corral_source_split_1715;

  corral_source_split_1715:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb41;

  SeqInstr_151:
    assume !assertsPassed;
    return;

  SeqInstr_157:
    assume !assertsPassed;
    return;

  SeqInstr_154:
    assume !assertsPassed;
    return;

  $bb214:
    assume {:verifier.code 0} true;
    assume $i365 == 1;
    goto $bb212;

  $bb212:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb211:
    assume {:verifier.code 0} true;
    assume $i364 == 1;
    goto $bb212;

  $bb182:
    assume $i325 == 1;
    assume {:verifier.code 0} true;
    $i327 := $eq.i32($i323, 8);
    assume {:verifier.code 0} true;
    assume {:branchcond $i327} true;
    goto $bb187, $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    assume !($i327 == 1);
    goto $bb186;

  $bb187:
    assume $i327 == 1;
    goto corral_source_split_1678;

  corral_source_split_1678:
    assume {:verifier.code 0} true;
    $p346 := $add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_1679;

  corral_source_split_1679:
    assume {:verifier.code 0} true;
    $i347 := $load.i32($M.0, $p346);
    goto corral_source_split_1680;

  corral_source_split_1680:
    assume {:verifier.code 0} true;
    $i348 := $and.i32($i347, 16);
    goto corral_source_split_1681;

  corral_source_split_1681:
    assume {:verifier.code 0} true;
    $i349 := $ne.i32($i348, 0);
    goto corral_source_split_1682;

  corral_source_split_1682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i349} true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i349 == 1);
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb207:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb205:
    assume $i349 == 1;
    goto corral_source_split_1717;

  corral_source_split_1717:
    assume {:verifier.code 0} true;
    $i350 := $or.i32($i322, 4096);
    goto corral_source_split_1718;

  corral_source_split_1718:
    assume {:verifier.code 0} true;
    $p351 := $bitcast.ref.ref($p19);
    goto corral_source_split_1719;

  corral_source_split_1719:
    assume {:verifier.code 0} true;
    call {:si_unique_call 375} writel($i350, $p351);
    goto corral_source_split_1720;

  corral_source_split_1720:
    assume {:verifier.code 0} true;
    goto $bb207;

  $bb180:
    assume $i324 == 1;
    assume {:verifier.code 0} true;
    $i328 := $slt.i32($i323, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i328} true;
    goto $bb189, $bb190;

  $bb190:
    assume !($i328 == 1);
    assume {:verifier.code 0} true;
    $i329 := $eq.i32($i323, 4);
    assume {:verifier.code 0} true;
    assume {:branchcond $i329} true;
    goto $bb191, $bb192;

  $bb192:
    assume {:verifier.code 0} true;
    assume !($i329 == 1);
    goto $bb186;

  $bb191:
    assume $i329 == 1;
    goto corral_source_split_1684;

  corral_source_split_1684:
    assume {:verifier.code 0} true;
    $i352 := $and.i32($i322, 64);
    goto corral_source_split_1685;

  corral_source_split_1685:
    assume {:verifier.code 0} true;
    $i353 := $ne.i32($i352, 0);
    goto corral_source_split_1686;

  corral_source_split_1686:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb208, $bb209;

  $bb209:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb210;

  $bb210:
    assume {:verifier.code 0} true;
    $i354 := $or.i32($i322, 256);
    call {:si_unique_call 376} {:cexpr "temp"} boogie_si_record_i32($i354);
    goto corral_source_split_1724;

  corral_source_split_1724:
    assume {:verifier.code 0} true;
    $i355 := $and.i32($i354, $sub.i32(0, 5));
    call {:si_unique_call 377} {:cexpr "temp"} boogie_si_record_i32($i355);
    goto corral_source_split_1725;

  corral_source_split_1725:
    assume {:verifier.code 0} true;
    call {:si_unique_call 378} $i356 := msecs_to_jiffies(50);
    call {:si_unique_call 379} {:cexpr "tmp___14"} boogie_si_record_i64($i356);
    goto corral_source_split_1726;

  corral_source_split_1726:
    assume {:verifier.code 0} true;
    $i357 := $load.i64($M.0, jiffies);
    goto corral_source_split_1727;

  corral_source_split_1727:
    assume {:verifier.code 0} true;
    $i358 := $add.i64($i356, $i357);
    goto corral_source_split_1728;

  corral_source_split_1728:
    assume {:verifier.code 0} true;
    $i359 := $zext.i16.i32($i317);
    goto corral_source_split_1729;

  corral_source_split_1729:
    assume {:verifier.code 0} true;
    $i360 := $sext.i32.i64($i359);
    goto corral_source_split_1730;

  corral_source_split_1730:
    assume {:verifier.code 0} true;
    $p362 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i360, 8));
    goto corral_source_split_1731;

  corral_source_split_1731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p362, $i358);
    goto corral_source_split_1732;

  corral_source_split_1732:
    assume {:verifier.code 0} true;
    $p363 := $bitcast.ref.ref($p19);
    goto corral_source_split_1733;

  corral_source_split_1733:
    assume {:verifier.code 0} true;
    call {:si_unique_call 380} writel($i355, $p363);
    goto corral_source_split_1734;

  corral_source_split_1734:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb208:
    assume $i353 == 1;
    goto corral_source_split_1722;

  corral_source_split_1722:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb189:
    assume $i328 == 1;
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i323, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb193, $bb194;

  $bb194:
    assume {:verifier.code 0} true;
    assume !($i330 == 1);
    goto $bb186;

  $bb193:
    assume $i330 == 1;
    goto corral_source_split_1688;

  corral_source_split_1688:
    assume {:verifier.code 0} true;
    $i331 := $and.i32($i322, 4);
    goto corral_source_split_1689;

  corral_source_split_1689:
    assume {:verifier.code 0} true;
    $i332 := $eq.i32($i331, 0);
    goto corral_source_split_1690;

  corral_source_split_1690:
    assume {:verifier.code 0} true;
    assume {:branchcond $i332} true;
    goto $bb195, $bb197;

  $bb197:
    assume !($i332 == 1);
    goto corral_source_split_1692;

  corral_source_split_1692:
    assume {:verifier.code 0} true;
    $i333 := $and.i32($i322, 256);
    goto corral_source_split_1693;

  corral_source_split_1693:
    assume {:verifier.code 0} true;
    $i334 := $ne.i32($i333, 0);
    goto corral_source_split_1694;

  corral_source_split_1694:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb200;

  $bb200:
    assume {:verifier.code 0} true;
    $p336 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1696;

  corral_source_split_1696:
    assume {:verifier.code 0} true;
    $p337 := $load.ref($M.0, $p336);
    goto corral_source_split_1697;

  corral_source_split_1697:
    assume {:verifier.code 0} true;
    $p338 := $add.ref($add.ref($p337, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1698;

  corral_source_split_1698:
    assume {:verifier.code 0} true;
    call {:si_unique_call 370} $i339 := device_may_wakeup($p338);
    goto corral_source_split_1699;

  corral_source_split_1699:
    assume {:verifier.code 0} true;
    $i340 := $zext.i1.i8($i339);
    call {:si_unique_call 371} {:cexpr "tmp___13"} boogie_si_record_i8($i340);
    goto corral_source_split_1700;

  corral_source_split_1700:
    assume {:verifier.code 0} true;
    $i341 := $trunc.i8.i1($i340);
    goto corral_source_split_1701;

  corral_source_split_1701:
    assume {:verifier.code 0} true;
    assume {:branchcond $i341} true;
    goto $bb201, $bb202;

  $bb202:
    assume !($i341 == 1);
    assume {:verifier.code 0} true;
    $i343 := $i322;
    goto $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    goto corral_source_split_1706;

  corral_source_split_1706:
    assume {:verifier.code 0} true;
    $i344 := $or.i32($i343, 128);
    goto corral_source_split_1707;

  corral_source_split_1707:
    assume {:verifier.code 0} true;
    $p345 := $bitcast.ref.ref($p19);
    goto corral_source_split_1708;

  corral_source_split_1708:
    assume {:verifier.code 0} true;
    call {:si_unique_call 373} writel($i344, $p345);
    goto corral_source_split_1709;

  corral_source_split_1709:
    assume {:verifier.code 0} true;
    goto $bb204;

  $bb201:
    assume $i341 == 1;
    goto corral_source_split_1703;

  corral_source_split_1703:
    assume {:verifier.code 0} true;
    $i342 := $or.i32($i322, 7340032);
    call {:si_unique_call 372} {:cexpr "temp"} boogie_si_record_i32($i342);
    goto corral_source_split_1704;

  corral_source_split_1704:
    assume {:verifier.code 0} true;
    $i343 := $i342;
    goto $bb203;

  $bb198:
    assume {:verifier.code 0} true;
    assume $i334 == 1;
    goto $bb196;

  $bb196:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb195:
    assume {:verifier.code 0} true;
    assume $i332 == 1;
    goto $bb196;

  $bb176:
    assume $i321 == 1;
    goto corral_source_split_1671;

  corral_source_split_1671:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb41;

  SeqInstr_148:
    assume !assertsPassed;
    return;

  $bb173:
    assume {:verifier.code 0} true;
    assume $i314 == 1;
    goto $bb171;

  $bb171:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb170:
    assume {:verifier.code 0} true;
    assume $i312 == 1;
    goto $bb171;

  $bb2:
    assume $i21 == 1;
    assume {:verifier.code 0} true;
    $i29 := $slt.i32($i20, 8195);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    $i30 := $slt.i32($i20, 8961);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i20, 8961);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i31 == 1);
    goto $bb10;

  $bb23:
    assume $i31 == 1;
    goto corral_source_split_1291;

  corral_source_split_1291:
    assume {:verifier.code 0} true;
    $i39 := $zext.i16.i32($i3);
    goto corral_source_split_1292;

  corral_source_split_1292:
    assume {:verifier.code 0} true;
    $i40 := $eq.i32($i39, 0);
    goto corral_source_split_1293;

  corral_source_split_1293:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb42, $bb44;

  $bb44:
    assume !($i40 == 1);
    goto corral_source_split_1305;

  corral_source_split_1305:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32($i3);
    goto corral_source_split_1306;

  corral_source_split_1306:
    assume {:verifier.code 0} true;
    $i42 := $sgt.i32($i41, $i12);
    goto corral_source_split_1307;

  corral_source_split_1307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i3);
    goto corral_source_split_1309;

  corral_source_split_1309:
    assume {:verifier.code 0} true;
    $i44 := $sub.i32($i43, 1);
    goto corral_source_split_1310;

  corral_source_split_1310:
    assume {:verifier.code 0} true;
    $i45 := $trunc.i32.i16($i44);
    call {:si_unique_call 298} {:cexpr "wIndex"} boogie_si_record_i16($i45);
    goto corral_source_split_1311;

  corral_source_split_1311:
    assume {:verifier.code 0} true;
    $p46 := $bitcast.ref.ref($p19);
    goto corral_source_split_1312;

  corral_source_split_1312:
    assume {:verifier.code 0} true;
    call {:si_unique_call 299} $i47 := readl($p46);
    goto SeqInstr_124, SeqInstr_125;

  SeqInstr_125:
    assume assertsPassed;
    goto SeqInstr_126;

  SeqInstr_126:
    call {:si_unique_call 300} {:cexpr "temp"} boogie_si_record_i32($i47);
    goto corral_source_split_1313;

  corral_source_split_1313:
    assume {:verifier.code 0} true;
    $i48 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i48, 17);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    $i50 := $slt.i32($i48, 19);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i51 := $slt.i32($i48, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    $i52 := $eq.i32($i48, 20);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    assume !($i52 == 1);
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb55:
    assume $i52 == 1;
    goto corral_source_split_1321;

  corral_source_split_1321:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1352;

  corral_source_split_1352:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1353;

  corral_source_split_1353:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_1354;

  corral_source_split_1354:
    assume {:verifier.code 0} true;
    $p96 := $bitcast.ref.ref($p95);
    goto corral_source_split_1355;

  corral_source_split_1355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 305} vslice_dummy_var_77 := readl($p96);
    goto SeqInstr_127, SeqInstr_128;

  SeqInstr_128:
    assume assertsPassed;
    goto SeqInstr_129;

  SeqInstr_129:
    goto corral_source_split_1356;

  corral_source_split_1356:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb41;

  SeqInstr_127:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i51 == 1;
    goto corral_source_split_1315;

  corral_source_split_1315:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i47, $sub.i32(0, 43));
    goto corral_source_split_1316;

  corral_source_split_1316:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i90, 32);
    goto corral_source_split_1317;

  corral_source_split_1317:
    assume {:verifier.code 0} true;
    $p92 := $bitcast.ref.ref($p19);
    goto corral_source_split_1318;

  corral_source_split_1318:
    assume {:verifier.code 0} true;
    call {:si_unique_call 301} writel($i91, $p92);
    goto corral_source_split_1319;

  corral_source_split_1319:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb51:
    assume $i50 == 1;
    assume {:verifier.code 0} true;
    $i53 := $slt.i32($i48, 18);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i53 == 1);
    goto corral_source_split_1329;

  corral_source_split_1329:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb58:
    assume $i53 == 1;
    goto corral_source_split_1323;

  corral_source_split_1323:
    assume {:verifier.code 0} true;
    $i62 := $and.i32($i47, $sub.i32(0, 43));
    goto corral_source_split_1324;

  corral_source_split_1324:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i62, 8);
    goto corral_source_split_1325;

  corral_source_split_1325:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p19);
    goto corral_source_split_1326;

  corral_source_split_1326:
    assume {:verifier.code 0} true;
    call {:si_unique_call 302} writel($i63, $p64);
    goto corral_source_split_1327;

  corral_source_split_1327:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb49:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i48, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i48, 16);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume !($i55 == 1);
    goto corral_source_split_1331;

  corral_source_split_1331:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i47, $sub.i32(0, 43));
    goto corral_source_split_1332;

  corral_source_split_1332:
    assume {:verifier.code 0} true;
    $i88 := $or.i32($i87, 2);
    goto corral_source_split_1333;

  corral_source_split_1333:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p19);
    goto corral_source_split_1334;

  corral_source_split_1334:
    assume {:verifier.code 0} true;
    call {:si_unique_call 303} writel($i88, $p89);
    goto corral_source_split_1335;

  corral_source_split_1335:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb62:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i56 := $eq.i32($i48, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume !($i56 == 1);
    goto $bb57;

  $bb64:
    assume $i56 == 1;
    goto corral_source_split_1337;

  corral_source_split_1337:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_1338;

  corral_source_split_1338:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.0, $p81);
    goto corral_source_split_1339;

  corral_source_split_1339:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i82, 16);
    goto corral_source_split_1340;

  corral_source_split_1340:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i83, 0);
    goto corral_source_split_1341;

  corral_source_split_1341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb82:
    assume $i84 == 1;
    goto corral_source_split_1381;

  corral_source_split_1381:
    assume {:verifier.code 0} true;
    $i85 := $and.i32($i47, $sub.i32(0, 4139));
    goto corral_source_split_1382;

  corral_source_split_1382:
    assume {:verifier.code 0} true;
    $p86 := $bitcast.ref.ref($p19);
    goto corral_source_split_1383;

  corral_source_split_1383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 310} writel($i85, $p86);
    goto corral_source_split_1384;

  corral_source_split_1384:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb60:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb57;

  $bb68:
    assume $i58 == 1;
    goto corral_source_split_1343;

  corral_source_split_1343:
    assume {:verifier.code 0} true;
    $i65 := $and.i32($i47, 256);
    goto corral_source_split_1344;

  corral_source_split_1344:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_1345;

  corral_source_split_1345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i67 := $and.i32($i47, 128);
    goto corral_source_split_1360;

  corral_source_split_1360:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_1361;

  corral_source_split_1361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb76:
    assume $i68 == 1;
    goto corral_source_split_1363;

  corral_source_split_1363:
    assume {:verifier.code 0} true;
    $i69 := $and.i32($i47, 4);
    goto corral_source_split_1364;

  corral_source_split_1364:
    assume {:verifier.code 0} true;
    $i70 := $eq.i32($i69, 0);
    goto corral_source_split_1365;

  corral_source_split_1365:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb78, $bb79;

  $bb79:
    assume !($i70 == 1);
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i47, $sub.i32(0, 7340075));
    call {:si_unique_call 306} {:cexpr "temp"} boogie_si_record_i32($i71);
    goto corral_source_split_1369;

  corral_source_split_1369:
    assume {:verifier.code 0} true;
    $i72 := $or.i32($i71, 64);
    goto corral_source_split_1370;

  corral_source_split_1370:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p19);
    goto corral_source_split_1371;

  corral_source_split_1371:
    assume {:verifier.code 0} true;
    call {:si_unique_call 307} writel($i72, $p73);
    goto corral_source_split_1372;

  corral_source_split_1372:
    assume {:verifier.code 0} true;
    call {:si_unique_call 308} $i74 := msecs_to_jiffies(20);
    call {:si_unique_call 309} {:cexpr "tmp___0"} boogie_si_record_i64($i74);
    goto corral_source_split_1373;

  corral_source_split_1373:
    assume {:verifier.code 0} true;
    $i75 := $load.i64($M.0, jiffies);
    goto corral_source_split_1374;

  corral_source_split_1374:
    assume {:verifier.code 0} true;
    $i76 := $add.i64($i74, $i75);
    goto corral_source_split_1375;

  corral_source_split_1375:
    assume {:verifier.code 0} true;
    $i77 := $zext.i16.i32($i45);
    goto corral_source_split_1376;

  corral_source_split_1376:
    assume {:verifier.code 0} true;
    $i78 := $sext.i32.i64($i77);
    goto corral_source_split_1377;

  corral_source_split_1377:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i78, 8));
    goto corral_source_split_1378;

  corral_source_split_1378:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p80, $i76);
    goto corral_source_split_1379;

  corral_source_split_1379:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb78:
    assume $i70 == 1;
    goto corral_source_split_1367;

  corral_source_split_1367:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb73:
    assume $i66 == 1;
    goto corral_source_split_1358;

  corral_source_split_1358:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb66:
    assume $i57 == 1;
    assume {:verifier.code 0} true;
    $i59 := $eq.i32($i48, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    assume !($i59 == 1);
    goto $bb57;

  $bb70:
    assume $i59 == 1;
    goto corral_source_split_1347;

  corral_source_split_1347:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i47, $sub.i32(0, 5));
    goto corral_source_split_1348;

  corral_source_split_1348:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p19);
    goto corral_source_split_1349;

  corral_source_split_1349:
    assume {:verifier.code 0} true;
    call {:si_unique_call 304} writel($i60, $p61);
    goto corral_source_split_1350;

  corral_source_split_1350:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_124:
    assume !assertsPassed;
    return;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i42 == 1;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i40 == 1;
    goto $bb43;

  $bb21:
    assume $i30 == 1;
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i20, 8195);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb25:
    assume $i32 == 1;
    goto corral_source_split_1295;

  corral_source_split_1295:
    assume {:verifier.code 0} true;
    $i302 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb159;

  $bb159:
    assume {:verifier.code 0} true;
    $i303 := $slt.i32($i302, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i303} true;
    goto $bb160, $bb161;

  $bb161:
    assume !($i303 == 1);
    assume {:verifier.code 0} true;
    $i304 := $eq.i32($i302, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i304} true;
    goto $bb162, $bb164;

  $bb164:
    assume {:verifier.code 0} true;
    assume !($i304 == 1);
    goto $bb165;

  $bb165:
    assume {:verifier.code 0} true;
    goto $bb169;

  $bb169:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb162:
    assume {:verifier.code 0} true;
    assume $i304 == 1;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb41;

  $bb160:
    assume $i303 == 1;
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i302, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i305 == 1);
    goto $bb165;

  $bb166:
    assume $i305 == 1;
    goto corral_source_split_1657;

  corral_source_split_1657:
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb19:
    assume $i29 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i20, 8193);
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb10;

  $bb27:
    assume $i33 == 1;
    goto corral_source_split_1297;

  corral_source_split_1297:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i2);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i35 := $slt.i32($i34, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i34, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb32, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i38 := 0;
    goto $bb41;

  $bb30:
    assume $i35 == 1;
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i34, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i37 == 1);
    goto $bb35;

  $bb36:
    assume $i37 == 1;
    goto corral_source_split_1299;

  corral_source_split_1299:
    assume {:verifier.code 0} true;
    goto $bb33;
}



const oxu_bus_suspend: ref;

axiom oxu_bus_suspend == $sub.ref(0, 233805);

procedure oxu_bus_suspend($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.24, $M.25, $CurrAddr, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.39, $M.27, $M.29, $M.31, $M.33, $M.8, $M.28, $M.30, $M.32, $M.34, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_bus_suspend($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i24;
  var $i10: i24;
  var $i11: i24;
  var $p12: ref;
  var $p13: ref;
  var $i14: i8;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $i48: i8;
  var $i49: i8;
  var $i50: i8;
  var $p51: ref;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $i66: i32;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $i70: i32;
  var $i71: i64;
  var $p72: ref;
  var $i73: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $i78: i1;
  var $i79: i8;
  var $i80: i1;
  var $i81: i32;
  var $i83: i32;
  var $i82: i32;
  var $i84: i1;
  var $p85: ref;
  var $i86: i32;
  var $i87: i1;
  var $i54: i32;
  var $p88: ref;
  var $p91: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i1;
  var $i97: i8;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i32;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i112: i64;
  var $i113: i64;
  var $i114: i64;
  var $p115: ref;
  var $p116: ref;
  var vslice_dummy_var_82: i32;
  var vslice_dummy_var_83: i32;
  var vslice_dummy_var_84: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 385} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1746;

  corral_source_split_1746:
    assume {:verifier.code 0} true;
    call {:si_unique_call 386} $p2 := hcd_to_oxu($p0);
    goto corral_source_split_1747;

  corral_source_split_1747:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1748;

  corral_source_split_1748:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p3, .str.2);
    goto corral_source_split_1749;

  corral_source_split_1749:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1750;

  corral_source_split_1750:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p4, .str.50);
    goto corral_source_split_1751;

  corral_source_split_1751:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1752;

  corral_source_split_1752:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p5, .str);
    goto corral_source_split_1753;

  corral_source_split_1753:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1754;

  corral_source_split_1754:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p6, .str.51);
    goto corral_source_split_1755;

  corral_source_split_1755:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1756;

  corral_source_split_1756:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_1757;

  corral_source_split_1757:
    assume {:verifier.code 0} true;
    $i9 := $load.i24($M.6, $p8);
    goto corral_source_split_1758;

  corral_source_split_1758:
    assume {:verifier.code 0} true;
    $i10 := $and.i24($i9, $sub.i24(0, 262144));
    goto corral_source_split_1759;

  corral_source_split_1759:
    assume {:verifier.code 0} true;
    $i11 := $or.i24($i10, 3457);
    goto corral_source_split_1760;

  corral_source_split_1760:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p8, $i11);
    goto corral_source_split_1761;

  corral_source_split_1761:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1762;

  corral_source_split_1762:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p12, 0);
    goto corral_source_split_1763;

  corral_source_split_1763:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1764;

  corral_source_split_1764:
    assume {:verifier.code 0} true;
    $i14 := $load.i8($M.7, $p13);
    goto corral_source_split_1765;

  corral_source_split_1765:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i64($i14);
    goto corral_source_split_1766;

  corral_source_split_1766:
    assume {:verifier.code 0} true;
    $i16 := $and.i64($i15, 1);
    goto corral_source_split_1767;

  corral_source_split_1767:
    assume {:verifier.code 0} true;
    call {:si_unique_call 387} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 388} {:cexpr "tmp___1"} boogie_si_record_i64($i17);
    goto corral_source_split_1768;

  corral_source_split_1768:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_1769;

  corral_source_split_1769:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i23 := $load.i64($M.0, jiffies);
    goto corral_source_split_1777;

  corral_source_split_1777:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(720, 1));
    goto corral_source_split_1778;

  corral_source_split_1778:
    assume {:verifier.code 0} true;
    $i25 := $load.i64($M.0, $p24);
    goto corral_source_split_1779;

  corral_source_split_1779:
    assume {:verifier.code 0} true;
    $i26 := $sub.i64($i23, $i25);
    goto corral_source_split_1780;

  corral_source_split_1780:
    assume {:verifier.code 0} true;
    $i27 := $slt.i64($i26, 0);
    goto corral_source_split_1781;

  corral_source_split_1781:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_1786;

  corral_source_split_1786:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_1787;

  corral_source_split_1787:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i29, 15);
    call {:si_unique_call 392} {:cexpr "port"} boogie_si_record_i32($i30);
    goto corral_source_split_1788;

  corral_source_split_1788:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1789;

  corral_source_split_1789:
    assume {:verifier.code 0} true;
    call {:si_unique_call 393} spin_lock_irq($p31);
    goto corral_source_split_1790;

  corral_source_split_1790:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_1791;

  corral_source_split_1791:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_1792;

  corral_source_split_1792:
    assume {:verifier.code 0} true;
    $i34 := $and.i32($i33, 1);
    goto corral_source_split_1793;

  corral_source_split_1793:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_1794;

  corral_source_split_1794:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1801;

  corral_source_split_1801:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_1802;

  corral_source_split_1802:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_1803;

  corral_source_split_1803:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p39);
    goto corral_source_split_1804;

  corral_source_split_1804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 395} $i41 := readl($p40);
    goto SeqInstr_163, SeqInstr_164;

  SeqInstr_164:
    assume assertsPassed;
    goto SeqInstr_165;

  SeqInstr_165:
    goto corral_source_split_1805;

  corral_source_split_1805:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_1806;

  corral_source_split_1806:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p42, $i41);
    goto corral_source_split_1807;

  corral_source_split_1807:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_1808;

  corral_source_split_1808:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_1809;

  corral_source_split_1809:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_1810;

  corral_source_split_1810:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_1811;

  corral_source_split_1811:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 396} ehci_work($p2);
    goto SeqInstr_166, SeqInstr_167;

  SeqInstr_167:
    assume assertsPassed;
    goto SeqInstr_168;

  SeqInstr_168:
    goto corral_source_split_1820;

  corral_source_split_1820:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(560, 1));
    goto corral_source_split_1821;

  corral_source_split_1821:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p51, 0);
    goto corral_source_split_1822;

  corral_source_split_1822:
    assume {:verifier.code 0} true;
    $i52 := $sub.i32($i30, 1);
    call {:si_unique_call 397} {:cexpr "port"} boogie_si_record_i32($i52);
    goto corral_source_split_1823;

  corral_source_split_1823:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i30, 0);
    goto corral_source_split_1824;

  corral_source_split_1824:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i53 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(576, 1));
    goto corral_source_split_1881;

  corral_source_split_1881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 409} vslice_dummy_var_82 := ldv_del_timer_sync_29($p88);
    goto corral_source_split_1882;

  corral_source_split_1882:
    assume {:verifier.code 0} true;
    call {:si_unique_call 410} vslice_dummy_var_83 := ehci_halt($p2);
    goto SeqInstr_172, SeqInstr_173;

  SeqInstr_173:
    assume assertsPassed;
    goto SeqInstr_174;

  SeqInstr_174:
    goto corral_source_split_1883;

  corral_source_split_1883:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_1884;

  corral_source_split_1884:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p91, 4);
    goto corral_source_split_1885;

  corral_source_split_1885:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1886;

  corral_source_split_1886:
    assume {:verifier.code 0} true;
    $p94 := $load.ref($M.0, $p93);
    goto corral_source_split_1887;

  corral_source_split_1887:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($p94, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1888;

  corral_source_split_1888:
    assume {:verifier.code 0} true;
    call {:si_unique_call 411} $i96 := device_may_wakeup($p95);
    goto corral_source_split_1889;

  corral_source_split_1889:
    assume {:verifier.code 0} true;
    $i97 := $zext.i1.i8($i96);
    call {:si_unique_call 412} {:cexpr "tmp___5"} boogie_si_record_i8($i97);
    goto corral_source_split_1890;

  corral_source_split_1890:
    assume {:verifier.code 0} true;
    $i98 := $trunc.i8.i1($i97);
    goto corral_source_split_1891;

  corral_source_split_1891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    $i99 := 1;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto corral_source_split_1895;

  corral_source_split_1895:
    assume {:verifier.code 0} true;
    $i100 := $ne.i32($i99, 0);
    goto corral_source_split_1896;

  corral_source_split_1896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    $i102 := 55;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto corral_source_split_1901;

  corral_source_split_1901:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1902;

  corral_source_split_1902:
    assume {:verifier.code 0} true;
    $p104 := $load.ref($M.0, $p103);
    goto corral_source_split_1903;

  corral_source_split_1903:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($p104, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_1904;

  corral_source_split_1904:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p105);
    goto corral_source_split_1905;

  corral_source_split_1905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 414} writel($i102, $p106);
    goto corral_source_split_1906;

  corral_source_split_1906:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1907;

  corral_source_split_1907:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_1908;

  corral_source_split_1908:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_1909;

  corral_source_split_1909:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p109);
    goto corral_source_split_1910;

  corral_source_split_1910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 415} vslice_dummy_var_84 := readl($p110);
    goto SeqInstr_175, SeqInstr_176;

  SeqInstr_176:
    assume assertsPassed;
    goto SeqInstr_177;

  SeqInstr_177:
    goto corral_source_split_1911;

  corral_source_split_1911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 416} $i112 := msecs_to_jiffies(10);
    call {:si_unique_call 417} {:cexpr "tmp___7"} boogie_si_record_i64($i112);
    goto corral_source_split_1912;

  corral_source_split_1912:
    assume {:verifier.code 0} true;
    $i113 := $load.i64($M.0, jiffies);
    goto corral_source_split_1913;

  corral_source_split_1913:
    assume {:verifier.code 0} true;
    $i114 := $add.i64($i112, $i113);
    goto corral_source_split_1914;

  corral_source_split_1914:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(720, 1));
    goto corral_source_split_1915;

  corral_source_split_1915:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p115, $i114);
    goto corral_source_split_1916;

  corral_source_split_1916:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1917;

  corral_source_split_1917:
    assume {:verifier.code 0} true;
    call {:si_unique_call 418} spin_unlock_irq($p116);
    goto corral_source_split_1918;

  corral_source_split_1918:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  SeqInstr_175:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i100 == 1;
    goto corral_source_split_1898;

  corral_source_split_1898:
    assume {:verifier.code 0} true;
    $i101 := $and.i32(55, $sub.i32(0, 5));
    call {:si_unique_call 413} {:cexpr "mask"} boogie_si_record_i32($i101);
    goto corral_source_split_1899;

  corral_source_split_1899:
    assume {:verifier.code 0} true;
    $i102 := $i101;
    goto $bb40;

  $bb35:
    assume $i98 == 1;
    goto corral_source_split_1893;

  corral_source_split_1893:
    assume {:verifier.code 0} true;
    $i99 := 0;
    goto $bb37;

  SeqInstr_172:
    assume !assertsPassed;
    return;

  $bb13:
    assume $i53 == 1;
    goto corral_source_split_1826;

  corral_source_split_1826:
    assume {:verifier.code 0} true;
    $i54 := $i52;
    goto $bb16;

  $bb16:
    call $p55, $p56, $p57, $p58, $i59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $p75, $p76, $p77, $i78, $i79, $i80, $i81, $i83, $i82, $i84, $p85, $i86, $i87, $i54 := oxu_bus_suspend_loop_$bb16($p0, $p2, $p55, $p56, $p57, $p58, $i59, $p60, $p61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $i70, $i71, $p72, $i73, $p75, $p76, $p77, $i78, $i79, $i80, $i81, $i83, $i82, $i84, $p85, $i86, $i87, $i54);
    goto $bb16_last;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1830;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    $p56 := $load.ref($M.0, $p55);
    goto corral_source_split_1831;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p56, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_1832;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    $p58 := $bitcast.ref.ref($p57);
    goto corral_source_split_1833;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    $i59 := $sext.i32.i64($i54);
    goto corral_source_split_1834;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($p58, $mul.ref($i59, 4));
    goto corral_source_split_1835;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p60);
    goto corral_source_split_1836;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} $i62 := readl($p61);
    goto SeqInstr_169, SeqInstr_170;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  SeqInstr_171:
    call {:si_unique_call 399} {:cexpr "tmp___2"} boogie_si_record_i32($i62);
    goto corral_source_split_1837;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    $i63 := $and.i32($i62, $sub.i32(0, 43));
    call {:si_unique_call 400} {:cexpr "t1"} boogie_si_record_i32($i63);
    goto corral_source_split_1838;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, 4);
    goto corral_source_split_1839;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_1840;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume !($i65 == 1);
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $i73 := $i63;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1856;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1857;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    $p76 := $load.ref($M.0, $p75);
    goto corral_source_split_1858;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p76, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1859;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} $i78 := device_may_wakeup($p77);
    goto corral_source_split_1860;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    $i79 := $zext.i1.i8($i78);
    call {:si_unique_call 404} {:cexpr "tmp___3"} boogie_si_record_i8($i79);
    goto corral_source_split_1861;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    $i80 := $trunc.i8.i1($i79);
    goto corral_source_split_1862;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i80 == 1);
    goto corral_source_split_1867;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    $i83 := $and.i32($i73, $sub.i32(0, 7340033));
    call {:si_unique_call 406} {:cexpr "t2"} boogie_si_record_i32($i83);
    assume {:verifier.code 0} true;
    $i82 := $i83;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1869;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i63, $i82);
    goto corral_source_split_1870;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i86 := $sub.i32($i54, 1);
    call {:si_unique_call 408} {:cexpr "port"} boogie_si_record_i32($i86);
    goto corral_source_split_1876;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    $i87 := $ne.i32($i54, 0);
    goto corral_source_split_1877;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i87 == 1);
    goto corral_source_split_1879;

  corral_source_split_1879:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb32:
    assume $i87 == 1;
    assume {:verifier.code 0} true;
    $i54 := $i86;
    goto $bb32_dummy;

  $bb29:
    assume $i84 == 1;
    goto corral_source_split_1872;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    $p85 := $bitcast.ref.ref($p60);
    goto corral_source_split_1873;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} writel($i82, $p85);
    goto corral_source_split_1874;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i80 == 1;
    goto corral_source_split_1864;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    $i81 := $or.i32($i73, 7340032);
    call {:si_unique_call 405} {:cexpr "t2"} boogie_si_record_i32($i81);
    goto corral_source_split_1865;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    $i82 := $i81;
    goto $bb28;

  $bb18:
    assume $i65 == 1;
    goto corral_source_split_1842;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i63, 8192);
    goto corral_source_split_1843;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 0);
    goto corral_source_split_1844;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb20;

  $bb21:
    assume $i67 == 1;
    goto corral_source_split_1846;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i63, 128);
    goto corral_source_split_1847;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 0);
    goto corral_source_split_1848;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i69 == 1);
    goto $bb20;

  $bb23:
    assume $i69 == 1;
    goto corral_source_split_1850;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    $i70 := $or.i32($i63, 128);
    call {:si_unique_call 401} {:cexpr "t2"} boogie_si_record_i32($i70);
    goto corral_source_split_1851;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    $i71 := $sext.i32.i64($i54);
    goto corral_source_split_1852;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(560, 1));
    goto corral_source_split_1853;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} set_bit($i71, $p72);
    goto corral_source_split_1854;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    $i73 := $i70;
    goto $bb25;

  SeqInstr_169:
    assume !assertsPassed;
    return;

  SeqInstr_166:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i46 == 1;
    goto corral_source_split_1813;

  corral_source_split_1813:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(392, 1));
    goto corral_source_split_1814;

  corral_source_split_1814:
    assume {:verifier.code 0} true;
    $i48 := $load.i8($M.0, $p47);
    goto corral_source_split_1815;

  corral_source_split_1815:
    assume {:verifier.code 0} true;
    $i49 := $and.i8($i48, $sub.i8(0, 2));
    goto corral_source_split_1816;

  corral_source_split_1816:
    assume {:verifier.code 0} true;
    $i50 := $or.i8($i49, 1);
    goto corral_source_split_1817;

  corral_source_split_1817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, $i50);
    goto corral_source_split_1818;

  corral_source_split_1818:
    assume {:verifier.code 0} true;
    goto $bb12;

  SeqInstr_163:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i35 == 1;
    goto corral_source_split_1796;

  corral_source_split_1796:
    assume {:verifier.code 0} true;
    call {:si_unique_call 394} ehci_quiesce($p2);
    goto SeqInstr_160, SeqInstr_161;

  SeqInstr_161:
    assume assertsPassed;
    goto SeqInstr_162;

  SeqInstr_162:
    goto corral_source_split_1797;

  corral_source_split_1797:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_1798;

  corral_source_split_1798:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p36, 133);
    goto corral_source_split_1799;

  corral_source_split_1799:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_160:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i27 == 1;
    goto corral_source_split_1783;

  corral_source_split_1783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 391} msleep(5);
    goto corral_source_split_1784;

  corral_source_split_1784:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_1771;

  corral_source_split_1771:
    assume {:verifier.code 0} true;
    call {:si_unique_call 389} $p19 := oxu_to_hcd($p2);
    goto corral_source_split_1772;

  corral_source_split_1772:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1773;

  corral_source_split_1773:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.20, $p21);
    goto corral_source_split_1774;

  corral_source_split_1774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 390} __dynamic_dev_dbg.ref.ref.ref($p1, $p22, .str.51);
    goto corral_source_split_1775;

  corral_source_split_1775:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;
}



const oxu_bus_resume: ref;

axiom oxu_bus_resume == $sub.ref(0, 234837);

procedure oxu_bus_resume($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $CurrAddr, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_bus_resume($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i64;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i1;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $i55: i32;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i32;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $i70: i1;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $p77: ref;
  var $i78: i32;
  var $i79: i32;
  var $i80: i64;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i1;
  var $i86: i64;
  var $i87: i64;
  var $i88: i64;
  var $i89: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $i98: i64;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $i71: i32;
  var $p102: ref;
  var $i103: i32;
  var $i104: i32;
  var $i105: i32;
  var $i106: i1;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $i112: i64;
  var $p113: ref;
  var $i114: i32;
  var $i115: i64;
  var $p116: ref;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i1;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i32;
  var $i129: i1;
  var $i107: i32;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i1;
  var $i142: i32;
  var $i143: i32;
  var $p144: ref;
  var $i145: i32;
  var $i146: i1;
  var $i147: i32;
  var $i148: i32;
  var $i149: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $p153: ref;
  var $p154: ref;
  var $i155: i32;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $i160: i64;
  var $i161: i64;
  var $i162: i64;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var vslice_dummy_var_85: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 419} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_1920;

  corral_source_split_1920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 420} $p2 := hcd_to_oxu($p0);
    goto corral_source_split_1921;

  corral_source_split_1921:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, jiffies);
    goto corral_source_split_1922;

  corral_source_split_1922:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(720, 1));
    goto corral_source_split_1923;

  corral_source_split_1923:
    assume {:verifier.code 0} true;
    $i5 := $load.i64($M.0, $p4);
    goto corral_source_split_1924;

  corral_source_split_1924:
    assume {:verifier.code 0} true;
    $i6 := $sub.i64($i3, $i5);
    goto corral_source_split_1925;

  corral_source_split_1925:
    assume {:verifier.code 0} true;
    $i7 := $slt.i64($i6, 0);
    goto corral_source_split_1926;

  corral_source_split_1926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1931;

  corral_source_split_1931:
    assume {:verifier.code 0} true;
    call {:si_unique_call 422} spin_lock_irq($p8);
    goto corral_source_split_1932;

  corral_source_split_1932:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1933;

  corral_source_split_1933:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_1934;

  corral_source_split_1934:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_1935;

  corral_source_split_1935:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_1936;

  corral_source_split_1936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 423} $i13 := readl($p12);
    goto SeqInstr_178, SeqInstr_179;

  SeqInstr_179:
    assume assertsPassed;
    goto SeqInstr_180;

  SeqInstr_180:
    call {:si_unique_call 424} {:cexpr "temp"} boogie_si_record_i32($i13);
    goto corral_source_split_1937;

  corral_source_split_1937:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_1938;

  corral_source_split_1938:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.2);
    goto corral_source_split_1939;

  corral_source_split_1939:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_1940;

  corral_source_split_1940:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.47);
    goto corral_source_split_1941;

  corral_source_split_1941:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_1942;

  corral_source_split_1942:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str);
    goto corral_source_split_1943;

  corral_source_split_1943:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_1944;

  corral_source_split_1944:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.48);
    goto corral_source_split_1945;

  corral_source_split_1945:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_1946;

  corral_source_split_1946:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_1947;

  corral_source_split_1947:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.6, $p19);
    goto corral_source_split_1948;

  corral_source_split_1948:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_1949;

  corral_source_split_1949:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 3541);
    goto corral_source_split_1950;

  corral_source_split_1950:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p19, $i22);
    goto corral_source_split_1951;

  corral_source_split_1951:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1952;

  corral_source_split_1952:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p23, 0);
    goto corral_source_split_1953;

  corral_source_split_1953:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_1954;

  corral_source_split_1954:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.7, $p24);
    goto corral_source_split_1955;

  corral_source_split_1955:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_1956;

  corral_source_split_1956:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_1957;

  corral_source_split_1957:
    assume {:verifier.code 0} true;
    call {:si_unique_call 425} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 426} {:cexpr "tmp___1"} boogie_si_record_i64($i28);
    goto corral_source_split_1958;

  corral_source_split_1958:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_1959;

  corral_source_split_1959:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1969;

  corral_source_split_1969:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_1970;

  corral_source_split_1970:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_1971;

  corral_source_split_1971:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_1972;

  corral_source_split_1972:
    assume {:verifier.code 0} true;
    call {:si_unique_call 429} writel(0, $p39);
    goto corral_source_split_1973;

  corral_source_split_1973:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1974;

  corral_source_split_1974:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_1975;

  corral_source_split_1975:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 68)), $mul.ref(16, 1));
    goto corral_source_split_1976;

  corral_source_split_1976:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_1977;

  corral_source_split_1977:
    assume {:verifier.code 0} true;
    call {:si_unique_call 430} writel(0, $p43);
    goto corral_source_split_1978;

  corral_source_split_1978:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(408, 1));
    goto corral_source_split_1979;

  corral_source_split_1979:
    assume {:verifier.code 0} true;
    $i45 := $load.i64($M.0, $p44);
    goto corral_source_split_1980;

  corral_source_split_1980:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i45);
    goto corral_source_split_1981;

  corral_source_split_1981:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1982;

  corral_source_split_1982:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_1983;

  corral_source_split_1983:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 68)), $mul.ref(20, 1));
    goto corral_source_split_1984;

  corral_source_split_1984:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_1985;

  corral_source_split_1985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 431} writel($i46, $p50);
    goto corral_source_split_1986;

  corral_source_split_1986:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_1987;

  corral_source_split_1987:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_1988;

  corral_source_split_1988:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_1989;

  corral_source_split_1989:
    assume {:verifier.code 0} true;
    $i54 := $load.i64($M.0, $p53);
    goto corral_source_split_1990;

  corral_source_split_1990:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i64.i32($i54);
    goto corral_source_split_1991;

  corral_source_split_1991:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1992;

  corral_source_split_1992:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_1993;

  corral_source_split_1993:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 68)), $mul.ref(24, 1));
    goto corral_source_split_1994;

  corral_source_split_1994:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_1995;

  corral_source_split_1995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 432} writel($i55, $p59);
    goto corral_source_split_1996;

  corral_source_split_1996:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_1997;

  corral_source_split_1997:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_1998;

  corral_source_split_1998:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1999;

  corral_source_split_1999:
    assume {:verifier.code 0} true;
    $p63 := $load.ref($M.0, $p62);
    goto corral_source_split_2000;

  corral_source_split_2000:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2001;

  corral_source_split_2001:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_2002;

  corral_source_split_2002:
    assume {:verifier.code 0} true;
    call {:si_unique_call 433} writel($i61, $p65);
    goto corral_source_split_2003;

  corral_source_split_2003:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    call {:si_unique_call 434} __const_udelay(4295000);
    goto corral_source_split_2005;

  corral_source_split_2005:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 435} __const_udelay(4295000);
    goto corral_source_split_2007;

  corral_source_split_2007:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    call {:si_unique_call 485} __const_udelay(4295000);
    goto corral_source_split_2194;

  corral_source_split_2194:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    call {:si_unique_call 486} __const_udelay(4295000);
    goto corral_source_split_2196;

  corral_source_split_2196:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    call {:si_unique_call 487} __const_udelay(4295000);
    goto corral_source_split_2198;

  corral_source_split_2198:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    call {:si_unique_call 488} __const_udelay(4295000);
    goto corral_source_split_2200;

  corral_source_split_2200:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    call {:si_unique_call 489} __const_udelay(4295000);
    goto corral_source_split_2202;

  corral_source_split_2202:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    call {:si_unique_call 490} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_2009;

  corral_source_split_2009:
    assume {:verifier.code 0} true;
    $i67 := $load.i32($M.0, $p66);
    goto corral_source_split_2010;

  corral_source_split_2010:
    assume {:verifier.code 0} true;
    $i68 := $and.i32($i67, 15);
    call {:si_unique_call 436} {:cexpr "i"} boogie_si_record_i32($i68);
    goto corral_source_split_2011;

  corral_source_split_2011:
    assume {:verifier.code 0} true;
    $i69 := $sub.i32($i68, 1);
    call {:si_unique_call 437} {:cexpr "i"} boogie_si_record_i32($i69);
    goto corral_source_split_2012;

  corral_source_split_2012:
    assume {:verifier.code 0} true;
    $i70 := $ne.i32($i68, 0);
    goto corral_source_split_2013;

  corral_source_split_2013:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i70 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_2058;

  corral_source_split_2058:
    assume {:verifier.code 0} true;
    $i103 := $load.i32($M.0, $p102);
    goto corral_source_split_2059;

  corral_source_split_2059:
    assume {:verifier.code 0} true;
    $i104 := $and.i32($i103, 15);
    call {:si_unique_call 448} {:cexpr "i"} boogie_si_record_i32($i104);
    goto corral_source_split_2060;

  corral_source_split_2060:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 449} __const_udelay(4295000);
    goto corral_source_split_2062;

  corral_source_split_2062:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    call {:si_unique_call 450} __const_udelay(4295000);
    goto corral_source_split_2064;

  corral_source_split_2064:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    call {:si_unique_call 467} __const_udelay(4295000);
    goto corral_source_split_2160;

  corral_source_split_2160:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    call {:si_unique_call 468} __const_udelay(4295000);
    goto corral_source_split_2162;

  corral_source_split_2162:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    call {:si_unique_call 469} __const_udelay(4295000);
    goto corral_source_split_2164;

  corral_source_split_2164:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 470} __const_udelay(4295000);
    goto corral_source_split_2166;

  corral_source_split_2166:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    call {:si_unique_call 471} __const_udelay(4295000);
    goto corral_source_split_2168;

  corral_source_split_2168:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    call {:si_unique_call 472} __const_udelay(4295000);
    goto corral_source_split_2170;

  corral_source_split_2170:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    call {:si_unique_call 473} __const_udelay(4295000);
    goto corral_source_split_2172;

  corral_source_split_2172:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 474} __const_udelay(4295000);
    goto corral_source_split_2174;

  corral_source_split_2174:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    call {:si_unique_call 475} __const_udelay(4295000);
    goto corral_source_split_2176;

  corral_source_split_2176:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    call {:si_unique_call 476} __const_udelay(4295000);
    goto corral_source_split_2178;

  corral_source_split_2178:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    call {:si_unique_call 477} __const_udelay(4295000);
    goto corral_source_split_2180;

  corral_source_split_2180:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    call {:si_unique_call 478} __const_udelay(4295000);
    goto corral_source_split_2182;

  corral_source_split_2182:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    call {:si_unique_call 479} __const_udelay(4295000);
    goto corral_source_split_2184;

  corral_source_split_2184:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    call {:si_unique_call 480} __const_udelay(4295000);
    goto corral_source_split_2186;

  corral_source_split_2186:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    call {:si_unique_call 481} __const_udelay(4295000);
    goto corral_source_split_2188;

  corral_source_split_2188:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    call {:si_unique_call 482} __const_udelay(4295000);
    goto corral_source_split_2190;

  corral_source_split_2190:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    call {:si_unique_call 483} __const_udelay(4295000);
    goto corral_source_split_2192;

  corral_source_split_2192:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    call {:si_unique_call 484} __const_udelay(4295000);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i105 := $sub.i32($i104, 1);
    call {:si_unique_call 451} {:cexpr "i"} boogie_si_record_i32($i105);
    goto corral_source_split_2066;

  corral_source_split_2066:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i104, 0);
    goto corral_source_split_2067;

  corral_source_split_2067:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    assume !($i106 == 1);
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2104;

  corral_source_split_2104:
    assume {:verifier.code 0} true;
    $p131 := $load.ref($M.0, $p130);
    goto corral_source_split_2105;

  corral_source_split_2105:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p131, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2106;

  corral_source_split_2106:
    assume {:verifier.code 0} true;
    $p133 := $bitcast.ref.ref($p132);
    goto corral_source_split_2107;

  corral_source_split_2107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 459} vslice_dummy_var_85 := readl($p133);
    goto SeqInstr_187, SeqInstr_188;

  SeqInstr_188:
    assume assertsPassed;
    goto SeqInstr_189;

  SeqInstr_189:
    goto corral_source_split_2108;

  corral_source_split_2108:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_2109;

  corral_source_split_2109:
    assume {:verifier.code 0} true;
    $p136 := $load.ref($M.0, $p135);
    goto corral_source_split_2110;

  corral_source_split_2110:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p136, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2111;

  corral_source_split_2111:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p137);
    goto corral_source_split_2112;

  corral_source_split_2112:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_2113;

  corral_source_split_2113:
    assume {:verifier.code 0} true;
    $i140 := $p2i.ref.i64($p139);
    goto corral_source_split_2114;

  corral_source_split_2114:
    assume {:verifier.code 0} true;
    $i141 := $ne.i64($i140, 0);
    goto corral_source_split_2115;

  corral_source_split_2115:
    assume {:verifier.code 0} true;
    assume {:branchcond $i141} true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i141 == 1);
    assume {:verifier.code 0} true;
    $i143 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_2120;

  corral_source_split_2120:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(436, 1));
    goto corral_source_split_2121;

  corral_source_split_2121:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p144);
    goto corral_source_split_2122;

  corral_source_split_2122:
    assume {:verifier.code 0} true;
    $i146 := $ne.i32($i145, 0);
    goto corral_source_split_2123;

  corral_source_split_2123:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i148 := $i143;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto corral_source_split_2128;

  corral_source_split_2128:
    assume {:verifier.code 0} true;
    $i149 := $ne.i32($i148, 0);
    goto corral_source_split_2129;

  corral_source_split_2129:
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i149 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 463} $i160 := msecs_to_jiffies(5);
    call {:si_unique_call 464} {:cexpr "tmp___9"} boogie_si_record_i64($i160);
    goto corral_source_split_2145;

  corral_source_split_2145:
    assume {:verifier.code 0} true;
    $i161 := $load.i64($M.0, jiffies);
    goto corral_source_split_2146;

  corral_source_split_2146:
    assume {:verifier.code 0} true;
    $i162 := $add.i64($i160, $i161);
    goto corral_source_split_2147;

  corral_source_split_2147:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(720, 1));
    goto corral_source_split_2148;

  corral_source_split_2148:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p163, $i162);
    goto corral_source_split_2149;

  corral_source_split_2149:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2150;

  corral_source_split_2150:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p164, 1);
    goto corral_source_split_2151;

  corral_source_split_2151:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2152;

  corral_source_split_2152:
    assume {:verifier.code 0} true;
    $p166 := $load.ref($M.0, $p165);
    goto corral_source_split_2153;

  corral_source_split_2153:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p166, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_2154;

  corral_source_split_2154:
    assume {:verifier.code 0} true;
    $p168 := $bitcast.ref.ref($p167);
    goto corral_source_split_2155;

  corral_source_split_2155:
    assume {:verifier.code 0} true;
    call {:si_unique_call 465} writel(55, $p168);
    goto corral_source_split_2156;

  corral_source_split_2156:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_2157;

  corral_source_split_2157:
    assume {:verifier.code 0} true;
    call {:si_unique_call 466} spin_unlock_irq($p169);
    goto corral_source_split_2158;

  corral_source_split_2158:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb49:
    assume $i149 == 1;
    goto corral_source_split_2131;

  corral_source_split_2131:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_2132;

  corral_source_split_2132:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_2133;

  corral_source_split_2133:
    assume {:verifier.code 0} true;
    $i152 := $or.i32($i151, $i148);
    goto corral_source_split_2134;

  corral_source_split_2134:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_2135;

  corral_source_split_2135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p153, $i152);
    goto corral_source_split_2136;

  corral_source_split_2136:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_2137;

  corral_source_split_2137:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_2138;

  corral_source_split_2138:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2139;

  corral_source_split_2139:
    assume {:verifier.code 0} true;
    $p157 := $load.ref($M.0, $p156);
    goto corral_source_split_2140;

  corral_source_split_2140:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p157, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2141;

  corral_source_split_2141:
    assume {:verifier.code 0} true;
    $p159 := $bitcast.ref.ref($p158);
    goto corral_source_split_2142;

  corral_source_split_2142:
    assume {:verifier.code 0} true;
    call {:si_unique_call 462} writel($i155, $p159);
    goto corral_source_split_2143;

  corral_source_split_2143:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb46:
    assume $i146 == 1;
    goto corral_source_split_2125;

  corral_source_split_2125:
    assume {:verifier.code 0} true;
    $i147 := $or.i32($i143, 16);
    call {:si_unique_call 461} {:cexpr "temp"} boogie_si_record_i32($i147);
    goto corral_source_split_2126;

  corral_source_split_2126:
    assume {:verifier.code 0} true;
    $i148 := $i147;
    goto $bb48;

  $bb43:
    assume $i141 == 1;
    goto corral_source_split_2117;

  corral_source_split_2117:
    assume {:verifier.code 0} true;
    $i142 := $or.i32(0, 32);
    call {:si_unique_call 460} {:cexpr "temp"} boogie_si_record_i32($i142);
    goto corral_source_split_2118;

  corral_source_split_2118:
    assume {:verifier.code 0} true;
    $i143 := $i142;
    goto $bb45;

  SeqInstr_187:
    assume !assertsPassed;
    return;

  $bb29:
    assume $i106 == 1;
    goto corral_source_split_2069;

  corral_source_split_2069:
    assume {:verifier.code 0} true;
    $i107 := $i105;
    goto $bb32;

  $bb32:
    call $p108, $p109, $p110, $p111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $p125, $i126, $p127, $i128, $i129, $i107 := oxu_bus_resume_loop_$bb32($p2, $p108, $p109, $p110, $p111, $i112, $p113, $i114, $i115, $p116, $i117, $i118, $i119, $i120, $i121, $p122, $p123, $p124, $p125, $i126, $p127, $i128, $i129, $i107);
    goto $bb32_last;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2073;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    $p109 := $load.ref($M.0, $p108);
    goto corral_source_split_2074;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p109, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_2075;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p110);
    goto corral_source_split_2076;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    $i112 := $sext.i32.i64($i107);
    goto corral_source_split_2077;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p111, $mul.ref($i112, 1));
    goto corral_source_split_2078;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} $i114 := readl($p113);
    goto SeqInstr_184, SeqInstr_185;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  SeqInstr_186:
    call {:si_unique_call 453} {:cexpr "temp"} boogie_si_record_i32($i114);
    goto corral_source_split_2079;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i107);
    goto corral_source_split_2080;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(560, 1));
    goto corral_source_split_2081;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} $i117 := variable_test_bit($i115, $p116);
    call {:si_unique_call 455} {:cexpr "tmp___7"} boogie_si_record_i32($i117);
    goto corral_source_split_2082;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    $i118 := $ne.i32($i117, 0);
    goto corral_source_split_2083;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i118 == 1);
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i128 := $sub.i32($i107, 1);
    call {:si_unique_call 458} {:cexpr "i"} boogie_si_record_i32($i128);
    goto corral_source_split_2099;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    $i129 := $ne.i32($i107, 0);
    goto corral_source_split_2100;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i129 == 1);
    goto corral_source_split_2102;

  corral_source_split_2102:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb40:
    assume $i129 == 1;
    assume {:verifier.code 0} true;
    $i107 := $i128;
    goto $bb40_dummy;

  $bb34:
    assume $i118 == 1;
    goto corral_source_split_2085;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i114, 128);
    goto corral_source_split_2086;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    $i120 := $ne.i32($i119, 0);
    goto corral_source_split_2087;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    assume !($i120 == 1);
    goto $bb36;

  $bb37:
    assume $i120 == 1;
    goto corral_source_split_2089;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    $i121 := $and.i32($i114, $sub.i32(0, 107));
    call {:si_unique_call 456} {:cexpr "temp"} boogie_si_record_i32($i121);
    goto corral_source_split_2090;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2091;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_2092;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_2093;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    $p125 := $bitcast.ref.ref($p124);
    goto corral_source_split_2094;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    $i126 := $sext.i32.i64($i107);
    goto corral_source_split_2095;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($p125, $mul.ref($i126, 1));
    goto corral_source_split_2096;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} writel($i121, $p127);
    goto corral_source_split_2097;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb39;

  SeqInstr_184:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i70 == 1;
    goto corral_source_split_2015;

  corral_source_split_2015:
    assume {:verifier.code 0} true;
    $i71 := $i69;
    goto $bb14;

  $bb14:
    call $p72, $p73, $p74, $p75, $i76, $p77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $i98, $p99, $i100, $i101, $i71 := oxu_bus_resume_loop_$bb14($p2, $p72, $p73, $p74, $p75, $i76, $p77, $i78, $i79, $i80, $p81, $i82, $i83, $i84, $i85, $i86, $i87, $i88, $i89, $p91, $i92, $i93, $p94, $p95, $p96, $p97, $i98, $p99, $i100, $i101, $i71);
    goto $bb14_last;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2019;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_2020;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p73, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_2021;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    $p75 := $bitcast.ref.ref($p74);
    goto corral_source_split_2022;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    $i76 := $sext.i32.i64($i71);
    goto corral_source_split_2023;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($p75, $mul.ref($i76, 1));
    goto corral_source_split_2024;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} $i78 := readl($p77);
    goto SeqInstr_181, SeqInstr_182;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  SeqInstr_183:
    call {:si_unique_call 439} {:cexpr "temp"} boogie_si_record_i32($i78);
    goto corral_source_split_2025;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    $i79 := $and.i32($i78, $sub.i32(0, 7340075));
    call {:si_unique_call 440} {:cexpr "temp"} boogie_si_record_i32($i79);
    goto corral_source_split_2026;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i71);
    goto corral_source_split_2027;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(560, 1));
    goto corral_source_split_2028;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} $i82 := variable_test_bit($i80, $p81);
    call {:si_unique_call 442} {:cexpr "tmp___4"} boogie_si_record_i32($i82);
    goto corral_source_split_2029;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    $i83 := $ne.i32($i82, 0);
    goto corral_source_split_2030;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i83 == 1);
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i93 := $i79;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2046;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_2047;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_2048;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    $p97 := $bitcast.ref.ref($p96);
    goto corral_source_split_2049;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i71);
    goto corral_source_split_2050;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($p97, $mul.ref($i98, 1));
    goto corral_source_split_2051;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} writel($i93, $p99);
    goto corral_source_split_2052;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    $i100 := $sub.i32($i71, 1);
    call {:si_unique_call 447} {:cexpr "i"} boogie_si_record_i32($i100);
    goto corral_source_split_2053;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    $i101 := $ne.i32($i71, 0);
    goto corral_source_split_2054;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i101 == 1);
    goto corral_source_split_2056;

  corral_source_split_2056:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb22:
    assume $i101 == 1;
    assume {:verifier.code 0} true;
    $i71 := $i100;
    goto $bb22_dummy;

  $bb16:
    assume $i83 == 1;
    goto corral_source_split_2032;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    $i84 := $and.i32($i79, 128);
    goto corral_source_split_2033;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    $i85 := $ne.i32($i84, 0);
    goto corral_source_split_2034;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume !($i85 == 1);
    goto $bb18;

  $bb19:
    assume $i85 == 1;
    goto corral_source_split_2036;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} $i86 := msecs_to_jiffies(20);
    call {:si_unique_call 444} {:cexpr "tmp___3"} boogie_si_record_i64($i86);
    goto corral_source_split_2037;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    $i87 := $load.i64($M.0, jiffies);
    goto corral_source_split_2038;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    $i88 := $add.i64($i86, $i87);
    goto corral_source_split_2039;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    $i89 := $sext.i32.i64($i71);
    goto corral_source_split_2040;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p2, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i89, 8));
    goto corral_source_split_2041;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p91, $i88);
    goto corral_source_split_2042;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    $i92 := $or.i32($i79, 64);
    call {:si_unique_call 445} {:cexpr "temp"} boogie_si_record_i32($i92);
    goto corral_source_split_2043;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    $i93 := $i92;
    goto $bb21;

  SeqInstr_181:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i29 == 1;
    goto corral_source_split_1961;

  corral_source_split_1961:
    assume {:verifier.code 0} true;
    call {:si_unique_call 427} $p30 := oxu_to_hcd($p2);
    goto corral_source_split_1962;

  corral_source_split_1962:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_1963;

  corral_source_split_1963:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.21, $p32);
    goto corral_source_split_1964;

  corral_source_split_1964:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i13, 0);
    goto corral_source_split_1965;

  corral_source_split_1965:
    assume {:verifier.code 0} true;
    $p35 := (if $i34 == 1 then .str.24 else .str.49);
    goto corral_source_split_1966;

  corral_source_split_1966:
    assume {:verifier.code 0} true;
    call {:si_unique_call 428} __dynamic_dev_dbg.ref.ref.ref.ref($p1, $p33, .str.48, $p35);
    goto corral_source_split_1967;

  corral_source_split_1967:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_178:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_1928;

  corral_source_split_1928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 421} msleep(5);
    goto corral_source_split_1929;

  corral_source_split_1929:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb40_dummy:
    assume false;
    return;

  $bb32_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2071;

  $bb22_dummy:
    assume false;
    return;

  $bb14_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;
}



const msleep: ref;

axiom msleep == $sub.ref(0, 235869);

procedure msleep($i0: i32);
  free requires assertsPassed;



implementation msleep($i0: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 491} {:cexpr "msleep:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2204;

  corral_source_split_2204:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock_irq: ref;

axiom spin_lock_irq == $sub.ref(0, 236901);

procedure spin_lock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2206;

  corral_source_split_2206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 492} ldv_spin_lock();
    goto corral_source_split_2207;

  corral_source_split_2207:
    assume {:verifier.code 0} true;
    call {:si_unique_call 493} ldv_spin_lock_irq_8($p0);
    goto corral_source_split_2208;

  corral_source_split_2208:
    assume {:verifier.code 0} true;
    return;
}



const oxu_to_hcd: ref;

axiom oxu_to_hcd == $sub.ref(0, 237933);

procedure oxu_to_hcd($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation oxu_to_hcd($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2210;

  corral_source_split_2210:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2211;

  corral_source_split_2211:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2212;

  corral_source_split_2212:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_2213;

  corral_source_split_2213:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref($sub.ref(0, 968), 968));
    goto corral_source_split_2214;

  corral_source_split_2214:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;
}



const __const_udelay: ref;

axiom __const_udelay == $sub.ref(0, 238965);

procedure __const_udelay($i0: i64);
  free requires assertsPassed;



implementation __const_udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 494} {:cexpr "__const_udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_2216;

  corral_source_split_2216:
    assume {:verifier.code 0} true;
    return;
}



const variable_test_bit: ref;

axiom variable_test_bit == $sub.ref(0, 239997);

procedure variable_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation variable_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 495} {:cexpr "variable_test_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 496} $i2 := devirtbounce.2(0, $p1, $i0);
    call {:si_unique_call 497} {:cexpr "oldbit"} boogie_si_record_i32($i2);
    goto corral_source_split_2218;

  corral_source_split_2218:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const msecs_to_jiffies: ref;

axiom msecs_to_jiffies == $sub.ref(0, 241029);

procedure msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 498} {:cexpr "msecs_to_jiffies:arg:m"} boogie_si_record_i32($i0);
    goto corral_source_split_2220;

  corral_source_split_2220:
    assume {:verifier.code 0} true;
    call {:si_unique_call 499} $i1 := __msecs_to_jiffies($i0);
    call {:si_unique_call 500} {:cexpr "tmp___0"} boogie_si_record_i64($i1);
    goto corral_source_split_2221;

  corral_source_split_2221:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const spin_unlock_irq: ref;

axiom spin_unlock_irq == $sub.ref(0, 242061);

procedure spin_unlock_irq($p0: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2223;

  corral_source_split_2223:
    assume {:verifier.code 0} true;
    call {:si_unique_call 501} ldv_spin_unlock();
    goto corral_source_split_2224;

  corral_source_split_2224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 502} ldv_spin_unlock_irq_11($p0);
    goto corral_source_split_2225;

  corral_source_split_2225:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock: ref;

axiom ldv_spin_unlock == $sub.ref(0, 243093);

procedure ldv_spin_unlock();
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_spin_unlock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2227;

  corral_source_split_2227:
    assume {:verifier.code 0} true;
    $M.22 := 0;
    call {:si_unique_call 503} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    goto corral_source_split_2228;

  corral_source_split_2228:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irq_11: ref;

axiom ldv_spin_unlock_irq_11 == $sub.ref(0, 244125);

procedure ldv_spin_unlock_irq_11($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_irq_11($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2230;

  corral_source_split_2230:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2231;

  corral_source_split_2231:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2232;

  corral_source_split_2232:
    assume {:verifier.code 0} true;
    call {:si_unique_call 504} _raw_spin_unlock_irq($p2);
    goto corral_source_split_2233;

  corral_source_split_2233:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irq: ref;

axiom _raw_spin_unlock_irq == $sub.ref(0, 245157);

procedure _raw_spin_unlock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2235;

  corral_source_split_2235:
    assume {:verifier.code 0} true;
    return;
}



const __msecs_to_jiffies: ref;

axiom __msecs_to_jiffies == $sub.ref(0, 246189);

procedure __msecs_to_jiffies($i0: i32) returns ($r: i64);
  free requires assertsPassed;



implementation __msecs_to_jiffies($i0: i32) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 505} {:cexpr "__msecs_to_jiffies:arg:arg0"} boogie_si_record_i32($i0);
    goto corral_source_split_2237;

  corral_source_split_2237:
    assume {:verifier.code 1} true;
    call {:si_unique_call 506} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 507} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_2238;

  corral_source_split_2238:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ldv_spin_lock: ref;

axiom ldv_spin_lock == $sub.ref(0, 247221);

procedure ldv_spin_lock();
  free requires assertsPassed;
  modifies $M.22;



implementation ldv_spin_lock()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2240;

  corral_source_split_2240:
    assume {:verifier.code 0} true;
    $M.22 := 1;
    call {:si_unique_call 508} {:cexpr "ldv_spin"} boogie_si_record_i32(1);
    goto corral_source_split_2241;

  corral_source_split_2241:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_irq_8: ref;

axiom ldv_spin_lock_irq_8 == $sub.ref(0, 248253);

procedure ldv_spin_lock_irq_8($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_irq_8($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2243;

  corral_source_split_2243:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_2244;

  corral_source_split_2244:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_2245;

  corral_source_split_2245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 509} _raw_spin_lock_irq($p2);
    goto corral_source_split_2246;

  corral_source_split_2246:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock_irq: ref;

axiom _raw_spin_lock_irq == $sub.ref(0, 249285);

procedure _raw_spin_lock_irq($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock_irq($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2248;

  corral_source_split_2248:
    assume {:verifier.code 0} true;
    return;
}



const ehci_quiesce: ref;

axiom ehci_quiesce == $sub.ref(0, 250317);

procedure ehci_quiesce($p0: ref);
  free requires assertsPassed;
  modifies $M.24, $M.25, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_quiesce($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2250;

  corral_source_split_2250:
    assume {:verifier.code 0} true;
    call {:si_unique_call 510} $p1 := oxu_to_hcd($p0);
    goto corral_source_split_2251;

  corral_source_split_2251:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2252;

  corral_source_split_2252:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.23, $p2);
    goto corral_source_split_2253;

  corral_source_split_2253:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 1);
    goto corral_source_split_2254;

  corral_source_split_2254:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2255;

  corral_source_split_2255:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2259;

  corral_source_split_2259:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2260;

  corral_source_split_2260:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2261;

  corral_source_split_2261:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2262;

  corral_source_split_2262:
    assume {:verifier.code 0} true;
    call {:si_unique_call 512} $i10 := readl($p9);
    goto SeqInstr_190, SeqInstr_191;

  SeqInstr_191:
    assume assertsPassed;
    goto SeqInstr_192;

  SeqInstr_192:
    call {:si_unique_call 513} {:cexpr "tmp___0"} boogie_si_record_i32($i10);
    goto corral_source_split_2263;

  corral_source_split_2263:
    assume {:verifier.code 0} true;
    $i11 := $shl.i32($i10, 10);
    call {:si_unique_call 514} {:cexpr "temp"} boogie_si_record_i32($i11);
    goto corral_source_split_2264;

  corral_source_split_2264:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 49152);
    call {:si_unique_call 515} {:cexpr "temp"} boogie_si_record_i32($i12);
    goto corral_source_split_2265;

  corral_source_split_2265:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2266;

  corral_source_split_2266:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2267;

  corral_source_split_2267:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_2268;

  corral_source_split_2268:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2269;

  corral_source_split_2269:
    assume {:verifier.code 0} true;
    call {:si_unique_call 516} $i17 := handshake($p0, $p16, 49152, $i12, 2000);
    goto SeqInstr_193, SeqInstr_194;

  SeqInstr_194:
    assume assertsPassed;
    goto SeqInstr_195;

  SeqInstr_195:
    call {:si_unique_call 517} {:cexpr "tmp___2"} boogie_si_record_i32($i17);
    goto corral_source_split_2270;

  corral_source_split_2270:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_2271;

  corral_source_split_2271:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2278;

  corral_source_split_2278:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_2279;

  corral_source_split_2279:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2280;

  corral_source_split_2280:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_2281;

  corral_source_split_2281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 519} $i25 := readl($p24);
    goto SeqInstr_196, SeqInstr_197;

  SeqInstr_197:
    assume assertsPassed;
    goto SeqInstr_198;

  SeqInstr_198:
    call {:si_unique_call 520} {:cexpr "temp"} boogie_si_record_i32($i25);
    goto corral_source_split_2282;

  corral_source_split_2282:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i25, $sub.i32(0, 113));
    call {:si_unique_call 521} {:cexpr "temp"} boogie_si_record_i32($i26);
    goto corral_source_split_2283;

  corral_source_split_2283:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2284;

  corral_source_split_2284:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2285;

  corral_source_split_2285:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2286;

  corral_source_split_2286:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2287;

  corral_source_split_2287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 522} writel($i26, $p30);
    goto corral_source_split_2288;

  corral_source_split_2288:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2289;

  corral_source_split_2289:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_2290;

  corral_source_split_2290:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_2291;

  corral_source_split_2291:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p33);
    goto corral_source_split_2292;

  corral_source_split_2292:
    assume {:verifier.code 0} true;
    call {:si_unique_call 523} $i35 := handshake($p0, $p34, 49152, 0, 2000);
    goto SeqInstr_199, SeqInstr_200;

  SeqInstr_200:
    assume assertsPassed;
    goto SeqInstr_201;

  SeqInstr_201:
    call {:si_unique_call 524} {:cexpr "tmp___4"} boogie_si_record_i32($i35);
    goto corral_source_split_2293;

  corral_source_split_2293:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_2294;

  corral_source_split_2294:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    return;

  $bb9:
    assume $i36 == 1;
    goto corral_source_split_2296;

  corral_source_split_2296:
    assume {:verifier.code 0} true;
    call {:si_unique_call 525} $p37 := oxu_to_hcd($p0);
    goto corral_source_split_2297;

  corral_source_split_2297:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2298;

  corral_source_split_2298:
    assume {:verifier.code 0} true;
    $M.25 := $store.i32($M.25, $p38, 0);
    goto corral_source_split_2299;

  corral_source_split_2299:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_199:
    assume !assertsPassed;
    return;

  SeqInstr_196:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i18 == 1;
    goto corral_source_split_2273;

  corral_source_split_2273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 518} $p19 := oxu_to_hcd($p0);
    goto corral_source_split_2274;

  corral_source_split_2274:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2275;

  corral_source_split_2275:
    assume {:verifier.code 0} true;
    $M.24 := $store.i32($M.24, $p20, 0);
    goto corral_source_split_2276;

  corral_source_split_2276:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_193:
    assume !assertsPassed;
    return;

  SeqInstr_190:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    call {:si_unique_call 511} devirtbounce.3(0, .str, 398, 12);
    goto corral_source_split_2257;

  corral_source_split_2257:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call ehci_quiesce_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const ehci_work: ref;

axiom ehci_work == $sub.ref(0, 251349);

procedure ehci_work($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.60, $M.48, $M.22, $M.50, $CurrAddr, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.46, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.57, $M.8, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_work($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i8;
  var $i13: i8;
  var $i14: i8;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i8;
  var $i20: i8;
  var $p21: ref;
  var $p22: ref;
  var $i23: i32;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2301;

  corral_source_split_2301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 526} timer_action_done($p0, 0);
    goto corral_source_split_2302;

  corral_source_split_2302:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2303;

  corral_source_split_2303:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(392, 1));
    goto corral_source_split_2304;

  corral_source_split_2304:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2305;

  corral_source_split_2305:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2306;

  corral_source_split_2306:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2307;

  corral_source_split_2307:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p0);
    goto corral_source_split_2312;

  corral_source_split_2312:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p6, $mul.ref(392, 1));
    goto corral_source_split_2313;

  corral_source_split_2313:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_2314;

  corral_source_split_2314:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    goto corral_source_split_2315;

  corral_source_split_2315:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_2316;

  corral_source_split_2316:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(392, 1));
    goto corral_source_split_2320;

  corral_source_split_2320:
    assume {:verifier.code 0} true;
    $i12 := $load.i8($M.0, $p11);
    goto corral_source_split_2321;

  corral_source_split_2321:
    assume {:verifier.code 0} true;
    $i13 := $and.i8($i12, $sub.i8(0, 3));
    goto corral_source_split_2322;

  corral_source_split_2322:
    assume {:verifier.code 0} true;
    $i14 := $or.i8($i13, 2);
    goto corral_source_split_2323;

  corral_source_split_2323:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, $i14);
    goto corral_source_split_2324;

  corral_source_split_2324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 528} scan_async($p0);
    goto SeqInstr_205, SeqInstr_206;

  SeqInstr_206:
    assume assertsPassed;
    goto SeqInstr_207;

  SeqInstr_207:
    goto corral_source_split_2325;

  corral_source_split_2325:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(432, 1));
    goto corral_source_split_2326;

  corral_source_split_2326:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_2327;

  corral_source_split_2327:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, $sub.i32(0, 1));
    goto corral_source_split_2328;

  corral_source_split_2328:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(392, 1));
    goto corral_source_split_2333;

  corral_source_split_2333:
    assume {:verifier.code 0} true;
    $i19 := $load.i8($M.0, $p18);
    goto corral_source_split_2334;

  corral_source_split_2334:
    assume {:verifier.code 0} true;
    $i20 := $and.i8($i19, $sub.i8(0, 3));
    goto corral_source_split_2335;

  corral_source_split_2335:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, $i20);
    goto corral_source_split_2336;

  corral_source_split_2336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 530} $p21 := oxu_to_hcd($p0);
    goto corral_source_split_2337;

  corral_source_split_2337:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2338;

  corral_source_split_2338:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.26, $p22);
    goto corral_source_split_2339;

  corral_source_split_2339:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 1);
    goto corral_source_split_2340;

  corral_source_split_2340:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_2341;

  corral_source_split_2341:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i25 == 1);
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i25 == 1;
    goto corral_source_split_2343;

  corral_source_split_2343:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_2344;

  corral_source_split_2344:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_2345;

  corral_source_split_2345:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2346;

  corral_source_split_2346:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_2347;

  corral_source_split_2347:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_2348;

  corral_source_split_2348:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2349;

  corral_source_split_2349:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_2350;

  corral_source_split_2350:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i32 == 1);
    goto corral_source_split_2354;

  corral_source_split_2354:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(436, 1));
    goto corral_source_split_2355;

  corral_source_split_2355:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2356;

  corral_source_split_2356:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i34, 0);
    goto corral_source_split_2357;

  corral_source_split_2357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb13;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 531} timer_action($p0, 0);
    goto corral_source_split_2352;

  corral_source_split_2352:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i32 == 1;
    goto $bb15;

  $bb8:
    assume $i17 == 1;
    goto corral_source_split_2330;

  corral_source_split_2330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 529} scan_periodic($p0);
    goto SeqInstr_208, SeqInstr_209;

  SeqInstr_209:
    assume assertsPassed;
    goto SeqInstr_210;

  SeqInstr_210:
    goto corral_source_split_2331;

  corral_source_split_2331:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_208:
    assume !assertsPassed;
    return;

  SeqInstr_205:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i10 == 1;
    goto corral_source_split_2318;

  corral_source_split_2318:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2309;

  corral_source_split_2309:
    assume {:verifier.code 0} true;
    call {:si_unique_call 527} end_unlink_async($p0);
    goto SeqInstr_202, SeqInstr_203;

  SeqInstr_203:
    assume assertsPassed;
    goto SeqInstr_204;

  SeqInstr_204:
    goto corral_source_split_2310;

  corral_source_split_2310:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_202:
    assume !assertsPassed;
    return;
}



const set_bit: ref;

axiom set_bit == $sub.ref(0, 252381);

procedure set_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation set_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 532} {:cexpr "set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 533} devirtbounce.4(0, $p1, $i0, $p1);
    goto corral_source_split_2359;

  corral_source_split_2359:
    assume {:verifier.code 0} true;
    return;
}



const device_may_wakeup: ref;

axiom device_may_wakeup == $sub.ref(0, 253413);

procedure device_may_wakeup($p0: ref) returns ($r: i1);
  free requires assertsPassed;



implementation device_may_wakeup($p0: ref) returns ($r: i1)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $i11: i1;
  var $i6: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2361;

  corral_source_split_2361:
    assume {:verifier.code 0} true;
    $p1 := $bitcast.ref.ref($p0);
    goto corral_source_split_2362;

  corral_source_split_2362:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($p1, $mul.ref(524, 1));
    goto corral_source_split_2363;

  corral_source_split_2363:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_2364;

  corral_source_split_2364:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_2365;

  corral_source_split_2365:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2366;

  corral_source_split_2366:
    assume {:verifier.code 0} true;
    $i6 := 0;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2373;

  corral_source_split_2373:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_2368;

  corral_source_split_2368:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 1424)), $mul.ref(520, 1)), $mul.ref(200, 1));
    goto corral_source_split_2369;

  corral_source_split_2369:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_2370;

  corral_source_split_2370:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p9);
    goto corral_source_split_2371;

  corral_source_split_2371:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    assume {:verifier.code 0} true;
    $i6 := $i11;
    goto $bb3;
}



const ldv_del_timer_sync_29: ref;

axiom ldv_del_timer_sync_29 == $sub.ref(0, 254445);

procedure ldv_del_timer_sync_29($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.31, $M.33;



implementation ldv_del_timer_sync_29($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2375;

  corral_source_split_2375:
    assume {:verifier.code 0} true;
    call {:si_unique_call 534} $i1 := del_timer_sync($p0);
    call {:si_unique_call 535} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_2376;

  corral_source_split_2376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 536} disable_suitable_timer_1($p0);
    goto corral_source_split_2377;

  corral_source_split_2377:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ehci_halt: ref;

axiom ehci_halt == $sub.ref(0, 255477);

procedure ehci_halt($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_halt($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2379;

  corral_source_split_2379:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2380;

  corral_source_split_2380:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2381;

  corral_source_split_2381:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_2382;

  corral_source_split_2382:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_2383;

  corral_source_split_2383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 537} $i5 := readl($p4);
    goto SeqInstr_211, SeqInstr_212;

  SeqInstr_212:
    assume assertsPassed;
    goto SeqInstr_213;

  SeqInstr_213:
    call {:si_unique_call 538} {:cexpr "tmp"} boogie_si_record_i32($i5);
    goto corral_source_split_2384;

  corral_source_split_2384:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2385;

  corral_source_split_2385:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2386;

  corral_source_split_2386:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 68)), $mul.ref(8, 1));
    goto corral_source_split_2387;

  corral_source_split_2387:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_2388;

  corral_source_split_2388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 539} writel(0, $p9);
    goto corral_source_split_2389;

  corral_source_split_2389:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i5, 4096);
    goto corral_source_split_2390;

  corral_source_split_2390:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i10, 0);
    goto corral_source_split_2391;

  corral_source_split_2391:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2397;

  corral_source_split_2397:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_2398;

  corral_source_split_2398:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2399;

  corral_source_split_2399:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_2400;

  corral_source_split_2400:
    assume {:verifier.code 0} true;
    call {:si_unique_call 540} $i17 := readl($p16);
    goto SeqInstr_214, SeqInstr_215;

  SeqInstr_215:
    assume assertsPassed;
    goto SeqInstr_216;

  SeqInstr_216:
    call {:si_unique_call 541} {:cexpr "temp"} boogie_si_record_i32($i17);
    goto corral_source_split_2401;

  corral_source_split_2401:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, $sub.i32(0, 2));
    call {:si_unique_call 542} {:cexpr "temp"} boogie_si_record_i32($i18);
    goto corral_source_split_2402;

  corral_source_split_2402:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2403;

  corral_source_split_2403:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_2404;

  corral_source_split_2404:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_2405;

  corral_source_split_2405:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_2406;

  corral_source_split_2406:
    assume {:verifier.code 0} true;
    call {:si_unique_call 543} writel($i18, $p22);
    goto corral_source_split_2407;

  corral_source_split_2407:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2408;

  corral_source_split_2408:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_2409;

  corral_source_split_2409:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_2410;

  corral_source_split_2410:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_2411;

  corral_source_split_2411:
    assume {:verifier.code 0} true;
    call {:si_unique_call 544} $i27 := handshake($p0, $p26, 4096, 4096, 2000);
    goto SeqInstr_217, SeqInstr_218;

  SeqInstr_218:
    assume assertsPassed;
    goto SeqInstr_219;

  SeqInstr_219:
    call {:si_unique_call 545} {:cexpr "tmp___0"} boogie_si_record_i32($i27);
    goto corral_source_split_2412;

  corral_source_split_2412:
    assume {:verifier.code 0} true;
    $i12 := $i27;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2395;

  corral_source_split_2395:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  SeqInstr_217:
    assume !assertsPassed;
    return;

  SeqInstr_214:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_2393;

  corral_source_split_2393:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb3;

  SeqInstr_211:
    assume !assertsPassed;
    return;
}



const handshake: ref;

axiom handshake == $sub.ref(0, 256509);

procedure handshake($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation handshake($p0: ref, $p1: ref, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i9: i32;
  var $i10: i32;
  var $i11: i1;
  var $i7: i32;
  var $i8: i32;
  var $i13: i32;
  var $i14: i1;
  var $i15: i32;
  var $i16: i1;
  var $i12: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 546} {:cexpr "handshake:arg:mask"} boogie_si_record_i32($i2);
    call {:si_unique_call 547} {:cexpr "handshake:arg:done"} boogie_si_record_i32($i3);
    call {:si_unique_call 548} {:cexpr "handshake:arg:usec"} boogie_si_record_i32($i4);
    goto corral_source_split_2414;

  corral_source_split_2414:
    assume {:verifier.code 0} true;
    call {:si_unique_call 549} $i5 := readl($p1);
    goto SeqInstr_220, SeqInstr_221;

  SeqInstr_221:
    assume assertsPassed;
    goto SeqInstr_222;

  SeqInstr_222:
    call {:si_unique_call 550} {:cexpr "result"} boogie_si_record_i32($i5);
    goto corral_source_split_2415;

  corral_source_split_2415:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, $sub.i32(0, 1));
    goto corral_source_split_2416;

  corral_source_split_2416:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i6 == 1);
    goto corral_source_split_2418;

  corral_source_split_2418:
    assume {:verifier.code 0} true;
    $i7, $i8 := $i5, $i4;
    goto $bb4;

  $bb4:
    call $i9, $i10, $i11, $i7, $i8, $i13, $i14, $i15, $i16 := handshake_loop_$bb4($p1, $i2, $i3, $i9, $i10, $i11, $i7, $i8, $i13, $i14, $i15, $i16);
    goto $bb4_last;

  $bb9:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i7, $i2);
    call {:si_unique_call 553} {:cexpr "result"} boogie_si_record_i32($i13);
    goto corral_source_split_2428;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $i3);
    goto corral_source_split_2429;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __const_udelay(4295);
    goto corral_source_split_2433;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    $i15 := $sub.i32($i8, 1);
    call {:si_unique_call 555} {:cexpr "usec"} boogie_si_record_i32($i15);
    goto corral_source_split_2434;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    $i16 := $sgt.i32($i15, 0);
    goto corral_source_split_2435;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    $i9 := $i15;
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 110);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_2426;

  corral_source_split_2426:
    assume {:verifier.code 0} true;
    $r := $i12;
    return;

  $bb5:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} $i10 := readl($p1);
    goto SeqInstr_223, SeqInstr_224;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  SeqInstr_225:
    call {:si_unique_call 552} {:cexpr "result"} boogie_si_record_i32($i10);
    goto corral_source_split_2421;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, $sub.i32(0, 1));
    goto corral_source_split_2422;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    $i7, $i8 := $i10, $i9;
    goto $bb7_dummy;

  $bb6:
    assume $i11 == 1;
    goto corral_source_split_2424;

  corral_source_split_2424:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i12 := $sub.i32(0, 19);
    goto $bb8;

  SeqInstr_223:
    assume !assertsPassed;
    return;

  $bb10:
    assume $i14 == 1;
    goto corral_source_split_2431;

  corral_source_split_2431:
    assume {:verifier.code 0} true;
    $i12 := 0;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb2;

  SeqInstr_220:
    assume !assertsPassed;
    return;

  $bb7_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;
}



const del_timer_sync: ref;

axiom del_timer_sync == $sub.ref(0, 257541);

procedure del_timer_sync($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer_sync($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_2437;

  corral_source_split_2437:
    assume {:verifier.code 1} true;
    call {:si_unique_call 556} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 557} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_2438;

  corral_source_split_2438:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_suitable_timer_1: ref;

axiom disable_suitable_timer_1 == $sub.ref(0, 258573);

procedure disable_suitable_timer_1($p0: ref);
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.31, $M.33;



implementation disable_suitable_timer_1($p0: ref)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i1;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i1;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $i24: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2440;

  corral_source_split_2440:
    assume {:verifier.code 0} true;
    $i1 := $M.27;
    goto corral_source_split_2441;

  corral_source_split_2441:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_2442;

  corral_source_split_2442:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i7 := $M.29;
    goto corral_source_split_2453;

  corral_source_split_2453:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_2454;

  corral_source_split_2454:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i13 := $M.31;
    goto corral_source_split_2465;

  corral_source_split_2465:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_2466;

  corral_source_split_2466:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i19 := $M.33;
    goto corral_source_split_2477;

  corral_source_split_2477:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_2478;

  corral_source_split_2478:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb20:
    assume $i20 == 1;
    goto corral_source_split_2480;

  corral_source_split_2480:
    assume {:verifier.code 0} true;
    $i21 := $p2i.ref.i64($p0);
    goto corral_source_split_2481;

  corral_source_split_2481:
    assume {:verifier.code 0} true;
    $p22 := $M.34;
    goto corral_source_split_2482;

  corral_source_split_2482:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p22);
    goto corral_source_split_2483;

  corral_source_split_2483:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i21, $i23);
    goto corral_source_split_2484;

  corral_source_split_2484:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb22;

  $bb23:
    assume $i24 == 1;
    goto corral_source_split_2486;

  corral_source_split_2486:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 561} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_2487;

  corral_source_split_2487:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume $i14 == 1;
    goto corral_source_split_2468;

  corral_source_split_2468:
    assume {:verifier.code 0} true;
    $i15 := $p2i.ref.i64($p0);
    goto corral_source_split_2469;

  corral_source_split_2469:
    assume {:verifier.code 0} true;
    $p16 := $M.32;
    goto corral_source_split_2470;

  corral_source_split_2470:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2471;

  corral_source_split_2471:
    assume {:verifier.code 0} true;
    $i18 := $eq.i64($i15, $i17);
    goto corral_source_split_2472;

  corral_source_split_2472:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb16;

  $bb17:
    assume $i18 == 1;
    goto corral_source_split_2474;

  corral_source_split_2474:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 560} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_2475;

  corral_source_split_2475:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_2456;

  corral_source_split_2456:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p0);
    goto corral_source_split_2457;

  corral_source_split_2457:
    assume {:verifier.code 0} true;
    $p10 := $M.30;
    goto corral_source_split_2458;

  corral_source_split_2458:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_2459;

  corral_source_split_2459:
    assume {:verifier.code 0} true;
    $i12 := $eq.i64($i9, $i11);
    goto corral_source_split_2460;

  corral_source_split_2460:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb10;

  $bb11:
    assume $i12 == 1;
    goto corral_source_split_2462;

  corral_source_split_2462:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 559} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_2463;

  corral_source_split_2463:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_2444;

  corral_source_split_2444:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p0);
    goto corral_source_split_2445;

  corral_source_split_2445:
    assume {:verifier.code 0} true;
    $p4 := $M.28;
    goto corral_source_split_2446;

  corral_source_split_2446:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_2447;

  corral_source_split_2447:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i3, $i5);
    goto corral_source_split_2448;

  corral_source_split_2448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb3;

  $bb4:
    assume $i6 == 1;
    goto corral_source_split_2450;

  corral_source_split_2450:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 558} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_2451;

  corral_source_split_2451:
    assume {:verifier.code 0} true;
    goto $bb6;
}



const timer_action_done: ref;

axiom timer_action_done == $sub.ref(0, 259605);

procedure timer_action_done($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation timer_action_done($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 562} {:cexpr "timer_action_done:arg:action"} boogie_si_record_i32($i1);
    goto corral_source_split_2489;

  corral_source_split_2489:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2490;

  corral_source_split_2490:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(704, 1));
    goto corral_source_split_2491;

  corral_source_split_2491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 563} clear_bit($i2, $p3);
    goto corral_source_split_2492;

  corral_source_split_2492:
    assume {:verifier.code 0} true;
    return;
}



const end_unlink_async: ref;

axiom end_unlink_async == $sub.ref(0, 260637);

procedure end_unlink_async($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.60, $M.48, $M.22, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.50, $M.46, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr, $M.47, $M.58, $M.59, $M.8, $M.39, assertsPassed;



implementation end_unlink_async($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i8;
  var $i11: i8;
  var $p12: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $i34: i64;
  var $i35: i1;
  var $p36: ref;
  var vslice_dummy_var_86: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2494;

  corral_source_split_2494:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_2495;

  corral_source_split_2495:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_2496;

  corral_source_split_2496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 564} timer_action_done($p0, 1);
    goto corral_source_split_2497;

  corral_source_split_2497:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_2498;

  corral_source_split_2498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p3, 3);
    goto corral_source_split_2499;

  corral_source_split_2499:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2500;

  corral_source_split_2500:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_2501;

  corral_source_split_2501:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p5, $0.ref);
    goto corral_source_split_2502;

  corral_source_split_2502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 565} qh_put($p2);
    goto SeqInstr_226, SeqInstr_227;

  SeqInstr_227:
    assume assertsPassed;
    goto SeqInstr_228;

  SeqInstr_228:
    goto corral_source_split_2503;

  corral_source_split_2503:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_2504;

  corral_source_split_2504:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_2505;

  corral_source_split_2505:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_2506;

  corral_source_split_2506:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p7);
    goto corral_source_split_2507;

  corral_source_split_2507:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(392, 1));
    goto corral_source_split_2508;

  corral_source_split_2508:
    assume {:verifier.code 0} true;
    $i10 := $load.i8($M.0, $p9);
    goto corral_source_split_2509;

  corral_source_split_2509:
    assume {:verifier.code 0} true;
    $i11 := $and.i8($i10, $sub.i8(0, 2));
    goto corral_source_split_2510;

  corral_source_split_2510:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i11);
    goto corral_source_split_2511;

  corral_source_split_2511:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_2512;

  corral_source_split_2512:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p12, $0.ref);
    goto corral_source_split_2513;

  corral_source_split_2513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 566} vslice_dummy_var_86 := qh_completions($p0, $p2);
    goto SeqInstr_229, SeqInstr_230;

  SeqInstr_230:
    assume assertsPassed;
    goto SeqInstr_231;

  SeqInstr_231:
    goto corral_source_split_2514;

  corral_source_split_2514:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2515;

  corral_source_split_2515:
    assume {:verifier.code 0} true;
    call {:si_unique_call 567} $i15 := list_empty($p14);
    call {:si_unique_call 568} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_2516;

  corral_source_split_2516:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 0);
    goto corral_source_split_2517;

  corral_source_split_2517:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    goto corral_source_split_2526;

  corral_source_split_2526:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    call {:si_unique_call 571} qh_put($p2);
    goto SeqInstr_235, SeqInstr_236;

  SeqInstr_236:
    assume assertsPassed;
    goto SeqInstr_237;

  SeqInstr_237:
    goto corral_source_split_2533;

  corral_source_split_2533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 572} $p22 := oxu_to_hcd($p0);
    goto corral_source_split_2534;

  corral_source_split_2534:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2535;

  corral_source_split_2535:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.36, $p23);
    goto corral_source_split_2536;

  corral_source_split_2536:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 1);
    goto corral_source_split_2537;

  corral_source_split_2537:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_2538;

  corral_source_split_2538:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i34 := $p2i.ref.i64($p7);
    goto corral_source_split_2540;

  corral_source_split_2540:
    assume {:verifier.code 0} true;
    $i35 := $ne.i64($i34, 0);
    goto corral_source_split_2541;

  corral_source_split_2541:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i35 == 1;
    goto corral_source_split_2555;

  corral_source_split_2555:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_2556;

  corral_source_split_2556:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p36, $0.ref);
    goto corral_source_split_2557;

  corral_source_split_2557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 574} start_unlink_async($p0, $p7);
    goto SeqInstr_238, SeqInstr_239;

  SeqInstr_239:
    assume assertsPassed;
    goto SeqInstr_240;

  SeqInstr_240:
    goto corral_source_split_2558;

  corral_source_split_2558:
    assume {:verifier.code 0} true;
    goto $bb16;

  SeqInstr_238:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_2543;

  corral_source_split_2543:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_2544;

  corral_source_split_2544:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_2545;

  corral_source_split_2545:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2546;

  corral_source_split_2546:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_2547;

  corral_source_split_2547:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2548;

  corral_source_split_2548:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_2549;

  corral_source_split_2549:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_2550;

  corral_source_split_2550:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb10;

  $bb11:
    assume $i33 == 1;
    goto corral_source_split_2552;

  corral_source_split_2552:
    assume {:verifier.code 0} true;
    call {:si_unique_call 573} timer_action($p0, 3);
    goto corral_source_split_2553;

  corral_source_split_2553:
    assume {:verifier.code 0} true;
    goto $bb13;

  SeqInstr_235:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i16 == 1;
    goto corral_source_split_2519;

  corral_source_split_2519:
    assume {:verifier.code 0} true;
    call {:si_unique_call 569} $p17 := oxu_to_hcd($p0);
    goto corral_source_split_2520;

  corral_source_split_2520:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2521;

  corral_source_split_2521:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.35, $p18);
    goto corral_source_split_2522;

  corral_source_split_2522:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 1);
    goto corral_source_split_2523;

  corral_source_split_2523:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2524;

  corral_source_split_2524:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i21 == 1);
    goto corral_source_split_2531;

  corral_source_split_2531:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i21 == 1;
    goto corral_source_split_2528;

  corral_source_split_2528:
    assume {:verifier.code 0} true;
    call {:si_unique_call 570} qh_link_async($p0, $p2);
    goto SeqInstr_232, SeqInstr_233;

  SeqInstr_233:
    assume assertsPassed;
    goto SeqInstr_234;

  SeqInstr_234:
    goto corral_source_split_2529;

  corral_source_split_2529:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_232:
    assume !assertsPassed;
    return;

  SeqInstr_229:
    assume !assertsPassed;
    return;

  SeqInstr_226:
    assume !assertsPassed;
    return;
}



const scan_async: ref;

axiom scan_async == $sub.ref(0, 261669);

procedure scan_async($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.48, $M.22, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.50, $M.60, $M.46, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr, $M.47, $M.58, $M.59, $M.8, $M.39, assertsPassed;



implementation scan_async($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p24: ref;
  var $i25: i32;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $p33: ref;
  var $i34: i32;
  var $i35: i1;
  var $p36: ref;
  var $p37: ref;
  var $i38: i32;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p54: ref;
  var $p55: ref;
  var $i56: i32;
  var $i57: i1;
  var $p58: ref;
  var $i59: i32;
  var $p60: ref;
  var $i61: i32;
  var $i62: i1;
  var $p64: ref;
  var $p65: ref;
  var $i66: i64;
  var $i67: i1;
  var $p68: ref;
  var $i69: i8;
  var $i70: i32;
  var $i71: i1;
  var $i63: i32;
  var $i72: i32;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $i76: i64;
  var $i77: i1;
  var $i78: i32;
  var $i53: i32;
  var $i23: i32;
  var $i79: i32;
  var $i80: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2560;

  corral_source_split_2560:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2561;

  corral_source_split_2561:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_2562;

  corral_source_split_2562:
    assume {:verifier.code 0} true;
    $i3 := $add.i32($i2, 1);
    goto corral_source_split_2563;

  corral_source_split_2563:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2564;

  corral_source_split_2564:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, $i3);
    goto corral_source_split_2565;

  corral_source_split_2565:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2566;

  corral_source_split_2566:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_2567;

  corral_source_split_2567:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_2568;

  corral_source_split_2568:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    call {:si_unique_call 575} timer_action_done($p0, 2);
    goto corral_source_split_2577;

  corral_source_split_2577:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_2578;

  corral_source_split_2578:
    assume {:verifier.code 0} true;
    $p13 := $load.ref($M.0, $p12);
    goto corral_source_split_2579;

  corral_source_split_2579:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p13, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2580;

  corral_source_split_2580:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p14);
    goto corral_source_split_2581;

  corral_source_split_2581:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_2582;

  corral_source_split_2582:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_2583;

  corral_source_split_2583:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_2584;

  corral_source_split_2584:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_2585;

  corral_source_split_2585:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_2586;

  corral_source_split_2586:
    assume {:verifier.code 0} true;
    call {:si_unique_call 576} $i21 := ldv__builtin_expect($i20, 1);
    call {:si_unique_call 577} {:cexpr "tmp___2"} boogie_si_record_i64($i21);
    goto corral_source_split_2587;

  corral_source_split_2587:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_2588;

  corral_source_split_2588:
    assume {:verifier.code 0} true;
    $i23 := 0;
    assume {:branchcond $i22} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i22 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i79 := $i23;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto corral_source_split_2668;

  corral_source_split_2668:
    assume {:verifier.code 0} true;
    $i80 := $eq.i32($i79, 2);
    goto corral_source_split_2669;

  corral_source_split_2669:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    return;

  $bb36:
    assume $i80 == 1;
    goto corral_source_split_2671;

  corral_source_split_2671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 589} timer_action($p0, 2);
    goto corral_source_split_2672;

  corral_source_split_2672:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb4:
    assume $i22 == 1;
    goto corral_source_split_2590;

  corral_source_split_2590:
    assume {:verifier.code 0} true;
    $p24, $i25 := $p16, 0;
    goto $bb7;

  $bb7:
    call $p24, $i25, $p26, $i27, $p28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $p36, $p37, $i38, $p39, $i40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p54, $p55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i63, $i72, $p73, $p74, $p75, $i76, $i77, $i78, $i53 := scan_async_loop_$bb7($p0, $p12, $p24, $i25, $p26, $i27, $p28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $p36, $p37, $i38, $p39, $i40, $i41, $i42, $p43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $i51, $i52, $p54, $p55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i63, $i72, $p73, $p74, $p75, $i76, $i77, $i78, $i53);
    goto $bb7_last;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    $p26, $i27 := $p24, $i25;
    goto $bb8;

  $bb8:
    call $p26, $i27, $p28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $p36, $p37, $i38, $p39, $i40, $i41, $i42, $p54, $p55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i63, $i72, $p73, $p74, $p75, $i76, $i77, $i78 := scan_async_loop_$bb8($p0, $p26, $i27, $p28, $i29, $i30, $p31, $i32, $p33, $i34, $i35, $p36, $p37, $i38, $p39, $i40, $i41, $i42, $p54, $p55, $i56, $i57, $p58, $i59, $p60, $i61, $i62, $p64, $p65, $i66, $i67, $p68, $i69, $i70, $i71, $i63, $i72, $p73, $p74, $p75, $i76, $i77, $i78);
    goto $bb8_last;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p26, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2595;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} $i29 := list_empty($p28);
    call {:si_unique_call 579} {:cexpr "tmp___0"} boogie_si_record_i32($i29);
    goto corral_source_split_2596;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 0);
    goto corral_source_split_2597;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p54 := $p26;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2631;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} $i56 := list_empty($p55);
    call {:si_unique_call 587} {:cexpr "tmp___1"} boogie_si_record_i32($i56);
    goto corral_source_split_2632;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    $i57 := $ne.i32($i56, 0);
    goto corral_source_split_2633;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i72 := $i27;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p54, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2662;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    $p74 := $bitcast.ref.ref($p73);
    goto corral_source_split_2663;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_2664;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    $i76 := $p2i.ref.i64($p75);
    goto corral_source_split_2665;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_2666;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    $i78 := $i72;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i79 := $i78;
    goto $bb35;

  $bb32:
    assume $i77 == 1;
    assume {:verifier.code 0} true;
    $p26, $i27 := $p75, $i72;
    goto $bb32_dummy;

  $bb20:
    assume $i57 == 1;
    goto corral_source_split_2635;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p54, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2636;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2637;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2638;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    $i61 := $load.i32($M.0, $p60);
    goto corral_source_split_2639;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i59, $i61);
    goto corral_source_split_2640;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    goto corral_source_split_2644;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_2645;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_2646;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    $i66 := $p2i.ref.i64($p65);
    goto corral_source_split_2647;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    $i67 := $eq.i64($i66, 0);
    goto corral_source_split_2648;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $i63 := $i27;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    $i72 := $i63;
    goto $bb31;

  $bb25:
    assume $i67 == 1;
    goto corral_source_split_2652;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p54, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_2653;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    $i69 := $load.i8($M.0, $p68);
    goto corral_source_split_2654;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    $i70 := $zext.i8.i32($i69);
    goto corral_source_split_2655;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    $i71 := $eq.i32($i70, 1);
    goto corral_source_split_2656;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i71 == 1);
    goto $bb27;

  $bb28:
    assume $i71 == 1;
    goto corral_source_split_2658;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} start_unlink_async($p0, $p54);
    goto SeqInstr_247, SeqInstr_248;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  SeqInstr_249:
    goto corral_source_split_2659;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_247:
    assume !assertsPassed;
    return;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_2642;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    $i63 := 2;
    goto $bb24;

  $bb9:
    assume $i30 == 1;
    goto corral_source_split_2599;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p26, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2600;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    $i32 := $load.i32($M.0, $p31);
    goto corral_source_split_2601;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2602;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_2603;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    $i35 := $ne.i32($i32, $i34);
    goto corral_source_split_2604;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i35 == 1);
    goto $bb11;

  $bb12:
    assume $i35 == 1;
    goto corral_source_split_2606;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} $p36 := qh_get($p26);
    goto corral_source_split_2607;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2608;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    $i38 := $load.i32($M.0, $p37);
    goto corral_source_split_2609;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p36, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2610;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i38);
    goto corral_source_split_2611;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} $i40 := qh_completions($p0, $p36);
    goto SeqInstr_241, SeqInstr_242;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  SeqInstr_243:
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i32($i40);
    goto corral_source_split_2612;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} qh_put($p36);
    goto SeqInstr_244, SeqInstr_245;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  SeqInstr_246:
    goto corral_source_split_2613;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_2614;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    $i42 := $i27;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p54 := $p36;
    goto $bb19;

  $bb14:
    assume $i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p12);
    goto corral_source_split_2617;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p43, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2618;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_2619;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    $p46 := $load.ref($M.0, $p45);
    goto corral_source_split_2620;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p46);
    goto corral_source_split_2621;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_2622;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_2623;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_2624;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} $i51 := ldv__builtin_expect($i50, 1);
    call {:si_unique_call 585} {:cexpr "tmp___2"} boogie_si_record_i64($i51);
    goto corral_source_split_2625;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_2626;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    $i53 := $i42;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_2628;

  corral_source_split_2628:
    assume {:verifier.code 0} true;
    $i23 := $i53;
    goto $bb6;

  $bb16:
    assume $i52 == 1;
    assume {:verifier.code 0} true;
    $p24, $i25 := $p46, $i42;
    goto $bb16_dummy;

  SeqInstr_244:
    assume !assertsPassed;
    return;

  SeqInstr_241:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_2570;

  corral_source_split_2570:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2571;

  corral_source_split_2571:
    assume {:verifier.code 0} true;
    $i9 := $load.i32($M.0, $p8);
    goto corral_source_split_2572;

  corral_source_split_2572:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i9, 1);
    goto corral_source_split_2573;

  corral_source_split_2573:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2574;

  corral_source_split_2574:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i10);
    goto corral_source_split_2575;

  corral_source_split_2575:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb32_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;
}



const scan_periodic: ref;

axiom scan_periodic == $sub.ref(0, 262701);

procedure scan_periodic($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.39, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.48, $M.50, $M.46, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.57, $M.60, $M.47, $M.58, $M.59, assertsPassed;



implementation scan_periodic($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i20: i32;
  var $i21: i32;
  var $i19: i32;
  var $i22: i32;
  var $i23: i32;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $i27: i1;
  var $i29: i32;
  var $i28: i32;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $i46: i1;
  var $i47: i32;
  var $i51: i1;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i32;
  var $i60: i32;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i32;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i64;
  var $i76: i64;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i24;
  var $i91: i24;
  var $i92: i24;
  var $p93: ref;
  var $p94: ref;
  var $i95: i8;
  var $i96: i64;
  var $i97: i64;
  var $i98: i64;
  var $i99: i1;
  var $p100: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i82: i32;
  var $i83: i32;
  var $i107: i1;
  var $i108: i32;
  var $i109: i64;
  var $i110: i64;
  var $i111: i1;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $i124: i64;
  var $i125: i1;
  var $i48: i32;
  var $i49: i32;
  var $i126: i1;
  var $p127: ref;
  var $p128: ref;
  var $i129: i32;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i142: i32;
  var $i143: i32;
  var $i140: i32;
  var $i141: i32;
  var cmdloc_dummy_var_8: [ref]i8;
  var cmdloc_dummy_var_9: [ref]i8;
  var cmdloc_dummy_var_10: [ref]i8;
  var vslice_dummy_var_87: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 590} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 591} $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 592} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_2674;

  corral_source_split_2674:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_2675;

  corral_source_split_2675:
    assume {:verifier.code 0} true;
    $i5 := $load.i32($M.0, $p4);
    goto corral_source_split_2676;

  corral_source_split_2676:
    assume {:verifier.code 0} true;
    $i6 := $shl.i32($i5, 3);
    call {:si_unique_call 593} {:cexpr "mod"} boogie_si_record_i32($i6);
    goto corral_source_split_2677;

  corral_source_split_2677:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(432, 1));
    goto corral_source_split_2678;

  corral_source_split_2678:
    assume {:verifier.code 0} true;
    $i8 := $load.i32($M.0, $p7);
    call {:si_unique_call 594} {:cexpr "now_uframe"} boogie_si_record_i32($i8);
    goto corral_source_split_2679;

  corral_source_split_2679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 595} $p9 := oxu_to_hcd($p0);
    goto corral_source_split_2680;

  corral_source_split_2680:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2681;

  corral_source_split_2681:
    assume {:verifier.code 0} true;
    $i11 := $load.i32($M.37, $p10);
    goto corral_source_split_2682;

  corral_source_split_2682:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 1);
    goto corral_source_split_2683;

  corral_source_split_2683:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_2684;

  corral_source_split_2684:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    goto corral_source_split_2693;

  corral_source_split_2693:
    assume {:verifier.code 0} true;
    $i20 := $add.i32($i8, $i6);
    goto corral_source_split_2694;

  corral_source_split_2694:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    call {:si_unique_call 598} {:cexpr "clock"} boogie_si_record_i32($i21);
    assume {:verifier.code 0} true;
    $i19 := $i21;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_2696;

  corral_source_split_2696:
    assume {:verifier.code 0} true;
    $i22 := $urem.i32($i19, $i6);
    call {:si_unique_call 599} {:cexpr "clock"} boogie_si_record_i32($i22);
    goto corral_source_split_2697;

  corral_source_split_2697:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i8, $i22;
    goto $bb4;

  $bb4:
    call $i23, $i24, $i25, $i26, $i27, $i29, $i28, $p30, $p31, $i32, $p33, $p34, $p35, $i36, $p37, $p38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $i47, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $p80, $p81, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $p106, $i82, $i83, $i107, $i108, $i109, $i110, $i111, $p112, $p113, $p114, $p115, $p116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $i48, $i49, $i126, $p127, $p128, $i129, $i130, $i131, $p132, $p133, $p134, $p135, $p136, $i137, $i138, $i139, $i142, $i143, $i140, $i141, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_87 := scan_periodic_loop_$bb4($p0, $p1, $p2, $p3, $i6, $i23, $i24, $i25, $i26, $i27, $i29, $i28, $p30, $p31, $i32, $p33, $p34, $p35, $i36, $p37, $p38, $p39, $p40, $i41, $i42, $p43, $p44, $i45, $i46, $i47, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $p80, $p81, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $p106, $i82, $i83, $i107, $i108, $i109, $i110, $i111, $p112, $p113, $p114, $p115, $p116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $i48, $i49, $i126, $p127, $p128, $i129, $i130, $i131, $p132, $p133, $p134, $p135, $p136, $i137, $i138, $i139, $i142, $i143, $i140, $i141, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_87);
    goto $bb4_last;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i23, 3);
    call {:si_unique_call 600} {:cexpr "frame"} boogie_si_record_i32($i25);
    goto corral_source_split_2700;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    $i26 := $lshr.i32($i24, 3);
    goto corral_source_split_2701;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    $i27 := $eq.i32($i26, $i25);
    goto corral_source_split_2702;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i27 == 1);
    goto corral_source_split_2706;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    $i29 := $or.i32($i23, 7);
    call {:si_unique_call 601} {:cexpr "now_uframe"} boogie_si_record_i32($i29);
    assume {:verifier.code 0} true;
    $i28 := $i29;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_2709;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_2710;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    $i32 := $zext.i32.i64($i25);
    goto corral_source_split_2711;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($p31, $mul.ref($i32, 8));
    goto corral_source_split_2712;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_2713;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_2714;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    $i36 := $zext.i32.i64($i25);
    goto corral_source_split_2715;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p35, $mul.ref($i36, 4));
    goto corral_source_split_2716;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p33);
    goto corral_source_split_2717;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_2718;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p1);
    goto corral_source_split_2719;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p39);
    goto corral_source_split_2720;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p37);
    goto corral_source_split_2721;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, 6);
    call {:si_unique_call 602} {:cexpr "type"} boogie_si_record_i32($i42);
    goto corral_source_split_2722;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p1);
    goto corral_source_split_2723;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_2724;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p44);
    goto corral_source_split_2725;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_2726;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    $i126 := $eq.i32($i28, $i24);
    goto corral_source_split_2836;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i126 == 1);
    goto corral_source_split_2845;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    $i142 := $add.i32($i28, 1);
    call {:si_unique_call 623} {:cexpr "now_uframe"} boogie_si_record_i32($i142);
    goto corral_source_split_2846;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    $i143 := $urem.i32($i142, $i6);
    call {:si_unique_call 624} {:cexpr "now_uframe"} boogie_si_record_i32($i143);
    assume {:verifier.code 0} true;
    $i140, $i141 := $i143, $i24;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2862;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    $i23, $i24 := $i140, $i141;
    goto corral_source_split_2862_dummy;

  $bb35:
    assume $i126 == 1;
    goto corral_source_split_2838;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} $p127 := oxu_to_hcd($p0);
    goto corral_source_split_2839;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($p127, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2840;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    $i129 := $load.i32($M.41, $p128);
    goto corral_source_split_2841;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    $i130 := $and.i32($i129, 1);
    goto corral_source_split_2842;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 0);
    goto corral_source_split_2843;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p132 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(432, 1));
    goto corral_source_split_2850;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p132, $i28);
    goto corral_source_split_2851;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2852;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    $p134 := $load.ref($M.0, $p133);
    goto corral_source_split_2853;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($p134, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_2854;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    $p136 := $bitcast.ref.ref($p135);
    goto corral_source_split_2855;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} $i137 := readl($p136);
    goto SeqInstr_262, SeqInstr_263;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  SeqInstr_264:
    call {:si_unique_call 626} {:cexpr "tmp___7"} boogie_si_record_i32($i137);
    goto corral_source_split_2856;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    $i138 := $urem.i32($i137, $i6);
    call {:si_unique_call 627} {:cexpr "now"} boogie_si_record_i32($i138);
    goto corral_source_split_2857;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i28, $i138);
    goto corral_source_split_2858;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i140, $i141 := $i28, $i138;
    goto $bb44;

  $bb41:
    assume $i139 == 1;
    goto corral_source_split_2860;

  corral_source_split_2860:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_262:
    assume !assertsPassed;
    return;

  $bb37:
    assume $i131 == 1;
    goto corral_source_split_2848;

  corral_source_split_2848:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb8:
    assume $i46 == 1;
    goto corral_source_split_2728;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    $i47 := $i42;
    goto $bb11;

  $bb11:
    call $i47, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $p80, $p81, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $p106, $i82, $i83, $i107, $i108, $i109, $i110, $i111, $p112, $p113, $p114, $p115, $p116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $i48, $i49, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_87 := scan_periodic_loop_$bb11($p0, $p1, $p2, $p3, $i25, $p30, $i32, $p34, $i36, $p40, $p43, $i47, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $p80, $p81, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $p106, $i82, $i83, $i107, $i108, $i109, $i110, $i111, $p112, $p113, $p114, $p115, $p116, $p117, $i118, $i119, $p120, $i121, $i122, $p123, $i124, $i125, $i48, $i49, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_87);
    goto $bb11_last;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    $i48, $i49 := $i47, 0;
    goto $bb12;

  $bb12:
    call $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $p80, $p81, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $p106, $i82, $i83, $i107, $i108, $i109, $i110, $i111, $p123, $i124, $i125, $i48, $i49, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_87 := scan_periodic_loop_$bb12($p0, $p1, $p2, $p3, $i25, $p43, $i51, $p52, $p53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $p61, $p62, $p63, $p64, $p65, $p66, $p67, $i68, $p69, $p70, $p71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $p80, $p81, $p84, $p85, $p86, $p87, $p88, $p89, $i90, $i91, $i92, $p93, $p94, $i95, $i96, $i97, $i98, $i99, $p100, $p102, $p103, $p104, $p105, $p106, $i82, $i83, $i107, $i108, $i109, $i110, $i111, $p123, $i124, $i125, $i48, $i49, cmdloc_dummy_var_8, cmdloc_dummy_var_9, cmdloc_dummy_var_10, vslice_dummy_var_87);
    goto $bb12_last;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} vslice_dummy_var_87 := oxu_to_hcd($p0);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2780;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p84, .str.2);
    goto corral_source_split_2781;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p85, .str.16);
    goto corral_source_split_2783;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2784;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p86, .str);
    goto corral_source_split_2785;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2786;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p87, .str.17);
    goto corral_source_split_2787;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2788;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_2789;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    $i90 := $load.i24($M.6, $p89);
    goto corral_source_split_2790;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    $i91 := $and.i24($i90, $sub.i24(0, 262144));
    goto corral_source_split_2791;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    $i92 := $or.i24($i91, 2314);
    goto corral_source_split_2792;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p89, $i92);
    goto corral_source_split_2793;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2794;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p93, 0);
    goto corral_source_split_2795;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2796;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    $i95 := $load.i8($M.7, $p94);
    goto corral_source_split_2797;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    $i96 := $zext.i8.i64($i95);
    goto corral_source_split_2798;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    $i97 := $and.i64($i96, 1);
    goto corral_source_split_2799;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} $i98 := ldv__builtin_expect($i97, 0);
    call {:si_unique_call 618} {:cexpr "tmp___4"} boogie_si_record_i64($i98);
    goto corral_source_split_2800;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    $i99 := $ne.i64($i98, 0);
    goto corral_source_split_2801;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p106 := $bitcast.ref.ref($p1);
    goto corral_source_split_2811;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p106, $0.ref);
    goto corral_source_split_2812;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i82, $i83 := $i49, $i48;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    $i107 := $ne.i32($i82, 0);
    goto corral_source_split_2774;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    $i108 := $zext.i1.i32($i107);
    goto corral_source_split_2775;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    $i109 := $sext.i32.i64($i108);
    goto corral_source_split_2776;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} $i110 := ldv__builtin_expect($i109, 0);
    call {:si_unique_call 616} {:cexpr "tmp___5"} boogie_si_record_i64($i110);
    goto corral_source_split_2777;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    $i111 := $ne.i64($i110, 0);
    goto corral_source_split_2778;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p43);
    goto corral_source_split_2830;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    $i124 := $p2i.ref.i64($p123);
    goto corral_source_split_2831;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_2832;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i125 == 1);
    goto corral_source_split_2834;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume $i125 == 1;
    assume {:verifier.code 0} true;
    $i48, $i49 := $i83, $i82;
    goto $bb31_dummy;

  $bb26:
    assume $i111 == 1;
    goto corral_source_split_2814;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p30);
    goto corral_source_split_2815;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($p112, $mul.ref($i32, 8));
    goto corral_source_split_2816;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    $p114 := $load.ref($M.0, $p34);
    goto corral_source_split_2817;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($p114, $mul.ref($i36, 4));
    goto corral_source_split_2818;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    $p116 := $bitcast.ref.ref($p113);
    goto corral_source_split_2819;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    $p117 := $load.ref($M.0, $p116);
    goto corral_source_split_2820;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p40, $p117);
    goto corral_source_split_2821;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    $i118 := $load.i32($M.0, $p115);
    goto corral_source_split_2822;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    $i119 := $and.i32($i118, 6);
    call {:si_unique_call 621} {:cexpr "type"} boogie_si_record_i32($i119);
    goto corral_source_split_2823;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    $p120 := $load.ref($M.0, $p43);
    goto corral_source_split_2824;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    $i121 := $p2i.ref.i64($p120);
    goto corral_source_split_2825;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_2826;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i122 == 1);
    goto corral_source_split_2828;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb28:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    $i47 := $i119;
    goto $bb28_dummy;

  $bb22:
    assume $i99 == 1;
    goto corral_source_split_2803;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} $p100 := oxu_to_hcd($p0);
    goto corral_source_split_2804;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    $p102 := $add.ref($add.ref($add.ref($p100, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2805;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    $p103 := $load.ref($M.40, $p102);
    goto corral_source_split_2806;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p1);
    goto corral_source_split_2807;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_2808;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref($p3, $p103, .str.17, $i48, $i25, $p105);
    goto corral_source_split_2809;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb15:
    assume $i51 == 1;
    goto corral_source_split_2734;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    $p52 := $bitcast.ref.ref($p1);
    goto corral_source_split_2735;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_2736;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} $p54 := qh_get($p53);
    goto corral_source_split_2737;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p2);
    goto corral_source_split_2738;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, $p55, $p54);
    goto corral_source_split_2739;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p1);
    goto corral_source_split_2740;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_2741;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2742;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    $i59 := $load.i32($M.0, $p58);
    goto corral_source_split_2743;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    $i60 := $and.i32($i59, 6);
    call {:si_unique_call 605} {:cexpr "type"} boogie_si_record_i32($i60);
    goto corral_source_split_2744;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p1);
    goto corral_source_split_2745;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_2746;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2747;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    $p64 := $bitcast.ref.ref($p1);
    goto corral_source_split_2748;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p63);
    goto corral_source_split_2749;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_8 := $M.0;
    cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 606} cmdloc_dummy_var_10 := $memcpy.i8(cmdloc_dummy_var_8, cmdloc_dummy_var_9, $p64, $p65, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_10;
    goto corral_source_split_2750;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    $p66 := $bitcast.ref.ref($p2);
    goto corral_source_split_2751;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.39, $p66);
    goto corral_source_split_2752;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} $i68 := qh_completions($p0, $p67);
    goto SeqInstr_253, SeqInstr_254;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  SeqInstr_255:
    call {:si_unique_call 608} {:cexpr "modified"} boogie_si_record_i32($i68);
    goto corral_source_split_2753;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    $p69 := $bitcast.ref.ref($p2);
    goto corral_source_split_2754;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    $p70 := $load.ref($M.39, $p69);
    goto corral_source_split_2755;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p70, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2756;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} $i72 := list_empty($p71);
    call {:si_unique_call 610} {:cexpr "tmp___1"} boogie_si_record_i32($i72);
    goto corral_source_split_2757;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    $i73 := $ne.i32($i72, 0);
    goto corral_source_split_2758;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    $i74 := $zext.i1.i32($i73);
    goto corral_source_split_2759;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    $i75 := $sext.i32.i64($i74);
    goto corral_source_split_2760;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} $i76 := ldv__builtin_expect($i75, 0);
    call {:si_unique_call 612} {:cexpr "tmp___2"} boogie_si_record_i64($i76);
    goto corral_source_split_2761;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    $i77 := $ne.i64($i76, 0);
    goto corral_source_split_2762;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p80 := $bitcast.ref.ref($p2);
    goto corral_source_split_2769;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.39, $p80);
    goto corral_source_split_2770;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} qh_put($p81);
    goto SeqInstr_259, SeqInstr_260;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  SeqInstr_261:
    goto corral_source_split_2771;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    $i82, $i83 := $i68, $i60;
    goto $bb20;

  SeqInstr_259:
    assume !assertsPassed;
    return;

  $bb17:
    assume $i77 == 1;
    goto corral_source_split_2764;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p2);
    goto corral_source_split_2765;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.39, $p78);
    goto corral_source_split_2766;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} intr_deschedule($p0, $p79);
    goto SeqInstr_256, SeqInstr_257;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  SeqInstr_258:
    goto corral_source_split_2767;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_256:
    assume !assertsPassed;
    return;

  SeqInstr_253:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i27 == 1;
    goto corral_source_split_2704;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    $i28 := $i23;
    goto $bb7;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_2686;

  corral_source_split_2686:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2687;

  corral_source_split_2687:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_2688;

  corral_source_split_2688:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_2689;

  corral_source_split_2689:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_2690;

  corral_source_split_2690:
    assume {:verifier.code 0} true;
    call {:si_unique_call 596} $i18 := readl($p17);
    goto SeqInstr_250, SeqInstr_251;

  SeqInstr_251:
    assume assertsPassed;
    goto SeqInstr_252;

  SeqInstr_252:
    call {:si_unique_call 597} {:cexpr "clock"} boogie_si_record_i32($i18);
    goto corral_source_split_2691;

  corral_source_split_2691:
    assume {:verifier.code 0} true;
    $i19 := $i18;
    goto $bb3;

  SeqInstr_250:
    assume !assertsPassed;
    return;

  $bb31_dummy:
    assume false;
    return;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  $bb28_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2730;

  corral_source_split_2862_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2699;
}



const timer_action: ref;

axiom timer_action == $sub.ref(0, 263733);

procedure timer_action($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr;



implementation timer_action($p0: ref, $i1: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var vslice_dummy_var_88: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 628} {:cexpr "timer_action:arg:action"} boogie_si_record_i32($i1);
    goto corral_source_split_2864;

  corral_source_split_2864:
    assume {:verifier.code 0} true;
    $i2 := $zext.i32.i64($i1);
    goto corral_source_split_2865;

  corral_source_split_2865:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(704, 1));
    goto corral_source_split_2866;

  corral_source_split_2866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 629} $i4 := test_and_set_bit($i2, $p3);
    call {:si_unique_call 630} {:cexpr "tmp___0"} boogie_si_record_i32($i4);
    goto corral_source_split_2867;

  corral_source_split_2867:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 0);
    goto corral_source_split_2868;

  corral_source_split_2868:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i1, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i11 := 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_2878;

  corral_source_split_2878:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, jiffies);
    goto corral_source_split_2879;

  corral_source_split_2879:
    assume {:verifier.code 0} true;
    $i13 := $add.i64($i11, $i12);
    call {:si_unique_call 631} {:cexpr "t"} boogie_si_record_i64($i13);
    goto corral_source_split_2880;

  corral_source_split_2880:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i1, 1);
    goto corral_source_split_2881;

  corral_source_split_2881:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(576, 1));
    goto corral_source_split_2895;

  corral_source_split_2895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 634} vslice_dummy_var_88 := ldv_mod_timer_24($p22, $i13);
    goto corral_source_split_2896;

  corral_source_split_2896:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb17:
    assume $i14 == 1;
    goto corral_source_split_2883;

  corral_source_split_2883:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(576, 1)), $mul.ref(16, 1));
    goto corral_source_split_2884;

  corral_source_split_2884:
    assume {:verifier.code 0} true;
    $i17 := $load.i64($M.0, $p16);
    goto corral_source_split_2885;

  corral_source_split_2885:
    assume {:verifier.code 0} true;
    $i18 := $ult.i64($i17, $i13);
    goto corral_source_split_2886;

  corral_source_split_2886:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb19;

  $bb20:
    assume $i18 == 1;
    goto corral_source_split_2888;

  corral_source_split_2888:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(576, 1));
    goto corral_source_split_2889;

  corral_source_split_2889:
    assume {:verifier.code 0} true;
    call {:si_unique_call 632} $i20 := timer_pending($p19);
    call {:si_unique_call 633} {:cexpr "tmp"} boogie_si_record_i32($i20);
    goto corral_source_split_2890;

  corral_source_split_2890:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_2891;

  corral_source_split_2891:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb22:
    assume $i21 == 1;
    goto corral_source_split_2893;

  corral_source_split_2893:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb8:
    assume $i8 == 1;
    goto corral_source_split_2872;

  corral_source_split_2872:
    assume {:verifier.code 0} true;
    $i11 := 12;
    goto $bb15;

  $bb6:
    assume $i7 == 1;
    goto corral_source_split_2870;

  corral_source_split_2870:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb4:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i1, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i9 == 1);
    goto corral_source_split_2874;

  corral_source_split_2874:
    assume {:verifier.code 0} true;
    $i11 := 2;
    goto $bb15;

  $bb11:
    assume $i9 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i1, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb13, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb10;

  $bb13:
    assume $i10 == 1;
    goto corral_source_split_2876;

  corral_source_split_2876:
    assume {:verifier.code 0} true;
    $i11 := 25;
    goto $bb15;
}



const test_and_set_bit: ref;

axiom test_and_set_bit == $sub.ref(0, 264765);

procedure test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation test_and_set_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 635} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 636} {:cexpr "test_and_set_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 637} devirtbounce.5(0, $p1, $p2, $i0, $p1);
    goto corral_source_split_2898;

  corral_source_split_2898:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.42, $p2);
    goto corral_source_split_2899;

  corral_source_split_2899:
    assume {:verifier.code 0} true;
    $i4 := $sext.i8.i32($i3);
    goto corral_source_split_2900;

  corral_source_split_2900:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_2901;

  corral_source_split_2901:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2902;

  corral_source_split_2902:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const timer_pending: ref;

axiom timer_pending == $sub.ref(0, 265797);

procedure timer_pending($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation timer_pending($p0: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_2904;

  corral_source_split_2904:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 128)), $mul.ref(0, 1)), $mul.ref(8, 1));
    goto corral_source_split_2905;

  corral_source_split_2905:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_2906;

  corral_source_split_2906:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2907;

  corral_source_split_2907:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_2908;

  corral_source_split_2908:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_2909;

  corral_source_split_2909:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const ldv_mod_timer_24: ref;

axiom ldv_mod_timer_24 == $sub.ref(0, 266829);

procedure ldv_mod_timer_24($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33;



implementation ldv_mod_timer_24($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 638} {:cexpr "ldv_mod_timer_24:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_2911;

  corral_source_split_2911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 639} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 640} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_2912;

  corral_source_split_2912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 641} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_2913;

  corral_source_split_2913:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const mod_timer: ref;

axiom mod_timer == $sub.ref(0, 267861);

procedure mod_timer($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation mod_timer($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 642} {:cexpr "mod_timer:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_2915;

  corral_source_split_2915:
    assume {:verifier.code 1} true;
    call {:si_unique_call 643} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 644} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_2916;

  corral_source_split_2916:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const activate_pending_timer_1: ref;

axiom activate_pending_timer_1 == $sub.ref(0, 268893);

procedure activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33;



implementation activate_pending_timer_1($p0: ref, $i1: i64, $i2: i32)
{
  var $p3: ref;
  var $i4: i64;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i1;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 645} {:cexpr "activate_pending_timer_1:arg:data"} boogie_si_record_i64($i1);
    call {:si_unique_call 646} {:cexpr "activate_pending_timer_1:arg:pending_flag"} boogie_si_record_i32($i2);
    goto corral_source_split_2918;

  corral_source_split_2918:
    assume {:verifier.code 0} true;
    $p3 := $M.28;
    goto corral_source_split_2919;

  corral_source_split_2919:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_2920;

  corral_source_split_2920:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p0);
    goto corral_source_split_2921;

  corral_source_split_2921:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i4, $i5);
    goto corral_source_split_2922;

  corral_source_split_2922:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p12 := $M.30;
    goto corral_source_split_2937;

  corral_source_split_2937:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_2938;

  corral_source_split_2938:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p0);
    goto corral_source_split_2939;

  corral_source_split_2939:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i13, $i14);
    goto corral_source_split_2940;

  corral_source_split_2940:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p21 := $M.32;
    goto corral_source_split_2955;

  corral_source_split_2955:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_2956;

  corral_source_split_2956:
    assume {:verifier.code 0} true;
    $i23 := $p2i.ref.i64($p0);
    goto corral_source_split_2957;

  corral_source_split_2957:
    assume {:verifier.code 0} true;
    $i24 := $eq.i64($i22, $i23);
    goto corral_source_split_2958;

  corral_source_split_2958:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i24 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p30 := $M.34;
    goto corral_source_split_2973;

  corral_source_split_2973:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_2974;

  corral_source_split_2974:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p0);
    goto corral_source_split_2975;

  corral_source_split_2975:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_2976;

  corral_source_split_2976:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 651} activate_suitable_timer_1($p0, $i1);
    goto corral_source_split_2991;

  corral_source_split_2991:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb29:
    assume $i33 == 1;
    goto corral_source_split_2978;

  corral_source_split_2978:
    assume {:verifier.code 0} true;
    $i34 := $M.33;
    goto corral_source_split_2979;

  corral_source_split_2979:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_2980;

  corral_source_split_2980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb33;

  $bb33:
    assume !($i35 == 1);
    goto corral_source_split_2988;

  corral_source_split_2988:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i2, 0);
    goto corral_source_split_2989;

  corral_source_split_2989:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i36 == 1;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_2982;

  corral_source_split_2982:
    assume {:verifier.code 0} true;
    $p37 := $M.34;
    goto corral_source_split_2983;

  corral_source_split_2983:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2984;

  corral_source_split_2984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p38, $i1);
    goto corral_source_split_2985;

  corral_source_split_2985:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 650} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_2986;

  corral_source_split_2986:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb31:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb32;

  $bb20:
    assume $i24 == 1;
    goto corral_source_split_2960;

  corral_source_split_2960:
    assume {:verifier.code 0} true;
    $i25 := $M.31;
    goto corral_source_split_2961;

  corral_source_split_2961:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 2);
    goto corral_source_split_2962;

  corral_source_split_2962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb24;

  $bb24:
    assume !($i26 == 1);
    goto corral_source_split_2970;

  corral_source_split_2970:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i2, 0);
    goto corral_source_split_2971;

  corral_source_split_2971:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i27 == 1;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $M.32 := $p0;
    goto corral_source_split_2964;

  corral_source_split_2964:
    assume {:verifier.code 0} true;
    $p28 := $M.32;
    goto corral_source_split_2965;

  corral_source_split_2965:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2966;

  corral_source_split_2966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p29, $i1);
    goto corral_source_split_2967;

  corral_source_split_2967:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 649} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_2968;

  corral_source_split_2968:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb22:
    assume {:verifier.code 0} true;
    assume $i26 == 1;
    goto $bb23;

  $bb11:
    assume $i15 == 1;
    goto corral_source_split_2942;

  corral_source_split_2942:
    assume {:verifier.code 0} true;
    $i16 := $M.29;
    goto corral_source_split_2943;

  corral_source_split_2943:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_2944;

  corral_source_split_2944:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb13, $bb15;

  $bb15:
    assume !($i17 == 1);
    goto corral_source_split_2952;

  corral_source_split_2952:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i2, 0);
    goto corral_source_split_2953;

  corral_source_split_2953:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb16:
    assume {:verifier.code 0} true;
    assume $i18 == 1;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_2946;

  corral_source_split_2946:
    assume {:verifier.code 0} true;
    $p19 := $M.30;
    goto corral_source_split_2947;

  corral_source_split_2947:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p19, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2948;

  corral_source_split_2948:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p20, $i1);
    goto corral_source_split_2949;

  corral_source_split_2949:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 648} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_2950;

  corral_source_split_2950:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb14;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_2924;

  corral_source_split_2924:
    assume {:verifier.code 0} true;
    $i7 := $M.27;
    goto corral_source_split_2925;

  corral_source_split_2925:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 2);
    goto corral_source_split_2926;

  corral_source_split_2926:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i8 == 1);
    goto corral_source_split_2934;

  corral_source_split_2934:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i2, 0);
    goto corral_source_split_2935;

  corral_source_split_2935:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_2928;

  corral_source_split_2928:
    assume {:verifier.code 0} true;
    $p10 := $M.28;
    goto corral_source_split_2929;

  corral_source_split_2929:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2930;

  corral_source_split_2930:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p11, $i1);
    goto corral_source_split_2931;

  corral_source_split_2931:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 647} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_2932;

  corral_source_split_2932:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb4;
}



const activate_suitable_timer_1: ref;

axiom activate_suitable_timer_1 == $sub.ref(0, 269925);

procedure activate_suitable_timer_1($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33;



implementation activate_suitable_timer_1($p0: ref, $i1: i64)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 652} {:cexpr "activate_suitable_timer_1:arg:data"} boogie_si_record_i64($i1);
    goto corral_source_split_2993;

  corral_source_split_2993:
    assume {:verifier.code 0} true;
    $i2 := $M.27;
    goto corral_source_split_2994;

  corral_source_split_2994:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_2995;

  corral_source_split_2995:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i3 == 1);
    goto corral_source_split_3003;

  corral_source_split_3003:
    assume {:verifier.code 0} true;
    $i4 := $M.27;
    goto corral_source_split_3004;

  corral_source_split_3004:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 2);
    goto corral_source_split_3005;

  corral_source_split_3005:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i8 := $M.29;
    goto corral_source_split_3007;

  corral_source_split_3007:
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i8, 0);
    goto corral_source_split_3008;

  corral_source_split_3008:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i9 == 1);
    goto corral_source_split_3016;

  corral_source_split_3016:
    assume {:verifier.code 0} true;
    $i10 := $M.29;
    goto corral_source_split_3017;

  corral_source_split_3017:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 2);
    goto corral_source_split_3018;

  corral_source_split_3018:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i14 := $M.31;
    goto corral_source_split_3020;

  corral_source_split_3020:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 0);
    goto corral_source_split_3021;

  corral_source_split_3021:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb16;

  $bb16:
    assume !($i15 == 1);
    goto corral_source_split_3029;

  corral_source_split_3029:
    assume {:verifier.code 0} true;
    $i16 := $M.31;
    goto corral_source_split_3030;

  corral_source_split_3030:
    assume {:verifier.code 0} true;
    $i17 := $eq.i32($i16, 2);
    goto corral_source_split_3031;

  corral_source_split_3031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i20 := $M.33;
    goto corral_source_split_3033;

  corral_source_split_3033:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 0);
    goto corral_source_split_3034;

  corral_source_split_3034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i21 == 1);
    goto corral_source_split_3042;

  corral_source_split_3042:
    assume {:verifier.code 0} true;
    $i22 := $M.33;
    goto corral_source_split_3043;

  corral_source_split_3043:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 2);
    goto corral_source_split_3044;

  corral_source_split_3044:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb23:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $M.34 := $p0;
    goto corral_source_split_3036;

  corral_source_split_3036:
    assume {:verifier.code 0} true;
    $p24 := $M.34;
    goto corral_source_split_3037;

  corral_source_split_3037:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3038;

  corral_source_split_3038:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p25, $i1);
    goto corral_source_split_3039;

  corral_source_split_3039:
    assume {:verifier.code 0} true;
    $M.33 := 1;
    call {:si_unique_call 656} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(1);
    goto corral_source_split_3040;

  corral_source_split_3040:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i21 == 1;
    goto $bb21;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i17 == 1;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $M.32 := $p0;
    goto corral_source_split_3023;

  corral_source_split_3023:
    assume {:verifier.code 0} true;
    $p18 := $M.32;
    goto corral_source_split_3024;

  corral_source_split_3024:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3025;

  corral_source_split_3025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p19, $i1);
    goto corral_source_split_3026;

  corral_source_split_3026:
    assume {:verifier.code 0} true;
    $M.31 := 1;
    call {:si_unique_call 655} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(1);
    goto corral_source_split_3027;

  corral_source_split_3027:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb14:
    assume {:verifier.code 0} true;
    assume $i15 == 1;
    goto $bb15;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i11 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.30 := $p0;
    goto corral_source_split_3010;

  corral_source_split_3010:
    assume {:verifier.code 0} true;
    $p12 := $M.30;
    goto corral_source_split_3011;

  corral_source_split_3011:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_3012;

  corral_source_split_3012:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p13, $i1);
    goto corral_source_split_3013;

  corral_source_split_3013:
    assume {:verifier.code 0} true;
    $M.29 := 1;
    call {:si_unique_call 654} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(1);
    goto corral_source_split_3014;

  corral_source_split_3014:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i9 == 1;
    goto $bb9;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i5 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $M.28 := $p0;
    goto corral_source_split_2997;

  corral_source_split_2997:
    assume {:verifier.code 0} true;
    $p6 := $M.28;
    goto corral_source_split_2998;

  corral_source_split_2998:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p6, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_2999;

  corral_source_split_2999:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p7, $i1);
    goto corral_source_split_3000;

  corral_source_split_3000:
    assume {:verifier.code 0} true;
    $M.27 := 1;
    call {:si_unique_call 653} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(1);
    goto corral_source_split_3001;

  corral_source_split_3001:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i3 == 1;
    goto $bb2;
}



const qh_get: ref;

axiom qh_get == $sub.ref(0, 270957);

procedure qh_get($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation qh_get($p0: ref) returns ($r: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3046;

  corral_source_split_3046:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_3047;

  corral_source_split_3047:
    assume {:verifier.code 0} true;
    call {:si_unique_call 657} kref_get($p1);
    goto corral_source_split_3048;

  corral_source_split_3048:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const llvm.memcpy.p0i8.p0i8.i64: ref;

axiom llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 271989);

procedure llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i32, $i4: i1);



const qh_completions: ref;

axiom qh_completions == $sub.ref(0, 273021);

procedure qh_completions($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.48, $M.22, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.50, $M.46, $M.57, $M.60, $CurrAddr, $M.47, $M.58, $M.59, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.8, $M.39, assertsPassed;



implementation qh_completions($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $i13: i8;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $i47: i32;
  var $i48: i64;
  var $i49: i64;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $i55: i64;
  var $i56: i1;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i8;
  var $i65: i32;
  var $i66: i1;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i32;
  var $p72: ref;
  var $p73: ref;
  var $i74: i32;
  var $i71: i32;
  var $i75: i32;
  var $i76: i32;
  var $p77: ref;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $i81: i32;
  var $i82: i32;
  var $p83: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i32;
  var $i90: i1;
  var $i91: i32;
  var $i92: i1;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $i101: i32;
  var $i102: i32;
  var $i103: i1;
  var $i93: i32;
  var $i107: i1;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $i111: i32;
  var $i112: i1;
  var $i113: i32;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $i117: i1;
  var $i118: i32;
  var $i119: i32;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $i123: i32;
  var $i124: i32;
  var $i125: i1;
  var $i126: i32;
  var $i127: i64;
  var $i128: i64;
  var $i129: i1;
  var $p130: ref;
  var $p131: ref;
  var $i132: i32;
  var $i133: i1;
  var $i134: i32;
  var $i135: i64;
  var $i136: i64;
  var $i137: i1;
  var $i141: i1;
  var $i142: i32;
  var $i143: i64;
  var $i144: i64;
  var $i145: i1;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $i149: i32;
  var $i150: i1;
  var $p151: ref;
  var $i152: i64;
  var $i153: i32;
  var $p154: ref;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i32;
  var $i159: i32;
  var $p160: ref;
  var $i161: i32;
  var $i162: i32;
  var $i163: i1;
  var $i104: i32;
  var $p164: ref;
  var $i165: i32;
  var $i166: i32;
  var $p167: ref;
  var $i168: i32;
  var $i105: i32;
  var $i106: i32;
  var $p169: ref;
  var $p170: ref;
  var $i171: i64;
  var $i172: i1;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $i178: i64;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $i182: i32;
  var $i183: i32;
  var $i184: i1;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $i188: i1;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $p195: ref;
  var $i196: i32;
  var $i197: i1;
  var $p199: ref;
  var $i200: i32;
  var $i201: i32;
  var $i202: i1;
  var $i198: i1;
  var $i203: i32;
  var $i204: i1;
  var $p206: ref;
  var $p207: ref;
  var $i208: i64;
  var $p209: ref;
  var $i210: i64;
  var $i211: i1;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p217: ref;
  var $i218: i32;
  var $p219: ref;
  var $p220: ref;
  var $i138: i32;
  var $i139: i32;
  var $p140: ref;
  var $p221: ref;
  var $p222: ref;
  var $i223: i64;
  var $i224: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i225: i32;
  var $i226: i32;
  var $p227: ref;
  var $i27: i32;
  var $i28: i32;
  var $p29: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $i228: i64;
  var $i229: i1;
  var $i230: i32;
  var $i231: i64;
  var $i232: i64;
  var $i233: i1;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $i238: i64;
  var $i239: i1;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $i247: i8;
  var $i248: i32;
  var $i249: i1;
  var $p250: ref;
  var $p251: ref;
  var $i252: i32;
  var $i253: i32;
  var $p255: ref;
  var $p256: ref;
  var $i257: i32;
  var $i254: i32;
  var $i258: i32;
  var $p259: ref;
  var $i260: i1;
  var $p261: ref;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i1;
  var $i267: i1;
  var $p268: ref;
  var $i269: i32;
  var $i270: i32;
  var $i271: i1;
  var $i11: i32;
  var cmdloc_dummy_var_11: [ref]i8;
  var cmdloc_dummy_var_12: [ref]i8;
  var cmdloc_dummy_var_13: [ref]i8;
  var vslice_dummy_var_89: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3050;

  corral_source_split_3050:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_3051;

  corral_source_split_3051:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3052;

  corral_source_split_3052:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_3053;

  corral_source_split_3053:
    assume {:verifier.code 0} true;
    call {:si_unique_call 658} $i5 := list_empty($p4);
    call {:si_unique_call 659} {:cexpr "tmp___0"} boogie_si_record_i32($i5);
    goto corral_source_split_3054;

  corral_source_split_3054:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3055;

  corral_source_split_3055:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3056;

  corral_source_split_3056:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3057;

  corral_source_split_3057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 660} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 661} {:cexpr "tmp___1"} boogie_si_record_i64($i9);
    goto corral_source_split_3058;

  corral_source_split_3058:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3059;

  corral_source_split_3059:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_3065;

  corral_source_split_3065:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p12);
    call {:si_unique_call 662} {:cexpr "state"} boogie_si_record_i8($i13);
    goto corral_source_split_3066;

  corral_source_split_3066:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_3067;

  corral_source_split_3067:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p14, 5);
    goto corral_source_split_3068;

  corral_source_split_3068:
    assume {:verifier.code 0} true;
    $i15 := $zext.i8.i32($i13);
    goto corral_source_split_3069;

  corral_source_split_3069:
    assume {:verifier.code 0} true;
    $i16 := $eq.i32($i15, 3);
    goto corral_source_split_3070;

  corral_source_split_3070:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    call {:si_unique_call 663} {:cexpr "stopped"} boogie_si_record_i32($i17);
    goto corral_source_split_3071;

  corral_source_split_3071:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_3072;

  corral_source_split_3072:
    assume {:verifier.code 0} true;
    $p20 := $load.ref($M.0, $p19);
    goto corral_source_split_3073;

  corral_source_split_3073:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p20, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3074;

  corral_source_split_3074:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_3075;

  corral_source_split_3075:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_3076;

  corral_source_split_3076:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_3077;

  corral_source_split_3077:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p20);
    goto corral_source_split_3078;

  corral_source_split_3078:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i24, $i25);
    goto corral_source_split_3079;

  corral_source_split_3079:
    assume {:verifier.code 0} true;
    $i27, $i28, $p29 := 0, $i17, $0.ref;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $i84, $i85, $p86 := $i28, $i27, $p29;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3150;

  corral_source_split_3150:
    assume {:verifier.code 0} true;
    $i228 := $p2i.ref.i64($p86);
    goto corral_source_split_3151;

  corral_source_split_3151:
    assume {:verifier.code 0} true;
    $i229 := $ne.i64($i228, 0);
    goto corral_source_split_3152;

  corral_source_split_3152:
    assume {:verifier.code 0} true;
    $i230 := $zext.i1.i32($i229);
    goto corral_source_split_3153;

  corral_source_split_3153:
    assume {:verifier.code 0} true;
    $i231 := $sext.i32.i64($i230);
    goto corral_source_split_3154;

  corral_source_split_3154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 672} $i232 := ldv__builtin_expect($i231, 1);
    call {:si_unique_call 673} {:cexpr "tmp___10"} boogie_si_record_i64($i232);
    goto corral_source_split_3155;

  corral_source_split_3155:
    assume {:verifier.code 0} true;
    $i233 := $ne.i64($i232, 0);
    goto corral_source_split_3156;

  corral_source_split_3156:
    assume {:verifier.code 0} true;
    assume {:branchcond $i233} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i233 == 1);
    assume {:verifier.code 0} true;
    $i258 := $i85;
    goto $bb101;

  $bb101:
    assume {:verifier.code 0} true;
    goto corral_source_split_3398;

  corral_source_split_3398:
    assume {:verifier.code 0} true;
    $p259 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_3399;

  corral_source_split_3399:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p259, $i13);
    goto corral_source_split_3400;

  corral_source_split_3400:
    assume {:verifier.code 0} true;
    $i260 := $ne.i32($i84, 0);
    goto corral_source_split_3401;

  corral_source_split_3401:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb102, $bb104;

  $bb104:
    assume !($i260 == 1);
    goto corral_source_split_3403;

  corral_source_split_3403:
    assume {:verifier.code 0} true;
    $p261 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_3404;

  corral_source_split_3404:
    assume {:verifier.code 0} true;
    $i262 := $load.i32($M.0, $p261);
    goto corral_source_split_3405;

  corral_source_split_3405:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 1);
    goto corral_source_split_3406;

  corral_source_split_3406:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i263 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $i11 := $i258;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3063;

  corral_source_split_3063:
    assume {:verifier.code 0} true;
    $r := $i11;
    return;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i263 == 1;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    $i264 := $zext.i8.i32($i13);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    $i265 := $slt.i32($i264, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb108, $bb109;

  $bb109:
    assume !($i265 == 1);
    assume {:verifier.code 0} true;
    $i266 := $eq.i32($i264, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i266} true;
    goto $bb110, $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    assume !($i266 == 1);
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb110:
    assume $i266 == 1;
    goto corral_source_split_3408;

  corral_source_split_3408:
    assume {:verifier.code 0} true;
    call {:si_unique_call 698} qh_refresh($p0, $p1);
    goto corral_source_split_3409;

  corral_source_split_3409:
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb108:
    assume $i265 == 1;
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i264, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb113, $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    assume !($i267 == 1);
    goto $bb112;

  $bb113:
    assume $i267 == 1;
    goto corral_source_split_3411;

  corral_source_split_3411:
    assume {:verifier.code 0} true;
    $p268 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3412;

  corral_source_split_3412:
    assume {:verifier.code 0} true;
    $i269 := $load.i32($M.0, $p268);
    goto corral_source_split_3413;

  corral_source_split_3413:
    assume {:verifier.code 0} true;
    $i270 := $and.i32($i269, 255);
    goto corral_source_split_3414;

  corral_source_split_3414:
    assume {:verifier.code 0} true;
    $i271 := $ne.i32($i270, 0);
    goto corral_source_split_3415;

  corral_source_split_3415:
    assume {:verifier.code 0} true;
    assume {:branchcond $i271} true;
    goto $bb116, $bb117;

  $bb117:
    assume !($i271 == 1);
    goto corral_source_split_3421;

  corral_source_split_3421:
    assume {:verifier.code 0} true;
    call {:si_unique_call 701} unlink_async($p0, $p1);
    goto SeqInstr_283, SeqInstr_284;

  SeqInstr_284:
    assume assertsPassed;
    goto SeqInstr_285;

  SeqInstr_285:
    assume {:verifier.code 0} true;
    goto $bb118;

  $bb118:
    assume {:verifier.code 0} true;
    goto $bb115;

  SeqInstr_283:
    assume !assertsPassed;
    return;

  $bb116:
    assume $i271 == 1;
    goto corral_source_split_3417;

  corral_source_split_3417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 699} intr_deschedule($p0, $p1);
    goto SeqInstr_277, SeqInstr_278;

  SeqInstr_278:
    assume assertsPassed;
    goto SeqInstr_279;

  SeqInstr_279:
    goto corral_source_split_3418;

  corral_source_split_3418:
    assume {:verifier.code 0} true;
    call {:si_unique_call 700} vslice_dummy_var_89 := qh_schedule($p0, $p1);
    goto SeqInstr_280, SeqInstr_281;

  SeqInstr_281:
    assume assertsPassed;
    goto SeqInstr_282;

  SeqInstr_282:
    goto corral_source_split_3419;

  corral_source_split_3419:
    assume {:verifier.code 0} true;
    goto $bb118;

  SeqInstr_280:
    assume !assertsPassed;
    return;

  SeqInstr_277:
    assume !assertsPassed;
    return;

  $bb102:
    assume {:verifier.code 0} true;
    assume $i260 == 1;
    goto $bb103;

  $bb93:
    assume $i233 == 1;
    goto corral_source_split_3360;

  corral_source_split_3360:
    assume {:verifier.code 0} true;
    $p234 := $add.ref($add.ref($p86, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3361;

  corral_source_split_3361:
    assume {:verifier.code 0} true;
    $p235 := $load.ref($M.0, $p234);
    goto corral_source_split_3362;

  corral_source_split_3362:
    assume {:verifier.code 0} true;
    $p236 := $add.ref($add.ref($p235, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3363;

  corral_source_split_3363:
    assume {:verifier.code 0} true;
    $p237 := $load.ref($M.0, $p236);
    goto corral_source_split_3364;

  corral_source_split_3364:
    assume {:verifier.code 0} true;
    $i238 := $p2i.ref.i64($p237);
    goto corral_source_split_3365;

  corral_source_split_3365:
    assume {:verifier.code 0} true;
    $i239 := $eq.i64($i238, 0);
    goto corral_source_split_3366;

  corral_source_split_3366:
    assume {:verifier.code 0} true;
    assume {:branchcond $i239} true;
    goto $bb95, $bb96;

  $bb96:
    assume !($i239 == 1);
    goto corral_source_split_3381;

  corral_source_split_3381:
    assume {:verifier.code 0} true;
    $p255 := $add.ref($add.ref($p86, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3382;

  corral_source_split_3382:
    assume {:verifier.code 0} true;
    $p256 := $load.ref($M.0, $p255);
    goto corral_source_split_3383;

  corral_source_split_3383:
    assume {:verifier.code 0} true;
    call {:si_unique_call 692} ehci_urb_done($p0, $p256);
    goto SeqInstr_271, SeqInstr_272;

  SeqInstr_272:
    assume assertsPassed;
    goto SeqInstr_273;

  SeqInstr_273:
    goto corral_source_split_3384;

  corral_source_split_3384:
    assume {:verifier.code 0} true;
    $i257 := $add.i32($i85, 1);
    call {:si_unique_call 693} {:cexpr "count"} boogie_si_record_i32($i257);
    assume {:verifier.code 0} true;
    $i254 := $i257;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    goto corral_source_split_3395;

  corral_source_split_3395:
    assume {:verifier.code 0} true;
    call {:si_unique_call 697} oxu_qtd_free($p0, $p86);
    goto corral_source_split_3396;

  corral_source_split_3396:
    assume {:verifier.code 0} true;
    $i258 := $i254;
    goto $bb101;

  SeqInstr_271:
    assume !assertsPassed;
    return;

  $bb95:
    assume $i239 == 1;
    goto corral_source_split_3368;

  corral_source_split_3368:
    assume {:verifier.code 0} true;
    $p240 := $add.ref($add.ref($p86, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3369;

  corral_source_split_3369:
    assume {:verifier.code 0} true;
    $p241 := $load.ref($M.0, $p240);
    goto corral_source_split_3370;

  corral_source_split_3370:
    assume {:verifier.code 0} true;
    $p242 := $bitcast.ref.ref($p241);
    goto corral_source_split_3371;

  corral_source_split_3371:
    assume {:verifier.code 0} true;
    $p243 := $add.ref($add.ref($p242, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_3372;

  corral_source_split_3372:
    assume {:verifier.code 0} true;
    $p244 := $load.ref($M.0, $p243);
    goto corral_source_split_3373;

  corral_source_split_3373:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($p86, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3374;

  corral_source_split_3374:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p245, $p244);
    goto corral_source_split_3375;

  corral_source_split_3375:
    assume {:verifier.code 0} true;
    $p246 := $add.ref($add.ref($p242, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_3376;

  corral_source_split_3376:
    assume {:verifier.code 0} true;
    $i247 := $load.i8($M.0, $p246);
    goto corral_source_split_3377;

  corral_source_split_3377:
    assume {:verifier.code 0} true;
    $i248 := $zext.i8.i32($i247);
    goto corral_source_split_3378;

  corral_source_split_3378:
    assume {:verifier.code 0} true;
    $i249 := $ne.i32($i248, 0);
    goto corral_source_split_3379;

  corral_source_split_3379:
    assume {:verifier.code 0} true;
    assume {:branchcond $i249} true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i249 == 1);
    assume {:verifier.code 0} true;
    $i253 := $i85;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto corral_source_split_3392;

  corral_source_split_3392:
    assume {:verifier.code 0} true;
    call {:si_unique_call 696} oxu_murb_free($p0, $p242);
    goto corral_source_split_3393;

  corral_source_split_3393:
    assume {:verifier.code 0} true;
    $i254 := $i253;
    goto $bb100;

  $bb97:
    assume $i249 == 1;
    goto corral_source_split_3386;

  corral_source_split_3386:
    assume {:verifier.code 0} true;
    $p250 := $add.ref($add.ref($p86, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3387;

  corral_source_split_3387:
    assume {:verifier.code 0} true;
    $p251 := $load.ref($M.0, $p250);
    goto corral_source_split_3388;

  corral_source_split_3388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 694} ehci_urb_done($p0, $p251);
    goto SeqInstr_274, SeqInstr_275;

  SeqInstr_275:
    assume assertsPassed;
    goto SeqInstr_276;

  SeqInstr_276:
    goto corral_source_split_3389;

  corral_source_split_3389:
    assume {:verifier.code 0} true;
    $i252 := $add.i32($i85, 1);
    call {:si_unique_call 695} {:cexpr "count"} boogie_si_record_i32($i252);
    goto corral_source_split_3390;

  corral_source_split_3390:
    assume {:verifier.code 0} true;
    $i253 := $i252;
    goto $bb99;

  SeqInstr_274:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_3081;

  corral_source_split_3081:
    assume {:verifier.code 0} true;
    $p30, $p31, $p32, $i33, $i34, $i35 := $0.ref, $p20, $p22, $i17, 0, 0;
    goto $bb8;

  $bb8:
    call $p36, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $p72, $p73, $i74, $i71, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82, $p83, $p87, $i88, $i89, $i90, $i91, $i92, $i94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i93, $i107, $p108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $p120, $p121, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $p151, $i152, $i153, $p154, $i155, $i156, $p157, $i158, $i159, $p160, $i161, $i162, $i163, $i104, $p164, $i165, $i166, $p167, $i168, $i105, $i106, $p169, $p170, $i171, $i172, $p173, $p174, $p175, $p176, $p177, $i178, $p179, $p180, $p181, $i182, $i183, $i184, $p185, $p186, $i187, $i188, $p189, $p190, $p191, $p192, $p193, $i194, $p195, $i196, $i197, $p199, $i200, $i201, $i202, $i198, $i203, $i204, $p206, $p207, $i208, $p209, $i210, $i211, $p213, $p214, $p215, $p217, $i218, $p219, $p220, $i138, $i139, $p140, $p221, $p222, $i223, $i224, $p30, $p31, $p32, $i33, $i34, $i35, $i225, $i226, $p227, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13 := qh_completions_loop_$bb8($p0, $p1, $p3, $i13, $i24, $p36, $p37, $p38, $p39, $i40, $i41, $p42, $p43, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $p51, $p52, $p53, $p54, $i55, $i56, $p57, $p58, $p59, $p60, $p61, $p62, $p63, $i64, $i65, $i66, $p67, $p68, $i69, $i70, $p72, $p73, $i74, $i71, $i75, $i76, $p77, $i78, $i79, $i80, $i81, $i82, $p83, $p87, $i88, $i89, $i90, $i91, $i92, $i94, $i95, $i96, $i97, $i98, $i99, $p100, $i101, $i102, $i103, $i93, $i107, $p108, $p109, $i110, $i111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $p120, $p121, $p122, $i123, $i124, $i125, $i126, $i127, $i128, $i129, $p130, $p131, $i132, $i133, $i134, $i135, $i136, $i137, $i141, $i142, $i143, $i144, $i145, $i146, $i147, $i148, $i149, $i150, $p151, $i152, $i153, $p154, $i155, $i156, $p157, $i158, $i159, $p160, $i161, $i162, $i163, $i104, $p164, $i165, $i166, $p167, $i168, $i105, $i106, $p169, $p170, $i171, $i172, $p173, $p174, $p175, $p176, $p177, $i178, $p179, $p180, $p181, $i182, $i183, $i184, $p185, $p186, $i187, $i188, $p189, $p190, $p191, $p192, $p193, $i194, $p195, $i196, $i197, $p199, $i200, $i201, $i202, $i198, $i203, $i204, $p206, $p207, $i208, $p209, $i210, $i211, $p213, $p214, $p215, $p217, $i218, $p219, $p220, $i138, $i139, $p140, $p221, $p222, $i223, $i224, $p30, $p31, $p32, $i33, $i34, $i35, $i225, $i226, $p227, cmdloc_dummy_var_11, cmdloc_dummy_var_12, cmdloc_dummy_var_13);
    goto $bb8_last;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p31);
    goto corral_source_split_3085;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($p36, $mul.ref($sub.ref(0, 64), 136));
    goto corral_source_split_3086;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(80, 1));
    goto corral_source_split_3087;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3088;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    $i40 := $p2i.ref.i64($p30);
    goto corral_source_split_3089;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_3090;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    $i76, $p77 := $i34, $p30;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3143;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    $i78 := $p2i.ref.i64($p37);
    goto corral_source_split_3144;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p3);
    goto corral_source_split_3145;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    $i80 := $eq.i64($i78, $i79);
    goto corral_source_split_3146;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    $i81, $i82, $p83 := $i33, $i76, $p77;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    call {:si_unique_call 674} devirtbounce.6(0);
    goto corral_source_split_3158;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(8, 1));
    goto corral_source_split_3159;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    call {:si_unique_call 675} {:cexpr "token"} boogie_si_record_i32($i88);
    goto corral_source_split_3160;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    $i89 := $and.i32($i88, 128);
    goto corral_source_split_3161;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    $i90 := $eq.i32($i89, 0);
    goto corral_source_split_3162;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i90 == 1);
    goto corral_source_split_3168;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    $i107 := $eq.i32($i33, 0);
    goto corral_source_split_3169;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i107 == 1);
    assume {:verifier.code 0} true;
    $i114 := 0;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_3217;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    $i115 := $sext.i32.i64($i114);
    goto corral_source_split_3218;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} $i116 := ldv__builtin_expect($i115, 1);
    call {:si_unique_call 679} {:cexpr "tmp___9"} boogie_si_record_i64($i116);
    goto corral_source_split_3219;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    $i117 := $ne.i64($i116, 0);
    goto corral_source_split_3220;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    $i118, $i119, $p120 := $i33, $i76, $p77;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i117 == 1);
    goto corral_source_split_3224;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} $p121 := oxu_to_hcd($p0);
    goto corral_source_split_3225;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p121, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_3226;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    $i123 := $load.i32($M.44, $p122);
    goto corral_source_split_3227;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    $i124 := $and.i32($i123, 1);
    goto corral_source_split_3228;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    $i125 := $eq.i32($i124, 0);
    goto corral_source_split_3229;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    $i126 := $zext.i1.i32($i125);
    goto corral_source_split_3230;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    $i127 := $sext.i32.i64($i126);
    goto corral_source_split_3231;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} $i128 := ldv__builtin_expect($i127, 0);
    call {:si_unique_call 682} {:cexpr "tmp___4"} boogie_si_record_i64($i128);
    goto corral_source_split_3232;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    $i129 := $ne.i64($i128, 0);
    goto corral_source_split_3233;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3239;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    $i132 := $load.i32($M.0, $p131);
    goto corral_source_split_3240;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, $sub.i32(0, 115));
    goto corral_source_split_3241;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    $i134 := $zext.i1.i32($i133);
    goto corral_source_split_3242;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    $i135 := $sext.i32.i64($i134);
    goto corral_source_split_3243;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} $i136 := ldv__builtin_expect($i135, 1);
    call {:si_unique_call 684} {:cexpr "tmp___5"} boogie_si_record_i64($i136);
    goto corral_source_split_3244;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    $i137 := $ne.i64($i136, 0);
    goto corral_source_split_3245;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i141 := $ne.i32($i35, 0);
    goto corral_source_split_3255;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    $i142 := $zext.i1.i32($i141);
    goto corral_source_split_3256;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    $i143 := $sext.i32.i64($i142);
    goto corral_source_split_3257;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} $i144 := ldv__builtin_expect($i143, 0);
    call {:si_unique_call 686} {:cexpr "tmp___6"} boogie_si_record_i64($i144);
    goto corral_source_split_3258;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    $i145 := $ne.i64($i144, 0);
    goto corral_source_split_3259;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    assume !($i145 == 1);
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $i149 := $zext.i8.i32($i13);
    goto corral_source_split_3268;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    $i150 := $eq.i32($i149, 3);
    goto corral_source_split_3269;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    assume !($i150 == 1);
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $i159 := $i88;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3284;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    $i161 := $load.i32($M.0, $p160);
    goto corral_source_split_3285;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    $i162 := $and.i32($i161, 64);
    goto corral_source_split_3286;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_3287;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    $i168 := $i159;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $i105, $i106 := 1, $i168;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3200;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3201;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    $p170 := $load.ref($M.0, $p169);
    goto corral_source_split_3202;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    $i171 := $p2i.ref.i64($p170);
    goto corral_source_split_3203;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    $i172 := $eq.i64($i171, 0);
    goto corral_source_split_3204;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i172 == 1);
    goto corral_source_split_3296;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    $p176 := $p39;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(88, 1));
    goto corral_source_split_3299;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    $i178 := $load.i64($M.0, $p177);
    goto corral_source_split_3300;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} qtd_copy_status($p0, $p176, $i178, $i106);
    goto corral_source_split_3301;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(80, 1));
    goto corral_source_split_3302;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    $p180 := $load.ref($M.0, $p179);
    goto corral_source_split_3303;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p180, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3304;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    $i182 := $load.i32($M.0, $p181);
    goto corral_source_split_3305;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    $i183 := $and.i32($i182, 128);
    goto corral_source_split_3306;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    $i184 := $ne.i32($i183, 0);
    goto corral_source_split_3307;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    assume !($i184 == 1);
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3324;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    $i196 := $load.i32($M.0, $p195);
    goto corral_source_split_3325;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    $i197 := $eq.i32($i196, $sub.i32(0, 121));
    goto corral_source_split_3326;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    $i198 := 0;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    assume !($i197 == 1);
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    $i203 := $zext.i1.i32($i198);
    call {:si_unique_call 690} {:cexpr "do_status"} boogie_si_record_i32($i203);
    goto corral_source_split_3334;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    $i204 := $ne.i32($i105, 0);
    goto corral_source_split_3335;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    assume !($i204 == 1);
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p220 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(64, 1));
    goto corral_source_split_3355;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} list_del($p220);
    goto corral_source_split_3356;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    $i138, $i139, $p140 := $i203, $i105, $p37;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3249;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p32, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3250;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_3251;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    $i223 := $p2i.ref.i64($p32);
    goto corral_source_split_3252;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    $i224 := $ne.i64($i24, $i223);
    goto corral_source_split_3253;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    $i225, $i226, $p227 := $i76, $i139, $p140;
    assume true;
    goto $bb90, $bb91;

  $bb91:
    assume !($i224 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3358;

  corral_source_split_3358:
    assume {:verifier.code 0} true;
    $i27, $i28, $p29 := $i225, $i226, $p227;
    goto $bb7;

  $bb90:
    assume $i224 == 1;
    assume {:verifier.code 0} true;
    $p30, $p31, $p32, $i33, $i34, $i35 := $p140, $p32, $p222, $i139, $i76, $i138;
    goto $bb90_dummy;

  $bb84:
    assume $i204 == 1;
    goto corral_source_split_3337;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    $p206 := $add.ref($add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_3338;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    $p207 := $load.ref($M.0, $p206);
    goto corral_source_split_3339;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    $i208 := $p2i.ref.i64($p207);
    goto corral_source_split_3340;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_3341;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    $i210 := $p2i.ref.i64($p209);
    goto corral_source_split_3342;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    $i211 := $ne.i64($i208, $i210);
    goto corral_source_split_3343;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    assume !($i211 == 1);
    goto $bb86;

  $bb87:
    assume $i211 == 1;
    goto corral_source_split_3345;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_3346;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    $p214 := $load.ref($M.0, $p213);
    goto corral_source_split_3347;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    $p215 := $bitcast.ref.ref($p214);
    goto corral_source_split_3348;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    goto corral_source_split_3349;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    $i218 := $load.i32($M.0, $p217);
    goto corral_source_split_3351;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    $p219 := $add.ref($add.ref($p215, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(0, 1));
    goto corral_source_split_3352;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p219, $i218);
    goto corral_source_split_3353;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb81:
    assume $i197 == 1;
    goto corral_source_split_3328;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3329;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    $i200 := $load.i32($M.0, $p199);
    goto corral_source_split_3330;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    $i201 := $lshr.i32($i200, 30);
    goto corral_source_split_3331;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    $i202 := $eq.i32($i201, 2);
    assume {:verifier.code 0} true;
    $i198 := $i202;
    goto $bb83;

  $bb75:
    assume $i184 == 1;
    goto corral_source_split_3309;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(120, 1));
    goto corral_source_split_3310;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    $p186 := $load.ref($M.0, $p185);
    goto corral_source_split_3311;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    $i187 := $p2i.ref.i64($p186);
    goto corral_source_split_3312;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    $i188 := $ne.i64($i187, 0);
    goto corral_source_split_3313;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    assume !($i188 == 1);
    goto $bb77;

  $bb78:
    assume $i188 == 1;
    goto corral_source_split_3315;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(120, 1));
    goto corral_source_split_3316;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    $p190 := $load.ref($M.0, $p189);
    goto corral_source_split_3317;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(104, 1));
    goto corral_source_split_3318;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    $p192 := $load.ref($M.0, $p191);
    goto corral_source_split_3319;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(88, 1));
    goto corral_source_split_3320;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    $i194 := $load.i64($M.0, $p193);
    goto corral_source_split_3321;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_11 := $M.0;
    cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 689} cmdloc_dummy_var_13 := $memcpy.i8(cmdloc_dummy_var_11, cmdloc_dummy_var_12, $p190, $p192, $i194, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_13;
    goto corral_source_split_3322;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb72:
    assume $i172 == 1;
    goto corral_source_split_3291;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    $p173 := $bitcast.ref.ref($p39);
    goto corral_source_split_3292;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p173, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_3293;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.0, $p174);
    goto corral_source_split_3294;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    $p176 := $p175;
    goto $bb74;

  $bb68:
    assume $i163 == 1;
    goto corral_source_split_3289;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    $i104 := $i159;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3193;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3194;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    $i165 := $load.i32($M.0, $p164);
    goto corral_source_split_3195;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    $i166 := $or.i32($i165, 64);
    goto corral_source_split_3196;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3197;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p167, $i166);
    call {:si_unique_call 676} devirtbounce.6(0);
    goto corral_source_split_3198;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    $i168 := $i104;
    goto $bb70;

  $bb62:
    assume $i150 == 1;
    goto corral_source_split_3271;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(56, 1));
    goto corral_source_split_3272;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    $i152 := $load.i64($M.0, $p151);
    goto corral_source_split_3273;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    $i153 := $trunc.i64.i32($i152);
    goto corral_source_split_3274;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    $p154 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(12, 1));
    goto corral_source_split_3275;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    $i155 := $load.i32($M.0, $p154);
    goto corral_source_split_3276;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    $i156 := $eq.i32($i153, $i155);
    goto corral_source_split_3277;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    assume !($i156 == 1);
    goto $bb64;

  $bb65:
    assume $i156 == 1;
    goto corral_source_split_3279;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3280;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    $i158 := $load.i32($M.0, $p157);
    call {:si_unique_call 687} {:cexpr "token"} boogie_si_record_i32($i158);
    goto corral_source_split_3281;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    $i159 := $i158;
    goto $bb67;

  $bb56:
    assume $i145 == 1;
    goto corral_source_split_3261;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    $i146 := $lshr.i32($i88, 8);
    goto corral_source_split_3262;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 3);
    goto corral_source_split_3263;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_3264;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb58;

  $bb59:
    assume $i148 == 1;
    goto corral_source_split_3266;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    $i138, $i139, $p140 := 0, 1, $p77;
    goto $bb54;

  $bb52:
    assume $i137 == 1;
    goto corral_source_split_3247;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    $i138, $i139, $p140 := $i35, 1, $p77;
    goto $bb54;

  $bb49:
    assume $i129 == 1;
    goto corral_source_split_3235;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($p39, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3236;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p130, $sub.i32(0, 108));
    goto corral_source_split_3237;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb47:
    assume $i117 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3222;

  corral_source_split_3222:
    assume {:verifier.code 0} true;
    $i84, $i85, $p86 := $i118, $i119, $p120;
    goto $bb24;

  $bb41:
    assume $i107 == 1;
    goto corral_source_split_3206;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} $p108 := oxu_to_hcd($p0);
    goto corral_source_split_3207;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_3208;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.43, $p109);
    goto corral_source_split_3209;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    $i111 := $and.i32($i110, 1);
    goto corral_source_split_3210;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    $i112 := $ne.i32($i111, 0);
    goto corral_source_split_3211;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    $i113 := 0;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3215;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    $i114 := $i113;
    goto $bb46;

  $bb43:
    assume $i112 == 1;
    goto corral_source_split_3213;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    $i113 := 1;
    goto $bb45;

  $bb26:
    assume $i90 == 1;
    goto corral_source_split_3164;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    $i91 := $and.i32($i88, 64);
    goto corral_source_split_3165;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    $i92 := $ne.i32($i91, 0);
    goto corral_source_split_3166;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i92 == 1);
    goto corral_source_split_3173;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    $i94 := $lshr.i32($i88, 16);
    goto corral_source_split_3174;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 32767);
    goto corral_source_split_3175;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_3176;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    assume !($i96 == 1);
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $i93 := $i33;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3178;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    $i105, $i106 := $i93, $i88;
    goto $bb40;

  $bb31:
    assume $i96 == 1;
    goto corral_source_split_3180;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    $i97 := $lshr.i32($i88, 8);
    goto corral_source_split_3181;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    $i98 := $and.i32($i97, 3);
    goto corral_source_split_3182;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    $i99 := $eq.i32($i98, 1);
    goto corral_source_split_3183;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    assume !($i99 == 1);
    goto $bb33;

  $bb34:
    assume $i99 == 1;
    goto corral_source_split_3185;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(4, 1));
    goto corral_source_split_3186;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    $i101 := $load.i32($M.0, $p100);
    goto corral_source_split_3187;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    $i102 := $and.i32($i101, 1);
    goto corral_source_split_3188;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_3189;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i103 == 1);
    goto $bb33;

  $bb36:
    assume $i103 == 1;
    goto corral_source_split_3191;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    $i104 := $i88;
    goto $bb38;

  $bb28:
    assume $i92 == 1;
    goto corral_source_split_3171;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    $i93 := 1;
    goto $bb30;

  $bb22:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3148;

  corral_source_split_3148:
    assume {:verifier.code 0} true;
    $i84, $i85, $p86 := $i81, $i82, $p83;
    goto $bb24;

  $bb10:
    assume $i41 == 1;
    goto corral_source_split_3092;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3093;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_3094;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_3095;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    $i45 := $p2i.ref.i64($p39);
    goto corral_source_split_3096;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i44, $i45);
    goto corral_source_split_3097;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    $i47 := $zext.i1.i32($i46);
    goto corral_source_split_3098;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i47);
    goto corral_source_split_3099;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} $i49 := ldv__builtin_expect($i48, 1);
    call {:si_unique_call 665} {:cexpr "tmp___2"} boogie_si_record_i64($i49);
    goto corral_source_split_3100;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    $i50 := $ne.i64($i49, 0);
    goto corral_source_split_3101;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    $i75 := $i34;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} oxu_qtd_free($p0, $p30);
    goto corral_source_split_3141;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    $i76, $p77 := $i75, $0.ref;
    goto $bb21;

  $bb12:
    assume $i50 == 1;
    goto corral_source_split_3103;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3104;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_3105;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p52, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3106;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_3107;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    $i55 := $p2i.ref.i64($p54);
    goto corral_source_split_3108;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    $i56 := $eq.i64($i55, 0);
    goto corral_source_split_3109;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i56 == 1);
    goto corral_source_split_3124;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    $p72 := $add.ref($add.ref($p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3125;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    $p73 := $load.ref($M.0, $p72);
    goto corral_source_split_3126;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} ehci_urb_done($p0, $p73);
    goto SeqInstr_265, SeqInstr_266;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  SeqInstr_267:
    goto corral_source_split_3127;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i34, 1);
    call {:si_unique_call 667} {:cexpr "count"} boogie_si_record_i32($i74);
    assume {:verifier.code 0} true;
    $i71 := $i74;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3138;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    $i75 := $i71;
    goto $bb20;

  SeqInstr_265:
    assume !assertsPassed;
    return;

  $bb14:
    assume $i56 == 1;
    goto corral_source_split_3111;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3112;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_3113;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    $p59 := $bitcast.ref.ref($p58);
    goto corral_source_split_3114;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p59, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_3115;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    $p61 := $load.ref($M.0, $p60);
    goto corral_source_split_3116;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3117;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p62, $p61);
    goto corral_source_split_3118;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p59, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_3119;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    $i64 := $load.i8($M.0, $p63);
    goto corral_source_split_3120;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    $i65 := $zext.i8.i32($i64);
    goto corral_source_split_3121;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_3122;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i66 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i34;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3135;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} oxu_murb_free($p0, $p59);
    goto corral_source_split_3136;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    $i71 := $i70;
    goto $bb19;

  $bb16:
    assume $i66 == 1;
    goto corral_source_split_3129;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3130;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    $p68 := $load.ref($M.0, $p67);
    goto corral_source_split_3131;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} ehci_urb_done($p0, $p68);
    goto SeqInstr_268, SeqInstr_269;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  SeqInstr_270:
    goto corral_source_split_3132;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    $i69 := $add.i32($i34, 1);
    call {:si_unique_call 669} {:cexpr "count"} boogie_si_record_i32($i69);
    goto corral_source_split_3133;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    $i70 := $i69;
    goto $bb18;

  SeqInstr_268:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3061;

  corral_source_split_3061:
    assume {:verifier.code 0} true;
    $i11 := 0;
    goto $bb3;

  $bb90_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3083;
}



const list_empty: ref;

axiom list_empty == $sub.ref(0, 274053);

procedure list_empty($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation list_empty($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3423;

  corral_source_split_3423:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3424;

  corral_source_split_3424:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3425;

  corral_source_split_3425:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3426;

  corral_source_split_3426:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p0);
    goto corral_source_split_3427;

  corral_source_split_3427:
    assume {:verifier.code 0} true;
    $i5 := $eq.i64($i3, $i4);
    goto corral_source_split_3428;

  corral_source_split_3428:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3429;

  corral_source_split_3429:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;
}



const intr_deschedule: ref;

axiom intr_deschedule == $sub.ref(0, 275085);

procedure intr_deschedule($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.46, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.47, $CurrAddr, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.27, $M.29, $M.31, $M.33, $M.8, $M.28, $M.30, $M.32, $M.34, $M.39, $M.60, $M.48, $M.50, $M.57, $M.58, $M.59, assertsPassed;



implementation intr_deschedule($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3431;

  corral_source_split_3431:
    assume {:verifier.code 0} true;
    call {:si_unique_call 702} qh_unlink_periodic($p0, $p1);
    goto SeqInstr_286, SeqInstr_287;

  SeqInstr_287:
    assume assertsPassed;
    goto SeqInstr_288;

  SeqInstr_288:
    goto corral_source_split_3432;

  corral_source_split_3432:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_3433;

  corral_source_split_3433:
    assume {:verifier.code 0} true;
    call {:si_unique_call 703} $i3 := list_empty($p2);
    call {:si_unique_call 704} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_3434;

  corral_source_split_3434:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_3435;

  corral_source_split_3435:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i4 == 1);
    goto corral_source_split_3437;

  corral_source_split_3437:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3438;

  corral_source_split_3438:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_3439;

  corral_source_split_3439:
    assume {:verifier.code 0} true;
    $i7 := $and.i32($i6, 65280);
    goto corral_source_split_3440;

  corral_source_split_3440:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_3441;

  corral_source_split_3441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := 55;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3443;

  corral_source_split_3443:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i9);
    goto corral_source_split_3444;

  corral_source_split_3444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 705} __udelay($i10);
    goto corral_source_split_3445;

  corral_source_split_3445:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_3446;

  corral_source_split_3446:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p11, 3);
    goto corral_source_split_3447;

  corral_source_split_3447:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_3448;

  corral_source_split_3448:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1);
    call {:si_unique_call 706} devirtbounce.6(0);
    goto corral_source_split_3449;

  corral_source_split_3449:
    assume {:verifier.code 0} true;
    return;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $i9 := 2;
    goto $bb6;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i4 == 1;
    goto $bb2;

  SeqInstr_286:
    assume !assertsPassed;
    return;
}



const qh_put: ref;

axiom qh_put == $sub.ref(0, 276117);

procedure qh_put($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation qh_put($p0: ref)
{
  var $p1: ref;
  var vslice_dummy_var_90: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3451;

  corral_source_split_3451:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 160)), $mul.ref(128, 1));
    goto corral_source_split_3452;

  corral_source_split_3452:
    assume {:verifier.code 0} true;
    call {:si_unique_call 707} vslice_dummy_var_90 := kref_put($p1, qh_destroy);
    goto SeqInstr_289, SeqInstr_290;

  SeqInstr_290:
    assume assertsPassed;
    goto SeqInstr_291;

  SeqInstr_291:
    goto corral_source_split_3453;

  corral_source_split_3453:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_289:
    assume !assertsPassed;
    return;
}



const qh_destroy: ref;

axiom qh_destroy == $sub.ref(0, 277149);

procedure qh_destroy($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $CurrAddr, $M.22;



implementation qh_destroy($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i24;
  var $i21: i24;
  var $i22: i24;
  var $p23: ref;
  var $p24: ref;
  var $i25: i8;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 708} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3455;

  corral_source_split_3455:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_3456;

  corral_source_split_3456:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p2, $mul.ref($sub.ref(0, 128), 160));
    goto corral_source_split_3457;

  corral_source_split_3457:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(120, 1));
    goto corral_source_split_3458;

  corral_source_split_3458:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3459;

  corral_source_split_3459:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(88, 1));
    goto corral_source_split_3460;

  corral_source_split_3460:
    assume {:verifier.code 0} true;
    call {:si_unique_call 709} $i7 := list_empty($p6);
    call {:si_unique_call 710} {:cexpr "tmp___1"} boogie_si_record_i32($i7);
    goto corral_source_split_3461;

  corral_source_split_3461:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i7, 0);
    goto corral_source_split_3462;

  corral_source_split_3462:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb3;

  $bb3:
    assume !($i8 == 1);
    goto corral_source_split_3487;

  corral_source_split_3487:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(80, 1));
    goto corral_source_split_3488;

  corral_source_split_3488:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_3489;

  corral_source_split_3489:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3490;

  corral_source_split_3490:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_3491;

  corral_source_split_3491:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_3492;

  corral_source_split_3492:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(104, 1));
    goto corral_source_split_3502;

  corral_source_split_3502:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_3503;

  corral_source_split_3503:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3504;

  corral_source_split_3504:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3505;

  corral_source_split_3505:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 717} oxu_qh_free($p5, $p3);
    goto corral_source_split_3512;

  corral_source_split_3512:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_3507;

  corral_source_split_3507:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p2, $mul.ref($sub.ref(0, 128), 160)), $mul.ref(104, 1));
    goto corral_source_split_3508;

  corral_source_split_3508:
    assume {:verifier.code 0} true;
    $p39 := $load.ref($M.0, $p38);
    goto corral_source_split_3509;

  corral_source_split_3509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 716} oxu_qtd_free($p5, $p39);
    goto corral_source_split_3510;

  corral_source_split_3510:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb4:
    assume {:verifier.code 0} true;
    assume $i13 == 1;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3464;

  corral_source_split_3464:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p14, .str.2);
    goto corral_source_split_3465;

  corral_source_split_3465:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3466;

  corral_source_split_3466:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p15, .str.3);
    goto corral_source_split_3467;

  corral_source_split_3467:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3468;

  corral_source_split_3468:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p16, .str);
    goto corral_source_split_3469;

  corral_source_split_3469:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3470;

  corral_source_split_3470:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p17, .str.4);
    goto corral_source_split_3471;

  corral_source_split_3471:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3472;

  corral_source_split_3472:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_3473;

  corral_source_split_3473:
    assume {:verifier.code 0} true;
    $i20 := $load.i24($M.6, $p19);
    goto corral_source_split_3474;

  corral_source_split_3474:
    assume {:verifier.code 0} true;
    $i21 := $and.i24($i20, $sub.i24(0, 262144));
    goto corral_source_split_3475;

  corral_source_split_3475:
    assume {:verifier.code 0} true;
    $i22 := $or.i24($i21, 625);
    goto corral_source_split_3476;

  corral_source_split_3476:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p19, $i22);
    goto corral_source_split_3477;

  corral_source_split_3477:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3478;

  corral_source_split_3478:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p23, 0);
    goto corral_source_split_3479;

  corral_source_split_3479:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3480;

  corral_source_split_3480:
    assume {:verifier.code 0} true;
    $i25 := $load.i8($M.7, $p24);
    goto corral_source_split_3481;

  corral_source_split_3481:
    assume {:verifier.code 0} true;
    $i26 := $zext.i8.i64($i25);
    goto corral_source_split_3482;

  corral_source_split_3482:
    assume {:verifier.code 0} true;
    $i27 := $and.i64($i26, 1);
    goto corral_source_split_3483;

  corral_source_split_3483:
    assume {:verifier.code 0} true;
    call {:si_unique_call 711} $i28 := ldv__builtin_expect($i27, 0);
    call {:si_unique_call 712} {:cexpr "tmp___0"} boogie_si_record_i64($i28);
    goto corral_source_split_3484;

  corral_source_split_3484:
    assume {:verifier.code 0} true;
    $i29 := $ne.i64($i28, 0);
    goto corral_source_split_3485;

  corral_source_split_3485:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    call {:si_unique_call 715} devirtbounce.3(0, .str, 626, 12);
    goto corral_source_split_3500;

  corral_source_split_3500:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    call qh_destroy_loop_$bb9();
    goto $bb9_last;

  $bb6:
    assume $i29 == 1;
    goto corral_source_split_3494;

  corral_source_split_3494:
    assume {:verifier.code 0} true;
    call {:si_unique_call 713} $p30 := oxu_to_hcd($p5);
    goto corral_source_split_3495;

  corral_source_split_3495:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($add.ref($p30, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_3496;

  corral_source_split_3496:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_3497;

  corral_source_split_3497:
    assume {:verifier.code 0} true;
    call {:si_unique_call 714} __dynamic_dev_dbg.ref.ref.ref($p1, $p33, .str.4);
    goto corral_source_split_3498;

  corral_source_split_3498:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb1:
    assume {:verifier.code 0} true;
    assume $i8 == 1;
    goto $bb2;

  $bb9_dummy:
    assume false;
    return;

  $bb9_last:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;
}



const kref_put: ref;

axiom kref_put == $sub.ref(0, 278181);

procedure kref_put($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation kref_put($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3514;

  corral_source_split_3514:
    assume {:verifier.code 0} true;
    call {:si_unique_call 718} $i2 := kref_sub($p0, 1, $p1);
    goto SeqInstr_292, SeqInstr_293;

  SeqInstr_293:
    assume assertsPassed;
    goto SeqInstr_294;

  SeqInstr_294:
    call {:si_unique_call 719} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_3515;

  corral_source_split_3515:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;

  SeqInstr_292:
    assume !assertsPassed;
    return;
}



const kref_sub: ref;

axiom kref_sub == $sub.ref(0, 279213);

procedure kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation kref_sub($p0: ref, $i1: i32, $p2: ref) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i32;
  var vslice_dummy_var_91: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 720} {:cexpr "kref_sub:arg:count"} boogie_si_record_i32($i1);
    goto corral_source_split_3517;

  corral_source_split_3517:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p2);
    goto corral_source_split_3518;

  corral_source_split_3518:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, 0);
    goto corral_source_split_3519;

  corral_source_split_3519:
    assume {:verifier.code 0} true;
    $i5 := $zext.i1.i32($i4);
    call {:si_unique_call 721} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i5);
    goto corral_source_split_3520;

  corral_source_split_3520:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3521;

  corral_source_split_3521:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3522;

  corral_source_split_3522:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_3523;

  corral_source_split_3523:
    assume {:verifier.code 0} true;
    call {:si_unique_call 722} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 723} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_3524;

  corral_source_split_3524:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_3525;

  corral_source_split_3525:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i11 := $ne.i32($i5, 0);
    goto corral_source_split_3530;

  corral_source_split_3530:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    goto corral_source_split_3531;

  corral_source_split_3531:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3532;

  corral_source_split_3532:
    assume {:verifier.code 0} true;
    call {:si_unique_call 725} vslice_dummy_var_91 := ldv__builtin_expect($i13, 0);
    goto corral_source_split_3533;

  corral_source_split_3533:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_3534;

  corral_source_split_3534:
    assume {:verifier.code 0} true;
    call {:si_unique_call 726} $i16 := atomic_sub_and_test($i1, $p15);
    call {:si_unique_call 727} {:cexpr "tmp___0"} boogie_si_record_i32($i16);
    goto corral_source_split_3535;

  corral_source_split_3535:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_3536;

  corral_source_split_3536:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_3540;

  corral_source_split_3540:
    assume {:verifier.code 0} true;
    $r := $i18;
    return;

  $bb4:
    assume $i17 == 1;
    call {:si_unique_call 728} devirtbounce.7($p2, $p0);
    goto SeqInstr_295, SeqInstr_296;

  SeqInstr_296:
    assume assertsPassed;
    goto SeqInstr_297;

  SeqInstr_297:
    goto corral_source_split_3538;

  corral_source_split_3538:
    assume {:verifier.code 0} true;
    $i18 := 1;
    goto $bb6;

  SeqInstr_295:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_3527;

  corral_source_split_3527:
    assume {:verifier.code 0} true;
    call {:si_unique_call 724} warn_slowpath_null(.str.1, 71);
    goto corral_source_split_3528;

  corral_source_split_3528:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const warn_slowpath_null: ref;

axiom warn_slowpath_null == $sub.ref(0, 280245);

procedure warn_slowpath_null($p0: ref, $i1: i32);
  free requires assertsPassed;



implementation warn_slowpath_null($p0: ref, $i1: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 729} {:cexpr "warn_slowpath_null:arg:arg1"} boogie_si_record_i32($i1);
    goto corral_source_split_3542;

  corral_source_split_3542:
    assume {:verifier.code 0} true;
    return;
}



const atomic_sub_and_test: ref;

axiom atomic_sub_and_test == $sub.ref(0, 281277);

procedure atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation atomic_sub_and_test($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 730} $p2 := $alloc($mul.ref(1, $zext.i32.i64(1)));
    call {:si_unique_call 731} {:cexpr "atomic_sub_and_test:arg:i"} boogie_si_record_i32($i0);
    goto corral_source_split_3544;

  corral_source_split_3544:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 732} devirtbounce.8(0, $p3, $p2, $i0, $p3);
    goto corral_source_split_3545;

  corral_source_split_3545:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.45, $p2);
    goto corral_source_split_3546;

  corral_source_split_3546:
    assume {:verifier.code 0} true;
    $i5 := $sext.i8.i32($i4);
    goto corral_source_split_3547;

  corral_source_split_3547:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3548;

  corral_source_split_3548:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_3549;

  corral_source_split_3549:
    assume {:verifier.code 0} true;
    $r := $i7;
    return;
}



const oxu_qtd_free: ref;

axiom oxu_qtd_free == $sub.ref(0, 282309);

procedure oxu_qtd_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22;



implementation oxu_qtd_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i32;
  var $i15: i64;
  var $p17: ref;
  var $p18: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3551;

  corral_source_split_3551:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_3552;

  corral_source_split_3552:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3553;

  corral_source_split_3553:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3554;

  corral_source_split_3554:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3555;

  corral_source_split_3555:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_3560;

  corral_source_split_3560:
    assume {:verifier.code 0} true;
    call {:si_unique_call 734} spin_lock($p6);
    goto corral_source_split_3561;

  corral_source_split_3561:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p1);
    goto corral_source_split_3562;

  corral_source_split_3562:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_3563;

  corral_source_split_3563:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3564;

  corral_source_split_3564:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 15104)), $mul.ref(10752, 1));
    goto corral_source_split_3565;

  corral_source_split_3565:
    assume {:verifier.code 0} true;
    $i11 := $p2i.ref.i64($p10);
    goto corral_source_split_3566;

  corral_source_split_3566:
    assume {:verifier.code 0} true;
    $i12 := $sub.i64($i7, $i11);
    goto corral_source_split_3567;

  corral_source_split_3567:
    assume {:verifier.code 0} true;
    $i13 := $sdiv.i64($i12, 160);
    goto corral_source_split_3568;

  corral_source_split_3568:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i13);
    call {:si_unique_call 735} {:cexpr "index"} boogie_si_record_i32($i14);
    goto corral_source_split_3569;

  corral_source_split_3569:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_3570;

  corral_source_split_3570:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref($i15, 1));
    goto corral_source_split_3571;

  corral_source_split_3571:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, 0);
    goto corral_source_split_3572;

  corral_source_split_3572:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_3573;

  corral_source_split_3573:
    assume {:verifier.code 0} true;
    call {:si_unique_call 736} spin_unlock($p18);
    goto corral_source_split_3574;

  corral_source_split_3574:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_3557;

  corral_source_split_3557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 733} oxu_buf_free($p0, $p1);
    goto corral_source_split_3558;

  corral_source_split_3558:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const oxu_qh_free: ref;

axiom oxu_qh_free == $sub.ref(0, 283341);

procedure oxu_qh_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22;



implementation oxu_qh_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i64;
  var $i10: i32;
  var $i11: i64;
  var $p13: ref;
  var $p14: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3576;

  corral_source_split_3576:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_3577;

  corral_source_split_3577:
    assume {:verifier.code 0} true;
    call {:si_unique_call 737} spin_lock($p2);
    goto corral_source_split_3578;

  corral_source_split_3578:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3579;

  corral_source_split_3579:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_3580;

  corral_source_split_3580:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3581;

  corral_source_split_3581:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p5, $mul.ref(0, 15104)), $mul.ref(8192, 1));
    goto corral_source_split_3582;

  corral_source_split_3582:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_3583;

  corral_source_split_3583:
    assume {:verifier.code 0} true;
    $i8 := $sub.i64($i3, $i7);
    goto corral_source_split_3584;

  corral_source_split_3584:
    assume {:verifier.code 0} true;
    $i9 := $sdiv.i64($i8, 160);
    goto corral_source_split_3585;

  corral_source_split_3585:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i64.i32($i9);
    call {:si_unique_call 738} {:cexpr "index"} boogie_si_record_i32($i10);
    goto corral_source_split_3586;

  corral_source_split_3586:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_3587;

  corral_source_split_3587:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref($i11, 1));
    goto corral_source_split_3588;

  corral_source_split_3588:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p13, 0);
    goto corral_source_split_3589;

  corral_source_split_3589:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_3590;

  corral_source_split_3590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 739} spin_unlock($p14);
    goto corral_source_split_3591;

  corral_source_split_3591:
    assume {:verifier.code 0} true;
    return;
}



const spin_lock: ref;

axiom spin_lock == $sub.ref(0, 284373);

procedure spin_lock($p0: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3593;

  corral_source_split_3593:
    assume {:verifier.code 0} true;
    call {:si_unique_call 740} ldv_spin_lock();
    goto corral_source_split_3594;

  corral_source_split_3594:
    assume {:verifier.code 0} true;
    call {:si_unique_call 741} ldv_spin_lock_5($p0);
    goto corral_source_split_3595;

  corral_source_split_3595:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock: ref;

axiom spin_unlock == $sub.ref(0, 285405);

procedure spin_unlock($p0: ref);
  free requires assertsPassed;
  modifies $M.22;



implementation spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3597;

  corral_source_split_3597:
    assume {:verifier.code 0} true;
    call {:si_unique_call 742} ldv_spin_unlock();
    goto corral_source_split_3598;

  corral_source_split_3598:
    assume {:verifier.code 0} true;
    call {:si_unique_call 743} ldv_spin_unlock_9($p0);
    goto corral_source_split_3599;

  corral_source_split_3599:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_9: ref;

axiom ldv_spin_unlock_9 == $sub.ref(0, 286437);

procedure ldv_spin_unlock_9($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_unlock_9($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3601;

  corral_source_split_3601:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3602;

  corral_source_split_3602:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3603;

  corral_source_split_3603:
    assume {:verifier.code 0} true;
    call {:si_unique_call 744} _raw_spin_unlock($p2);
    goto corral_source_split_3604;

  corral_source_split_3604:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock: ref;

axiom _raw_spin_unlock == $sub.ref(0, 287469);

procedure _raw_spin_unlock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_unlock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3606;

  corral_source_split_3606:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_lock_5: ref;

axiom ldv_spin_lock_5 == $sub.ref(0, 288501);

procedure ldv_spin_lock_5($p0: ref);
  free requires assertsPassed;



implementation ldv_spin_lock_5($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3608;

  corral_source_split_3608:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_3609;

  corral_source_split_3609:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_3610;

  corral_source_split_3610:
    assume {:verifier.code 0} true;
    call {:si_unique_call 745} _raw_spin_lock($p2);
    goto corral_source_split_3611;

  corral_source_split_3611:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_lock: ref;

axiom _raw_spin_lock == $sub.ref(0, 289533);

procedure _raw_spin_lock($p0: ref);
  free requires assertsPassed;



implementation _raw_spin_lock($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3613;

  corral_source_split_3613:
    assume {:verifier.code 0} true;
    return;
}



const oxu_buf_free: ref;

axiom oxu_buf_free == $sub.ref(0, 290565);

procedure oxu_buf_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.22, $M.0;



implementation oxu_buf_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $i13: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3615;

  corral_source_split_3615:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_3616;

  corral_source_split_3616:
    assume {:verifier.code 0} true;
    call {:si_unique_call 746} spin_lock($p2);
    goto corral_source_split_3617;

  corral_source_split_3617:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_3618;

  corral_source_split_3618:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3619;

  corral_source_split_3619:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_3620;

  corral_source_split_3620:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_3621;

  corral_source_split_3621:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_3622;

  corral_source_split_3622:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 15104)), $mul.ref(0, 1));
    goto corral_source_split_3623;

  corral_source_split_3623:
    assume {:verifier.code 0} true;
    $i9 := $p2i.ref.i64($p8);
    goto corral_source_split_3624;

  corral_source_split_3624:
    assume {:verifier.code 0} true;
    $i10 := $sub.i64($i5, $i9);
    goto corral_source_split_3625;

  corral_source_split_3625:
    assume {:verifier.code 0} true;
    $i11 := $sdiv.i64($i10, 512);
    goto corral_source_split_3626;

  corral_source_split_3626:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i11);
    call {:si_unique_call 747} {:cexpr "index"} boogie_si_record_i32($i12);
    goto corral_source_split_3627;

  corral_source_split_3627:
    assume {:verifier.code 0} true;
    $i13 := $sext.i32.i64($i12);
    goto corral_source_split_3628;

  corral_source_split_3628:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(49, 1)), $mul.ref($i13, 1));
    goto corral_source_split_3629;

  corral_source_split_3629:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p15, 0);
    goto corral_source_split_3630;

  corral_source_split_3630:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(96, 1));
    goto corral_source_split_3631;

  corral_source_split_3631:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p16, 0);
    goto corral_source_split_3632;

  corral_source_split_3632:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(112, 1));
    goto corral_source_split_3633;

  corral_source_split_3633:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p17, 0);
    goto corral_source_split_3634;

  corral_source_split_3634:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_3635;

  corral_source_split_3635:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_3636;

  corral_source_split_3636:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_3637;

  corral_source_split_3637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 748} spin_unlock($p19);
    goto corral_source_split_3638;

  corral_source_split_3638:
    assume {:verifier.code 0} true;
    return;
}



const qh_unlink_periodic: ref;

axiom qh_unlink_periodic == $sub.ref(0, 291597);

procedure qh_unlink_periodic($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.46, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.47, $CurrAddr, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.27, $M.29, $M.31, $M.33, $M.8, $M.28, $M.30, $M.32, $M.34, $M.39, $M.60, $M.48, $M.50, $M.57, $M.58, $M.59, assertsPassed;



implementation qh_unlink_periodic($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i16;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i14: i32;
  var $p19: ref;
  var $p21: ref;
  var $i22: i32;
  var $p23: ref;
  var $i24: i16;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i32;
  var $p34: ref;
  var $i35: i16;
  var $i36: i32;
  var $i37: i32;
  var $p39: ref;
  var $i40: i8;
  var $i41: i32;
  var $i42: i32;
  var $i38: i32;
  var $i43: i32;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i24;
  var $i53: i24;
  var $i54: i24;
  var $p55: ref;
  var $p56: ref;
  var $i57: i8;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i16;
  var $i69: i32;
  var $i70: i32;
  var $p71: ref;
  var $i72: i16;
  var $i73: i32;
  var $p74: ref;
  var $i75: i8;
  var $i76: i32;
  var $p77: ref;
  var $i78: i8;
  var $i79: i32;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $i84: i32;
  var $i85: i32;
  var $p86: ref;
  var $p87: ref;
  var $i88: i32;
  var $i89: i1;
  var vslice_dummy_var_92: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 749} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_3640;

  corral_source_split_3640:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_3641;

  corral_source_split_3641:
    assume {:verifier.code 0} true;
    $i4 := $load.i16($M.0, $p3);
    goto corral_source_split_3642;

  corral_source_split_3642:
    assume {:verifier.code 0} true;
    $i5 := $zext.i16.i32($i4);
    call {:si_unique_call 750} {:cexpr "period"} boogie_si_record_i32($i5);
    goto corral_source_split_3643;

  corral_source_split_3643:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_3644;

  corral_source_split_3644:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $i5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3648;

  corral_source_split_3648:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3649;

  corral_source_split_3649:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_3650;

  corral_source_split_3650:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    call {:si_unique_call 751} {:cexpr "i"} boogie_si_record_i32($i10);
    goto corral_source_split_3651;

  corral_source_split_3651:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_3652;

  corral_source_split_3652:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.0, $p11);
    goto corral_source_split_3653;

  corral_source_split_3653:
    assume {:verifier.code 0} true;
    $i13 := $ugt.i32($i12, $i10);
    goto corral_source_split_3654;

  corral_source_split_3654:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i13 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    call {:si_unique_call 754} $p19 := oxu_to_hcd($p0);
    goto corral_source_split_3668;

  corral_source_split_3668:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3669;

  corral_source_split_3669:
    assume {:verifier.code 0} true;
    $i22 := $load.i32($M.46, $p21);
    goto corral_source_split_3670;

  corral_source_split_3670:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_3671;

  corral_source_split_3671:
    assume {:verifier.code 0} true;
    $i24 := $load.i16($M.0, $p23);
    goto corral_source_split_3672;

  corral_source_split_3672:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i32($i24);
    goto corral_source_split_3673;

  corral_source_split_3673:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_3674;

  corral_source_split_3674:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i26 == 1);
    goto corral_source_split_3689;

  corral_source_split_3689:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_3690;

  corral_source_split_3690:
    assume {:verifier.code 0} true;
    $i40 := $load.i8($M.0, $p39);
    goto corral_source_split_3691;

  corral_source_split_3691:
    assume {:verifier.code 0} true;
    $i41 := $zext.i8.i32($i40);
    goto corral_source_split_3692;

  corral_source_split_3692:
    assume {:verifier.code 0} true;
    $i42 := $mul.i32($i41, 8);
    goto corral_source_split_3693;

  corral_source_split_3693:
    assume {:verifier.code 0} true;
    $i38 := $i42;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_3695;

  corral_source_split_3695:
    assume {:verifier.code 0} true;
    $i43 := $sub.i32($i22, $i38);
    goto corral_source_split_3696;

  corral_source_split_3696:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p19, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_3697;

  corral_source_split_3697:
    assume {:verifier.code 0} true;
    $M.46 := $store.i32($M.46, $p45, $i43);
    goto corral_source_split_3698;

  corral_source_split_3698:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_3699;

  corral_source_split_3699:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p46, .str.2);
    goto corral_source_split_3700;

  corral_source_split_3700:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_3701;

  corral_source_split_3701:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p47, .str.9);
    goto corral_source_split_3702;

  corral_source_split_3702:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_3703;

  corral_source_split_3703:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p48, .str);
    goto corral_source_split_3704;

  corral_source_split_3704:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_3705;

  corral_source_split_3705:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p49, .str.10);
    goto corral_source_split_3706;

  corral_source_split_3706:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_3707;

  corral_source_split_3707:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_3708;

  corral_source_split_3708:
    assume {:verifier.code 0} true;
    $i52 := $load.i24($M.6, $p51);
    goto corral_source_split_3709;

  corral_source_split_3709:
    assume {:verifier.code 0} true;
    $i53 := $and.i24($i52, $sub.i24(0, 262144));
    goto corral_source_split_3710;

  corral_source_split_3710:
    assume {:verifier.code 0} true;
    $i54 := $or.i24($i53, 2028);
    goto corral_source_split_3711;

  corral_source_split_3711:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p51, $i54);
    goto corral_source_split_3712;

  corral_source_split_3712:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3713;

  corral_source_split_3713:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p55, 0);
    goto corral_source_split_3714;

  corral_source_split_3714:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_3715;

  corral_source_split_3715:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.7, $p56);
    goto corral_source_split_3716;

  corral_source_split_3716:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i64($i57);
    goto corral_source_split_3717;

  corral_source_split_3717:
    assume {:verifier.code 0} true;
    $i59 := $and.i64($i58, 1);
    goto corral_source_split_3718;

  corral_source_split_3718:
    assume {:verifier.code 0} true;
    call {:si_unique_call 755} $i60 := ldv__builtin_expect($i59, 0);
    call {:si_unique_call 756} {:cexpr "tmp___1"} boogie_si_record_i64($i60);
    goto corral_source_split_3719;

  corral_source_split_3719:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i60, 0);
    goto corral_source_split_3720;

  corral_source_split_3720:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i61 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_3743;

  corral_source_split_3743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p80, 2);
    goto corral_source_split_3744;

  corral_source_split_3744:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_3745;

  corral_source_split_3745:
    assume {:verifier.code 0} true;
    $p82 := $bitcast.ref.ref($p81);
    goto corral_source_split_3746;

  corral_source_split_3746:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p82, $0.ref);
    goto corral_source_split_3747;

  corral_source_split_3747:
    assume {:verifier.code 0} true;
    call {:si_unique_call 760} qh_put($p1);
    goto SeqInstr_298, SeqInstr_299;

  SeqInstr_299:
    assume assertsPassed;
    goto SeqInstr_300;

  SeqInstr_300:
    goto corral_source_split_3748;

  corral_source_split_3748:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(436, 1));
    goto corral_source_split_3749;

  corral_source_split_3749:
    assume {:verifier.code 0} true;
    $i84 := $load.i32($M.0, $p83);
    goto corral_source_split_3750;

  corral_source_split_3750:
    assume {:verifier.code 0} true;
    $i85 := $sub.i32($i84, 1);
    goto corral_source_split_3751;

  corral_source_split_3751:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(436, 1));
    goto corral_source_split_3752;

  corral_source_split_3752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p86, $i85);
    goto corral_source_split_3753;

  corral_source_split_3753:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(436, 1));
    goto corral_source_split_3754;

  corral_source_split_3754:
    assume {:verifier.code 0} true;
    $i88 := $load.i32($M.0, $p87);
    goto corral_source_split_3755;

  corral_source_split_3755:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 0);
    goto corral_source_split_3756;

  corral_source_split_3756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    return;

  $bb18:
    assume $i89 == 1;
    goto corral_source_split_3758;

  corral_source_split_3758:
    assume {:verifier.code 0} true;
    call {:si_unique_call 761} vslice_dummy_var_92 := disable_periodic($p0);
    goto SeqInstr_301, SeqInstr_302;

  SeqInstr_302:
    assume assertsPassed;
    goto SeqInstr_303;

  SeqInstr_303:
    goto corral_source_split_3759;

  corral_source_split_3759:
    assume {:verifier.code 0} true;
    goto $bb20;

  SeqInstr_301:
    assume !assertsPassed;
    return;

  SeqInstr_298:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i61 == 1;
    goto corral_source_split_3722;

  corral_source_split_3722:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3723;

  corral_source_split_3723:
    assume {:verifier.code 0} true;
    call {:si_unique_call 757} $i63 := __le32_to_cpup($p62);
    call {:si_unique_call 758} {:cexpr "tmp___0"} boogie_si_record_i32($i63);
    goto corral_source_split_3724;

  corral_source_split_3724:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_3725;

  corral_source_split_3725:
    assume {:verifier.code 0} true;
    $p65 := $load.ref($M.0, $p64);
    goto corral_source_split_3726;

  corral_source_split_3726:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p65, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_3727;

  corral_source_split_3727:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_3728;

  corral_source_split_3728:
    assume {:verifier.code 0} true;
    $i68 := $load.i16($M.0, $p67);
    goto corral_source_split_3729;

  corral_source_split_3729:
    assume {:verifier.code 0} true;
    $i69 := $zext.i16.i32($i68);
    goto corral_source_split_3730;

  corral_source_split_3730:
    assume {:verifier.code 0} true;
    $i70 := $and.i32($i63, 65535);
    goto corral_source_split_3731;

  corral_source_split_3731:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_3732;

  corral_source_split_3732:
    assume {:verifier.code 0} true;
    $i72 := $load.i16($M.0, $p71);
    goto corral_source_split_3733;

  corral_source_split_3733:
    assume {:verifier.code 0} true;
    $i73 := $zext.i16.i32($i72);
    goto corral_source_split_3734;

  corral_source_split_3734:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_3735;

  corral_source_split_3735:
    assume {:verifier.code 0} true;
    $i75 := $load.i8($M.0, $p74);
    goto corral_source_split_3736;

  corral_source_split_3736:
    assume {:verifier.code 0} true;
    $i76 := $zext.i8.i32($i75);
    goto corral_source_split_3737;

  corral_source_split_3737:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_3738;

  corral_source_split_3738:
    assume {:verifier.code 0} true;
    $i78 := $load.i8($M.0, $p77);
    goto corral_source_split_3739;

  corral_source_split_3739:
    assume {:verifier.code 0} true;
    $i79 := $zext.i8.i32($i78);
    goto corral_source_split_3740;

  corral_source_split_3740:
    assume {:verifier.code 0} true;
    call {:si_unique_call 759} __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref.i32.i32.i32($p2, $p66, .str.10, $i69, $i70, $p1, $i73, $i76, $i79);
    goto corral_source_split_3741;

  corral_source_split_3741:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb12:
    assume $i26 == 1;
    goto corral_source_split_3676;

  corral_source_split_3676:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_3677;

  corral_source_split_3677:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_3678;

  corral_source_split_3678:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_3679;

  corral_source_split_3679:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_3680;

  corral_source_split_3680:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_3681;

  corral_source_split_3681:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_3682;

  corral_source_split_3682:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i29, $i32);
    goto corral_source_split_3683;

  corral_source_split_3683:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_3684;

  corral_source_split_3684:
    assume {:verifier.code 0} true;
    $i35 := $load.i16($M.0, $p34);
    goto corral_source_split_3685;

  corral_source_split_3685:
    assume {:verifier.code 0} true;
    $i36 := $zext.i16.i32($i35);
    goto corral_source_split_3686;

  corral_source_split_3686:
    assume {:verifier.code 0} true;
    $i37 := $sdiv.i32($i33, $i36);
    goto corral_source_split_3687;

  corral_source_split_3687:
    assume {:verifier.code 0} true;
    $i38 := $i37;
    goto $bb14;

  $bb4:
    assume $i13 == 1;
    goto corral_source_split_3656;

  corral_source_split_3656:
    assume {:verifier.code 0} true;
    $i14 := $i10;
    goto $bb7;

  $bb7:
    call $p15, $i16, $i17, $i18, $i14 := qh_unlink_periodic_loop_$bb7($p0, $p1, $i7, $p11, $p15, $i16, $i17, $i18, $i14);
    goto $bb7_last;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p1);
    goto corral_source_split_3660;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} periodic_unlink($p0, $i14, $p15);
    goto corral_source_split_3661;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    $i16 := $add.i32($i14, $i7);
    call {:si_unique_call 753} {:cexpr "i"} boogie_si_record_i32($i16);
    goto corral_source_split_3662;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p11);
    goto corral_source_split_3663;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    $i18 := $ugt.i32($i17, $i16);
    goto corral_source_split_3664;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i18 == 1);
    goto corral_source_split_3666;

  corral_source_split_3666:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb9:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i16;
    goto $bb9_dummy;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3646;

  corral_source_split_3646:
    assume {:verifier.code 0} true;
    $i7 := 1;
    goto $bb3;

  $bb9_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;
}



const __udelay: ref;

axiom __udelay == $sub.ref(0, 292629);

procedure __udelay($i0: i64);
  free requires assertsPassed;



implementation __udelay($i0: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 762} {:cexpr "__udelay:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_3761;

  corral_source_split_3761:
    assume {:verifier.code 0} true;
    return;
}



const periodic_unlink: ref;

axiom periodic_unlink == $sub.ref(0, 293661);

procedure periodic_unlink($p0: ref, $i1: i32, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation periodic_unlink($p0: ref, $i1: i32, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $i23: i32;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i1;
  var $p21: ref;
  var $p22: ref;
  var $p35: ref;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p33: ref;
  var $p34: ref;
  var $p19: ref;
  var $p20: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i1;
  var $i45: i32;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $i52: i32;
  var cmdloc_dummy_var_14: [ref]i8;
  var cmdloc_dummy_var_15: [ref]i8;
  var cmdloc_dummy_var_16: [ref]i8;
  var cmdloc_dummy_var_17: [ref]i8;
  var cmdloc_dummy_var_18: [ref]i8;
  var cmdloc_dummy_var_19: [ref]i8;
  var cmdloc_dummy_var_20: [ref]i8;
  var cmdloc_dummy_var_21: [ref]i8;
  var cmdloc_dummy_var_22: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 763} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    call {:si_unique_call 764} {:cexpr "periodic_unlink:arg:frame"} boogie_si_record_i32($i1);
    goto corral_source_split_3763;

  corral_source_split_3763:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_3764;

  corral_source_split_3764:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3765;

  corral_source_split_3765:
    assume {:verifier.code 0} true;
    $i6 := $zext.i32.i64($i1);
    goto corral_source_split_3766;

  corral_source_split_3766:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($p5, $mul.ref($i6, 8));
    goto corral_source_split_3767;

  corral_source_split_3767:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_3768;

  corral_source_split_3768:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_3769;

  corral_source_split_3769:
    assume {:verifier.code 0} true;
    $i10 := $zext.i32.i64($i1);
    goto corral_source_split_3770;

  corral_source_split_3770:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($p9, $mul.ref($i10, 4));
    goto corral_source_split_3771;

  corral_source_split_3771:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p3);
    goto corral_source_split_3772;

  corral_source_split_3772:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p7);
    goto corral_source_split_3773;

  corral_source_split_3773:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_14 := $M.0;
    cmdloc_dummy_var_15 := $M.0;
    call {:si_unique_call 765} cmdloc_dummy_var_16 := $memcpy.i8(cmdloc_dummy_var_14, cmdloc_dummy_var_15, $p12, $p13, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_16;
    goto corral_source_split_3774;

  corral_source_split_3774:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p3);
    goto corral_source_split_3775;

  corral_source_split_3775:
    assume {:verifier.code 0} true;
    $p15 := $bitcast.ref.ref($p3);
    goto corral_source_split_3776;

  corral_source_split_3776:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_3777;

  corral_source_split_3777:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p16);
    goto corral_source_split_3778;

  corral_source_split_3778:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_3779;

  corral_source_split_3779:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p7, $p11;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i18 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p3);
    goto corral_source_split_3807;

  corral_source_split_3807:
    assume {:verifier.code 0} true;
    $p42 := $load.ref($M.0, $p41);
    goto corral_source_split_3808;

  corral_source_split_3808:
    assume {:verifier.code 0} true;
    $i43 := $p2i.ref.i64($p42);
    goto corral_source_split_3809;

  corral_source_split_3809:
    assume {:verifier.code 0} true;
    $i44 := $eq.i64($i43, 0);
    goto corral_source_split_3810;

  corral_source_split_3810:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p20);
    goto corral_source_split_3814;

  corral_source_split_3814:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i45, 6);
    goto corral_source_split_3815;

  corral_source_split_3815:
    assume {:verifier.code 0} true;
    call {:si_unique_call 768} $p47 := periodic_next_shadow($p3, $i46);
    goto corral_source_split_3816;

  corral_source_split_3816:
    assume {:verifier.code 0} true;
    $p48 := $bitcast.ref.ref($p19);
    goto corral_source_split_3817;

  corral_source_split_3817:
    assume {:verifier.code 0} true;
    $p49 := $bitcast.ref.ref($p47);
    goto corral_source_split_3818;

  corral_source_split_3818:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_20 := $M.0;
    cmdloc_dummy_var_21 := $M.0;
    call {:si_unique_call 769} cmdloc_dummy_var_22 := $memcpy.i8(cmdloc_dummy_var_20, cmdloc_dummy_var_21, $p48, $p49, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_22;
    goto corral_source_split_3819;

  corral_source_split_3819:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p3);
    goto corral_source_split_3820;

  corral_source_split_3820:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_3821;

  corral_source_split_3821:
    assume {:verifier.code 0} true;
    $i52 := $load.i32($M.0, $p51);
    goto corral_source_split_3822;

  corral_source_split_3822:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p20, $i52);
    goto corral_source_split_3823;

  corral_source_split_3823:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    return;

  $bb11:
    assume $i44 == 1;
    goto corral_source_split_3812;

  corral_source_split_3812:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_3781;

  corral_source_split_3781:
    assume {:verifier.code 0} true;
    $p21, $p22 := $p11, $p7;
    goto $bb4;

  $bb4:
    call $i23, $i24, $p25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p21, $p22, $p35, $i36, $i37, $i38, $p39, $p40, $p33, $p34, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19 := periodic_unlink_loop_$bb4($p2, $p3, $p14, $p15, $i23, $i24, $p25, $p26, $p27, $p28, $p29, $p30, $i31, $i32, $p21, $p22, $p35, $i36, $i37, $i38, $p39, $p40, $p33, $p34, cmdloc_dummy_var_17, cmdloc_dummy_var_18, cmdloc_dummy_var_19);
    goto $bb4_last;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p14);
    goto corral_source_split_3784;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    $i36 := $p2i.ref.i64($p35);
    goto corral_source_split_3785;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    $i37 := $p2i.ref.i64($p2);
    goto corral_source_split_3786;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i36, $i37);
    goto corral_source_split_3787;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    $p39, $p40 := $p22, $p21;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3805;

  corral_source_split_3805:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p39, $p40;
    goto $bb3;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_3803;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i23 := $load.i32($M.0, $p21);
    goto corral_source_split_3789;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i23, 6);
    goto corral_source_split_3790;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} $p25 := periodic_next_shadow($p22, $i24);
    goto corral_source_split_3791;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p3);
    goto corral_source_split_3792;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_3793;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p3);
    goto corral_source_split_3794;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p25);
    goto corral_source_split_3795;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_17 := $M.0;
    cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 767} cmdloc_dummy_var_19 := $memcpy.i8(cmdloc_dummy_var_17, cmdloc_dummy_var_18, $p28, $p29, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_19;
    goto corral_source_split_3796;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p15);
    goto corral_source_split_3797;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_3798;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    $i32 := $ne.i64($i31, 0);
    goto corral_source_split_3799;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    $p33, $p34 := $p25, $p27;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3801;

  corral_source_split_3801:
    assume {:verifier.code 0} true;
    $p19, $p20 := $p33, $p34;
    goto $bb3;

  $bb6:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $p21, $p22 := $p27, $p25;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;
}



const __le32_to_cpup: ref;

axiom __le32_to_cpup == $sub.ref(0, 294693);

procedure __le32_to_cpup($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __le32_to_cpup($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3825;

  corral_source_split_3825:
    assume {:verifier.code 0} true;
    $i1 := $load.i32($M.0, $p0);
    goto corral_source_split_3826;

  corral_source_split_3826:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const disable_periodic: ref;

axiom disable_periodic == $sub.ref(0, 295725);

procedure disable_periodic($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.47, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.58, $M.59, assertsPassed;



implementation disable_periodic($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3828;

  corral_source_split_3828:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_3829;

  corral_source_split_3829:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_3830;

  corral_source_split_3830:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_3831;

  corral_source_split_3831:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_3832;

  corral_source_split_3832:
    assume {:verifier.code 0} true;
    call {:si_unique_call 770} $i5 := handshake($p0, $p4, 16384, 16384, 1125);
    goto SeqInstr_304, SeqInstr_305;

  SeqInstr_305:
    assume assertsPassed;
    goto SeqInstr_306;

  SeqInstr_306:
    call {:si_unique_call 771} {:cexpr "status"} boogie_si_record_i32($i5);
    goto corral_source_split_3833;

  corral_source_split_3833:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_3834;

  corral_source_split_3834:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_3845;

  corral_source_split_3845:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_3846;

  corral_source_split_3846:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_3847;

  corral_source_split_3847:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_3848;

  corral_source_split_3848:
    assume {:verifier.code 0} true;
    call {:si_unique_call 775} $i15 := readl($p14);
    goto SeqInstr_307, SeqInstr_308;

  SeqInstr_308:
    assume assertsPassed;
    goto SeqInstr_309;

  SeqInstr_309:
    call {:si_unique_call 776} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_3849;

  corral_source_split_3849:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, $sub.i32(0, 17));
    call {:si_unique_call 777} {:cexpr "cmd"} boogie_si_record_i32($i16);
    goto corral_source_split_3850;

  corral_source_split_3850:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_3851;

  corral_source_split_3851:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_3852;

  corral_source_split_3852:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_3853;

  corral_source_split_3853:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_3854;

  corral_source_split_3854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 778} writel($i16, $p20);
    goto corral_source_split_3855;

  corral_source_split_3855:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(432, 1));
    goto corral_source_split_3856;

  corral_source_split_3856:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p21, $sub.i32(0, 1));
    goto corral_source_split_3857;

  corral_source_split_3857:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_3843;

  corral_source_split_3843:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_307:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_3836;

  corral_source_split_3836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 772} $p7 := oxu_to_hcd($p0);
    goto corral_source_split_3837;

  corral_source_split_3837:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_3838;

  corral_source_split_3838:
    assume {:verifier.code 0} true;
    $M.47 := $store.i32($M.47, $p8, 0);
    goto corral_source_split_3839;

  corral_source_split_3839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 773} $p9 := oxu_to_hcd($p0);
    goto corral_source_split_3840;

  corral_source_split_3840:
    assume {:verifier.code 0} true;
    call {:si_unique_call 774} usb_hc_died($p9);
    goto corral_source_split_3841;

  corral_source_split_3841:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb3;

  SeqInstr_304:
    assume !assertsPassed;
    return;
}



const usb_hc_died: ref;

axiom usb_hc_died == $sub.ref(0, 296757);

procedure usb_hc_died($p0: ref);
  free requires assertsPassed;



implementation usb_hc_died($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3859;

  corral_source_split_3859:
    assume {:verifier.code 0} true;
    return;
}



const periodic_next_shadow: ref;

axiom periodic_next_shadow == $sub.ref(0, 297789);

procedure periodic_next_shadow($p0: ref, $i1: i32) returns ($r: ref);
  free requires assertsPassed;



implementation periodic_next_shadow($p0: ref, $i1: i32) returns ($r: ref)
{
  var $i2: i1;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    call {:si_unique_call 779} {:cexpr "periodic_next_shadow:arg:tag"} boogie_si_record_i32($i1);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i2 := $eq.i32($i1, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb2, $bb4;

  $bb4:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p0);
    goto corral_source_split_3861;

  corral_source_split_3861:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_3862;

  corral_source_split_3862:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_3863;

  corral_source_split_3863:
    assume {:verifier.code 0} true;
    $r := $p5;
    return;

  $bb2:
    assume {:verifier.code 0} true;
    assume $i2 == 1;
    goto $bb3;
}



const ehci_urb_done: ref;

axiom ehci_urb_done == $sub.ref(0, 298821);

procedure ehci_urb_done($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.48, $M.0, $M.22, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_urb_done($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $i28: i1;
  var $i29: i1;
  var $i30: i1;
  var $i31: i1;
  var $i32: i1;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $i36: i32;
  var $i37: i32;
  var $i38: i1;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $i43: i32;
  var $p44: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3865;

  corral_source_split_3865:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_3866;

  corral_source_split_3866:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_3867;

  corral_source_split_3867:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_3868;

  corral_source_split_3868:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_3869;

  corral_source_split_3869:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_3870;

  corral_source_split_3870:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_3871;

  corral_source_split_3871:
    assume {:verifier.code 0} true;
    call {:si_unique_call 780} $i8 := ldv__builtin_expect($i7, 1);
    call {:si_unique_call 781} {:cexpr "tmp___0"} boogie_si_record_i64($i8);
    goto corral_source_split_3872;

  corral_source_split_3872:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_3873;

  corral_source_split_3873:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_3894;

  corral_source_split_3894:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p24, $0.ref);
    goto corral_source_split_3895;

  corral_source_split_3895:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3896;

  corral_source_split_3896:
    assume {:verifier.code 0} true;
    $i26 := $load.i32($M.0, $p25);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := $slt.i32($i26, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i27 == 1);
    assume {:verifier.code 0} true;
    $i28 := $slt.i32($i26, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i29 := $eq.i32($i26, $sub.i32(0, 2));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_3910;

  corral_source_split_3910:
    assume {:verifier.code 0} true;
    call {:si_unique_call 784} spin_unlock($p40);
    goto corral_source_split_3911;

  corral_source_split_3911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 785} $p41 := oxu_to_hcd($p0);
    goto corral_source_split_3912;

  corral_source_split_3912:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3913;

  corral_source_split_3913:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_3914;

  corral_source_split_3914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 786} usb_hcd_giveback_urb($p41, $p1, $i43);
    goto corral_source_split_3915;

  corral_source_split_3915:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_3916;

  corral_source_split_3916:
    assume {:verifier.code 0} true;
    call {:si_unique_call 787} spin_lock($p44);
    goto corral_source_split_3917;

  corral_source_split_3917:
    assume {:verifier.code 0} true;
    return;

  $bb12:
    assume {:verifier.code 0} true;
    assume $i29 == 1;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb10:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i26, $sub.i32(0, 104));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume !($i30 == 1);
    goto $bb15;

  $bb16:
    assume $i30 == 1;
    goto corral_source_split_3898;

  corral_source_split_3898:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i27 == 1;
    assume {:verifier.code 0} true;
    $i31 := $slt.i32($i26, $sub.i32(0, 115));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    $i32 := $eq.i32($i26, $sub.i32(0, 115));
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb15;

  $bb20:
    assume $i32 == 1;
    goto corral_source_split_3900;

  corral_source_split_3900:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3901;

  corral_source_split_3901:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, 0);
    goto corral_source_split_3902;

  corral_source_split_3902:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb18:
    assume $i31 == 1;
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i26, $sub.i32(0, 121));
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb22, $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    assume !($i33 == 1);
    goto $bb15;

  $bb22:
    assume $i33 == 1;
    goto corral_source_split_3904;

  corral_source_split_3904:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_3905;

  corral_source_split_3905:
    assume {:verifier.code 0} true;
    $i36 := $load.i32($M.0, $p35);
    goto corral_source_split_3906;

  corral_source_split_3906:
    assume {:verifier.code 0} true;
    $i37 := $and.i32($i36, 1);
    goto corral_source_split_3907;

  corral_source_split_3907:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_3908;

  corral_source_split_3908:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb26:
    assume $i38 == 1;
    goto corral_source_split_3919;

  corral_source_split_3919:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3920;

  corral_source_split_3920:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, 0);
    goto corral_source_split_3921;

  corral_source_split_3921:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_3875;

  corral_source_split_3875:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_3876;

  corral_source_split_3876:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_3877;

  corral_source_split_3877:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_3878;

  corral_source_split_3878:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_3879;

  corral_source_split_3879:
    assume {:verifier.code 0} true;
    $i14 := $load.i32($M.0, $p13);
    goto corral_source_split_3880;

  corral_source_split_3880:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 255);
    goto corral_source_split_3881;

  corral_source_split_3881:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_3882;

  corral_source_split_3882:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    call {:si_unique_call 783} qh_put($p12);
    goto SeqInstr_310, SeqInstr_311;

  SeqInstr_311:
    assume assertsPassed;
    goto SeqInstr_312;

  SeqInstr_312:
    goto corral_source_split_3892;

  corral_source_split_3892:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_310:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i16 == 1;
    goto corral_source_split_3884;

  corral_source_split_3884:
    assume {:verifier.code 0} true;
    call {:si_unique_call 782} $p17 := oxu_to_hcd($p0);
    goto corral_source_split_3885;

  corral_source_split_3885:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(252, 1));
    goto corral_source_split_3886;

  corral_source_split_3886:
    assume {:verifier.code 0} true;
    $i20 := $load.i32($M.48, $p19);
    goto corral_source_split_3887;

  corral_source_split_3887:
    assume {:verifier.code 0} true;
    $i21 := $sub.i32($i20, 1);
    goto corral_source_split_3888;

  corral_source_split_3888:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($add.ref($p17, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(252, 1));
    goto corral_source_split_3889;

  corral_source_split_3889:
    assume {:verifier.code 0} true;
    $M.48 := $store.i32($M.48, $p23, $i21);
    goto corral_source_split_3890;

  corral_source_split_3890:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const oxu_murb_free: ref;

axiom oxu_murb_free == $sub.ref(0, 299853);

procedure oxu_murb_free($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.22, $M.0;



implementation oxu_murb_free($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i64;
  var $p12: ref;
  var $p13: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_3923;

  corral_source_split_3923:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_3924;

  corral_source_split_3924:
    assume {:verifier.code 0} true;
    call {:si_unique_call 788} spin_lock($p2);
    goto corral_source_split_3925;

  corral_source_split_3925:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_3926;

  corral_source_split_3926:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(752, 1));
    goto corral_source_split_3927;

  corral_source_split_3927:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_3928;

  corral_source_split_3928:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_3929;

  corral_source_split_3929:
    assume {:verifier.code 0} true;
    $i7 := $sub.i64($i3, $i6);
    goto corral_source_split_3930;

  corral_source_split_3930:
    assume {:verifier.code 0} true;
    $i8 := $sdiv.i64($i7, 208);
    goto corral_source_split_3931;

  corral_source_split_3931:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    call {:si_unique_call 789} {:cexpr "index"} boogie_si_record_i32($i9);
    goto corral_source_split_3932;

  corral_source_split_3932:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_3933;

  corral_source_split_3933:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref($i10, 1));
    goto corral_source_split_3934;

  corral_source_split_3934:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p12, 0);
    goto corral_source_split_3935;

  corral_source_split_3935:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_3936;

  corral_source_split_3936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 790} spin_unlock($p13);
    goto corral_source_split_3937;

  corral_source_split_3937:
    assume {:verifier.code 0} true;
    return;
}



const qtd_copy_status: ref;

axiom qtd_copy_status == $sub.ref(0, 300885);

procedure qtd_copy_status($p0: ref, $p1: ref, $i2: i64, $i3: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation qtd_copy_status($p0: ref, $p1: ref, $i2: i64, $i3: i32)
{
  var $p4: ref;
  var $i5: i32;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $p19: ref;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $i23: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i29: i1;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i30: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i1;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i50: i32;
  var $i51: i1;
  var $i52: i32;
  var $p53: ref;
  var $i54: i32;
  var $i55: i1;
  var $i56: i32;
  var $i57: i32;
  var $i58: i1;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $i66: i24;
  var $i67: i24;
  var $i68: i24;
  var $p69: ref;
  var $p70: ref;
  var $i71: i8;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i1;
  var $p76: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $i89: i32;
  var $i90: i32;
  var $i91: i1;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i32;
  var $i96: i1;
  var $p97: ref;
  var $p98: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 791} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 792} {:cexpr "qtd_copy_status:arg:length"} boogie_si_record_i64($i2);
    call {:si_unique_call 793} {:cexpr "qtd_copy_status:arg:token"} boogie_si_record_i32($i3);
    goto corral_source_split_3939;

  corral_source_split_3939:
    assume {:verifier.code 0} true;
    $i5 := $lshr.i32($i3, 8);
    goto corral_source_split_3940;

  corral_source_split_3940:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 3);
    goto corral_source_split_3941;

  corral_source_split_3941:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 2);
    goto corral_source_split_3942;

  corral_source_split_3942:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    goto corral_source_split_3943;

  corral_source_split_3943:
    assume {:verifier.code 0} true;
    $i9 := $sext.i32.i64($i8);
    goto corral_source_split_3944;

  corral_source_split_3944:
    assume {:verifier.code 0} true;
    call {:si_unique_call 794} $i10 := ldv__builtin_expect($i9, 1);
    call {:si_unique_call 795} {:cexpr "tmp"} boogie_si_record_i64($i10);
    goto corral_source_split_3945;

  corral_source_split_3945:
    assume {:verifier.code 0} true;
    $i11 := $ne.i64($i10, 0);
    goto corral_source_split_3946;

  corral_source_split_3946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3959;

  corral_source_split_3959:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_3960;

  corral_source_split_3960:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, $sub.i32(0, 115));
    goto corral_source_split_3961;

  corral_source_split_3961:
    assume {:verifier.code 0} true;
    $i23 := $zext.i1.i32($i22);
    goto corral_source_split_3962;

  corral_source_split_3962:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i23);
    goto corral_source_split_3963;

  corral_source_split_3963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 796} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 797} {:cexpr "tmp___0"} boogie_si_record_i64($i25);
    goto corral_source_split_3964;

  corral_source_split_3964:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_3965;

  corral_source_split_3965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i3, 16);
    goto corral_source_split_3969;

  corral_source_split_3969:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 32767);
    goto corral_source_split_3970;

  corral_source_split_3970:
    assume {:verifier.code 0} true;
    $i29 := $ne.i32($i28, 0);
    goto corral_source_split_3971;

  corral_source_split_3971:
    assume {:verifier.code 0} true;
    $i30 := 0;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i29 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_3977;

  corral_source_split_3977:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i30);
    goto corral_source_split_3978;

  corral_source_split_3978:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_3979;

  corral_source_split_3979:
    assume {:verifier.code 0} true;
    call {:si_unique_call 798} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 799} {:cexpr "tmp___1"} boogie_si_record_i64($i36);
    goto corral_source_split_3980;

  corral_source_split_3980:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_3981;

  corral_source_split_3981:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i39 := $and.i32($i3, 64);
    goto corral_source_split_3987;

  corral_source_split_3987:
    assume {:verifier.code 0} true;
    $i40 := $ne.i32($i39, 0);
    goto corral_source_split_3988;

  corral_source_split_3988:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb14:
    assume $i40 == 1;
    goto corral_source_split_3990;

  corral_source_split_3990:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i3, 16);
    goto corral_source_split_3991;

  corral_source_split_3991:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_3992;

  corral_source_split_3992:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i42 == 1);
    goto corral_source_split_3998;

  corral_source_split_3998:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i3, 4);
    goto corral_source_split_3999;

  corral_source_split_3999:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_4000;

  corral_source_split_4000:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i45 == 1);
    goto corral_source_split_4006;

  corral_source_split_4006:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i3, 32);
    goto corral_source_split_4007;

  corral_source_split_4007:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_4008;

  corral_source_split_4008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i48 == 1);
    goto corral_source_split_4018;

  corral_source_split_4018:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i3, 8);
    goto corral_source_split_4019;

  corral_source_split_4019:
    assume {:verifier.code 0} true;
    $i55 := $ne.i32($i54, 0);
    goto corral_source_split_4020;

  corral_source_split_4020:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i55 == 1);
    goto corral_source_split_4027;

  corral_source_split_4027:
    assume {:verifier.code 0} true;
    $i94 := $lshr.i32($i3, 10);
    goto corral_source_split_4028;

  corral_source_split_4028:
    assume {:verifier.code 0} true;
    $i95 := $and.i32($i94, 3);
    goto corral_source_split_4029;

  corral_source_split_4029:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i95, 0);
    goto corral_source_split_4030;

  corral_source_split_4030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i96 == 1);
    goto corral_source_split_4085;

  corral_source_split_4085:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4086;

  corral_source_split_4086:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p98, $sub.i32(0, 71));
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb34:
    assume $i96 == 1;
    goto corral_source_split_4081;

  corral_source_split_4081:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4082;

  corral_source_split_4082:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p97, $sub.i32(0, 32));
    goto corral_source_split_4083;

  corral_source_split_4083:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb25:
    assume $i55 == 1;
    goto corral_source_split_4022;

  corral_source_split_4022:
    assume {:verifier.code 0} true;
    $i56 := $lshr.i32($i3, 10);
    goto corral_source_split_4023;

  corral_source_split_4023:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i56, 3);
    goto corral_source_split_4024;

  corral_source_split_4024:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_4025;

  corral_source_split_4025:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i58 == 1);
    goto corral_source_split_4036;

  corral_source_split_4036:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4037;

  corral_source_split_4037:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p60, .str.2);
    goto corral_source_split_4038;

  corral_source_split_4038:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4039;

  corral_source_split_4039:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p61, .str.5);
    goto corral_source_split_4040;

  corral_source_split_4040:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4041;

  corral_source_split_4041:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p62, .str);
    goto corral_source_split_4042;

  corral_source_split_4042:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4043;

  corral_source_split_4043:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p63, .str.6);
    goto corral_source_split_4044;

  corral_source_split_4044:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4045;

  corral_source_split_4045:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4046;

  corral_source_split_4046:
    assume {:verifier.code 0} true;
    $i66 := $load.i24($M.6, $p65);
    goto corral_source_split_4047;

  corral_source_split_4047:
    assume {:verifier.code 0} true;
    $i67 := $and.i24($i66, $sub.i24(0, 262144));
    goto corral_source_split_4048;

  corral_source_split_4048:
    assume {:verifier.code 0} true;
    $i68 := $or.i24($i67, 907);
    goto corral_source_split_4049;

  corral_source_split_4049:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p65, $i68);
    goto corral_source_split_4050;

  corral_source_split_4050:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4051;

  corral_source_split_4051:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p69, 0);
    goto corral_source_split_4052;

  corral_source_split_4052:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4053;

  corral_source_split_4053:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.7, $p70);
    goto corral_source_split_4054;

  corral_source_split_4054:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i64($i71);
    goto corral_source_split_4055;

  corral_source_split_4055:
    assume {:verifier.code 0} true;
    $i73 := $and.i64($i72, 1);
    goto corral_source_split_4056;

  corral_source_split_4056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 800} $i74 := ldv__builtin_expect($i73, 0);
    call {:si_unique_call 801} {:cexpr "tmp___3"} boogie_si_record_i64($i74);
    goto corral_source_split_4057;

  corral_source_split_4057:
    assume {:verifier.code 0} true;
    $i75 := $ne.i64($i74, 0);
    goto corral_source_split_4058;

  corral_source_split_4058:
    assume {:verifier.code 0} true;
    assume {:branchcond $i75} true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i75 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4079;

  corral_source_split_4079:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p93, $sub.i32(0, 71));
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb30:
    assume $i75 == 1;
    goto corral_source_split_4060;

  corral_source_split_4060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 802} $p76 := oxu_to_hcd($p0);
    goto corral_source_split_4061;

  corral_source_split_4061:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($add.ref($p76, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4062;

  corral_source_split_4062:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_4063;

  corral_source_split_4063:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_4064;

  corral_source_split_4064:
    assume {:verifier.code 0} true;
    $p81 := $load.ref($M.0, $p80);
    goto corral_source_split_4065;

  corral_source_split_4065:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p81, $mul.ref(0, 2040)), $mul.ref(4, 1));
    goto corral_source_split_4066;

  corral_source_split_4066:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p82);
    goto corral_source_split_4067;

  corral_source_split_4067:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_4068;

  corral_source_split_4068:
    assume {:verifier.code 0} true;
    $i85 := $load.i32($M.0, $p84);
    goto corral_source_split_4069;

  corral_source_split_4069:
    assume {:verifier.code 0} true;
    $i86 := $lshr.i32($i85, 15);
    goto corral_source_split_4070;

  corral_source_split_4070:
    assume {:verifier.code 0} true;
    $i87 := $and.i32($i86, 15);
    goto corral_source_split_4071;

  corral_source_split_4071:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_4072;

  corral_source_split_4072:
    assume {:verifier.code 0} true;
    $i89 := $load.i32($M.0, $p88);
    goto corral_source_split_4073;

  corral_source_split_4073:
    assume {:verifier.code 0} true;
    $i90 := $and.i32($i89, 128);
    goto corral_source_split_4074;

  corral_source_split_4074:
    assume {:verifier.code 0} true;
    $i91 := $ne.i32($i90, 0);
    goto corral_source_split_4075;

  corral_source_split_4075:
    assume {:verifier.code 0} true;
    $p92 := (if $i91 == 1 then .str.7 else .str.8);
    goto corral_source_split_4076;

  corral_source_split_4076:
    assume {:verifier.code 0} true;
    call {:si_unique_call 803} __dynamic_dev_dbg.ref.ref.ref.ref.i32.ref($p4, $p79, .str.6, $p83, $i87, $p92);
    goto corral_source_split_4077;

  corral_source_split_4077:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_4032;

  corral_source_split_4032:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4033;

  corral_source_split_4033:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p59, $sub.i32(0, 32));
    goto corral_source_split_4034;

  corral_source_split_4034:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb22:
    assume $i48 == 1;
    goto corral_source_split_4010;

  corral_source_split_4010:
    assume {:verifier.code 0} true;
    $i49 := $lshr.i32($i3, 8);
    goto corral_source_split_4011;

  corral_source_split_4011:
    assume {:verifier.code 0} true;
    $i50 := $and.i32($i49, 3);
    goto corral_source_split_4012;

  corral_source_split_4012:
    assume {:verifier.code 0} true;
    $i51 := $eq.i32($i50, 1);
    goto corral_source_split_4013;

  corral_source_split_4013:
    assume {:verifier.code 0} true;
    $i52 := (if $i51 == 1 then $sub.i32(0, 63) else $sub.i32(0, 70));
    goto corral_source_split_4014;

  corral_source_split_4014:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4015;

  corral_source_split_4015:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p53, $i52);
    goto corral_source_split_4016;

  corral_source_split_4016:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb19:
    assume $i45 == 1;
    goto corral_source_split_4002;

  corral_source_split_4002:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_4003;

  corral_source_split_4003:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $sub.i32(0, 71));
    goto corral_source_split_4004;

  corral_source_split_4004:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb16:
    assume $i42 == 1;
    goto corral_source_split_3994;

  corral_source_split_3994:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3995;

  corral_source_split_3995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $sub.i32(0, 75));
    goto corral_source_split_3996;

  corral_source_split_3996:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb11:
    assume $i37 == 1;
    goto corral_source_split_3983;

  corral_source_split_3983:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3984;

  corral_source_split_3984:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p38, $sub.i32(0, 121));
    goto corral_source_split_3985;

  corral_source_split_3985:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i29 == 1;
    goto corral_source_split_3973;

  corral_source_split_3973:
    assume {:verifier.code 0} true;
    $i31 := $lshr.i32($i3, 8);
    goto corral_source_split_3974;

  corral_source_split_3974:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i31, 3);
    goto corral_source_split_3975;

  corral_source_split_3975:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 1);
    assume {:verifier.code 0} true;
    $i30 := $i33;
    goto $bb10;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_3967;

  corral_source_split_3967:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_3948;

  corral_source_split_3948:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3949;

  corral_source_split_3949:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p12);
    goto corral_source_split_3950;

  corral_source_split_3950:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i64.i32($i2);
    goto corral_source_split_3951;

  corral_source_split_3951:
    assume {:verifier.code 0} true;
    $i15 := $lshr.i32($i3, 16);
    goto corral_source_split_3952;

  corral_source_split_3952:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i15, 32767);
    goto corral_source_split_3953;

  corral_source_split_3953:
    assume {:verifier.code 0} true;
    $i17 := $sub.i32($i14, $i16);
    goto corral_source_split_3954;

  corral_source_split_3954:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i13, $i17);
    goto corral_source_split_3955;

  corral_source_split_3955:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(140, 1));
    goto corral_source_split_3956;

  corral_source_split_3956:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, $i18);
    goto corral_source_split_3957;

  corral_source_split_3957:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const list_del: ref;

axiom list_del == $sub.ref(0, 301917);

procedure list_del($p0: ref);
  free requires assertsPassed;



implementation list_del($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4088;

  corral_source_split_4088:
    assume {:verifier.code 0} true;
    return;
}



const qh_refresh: ref;

axiom qh_refresh == $sub.ref(0, 302949);

procedure qh_refresh($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation qh_refresh($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i1;
  var $p5: ref;
  var $p6: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $p7: ref;
  var $i20: i64;
  var $i21: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4090;

  corral_source_split_4090:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_4091;

  corral_source_split_4091:
    assume {:verifier.code 0} true;
    call {:si_unique_call 804} $i3 := list_empty($p2);
    call {:si_unique_call 805} {:cexpr "tmp"} boogie_si_record_i32($i3);
    goto corral_source_split_4092;

  corral_source_split_4092:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_4093;

  corral_source_split_4093:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    goto corral_source_split_4099;

  corral_source_split_4099:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(88, 1)), $mul.ref(0, 1));
    goto corral_source_split_4100;

  corral_source_split_4100:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_4101;

  corral_source_split_4101:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4102;

  corral_source_split_4102:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p11, $mul.ref($sub.ref(0, 64), 136));
    goto corral_source_split_4103;

  corral_source_split_4103:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p11, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(56, 1));
    goto corral_source_split_4104;

  corral_source_split_4104:
    assume {:verifier.code 0} true;
    $i14 := $load.i64($M.0, $p13);
    goto corral_source_split_4105;

  corral_source_split_4105:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i64.i32($i14);
    goto corral_source_split_4106;

  corral_source_split_4106:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(12, 1));
    goto corral_source_split_4107;

  corral_source_split_4107:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4108;

  corral_source_split_4108:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i15, $i17);
    goto corral_source_split_4109;

  corral_source_split_4109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    $p19 := $p12;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $p7 := $p19;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4111;

  corral_source_split_4111:
    assume {:verifier.code 0} true;
    $i20 := $p2i.ref.i64($p7);
    goto corral_source_split_4112;

  corral_source_split_4112:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_4113;

  corral_source_split_4113:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_4117;

  corral_source_split_4117:
    assume {:verifier.code 0} true;
    call {:si_unique_call 806} qh_update($p0, $p1, $p7);
    goto corral_source_split_4118;

  corral_source_split_4118:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb4:
    assume $i18 == 1;
    goto corral_source_split_4115;

  corral_source_split_4115:
    assume {:verifier.code 0} true;
    $p19 := $0.ref;
    goto $bb6;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_4095;

  corral_source_split_4095:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_4096;

  corral_source_split_4096:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_4097;

  corral_source_split_4097:
    assume {:verifier.code 0} true;
    $p7 := $p6;
    goto $bb3;
}



const qh_schedule: ref;

axiom qh_schedule == $sub.ref(0, 303981);

procedure qh_schedule($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.50, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.57, $CurrAddr, $M.58, $M.59, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.46, $M.47, assertsPassed;



implementation qh_schedule($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i16;
  var $i7: i32;
  var $p8: ref;
  var $i9: i16;
  var $i10: i32;
  var $i11: i1;
  var $p12: ref;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i16;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i32;
  var $i31: i1;
  var $i32: i32;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $i37: i1;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i32;
  var $i52: i32;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i53: i1;
  var $i55: i16;
  var $p56: ref;
  var $p57: ref;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i32;
  var $p63: ref;
  var $i64: i16;
  var $i65: i32;
  var $i66: i1;
  var $i67: i32;
  var $i68: i32;
  var $i69: i32;
  var $p70: ref;
  var $p71: ref;
  var $i72: i32;
  var $i73: i32;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i24;
  var $i83: i24;
  var $i84: i24;
  var $p85: ref;
  var $p86: ref;
  var $i87: i8;
  var $i88: i64;
  var $i89: i64;
  var $i90: i64;
  var $i91: i1;
  var $p92: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i32;
  var $i54: i32;
  var $i97: i32;
  var $i98: i1;
  var $i99: i32;
  var $i100: i1;
  var $i101: i32;
  var $i102: i1;
  var $i103: i32;
  var $i104: i1;
  var $i105: i32;
  var $i106: i1;
  var $i107: i32;
  var $i108: i1;
  var $i36: i32;
  var $i109: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 807} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 808} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_4120;

  corral_source_split_4120:
    assume {:verifier.code 0} true;
    call {:si_unique_call 809} qh_refresh($p0, $p1);
    goto corral_source_split_4121;

  corral_source_split_4121:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4122;

  corral_source_split_4122:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 1);
    goto corral_source_split_4123;

  corral_source_split_4123:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_4124;

  corral_source_split_4124:
    assume {:verifier.code 0} true;
    $i6 := $load.i16($M.0, $p5);
    goto corral_source_split_4125;

  corral_source_split_4125:
    assume {:verifier.code 0} true;
    $i7 := $zext.i16.i32($i6);
    call {:si_unique_call 810} {:cexpr "frame"} boogie_si_record_i32($i7);
    goto corral_source_split_4126;

  corral_source_split_4126:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4127;

  corral_source_split_4127:
    assume {:verifier.code 0} true;
    $i9 := $load.i16($M.0, $p8);
    goto corral_source_split_4128;

  corral_source_split_4128:
    assume {:verifier.code 0} true;
    $i10 := $zext.i16.i32($i9);
    goto corral_source_split_4129;

  corral_source_split_4129:
    assume {:verifier.code 0} true;
    $i11 := $ugt.i32($i10, $i7);
    goto corral_source_split_4130;

  corral_source_split_4130:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i11 == 1);
    goto corral_source_split_4140;

  corral_source_split_4140:
    assume {:verifier.code 0} true;
    $M.50 := $store.i32($M.50, $p2, 0);
    assume {:verifier.code 0} true;
    $i18, $i19 := $sub.i32(0, 28), 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4142;

  corral_source_split_4142:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i18, 0);
    goto corral_source_split_4143;

  corral_source_split_4143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i20 == 1);
    goto corral_source_split_4151;

  corral_source_split_4151:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4152;

  corral_source_split_4152:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p76, .str.2);
    goto corral_source_split_4153;

  corral_source_split_4153:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4154;

  corral_source_split_4154:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p77, .str.11);
    goto corral_source_split_4155;

  corral_source_split_4155:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4156;

  corral_source_split_4156:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p78, .str);
    goto corral_source_split_4157;

  corral_source_split_4157:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4158;

  corral_source_split_4158:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p79, .str.12);
    goto corral_source_split_4159;

  corral_source_split_4159:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4160;

  corral_source_split_4160:
    assume {:verifier.code 0} true;
    $p81 := $bitcast.ref.ref($p80);
    goto corral_source_split_4161;

  corral_source_split_4161:
    assume {:verifier.code 0} true;
    $i82 := $load.i24($M.6, $p81);
    goto corral_source_split_4162;

  corral_source_split_4162:
    assume {:verifier.code 0} true;
    $i83 := $and.i24($i82, $sub.i24(0, 262144));
    goto corral_source_split_4163;

  corral_source_split_4163:
    assume {:verifier.code 0} true;
    $i84 := $or.i24($i83, 2185);
    goto corral_source_split_4164;

  corral_source_split_4164:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p81, $i84);
    goto corral_source_split_4165;

  corral_source_split_4165:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4166;

  corral_source_split_4166:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p85, 0);
    goto corral_source_split_4167;

  corral_source_split_4167:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4168;

  corral_source_split_4168:
    assume {:verifier.code 0} true;
    $i87 := $load.i8($M.7, $p86);
    goto corral_source_split_4169;

  corral_source_split_4169:
    assume {:verifier.code 0} true;
    $i88 := $zext.i8.i64($i87);
    goto corral_source_split_4170;

  corral_source_split_4170:
    assume {:verifier.code 0} true;
    $i89 := $and.i64($i88, 1);
    goto corral_source_split_4171;

  corral_source_split_4171:
    assume {:verifier.code 0} true;
    call {:si_unique_call 818} $i90 := ldv__builtin_expect($i89, 0);
    call {:si_unique_call 819} {:cexpr "tmp___3"} boogie_si_record_i64($i90);
    goto corral_source_split_4172;

  corral_source_split_4172:
    assume {:verifier.code 0} true;
    $i91 := $ne.i64($i90, 0);
    goto corral_source_split_4173;

  corral_source_split_4173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i91} true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i91 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    call {:si_unique_call 827} $i96 := qh_link_periodic($p0, $p1);
    goto SeqInstr_313, SeqInstr_314;

  SeqInstr_314:
    assume assertsPassed;
    goto SeqInstr_315;

  SeqInstr_315:
    call {:si_unique_call 828} {:cexpr "status"} boogie_si_record_i32($i96);
    goto corral_source_split_4242;

  corral_source_split_4242:
    assume {:verifier.code 0} true;
    $i54 := $i96;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto corral_source_split_4209;

  corral_source_split_4209:
    assume {:verifier.code 0} true;
    $r := $i54;
    return;

  SeqInstr_313:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i91 == 1;
    goto corral_source_split_4244;

  corral_source_split_4244:
    assume {:verifier.code 0} true;
    call {:si_unique_call 829} $p92 := oxu_to_hcd($p0);
    goto corral_source_split_4245;

  corral_source_split_4245:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($add.ref($p92, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4246;

  corral_source_split_4246:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.51, $p94);
    goto corral_source_split_4247;

  corral_source_split_4247:
    assume {:verifier.code 0} true;
    call {:si_unique_call 830} __dynamic_dev_dbg.ref.ref.ref.ref($p3, $p95, .str.12, $p1);
    goto corral_source_split_4248;

  corral_source_split_4248:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb4:
    assume $i20 == 1;
    goto corral_source_split_4145;

  corral_source_split_4145:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4146;

  corral_source_split_4146:
    assume {:verifier.code 0} true;
    $i22 := $load.i16($M.0, $p21);
    goto corral_source_split_4147;

  corral_source_split_4147:
    assume {:verifier.code 0} true;
    $i23 := $zext.i16.i32($i22);
    goto corral_source_split_4148;

  corral_source_split_4148:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_4149;

  corral_source_split_4149:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i24 == 1);
    goto corral_source_split_4181;

  corral_source_split_4181:
    assume {:verifier.code 0} true;
    call {:si_unique_call 821} $i52 := check_intr_schedule($p0, 0, 0, $p1, $p2);
    call {:si_unique_call 822} {:cexpr "status"} boogie_si_record_i32($i52);
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := $i52, $i19, 0;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4204;

  corral_source_split_4204:
    assume {:verifier.code 0} true;
    $i53 := $ne.i32($i49, 0);
    goto corral_source_split_4205;

  corral_source_split_4205:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $i55 := $trunc.i32.i16($i51);
    goto corral_source_split_4211;

  corral_source_split_4211:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_4212;

  corral_source_split_4212:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p56, $i55);
    goto corral_source_split_4213;

  corral_source_split_4213:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4214;

  corral_source_split_4214:
    assume {:verifier.code 0} true;
    $i58 := $load.i32($M.0, $p57);
    goto corral_source_split_4215;

  corral_source_split_4215:
    assume {:verifier.code 0} true;
    $i59 := $and.i32($i58, $sub.i32(0, 65536));
    goto corral_source_split_4216;

  corral_source_split_4216:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4217;

  corral_source_split_4217:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_4218;

  corral_source_split_4218:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4219;

  corral_source_split_4219:
    assume {:verifier.code 0} true;
    $i62 := $load.i32($M.0, $p61);
    goto corral_source_split_4220;

  corral_source_split_4220:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4221;

  corral_source_split_4221:
    assume {:verifier.code 0} true;
    $i64 := $load.i16($M.0, $p63);
    goto corral_source_split_4222;

  corral_source_split_4222:
    assume {:verifier.code 0} true;
    $i65 := $zext.i16.i32($i64);
    goto corral_source_split_4223;

  corral_source_split_4223:
    assume {:verifier.code 0} true;
    $i66 := $ne.i32($i65, 0);
    goto corral_source_split_4224;

  corral_source_split_4224:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i66 == 1);
    goto corral_source_split_4229;

  corral_source_split_4229:
    assume {:verifier.code 0} true;
    $i68 := 255;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_4231;

  corral_source_split_4231:
    assume {:verifier.code 0} true;
    $i69 := $or.i32($i62, $i68);
    goto corral_source_split_4232;

  corral_source_split_4232:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4233;

  corral_source_split_4233:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p70, $i69);
    goto corral_source_split_4234;

  corral_source_split_4234:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4235;

  corral_source_split_4235:
    assume {:verifier.code 0} true;
    $i72 := $load.i32($M.0, $p71);
    goto corral_source_split_4236;

  corral_source_split_4236:
    assume {:verifier.code 0} true;
    $i73 := $load.i32($M.50, $p2);
    goto corral_source_split_4237;

  corral_source_split_4237:
    assume {:verifier.code 0} true;
    $i74 := $or.i32($i72, $i73);
    goto corral_source_split_4238;

  corral_source_split_4238:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4239;

  corral_source_split_4239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_4240;

  corral_source_split_4240:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb29:
    assume $i66 == 1;
    goto corral_source_split_4226;

  corral_source_split_4226:
    assume {:verifier.code 0} true;
    $i67 := $shl.i32(1, $i50);
    goto corral_source_split_4227;

  corral_source_split_4227:
    assume {:verifier.code 0} true;
    $i68 := $i67;
    goto $bb31;

  $bb25:
    assume $i53 == 1;
    goto corral_source_split_4207;

  corral_source_split_4207:
    assume {:verifier.code 0} true;
    $i54 := $i49;
    goto $bb27;

  $bb6:
    assume $i24 == 1;
    goto corral_source_split_4175;

  corral_source_split_4175:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4176;

  corral_source_split_4176:
    assume {:verifier.code 0} true;
    $i26 := $load.i16($M.0, $p25);
    goto corral_source_split_4177;

  corral_source_split_4177:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    goto corral_source_split_4178;

  corral_source_split_4178:
    assume {:verifier.code 0} true;
    $i28 := $add.i32($i27, $sub.i32(0, 1));
    call {:si_unique_call 820} {:cexpr "frame"} boogie_si_record_i32($i28);
    goto corral_source_split_4179;

  corral_source_split_4179:
    assume {:verifier.code 0} true;
    $i29 := $i28;
    goto $bb8;

  $bb8:
    call $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i41, $i42, $i43, $i44, $i45, $i38, $i39, $i40, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i36, $i109 := qh_schedule_loop_$bb8($p0, $p1, $p2, $i29, $i30, $i31, $i32, $i33, $i34, $i35, $i37, $i41, $i42, $i43, $i44, $i45, $i38, $i39, $i40, $i97, $i98, $i99, $i100, $i101, $i102, $i103, $i104, $i105, $i106, $i107, $i108, $i36, $i109);
    goto $bb8_last;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} $i30 := check_intr_schedule($p0, $i29, 0, $p1, $p2);
    call {:si_unique_call 824} {:cexpr "status"} boogie_si_record_i32($i30);
    goto corral_source_split_4185;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    $i31 := $eq.i32($i30, 0);
    goto corral_source_split_4186;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    $i32, $i33 := 0, $i30;
    assume true;
    goto $bb11, $bb13;

  $bb13:
    assume !($i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} $i97 := check_intr_schedule($p0, $i29, 1, $p1, $p2);
    goto corral_source_split_4193;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_4194;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    $i32, $i33 := 1, $i97;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} $i99 := check_intr_schedule($p0, $i29, 2, $p1, $p2);
    goto corral_source_split_4250;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    $i100 := $eq.i32($i99, 0);
    goto corral_source_split_4251;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    $i32, $i33 := 2, $i99;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} $i101 := check_intr_schedule($p0, $i29, 3, $p1, $p2);
    goto corral_source_split_4253;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    $i102 := $eq.i32($i101, 0);
    goto corral_source_split_4254;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    $i32, $i33 := 3, $i101;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} $i103 := check_intr_schedule($p0, $i29, 4, $p1, $p2);
    goto corral_source_split_4256;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 0);
    goto corral_source_split_4257;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    $i32, $i33 := 4, $i103;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} $i105 := check_intr_schedule($p0, $i29, 5, $p1, $p2);
    goto corral_source_split_4259;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    $i106 := $eq.i32($i105, 0);
    goto corral_source_split_4260;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    $i32, $i33 := 5, $i105;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} $i107 := check_intr_schedule($p0, $i29, 6, $p1, $p2);
    goto corral_source_split_4262;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_4263;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    $i32, $i33 := 6, $i107;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} $i36 := check_intr_schedule($p0, $i29, 7, $p1, $p2);
    goto corral_source_split_4265;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    $i109 := $eq.i32($i36, 0);
    goto corral_source_split_4266;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    $i32, $i33 := 7, $i36;
    assume true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    $i34, $i35 := 8, $i36;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4190;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i35, 0);
    goto corral_source_split_4191;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    $i38, $i39, $i40 := $i29, $i35, $i34;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48 := $i39, $i40, $i38;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4202;

  corral_source_split_4202:
    assume {:verifier.code 0} true;
    $i49, $i50, $i51 := $i46, $i47, $i48;
    goto $bb24;

  $bb18:
    assume $i37 == 1;
    goto corral_source_split_4196;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    $i41 := $sub.i32($i29, 1);
    call {:si_unique_call 826} {:cexpr "frame"} boogie_si_record_i32($i41);
    goto corral_source_split_4197;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i29, 0);
    goto corral_source_split_4198;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    $i43, $i44, $i45 := $i35, $i41, $i34;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4200;

  corral_source_split_4200:
    assume {:verifier.code 0} true;
    $i46, $i47, $i48 := $i43, $i45, $i44;
    goto $bb22;

  $bb20:
    assume $i42 == 1;
    assume {:verifier.code 0} true;
    $i29 := $i41;
    goto $bb20_dummy;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i109 == 1;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4188;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    $i34, $i35 := $i32, $i33;
    goto $bb14;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb12;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i106 == 1;
    goto $bb12;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i104 == 1;
    goto $bb12;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i102 == 1;
    goto $bb12;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i100 == 1;
    goto $bb12;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i31 == 1;
    goto $bb12;

  $bb1:
    assume $i11 == 1;
    goto corral_source_split_4132;

  corral_source_split_4132:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4133;

  corral_source_split_4133:
    assume {:verifier.code 0} true;
    call {:si_unique_call 811} $i13 := __le32_to_cpup($p12);
    call {:si_unique_call 812} {:cexpr "tmp"} boogie_si_record_i32($i13);
    goto corral_source_split_4134;

  corral_source_split_4134:
    assume {:verifier.code 0} true;
    $i14 := $and.i32($i13, 255);
    goto corral_source_split_4135;

  corral_source_split_4135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 813} $i15 := ffs($i14);
    call {:si_unique_call 814} {:cexpr "tmp___0"} boogie_si_record_i32($i15);
    goto corral_source_split_4136;

  corral_source_split_4136:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32($i15, 1);
    call {:si_unique_call 815} {:cexpr "uframe"} boogie_si_record_i32($i16);
    goto corral_source_split_4137;

  corral_source_split_4137:
    assume {:verifier.code 0} true;
    call {:si_unique_call 816} $i17 := check_intr_schedule($p0, $i7, $i16, $p1, $p2);
    call {:si_unique_call 817} {:cexpr "status"} boogie_si_record_i32($i17);
    goto corral_source_split_4138;

  corral_source_split_4138:
    assume {:verifier.code 0} true;
    $i18, $i19 := $i17, $i16;
    goto $bb3;

  $bb20_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;
}



const unlink_async: ref;

axiom unlink_async == $sub.ref(0, 305013);

procedure unlink_async($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.60, $M.48, $M.22, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.50, $M.46, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr, $M.47, $M.58, $M.59, $M.8, $M.39, assertsPassed;



implementation unlink_async($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i8;
  var $i4: i32;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i64;
  var $i28: i1;
  var $p22: ref;
  var $p29: ref;
  var $p21: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $i39: i64;
  var $i40: i1;
  var $p41: ref;
  var $i42: i8;
  var $i43: i32;
  var $i44: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4268;

  corral_source_split_4268:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_4269;

  corral_source_split_4269:
    assume {:verifier.code 0} true;
    $i3 := $load.i8($M.0, $p2);
    goto corral_source_split_4270;

  corral_source_split_4270:
    assume {:verifier.code 0} true;
    $i4 := $zext.i8.i32($i3);
    goto corral_source_split_4271;

  corral_source_split_4271:
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i4, 1);
    goto corral_source_split_4272;

  corral_source_split_4272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 838} $p32 := oxu_to_hcd($p0);
    goto corral_source_split_4315;

  corral_source_split_4315:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p32, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_4316;

  corral_source_split_4316:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.53, $p33);
    goto corral_source_split_4317;

  corral_source_split_4317:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 1);
    goto corral_source_split_4318;

  corral_source_split_4318:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 0);
    goto corral_source_split_4319;

  corral_source_split_4319:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i36 == 1);
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_4321;

  corral_source_split_4321:
    assume {:verifier.code 0} true;
    $i42 := $load.i8($M.0, $p41);
    goto corral_source_split_4322;

  corral_source_split_4322:
    assume {:verifier.code 0} true;
    $i43 := $zext.i8.i32($i42);
    goto corral_source_split_4323;

  corral_source_split_4323:
    assume {:verifier.code 0} true;
    $i44 := $eq.i32($i43, 1);
    goto corral_source_split_4324;

  corral_source_split_4324:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    return;

  $bb26:
    assume $i44 == 1;
    goto corral_source_split_4335;

  corral_source_split_4335:
    assume {:verifier.code 0} true;
    call {:si_unique_call 840} start_unlink_async($p0, $p1);
    goto SeqInstr_319, SeqInstr_320;

  SeqInstr_320:
    assume assertsPassed;
    goto SeqInstr_321;

  SeqInstr_321:
    goto corral_source_split_4336;

  corral_source_split_4336:
    assume {:verifier.code 0} true;
    goto $bb28;

  SeqInstr_319:
    assume !assertsPassed;
    return;

  $bb20:
    assume $i36 == 1;
    goto corral_source_split_4326;

  corral_source_split_4326:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_4327;

  corral_source_split_4327:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_4328;

  corral_source_split_4328:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p38);
    goto corral_source_split_4329;

  corral_source_split_4329:
    assume {:verifier.code 0} true;
    $i40 := $ne.i64($i39, 0);
    goto corral_source_split_4330;

  corral_source_split_4330:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb23, $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    assume !($i40 == 1);
    goto $bb22;

  $bb23:
    assume $i40 == 1;
    goto corral_source_split_4332;

  corral_source_split_4332:
    assume {:verifier.code 0} true;
    call {:si_unique_call 839} end_unlink_async($p0);
    goto SeqInstr_316, SeqInstr_317;

  SeqInstr_317:
    assume assertsPassed;
    goto SeqInstr_318;

  SeqInstr_318:
    goto corral_source_split_4333;

  corral_source_split_4333:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_316:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4274;

  corral_source_split_4274:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_4275;

  corral_source_split_4275:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_4276;

  corral_source_split_4276:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p7);
    goto corral_source_split_4277;

  corral_source_split_4277:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_4278;

  corral_source_split_4278:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4280;

  corral_source_split_4280:
    assume {:verifier.code 0} true;
    call {:si_unique_call 837} $p10 := oxu_to_hcd($p0);
    goto corral_source_split_4281;

  corral_source_split_4281:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_4282;

  corral_source_split_4282:
    assume {:verifier.code 0} true;
    $i12 := $load.i32($M.52, $p11);
    goto corral_source_split_4283;

  corral_source_split_4283:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 1);
    goto corral_source_split_4284;

  corral_source_split_4284:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i13, 0);
    goto corral_source_split_4285;

  corral_source_split_4285:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_4295;

  corral_source_split_4295:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb6:
    assume $i14 == 1;
    goto corral_source_split_4287;

  corral_source_split_4287:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_4288;

  corral_source_split_4288:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_4289;

  corral_source_split_4289:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p16, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4290;

  corral_source_split_4290:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4291;

  corral_source_split_4291:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4292;

  corral_source_split_4292:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4293;

  corral_source_split_4293:
    assume {:verifier.code 0} true;
    $p21 := $p16;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i20 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_4310;

  corral_source_split_4310:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p30, 4);
    goto corral_source_split_4311;

  corral_source_split_4311:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p21, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4312;

  corral_source_split_4312:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p1);
    goto corral_source_split_4313;

  corral_source_split_4313:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb8:
    assume $i20 == 1;
    goto corral_source_split_4297;

  corral_source_split_4297:
    assume {:verifier.code 0} true;
    $p22 := $p16;
    goto $bb11;

  $bb11:
    call $p23, $p24, $p25, $p26, $i27, $i28, $p22, $p29 := unlink_async_loop_$bb11($p23, $p24, $p25, $p26, $i27, $i28, $p22, $p29);
    goto $bb11_last;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4301;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4302;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4303;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4304;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    $i27 := $p2i.ref.i64($p26);
    goto corral_source_split_4305;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_4306;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    $p29 := $p24;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4308;

  corral_source_split_4308:
    assume {:verifier.code 0} true;
    $p21 := $p29;
    goto $bb10;

  $bb14:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    $p22 := $p24;
    goto $bb14_dummy;

  $bb14_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4299;
}



const start_unlink_async: ref;

axiom start_unlink_async == $sub.ref(0, 306045);

procedure start_unlink_async($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.60, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.48, $M.50, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr, $M.8, $M.39, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation start_unlink_async($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i1;
  var $p17: ref;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $p21: ref;
  var $i22: i8;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $i32: i64;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $p39: ref;
  var $i40: i32;
  var $i41: i1;
  var $p42: ref;
  var $p43: ref;
  var $i44: i64;
  var $i45: i1;
  var $i46: i32;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $i61: i1;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $i70: i64;
  var $i71: i1;
  var $p63: ref;
  var $p72: ref;
  var $p62: ref;
  var $p73: ref;
  var $i74: i32;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i32;
  var $i83: i1;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i1;
  var $p88: ref;
  var $i89: i8;
  var $i90: i8;
  var $i91: i32;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var cmdloc_dummy_var_23: [ref]i8;
  var cmdloc_dummy_var_24: [ref]i8;
  var cmdloc_dummy_var_25: [ref]i8;
  var vslice_dummy_var_93: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4338;

  corral_source_split_4338:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_4339;

  corral_source_split_4339:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_4340;

  corral_source_split_4340:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_4341;

  corral_source_split_4341:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_4342;

  corral_source_split_4342:
    assume {:verifier.code 0} true;
    call {:si_unique_call 841} $i6 := readl($p5);
    goto SeqInstr_322, SeqInstr_323;

  SeqInstr_323:
    assume assertsPassed;
    goto SeqInstr_324;

  SeqInstr_324:
    call {:si_unique_call 842} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_4343;

  corral_source_split_4343:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(304, 1)), $mul.ref(0, 1));
    goto corral_source_split_4344;

  corral_source_split_4344:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_4345;

  corral_source_split_4345:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p9, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_4346;

  corral_source_split_4346:
    assume {:verifier.code 0} true;
    call {:si_unique_call 843} $i11 := queued_spin_is_locked($p10);
    call {:si_unique_call 844} {:cexpr "tmp___0"} boogie_si_record_i32($i11);
    goto corral_source_split_4347;

  corral_source_split_4347:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_4348;

  corral_source_split_4348:
    assume {:verifier.code 0} true;
    $i13 := $zext.i1.i32($i12);
    goto corral_source_split_4349;

  corral_source_split_4349:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i13);
    goto corral_source_split_4350;

  corral_source_split_4350:
    assume {:verifier.code 0} true;
    call {:si_unique_call 845} $i15 := ldv__builtin_expect($i14, 0);
    call {:si_unique_call 846} {:cexpr "tmp___1"} boogie_si_record_i64($i15);
    goto corral_source_split_4351;

  corral_source_split_4351:
    assume {:verifier.code 0} true;
    $i16 := $ne.i64($i15, 0);
    goto corral_source_split_4352;

  corral_source_split_4352:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_4356;

  corral_source_split_4356:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4357;

  corral_source_split_4357:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_4358;

  corral_source_split_4358:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_4359;

  corral_source_split_4359:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb7;

  $bb7:
    assume !($i20 == 1);
    goto corral_source_split_4363;

  corral_source_split_4363:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_4364;

  corral_source_split_4364:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.0, $p21);
    goto corral_source_split_4365;

  corral_source_split_4365:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i32($i22);
    goto corral_source_split_4366;

  corral_source_split_4366:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 1);
    goto corral_source_split_4367;

  corral_source_split_4367:
    assume {:verifier.code 0} true;
    assume {:branchcond $i24} true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i24 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_4375;

  corral_source_split_4375:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4376;

  corral_source_split_4376:
    assume {:verifier.code 0} true;
    $i31 := $p2i.ref.i64($p30);
    goto corral_source_split_4377;

  corral_source_split_4377:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p1);
    goto corral_source_split_4378;

  corral_source_split_4378:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i31, $i32);
    goto corral_source_split_4379;

  corral_source_split_4379:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_4380;

  corral_source_split_4380:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_4381;

  corral_source_split_4381:
    assume {:verifier.code 0} true;
    call {:si_unique_call 849} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 850} {:cexpr "tmp___3"} boogie_si_record_i64($i36);
    goto corral_source_split_4382;

  corral_source_split_4382:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_4383;

  corral_source_split_4383:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_4406;

  corral_source_split_4406:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 2);
    goto corral_source_split_4407;

  corral_source_split_4407:
    assume {:verifier.code 0} true;
    call {:si_unique_call 855} $p52 := qh_get($p1);
    goto corral_source_split_4408;

  corral_source_split_4408:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_4409;

  corral_source_split_4409:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p53, $p52);
    goto corral_source_split_4410;

  corral_source_split_4410:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_4411;

  corral_source_split_4411:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4412;

  corral_source_split_4412:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4413;

  corral_source_split_4413:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4414;

  corral_source_split_4414:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4415;

  corral_source_split_4415:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_4416;

  corral_source_split_4416:
    assume {:verifier.code 0} true;
    $i60 := $p2i.ref.i64($p52);
    goto corral_source_split_4417;

  corral_source_split_4417:
    assume {:verifier.code 0} true;
    $i61 := $ne.i64($i59, $i60);
    goto corral_source_split_4418;

  corral_source_split_4418:
    assume {:verifier.code 0} true;
    $p62 := $p55;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p52, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4435;

  corral_source_split_4435:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_4436;

  corral_source_split_4436:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p62, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4437;

  corral_source_split_4437:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p75, $i74);
    goto corral_source_split_4438;

  corral_source_split_4438:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p62, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4439;

  corral_source_split_4439:
    assume {:verifier.code 0} true;
    $p77 := $add.ref($add.ref($p52, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4440;

  corral_source_split_4440:
    assume {:verifier.code 0} true;
    $p78 := $bitcast.ref.ref($p76);
    goto corral_source_split_4441;

  corral_source_split_4441:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p77);
    goto corral_source_split_4442;

  corral_source_split_4442:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_23 := $M.0;
    cmdloc_dummy_var_24 := $M.0;
    call {:si_unique_call 856} cmdloc_dummy_var_25 := $memcpy.i8(cmdloc_dummy_var_23, cmdloc_dummy_var_24, $p78, $p79, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_25;
    call {:si_unique_call 857} devirtbounce.6(0);
    goto corral_source_split_4443;

  corral_source_split_4443:
    assume {:verifier.code 0} true;
    call {:si_unique_call 858} $p80 := oxu_to_hcd($p0);
    goto corral_source_split_4444;

  corral_source_split_4444:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p80, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_4445;

  corral_source_split_4445:
    assume {:verifier.code 0} true;
    $i82 := $load.i32($M.55, $p81);
    goto corral_source_split_4446;

  corral_source_split_4446:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_4447;

  corral_source_split_4447:
    assume {:verifier.code 0} true;
    $i84 := $zext.i1.i32($i83);
    goto corral_source_split_4448;

  corral_source_split_4448:
    assume {:verifier.code 0} true;
    $i85 := $sext.i32.i64($i84);
    goto corral_source_split_4449;

  corral_source_split_4449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 859} $i86 := ldv__builtin_expect($i85, 0);
    call {:si_unique_call 860} {:cexpr "tmp___5"} boogie_si_record_i64($i86);
    goto corral_source_split_4450;

  corral_source_split_4450:
    assume {:verifier.code 0} true;
    $i87 := $ne.i64($i86, 0);
    goto corral_source_split_4451;

  corral_source_split_4451:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i87 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(392, 1));
    goto corral_source_split_4456;

  corral_source_split_4456:
    assume {:verifier.code 0} true;
    $i89 := $load.i8($M.0, $p88);
    goto corral_source_split_4457;

  corral_source_split_4457:
    assume {:verifier.code 0} true;
    $i90 := $and.i8($i89, $sub.i8(0, 2));
    goto corral_source_split_4458;

  corral_source_split_4458:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p88, $i90);
    goto corral_source_split_4459;

  corral_source_split_4459:
    assume {:verifier.code 0} true;
    $i91 := $or.i32($i6, 64);
    call {:si_unique_call 862} {:cexpr "cmd"} boogie_si_record_i32($i91);
    goto corral_source_split_4460;

  corral_source_split_4460:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_4461;

  corral_source_split_4461:
    assume {:verifier.code 0} true;
    $p93 := $load.ref($M.0, $p92);
    goto corral_source_split_4462;

  corral_source_split_4462:
    assume {:verifier.code 0} true;
    $p94 := $add.ref($add.ref($p93, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_4463;

  corral_source_split_4463:
    assume {:verifier.code 0} true;
    $p95 := $bitcast.ref.ref($p94);
    goto corral_source_split_4464;

  corral_source_split_4464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 863} writel($i91, $p95);
    goto corral_source_split_4465;

  corral_source_split_4465:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_4466;

  corral_source_split_4466:
    assume {:verifier.code 0} true;
    $p97 := $load.ref($M.0, $p96);
    goto corral_source_split_4467;

  corral_source_split_4467:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p97, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_4468;

  corral_source_split_4468:
    assume {:verifier.code 0} true;
    $p99 := $bitcast.ref.ref($p98);
    goto corral_source_split_4469;

  corral_source_split_4469:
    assume {:verifier.code 0} true;
    call {:si_unique_call 864} vslice_dummy_var_93 := readl($p99);
    goto SeqInstr_328, SeqInstr_329;

  SeqInstr_329:
    assume assertsPassed;
    goto SeqInstr_330;

  SeqInstr_330:
    goto corral_source_split_4470;

  corral_source_split_4470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 865} timer_action($p0, 1);
    goto corral_source_split_4471;

  corral_source_split_4471:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_328:
    assume !assertsPassed;
    return;

  $bb33:
    assume $i87 == 1;
    goto corral_source_split_4453;

  corral_source_split_4453:
    assume {:verifier.code 0} true;
    call {:si_unique_call 861} end_unlink_async($p0);
    goto SeqInstr_325, SeqInstr_326;

  SeqInstr_326:
    assume assertsPassed;
    goto SeqInstr_327;

  SeqInstr_327:
    goto corral_source_split_4454;

  corral_source_split_4454:
    assume {:verifier.code 0} true;
    goto $bb23;

  SeqInstr_325:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i61 == 1;
    goto corral_source_split_4420;

  corral_source_split_4420:
    assume {:verifier.code 0} true;
    $p63 := $p55;
    goto $bb28;

  $bb28:
    call $p64, $p65, $p66, $p67, $p68, $p69, $i70, $i71, $p63, $p72 := start_unlink_async_loop_$bb28($i60, $p64, $p65, $p66, $p67, $p68, $p69, $i70, $i71, $p63, $p72);
    goto $bb28_last;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p63, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4424;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    $p65 := $bitcast.ref.ref($p64);
    goto corral_source_split_4425;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4426;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p66, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4427;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    $p68 := $bitcast.ref.ref($p67);
    goto corral_source_split_4428;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    $p69 := $load.ref($M.0, $p68);
    goto corral_source_split_4429;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    $i70 := $p2i.ref.i64($p69);
    goto corral_source_split_4430;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    $i71 := $ne.i64($i70, $i60);
    goto corral_source_split_4431;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    $p72 := $p66;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i71 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4433;

  corral_source_split_4433:
    assume {:verifier.code 0} true;
    $p62 := $p72;
    goto $bb27;

  $bb30:
    assume $i71 == 1;
    assume {:verifier.code 0} true;
    $p63 := $p66;
    goto $bb30_dummy;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_4385;

  corral_source_split_4385:
    assume {:verifier.code 0} true;
    call {:si_unique_call 851} $p38 := oxu_to_hcd($p0);
    goto corral_source_split_4386;

  corral_source_split_4386:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_4387;

  corral_source_split_4387:
    assume {:verifier.code 0} true;
    $i40 := $load.i32($M.54, $p39);
    goto corral_source_split_4388;

  corral_source_split_4388:
    assume {:verifier.code 0} true;
    $i41 := $ne.i32($i40, 0);
    goto corral_source_split_4389;

  corral_source_split_4389:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    assume !($i41 == 1);
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb17:
    assume $i41 == 1;
    goto corral_source_split_4391;

  corral_source_split_4391:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_4392;

  corral_source_split_4392:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_4393;

  corral_source_split_4393:
    assume {:verifier.code 0} true;
    $i44 := $p2i.ref.i64($p43);
    goto corral_source_split_4394;

  corral_source_split_4394:
    assume {:verifier.code 0} true;
    $i45 := $eq.i64($i44, 0);
    goto corral_source_split_4395;

  corral_source_split_4395:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb19;

  $bb20:
    assume $i45 == 1;
    goto corral_source_split_4397;

  corral_source_split_4397:
    assume {:verifier.code 0} true;
    $i46 := $and.i32($i6, $sub.i32(0, 33));
    goto corral_source_split_4398;

  corral_source_split_4398:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_4399;

  corral_source_split_4399:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4400;

  corral_source_split_4400:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_4401;

  corral_source_split_4401:
    assume {:verifier.code 0} true;
    $p50 := $bitcast.ref.ref($p49);
    goto corral_source_split_4402;

  corral_source_split_4402:
    assume {:verifier.code 0} true;
    call {:si_unique_call 852} writel($i46, $p50);
    call {:si_unique_call 853} devirtbounce.6(0);
    goto corral_source_split_4403;

  corral_source_split_4403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 854} timer_action_done($p0, 3);
    goto corral_source_split_4404;

  corral_source_split_4404:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb8:
    assume $i24 == 1;
    goto corral_source_split_4369;

  corral_source_split_4369:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_4370;

  corral_source_split_4370:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_4371;

  corral_source_split_4371:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_4372;

  corral_source_split_4372:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 4);
    goto corral_source_split_4373;

  corral_source_split_4373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i28 == 1);
    goto $bb10;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb6;

  $bb6:
    call {:si_unique_call 848} devirtbounce.3(0, .str, 1714, 12);
    goto corral_source_split_4361;

  corral_source_split_4361:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    call start_unlink_async_loop_$bb13();
    goto $bb13_last;

  $bb5:
    assume {:verifier.code 0} true;
    assume $i20 == 1;
    goto $bb6;

  $bb1:
    assume $i16 == 1;
    call {:si_unique_call 847} devirtbounce.3(0, .str, 1711, 12);
    goto corral_source_split_4354;

  corral_source_split_4354:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call start_unlink_async_loop_$bb3();
    goto $bb3_last;

  SeqInstr_322:
    assume !assertsPassed;
    return;

  $bb30_dummy:
    assume false;
    return;

  $bb28_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4422;

  $bb13_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const queued_spin_is_locked: ref;

axiom queued_spin_is_locked == $sub.ref(0, 307077);

procedure queued_spin_is_locked($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation queued_spin_is_locked($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4473;

  corral_source_split_4473:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4474;

  corral_source_split_4474:
    assume {:verifier.code 0} true;
    call {:si_unique_call 866} $i2 := atomic_read($p1);
    call {:si_unique_call 867} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_4475;

  corral_source_split_4475:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const atomic_read: ref;

axiom atomic_read == $sub.ref(0, 308109);

procedure atomic_read($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_read($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4477;

  corral_source_split_4477:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_4478;

  corral_source_split_4478:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_4479;

  corral_source_split_4479:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ffs: ref;

axiom ffs == $sub.ref(0, 309141);

procedure ffs($i0: i32) returns ($r: i32);
  free requires assertsPassed;



implementation ffs($i0: i32) returns ($r: i32)
{
  var $i1: i32;
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 868} {:cexpr "ffs:arg:x"} boogie_si_record_i32($i0);
    call {:si_unique_call 869} $i1 := devirtbounce.9(0, $i0, $sub.i32(0, 1));
    call {:si_unique_call 870} {:cexpr "r"} boogie_si_record_i32($i1);
    goto corral_source_split_4481;

  corral_source_split_4481:
    assume {:verifier.code 0} true;
    $i2 := $add.i32($i1, 1);
    goto corral_source_split_4482;

  corral_source_split_4482:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const check_intr_schedule: ref;

axiom check_intr_schedule == $sub.ref(0, 310173);

procedure check_intr_schedule($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.50;



implementation check_intr_schedule($p0: ref, $i1: i32, $i2: i32, $p3: ref, $p4: ref) returns ($r: i32)
{
  var $p5: ref;
  var $i6: i8;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $p11: ref;
  var $i12: i16;
  var $i13: i32;
  var $p14: ref;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i8;
  var $i21: i32;
  var $i22: i1;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 871} {:cexpr "check_intr_schedule:arg:frame"} boogie_si_record_i32($i1);
    call {:si_unique_call 872} {:cexpr "check_intr_schedule:arg:uframe"} boogie_si_record_i32($i2);
    goto corral_source_split_4484;

  corral_source_split_4484:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_4485;

  corral_source_split_4485:
    assume {:verifier.code 0} true;
    $i6 := $load.i8($M.0, $p5);
    goto corral_source_split_4486;

  corral_source_split_4486:
    assume {:verifier.code 0} true;
    $i7 := $zext.i8.i32($i6);
    goto corral_source_split_4487;

  corral_source_split_4487:
    assume {:verifier.code 0} true;
    $i8 := $ne.i32($i7, 0);
    goto corral_source_split_4488;

  corral_source_split_4488:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4497;

  corral_source_split_4497:
    assume {:verifier.code 0} true;
    $i12 := $load.i16($M.0, $p11);
    goto corral_source_split_4498;

  corral_source_split_4498:
    assume {:verifier.code 0} true;
    $i13 := $zext.i16.i32($i12);
    goto corral_source_split_4499;

  corral_source_split_4499:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_4500;

  corral_source_split_4500:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.0, $p14);
    goto corral_source_split_4501;

  corral_source_split_4501:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_4502;

  corral_source_split_4502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 873} $i17 := check_period($p0, $i1, $i2, $i13, $i16);
    call {:si_unique_call 874} {:cexpr "tmp"} boogie_si_record_i32($i17);
    goto corral_source_split_4503;

  corral_source_split_4503:
    assume {:verifier.code 0} true;
    $i18 := $eq.i32($i17, 0);
    goto corral_source_split_4504;

  corral_source_split_4504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_4508;

  corral_source_split_4508:
    assume {:verifier.code 0} true;
    $i20 := $load.i8($M.0, $p19);
    goto corral_source_split_4509;

  corral_source_split_4509:
    assume {:verifier.code 0} true;
    $i21 := $zext.i8.i32($i20);
    goto corral_source_split_4510;

  corral_source_split_4510:
    assume {:verifier.code 0} true;
    $i22 := $eq.i32($i21, 0);
    goto corral_source_split_4511;

  corral_source_split_4511:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 28);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4495;

  corral_source_split_4495:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  $bb11:
    assume $i22 == 1;
    goto corral_source_split_4513;

  corral_source_split_4513:
    assume {:verifier.code 0} true;
    $M.50 := $store.i32($M.50, $p4, 0);
    goto corral_source_split_4514;

  corral_source_split_4514:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb6;

  $bb8:
    assume $i18 == 1;
    goto corral_source_split_4506;

  corral_source_split_4506:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 28);
    goto $bb6;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_4490;

  corral_source_split_4490:
    assume {:verifier.code 0} true;
    $i9 := $ugt.i32($i2, 5);
    goto corral_source_split_4491;

  corral_source_split_4491:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_4493;

  corral_source_split_4493:
    assume {:verifier.code 0} true;
    $i10 := $sub.i32(0, 28);
    goto $bb6;
}



const qh_link_periodic: ref;

axiom qh_link_periodic == $sub.ref(0, 311205);

procedure qh_link_periodic($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.57, $M.58, $M.59, $CurrAddr, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.47, assertsPassed;



implementation qh_link_periodic($p0: ref, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i16;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $p29: ref;
  var $i30: i16;
  var $i31: i32;
  var $p32: ref;
  var $i33: i8;
  var $i34: i32;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $i39: i32;
  var $p40: ref;
  var $i41: i16;
  var $i42: i32;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i65: i32;
  var $i66: i32;
  var $i67: i1;
  var $p68: ref;
  var $p69: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $i79: i64;
  var $i80: i1;
  var $p63: ref;
  var $p64: ref;
  var $p81: ref;
  var $p82: ref;
  var $p61: ref;
  var $p62: ref;
  var $p70: ref;
  var $p71: ref;
  var $p83: ref;
  var $p84: ref;
  var $i85: i64;
  var $i86: i1;
  var $p91: ref;
  var $i92: i16;
  var $i93: i32;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $i97: i16;
  var $i98: i32;
  var $i99: i1;
  var $p100: ref;
  var $p101: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $i114: i1;
  var $p89: ref;
  var $p90: ref;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $i121: i1;
  var $p122: ref;
  var $p123: ref;
  var $p115: ref;
  var $p116: ref;
  var $p87: ref;
  var $p88: ref;
  var $p102: ref;
  var $p103: ref;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $i127: i64;
  var $i128: i1;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $i134: i64;
  var $i135: i1;
  var $i136: i32;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $i140: i64;
  var $i141: i32;
  var $i142: i32;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i1;
  var $i46: i32;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $i152: i32;
  var $p153: ref;
  var $i154: i16;
  var $i155: i32;
  var $i156: i1;
  var $p157: ref;
  var $i158: i8;
  var $i159: i32;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i32;
  var $p164: ref;
  var $i165: i16;
  var $i166: i32;
  var $i167: i32;
  var $p169: ref;
  var $i170: i8;
  var $i171: i32;
  var $i172: i32;
  var $i168: i32;
  var $i173: i32;
  var $p175: ref;
  var $p176: ref;
  var $i177: i32;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $p181: ref;
  var $i182: i1;
  var $i183: i32;
  var $i184: i32;
  var cmdloc_dummy_var_26: [ref]i8;
  var cmdloc_dummy_var_27: [ref]i8;
  var cmdloc_dummy_var_28: [ref]i8;
  var cmdloc_dummy_var_29: [ref]i8;
  var cmdloc_dummy_var_30: [ref]i8;
  var cmdloc_dummy_var_31: [ref]i8;
  var cmdloc_dummy_var_32: [ref]i8;
  var cmdloc_dummy_var_33: [ref]i8;
  var cmdloc_dummy_var_34: [ref]i8;
  var cmdloc_dummy_var_35: [ref]i8;
  var cmdloc_dummy_var_36: [ref]i8;
  var cmdloc_dummy_var_37: [ref]i8;
  var vslice_dummy_var_94: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 875} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 876} $p3 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    goto corral_source_split_4516;

  corral_source_split_4516:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4517;

  corral_source_split_4517:
    assume {:verifier.code 0} true;
    $i5 := $load.i16($M.0, $p4);
    goto corral_source_split_4518;

  corral_source_split_4518:
    assume {:verifier.code 0} true;
    $i6 := $zext.i16.i32($i5);
    call {:si_unique_call 877} {:cexpr "period"} boogie_si_record_i32($i6);
    goto corral_source_split_4519;

  corral_source_split_4519:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_4520;

  corral_source_split_4520:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.2);
    goto corral_source_split_4521;

  corral_source_split_4521:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_4522;

  corral_source_split_4522:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.14);
    goto corral_source_split_4523;

  corral_source_split_4523:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_4524;

  corral_source_split_4524:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str);
    goto corral_source_split_4525;

  corral_source_split_4525:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_4526;

  corral_source_split_4526:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.15);
    goto corral_source_split_4527;

  corral_source_split_4527:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_4528;

  corral_source_split_4528:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_4529;

  corral_source_split_4529:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.6, $p12);
    goto corral_source_split_4530;

  corral_source_split_4530:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_4531;

  corral_source_split_4531:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 1941);
    goto corral_source_split_4532;

  corral_source_split_4532:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p12, $i15);
    goto corral_source_split_4533;

  corral_source_split_4533:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4534;

  corral_source_split_4534:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p16, 0);
    goto corral_source_split_4535;

  corral_source_split_4535:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_4536;

  corral_source_split_4536:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.7, $p17);
    goto corral_source_split_4537;

  corral_source_split_4537:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_4538;

  corral_source_split_4538:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_4539;

  corral_source_split_4539:
    assume {:verifier.code 0} true;
    call {:si_unique_call 878} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 879} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_4540;

  corral_source_split_4540:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_4541;

  corral_source_split_4541:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i6, 0);
    goto corral_source_split_4561;

  corral_source_split_4561:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    $i39 := $i6;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_4565;

  corral_source_split_4565:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_4566;

  corral_source_split_4566:
    assume {:verifier.code 0} true;
    $i41 := $load.i16($M.0, $p40);
    goto corral_source_split_4567;

  corral_source_split_4567:
    assume {:verifier.code 0} true;
    $i42 := $zext.i16.i32($i41);
    call {:si_unique_call 883} {:cexpr "i"} boogie_si_record_i32($i42);
    goto corral_source_split_4568;

  corral_source_split_4568:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_4569;

  corral_source_split_4569:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_4570;

  corral_source_split_4570:
    assume {:verifier.code 0} true;
    $i45 := $ugt.i32($i44, $i42);
    goto corral_source_split_4571;

  corral_source_split_4571:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i45 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_4700;

  corral_source_split_4700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, 1);
    goto corral_source_split_4701;

  corral_source_split_4701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 892} vslice_dummy_var_94 := qh_get($p1);
    goto corral_source_split_4702;

  corral_source_split_4702:
    assume {:verifier.code 0} true;
    call {:si_unique_call 893} $p149 := oxu_to_hcd($p0);
    goto corral_source_split_4703;

  corral_source_split_4703:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p149, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_4704;

  corral_source_split_4704:
    assume {:verifier.code 0} true;
    $i152 := $load.i32($M.57, $p151);
    goto corral_source_split_4705;

  corral_source_split_4705:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4706;

  corral_source_split_4706:
    assume {:verifier.code 0} true;
    $i154 := $load.i16($M.0, $p153);
    goto corral_source_split_4707;

  corral_source_split_4707:
    assume {:verifier.code 0} true;
    $i155 := $zext.i16.i32($i154);
    goto corral_source_split_4708;

  corral_source_split_4708:
    assume {:verifier.code 0} true;
    $i156 := $ne.i32($i155, 0);
    goto corral_source_split_4709;

  corral_source_split_4709:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47, $bb48;

  $bb48:
    assume !($i156 == 1);
    goto corral_source_split_4724;

  corral_source_split_4724:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_4725;

  corral_source_split_4725:
    assume {:verifier.code 0} true;
    $i170 := $load.i8($M.0, $p169);
    goto corral_source_split_4726;

  corral_source_split_4726:
    assume {:verifier.code 0} true;
    $i171 := $zext.i8.i32($i170);
    goto corral_source_split_4727;

  corral_source_split_4727:
    assume {:verifier.code 0} true;
    $i172 := $mul.i32($i171, 8);
    goto corral_source_split_4728;

  corral_source_split_4728:
    assume {:verifier.code 0} true;
    $i168 := $i172;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    goto corral_source_split_4730;

  corral_source_split_4730:
    assume {:verifier.code 0} true;
    $i173 := $add.i32($i152, $i168);
    goto corral_source_split_4731;

  corral_source_split_4731:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p149, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(248, 1));
    goto corral_source_split_4732;

  corral_source_split_4732:
    assume {:verifier.code 0} true;
    $M.57 := $store.i32($M.57, $p175, $i173);
    goto corral_source_split_4733;

  corral_source_split_4733:
    assume {:verifier.code 0} true;
    $p176 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(436, 1));
    goto corral_source_split_4734;

  corral_source_split_4734:
    assume {:verifier.code 0} true;
    $i177 := $load.i32($M.0, $p176);
    call {:si_unique_call 894} {:cexpr "tmp___3"} boogie_si_record_i32($i177);
    goto corral_source_split_4735;

  corral_source_split_4735:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(436, 1));
    goto corral_source_split_4736;

  corral_source_split_4736:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_4737;

  corral_source_split_4737:
    assume {:verifier.code 0} true;
    $i180 := $add.i32($i179, 1);
    goto corral_source_split_4738;

  corral_source_split_4738:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(436, 1));
    goto corral_source_split_4739;

  corral_source_split_4739:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p181, $i180);
    goto corral_source_split_4740;

  corral_source_split_4740:
    assume {:verifier.code 0} true;
    $i182 := $eq.i32($i177, 0);
    goto corral_source_split_4741;

  corral_source_split_4741:
    assume {:verifier.code 0} true;
    assume {:branchcond $i182} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i182 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $i184 := 0;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto corral_source_split_4746;

  corral_source_split_4746:
    assume {:verifier.code 0} true;
    $r := $i184;
    return;

  $bb50:
    assume $i182 == 1;
    goto corral_source_split_4743;

  corral_source_split_4743:
    assume {:verifier.code 0} true;
    call {:si_unique_call 895} $i183 := enable_periodic($p0);
    goto SeqInstr_331, SeqInstr_332;

  SeqInstr_332:
    assume assertsPassed;
    goto SeqInstr_333;

  SeqInstr_333:
    call {:si_unique_call 896} {:cexpr "tmp___2"} boogie_si_record_i32($i183);
    goto corral_source_split_4744;

  corral_source_split_4744:
    assume {:verifier.code 0} true;
    $i184 := $i183;
    goto $bb52;

  SeqInstr_331:
    assume !assertsPassed;
    return;

  $bb47:
    assume $i156 == 1;
    goto corral_source_split_4711;

  corral_source_split_4711:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_4712;

  corral_source_split_4712:
    assume {:verifier.code 0} true;
    $i158 := $load.i8($M.0, $p157);
    goto corral_source_split_4713;

  corral_source_split_4713:
    assume {:verifier.code 0} true;
    $i159 := $zext.i8.i32($i158);
    goto corral_source_split_4714;

  corral_source_split_4714:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_4715;

  corral_source_split_4715:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.0, $p160);
    goto corral_source_split_4716;

  corral_source_split_4716:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_4717;

  corral_source_split_4717:
    assume {:verifier.code 0} true;
    $i163 := $add.i32($i159, $i162);
    goto corral_source_split_4718;

  corral_source_split_4718:
    assume {:verifier.code 0} true;
    $p164 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4719;

  corral_source_split_4719:
    assume {:verifier.code 0} true;
    $i165 := $load.i16($M.0, $p164);
    goto corral_source_split_4720;

  corral_source_split_4720:
    assume {:verifier.code 0} true;
    $i166 := $zext.i16.i32($i165);
    goto corral_source_split_4721;

  corral_source_split_4721:
    assume {:verifier.code 0} true;
    $i167 := $sdiv.i32($i163, $i166);
    goto corral_source_split_4722;

  corral_source_split_4722:
    assume {:verifier.code 0} true;
    $i168 := $i167;
    goto $bb49;

  $bb7:
    assume $i45 == 1;
    goto corral_source_split_4573;

  corral_source_split_4573:
    assume {:verifier.code 0} true;
    $i46 := $i42;
    goto $bb10;

  $bb10:
    call $p47, $p48, $i49, $p50, $p51, $p52, $i53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $i65, $i66, $i67, $p68, $p69, $p72, $p73, $p74, $p76, $p77, $p78, $i79, $i80, $p63, $p64, $p81, $p82, $p61, $p62, $p70, $p71, $p83, $p84, $i85, $i86, $p91, $i92, $i93, $p94, $p95, $p96, $i97, $i98, $i99, $p100, $p101, $p104, $p105, $p106, $p107, $p108, $p110, $p111, $p112, $i113, $i114, $p89, $p90, $p117, $p118, $i119, $i120, $i121, $p122, $p123, $p115, $p116, $p87, $p88, $p102, $p103, $p124, $p125, $i126, $i127, $i128, $p129, $p130, $p131, $p132, $p133, $i134, $i135, $i136, $p137, $p138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i46, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37 := qh_link_periodic_loop_$bb10($p0, $p1, $p3, $i39, $p43, $p47, $p48, $i49, $p50, $p51, $p52, $i53, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $i65, $i66, $i67, $p68, $p69, $p72, $p73, $p74, $p76, $p77, $p78, $i79, $i80, $p63, $p64, $p81, $p82, $p61, $p62, $p70, $p71, $p83, $p84, $i85, $i86, $p91, $i92, $i93, $p94, $p95, $p96, $i97, $i98, $i99, $p100, $p101, $p104, $p105, $p106, $p107, $p108, $p110, $p111, $p112, $i113, $i114, $p89, $p90, $p117, $p118, $i119, $i120, $i121, $p122, $p123, $p115, $p116, $p87, $p88, $p102, $p103, $p124, $p125, $i126, $i127, $i128, $p129, $p130, $p131, $p132, $p133, $i134, $i135, $i136, $p137, $p138, $p139, $i140, $i141, $i142, $i143, $i144, $i145, $i146, $i46, cmdloc_dummy_var_26, cmdloc_dummy_var_27, cmdloc_dummy_var_28, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34, cmdloc_dummy_var_35, cmdloc_dummy_var_36, cmdloc_dummy_var_37);
    goto $bb10_last;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_4577;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4578;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    $i49 := $zext.i32.i64($i46);
    goto corral_source_split_4579;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($p48, $mul.ref($i49, 8));
    goto corral_source_split_4580;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_4581;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4582;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    $i53 := $zext.i32.i64($i46);
    goto corral_source_split_4583;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($p52, $mul.ref($i53, 4));
    goto corral_source_split_4584;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p3);
    goto corral_source_split_4585;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    $p56 := $bitcast.ref.ref($p50);
    goto corral_source_split_4586;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_26 := $M.0;
    cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 884} cmdloc_dummy_var_28 := $memcpy.i8(cmdloc_dummy_var_26, cmdloc_dummy_var_27, $p55, $p56, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_28;
    goto corral_source_split_4587;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p3);
    goto corral_source_split_4588;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4589;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_4590;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_4591;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    $p61, $p62 := $p50, $p54;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i60 == 1);
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p70, $p71 := $p61, $p62;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4603;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    $p83 := $bitcast.ref.ref($p3);
    goto corral_source_split_4604;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_4605;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    $i85 := $p2i.ref.i64($p84);
    goto corral_source_split_4606;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    $i86 := $ne.i64($i85, 0);
    goto corral_source_split_4607;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    $p87, $p88 := $p70, $p71;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume !($i86 == 1);
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    $p102, $p103 := $p87, $p88;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4643;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    $p124 := $bitcast.ref.ref($p3);
    goto corral_source_split_4644;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    $p125 := $load.ref($M.0, $p124);
    goto corral_source_split_4645;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_4646;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    $i127 := $p2i.ref.i64($p1);
    goto corral_source_split_4647;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    $i128 := $ne.i64($i126, $i127);
    goto corral_source_split_4648;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $i144 := $add.i32($i46, $i39);
    call {:si_unique_call 891} {:cexpr "i"} boogie_si_record_i32($i144);
    goto corral_source_split_4694;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    $i145 := $load.i32($M.0, $p43);
    goto corral_source_split_4695;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    $i146 := $ugt.i32($i145, $i144);
    goto corral_source_split_4696;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i146 == 1);
    goto corral_source_split_4698;

  corral_source_split_4698:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb44:
    assume $i146 == 1;
    assume {:verifier.code 0} true;
    $i46 := $i144;
    goto $bb44_dummy;

  $bb38:
    assume $i128 == 1;
    goto corral_source_split_4669;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4670;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    $p130 := $bitcast.ref.ref($p129);
    goto corral_source_split_4671;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    $p131 := $bitcast.ref.ref($p3);
    goto corral_source_split_4672;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_35 := $M.0;
    cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 889} cmdloc_dummy_var_37 := $memcpy.i8(cmdloc_dummy_var_35, cmdloc_dummy_var_36, $p130, $p131, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_37;
    goto corral_source_split_4673;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    $p132 := $bitcast.ref.ref($p3);
    goto corral_source_split_4674;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    $p133 := $load.ref($M.0, $p132);
    goto corral_source_split_4675;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    $i134 := $p2i.ref.i64($p133);
    goto corral_source_split_4676;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    $i135 := $ne.i64($i134, 0);
    goto corral_source_split_4677;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    call {:si_unique_call 890} devirtbounce.6(0);
    goto corral_source_split_4684;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    $p138 := $bitcast.ref.ref($p102);
    goto corral_source_split_4685;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p138, $p1);
    goto corral_source_split_4686;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4687;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    $i140 := $load.i64($M.0, $p139);
    goto corral_source_split_4688;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    $i141 := $trunc.i64.i32($i140);
    goto corral_source_split_4689;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    $i142 := $and.i32($i141, $sub.i32(0, 32));
    goto corral_source_split_4690;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    $i143 := $or.i32($i142, 2);
    goto corral_source_split_4691;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p103, $i143);
    goto corral_source_split_4692;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb40:
    assume $i135 == 1;
    goto corral_source_split_4679;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    $i136 := $load.i32($M.0, $p103);
    goto corral_source_split_4680;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4681;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p137, $i136);
    goto corral_source_split_4682;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb24:
    assume $i86 == 1;
    goto corral_source_split_4622;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    $p89, $p90 := $p71, $p70;
    goto $bb27;

  $bb27:
    call $p91, $i92, $i93, $p94, $p95, $p96, $i97, $i98, $i99, $p100, $p101, $p104, $p105, $p106, $p107, $p108, $p110, $p111, $p112, $i113, $i114, $p89, $p90, $p117, $p118, $i119, $i120, $i121, $p122, $p123, $p115, $p116, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34 := qh_link_periodic_loop_$bb27($p1, $p3, $p83, $p91, $i92, $i93, $p94, $p95, $p96, $i97, $i98, $i99, $p100, $p101, $p104, $p105, $p106, $p107, $p108, $p110, $p111, $p112, $i113, $i114, $p89, $p90, $p117, $p118, $i119, $i120, $i121, $p122, $p123, $p115, $p116, cmdloc_dummy_var_32, cmdloc_dummy_var_33, cmdloc_dummy_var_34);
    goto $bb27_last;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    $p117 := $bitcast.ref.ref($p3);
    goto corral_source_split_4625;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    $p118 := $load.ref($M.0, $p117);
    goto corral_source_split_4626;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    $i119 := $p2i.ref.i64($p118);
    goto corral_source_split_4627;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    $i120 := $p2i.ref.i64($p1);
    goto corral_source_split_4628;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    $i121 := $ne.i64($i119, $i120);
    goto corral_source_split_4629;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    $p122, $p123 := $p90, $p89;
    assume true;
    goto $bb35, $bb36;

  $bb36:
    assume !($i121 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4667;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    $p87, $p88 := $p122, $p123;
    goto $bb26;

  $bb35:
    assume $i121 == 1;
    goto corral_source_split_4665;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4631;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    $i92 := $load.i16($M.0, $p91);
    goto corral_source_split_4632;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    $i93 := $zext.i16.i32($i92);
    goto corral_source_split_4633;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    $p94 := $bitcast.ref.ref($p3);
    goto corral_source_split_4634;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    $p95 := $load.ref($M.0, $p94);
    goto corral_source_split_4635;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    $p96 := $add.ref($add.ref($p95, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4636;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    $i97 := $load.i16($M.0, $p96);
    goto corral_source_split_4637;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    $i98 := $zext.i16.i32($i97);
    goto corral_source_split_4638;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    $i99 := $sgt.i32($i93, $i98);
    goto corral_source_split_4639;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    $p100, $p101 := $p90, $p89;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p104 := $bitcast.ref.ref($p3);
    goto corral_source_split_4650;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    $p105 := $load.ref($M.0, $p104);
    goto corral_source_split_4651;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($p105, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4652;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    $p107 := $bitcast.ref.ref($p3);
    goto corral_source_split_4653;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_4654;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto corral_source_split_4655;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    $p110 := $bitcast.ref.ref($p3);
    goto corral_source_split_4656;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    $p111 := $bitcast.ref.ref($p106);
    goto corral_source_split_4657;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_32 := $M.0;
    cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 888} cmdloc_dummy_var_34 := $memcpy.i8(cmdloc_dummy_var_32, cmdloc_dummy_var_33, $p110, $p111, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_34;
    goto corral_source_split_4658;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    $p112 := $load.ref($M.0, $p83);
    goto corral_source_split_4659;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    $i113 := $p2i.ref.i64($p112);
    goto corral_source_split_4660;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    $i114 := $ne.i64($i113, 0);
    goto corral_source_split_4661;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    $p115, $p116 := $p106, $p108;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i114 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4663;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    $p87, $p88 := $p115, $p116;
    goto $bb26;

  $bb33:
    assume $i114 == 1;
    assume {:verifier.code 0} true;
    $p89, $p90 := $p108, $p106;
    goto $bb33_dummy;

  $bb29:
    assume $i99 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4641;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    $p102, $p103 := $p100, $p101;
    goto $bb31;

  $bb12:
    assume $i60 == 1;
    goto corral_source_split_4593;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    $p63, $p64 := $p54, $p50;
    goto $bb15;

  $bb15:
    call $i65, $i66, $i67, $p68, $p69, $p72, $p73, $p74, $p76, $p77, $p78, $i79, $i80, $p63, $p64, $p81, $p82, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31 := qh_link_periodic_loop_$bb15($p3, $p57, $i65, $i66, $i67, $p68, $p69, $p72, $p73, $p74, $p76, $p77, $p78, $i79, $i80, $p63, $p64, $p81, $p82, cmdloc_dummy_var_29, cmdloc_dummy_var_30, cmdloc_dummy_var_31);
    goto $bb15_last;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i65 := $load.i32($M.0, $p63);
    goto corral_source_split_4597;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    $i66 := $and.i32($i65, 6);
    call {:si_unique_call 885} {:cexpr "type"} boogie_si_record_i32($i66);
    goto corral_source_split_4598;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i66, 2);
    goto corral_source_split_4599;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    $p68, $p69 := $p64, $p63;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} $p72 := periodic_next_shadow($p64, $i66);
    goto corral_source_split_4609;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    $p73 := $bitcast.ref.ref($p3);
    goto corral_source_split_4610;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    $p74 := $load.ref($M.0, $p73);
    goto corral_source_split_4611;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p3);
    goto corral_source_split_4613;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    $p77 := $bitcast.ref.ref($p72);
    goto corral_source_split_4614;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_29 := $M.0;
    cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 887} cmdloc_dummy_var_31 := $memcpy.i8(cmdloc_dummy_var_29, cmdloc_dummy_var_30, $p76, $p77, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_31;
    goto corral_source_split_4615;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    $p78 := $load.ref($M.0, $p57);
    goto corral_source_split_4616;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    $i79 := $p2i.ref.i64($p78);
    goto corral_source_split_4617;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_4618;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    $p81, $p82 := $p72, $p74;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4620;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    $p61, $p62 := $p81, $p82;
    goto $bb14;

  $bb21:
    assume $i80 == 1;
    assume {:verifier.code 0} true;
    $p63, $p64 := $p74, $p72;
    goto $bb21_dummy;

  $bb17:
    assume $i67 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4601;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    $p70, $p71 := $p68, $p69;
    goto $bb19;

  $bb4:
    assume $i38 == 1;
    goto corral_source_split_4563;

  corral_source_split_4563:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb6;

  $bb1:
    assume $i22 == 1;
    goto corral_source_split_4543;

  corral_source_split_4543:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4544;

  corral_source_split_4544:
    assume {:verifier.code 0} true;
    call {:si_unique_call 880} $i24 := __le32_to_cpup($p23);
    call {:si_unique_call 881} {:cexpr "tmp"} boogie_si_record_i32($i24);
    goto corral_source_split_4545;

  corral_source_split_4545:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_4546;

  corral_source_split_4546:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.0, $p25);
    goto corral_source_split_4547;

  corral_source_split_4547:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p26, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_4548;

  corral_source_split_4548:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i24, 65535);
    goto corral_source_split_4549;

  corral_source_split_4549:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_4550;

  corral_source_split_4550:
    assume {:verifier.code 0} true;
    $i30 := $load.i16($M.0, $p29);
    goto corral_source_split_4551;

  corral_source_split_4551:
    assume {:verifier.code 0} true;
    $i31 := $zext.i16.i32($i30);
    goto corral_source_split_4552;

  corral_source_split_4552:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_4553;

  corral_source_split_4553:
    assume {:verifier.code 0} true;
    $i33 := $load.i8($M.0, $p32);
    goto corral_source_split_4554;

  corral_source_split_4554:
    assume {:verifier.code 0} true;
    $i34 := $zext.i8.i32($i33);
    goto corral_source_split_4555;

  corral_source_split_4555:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_4556;

  corral_source_split_4556:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_4557;

  corral_source_split_4557:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_4558;

  corral_source_split_4558:
    assume {:verifier.code 0} true;
    call {:si_unique_call 882} __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref.i32.i32.i32($p2, $p27, .str.15, $i6, $i28, $p1, $i31, $i34, $i37);
    goto corral_source_split_4559;

  corral_source_split_4559:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb33_dummy:
    assume false;
    return;

  $bb27_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4624;

  $bb21_dummy:
    assume false;
    return;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4595;

  $bb44_dummy:
    assume false;
    return;

  $bb10_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4575;
}



const enable_periodic: ref;

axiom enable_periodic == $sub.ref(0, 312237);

procedure enable_periodic($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.58, $M.59, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, assertsPassed;



implementation enable_periodic($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i32;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i32;
  var $p28: ref;
  var $i29: i32;
  var $i30: i32;
  var $i31: i32;
  var $p32: ref;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4748;

  corral_source_split_4748:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_4749;

  corral_source_split_4749:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_4750;

  corral_source_split_4750:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_4751;

  corral_source_split_4751:
    assume {:verifier.code 0} true;
    $p4 := $bitcast.ref.ref($p3);
    goto corral_source_split_4752;

  corral_source_split_4752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 897} $i5 := handshake($p0, $p4, 16384, 0, 1125);
    goto SeqInstr_334, SeqInstr_335;

  SeqInstr_335:
    assume assertsPassed;
    goto SeqInstr_336;

  SeqInstr_336:
    call {:si_unique_call 898} {:cexpr "status"} boogie_si_record_i32($i5);
    goto corral_source_split_4753;

  corral_source_split_4753:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 0);
    goto corral_source_split_4754;

  corral_source_split_4754:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_4765;

  corral_source_split_4765:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4766;

  corral_source_split_4766:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_4767;

  corral_source_split_4767:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_4768;

  corral_source_split_4768:
    assume {:verifier.code 0} true;
    call {:si_unique_call 902} $i15 := readl($p14);
    goto SeqInstr_337, SeqInstr_338;

  SeqInstr_338:
    assume assertsPassed;
    goto SeqInstr_339;

  SeqInstr_339:
    call {:si_unique_call 903} {:cexpr "tmp___1"} boogie_si_record_i32($i15);
    goto corral_source_split_4769;

  corral_source_split_4769:
    assume {:verifier.code 0} true;
    $i16 := $or.i32($i15, 16);
    call {:si_unique_call 904} {:cexpr "cmd"} boogie_si_record_i32($i16);
    goto corral_source_split_4770;

  corral_source_split_4770:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_4771;

  corral_source_split_4771:
    assume {:verifier.code 0} true;
    $p18 := $load.ref($M.0, $p17);
    goto corral_source_split_4772;

  corral_source_split_4772:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p18, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_4773;

  corral_source_split_4773:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_4774;

  corral_source_split_4774:
    assume {:verifier.code 0} true;
    call {:si_unique_call 905} writel($i16, $p20);
    goto corral_source_split_4775;

  corral_source_split_4775:
    assume {:verifier.code 0} true;
    call {:si_unique_call 906} $p21 := oxu_to_hcd($p0);
    goto corral_source_split_4776;

  corral_source_split_4776:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p21, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_4777;

  corral_source_split_4777:
    assume {:verifier.code 0} true;
    $M.59 := $store.i32($M.59, $p22, 1);
    goto corral_source_split_4778;

  corral_source_split_4778:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_4779;

  corral_source_split_4779:
    assume {:verifier.code 0} true;
    $p24 := $load.ref($M.0, $p23);
    goto corral_source_split_4780;

  corral_source_split_4780:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p24, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_4781;

  corral_source_split_4781:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p25);
    goto corral_source_split_4782;

  corral_source_split_4782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 907} $i27 := readl($p26);
    goto SeqInstr_340, SeqInstr_341;

  SeqInstr_341:
    assume assertsPassed;
    goto SeqInstr_342;

  SeqInstr_342:
    call {:si_unique_call 908} {:cexpr "tmp___3"} boogie_si_record_i32($i27);
    goto corral_source_split_4783;

  corral_source_split_4783:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_4784;

  corral_source_split_4784:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_4785;

  corral_source_split_4785:
    assume {:verifier.code 0} true;
    $i30 := $shl.i32($i29, 3);
    goto corral_source_split_4786;

  corral_source_split_4786:
    assume {:verifier.code 0} true;
    $i31 := $urem.i32($i27, $i30);
    goto corral_source_split_4787;

  corral_source_split_4787:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(432, 1));
    goto corral_source_split_4788;

  corral_source_split_4788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $i31);
    goto corral_source_split_4789;

  corral_source_split_4789:
    assume {:verifier.code 0} true;
    $i10 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4763;

  corral_source_split_4763:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;

  SeqInstr_340:
    assume !assertsPassed;
    return;

  SeqInstr_337:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_4756;

  corral_source_split_4756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 899} $p7 := oxu_to_hcd($p0);
    goto corral_source_split_4757;

  corral_source_split_4757:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_4758;

  corral_source_split_4758:
    assume {:verifier.code 0} true;
    $M.58 := $store.i32($M.58, $p8, 0);
    goto corral_source_split_4759;

  corral_source_split_4759:
    assume {:verifier.code 0} true;
    call {:si_unique_call 900} $p9 := oxu_to_hcd($p0);
    goto corral_source_split_4760;

  corral_source_split_4760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 901} usb_hc_died($p9);
    goto corral_source_split_4761;

  corral_source_split_4761:
    assume {:verifier.code 0} true;
    $i10 := $i5;
    goto $bb3;

  SeqInstr_334:
    assume !assertsPassed;
    return;
}



const check_period: ref;

axiom check_period == $sub.ref(0, 313269);

procedure check_period($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation check_period($p0: ref, $i1: i32, $i2: i32, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i1;
  var $i7: i32;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $i13: i32;
  var $i14: i16;
  var $i15: i32;
  var $i16: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $i21: i16;
  var $i22: i32;
  var $i23: i1;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i1;
  var $i24: i32;
  var $i29: i32;
  var $p30: ref;
  var $i31: i32;
  var $i32: i1;
  var $i6: i32;
  var $i33: i16;
  var $i34: i32;
  var $i35: i1;
  var $i36: i16;
  var $i37: i32;
  var $i38: i1;
  var $i39: i16;
  var $i40: i32;
  var $i41: i1;
  var $i42: i16;
  var $i43: i32;
  var $i44: i1;
  var $i45: i16;
  var $i46: i32;
  var $i47: i1;
  var $i48: i16;
  var $i49: i32;
  var $i50: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 909} {:cexpr "check_period:arg:frame"} boogie_si_record_i32($i1);
    call {:si_unique_call 910} {:cexpr "check_period:arg:uframe"} boogie_si_record_i32($i2);
    call {:si_unique_call 911} {:cexpr "check_period:arg:period"} boogie_si_record_i32($i3);
    call {:si_unique_call 912} {:cexpr "check_period:arg:usecs"} boogie_si_record_i32($i4);
    goto corral_source_split_4791;

  corral_source_split_4791:
    assume {:verifier.code 0} true;
    $i5 := $ugt.i32($i2, 7);
    goto corral_source_split_4792;

  corral_source_split_4792:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i7 := $sub.i32(100, $i4);
    call {:si_unique_call 913} {:cexpr "usecs"} boogie_si_record_i32($i7);
    goto corral_source_split_4798;

  corral_source_split_4798:
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i3, 0);
    goto corral_source_split_4799;

  corral_source_split_4799:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_4800;

  corral_source_split_4800:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_4801;

  corral_source_split_4801:
    assume {:verifier.code 0} true;
    call {:si_unique_call 914} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 915} {:cexpr "tmp___1"} boogie_si_record_i64($i11);
    goto corral_source_split_4802;

  corral_source_split_4802:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_4803;

  corral_source_split_4803:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_4807;

  corral_source_split_4807:
    assume {:verifier.code 0} true;
    call {:si_unique_call 916} $i21 := periodic_usecs($p0, $i1, $i2);
    call {:si_unique_call 917} {:cexpr "tmp___0"} boogie_si_record_i16($i21);
    goto corral_source_split_4808;

  corral_source_split_4808:
    assume {:verifier.code 0} true;
    $i22 := $zext.i16.i32($i21);
    call {:si_unique_call 918} {:cexpr "claimed"} boogie_si_record_i32($i22);
    goto corral_source_split_4809;

  corral_source_split_4809:
    assume {:verifier.code 0} true;
    $i23 := $ugt.i32($i22, $i7);
    goto corral_source_split_4810;

  corral_source_split_4810:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb20, $bb22;

  $bb22:
    assume !($i23 == 1);
    goto corral_source_split_4827;

  corral_source_split_4827:
    assume {:verifier.code 0} true;
    $i24 := $i1;
    goto $bb23;

  $bb23:
    call $i25, $i26, $i27, $i28, $i24, $i29, $p30, $i31, $i32 := check_period_loop_$bb23($p0, $i2, $i3, $i7, $i25, $i26, $i27, $i28, $i24, $i29, $p30, $i31, $i32);
    goto $bb23_last;

  $bb27:
    assume {:verifier.code 0} true;
    $i29 := $add.i32($i24, $i3);
    call {:si_unique_call 927} {:cexpr "frame"} boogie_si_record_i32($i29);
    goto corral_source_split_4836;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_4837;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    $i31 := $load.i32($M.0, $p30);
    goto corral_source_split_4838;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    $i32 := $ult.i32($i29, $i31);
    goto corral_source_split_4839;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    $i25 := $i29;
    assume true;
    goto $bb24, $bb28;

  $bb28:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i6 := 1;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_4796;

  corral_source_split_4796:
    assume {:verifier.code 0} true;
    $r := $i6;
    return;

  $bb24:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4829;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} $i26 := periodic_usecs($p0, $i25, $i2);
    call {:si_unique_call 925} {:cexpr "tmp___0"} boogie_si_record_i16($i26);
    goto corral_source_split_4830;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    $i27 := $zext.i16.i32($i26);
    call {:si_unique_call 926} {:cexpr "claimed"} boogie_si_record_i32($i27);
    goto corral_source_split_4831;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    $i28 := $ugt.i32($i27, $i7);
    goto corral_source_split_4832;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i24 := $i25;
    goto $bb26_dummy;

  $bb25:
    assume $i28 == 1;
    goto corral_source_split_4834;

  corral_source_split_4834:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb21;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_4805;

  corral_source_split_4805:
    assume {:verifier.code 0} true;
    $i13 := $i1;
    goto $bb7;

  $bb7:
    call $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50 := check_period_loop_$bb7($p0, $i7, $i13, $i14, $i15, $i16, $i17, $p18, $i19, $i20, $i33, $i34, $i35, $i36, $i37, $i38, $i39, $i40, $i41, $i42, $i43, $i44, $i45, $i46, $i47, $i48, $i49, $i50);
    goto $bb7_last;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} $i14 := periodic_usecs($p0, $i13, 0);
    call {:si_unique_call 920} {:cexpr "tmp"} boogie_si_record_i16($i14);
    goto corral_source_split_4814;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    $i15 := $zext.i16.i32($i14);
    call {:si_unique_call 921} {:cexpr "claimed"} boogie_si_record_i32($i15);
    goto corral_source_split_4815;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i32($i15, $i7);
    goto corral_source_split_4816;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb12;

  $bb12:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} $i33 := periodic_usecs($p0, $i13, 1);
    goto corral_source_split_4818;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    $i34 := $zext.i16.i32($i33);
    goto corral_source_split_4819;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    $i35 := $ugt.i32($i34, $i7);
    goto corral_source_split_4820;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} $i36 := periodic_usecs($p0, $i13, 2);
    goto corral_source_split_4841;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32($i36);
    goto corral_source_split_4842;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    $i38 := $ugt.i32($i37, $i7);
    goto corral_source_split_4843;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} $i39 := periodic_usecs($p0, $i13, 3);
    goto corral_source_split_4845;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_4846;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    $i41 := $ugt.i32($i40, $i7);
    goto corral_source_split_4847;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} $i42 := periodic_usecs($p0, $i13, 4);
    goto corral_source_split_4849;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    $i43 := $zext.i16.i32($i42);
    goto corral_source_split_4850;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    $i44 := $ugt.i32($i43, $i7);
    goto corral_source_split_4851;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} $i45 := periodic_usecs($p0, $i13, 5);
    goto corral_source_split_4853;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    $i46 := $zext.i16.i32($i45);
    goto corral_source_split_4854;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    $i47 := $ugt.i32($i46, $i7);
    goto corral_source_split_4855;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} $i48 := periodic_usecs($p0, $i13, 6);
    goto corral_source_split_4857;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    $i49 := $zext.i16.i32($i48);
    goto corral_source_split_4858;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    $i50 := $ugt.i32($i49, $i7);
    goto corral_source_split_4859;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $i17 := $add.i32($i13, 1);
    call {:si_unique_call 923} {:cexpr "frame"} boogie_si_record_i32($i17);
    goto corral_source_split_4822;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_4823;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4824;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    $i20 := $ult.i32($i17, $i19);
    goto corral_source_split_4825;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb16:
    assume $i20 == 1;
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb16_dummy;

  $bb50:
    assume {:verifier.code 0} true;
    assume $i50 == 1;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb46:
    assume {:verifier.code 0} true;
    assume $i47 == 1;
    goto $bb11;

  $bb42:
    assume {:verifier.code 0} true;
    assume $i44 == 1;
    goto $bb11;

  $bb38:
    assume {:verifier.code 0} true;
    assume $i41 == 1;
    goto $bb11;

  $bb34:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb11;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i35 == 1;
    goto $bb11;

  $bb10:
    assume {:verifier.code 0} true;
    assume $i16 == 1;
    goto $bb11;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_4794;

  corral_source_split_4794:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb3;

  $bb26_dummy:
    assume false;
    return;

  $bb23_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb16_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_4812;
}



const periodic_usecs: ref;

axiom periodic_usecs == $sub.ref(0, 314301);

procedure periodic_usecs($p0: ref, $i1: i32, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation periodic_usecs($p0: ref, $i1: i32, $i2: i32) returns ($r: i16)
{
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i1;
  var $i19: i32;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i32;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i32;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i32;
  var $i43: i1;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $i47: i8;
  var $i48: i32;
  var $i49: i32;
  var $i50: i32;
  var $p51: ref;
  var $p52: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i1;
  var $i16: i32;
  var $p17: ref;
  var $p18: ref;
  var $i61: i32;
  var $i15: i32;
  var $i62: i1;
  var $p63: ref;
  var $p65: ref;
  var $p66: ref;
  var $i67: i32;
  var $i68: i32;
  var $i69: i16;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 933} {:cexpr "periodic_usecs:arg:frame"} boogie_si_record_i32($i1);
    call {:si_unique_call 934} {:cexpr "periodic_usecs:arg:uframe"} boogie_si_record_i32($i2);
    goto corral_source_split_4861;

  corral_source_split_4861:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_4862;

  corral_source_split_4862:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_4863;

  corral_source_split_4863:
    assume {:verifier.code 0} true;
    $i5 := $zext.i32.i64($i1);
    goto corral_source_split_4864;

  corral_source_split_4864:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($p4, $mul.ref($i5, 4));
    goto corral_source_split_4865;

  corral_source_split_4865:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_4866;

  corral_source_split_4866:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_4867;

  corral_source_split_4867:
    assume {:verifier.code 0} true;
    $i9 := $zext.i32.i64($i1);
    goto corral_source_split_4868;

  corral_source_split_4868:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($p8, $mul.ref($i9, 8));
    goto corral_source_split_4869;

  corral_source_split_4869:
    assume {:verifier.code 0} true;
    $p11 := $bitcast.ref.ref($p10);
    goto corral_source_split_4870;

  corral_source_split_4870:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_4871;

  corral_source_split_4871:
    assume {:verifier.code 0} true;
    $i13 := $p2i.ref.i64($p12);
    goto corral_source_split_4872;

  corral_source_split_4872:
    assume {:verifier.code 0} true;
    $i14 := $ne.i64($i13, 0);
    goto corral_source_split_4873;

  corral_source_split_4873:
    assume {:verifier.code 0} true;
    $i15 := 0;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i14 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i62 := $ugt.i32($i15, 100);
    goto corral_source_split_4932;

  corral_source_split_4932:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i69 := $trunc.i32.i16($i15);
    goto corral_source_split_4942;

  corral_source_split_4942:
    assume {:verifier.code 0} true;
    $r := $i69;
    return;

  $bb20:
    assume $i62 == 1;
    goto corral_source_split_4934;

  corral_source_split_4934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 937} $p63 := oxu_to_hcd($p0);
    goto corral_source_split_4935;

  corral_source_split_4935:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p63, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_4936;

  corral_source_split_4936:
    assume {:verifier.code 0} true;
    $p66 := $load.ref($M.0, $p65);
    goto corral_source_split_4937;

  corral_source_split_4937:
    assume {:verifier.code 0} true;
    $i67 := $mul.i32($i1, 8);
    goto corral_source_split_4938;

  corral_source_split_4938:
    assume {:verifier.code 0} true;
    $i68 := $add.i32($i67, $i2);
    goto corral_source_split_4939;

  corral_source_split_4939:
    assume {:verifier.code 0} true;
    call {:si_unique_call 938} dev_err.ref.ref.i32.i32($p66, .str.13, $i68, $i15);
    goto corral_source_split_4940;

  corral_source_split_4940:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_4875;

  corral_source_split_4875:
    assume {:verifier.code 0} true;
    $i16, $p17, $p18 := 0, $p10, $p6;
    goto $bb4;

  $bb4:
    call $i19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $i32, $i33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $i16, $p17, $p18, $i61 := periodic_usecs_loop_$bb4($i2, $i19, $i20, $i21, $p22, $p23, $p24, $i25, $i26, $i27, $i28, $p29, $p30, $p31, $i32, $i33, $i34, $i35, $p36, $p37, $p38, $i39, $i40, $i41, $i42, $i43, $p44, $p45, $p46, $i47, $i48, $i49, $i50, $p51, $p52, $p54, $p55, $p56, $p57, $p58, $i59, $i60, $i16, $p17, $p18, $i61);
    goto $bb4_last;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i19 := $load.i32($M.0, $p18);
    goto corral_source_split_4879;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i19, 6);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $i21 := $eq.i32($i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p17);
    goto corral_source_split_4883;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_4884;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4885;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_4886;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    $i26 := $shl.i32(1, $i2);
    goto corral_source_split_4887;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i25, $i26);
    goto corral_source_split_4888;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_4889;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    $i35 := $i16;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4899;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p17);
    goto corral_source_split_4900;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_4901;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4902;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_4903;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    $i40 := $add.i32($i2, 8);
    goto corral_source_split_4904;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    $i41 := $shl.i32(1, $i40);
    goto corral_source_split_4905;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i39, $i41);
    goto corral_source_split_4906;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i42, 0);
    goto corral_source_split_4907;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    $i50 := $i35;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4917;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p17);
    goto corral_source_split_4918;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    $p52 := $load.ref($M.0, $p51);
    goto corral_source_split_4919;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    goto corral_source_split_4920;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    $p54 := $bitcast.ref.ref($p17);
    goto corral_source_split_4921;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    $p55 := $load.ref($M.0, $p54);
    goto corral_source_split_4922;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p55, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4923;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p57 := $bitcast.ref.ref($p56);
    goto corral_source_split_4925;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    $p58 := $load.ref($M.0, $p57);
    goto corral_source_split_4926;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    $i59 := $p2i.ref.i64($p58);
    goto corral_source_split_4927;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    $i60 := $ne.i64($i59, 0);
    goto corral_source_split_4928;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    $i61 := $i50;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_4930;

  corral_source_split_4930:
    assume {:verifier.code 0} true;
    $i15 := $i61;
    goto $bb3;

  $bb17:
    assume $i60 == 1;
    assume {:verifier.code 0} true;
    $i16, $p17, $p18 := $i50, $p56, $p52;
    goto $bb17_dummy;

  $bb13:
    assume $i43 == 1;
    goto corral_source_split_4909;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    $p44 := $bitcast.ref.ref($p17);
    goto corral_source_split_4910;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_4911;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_4912;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    $i47 := $load.i8($M.0, $p46);
    goto corral_source_split_4913;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    $i48 := $zext.i8.i32($i47);
    goto corral_source_split_4914;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    $i49 := $add.i32($i48, $i35);
    call {:si_unique_call 936} {:cexpr "usecs"} boogie_si_record_i32($i49);
    goto corral_source_split_4915;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    $i50 := $i49;
    goto $bb15;

  $bb10:
    assume $i28 == 1;
    goto corral_source_split_4891;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p17);
    goto corral_source_split_4892;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_4893;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p30, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_4894;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_4895;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_4896;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    $i34 := $add.i32($i33, $i16);
    call {:si_unique_call 935} {:cexpr "usecs"} boogie_si_record_i32($i34);
    goto corral_source_split_4897;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    $i35 := $i34;
    goto $bb12;

  $bb7:
    assume $i21 == 1;
    goto corral_source_split_4881;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb17_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4877;
}



const qh_update: ref;

axiom qh_update == $sub.ref(0, 315333);

procedure qh_update($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation qh_update($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i32;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i32;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i32;
  var $i37: i1;
  var $i38: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i32;
  var $p45: ref;
  var $i46: i64;
  var $p47: ref;
  var $p48: ref;
  var $p50: ref;
  var $i51: i32;
  var $i52: i32;
  var $i53: i32;
  var $i54: i32;
  var $i55: i32;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_4944;

  corral_source_split_4944:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_4945;

  corral_source_split_4945:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_4946;

  corral_source_split_4946:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_4947;

  corral_source_split_4947:
    assume {:verifier.code 0} true;
    $i6 := $ne.i32($i5, 3);
    goto corral_source_split_4948;

  corral_source_split_4948:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_4949;

  corral_source_split_4949:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_4950;

  corral_source_split_4950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 939} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 940} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_4951;

  corral_source_split_4951:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_4952;

  corral_source_split_4952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_4956;

  corral_source_split_4956:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_4957;

  corral_source_split_4957:
    assume {:verifier.code 0} true;
    $i13 := $trunc.i64.i32($i12);
    goto corral_source_split_4958;

  corral_source_split_4958:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_4959;

  corral_source_split_4959:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p14, $i13);
    goto corral_source_split_4960;

  corral_source_split_4960:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_4961;

  corral_source_split_4961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p15, 1);
    goto corral_source_split_4962;

  corral_source_split_4962:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_4963;

  corral_source_split_4963:
    assume {:verifier.code 0} true;
    $i17 := $load.i32($M.0, $p16);
    goto corral_source_split_4964;

  corral_source_split_4964:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 16384);
    goto corral_source_split_4965;

  corral_source_split_4965:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 0);
    goto corral_source_split_4966;

  corral_source_split_4966:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    call {:si_unique_call 948} devirtbounce.6(0);
    goto corral_source_split_5013;

  corral_source_split_5013:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_5014;

  corral_source_split_5014:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_5015;

  corral_source_split_5015:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i63, $sub.i32(0, 2147483647));
    goto corral_source_split_5016;

  corral_source_split_5016:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_5017;

  corral_source_split_5017:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p65, $i64);
    goto corral_source_split_5018;

  corral_source_split_5018:
    assume {:verifier.code 0} true;
    return;

  $bb5:
    assume $i19 == 1;
    goto corral_source_split_4968;

  corral_source_split_4968:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_4969;

  corral_source_split_4969:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_4970;

  corral_source_split_4970:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 256);
    goto corral_source_split_4971;

  corral_source_split_4971:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_4972;

  corral_source_split_4972:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    call {:si_unique_call 942} {:cexpr "is_out"} boogie_si_record_i32($i24);
    goto corral_source_split_4973;

  corral_source_split_4973:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_4974;

  corral_source_split_4974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 943} $i26 := __le32_to_cpup($p25);
    call {:si_unique_call 944} {:cexpr "tmp___0"} boogie_si_record_i32($i26);
    goto corral_source_split_4975;

  corral_source_split_4975:
    assume {:verifier.code 0} true;
    $i27 := $lshr.i32($i26, 8);
    goto corral_source_split_4976;

  corral_source_split_4976:
    assume {:verifier.code 0} true;
    $i28 := $and.i32($i27, 15);
    call {:si_unique_call 945} {:cexpr "epnum"} boogie_si_record_i32($i28);
    goto corral_source_split_4977;

  corral_source_split_4977:
    assume {:verifier.code 0} true;
    $i29 := $zext.i32.i64($i24);
    goto corral_source_split_4978;

  corral_source_split_4978:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_4979;

  corral_source_split_4979:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_4980;

  corral_source_split_4980:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 2040)), $mul.ref(44, 1)), $mul.ref($i29, 4));
    goto corral_source_split_4981;

  corral_source_split_4981:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_4982;

  corral_source_split_4982:
    assume {:verifier.code 0} true;
    $i35 := $lshr.i32($i34, $i28);
    goto corral_source_split_4983;

  corral_source_split_4983:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 1);
    goto corral_source_split_4984;

  corral_source_split_4984:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_4985;

  corral_source_split_4985:
    assume {:verifier.code 0} true;
    $i38 := $zext.i1.i32($i37);
    goto corral_source_split_4986;

  corral_source_split_4986:
    assume {:verifier.code 0} true;
    $i39 := $sext.i32.i64($i38);
    goto corral_source_split_4987;

  corral_source_split_4987:
    assume {:verifier.code 0} true;
    call {:si_unique_call 946} $i40 := ldv__builtin_expect($i39, 0);
    call {:si_unique_call 947} {:cexpr "tmp___1"} boogie_si_record_i64($i40);
    goto corral_source_split_4988;

  corral_source_split_4988:
    assume {:verifier.code 0} true;
    $i41 := $ne.i64($i40, 0);
    goto corral_source_split_4989;

  corral_source_split_4989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb7:
    assume $i41 == 1;
    goto corral_source_split_4991;

  corral_source_split_4991:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4992;

  corral_source_split_4992:
    assume {:verifier.code 0} true;
    $i43 := $load.i32($M.0, $p42);
    goto corral_source_split_4993;

  corral_source_split_4993:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i43, 2147483647);
    goto corral_source_split_4994;

  corral_source_split_4994:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_4995;

  corral_source_split_4995:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p45, $i44);
    goto corral_source_split_4996;

  corral_source_split_4996:
    assume {:verifier.code 0} true;
    $i46 := $zext.i32.i64($i24);
    goto corral_source_split_4997;

  corral_source_split_4997:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_4998;

  corral_source_split_4998:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_4999;

  corral_source_split_4999:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p48, $mul.ref(0, 2040)), $mul.ref(44, 1)), $mul.ref($i46, 4));
    goto corral_source_split_5000;

  corral_source_split_5000:
    assume {:verifier.code 0} true;
    $i51 := $load.i32($M.0, $p50);
    goto corral_source_split_5001;

  corral_source_split_5001:
    assume {:verifier.code 0} true;
    $i52 := $shl.i32(1, $i28);
    goto corral_source_split_5002;

  corral_source_split_5002:
    assume {:verifier.code 0} true;
    $i53 := $xor.i32($i52, $sub.i32(0, 1));
    goto corral_source_split_5003;

  corral_source_split_5003:
    assume {:verifier.code 0} true;
    $i54 := $and.i32($i51, $i53);
    goto corral_source_split_5004;

  corral_source_split_5004:
    assume {:verifier.code 0} true;
    $i55 := $shl.i32(1, $i28);
    goto corral_source_split_5005;

  corral_source_split_5005:
    assume {:verifier.code 0} true;
    $i56 := $or.i32($i54, $i55);
    goto corral_source_split_5006;

  corral_source_split_5006:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i24);
    goto corral_source_split_5007;

  corral_source_split_5007:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_5008;

  corral_source_split_5008:
    assume {:verifier.code 0} true;
    $p59 := $load.ref($M.0, $p58);
    goto corral_source_split_5009;

  corral_source_split_5009:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($add.ref($p59, $mul.ref(0, 2040)), $mul.ref(44, 1)), $mul.ref($i57, 4));
    goto corral_source_split_5010;

  corral_source_split_5010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p61, $i56);
    goto corral_source_split_5011;

  corral_source_split_5011:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i10 == 1;
    call {:si_unique_call 941} devirtbounce.3(0, .str, 824, 12);
    goto corral_source_split_4954;

  corral_source_split_4954:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    call qh_update_loop_$bb3();
    goto $bb3_last;

  $bb3_dummy:
    assume false;
    return;

  $bb3_last:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;
}



const usb_hcd_giveback_urb: ref;

axiom usb_hcd_giveback_urb == $sub.ref(0, 316365);

procedure usb_hcd_giveback_urb($p0: ref, $p1: ref, $i2: i32);
  free requires assertsPassed;



implementation usb_hcd_giveback_urb($p0: ref, $p1: ref, $i2: i32)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 949} {:cexpr "usb_hcd_giveback_urb:arg:arg2"} boogie_si_record_i32($i2);
    goto corral_source_split_5020;

  corral_source_split_5020:
    assume {:verifier.code 0} true;
    return;
}



const kref_get: ref;

axiom kref_get == $sub.ref(0, 317397);

procedure kref_get($p0: ref);
  free requires assertsPassed;



implementation kref_get($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i32;
  var $i13: i1;
  var $i14: i32;
  var $i15: i64;
  var $i16: i64;
  var $i17: i1;
  var $i18: i1;
  var $i19: i32;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var vslice_dummy_var_95: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5022;

  corral_source_split_5022:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_5023;

  corral_source_split_5023:
    assume {:verifier.code 0} true;
    call {:si_unique_call 950} $i2 := atomic_add_return(1, $p1);
    call {:si_unique_call 951} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5024;

  corral_source_split_5024:
    assume {:verifier.code 0} true;
    $i3 := $sle.i32($i2, 1);
    goto corral_source_split_5025;

  corral_source_split_5025:
    assume {:verifier.code 0} true;
    $i4 := $zext.i1.i32($i3);
    call {:si_unique_call 952} {:cexpr "__ret_warn_once"} boogie_si_record_i32($i4);
    goto corral_source_split_5026;

  corral_source_split_5026:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i4, 0);
    goto corral_source_split_5027;

  corral_source_split_5027:
    assume {:verifier.code 0} true;
    $i6 := $zext.i1.i32($i5);
    goto corral_source_split_5028;

  corral_source_split_5028:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_5029;

  corral_source_split_5029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 953} $i8 := ldv__builtin_expect($i7, 0);
    call {:si_unique_call 954} {:cexpr "tmp___2"} boogie_si_record_i64($i8);
    goto corral_source_split_5030;

  corral_source_split_5030:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i8, 0);
    goto corral_source_split_5031;

  corral_source_split_5031:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i4, 0);
    goto corral_source_split_5054;

  corral_source_split_5054:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5055;

  corral_source_split_5055:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5056;

  corral_source_split_5056:
    assume {:verifier.code 0} true;
    call {:si_unique_call 961} vslice_dummy_var_95 := ldv__builtin_expect($i25, 0);
    goto corral_source_split_5057;

  corral_source_split_5057:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_5033;

  corral_source_split_5033:
    assume {:verifier.code 0} true;
    $i10 := $trunc.i8.i1(1);
    goto corral_source_split_5034;

  corral_source_split_5034:
    assume {:verifier.code 0} true;
    $i11 := $xor.i1($i10, 1);
    goto corral_source_split_5035;

  corral_source_split_5035:
    assume {:verifier.code 0} true;
    $i12 := $zext.i1.i32($i11);
    call {:si_unique_call 955} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i12);
    goto corral_source_split_5036;

  corral_source_split_5036:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_5037;

  corral_source_split_5037:
    assume {:verifier.code 0} true;
    $i14 := $zext.i1.i32($i13);
    goto corral_source_split_5038;

  corral_source_split_5038:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_5039;

  corral_source_split_5039:
    assume {:verifier.code 0} true;
    call {:si_unique_call 956} $i16 := ldv__builtin_expect($i15, 0);
    call {:si_unique_call 957} {:cexpr "tmp___0"} boogie_si_record_i64($i16);
    goto corral_source_split_5040;

  corral_source_split_5040:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5041;

  corral_source_split_5041:
    assume {:verifier.code 0} true;
    assume {:branchcond $i17} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i17 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i12, 0);
    goto corral_source_split_5046;

  corral_source_split_5046:
    assume {:verifier.code 0} true;
    $i19 := $zext.i1.i32($i18);
    goto corral_source_split_5047;

  corral_source_split_5047:
    assume {:verifier.code 0} true;
    $i20 := $sext.i32.i64($i19);
    goto corral_source_split_5048;

  corral_source_split_5048:
    assume {:verifier.code 0} true;
    call {:si_unique_call 959} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 960} {:cexpr "tmp___1"} boogie_si_record_i64($i21);
    goto corral_source_split_5049;

  corral_source_split_5049:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_5050;

  corral_source_split_5050:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb6:
    assume $i22 == 1;
    goto corral_source_split_5052;

  corral_source_split_5052:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb3:
    assume $i17 == 1;
    goto corral_source_split_5043;

  corral_source_split_5043:
    assume {:verifier.code 0} true;
    call {:si_unique_call 958} warn_slowpath_null(.str.1, 47);
    goto corral_source_split_5044;

  corral_source_split_5044:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const atomic_add_return: ref;

axiom atomic_add_return == $sub.ref(0, 318429);

procedure atomic_add_return($i0: i32, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation atomic_add_return($i0: i32, $p1: ref) returns ($r: i32)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 962} {:cexpr "atomic_add_return:arg:i"} boogie_si_record_i32($i0);
    call {:si_unique_call 963} {:cexpr "atomic_add_return:arg:__ret"} boogie_si_record_i32($i0);
    goto corral_source_split_5059;

  corral_source_split_5059:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 4)), $mul.ref(0, 1));
    call {:si_unique_call 964} $i3 := devirtbounce.10(0, $p2, $i0, $p2);
    call {:si_unique_call 965} {:cexpr "__ret"} boogie_si_record_i32($i3);
    goto corral_source_split_5060;

  corral_source_split_5060:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $add.i32($i3, $i0);
    goto corral_source_split_5062;

  corral_source_split_5062:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const qh_link_async: ref;

axiom qh_link_async == $sub.ref(0, 319461);

procedure qh_link_async($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.60, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation qh_link_async($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $i4: i32;
  var $i5: i32;
  var $i6: i32;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i1;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i32;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var cmdloc_dummy_var_38: [ref]i8;
  var cmdloc_dummy_var_39: [ref]i8;
  var cmdloc_dummy_var_40: [ref]i8;
  var vslice_dummy_var_96: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5064;

  corral_source_split_5064:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_5065;

  corral_source_split_5065:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.0, $p2);
    goto corral_source_split_5066;

  corral_source_split_5066:
    assume {:verifier.code 0} true;
    $i4 := $trunc.i64.i32($i3);
    goto corral_source_split_5067;

  corral_source_split_5067:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, $sub.i32(0, 32));
    goto corral_source_split_5068;

  corral_source_split_5068:
    assume {:verifier.code 0} true;
    $i6 := $or.i32($i5, 2);
    call {:si_unique_call 966} {:cexpr "dma"} boogie_si_record_i32($i6);
    goto corral_source_split_5069;

  corral_source_split_5069:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_5070;

  corral_source_split_5070:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_5071;

  corral_source_split_5071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 967} timer_action_done($p0, 3);
    goto corral_source_split_5072;

  corral_source_split_5072:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_5073;

  corral_source_split_5073:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_5074;

  corral_source_split_5074:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5075;

  corral_source_split_5075:
    assume {:verifier.code 0} true;
    $i12 := $p2i.ref.i64($p11);
    goto corral_source_split_5076;

  corral_source_split_5076:
    assume {:verifier.code 0} true;
    $i13 := $eq.i64($i12, 0);
    goto corral_source_split_5077;

  corral_source_split_5077:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_5104;

  corral_source_split_5104:
    assume {:verifier.code 0} true;
    $i34 := $load.i8($M.0, $p33);
    goto corral_source_split_5105;

  corral_source_split_5105:
    assume {:verifier.code 0} true;
    $i35 := $zext.i8.i32($i34);
    goto corral_source_split_5106;

  corral_source_split_5106:
    assume {:verifier.code 0} true;
    $i36 := $eq.i32($i35, 3);
    goto corral_source_split_5107;

  corral_source_split_5107:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i36 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_5112;

  corral_source_split_5112:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_5113;

  corral_source_split_5113:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p37);
    goto corral_source_split_5114;

  corral_source_split_5114:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p38);
    goto corral_source_split_5115;

  corral_source_split_5115:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_38 := $M.0;
    cmdloc_dummy_var_39 := $M.0;
    call {:si_unique_call 975} cmdloc_dummy_var_40 := $memcpy.i8(cmdloc_dummy_var_38, cmdloc_dummy_var_39, $p39, $p40, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_40;
    goto corral_source_split_5116;

  corral_source_split_5116:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5117;

  corral_source_split_5117:
    assume {:verifier.code 0} true;
    $i42 := $load.i32($M.0, $p41);
    goto corral_source_split_5118;

  corral_source_split_5118:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5119;

  corral_source_split_5119:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p43, $i42);
    call {:si_unique_call 976} devirtbounce.6(0);
    goto corral_source_split_5120;

  corral_source_split_5120:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_5121;

  corral_source_split_5121:
    assume {:verifier.code 0} true;
    $p45 := $bitcast.ref.ref($p44);
    goto corral_source_split_5122;

  corral_source_split_5122:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p45, $p1);
    goto corral_source_split_5123;

  corral_source_split_5123:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p8, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_5124;

  corral_source_split_5124:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i6);
    goto corral_source_split_5125;

  corral_source_split_5125:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p1, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_5126;

  corral_source_split_5126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p47, 1);
    goto corral_source_split_5127;

  corral_source_split_5127:
    assume {:verifier.code 0} true;
    return;

  $bb7:
    assume $i36 == 1;
    goto corral_source_split_5109;

  corral_source_split_5109:
    assume {:verifier.code 0} true;
    call {:si_unique_call 974} qh_refresh($p0, $p1);
    goto corral_source_split_5110;

  corral_source_split_5110:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i13 == 1;
    goto corral_source_split_5079;

  corral_source_split_5079:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_5080;

  corral_source_split_5080:
    assume {:verifier.code 0} true;
    $p15 := $load.ref($M.0, $p14);
    goto corral_source_split_5081;

  corral_source_split_5081:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p15, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_5082;

  corral_source_split_5082:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_5083;

  corral_source_split_5083:
    assume {:verifier.code 0} true;
    call {:si_unique_call 968} $i18 := readl($p17);
    goto SeqInstr_343, SeqInstr_344;

  SeqInstr_344:
    assume assertsPassed;
    goto SeqInstr_345;

  SeqInstr_345:
    call {:si_unique_call 969} {:cexpr "tmp"} boogie_si_record_i32($i18);
    goto corral_source_split_5084;

  corral_source_split_5084:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 32);
    goto corral_source_split_5085;

  corral_source_split_5085:
    assume {:verifier.code 0} true;
    $i20 := $eq.i32($i19, 0);
    goto corral_source_split_5086;

  corral_source_split_5086:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i20 == 1;
    goto corral_source_split_5088;

  corral_source_split_5088:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_5089;

  corral_source_split_5089:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5090;

  corral_source_split_5090:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_5091;

  corral_source_split_5091:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5092;

  corral_source_split_5092:
    assume {:verifier.code 0} true;
    call {:si_unique_call 970} vslice_dummy_var_96 := handshake($p0, $p24, 32768, 0, 150);
    goto SeqInstr_346, SeqInstr_347;

  SeqInstr_347:
    assume assertsPassed;
    goto SeqInstr_348;

  SeqInstr_348:
    goto corral_source_split_5093;

  corral_source_split_5093:
    assume {:verifier.code 0} true;
    $i26 := $or.i32($i18, 33);
    call {:si_unique_call 971} {:cexpr "cmd"} boogie_si_record_i32($i26);
    goto corral_source_split_5094;

  corral_source_split_5094:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_5095;

  corral_source_split_5095:
    assume {:verifier.code 0} true;
    $p28 := $load.ref($M.0, $p27);
    goto corral_source_split_5096;

  corral_source_split_5096:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p28, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_5097;

  corral_source_split_5097:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p29);
    goto corral_source_split_5098;

  corral_source_split_5098:
    assume {:verifier.code 0} true;
    call {:si_unique_call 972} writel($i26, $p30);
    goto corral_source_split_5099;

  corral_source_split_5099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 973} $p31 := oxu_to_hcd($p0);
    goto corral_source_split_5100;

  corral_source_split_5100:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p31, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_5101;

  corral_source_split_5101:
    assume {:verifier.code 0} true;
    $M.60 := $store.i32($M.60, $p32, 1);
    goto corral_source_split_5102;

  corral_source_split_5102:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_346:
    assume !assertsPassed;
    return;

  SeqInstr_343:
    assume !assertsPassed;
    return;
}



const clear_bit: ref;

axiom clear_bit == $sub.ref(0, 320493);

procedure clear_bit($i0: i64, $p1: ref);
  free requires assertsPassed;



implementation clear_bit($i0: i64, $p1: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 977} {:cexpr "clear_bit:arg:nr"} boogie_si_record_i64($i0);
    call {:si_unique_call 978} devirtbounce.4(0, $p1, $i0, $p1);
    goto corral_source_split_5129;

  corral_source_split_5129:
    assume {:verifier.code 0} true;
    return;
}



const ehci_hub_descriptor: ref;

axiom ehci_hub_descriptor == $sub.ref(0, 321525);

procedure ehci_hub_descriptor($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation ehci_hub_descriptor($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i32;
  var $i4: i32;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i8;
  var $p9: ref;
  var $i10: i32;
  var $i11: i16;
  var $i12: i32;
  var $i13: i32;
  var $i14: i16;
  var $i15: i8;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i32;
  var $i35: i32;
  var $i36: i1;
  var $i37: i32;
  var $i38: i32;
  var $i39: i16;
  var $i41: i32;
  var $i42: i32;
  var $i43: i16;
  var $i40: i16;
  var $p44: ref;
  var cmdloc_dummy_var_41: [ref]i8;
  var cmdloc_dummy_var_42: [ref]i8;
  var cmdloc_dummy_var_43: [ref]i8;
  var cmdloc_dummy_var_44: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5131;

  corral_source_split_5131:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_5132;

  corral_source_split_5132:
    assume {:verifier.code 0} true;
    $i3 := $load.i32($M.0, $p2);
    goto corral_source_split_5133;

  corral_source_split_5133:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    call {:si_unique_call 979} {:cexpr "ports"} boogie_si_record_i32($i4);
    goto corral_source_split_5134;

  corral_source_split_5134:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(1, 1));
    goto corral_source_split_5135;

  corral_source_split_5135:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p5, 41);
    goto corral_source_split_5136;

  corral_source_split_5136:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(6, 1));
    goto corral_source_split_5137;

  corral_source_split_5137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p6, 10);
    goto corral_source_split_5138;

  corral_source_split_5138:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(7, 1));
    goto corral_source_split_5139;

  corral_source_split_5139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p7, 0);
    goto corral_source_split_5140;

  corral_source_split_5140:
    assume {:verifier.code 0} true;
    $i8 := $trunc.i32.i8($i4);
    goto corral_source_split_5141;

  corral_source_split_5141:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(2, 1));
    goto corral_source_split_5142;

  corral_source_split_5142:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p9, $i8);
    goto corral_source_split_5143;

  corral_source_split_5143:
    assume {:verifier.code 0} true;
    $i10 := $sdiv.i32($i4, 8);
    goto corral_source_split_5144;

  corral_source_split_5144:
    assume {:verifier.code 0} true;
    $i11 := $trunc.i32.i16($i10);
    goto corral_source_split_5145;

  corral_source_split_5145:
    assume {:verifier.code 0} true;
    $i12 := $zext.i16.i32($i11);
    goto corral_source_split_5146;

  corral_source_split_5146:
    assume {:verifier.code 0} true;
    $i13 := $add.i32($i12, 1);
    goto corral_source_split_5147;

  corral_source_split_5147:
    assume {:verifier.code 0} true;
    $i14 := $trunc.i32.i16($i13);
    call {:si_unique_call 980} {:cexpr "temp"} boogie_si_record_i16($i14);
    goto corral_source_split_5148;

  corral_source_split_5148:
    assume {:verifier.code 0} true;
    $i15 := $trunc.i16.i8($i14);
    goto corral_source_split_5149;

  corral_source_split_5149:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i32($i15);
    goto corral_source_split_5150;

  corral_source_split_5150:
    assume {:verifier.code 0} true;
    $i17 := $mul.i32($i16, 2);
    goto corral_source_split_5151;

  corral_source_split_5151:
    assume {:verifier.code 0} true;
    $i18 := $add.i32($i17, 7);
    goto corral_source_split_5152;

  corral_source_split_5152:
    assume {:verifier.code 0} true;
    $i19 := $trunc.i32.i8($i18);
    goto corral_source_split_5153;

  corral_source_split_5153:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5154;

  corral_source_split_5154:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p20, $i19);
    goto corral_source_split_5155;

  corral_source_split_5155:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5156;

  corral_source_split_5156:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p21);
    goto corral_source_split_5157;

  corral_source_split_5157:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5158;

  corral_source_split_5158:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p23);
    goto corral_source_split_5159;

  corral_source_split_5159:
    assume {:verifier.code 0} true;
    $i25 := $zext.i16.i64($i14);
    goto corral_source_split_5160;

  corral_source_split_5160:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_41 := $M.0;
    call {:si_unique_call 981} cmdloc_dummy_var_42 := $memset.i8(cmdloc_dummy_var_41, $p24, 0, $i25, $zext.i32.i64(2), 0 == 1);
    $M.0 := cmdloc_dummy_var_42;
    goto corral_source_split_5161;

  corral_source_split_5161:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5162;

  corral_source_split_5162:
    assume {:verifier.code 0} true;
    $p27 := $bitcast.ref.ref($p26);
    goto corral_source_split_5163;

  corral_source_split_5163:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p27, $mul.ref(0, 8)), $mul.ref(0, 1));
    goto corral_source_split_5164;

  corral_source_split_5164:
    assume {:verifier.code 0} true;
    $p29 := $bitcast.ref.ref($p28);
    goto corral_source_split_5165;

  corral_source_split_5165:
    assume {:verifier.code 0} true;
    $i30 := $zext.i16.i64($i14);
    goto corral_source_split_5166;

  corral_source_split_5166:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($p29, $mul.ref($i30, 1));
    goto corral_source_split_5167;

  corral_source_split_5167:
    assume {:verifier.code 0} true;
    $i32 := $zext.i16.i64($i14);
    goto corral_source_split_5168;

  corral_source_split_5168:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_43 := $M.0;
    call {:si_unique_call 982} cmdloc_dummy_var_44 := $memset.i8(cmdloc_dummy_var_43, $p31, $sub.i8(0, 1), $i32, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_44;
    goto corral_source_split_5169;

  corral_source_split_5169:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_5170;

  corral_source_split_5170:
    assume {:verifier.code 0} true;
    $i34 := $load.i32($M.0, $p33);
    goto corral_source_split_5171;

  corral_source_split_5171:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i34, 16);
    goto corral_source_split_5172;

  corral_source_split_5172:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5173;

  corral_source_split_5173:
    assume {:verifier.code 0} true;
    assume {:branchcond $i36} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i36 == 1);
    goto corral_source_split_5180;

  corral_source_split_5180:
    assume {:verifier.code 0} true;
    $i41 := $zext.i16.i32(8);
    goto corral_source_split_5181;

  corral_source_split_5181:
    assume {:verifier.code 0} true;
    $i42 := $or.i32($i41, 2);
    goto corral_source_split_5182;

  corral_source_split_5182:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i32.i16($i42);
    call {:si_unique_call 984} {:cexpr "temp"} boogie_si_record_i16($i43);
    assume {:verifier.code 0} true;
    $i40 := $i43;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5184;

  corral_source_split_5184:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(4, 1));
    goto corral_source_split_5185;

  corral_source_split_5185:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p44, $i40);
    goto corral_source_split_5186;

  corral_source_split_5186:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i36 == 1;
    goto corral_source_split_5175;

  corral_source_split_5175:
    assume {:verifier.code 0} true;
    $i37 := $zext.i16.i32(8);
    goto corral_source_split_5176;

  corral_source_split_5176:
    assume {:verifier.code 0} true;
    $i38 := $or.i32($i37, 1);
    goto corral_source_split_5177;

  corral_source_split_5177:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i38);
    call {:si_unique_call 983} {:cexpr "temp"} boogie_si_record_i16($i39);
    goto corral_source_split_5178;

  corral_source_split_5178:
    assume {:verifier.code 0} true;
    $i40 := $i39;
    goto $bb3;
}



const llvm.memset.p0i8.i64: ref;

axiom llvm.memset.p0i8.i64 == $sub.ref(0, 322557);

procedure llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i32, $i4: i1);



const ldv_mod_timer_28: ref;

axiom ldv_mod_timer_28 == $sub.ref(0, 323589);

procedure ldv_mod_timer_28($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33;



implementation ldv_mod_timer_28($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 985} {:cexpr "ldv_mod_timer_28:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_5188;

  corral_source_split_5188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 986} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 987} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_5189;

  corral_source_split_5189:
    assume {:verifier.code 0} true;
    call {:si_unique_call 988} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_5190;

  corral_source_split_5190:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const check_reset_complete: ref;

axiom check_reset_complete == $sub.ref(0, 324621);

procedure check_reset_complete($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation check_reset_complete($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $i8: i64;
  var $p10: ref;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $i19: i24;
  var $i20: i24;
  var $i21: i24;
  var $p22: ref;
  var $p23: ref;
  var $i24: i8;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i1;
  var $p29: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i24;
  var $i41: i24;
  var $i42: i24;
  var $p43: ref;
  var $p44: ref;
  var $i45: i8;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i1;
  var $p50: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 989} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 990} $p5 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 991} {:cexpr "check_reset_complete:arg:index"} boogie_si_record_i32($i1);
    call {:si_unique_call 992} {:cexpr "check_reset_complete:arg:port_status"} boogie_si_record_i32($i3);
    goto corral_source_split_5192;

  corral_source_split_5192:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i3, 1);
    goto corral_source_split_5193;

  corral_source_split_5193:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_5194;

  corral_source_split_5194:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i3, 4);
    goto corral_source_split_5201;

  corral_source_split_5201:
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i11, 0);
    goto corral_source_split_5202;

  corral_source_split_5202:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i12 == 1);
    goto corral_source_split_5228;

  corral_source_split_5228:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5229;

  corral_source_split_5229:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p34, .str.2);
    goto corral_source_split_5230;

  corral_source_split_5230:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5231;

  corral_source_split_5231:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p35, .str.94);
    goto corral_source_split_5232;

  corral_source_split_5232:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5233;

  corral_source_split_5233:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p36, .str);
    goto corral_source_split_5234;

  corral_source_split_5234:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5235;

  corral_source_split_5235:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p37, .str.96);
    goto corral_source_split_5236;

  corral_source_split_5236:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5237;

  corral_source_split_5237:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_5238;

  corral_source_split_5238:
    assume {:verifier.code 0} true;
    $i40 := $load.i24($M.6, $p39);
    goto corral_source_split_5239;

  corral_source_split_5239:
    assume {:verifier.code 0} true;
    $i41 := $and.i24($i40, $sub.i24(0, 262144));
    goto corral_source_split_5240;

  corral_source_split_5240:
    assume {:verifier.code 0} true;
    $i42 := $or.i24($i41, 437);
    goto corral_source_split_5241;

  corral_source_split_5241:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p39, $i42);
    goto corral_source_split_5242;

  corral_source_split_5242:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5243;

  corral_source_split_5243:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p43, 0);
    goto corral_source_split_5244;

  corral_source_split_5244:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5245;

  corral_source_split_5245:
    assume {:verifier.code 0} true;
    $i45 := $load.i8($M.7, $p44);
    goto corral_source_split_5246;

  corral_source_split_5246:
    assume {:verifier.code 0} true;
    $i46 := $zext.i8.i64($i45);
    goto corral_source_split_5247;

  corral_source_split_5247:
    assume {:verifier.code 0} true;
    $i47 := $and.i64($i46, 1);
    goto corral_source_split_5248;

  corral_source_split_5248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 995} $i48 := ldv__builtin_expect($i47, 0);
    call {:si_unique_call 996} {:cexpr "tmp___2"} boogie_si_record_i64($i48);
    goto corral_source_split_5249;

  corral_source_split_5249:
    assume {:verifier.code 0} true;
    $i49 := $ne.i64($i48, 0);
    goto corral_source_split_5250;

  corral_source_split_5250:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i49 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;

  $bb10:
    assume $i49 == 1;
    goto corral_source_split_5259;

  corral_source_split_5259:
    assume {:verifier.code 0} true;
    call {:si_unique_call 999} $p50 := oxu_to_hcd($p0);
    goto corral_source_split_5260;

  corral_source_split_5260:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p50, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5261;

  corral_source_split_5261:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_5262;

  corral_source_split_5262:
    assume {:verifier.code 0} true;
    $i54 := $add.i32($i1, 1);
    goto corral_source_split_5263;

  corral_source_split_5263:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1000} __dynamic_dev_dbg.ref.ref.ref.i32($p5, $p53, .str.96, $i54);
    goto corral_source_split_5264;

  corral_source_split_5264:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_5204;

  corral_source_split_5204:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5205;

  corral_source_split_5205:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p13, .str.2);
    goto corral_source_split_5206;

  corral_source_split_5206:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5207;

  corral_source_split_5207:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p14, .str.94);
    goto corral_source_split_5208;

  corral_source_split_5208:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5209;

  corral_source_split_5209:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p15, .str);
    goto corral_source_split_5210;

  corral_source_split_5210:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5211;

  corral_source_split_5211:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p16, .str.95);
    goto corral_source_split_5212;

  corral_source_split_5212:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5213;

  corral_source_split_5213:
    assume {:verifier.code 0} true;
    $p18 := $bitcast.ref.ref($p17);
    goto corral_source_split_5214;

  corral_source_split_5214:
    assume {:verifier.code 0} true;
    $i19 := $load.i24($M.6, $p18);
    goto corral_source_split_5215;

  corral_source_split_5215:
    assume {:verifier.code 0} true;
    $i20 := $and.i24($i19, $sub.i24(0, 262144));
    goto corral_source_split_5216;

  corral_source_split_5216:
    assume {:verifier.code 0} true;
    $i21 := $or.i24($i20, 434);
    goto corral_source_split_5217;

  corral_source_split_5217:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p18, $i21);
    goto corral_source_split_5218;

  corral_source_split_5218:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5219;

  corral_source_split_5219:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p22, 0);
    goto corral_source_split_5220;

  corral_source_split_5220:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5221;

  corral_source_split_5221:
    assume {:verifier.code 0} true;
    $i24 := $load.i8($M.7, $p23);
    goto corral_source_split_5222;

  corral_source_split_5222:
    assume {:verifier.code 0} true;
    $i25 := $zext.i8.i64($i24);
    goto corral_source_split_5223;

  corral_source_split_5223:
    assume {:verifier.code 0} true;
    $i26 := $and.i64($i25, 1);
    goto corral_source_split_5224;

  corral_source_split_5224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 993} $i27 := ldv__builtin_expect($i26, 0);
    call {:si_unique_call 994} {:cexpr "tmp___0"} boogie_si_record_i64($i27);
    goto corral_source_split_5225;

  corral_source_split_5225:
    assume {:verifier.code 0} true;
    $i28 := $ne.i64($i27, 0);
    goto corral_source_split_5226;

  corral_source_split_5226:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb7:
    assume $i28 == 1;
    goto corral_source_split_5252;

  corral_source_split_5252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 997} $p29 := oxu_to_hcd($p0);
    goto corral_source_split_5253;

  corral_source_split_5253:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($add.ref($p29, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5254;

  corral_source_split_5254:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.0, $p31);
    goto corral_source_split_5255;

  corral_source_split_5255:
    assume {:verifier.code 0} true;
    $i33 := $add.i32($i1, 1);
    goto corral_source_split_5256;

  corral_source_split_5256:
    assume {:verifier.code 0} true;
    call {:si_unique_call 998} __dynamic_dev_dbg.ref.ref.ref.i32($p4, $p32, .str.95, $i33);
    goto corral_source_split_5257;

  corral_source_split_5257:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_5196;

  corral_source_split_5196:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i1);
    goto corral_source_split_5197;

  corral_source_split_5197:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i8, 8));
    goto corral_source_split_5198;

  corral_source_split_5198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p10, 0);
    goto corral_source_split_5199;

  corral_source_split_5199:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const oxu_port_speed: ref;

axiom oxu_port_speed == $sub.ref(0, 325653);

procedure oxu_port_speed($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation oxu_port_speed($p0: ref, $i1: i32) returns ($r: i32)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1001} {:cexpr "oxu_port_speed:arg:portsc"} boogie_si_record_i32($i1);
    goto corral_source_split_5266;

  corral_source_split_5266:
    assume {:verifier.code 0} true;
    $i2 := $lshr.i32($i1, 26);
    goto corral_source_split_5267;

  corral_source_split_5267:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 3);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i3, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    $i5 := $slt.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i3, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i6 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i8 := 1024;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_5275;

  corral_source_split_5275:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb6:
    assume $i6 == 1;
    goto corral_source_split_5271;

  corral_source_split_5271:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_5269;

  corral_source_split_5269:
    assume {:verifier.code 0} true;
    $i8 := 512;
    goto $bb11;

  $bb2:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i3, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i7 == 1);
    goto $bb8;

  $bb9:
    assume $i7 == 1;
    goto corral_source_split_5273;

  corral_source_split_5273:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb11;
}



const dbg_port_buf: ref;

axiom dbg_port_buf == $sub.ref(0, 326685);

procedure dbg_port_buf($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dbg_port_buf($p0: ref, $i1: i32, $p2: ref, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $i6: i1;
  var $i7: i1;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $p11: ref;
  var $i12: i64;
  var $i13: i8;
  var $i14: i32;
  var $i15: i1;
  var $p16: ref;
  var $i17: i32;
  var $i18: i1;
  var $p19: ref;
  var $i20: i32;
  var $i21: i1;
  var $p22: ref;
  var $i23: i32;
  var $i24: i1;
  var $p25: ref;
  var $i26: i32;
  var $i27: i1;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $p31: ref;
  var $i32: i32;
  var $i33: i1;
  var $p34: ref;
  var $i35: i32;
  var $i36: i1;
  var $p37: ref;
  var $i38: i32;
  var $i39: i1;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var $p46: ref;
  var $i47: i32;
  var $i48: i1;
  var $p49: ref;
  var $i50: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1002} {:cexpr "dbg_port_buf:arg:len"} boogie_si_record_i32($i1);
    call {:si_unique_call 1003} {:cexpr "dbg_port_buf:arg:port"} boogie_si_record_i32($i3);
    call {:si_unique_call 1004} {:cexpr "dbg_port_buf:arg:status"} boogie_si_record_i32($i4);
    goto corral_source_split_5277;

  corral_source_split_5277:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 3072);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i6 := $slt.i32($i5, 1024);
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    $i7 := $slt.i32($i5, 2048);
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    $i8 := $eq.i32($i5, 2048);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p11 := .str.100;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5285;

  corral_source_split_5285:
    assume {:verifier.code 0} true;
    $i12 := $zext.i32.i64($i1);
    goto corral_source_split_5286;

  corral_source_split_5286:
    assume {:verifier.code 0} true;
    $i13 := $load.i8($M.0, $p2);
    goto corral_source_split_5287;

  corral_source_split_5287:
    assume {:verifier.code 0} true;
    $i14 := $sext.i8.i32($i13);
    goto corral_source_split_5288;

  corral_source_split_5288:
    assume {:verifier.code 0} true;
    $i15 := $ne.i32($i14, 0);
    goto corral_source_split_5289;

  corral_source_split_5289:
    assume {:verifier.code 0} true;
    $p16 := (if $i15 == 1 then .str.28 else .str.24);
    goto corral_source_split_5290;

  corral_source_split_5290:
    assume {:verifier.code 0} true;
    $i17 := $and.i32($i4, 4096);
    goto corral_source_split_5291;

  corral_source_split_5291:
    assume {:verifier.code 0} true;
    $i18 := $ne.i32($i17, 0);
    goto corral_source_split_5292;

  corral_source_split_5292:
    assume {:verifier.code 0} true;
    $p19 := (if $i18 == 1 then .str.102 else .str.24);
    goto corral_source_split_5293;

  corral_source_split_5293:
    assume {:verifier.code 0} true;
    $i20 := $and.i32($i4, 8192);
    goto corral_source_split_5294;

  corral_source_split_5294:
    assume {:verifier.code 0} true;
    $i21 := $ne.i32($i20, 0);
    goto corral_source_split_5295;

  corral_source_split_5295:
    assume {:verifier.code 0} true;
    $p22 := (if $i21 == 1 then .str.103 else .str.24);
    goto corral_source_split_5296;

  corral_source_split_5296:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i4, 256);
    goto corral_source_split_5297;

  corral_source_split_5297:
    assume {:verifier.code 0} true;
    $i24 := $ne.i32($i23, 0);
    goto corral_source_split_5298;

  corral_source_split_5298:
    assume {:verifier.code 0} true;
    $p25 := (if $i24 == 1 then .str.104 else .str.24);
    goto corral_source_split_5299;

  corral_source_split_5299:
    assume {:verifier.code 0} true;
    $i26 := $and.i32($i4, 128);
    goto corral_source_split_5300;

  corral_source_split_5300:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i26, 0);
    goto corral_source_split_5301;

  corral_source_split_5301:
    assume {:verifier.code 0} true;
    $p28 := (if $i27 == 1 then .str.105 else .str.24);
    goto corral_source_split_5302;

  corral_source_split_5302:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i4, 64);
    goto corral_source_split_5303;

  corral_source_split_5303:
    assume {:verifier.code 0} true;
    $i30 := $ne.i32($i29, 0);
    goto corral_source_split_5304;

  corral_source_split_5304:
    assume {:verifier.code 0} true;
    $p31 := (if $i30 == 1 then .str.106 else .str.24);
    goto corral_source_split_5305;

  corral_source_split_5305:
    assume {:verifier.code 0} true;
    $i32 := $and.i32($i4, 32);
    goto corral_source_split_5306;

  corral_source_split_5306:
    assume {:verifier.code 0} true;
    $i33 := $ne.i32($i32, 0);
    goto corral_source_split_5307;

  corral_source_split_5307:
    assume {:verifier.code 0} true;
    $p34 := (if $i33 == 1 then .str.107 else .str.24);
    goto corral_source_split_5308;

  corral_source_split_5308:
    assume {:verifier.code 0} true;
    $i35 := $and.i32($i4, 16);
    goto corral_source_split_5309;

  corral_source_split_5309:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i35, 0);
    goto corral_source_split_5310;

  corral_source_split_5310:
    assume {:verifier.code 0} true;
    $p37 := (if $i36 == 1 then .str.108 else .str.24);
    goto corral_source_split_5311;

  corral_source_split_5311:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i4, 8);
    goto corral_source_split_5312;

  corral_source_split_5312:
    assume {:verifier.code 0} true;
    $i39 := $ne.i32($i38, 0);
    goto corral_source_split_5313;

  corral_source_split_5313:
    assume {:verifier.code 0} true;
    $p40 := (if $i39 == 1 then .str.109 else .str.24);
    goto corral_source_split_5314;

  corral_source_split_5314:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i4, 4);
    goto corral_source_split_5315;

  corral_source_split_5315:
    assume {:verifier.code 0} true;
    $i42 := $ne.i32($i41, 0);
    goto corral_source_split_5316;

  corral_source_split_5316:
    assume {:verifier.code 0} true;
    $p43 := (if $i42 == 1 then .str.110 else .str.24);
    goto corral_source_split_5317;

  corral_source_split_5317:
    assume {:verifier.code 0} true;
    $i44 := $and.i32($i4, 2);
    goto corral_source_split_5318;

  corral_source_split_5318:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_5319;

  corral_source_split_5319:
    assume {:verifier.code 0} true;
    $p46 := (if $i45 == 1 then .str.111 else .str.24);
    goto corral_source_split_5320;

  corral_source_split_5320:
    assume {:verifier.code 0} true;
    $i47 := $and.i32($i4, 1);
    goto corral_source_split_5321;

  corral_source_split_5321:
    assume {:verifier.code 0} true;
    $i48 := $ne.i32($i47, 0);
    goto corral_source_split_5322;

  corral_source_split_5322:
    assume {:verifier.code 0} true;
    $p49 := (if $i48 == 1 then .str.112 else .str.24);
    goto corral_source_split_5323;

  corral_source_split_5323:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1005} $i50 := scnprintf.ref.i64.ref.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0, $i12, .str.101, $p2, $p16, $i3, $i4, $p19, $p22, $p11, $p25, $p28, $p31, $p34, $p37, $p40, $p43, $p46, $p49);
    call {:si_unique_call 1006} {:cexpr "tmp"} boogie_si_record_i32($i50);
    goto corral_source_split_5324;

  corral_source_split_5324:
    assume {:verifier.code 0} true;
    $r := $i50;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_5279;

  corral_source_split_5279:
    assume {:verifier.code 0} true;
    $p11 := .str.99;
    goto $bb13;

  $bb4:
    assume $i7 == 1;
    assume {:verifier.code 0} true;
    $i9 := $eq.i32($i5, 1024);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb8;

  $bb9:
    assume $i9 == 1;
    goto corral_source_split_5281;

  corral_source_split_5281:
    assume {:verifier.code 0} true;
    $p11 := .str.98;
    goto $bb13;

  $bb2:
    assume $i6 == 1;
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i5, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb8;

  $bb11:
    assume $i10 == 1;
    goto corral_source_split_5283;

  corral_source_split_5283:
    assume {:verifier.code 0} true;
    $p11 := .str.97;
    goto $bb13;
}



const put_unaligned_le32: ref;

axiom put_unaligned_le32 == $sub.ref(0, 327717);

procedure put_unaligned_le32($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation put_unaligned_le32($i0: i32, $p1: ref)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1007} {:cexpr "put_unaligned_le32:arg:val"} boogie_si_record_i32($i0);
    goto corral_source_split_5326;

  corral_source_split_5326:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_5327;

  corral_source_split_5327:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i0);
    goto corral_source_split_5328;

  corral_source_split_5328:
    assume {:verifier.code 0} true;
    return;
}



const spin_unlock_irqrestore: ref;

axiom spin_unlock_irqrestore == $sub.ref(0, 328749);

procedure spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.22;



implementation spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1008} {:cexpr "spin_unlock_irqrestore:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5330;

  corral_source_split_5330:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1009} ldv_spin_unlock();
    goto corral_source_split_5331;

  corral_source_split_5331:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1010} ldv_spin_unlock_irqrestore_12($p0, $i1);
    goto corral_source_split_5332;

  corral_source_split_5332:
    assume {:verifier.code 0} true;
    return;
}



const ldv_spin_unlock_irqrestore_12: ref;

axiom ldv_spin_unlock_irqrestore_12 == $sub.ref(0, 329781);

procedure ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation ldv_spin_unlock_irqrestore_12($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1011} {:cexpr "ldv_spin_unlock_irqrestore_12:arg:flags"} boogie_si_record_i64($i1);
    goto corral_source_split_5334;

  corral_source_split_5334:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_5335;

  corral_source_split_5335:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_5336;

  corral_source_split_5336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1012} _raw_spin_unlock_irqrestore($p3, $i1);
    goto corral_source_split_5337;

  corral_source_split_5337:
    assume {:verifier.code 0} true;
    return;
}



const _raw_spin_unlock_irqrestore: ref;

axiom _raw_spin_unlock_irqrestore == $sub.ref(0, 330813);

procedure _raw_spin_unlock_irqrestore($p0: ref, $i1: i64);
  free requires assertsPassed;



implementation _raw_spin_unlock_irqrestore($p0: ref, $i1: i64)
{

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1013} {:cexpr "_raw_spin_unlock_irqrestore:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5339;

  corral_source_split_5339:
    assume {:verifier.code 0} true;
    return;
}



const scnprintf: ref;

axiom scnprintf == $sub.ref(0, 331845);

procedure scnprintf.ref.i64.ref.ref.ref.i32.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: i32, p.8: i32, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: ref, p.15: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref.i32.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: i32, p.8: i32, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: ref, p.15: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1014} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5341;

  corral_source_split_5341:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1015} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1016} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5342;

  corral_source_split_5342:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.ref.i32.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: ref, p.15: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref.i32.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: ref, p.7: ref, p.8: ref, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: ref, p.15: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1017} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5344;

  corral_source_split_5344:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1018} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1019} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5345;

  corral_source_split_5345:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



procedure scnprintf.ref.i64.ref.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: ref, p.8: ref, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: ref, p.15: ref, p.16: ref, p.17: ref, p.18: ref) returns ($r: i32);
  free requires assertsPassed;



implementation scnprintf.ref.i64.ref.ref.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0: ref, $i1: i64, $p2: ref, p.3: ref, p.4: ref, p.5: i32, p.6: i32, p.7: ref, p.8: ref, p.9: ref, p.10: ref, p.11: ref, p.12: ref, p.13: ref, p.14: ref, p.15: ref, p.16: ref, p.17: ref, p.18: ref) returns ($r: i32)
{
  var $i3: i32;

  $bb2:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1020} {:cexpr "scnprintf:arg:arg1"} boogie_si_record_i64($i1);
    goto corral_source_split_5347;

  corral_source_split_5347:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1021} $i3 := __VERIFIER_nondet_int();
    call {:si_unique_call 1022} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i3);
    goto corral_source_split_5348;

  corral_source_split_5348:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const schedule_timeout_uninterruptible: ref;

axiom schedule_timeout_uninterruptible == $sub.ref(0, 332877);

procedure schedule_timeout_uninterruptible($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation schedule_timeout_uninterruptible($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1023} {:cexpr "schedule_timeout_uninterruptible:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_5350;

  corral_source_split_5350:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1024} $i1 := __VERIFIER_nondet_long();
    call {:si_unique_call 1025} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i1);
    goto corral_source_split_5351;

  corral_source_split_5351:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const __oxu_urb_enqueue: ref;

axiom __oxu_urb_enqueue == $sub.ref(0, 333909);

procedure __oxu_urb_enqueue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.22, $M.60, $M.50, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.58, $M.59, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.48, $M.46, $M.47, assertsPassed;



implementation __oxu_urb_enqueue($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $i8: i1;
  var $i9: i1;
  var $i10: i1;
  var $i11: i1;
  var $i12: i1;
  var $p13: ref;
  var $i14: i64;
  var $i15: i1;
  var $i17: i32;
  var $p18: ref;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i32;
  var $i16: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1026} $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1027} {:cexpr "__oxu_urb_enqueue:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5353;

  corral_source_split_5353:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1028} $p4 := hcd_to_oxu($p0);
    goto corral_source_split_5354;

  corral_source_split_5354:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1029} INIT_LIST_HEAD($p3);
    goto corral_source_split_5355;

  corral_source_split_5355:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5356;

  corral_source_split_5356:
    assume {:verifier.code 0} true;
    $i6 := $load.i32($M.0, $p5);
    goto corral_source_split_5357;

  corral_source_split_5357:
    assume {:verifier.code 0} true;
    $i7 := $lshr.i32($i6, 30);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i8 := $slt.i32($i7, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    $i9 := $slt.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $i10 := $eq.i32($i7, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb6, $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    assume !($i10 == 1);
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1031} $p13 := qh_urb_transaction($p4, $p1, $p3, $i2);
    goto corral_source_split_5373;

  corral_source_split_5373:
    assume {:verifier.code 0} true;
    $i14 := $p2i.ref.i64($p13);
    goto corral_source_split_5374;

  corral_source_split_5374:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5375;

  corral_source_split_5375:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1032} $i17 := submit_async($p4, $p1, $p3, $i2);
    goto SeqInstr_349, SeqInstr_350;

  SeqInstr_350:
    assume assertsPassed;
    goto SeqInstr_351;

  SeqInstr_351:
    call {:si_unique_call 1033} {:cexpr "tmp___1"} boogie_si_record_i32($i17);
    goto corral_source_split_5381;

  corral_source_split_5381:
    assume {:verifier.code 0} true;
    $i16 := $i17;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_5379;

  corral_source_split_5379:
    assume {:verifier.code 0} true;
    $r := $i16;
    return;

  SeqInstr_349:
    assume !assertsPassed;
    return;

  $bb15:
    assume $i15 == 1;
    goto corral_source_split_5377;

  corral_source_split_5377:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb17;

  $bb6:
    assume {:verifier.code 0} true;
    assume $i10 == 1;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb4:
    assume $i9 == 1;
    goto corral_source_split_5359;

  corral_source_split_5359:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb2:
    assume $i8 == 1;
    assume {:verifier.code 0} true;
    $i11 := $slt.i32($i7, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i11 == 1);
    goto corral_source_split_5361;

  corral_source_split_5361:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1030} $p18 := qh_urb_transaction($p4, $p1, $p3, $i2);
    goto corral_source_split_5362;

  corral_source_split_5362:
    assume {:verifier.code 0} true;
    $i19 := $p2i.ref.i64($p18);
    goto corral_source_split_5363;

  corral_source_split_5363:
    assume {:verifier.code 0} true;
    $i20 := $eq.i64($i19, 0);
    goto corral_source_split_5364;

  corral_source_split_5364:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i20 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1034} $i21 := intr_submit($p4, $p1, $p3, $i2);
    goto SeqInstr_352, SeqInstr_353;

  SeqInstr_353:
    assume assertsPassed;
    goto SeqInstr_354;

  SeqInstr_354:
    call {:si_unique_call 1035} {:cexpr "tmp___3"} boogie_si_record_i32($i21);
    goto corral_source_split_5385;

  corral_source_split_5385:
    assume {:verifier.code 0} true;
    $i16 := $i21;
    goto $bb17;

  SeqInstr_352:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i20 == 1;
    goto corral_source_split_5383;

  corral_source_split_5383:
    assume {:verifier.code 0} true;
    $i16 := $sub.i32(0, 12);
    goto $bb17;

  $bb10:
    assume $i11 == 1;
    assume {:verifier.code 0} true;
    $i12 := $eq.i32($i7, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb9;

  $bb12:
    assume $i12 == 1;
    goto corral_source_split_5366;

  corral_source_split_5366:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5367;

  corral_source_split_5367:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5368;

  corral_source_split_5368:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p23, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_5369;

  corral_source_split_5369:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5370;

  corral_source_split_5370:
    assume {:verifier.code 0} true;
    $i26 := $eq.i32($i25, 3);
    goto corral_source_split_5371;

  corral_source_split_5371:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i26 == 1);
    goto corral_source_split_5390;

  corral_source_split_5390:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1038} $i28 := sitd_submit($p4, $p1, $i2);
    call {:si_unique_call 1039} {:cexpr "tmp___5"} boogie_si_record_i32($i28);
    goto corral_source_split_5391;

  corral_source_split_5391:
    assume {:verifier.code 0} true;
    $i16 := $i28;
    goto $bb17;

  $bb22:
    assume $i26 == 1;
    goto corral_source_split_5387;

  corral_source_split_5387:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1036} $i27 := itd_submit($p4, $p1, $i2);
    call {:si_unique_call 1037} {:cexpr "tmp___4"} boogie_si_record_i32($i27);
    goto corral_source_split_5388;

  corral_source_split_5388:
    assume {:verifier.code 0} true;
    $i16 := $i27;
    goto $bb17;
}



const oxu_murb_alloc: ref;

axiom oxu_murb_alloc == $sub.ref(0, 334941);

procedure oxu_murb_alloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22, $M.0;



implementation oxu_murb_alloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p20: ref;
  var $i21: i8;
  var $i22: i32;
  var $i23: i1;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5393;

  corral_source_split_5393:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_5394;

  corral_source_split_5394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1040} spin_lock($p1);
    goto corral_source_split_5395;

  corral_source_split_5395:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(0, 1));
    goto corral_source_split_5397;

  corral_source_split_5397:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_5398;

  corral_source_split_5398:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_5399;

  corral_source_split_5399:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_5400;

  corral_source_split_5400:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(1, 1));
    goto corral_source_split_5407;

  corral_source_split_5407:
    assume {:verifier.code 0} true;
    $i21 := $load.i8($M.0, $p20);
    goto corral_source_split_5408;

  corral_source_split_5408:
    assume {:verifier.code 0} true;
    $i22 := $zext.i8.i32($i21);
    goto corral_source_split_5409;

  corral_source_split_5409:
    assume {:verifier.code 0} true;
    $i23 := $eq.i32($i22, 0);
    goto corral_source_split_5410;

  corral_source_split_5410:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i23} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(2, 1));
    goto corral_source_split_5425;

  corral_source_split_5425:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_5426;

  corral_source_split_5426:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_5427;

  corral_source_split_5427:
    assume {:verifier.code 0} true;
    $i28 := $eq.i32($i27, 0);
    goto corral_source_split_5428;

  corral_source_split_5428:
    assume {:verifier.code 0} true;
    $i7 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(3, 1));
    goto corral_source_split_5430;

  corral_source_split_5430:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_5431;

  corral_source_split_5431:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_5432;

  corral_source_split_5432:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_5433;

  corral_source_split_5433:
    assume {:verifier.code 0} true;
    $i7 := 3;
    assume {:branchcond $i33} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(4, 1));
    goto corral_source_split_5435;

  corral_source_split_5435:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_5436;

  corral_source_split_5436:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_5437;

  corral_source_split_5437:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_5438;

  corral_source_split_5438:
    assume {:verifier.code 0} true;
    $i7 := 4;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(5, 1));
    goto corral_source_split_5440;

  corral_source_split_5440:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_5441;

  corral_source_split_5441:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_5442;

  corral_source_split_5442:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_5443;

  corral_source_split_5443:
    assume {:verifier.code 0} true;
    $i7 := 5;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(6, 1));
    goto corral_source_split_5445;

  corral_source_split_5445:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_5446;

  corral_source_split_5446:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_5447;

  corral_source_split_5447:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_5448;

  corral_source_split_5448:
    assume {:verifier.code 0} true;
    $i7 := 6;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(7, 1));
    goto corral_source_split_5450;

  corral_source_split_5450:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_5451;

  corral_source_split_5451:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_5452;

  corral_source_split_5452:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_5453;

  corral_source_split_5453:
    assume {:verifier.code 0} true;
    $i7 := 7;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 8;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_5404;

  corral_source_split_5404:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 7);
    goto corral_source_split_5405;

  corral_source_split_5405:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p17 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_5421;

  corral_source_split_5421:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_5422;

  corral_source_split_5422:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1041} spin_unlock($p18);
    goto corral_source_split_5423;

  corral_source_split_5423:
    assume {:verifier.code 0} true;
    $r := $p17;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_5412;

  corral_source_split_5412:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(752, 1));
    goto corral_source_split_5413;

  corral_source_split_5413:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_5414;

  corral_source_split_5414:
    assume {:verifier.code 0} true;
    $i12 := $sext.i32.i64($i8);
    goto corral_source_split_5415;

  corral_source_split_5415:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p11, $mul.ref($i12, 208));
    goto corral_source_split_5416;

  corral_source_split_5416:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i8);
    goto corral_source_split_5417;

  corral_source_split_5417:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref($i14, 1));
    goto corral_source_split_5418;

  corral_source_split_5418:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 1);
    goto corral_source_split_5419;

  corral_source_split_5419:
    assume {:verifier.code 0} true;
    $p17 := $p13;
    goto $bb12;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_5402;

  corral_source_split_5402:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb4;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb4;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i28 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i23 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;
}



const schedule: ref;

axiom schedule == $sub.ref(0, 335973);

procedure schedule();
  free requires assertsPassed;



implementation schedule()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5455;

  corral_source_split_5455:
    assume {:verifier.code 0} true;
    return;
}



const INIT_LIST_HEAD: ref;

axiom INIT_LIST_HEAD == $sub.ref(0, 337005);

procedure INIT_LIST_HEAD($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation INIT_LIST_HEAD($p0: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_5457;

  corral_source_split_5457:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5458;

  corral_source_split_5458:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p1, $p0);
    goto corral_source_split_5459;

  corral_source_split_5459:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_5460;

  corral_source_split_5460:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p2, $p0);
    goto corral_source_split_5461;

  corral_source_split_5461:
    assume {:verifier.code 0} true;
    return;
}



const qh_urb_transaction: ref;

axiom qh_urb_transaction == $sub.ref(0, 338037);

procedure qh_urb_transaction($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22;



implementation qh_urb_transaction($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: ref)
{
  var $p4: ref;
  var $i5: i64;
  var $i6: i1;
  var $i7: i32;
  var $i8: i64;
  var $i9: i64;
  var $i10: i1;
  var $p12: ref;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $i27: i1;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i32;
  var $i35: i1;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i64;
  var $i40: i32;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $p49: ref;
  var $i50: i64;
  var $i51: i1;
  var $i52: i32;
  var $i53: i64;
  var $i54: i64;
  var $i55: i1;
  var $p56: ref;
  var $p57: ref;
  var $i58: i64;
  var $i59: i32;
  var $p60: ref;
  var $p61: ref;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $p65: ref;
  var $i66: i32;
  var $i67: i32;
  var $i68: i1;
  var $p69: ref;
  var $i70: i64;
  var $p71: ref;
  var $p72: ref;
  var $i73: i1;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i64;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $i87: i32;
  var $i88: i1;
  var $i89: i32;
  var $i90: i16;
  var $i91: i32;
  var $i92: i32;
  var $i93: i32;
  var $i94: i64;
  var $p95: ref;
  var $i96: i32;
  var $p97: ref;
  var $i98: i64;
  var $i99: i32;
  var $p100: ref;
  var $i101: i32;
  var $i102: i64;
  var $i103: i64;
  var $i104: i64;
  var $p105: ref;
  var $i106: i1;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $i110: i32;
  var $p111: ref;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $i115: i1;
  var $i116: i32;
  var $i117: i32;
  var $i118: i1;
  var $i119: i32;
  var $i120: i64;
  var $i121: i64;
  var $i122: i1;
  var $p123: ref;
  var $i124: i32;
  var $p125: ref;
  var $i126: i64;
  var $i127: i1;
  var $i128: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i1;
  var $i132: i1;
  var $i133: i32;
  var $i134: i64;
  var $i135: i64;
  var $i136: i1;
  var $i137: i32;
  var $i138: i1;
  var $p139: ref;
  var $p140: ref;
  var $i141: i64;
  var $i142: i32;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $i146: i32;
  var $i147: i32;
  var $i148: i1;
  var $p150: ref;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i149: i1;
  var $i154: i32;
  var $i155: i64;
  var $i156: i64;
  var $i157: i1;
  var $p158: ref;
  var $p159: ref;
  var $i160: i32;
  var $i161: i1;
  var $i162: i32;
  var $i163: i64;
  var $i164: i64;
  var $i165: i1;
  var $p166: ref;
  var $i167: i32;
  var $i168: i32;
  var $i169: i1;
  var $i170: i32;
  var $i171: i32;
  var $p174: ref;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $i179: i32;
  var $i180: i32;
  var $i181: i1;
  var $p182: ref;
  var $i183: i32;
  var $i184: i32;
  var $i185: i1;
  var $i186: i32;
  var $i172: i32;
  var $i173: i32;
  var $i187: i1;
  var $p188: ref;
  var $i189: i64;
  var $i190: i1;
  var $i191: i32;
  var $i192: i64;
  var $i193: i64;
  var $i194: i1;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $i198: i32;
  var $p199: ref;
  var $p200: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $i205: i32;
  var $i206: i32;
  var $p207: ref;
  var $p11: ref;
  var cmdloc_dummy_var_45: [ref]i8;
  var cmdloc_dummy_var_46: [ref]i8;
  var cmdloc_dummy_var_47: [ref]i8;
  var cmdloc_dummy_var_48: [ref]i8;
  var cmdloc_dummy_var_49: [ref]i8;
  var cmdloc_dummy_var_50: [ref]i8;
  var vslice_dummy_var_97: i32;
  var vslice_dummy_var_98: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1042} {:cexpr "qh_urb_transaction:arg:flags"} boogie_si_record_i32($i3);
    goto corral_source_split_5463;

  corral_source_split_5463:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1043} $p4 := ehci_qtd_alloc($p0);
    goto corral_source_split_5464;

  corral_source_split_5464:
    assume {:verifier.code 0} true;
    $i5 := $p2i.ref.i64($p4);
    goto corral_source_split_5465;

  corral_source_split_5465:
    assume {:verifier.code 0} true;
    $i6 := $eq.i64($i5, 0);
    goto corral_source_split_5466;

  corral_source_split_5466:
    assume {:verifier.code 0} true;
    $i7 := $zext.i1.i32($i6);
    goto corral_source_split_5467;

  corral_source_split_5467:
    assume {:verifier.code 0} true;
    $i8 := $sext.i32.i64($i7);
    goto corral_source_split_5468;

  corral_source_split_5468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1044} $i9 := ldv__builtin_expect($i8, 0);
    call {:si_unique_call 1045} {:cexpr "tmp"} boogie_si_record_i64($i9);
    goto corral_source_split_5469;

  corral_source_split_5469:
    assume {:verifier.code 0} true;
    $i10 := $ne.i64($i9, 0);
    goto corral_source_split_5470;

  corral_source_split_5470:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_5476;

  corral_source_split_5476:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1046} list_add_tail($p12, $p2);
    goto corral_source_split_5477;

  corral_source_split_5477:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_5478;

  corral_source_split_5478:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p13, $p1);
    goto corral_source_split_5479;

  corral_source_split_5479:
    assume {:verifier.code 0} true;
    $i14 := $or.i32(128, 3072);
    call {:si_unique_call 1047} {:cexpr "token"} boogie_si_record_i32($i14);
    goto corral_source_split_5480;

  corral_source_split_5480:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5481;

  corral_source_split_5481:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    call {:si_unique_call 1048} {:cexpr "len"} boogie_si_record_i32($i16);
    goto corral_source_split_5482;

  corral_source_split_5482:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5483;

  corral_source_split_5483:
    assume {:verifier.code 0} true;
    $i18 := $load.i32($M.0, $p17);
    goto corral_source_split_5484;

  corral_source_split_5484:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i18, 128);
    call {:si_unique_call 1049} {:cexpr "is_input"} boogie_si_record_i32($i19);
    goto corral_source_split_5485;

  corral_source_split_5485:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5486;

  corral_source_split_5486:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_5487;

  corral_source_split_5487:
    assume {:verifier.code 0} true;
    $i22 := $p2i.ref.i64($p21);
    goto corral_source_split_5488;

  corral_source_split_5488:
    assume {:verifier.code 0} true;
    $i23 := $eq.i64($i22, 0);
    goto corral_source_split_5489;

  corral_source_split_5489:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i23 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5506;

  corral_source_split_5506:
    assume {:verifier.code 0} true;
    $i33 := $load.i32($M.0, $p32);
    goto corral_source_split_5507;

  corral_source_split_5507:
    assume {:verifier.code 0} true;
    $i34 := $lshr.i32($i33, 30);
    goto corral_source_split_5508;

  corral_source_split_5508:
    assume {:verifier.code 0} true;
    $i35 := $eq.i32($i34, 2);
    goto corral_source_split_5509;

  corral_source_split_5509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i35 == 1);
    assume {:verifier.code 0} true;
    $p65, $i66 := $p4, $i14;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5557;

  corral_source_split_5557:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1062} $i67 := oxu_buf_alloc($p0, $p65, $i16);
    call {:si_unique_call 1063} {:cexpr "ret"} boogie_si_record_i32($i67);
    goto corral_source_split_5558;

  corral_source_split_5558:
    assume {:verifier.code 0} true;
    $i68 := $ne.i32($i67, 0);
    goto corral_source_split_5559;

  corral_source_split_5559:
    assume {:verifier.code 0} true;
    assume {:branchcond $i68} true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p65, $mul.ref(0, 136)), $mul.ref(112, 1));
    goto corral_source_split_5563;

  corral_source_split_5563:
    assume {:verifier.code 0} true;
    $i70 := $load.i64($M.0, $p69);
    call {:si_unique_call 1064} {:cexpr "buf"} boogie_si_record_i64($i70);
    goto corral_source_split_5564;

  corral_source_split_5564:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5565;

  corral_source_split_5565:
    assume {:verifier.code 0} true;
    $p72 := $load.ref($M.0, $p71);
    goto corral_source_split_5566;

  corral_source_split_5566:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i19, 0);
    goto corral_source_split_5567;

  corral_source_split_5567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $i81 := $ne.i32($i19, 0);
    goto corral_source_split_5579;

  corral_source_split_5579:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    $i83 := $i66;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto corral_source_split_5584;

  corral_source_split_5584:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_5585;

  corral_source_split_5585:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.0, $p84);
    goto corral_source_split_5586;

  corral_source_split_5586:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5587;

  corral_source_split_5587:
    assume {:verifier.code 0} true;
    $i87 := $load.i32($M.0, $p86);
    goto corral_source_split_5588;

  corral_source_split_5588:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i19, 0);
    goto corral_source_split_5589;

  corral_source_split_5589:
    assume {:verifier.code 0} true;
    $i89 := $zext.i1.i32($i88);
    goto corral_source_split_5590;

  corral_source_split_5590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1067} $i90 := usb_maxpacket($p85, $i87, $i89);
    call {:si_unique_call 1068} {:cexpr "tmp___1"} boogie_si_record_i16($i90);
    goto corral_source_split_5591;

  corral_source_split_5591:
    assume {:verifier.code 0} true;
    $i91 := $zext.i16.i32($i90);
    goto corral_source_split_5592;

  corral_source_split_5592:
    assume {:verifier.code 0} true;
    $i92 := $and.i32($i91, 2047);
    call {:si_unique_call 1069} {:cexpr "maxpacket"} boogie_si_record_i32($i92);
    goto corral_source_split_5593;

  corral_source_split_5593:
    assume {:verifier.code 0} true;
    $i93, $i94, $p95, $i96, $p97 := $i16, $i70, $p65, $i83, $p72;
    goto $bb35;

  $bb35:
    call $i93, $i94, $p95, $i96, $p97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $p105, $i106, $p107, $p108, $p109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $p139, $p140, $i141, $i142, $p143, $p144 := qh_urb_transaction_loop_$bb35($p0, $p1, $p2, $i19, $i92, $i93, $i94, $p95, $i96, $p97, $i98, $i99, $p100, $i101, $i102, $i103, $i104, $p105, $i106, $p107, $p108, $p109, $i110, $p111, $i112, $i113, $i114, $i115, $i116, $i117, $i118, $i119, $i120, $i121, $i122, $p123, $i124, $p125, $i126, $i127, $i128, $i129, $i130, $i131, $i132, $i133, $i134, $i135, $i136, $i137, $i138, $p139, $p140, $i141, $i142, $p143, $p144);
    goto $bb35_last;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    $i98 := $sext.i32.i64($i93);
    goto corral_source_split_5596;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} $i99 := qtd_fill($p95, $i94, $i98, $i96, $i92);
    call {:si_unique_call 1071} {:cexpr "this_qtd_len"} boogie_si_record_i32($i99);
    goto corral_source_split_5597;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($p95, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_5598;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p100, $p97);
    goto corral_source_split_5599;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    $i101 := $sub.i32($i93, $i99);
    call {:si_unique_call 1072} {:cexpr "len"} boogie_si_record_i32($i101);
    goto corral_source_split_5600;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    $i102 := $sext.i32.i64($i99);
    goto corral_source_split_5601;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    $i103 := $add.i64($i102, $i94);
    call {:si_unique_call 1073} {:cexpr "buf"} boogie_si_record_i64($i103);
    goto corral_source_split_5602;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    $i104 := $sext.i32.i64($i99);
    goto corral_source_split_5603;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($p97, $mul.ref($i104, 1));
    goto corral_source_split_5604;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    $i106 := $ne.i32($i19, 0);
    goto corral_source_split_5605;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    $i112 := $add.i32($i92, $sub.i32(0, 1));
    goto corral_source_split_5615;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, $i99);
    goto corral_source_split_5616;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    $i114 := $and.i32($i113, $i92);
    goto corral_source_split_5617;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    $i115 := $eq.i32($i114, 0);
    goto corral_source_split_5618;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  $bb40:
    assume !($i115 == 1);
    assume {:verifier.code 0} true;
    $i117 := $i96;
    goto $bb41;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    $i118 := $sle.i32($i101, 0);
    goto corral_source_split_5624;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    $i119 := $zext.i1.i32($i118);
    goto corral_source_split_5625;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    $i120 := $sext.i32.i64($i119);
    goto corral_source_split_5626;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} $i121 := ldv__builtin_expect($i120, 1);
    call {:si_unique_call 1076} {:cexpr "tmp___2"} boogie_si_record_i64($i121);
    goto corral_source_split_5627;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    $i122 := $ne.i64($i121, 0);
    goto corral_source_split_5628;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    $p123, $i124 := $p95, $i117;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} $p125 := ehci_qtd_alloc($p0);
    goto corral_source_split_5637;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    $i126 := $p2i.ref.i64($p125);
    goto corral_source_split_5638;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    $i127 := $eq.i64($i126, 0);
    goto corral_source_split_5639;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    $i128 := $zext.i1.i32($i127);
    goto corral_source_split_5640;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    $i129 := $sext.i32.i64($i128);
    goto corral_source_split_5641;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} $i130 := ldv__builtin_expect($i129, 0);
    call {:si_unique_call 1079} {:cexpr "tmp___3"} boogie_si_record_i64($i130);
    goto corral_source_split_5642;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    $i131 := $ne.i64($i130, 0);
    goto corral_source_split_5643;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $i132 := $sgt.i32($i101, 0);
    goto corral_source_split_5647;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    $i133 := $zext.i1.i32($i132);
    goto corral_source_split_5648;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    $i134 := $sext.i32.i64($i133);
    goto corral_source_split_5649;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} $i135 := ldv__builtin_expect($i134, 1);
    call {:si_unique_call 1081} {:cexpr "tmp___4"} boogie_si_record_i64($i135);
    goto corral_source_split_5650;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    $i136 := $ne.i64($i135, 0);
    goto corral_source_split_5651;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($p125, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_5659;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p139, $p1);
    goto corral_source_split_5660;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p125, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_5661;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    $i141 := $load.i64($M.0, $p140);
    goto corral_source_split_5662;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    $i142 := $trunc.i64.i32($i141);
    goto corral_source_split_5663;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p95, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5664;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p143, $i142);
    goto corral_source_split_5665;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p125, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_5666;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} list_add_tail($p144, $p2);
    goto corral_source_split_5667;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    $i93, $i94, $p95, $i96, $p97 := $i101, $i103, $p125, $i117, $p105;
    goto corral_source_split_5667_dummy;

  $bb49:
    assume $i136 == 1;
    goto corral_source_split_5653;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} $i137 := oxu_buf_alloc($p0, $p125, $i101);
    call {:si_unique_call 1083} {:cexpr "ret"} boogie_si_record_i32($i137);
    goto corral_source_split_5654;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    $i138 := $ne.i32($i137, 0);
    goto corral_source_split_5655;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51, $bb52;

  $bb52:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb51:
    assume $i138 == 1;
    goto corral_source_split_5657;

  corral_source_split_5657:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1053} qtd_list_free($p0, $p1, $p2);
    goto corral_source_split_5517;

  corral_source_split_5517:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5474;

  corral_source_split_5474:
    assume {:verifier.code 0} true;
    $r := $p11;
    return;

  $bb46:
    assume $i131 == 1;
    goto corral_source_split_5645;

  corral_source_split_5645:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb42:
    assume $i122 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5630;

  corral_source_split_5630:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_5632;

  corral_source_split_5632:
    assume {:verifier.code 0} true;
    $i146 := $load.i32($M.0, $p145);
    goto corral_source_split_5633;

  corral_source_split_5633:
    assume {:verifier.code 0} true;
    $i147 := $and.i32($i146, 1);
    goto corral_source_split_5634;

  corral_source_split_5634:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_5635;

  corral_source_split_5635:
    assume {:verifier.code 0} true;
    $i149 := 1;
    assume true;
    goto $bb55, $bb57;

  $bb57:
    assume !($i148 == 1);
    goto corral_source_split_5675;

  corral_source_split_5675:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5676;

  corral_source_split_5676:
    assume {:verifier.code 0} true;
    $i151 := $load.i32($M.0, $p150);
    goto corral_source_split_5677;

  corral_source_split_5677:
    assume {:verifier.code 0} true;
    $i152 := $lshr.i32($i151, 30);
    goto corral_source_split_5678;

  corral_source_split_5678:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 2);
    goto corral_source_split_5679;

  corral_source_split_5679:
    assume {:verifier.code 0} true;
    $i149 := $i153;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    goto corral_source_split_5669;

  corral_source_split_5669:
    assume {:verifier.code 0} true;
    $i154 := $zext.i1.i32($i149);
    goto corral_source_split_5670;

  corral_source_split_5670:
    assume {:verifier.code 0} true;
    $i155 := $sext.i32.i64($i154);
    goto corral_source_split_5671;

  corral_source_split_5671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1085} $i156 := ldv__builtin_expect($i155, 1);
    call {:si_unique_call 1086} {:cexpr "tmp___5"} boogie_si_record_i64($i156);
    goto corral_source_split_5672;

  corral_source_split_5672:
    assume {:verifier.code 0} true;
    $i157 := $ne.i64($i156, 0);
    goto corral_source_split_5673;

  corral_source_split_5673:
    assume {:verifier.code 0} true;
    assume {:branchcond $i157} true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i157 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5685;

  corral_source_split_5685:
    assume {:verifier.code 0} true;
    $i160 := $load.i32($M.0, $p159);
    goto corral_source_split_5686;

  corral_source_split_5686:
    assume {:verifier.code 0} true;
    $i161 := $ne.i32($i160, 0);
    goto corral_source_split_5687;

  corral_source_split_5687:
    assume {:verifier.code 0} true;
    $i162 := $zext.i1.i32($i161);
    goto corral_source_split_5688;

  corral_source_split_5688:
    assume {:verifier.code 0} true;
    $i163 := $sext.i32.i64($i162);
    goto corral_source_split_5689;

  corral_source_split_5689:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1087} $i164 := ldv__builtin_expect($i163, 1);
    call {:si_unique_call 1088} {:cexpr "tmp___7"} boogie_si_record_i64($i164);
    goto corral_source_split_5690;

  corral_source_split_5690:
    assume {:verifier.code 0} true;
    $i165 := $ne.i64($i164, 0);
    goto corral_source_split_5691;

  corral_source_split_5691:
    assume {:verifier.code 0} true;
    assume {:branchcond $i165} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i165 == 1);
    assume {:verifier.code 0} true;
    $p203 := $p123;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    goto corral_source_split_5750;

  corral_source_split_5750:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($p203, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_5751;

  corral_source_split_5751:
    assume {:verifier.code 0} true;
    $i205 := $load.i32($M.0, $p204);
    goto corral_source_split_5752;

  corral_source_split_5752:
    assume {:verifier.code 0} true;
    $i206 := $or.i32($i205, 32768);
    goto corral_source_split_5753;

  corral_source_split_5753:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p203, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_5754;

  corral_source_split_5754:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p207, $i206);
    goto corral_source_split_5755;

  corral_source_split_5755:
    assume {:verifier.code 0} true;
    $p11 := $p2;
    goto $bb3;

  $bb61:
    assume $i165 == 1;
    goto corral_source_split_5693;

  corral_source_split_5693:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5694;

  corral_source_split_5694:
    assume {:verifier.code 0} true;
    $i167 := $load.i32($M.0, $p166);
    goto corral_source_split_5695;

  corral_source_split_5695:
    assume {:verifier.code 0} true;
    $i168 := $lshr.i32($i167, 30);
    goto corral_source_split_5696;

  corral_source_split_5696:
    assume {:verifier.code 0} true;
    $i169 := $eq.i32($i168, 2);
    goto corral_source_split_5697;

  corral_source_split_5697:
    assume {:verifier.code 0} true;
    assume {:branchcond $i169} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i169 == 1);
    goto corral_source_split_5703;

  corral_source_split_5703:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5704;

  corral_source_split_5704:
    assume {:verifier.code 0} true;
    $i175 := $load.i32($M.0, $p174);
    goto corral_source_split_5705;

  corral_source_split_5705:
    assume {:verifier.code 0} true;
    $i176 := $lshr.i32($i175, 30);
    goto corral_source_split_5706;

  corral_source_split_5706:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 3);
    goto corral_source_split_5707;

  corral_source_split_5707:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb66, $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    assume !($i177 == 1);
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $i186 := 0;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i172, $i173 := $i124, $i186;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5709;

  corral_source_split_5709:
    assume {:verifier.code 0} true;
    $i187 := $ne.i32($i173, 0);
    goto corral_source_split_5710;

  corral_source_split_5710:
    assume {:verifier.code 0} true;
    assume {:branchcond $i187} true;
    goto $bb74, $bb75;

  $bb75:
    assume !($i187 == 1);
    assume {:verifier.code 0} true;
    $p202 := $p123;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto corral_source_split_5748;

  corral_source_split_5748:
    assume {:verifier.code 0} true;
    $p203 := $p202;
    goto $bb80;

  $bb74:
    assume $i187 == 1;
    goto corral_source_split_5726;

  corral_source_split_5726:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1091} $p188 := ehci_qtd_alloc($p0);
    goto corral_source_split_5727;

  corral_source_split_5727:
    assume {:verifier.code 0} true;
    $i189 := $p2i.ref.i64($p188);
    goto corral_source_split_5728;

  corral_source_split_5728:
    assume {:verifier.code 0} true;
    $i190 := $eq.i64($i189, 0);
    goto corral_source_split_5729;

  corral_source_split_5729:
    assume {:verifier.code 0} true;
    $i191 := $zext.i1.i32($i190);
    goto corral_source_split_5730;

  corral_source_split_5730:
    assume {:verifier.code 0} true;
    $i192 := $sext.i32.i64($i191);
    goto corral_source_split_5731;

  corral_source_split_5731:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1092} $i193 := ldv__builtin_expect($i192, 0);
    call {:si_unique_call 1093} {:cexpr "tmp___6"} boogie_si_record_i64($i193);
    goto corral_source_split_5732;

  corral_source_split_5732:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_5733;

  corral_source_split_5733:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p195 := $add.ref($add.ref($p188, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_5737;

  corral_source_split_5737:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p195, $p1);
    goto corral_source_split_5738;

  corral_source_split_5738:
    assume {:verifier.code 0} true;
    $p196 := $add.ref($add.ref($p188, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_5739;

  corral_source_split_5739:
    assume {:verifier.code 0} true;
    $i197 := $load.i64($M.0, $p196);
    goto corral_source_split_5740;

  corral_source_split_5740:
    assume {:verifier.code 0} true;
    $i198 := $trunc.i64.i32($i197);
    goto corral_source_split_5741;

  corral_source_split_5741:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p123, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5742;

  corral_source_split_5742:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p199, $i198);
    goto corral_source_split_5743;

  corral_source_split_5743:
    assume {:verifier.code 0} true;
    $p200 := $add.ref($add.ref($p188, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_5744;

  corral_source_split_5744:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1094} list_add_tail($p200, $p2);
    goto corral_source_split_5745;

  corral_source_split_5745:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1095} vslice_dummy_var_98 := qtd_fill($p188, 0, 0, $i172, 0);
    goto corral_source_split_5746;

  corral_source_split_5746:
    assume {:verifier.code 0} true;
    $p202 := $p188;
    goto $bb79;

  $bb76:
    assume $i194 == 1;
    goto corral_source_split_5735;

  corral_source_split_5735:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb66:
    assume $i177 == 1;
    goto corral_source_split_5712;

  corral_source_split_5712:
    assume {:verifier.code 0} true;
    $p178 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(100, 1));
    goto corral_source_split_5713;

  corral_source_split_5713:
    assume {:verifier.code 0} true;
    $i179 := $load.i32($M.0, $p178);
    goto corral_source_split_5714;

  corral_source_split_5714:
    assume {:verifier.code 0} true;
    $i180 := $and.i32($i179, 64);
    goto corral_source_split_5715;

  corral_source_split_5715:
    assume {:verifier.code 0} true;
    $i181 := $ne.i32($i180, 0);
    goto corral_source_split_5716;

  corral_source_split_5716:
    assume {:verifier.code 0} true;
    assume {:branchcond $i181} true;
    goto $bb69, $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    assume !($i181 == 1);
    goto $bb68;

  $bb69:
    assume $i181 == 1;
    goto corral_source_split_5718;

  corral_source_split_5718:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5719;

  corral_source_split_5719:
    assume {:verifier.code 0} true;
    $i183 := $load.i32($M.0, $p182);
    goto corral_source_split_5720;

  corral_source_split_5720:
    assume {:verifier.code 0} true;
    $i184 := $urem.i32($i183, $i92);
    goto corral_source_split_5721;

  corral_source_split_5721:
    assume {:verifier.code 0} true;
    $i185 := $eq.i32($i184, 0);
    goto corral_source_split_5722;

  corral_source_split_5722:
    assume {:verifier.code 0} true;
    assume {:branchcond $i185} true;
    goto $bb71, $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    assume !($i185 == 1);
    goto $bb68;

  $bb71:
    assume $i185 == 1;
    goto corral_source_split_5724;

  corral_source_split_5724:
    assume {:verifier.code 0} true;
    $i186 := 1;
    goto $bb73;

  $bb63:
    assume $i169 == 1;
    goto corral_source_split_5699;

  corral_source_split_5699:
    assume {:verifier.code 0} true;
    $i170 := $xor.i32($i124, 256);
    call {:si_unique_call 1089} {:cexpr "token"} boogie_si_record_i32($i170);
    goto corral_source_split_5700;

  corral_source_split_5700:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i170, $sub.i32(0, 2147483648));
    call {:si_unique_call 1090} {:cexpr "token"} boogie_si_record_i32($i171);
    goto corral_source_split_5701;

  corral_source_split_5701:
    assume {:verifier.code 0} true;
    $i172, $i173 := $i171, 1;
    goto $bb65;

  $bb58:
    assume $i157 == 1;
    goto corral_source_split_5681;

  corral_source_split_5681:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p123, $mul.ref(0, 136)), $mul.ref(4, 1));
    goto corral_source_split_5682;

  corral_source_split_5682:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p158, 1);
    goto corral_source_split_5683;

  corral_source_split_5683:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb55:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb56;

  $bb39:
    assume $i115 == 1;
    goto corral_source_split_5620;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    $i116 := $xor.i32($i96, $sub.i32(0, 2147483648));
    call {:si_unique_call 1074} {:cexpr "token"} boogie_si_record_i32($i116);
    goto corral_source_split_5621;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    $i117 := $i116;
    goto $bb41;

  $bb36:
    assume $i106 == 1;
    goto corral_source_split_5607;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_5608;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    $p108 := $load.ref($M.0, $p107);
    goto corral_source_split_5609;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p108, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_5610;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    $i110 := $load.i32($M.0, $p109);
    goto corral_source_split_5611;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p95, $mul.ref(0, 136)), $mul.ref(4, 1));
    goto corral_source_split_5612;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p111, $i110);
    goto corral_source_split_5613;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb32:
    assume $i81 == 1;
    goto corral_source_split_5581;

  corral_source_split_5581:
    assume {:verifier.code 0} true;
    $i82 := $or.i32($i66, 256);
    call {:si_unique_call 1066} {:cexpr "token"} boogie_si_record_i32($i82);
    goto corral_source_split_5582;

  corral_source_split_5582:
    assume {:verifier.code 0} true;
    $i83 := $i82;
    goto $bb34;

  $bb29:
    assume $i73 == 1;
    goto corral_source_split_5569;

  corral_source_split_5569:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p65, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_5570;

  corral_source_split_5570:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_5571;

  corral_source_split_5571:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p65, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_5572;

  corral_source_split_5572:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_5573;

  corral_source_split_5573:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5574;

  corral_source_split_5574:
    assume {:verifier.code 0} true;
    $p79 := $load.ref($M.0, $p78);
    goto corral_source_split_5575;

  corral_source_split_5575:
    assume {:verifier.code 0} true;
    $i80 := $sext.i32.i64($i16);
    goto corral_source_split_5576;

  corral_source_split_5576:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_48 := $M.0;
    cmdloc_dummy_var_49 := $M.0;
    call {:si_unique_call 1065} cmdloc_dummy_var_50 := $memcpy.i8(cmdloc_dummy_var_48, cmdloc_dummy_var_49, $p75, $p79, $i80, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_50;
    goto corral_source_split_5577;

  corral_source_split_5577:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb26:
    assume $i68 == 1;
    goto corral_source_split_5561;

  corral_source_split_5561:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb13:
    assume $i35 == 1;
    goto corral_source_split_5511;

  corral_source_split_5511:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1051} $i36 := oxu_buf_alloc($p0, $p4, 8);
    call {:si_unique_call 1052} {:cexpr "ret"} boogie_si_record_i32($i36);
    goto corral_source_split_5512;

  corral_source_split_5512:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_5513;

  corral_source_split_5513:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(112, 1));
    goto corral_source_split_5519;

  corral_source_split_5519:
    assume {:verifier.code 0} true;
    $i39 := $load.i64($M.0, $p38);
    goto corral_source_split_5520;

  corral_source_split_5520:
    assume {:verifier.code 0} true;
    $i40 := $or.i32($i14, 512);
    goto corral_source_split_5521;

  corral_source_split_5521:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1054} vslice_dummy_var_97 := qtd_fill($p4, $i39, 8, $i40, 8);
    goto corral_source_split_5522;

  corral_source_split_5522:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_5523;

  corral_source_split_5523:
    assume {:verifier.code 0} true;
    $p43 := $load.ref($M.0, $p42);
    goto corral_source_split_5524;

  corral_source_split_5524:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_5525;

  corral_source_split_5525:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_5526;

  corral_source_split_5526:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 192)), $mul.ref(144, 1));
    goto corral_source_split_5527;

  corral_source_split_5527:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_5528;

  corral_source_split_5528:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_45 := $M.0;
    cmdloc_dummy_var_46 := $M.0;
    call {:si_unique_call 1055} cmdloc_dummy_var_47 := $memcpy.i8(cmdloc_dummy_var_45, cmdloc_dummy_var_46, $p43, $p47, 8, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_47;
    goto corral_source_split_5529;

  corral_source_split_5529:
    assume {:verifier.code 0} true;
    $i48 := $xor.i32($i14, $sub.i32(0, 2147483648));
    call {:si_unique_call 1056} {:cexpr "token"} boogie_si_record_i32($i48);
    goto corral_source_split_5530;

  corral_source_split_5530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1057} $p49 := ehci_qtd_alloc($p0);
    goto corral_source_split_5531;

  corral_source_split_5531:
    assume {:verifier.code 0} true;
    $i50 := $p2i.ref.i64($p49);
    goto corral_source_split_5532;

  corral_source_split_5532:
    assume {:verifier.code 0} true;
    $i51 := $eq.i64($i50, 0);
    goto corral_source_split_5533;

  corral_source_split_5533:
    assume {:verifier.code 0} true;
    $i52 := $zext.i1.i32($i51);
    goto corral_source_split_5534;

  corral_source_split_5534:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i52);
    goto corral_source_split_5535;

  corral_source_split_5535:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1058} $i54 := ldv__builtin_expect($i53, 0);
    call {:si_unique_call 1059} {:cexpr "tmp___0"} boogie_si_record_i64($i54);
    goto corral_source_split_5536;

  corral_source_split_5536:
    assume {:verifier.code 0} true;
    $i55 := $ne.i64($i54, 0);
    goto corral_source_split_5537;

  corral_source_split_5537:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p49, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_5541;

  corral_source_split_5541:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p56, $p1);
    goto corral_source_split_5542;

  corral_source_split_5542:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p49, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_5543;

  corral_source_split_5543:
    assume {:verifier.code 0} true;
    $i58 := $load.i64($M.0, $p57);
    goto corral_source_split_5544;

  corral_source_split_5544:
    assume {:verifier.code 0} true;
    $i59 := $trunc.i64.i32($i58);
    goto corral_source_split_5545;

  corral_source_split_5545:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p4, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5546;

  corral_source_split_5546:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_5547;

  corral_source_split_5547:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p49, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_5548;

  corral_source_split_5548:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1060} list_add_tail($p61, $p2);
    goto corral_source_split_5549;

  corral_source_split_5549:
    assume {:verifier.code 0} true;
    $i62 := $eq.i32($i16, 0);
    goto corral_source_split_5550;

  corral_source_split_5550:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i64 := $i48;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_5555;

  corral_source_split_5555:
    assume {:verifier.code 0} true;
    $p65, $i66 := $p49, $i64;
    goto $bb25;

  $bb22:
    assume $i62 == 1;
    goto corral_source_split_5552;

  corral_source_split_5552:
    assume {:verifier.code 0} true;
    $i63 := $or.i32($i48, 256);
    call {:si_unique_call 1061} {:cexpr "token"} boogie_si_record_i32($i63);
    goto corral_source_split_5553;

  corral_source_split_5553:
    assume {:verifier.code 0} true;
    $i64 := $i63;
    goto $bb24;

  $bb19:
    assume $i55 == 1;
    goto corral_source_split_5539;

  corral_source_split_5539:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb15:
    assume $i37 == 1;
    goto corral_source_split_5515;

  corral_source_split_5515:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb5:
    assume $i23 == 1;
    goto corral_source_split_5491;

  corral_source_split_5491:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_5492;

  corral_source_split_5492:
    assume {:verifier.code 0} true;
    $i25 := $load.i32($M.0, $p24);
    goto corral_source_split_5493;

  corral_source_split_5493:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_5494;

  corral_source_split_5494:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb7;

  $bb8:
    assume $i26 == 1;
    goto corral_source_split_5496;

  corral_source_split_5496:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i19, 0);
    goto corral_source_split_5497;

  corral_source_split_5497:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    assume !($i27 == 1);
    goto $bb7;

  $bb10:
    assume $i27 == 1;
    goto corral_source_split_5499;

  corral_source_split_5499:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(112, 1));
    goto corral_source_split_5500;

  corral_source_split_5500:
    assume {:verifier.code 0} true;
    $i29 := $load.i64($M.0, $p28);
    goto corral_source_split_5501;

  corral_source_split_5501:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1050} $p30 := phys_to_virt($i29);
    goto corral_source_split_5502;

  corral_source_split_5502:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_5503;

  corral_source_split_5503:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p31, $p30);
    goto corral_source_split_5504;

  corral_source_split_5504:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb1:
    assume $i10 == 1;
    goto corral_source_split_5472;

  corral_source_split_5472:
    assume {:verifier.code 0} true;
    $p11 := $0.ref;
    goto $bb3;

  corral_source_split_5667_dummy:
    assume false;
    return;

  $bb35_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;
}



const submit_async: ref;

axiom submit_async == $sub.ref(0, 339069);

procedure submit_async($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.60, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation submit_async($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p7: ref;
  var $i8: i8;
  var $i9: i32;
  var $p10: ref;
  var $p11: ref;
  var $i12: i64;
  var $i13: i64;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i17: i64;
  var $i18: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $i32: i8;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i64;
  var $i37: i64;
  var $i38: i1;
  var $p39: ref;
  var $p19: ref;
  var $i20: i32;
  var $p40: ref;
  var $i41: i64;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1096} {:cexpr "submit_async:arg:mem_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_5757;

  corral_source_split_5757:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_5758;

  corral_source_split_5758:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5759;

  corral_source_split_5759:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p5, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5760;

  corral_source_split_5760:
    assume {:verifier.code 0} true;
    $i8 := $load.i8($M.0, $p7);
    goto corral_source_split_5761;

  corral_source_split_5761:
    assume {:verifier.code 0} true;
    $i9 := $zext.i8.i32($i8);
    call {:si_unique_call 1097} {:cexpr "epnum"} boogie_si_record_i32($i9);
    goto corral_source_split_5762;

  corral_source_split_5762:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1098} ldv_spin_lock();
    goto corral_source_split_5763;

  corral_source_split_5763:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1099} $p10 := oxu_to_hcd($p0);
    goto corral_source_split_5764;

  corral_source_split_5764:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 968)), $mul.ref(568, 1));
    goto corral_source_split_5765;

  corral_source_split_5765:
    assume {:verifier.code 0} true;
    $i12 := $load.i64($M.0, $p11);
    goto corral_source_split_5766;

  corral_source_split_5766:
    assume {:verifier.code 0} true;
    $i13 := $and.i64($i12, 1);
    goto corral_source_split_5767;

  corral_source_split_5767:
    assume {:verifier.code 0} true;
    $i14 := $eq.i64($i13, 0);
    goto corral_source_split_5768;

  corral_source_split_5768:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_5769;

  corral_source_split_5769:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_5770;

  corral_source_split_5770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1100} $i17 := ldv__builtin_expect($i16, 0);
    call {:si_unique_call 1101} {:cexpr "tmp___0"} boogie_si_record_i64($i17);
    goto corral_source_split_5771;

  corral_source_split_5771:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, 0);
    goto corral_source_split_5772;

  corral_source_split_5772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i18 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_5786;

  corral_source_split_5786:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5787;

  corral_source_split_5787:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5788;

  corral_source_split_5788:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1105} $p24 := qh_append_tds($p0, $p1, $p2, $i9, $p23);
    goto SeqInstr_355, SeqInstr_356;

  SeqInstr_356:
    assume assertsPassed;
    goto SeqInstr_357;

  SeqInstr_357:
    goto corral_source_split_5789;

  corral_source_split_5789:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5790;

  corral_source_split_5790:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_5791;

  corral_source_split_5791:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_5792;

  corral_source_split_5792:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_5793;

  corral_source_split_5793:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1106} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1107} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_5794;

  corral_source_split_5794:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_5795;

  corral_source_split_5795:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_5799;

  corral_source_split_5799:
    assume {:verifier.code 0} true;
    $i32 := $load.i8($M.0, $p31);
    goto corral_source_split_5800;

  corral_source_split_5800:
    assume {:verifier.code 0} true;
    $i33 := $zext.i8.i32($i32);
    goto corral_source_split_5801;

  corral_source_split_5801:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i33, 3);
    goto corral_source_split_5802;

  corral_source_split_5802:
    assume {:verifier.code 0} true;
    $i35 := $zext.i1.i32($i34);
    goto corral_source_split_5803;

  corral_source_split_5803:
    assume {:verifier.code 0} true;
    $i36 := $sext.i32.i64($i35);
    goto corral_source_split_5804;

  corral_source_split_5804:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1108} $i37 := ldv__builtin_expect($i36, 1);
    call {:si_unique_call 1109} {:cexpr "tmp___3"} boogie_si_record_i64($i37);
    goto corral_source_split_5805;

  corral_source_split_5805:
    assume {:verifier.code 0} true;
    $i38 := $ne.i64($i37, 0);
    goto corral_source_split_5806;

  corral_source_split_5806:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p19, $i20 := $p24, 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5776;

  corral_source_split_5776:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_5777;

  corral_source_split_5777:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1102} spin_unlock_irqrestore($p40, $u0);
    goto corral_source_split_5778;

  corral_source_split_5778:
    assume {:verifier.code 0} true;
    $i41 := $p2i.ref.i64($p19);
    goto corral_source_split_5779;

  corral_source_split_5779:
    assume {:verifier.code 0} true;
    $i42 := $eq.i64($i41, 0);
    goto corral_source_split_5780;

  corral_source_split_5780:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_5781;

  corral_source_split_5781:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_5782;

  corral_source_split_5782:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1103} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 1104} {:cexpr "tmp___4"} boogie_si_record_i64($i45);
    goto corral_source_split_5783;

  corral_source_split_5783:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_5784;

  corral_source_split_5784:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_5812;

  corral_source_split_5812:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1112} qtd_list_free($p0, $p1, $p2);
    goto corral_source_split_5813;

  corral_source_split_5813:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume $i38 == 1;
    goto corral_source_split_5808;

  corral_source_split_5808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1110} $p39 := qh_get($p24);
    goto corral_source_split_5809;

  corral_source_split_5809:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1111} qh_link_async($p0, $p39);
    goto SeqInstr_358, SeqInstr_359;

  SeqInstr_359:
    assume assertsPassed;
    goto SeqInstr_360;

  SeqInstr_360:
    goto corral_source_split_5810;

  corral_source_split_5810:
    assume {:verifier.code 0} true;
    goto $bb10;

  SeqInstr_358:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i30 == 1;
    goto corral_source_split_5797;

  corral_source_split_5797:
    assume {:verifier.code 0} true;
    $p19, $i20 := $p24, $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_355:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i18 == 1;
    goto corral_source_split_5774;

  corral_source_split_5774:
    assume {:verifier.code 0} true;
    $p19, $i20 := $0.ref, $sub.i32(0, 108);
    goto $bb3;
}



const intr_submit: ref;

axiom intr_submit == $sub.ref(0, 340101);

procedure intr_submit($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.0, $M.50, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.57, $CurrAddr, $M.58, $M.59, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.46, $M.47, assertsPassed;



implementation intr_submit($p0: ref, $p1: ref, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p8: ref;
  var $i9: i8;
  var $i10: i32;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $i14: i64;
  var $i15: i1;
  var $i16: i32;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $i28: i8;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i1;
  var $i33: i32;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $i39: i1;
  var $i40: i32;
  var $i41: i64;
  var $i42: i64;
  var $i43: i1;
  var $p44: ref;
  var $p46: ref;
  var $i47: i32;
  var $i48: i32;
  var $p50: ref;
  var $i20: i32;
  var $p51: ref;
  var $i52: i1;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1113} $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
    call {:si_unique_call 1114} {:cexpr "intr_submit:arg:mem_flags"} boogie_si_record_i32($i3);
    goto corral_source_split_5815;

  corral_source_split_5815:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_5816;

  corral_source_split_5816:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_5817;

  corral_source_split_5817:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($add.ref($p6, $mul.ref(0, 72)), $mul.ref(0, 1)), $mul.ref(2, 1));
    goto corral_source_split_5818;

  corral_source_split_5818:
    assume {:verifier.code 0} true;
    $i9 := $load.i8($M.0, $p8);
    goto corral_source_split_5819;

  corral_source_split_5819:
    assume {:verifier.code 0} true;
    $i10 := $zext.i8.i32($i9);
    call {:si_unique_call 1115} {:cexpr "epnum"} boogie_si_record_i32($i10);
    goto corral_source_split_5820;

  corral_source_split_5820:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1116} ldv_spin_lock();
    goto corral_source_split_5821;

  corral_source_split_5821:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1117} $p11 := oxu_to_hcd($p0);
    goto corral_source_split_5822;

  corral_source_split_5822:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 968)), $mul.ref(568, 1));
    goto corral_source_split_5823;

  corral_source_split_5823:
    assume {:verifier.code 0} true;
    $i13 := $load.i64($M.0, $p12);
    goto corral_source_split_5824;

  corral_source_split_5824:
    assume {:verifier.code 0} true;
    $i14 := $and.i64($i13, 1);
    goto corral_source_split_5825;

  corral_source_split_5825:
    assume {:verifier.code 0} true;
    $i15 := $eq.i64($i14, 0);
    goto corral_source_split_5826;

  corral_source_split_5826:
    assume {:verifier.code 0} true;
    $i16 := $zext.i1.i32($i15);
    goto corral_source_split_5827;

  corral_source_split_5827:
    assume {:verifier.code 0} true;
    $i17 := $sext.i32.i64($i16);
    goto corral_source_split_5828;

  corral_source_split_5828:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1118} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1119} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_5829;

  corral_source_split_5829:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5830;

  corral_source_split_5830:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1121} INIT_LIST_HEAD($p4);
    goto corral_source_split_5839;

  corral_source_split_5839:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_5840;

  corral_source_split_5840:
    assume {:verifier.code 0} true;
    $p22 := $load.ref($M.0, $p21);
    goto corral_source_split_5841;

  corral_source_split_5841:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5842;

  corral_source_split_5842:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1122} $p24 := qh_append_tds($p0, $p1, $p4, $i10, $p23);
    goto SeqInstr_361, SeqInstr_362;

  SeqInstr_362:
    assume assertsPassed;
    goto SeqInstr_363;

  SeqInstr_363:
    goto corral_source_split_5843;

  corral_source_split_5843:
    assume {:verifier.code 0} true;
    $i25 := $p2i.ref.i64($p24);
    goto corral_source_split_5844;

  corral_source_split_5844:
    assume {:verifier.code 0} true;
    $i26 := $eq.i64($i25, 0);
    goto corral_source_split_5845;

  corral_source_split_5845:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p24, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_5849;

  corral_source_split_5849:
    assume {:verifier.code 0} true;
    $i28 := $load.i8($M.0, $p27);
    goto corral_source_split_5850;

  corral_source_split_5850:
    assume {:verifier.code 0} true;
    $i29 := $zext.i8.i32($i28);
    goto corral_source_split_5851;

  corral_source_split_5851:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i29, 3);
    goto corral_source_split_5852;

  corral_source_split_5852:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    $i33 := 0;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_5860;

  corral_source_split_5860:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(80, 1));
    goto corral_source_split_5861;

  corral_source_split_5861:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_5862;

  corral_source_split_5862:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 72)), $mul.ref(32, 1));
    goto corral_source_split_5863;

  corral_source_split_5863:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1125} $p37 := qh_append_tds($p0, $p1, $p2, $i10, $p36);
    goto SeqInstr_367, SeqInstr_368;

  SeqInstr_368:
    assume assertsPassed;
    goto SeqInstr_369;

  SeqInstr_369:
    goto corral_source_split_5864;

  corral_source_split_5864:
    assume {:verifier.code 0} true;
    $i38 := $p2i.ref.i64($p37);
    goto corral_source_split_5865;

  corral_source_split_5865:
    assume {:verifier.code 0} true;
    $i39 := $eq.i64($i38, 0);
    goto corral_source_split_5866;

  corral_source_split_5866:
    assume {:verifier.code 0} true;
    $i40 := $zext.i1.i32($i39);
    goto corral_source_split_5867;

  corral_source_split_5867:
    assume {:verifier.code 0} true;
    $i41 := $sext.i32.i64($i40);
    goto corral_source_split_5868;

  corral_source_split_5868:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1126} $i42 := ldv__builtin_expect($i41, 0);
    call {:si_unique_call 1127} {:cexpr "tmp___1"} boogie_si_record_i64($i42);
    goto corral_source_split_5869;

  corral_source_split_5869:
    assume {:verifier.code 0} true;
    $i43 := $ne.i64($i42, 0);
    goto corral_source_split_5870;

  corral_source_split_5870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1129} $p44 := oxu_to_hcd($p0);
    goto corral_source_split_5874;

  corral_source_split_5874:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(252, 1));
    goto corral_source_split_5875;

  corral_source_split_5875:
    assume {:verifier.code 0} true;
    $i47 := $load.i32($M.0, $p46);
    goto corral_source_split_5876;

  corral_source_split_5876:
    assume {:verifier.code 0} true;
    $i48 := $add.i32($i47, 1);
    goto corral_source_split_5877;

  corral_source_split_5877:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p44, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(252, 1));
    goto corral_source_split_5878;

  corral_source_split_5878:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p50, $i48);
    goto corral_source_split_5879;

  corral_source_split_5879:
    assume {:verifier.code 0} true;
    $i20 := $i33;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5834;

  corral_source_split_5834:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_5835;

  corral_source_split_5835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1120} spin_unlock_irqrestore($p51, $u0);
    goto corral_source_split_5836;

  corral_source_split_5836:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i20, 0);
    goto corral_source_split_5837;

  corral_source_split_5837:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $r := $i20;
    return;

  $bb18:
    assume $i52 == 1;
    goto corral_source_split_5881;

  corral_source_split_5881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1130} qtd_list_free($p0, $p1, $p2);
    goto corral_source_split_5882;

  corral_source_split_5882:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb14:
    assume $i43 == 1;
    call {:si_unique_call 1128} devirtbounce.3(0, .str, 2227, 12);
    goto corral_source_split_5872;

  corral_source_split_5872:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    call intr_submit_loop_$bb16();
    goto $bb16_last;

  SeqInstr_367:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i30 == 1;
    goto corral_source_split_5854;

  corral_source_split_5854:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1123} $i31 := qh_schedule($p0, $p24);
    goto SeqInstr_364, SeqInstr_365;

  SeqInstr_365:
    assume assertsPassed;
    goto SeqInstr_366;

  SeqInstr_366:
    call {:si_unique_call 1124} {:cexpr "status"} boogie_si_record_i32($i31);
    goto corral_source_split_5855;

  corral_source_split_5855:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_5856;

  corral_source_split_5856:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb13;

  $bb10:
    assume $i32 == 1;
    goto corral_source_split_5858;

  corral_source_split_5858:
    assume {:verifier.code 0} true;
    $i20 := $i31;
    goto $bb3;

  SeqInstr_364:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i26 == 1;
    goto corral_source_split_5847;

  corral_source_split_5847:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 12);
    goto $bb3;

  SeqInstr_361:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5832;

  corral_source_split_5832:
    assume {:verifier.code 0} true;
    $i20 := $sub.i32(0, 108);
    goto $bb3;

  $bb16_dummy:
    assume false;
    return;

  $bb16_last:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;
}



const itd_submit: ref;

axiom itd_submit == $sub.ref(0, 341133);

procedure itd_submit($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation itd_submit($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1131} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1132} {:cexpr "itd_submit:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5884;

  corral_source_split_5884:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5885;

  corral_source_split_5885:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.2);
    goto corral_source_split_5886;

  corral_source_split_5886:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5887;

  corral_source_split_5887:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.85);
    goto corral_source_split_5888;

  corral_source_split_5888:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5889;

  corral_source_split_5889:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str);
    goto corral_source_split_5890;

  corral_source_split_5890:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5891;

  corral_source_split_5891:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.86);
    goto corral_source_split_5892;

  corral_source_split_5892:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5893;

  corral_source_split_5893:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5894;

  corral_source_split_5894:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.6, $p9);
    goto corral_source_split_5895;

  corral_source_split_5895:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5896;

  corral_source_split_5896:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 2243);
    goto corral_source_split_5897;

  corral_source_split_5897:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p9, $i12);
    goto corral_source_split_5898;

  corral_source_split_5898:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5899;

  corral_source_split_5899:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, 0);
    goto corral_source_split_5900;

  corral_source_split_5900:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5901;

  corral_source_split_5901:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.7, $p14);
    goto corral_source_split_5902;

  corral_source_split_5902:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5903;

  corral_source_split_5903:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5904;

  corral_source_split_5904:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1133} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1134} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_5905;

  corral_source_split_5905:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5906;

  corral_source_split_5906:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 38);
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5908;

  corral_source_split_5908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1135} $p20 := oxu_to_hcd($p0);
    goto corral_source_split_5909;

  corral_source_split_5909:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5910;

  corral_source_split_5910:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5911;

  corral_source_split_5911:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1136} __dynamic_dev_dbg.ref.ref.ref($p3, $p23, .str.86);
    goto corral_source_split_5912;

  corral_source_split_5912:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const sitd_submit: ref;

axiom sitd_submit == $sub.ref(0, 342165);

procedure sitd_submit($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation sitd_submit($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i24;
  var $i11: i24;
  var $i12: i24;
  var $p13: ref;
  var $p14: ref;
  var $i15: i8;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i1;
  var $p20: ref;
  var $p22: ref;
  var $p23: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1137} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1138} {:cexpr "sitd_submit:arg:mem_flags"} boogie_si_record_i32($i2);
    goto corral_source_split_5914;

  corral_source_split_5914:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_5915;

  corral_source_split_5915:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p4, .str.2);
    goto corral_source_split_5916;

  corral_source_split_5916:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_5917;

  corral_source_split_5917:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p5, .str.87);
    goto corral_source_split_5918;

  corral_source_split_5918:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_5919;

  corral_source_split_5919:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p6, .str);
    goto corral_source_split_5920;

  corral_source_split_5920:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_5921;

  corral_source_split_5921:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p7, .str.88);
    goto corral_source_split_5922;

  corral_source_split_5922:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_5923;

  corral_source_split_5923:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_5924;

  corral_source_split_5924:
    assume {:verifier.code 0} true;
    $i10 := $load.i24($M.6, $p9);
    goto corral_source_split_5925;

  corral_source_split_5925:
    assume {:verifier.code 0} true;
    $i11 := $and.i24($i10, $sub.i24(0, 262144));
    goto corral_source_split_5926;

  corral_source_split_5926:
    assume {:verifier.code 0} true;
    $i12 := $or.i24($i11, 2250);
    goto corral_source_split_5927;

  corral_source_split_5927:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p9, $i12);
    goto corral_source_split_5928;

  corral_source_split_5928:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5929;

  corral_source_split_5929:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p13, 0);
    goto corral_source_split_5930;

  corral_source_split_5930:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_5931;

  corral_source_split_5931:
    assume {:verifier.code 0} true;
    $i15 := $load.i8($M.7, $p14);
    goto corral_source_split_5932;

  corral_source_split_5932:
    assume {:verifier.code 0} true;
    $i16 := $zext.i8.i64($i15);
    goto corral_source_split_5933;

  corral_source_split_5933:
    assume {:verifier.code 0} true;
    $i17 := $and.i64($i16, 1);
    goto corral_source_split_5934;

  corral_source_split_5934:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1139} $i18 := ldv__builtin_expect($i17, 0);
    call {:si_unique_call 1140} {:cexpr "tmp___0"} boogie_si_record_i64($i18);
    goto corral_source_split_5935;

  corral_source_split_5935:
    assume {:verifier.code 0} true;
    $i19 := $ne.i64($i18, 0);
    goto corral_source_split_5936;

  corral_source_split_5936:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := $sub.i32(0, 38);
    return;

  $bb1:
    assume $i19 == 1;
    goto corral_source_split_5938;

  corral_source_split_5938:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1141} $p20 := oxu_to_hcd($p0);
    goto corral_source_split_5939;

  corral_source_split_5939:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($add.ref($p20, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_5940;

  corral_source_split_5940:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_5941;

  corral_source_split_5941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1142} __dynamic_dev_dbg.ref.ref.ref($p3, $p23, .str.88);
    goto corral_source_split_5942;

  corral_source_split_5942:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const qh_append_tds: ref;

axiom qh_append_tds == $sub.ref(0, 343197);

procedure qh_append_tds($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $CurrAddr, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation qh_append_tds($p0: ref, $p1: ref, $p2: ref, $i3: i32, $p4: ref) returns ($r: ref)
{
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i1;
  var $p13: ref;
  var $p15: ref;
  var $i16: i64;
  var $i17: i1;
  var $i18: i32;
  var $i19: i64;
  var $i20: i64;
  var $i21: i1;
  var $i22: i32;
  var $i23: i1;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i1;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p28: ref;
  var $i33: i1;
  var $i34: i32;
  var $i35: i64;
  var $i36: i64;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;
  var $i40: i32;
  var $i41: i32;
  var $i42: i1;
  var $p43: ref;
  var $i44: i32;
  var $i45: i32;
  var $p46: ref;
  var $i47: i64;
  var $i48: i1;
  var $i49: i32;
  var $i50: i64;
  var $i51: i64;
  var $i52: i1;
  var $p53: ref;
  var $i54: i32;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i64;
  var $p70: ref;
  var $p71: ref;
  var $i72: i64;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $i78: i32;
  var $p79: ref;
  var $i80: i32;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p85: ref;
  var cmdloc_dummy_var_51: [ref]i8;
  var cmdloc_dummy_var_52: [ref]i8;
  var cmdloc_dummy_var_53: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1143} {:cexpr "qh_append_tds:arg:epnum"} boogie_si_record_i32($i3);
    goto corral_source_split_5944;

  corral_source_split_5944:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_5945;

  corral_source_split_5945:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_5946;

  corral_source_split_5946:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_5947;

  corral_source_split_5947:
    assume {:verifier.code 0} true;
    $i8 := $eq.i64($i7, 0);
    goto corral_source_split_5948;

  corral_source_split_5948:
    assume {:verifier.code 0} true;
    $i9 := $zext.i1.i32($i8);
    goto corral_source_split_5949;

  corral_source_split_5949:
    assume {:verifier.code 0} true;
    $i10 := $sext.i32.i64($i9);
    goto corral_source_split_5950;

  corral_source_split_5950:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1144} $i11 := ldv__builtin_expect($i10, 0);
    call {:si_unique_call 1145} {:cexpr "tmp"} boogie_si_record_i64($i11);
    goto corral_source_split_5951;

  corral_source_split_5951:
    assume {:verifier.code 0} true;
    $i12 := $ne.i64($i11, 0);
    goto corral_source_split_5952;

  corral_source_split_5952:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    $p15 := $p5;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_5959;

  corral_source_split_5959:
    assume {:verifier.code 0} true;
    $i16 := $p2i.ref.i64($p15);
    goto corral_source_split_5960;

  corral_source_split_5960:
    assume {:verifier.code 0} true;
    $i17 := $ne.i64($i16, 0);
    goto corral_source_split_5961;

  corral_source_split_5961:
    assume {:verifier.code 0} true;
    $i18 := $zext.i1.i32($i17);
    goto corral_source_split_5962;

  corral_source_split_5962:
    assume {:verifier.code 0} true;
    $i19 := $sext.i32.i64($i18);
    goto corral_source_split_5963;

  corral_source_split_5963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1147} $i20 := ldv__builtin_expect($i19, 1);
    call {:si_unique_call 1148} {:cexpr "tmp___5"} boogie_si_record_i64($i20);
    goto corral_source_split_5964;

  corral_source_split_5964:
    assume {:verifier.code 0} true;
    $i21 := $ne.i64($i20, 0);
    goto corral_source_split_5965;

  corral_source_split_5965:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $r := $p15;
    return;

  $bb4:
    assume $i21 == 1;
    goto corral_source_split_5967;

  corral_source_split_5967:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1149} $i22 := list_empty($p2);
    call {:si_unique_call 1150} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_5968;

  corral_source_split_5968:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_5969;

  corral_source_split_5969:
    assume {:verifier.code 0} true;
    $i24 := $zext.i1.i32($i23);
    goto corral_source_split_5970;

  corral_source_split_5970:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i24);
    goto corral_source_split_5971;

  corral_source_split_5971:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1151} $i26 := ldv__builtin_expect($i25, 0);
    call {:si_unique_call 1152} {:cexpr "tmp___1"} boogie_si_record_i64($i26);
    goto corral_source_split_5972;

  corral_source_split_5972:
    assume {:verifier.code 0} true;
    $i27 := $ne.i64($i26, 0);
    goto corral_source_split_5973;

  corral_source_split_5973:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i27 == 1);
    goto corral_source_split_5977;

  corral_source_split_5977:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_5978;

  corral_source_split_5978:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.0, $p29);
    goto corral_source_split_5979;

  corral_source_split_5979:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p30);
    goto corral_source_split_5980;

  corral_source_split_5980:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($p31, $mul.ref($sub.ref(0, 64), 136));
    assume {:verifier.code 0} true;
    $p28 := $p32;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_5982;

  corral_source_split_5982:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i3, 0);
    goto corral_source_split_5983;

  corral_source_split_5983:
    assume {:verifier.code 0} true;
    $i34 := $zext.i1.i32($i33);
    goto corral_source_split_5984;

  corral_source_split_5984:
    assume {:verifier.code 0} true;
    $i35 := $sext.i32.i64($i34);
    goto corral_source_split_5985;

  corral_source_split_5985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1153} $i36 := ldv__builtin_expect($i35, 0);
    call {:si_unique_call 1154} {:cexpr "tmp___2"} boogie_si_record_i64($i36);
    goto corral_source_split_5986;

  corral_source_split_5986:
    assume {:verifier.code 0} true;
    $i37 := $ne.i64($i36, 0);
    goto corral_source_split_5987;

  corral_source_split_5987:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i37 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i47 := $p2i.ref.i64($p28);
    goto corral_source_split_6003;

  corral_source_split_6003:
    assume {:verifier.code 0} true;
    $i48 := $ne.i64($i47, 0);
    goto corral_source_split_6004;

  corral_source_split_6004:
    assume {:verifier.code 0} true;
    $i49 := $zext.i1.i32($i48);
    goto corral_source_split_6005;

  corral_source_split_6005:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i49);
    goto corral_source_split_6006;

  corral_source_split_6006:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1155} $i51 := ldv__builtin_expect($i50, 1);
    call {:si_unique_call 1156} {:cexpr "tmp___4"} boogie_si_record_i64($i51);
    goto corral_source_split_6007;

  corral_source_split_6007:
    assume {:verifier.code 0} true;
    $i52 := $ne.i64($i51, 0);
    goto corral_source_split_6008;

  corral_source_split_6008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb15:
    assume $i52 == 1;
    goto corral_source_split_6010;

  corral_source_split_6010:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p28, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_6011;

  corral_source_split_6011:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    call {:si_unique_call 1157} {:cexpr "token"} boogie_si_record_i32($i54);
    goto corral_source_split_6012;

  corral_source_split_6012:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p28, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_6013;

  corral_source_split_6013:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p55, 64);
    call {:si_unique_call 1158} devirtbounce.6(0);
    goto corral_source_split_6014;

  corral_source_split_6014:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_6015;

  corral_source_split_6015:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_6016;

  corral_source_split_6016:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_6017;

  corral_source_split_6017:
    assume {:verifier.code 0} true;
    $i59 := $load.i64($M.0, $p58);
    call {:si_unique_call 1159} {:cexpr "dma"} boogie_si_record_i64($i59);
    goto corral_source_split_6018;

  corral_source_split_6018:
    assume {:verifier.code 0} true;
    $p60 := $bitcast.ref.ref($p57);
    goto corral_source_split_6019;

  corral_source_split_6019:
    assume {:verifier.code 0} true;
    $p61 := $bitcast.ref.ref($p28);
    goto corral_source_split_6020;

  corral_source_split_6020:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_51 := $M.0;
    cmdloc_dummy_var_52 := $M.0;
    call {:si_unique_call 1160} cmdloc_dummy_var_53 := $memcpy.i8(cmdloc_dummy_var_51, cmdloc_dummy_var_52, $p60, $p61, 136, $zext.i32.i64(8), 0 == 1);
    $M.0 := cmdloc_dummy_var_53;
    goto corral_source_split_6021;

  corral_source_split_6021:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p57, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_6022;

  corral_source_split_6022:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i59);
    goto corral_source_split_6023;

  corral_source_split_6023:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p28, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_6024;

  corral_source_split_6024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1161} list_del($p63);
    goto corral_source_split_6025;

  corral_source_split_6025:
    assume {:verifier.code 0} true;
    $p64 := $add.ref($add.ref($p57, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_6026;

  corral_source_split_6026:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1162} list_add($p64, $p2);
    goto corral_source_split_6027;

  corral_source_split_6027:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_6028;

  corral_source_split_6028:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_6029;

  corral_source_split_6029:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1163} list_splice($p2, $p67);
    goto corral_source_split_6030;

  corral_source_split_6030:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p28, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_6031;

  corral_source_split_6031:
    assume {:verifier.code 0} true;
    $i69 := $load.i64($M.0, $p68);
    goto corral_source_split_6032;

  corral_source_split_6032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1164} ehci_qtd_init($p28, $i69);
    goto corral_source_split_6033;

  corral_source_split_6033:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_6034;

  corral_source_split_6034:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p70, $p28);
    goto corral_source_split_6035;

  corral_source_split_6035:
    assume {:verifier.code 0} true;
    $p71 := $add.ref($add.ref($p28, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_6036;

  corral_source_split_6036:
    assume {:verifier.code 0} true;
    $i72 := $load.i64($M.0, $p71);
    call {:si_unique_call 1165} {:cexpr "dma"} boogie_si_record_i64($i72);
    goto corral_source_split_6037;

  corral_source_split_6037:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(88, 1)), $mul.ref(8, 1));
    goto corral_source_split_6038;

  corral_source_split_6038:
    assume {:verifier.code 0} true;
    $p75 := $load.ref($M.0, $p74);
    goto corral_source_split_6039;

  corral_source_split_6039:
    assume {:verifier.code 0} true;
    $p76 := $bitcast.ref.ref($p75);
    goto corral_source_split_6040;

  corral_source_split_6040:
    assume {:verifier.code 0} true;
    goto corral_source_split_6041;

  corral_source_split_6041:
    assume {:verifier.code 0} true;
    $i78 := $trunc.i64.i32($i72);
    goto corral_source_split_6042;

  corral_source_split_6042:
    assume {:verifier.code 0} true;
    $p79 := $add.ref($add.ref($p76, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(0, 1));
    goto corral_source_split_6043;

  corral_source_split_6043:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p79, $i78);
    goto corral_source_split_6044;

  corral_source_split_6044:
    assume {:verifier.code 0} true;
    $i80 := $and.i32($i54, $sub.i32(0, 129));
    goto corral_source_split_6045;

  corral_source_split_6045:
    assume {:verifier.code 0} true;
    $p81 := $add.ref($add.ref($p57, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_6046;

  corral_source_split_6046:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p81, $i80);
    call {:si_unique_call 1166} devirtbounce.6(0);
    goto corral_source_split_6047;

  corral_source_split_6047:
    assume {:verifier.code 0} true;
    $p82 := $add.ref($add.ref($p57, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_6048;

  corral_source_split_6048:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p82, $i54);
    goto corral_source_split_6049;

  corral_source_split_6049:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1167} $p83 := qh_get($p15);
    goto corral_source_split_6050;

  corral_source_split_6050:
    assume {:verifier.code 0} true;
    goto corral_source_split_6051;

  corral_source_split_6051:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(8, 1));
    goto corral_source_split_6052;

  corral_source_split_6052:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p85, $p83);
    goto corral_source_split_6053;

  corral_source_split_6053:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb9:
    assume $i37 == 1;
    goto corral_source_split_5989;

  corral_source_split_5989:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_5990;

  corral_source_split_5990:
    assume {:verifier.code 0} true;
    $i39 := $load.i32($M.0, $p38);
    goto corral_source_split_5991;

  corral_source_split_5991:
    assume {:verifier.code 0} true;
    $i40 := $lshr.i32($i39, 8);
    goto corral_source_split_5992;

  corral_source_split_5992:
    assume {:verifier.code 0} true;
    $i41 := $and.i32($i40, 127);
    goto corral_source_split_5993;

  corral_source_split_5993:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_5994;

  corral_source_split_5994:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i42 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb11:
    assume $i42 == 1;
    goto corral_source_split_5996;

  corral_source_split_5996:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_5997;

  corral_source_split_5997:
    assume {:verifier.code 0} true;
    $i44 := $load.i32($M.0, $p43);
    goto corral_source_split_5998;

  corral_source_split_5998:
    assume {:verifier.code 0} true;
    $i45 := $and.i32($i44, $sub.i32(0, 128));
    goto corral_source_split_5999;

  corral_source_split_5999:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p15, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_6000;

  corral_source_split_6000:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p46, $i45);
    goto corral_source_split_6001;

  corral_source_split_6001:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb6:
    assume $i27 == 1;
    goto corral_source_split_5975;

  corral_source_split_5975:
    assume {:verifier.code 0} true;
    $p28 := $0.ref;
    goto $bb8;

  $bb1:
    assume $i12 == 1;
    goto corral_source_split_5954;

  corral_source_split_5954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1146} $p13 := qh_make($p0, $p1, 32);
    goto SeqInstr_370, SeqInstr_371;

  SeqInstr_371:
    assume assertsPassed;
    goto SeqInstr_372;

  SeqInstr_372:
    goto corral_source_split_5955;

  corral_source_split_5955:
    assume {:verifier.code 0} true;
    goto corral_source_split_5956;

  corral_source_split_5956:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $p13);
    goto corral_source_split_5957;

  corral_source_split_5957:
    assume {:verifier.code 0} true;
    $p15 := $p13;
    goto $bb3;

  SeqInstr_370:
    assume !assertsPassed;
    return;
}



const qtd_list_free: ref;

axiom qtd_list_free == $sub.ref(0, 344229);

procedure qtd_list_free($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0, $M.22;



implementation qtd_list_free($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i64;
  var $i9: i1;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i64;
  var $i18: i1;
  var $p10: ref;
  var $p11: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6055;

  corral_source_split_6055:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6056;

  corral_source_split_6056:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6057;

  corral_source_split_6057:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6058;

  corral_source_split_6058:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6059;

  corral_source_split_6059:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p4);
    goto corral_source_split_6060;

  corral_source_split_6060:
    assume {:verifier.code 0} true;
    $i8 := $p2i.ref.i64($p2);
    goto corral_source_split_6061;

  corral_source_split_6061:
    assume {:verifier.code 0} true;
    $i9 := $ne.i64($i7, $i8);
    goto corral_source_split_6062;

  corral_source_split_6062:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i9 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i9 == 1;
    goto corral_source_split_6064;

  corral_source_split_6064:
    assume {:verifier.code 0} true;
    $p10, $p11 := $p6, $p4;
    goto $bb4;

  $bb4:
    call $p12, $p13, $p14, $p15, $p16, $i17, $i18, $p10, $p11 := qtd_list_free_loop_$bb4($p0, $i8, $p12, $p13, $p14, $p15, $p16, $i17, $i18, $p10, $p11);
    goto $bb4_last;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_6068;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($p12, $mul.ref($sub.ref(0, 64), 136));
    goto corral_source_split_6069;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p12, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(64, 1));
    goto corral_source_split_6070;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} list_del($p14);
    goto corral_source_split_6071;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} oxu_qtd_free($p0, $p13);
    goto corral_source_split_6072;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6073;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_6074;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    $i17 := $p2i.ref.i64($p10);
    goto corral_source_split_6075;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    $i18 := $ne.i64($i17, $i8);
    goto corral_source_split_6076;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i18 == 1);
    goto corral_source_split_6078;

  corral_source_split_6078:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i18 == 1;
    assume {:verifier.code 0} true;
    $p10, $p11 := $p16, $p10;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6066;
}



const qh_make: ref;

axiom qh_make == $sub.ref(0, 345261);

procedure qh_make($p0: ref, $p1: ref, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $CurrAddr, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation qh_make($p0: ref, $p1: ref, $i2: i32) returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $i7: i1;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i32;
  var $i18: i32;
  var $i19: i32;
  var $p20: ref;
  var $i21: i32;
  var $i22: i32;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $i29: i32;
  var $i30: i1;
  var $i31: i32;
  var $i32: i16;
  var $i33: i32;
  var $i34: i1;
  var $i35: i32;
  var $i36: i32;
  var $i37: i32;
  var $i38: i32;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i8;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i32;
  var $i50: i1;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i16;
  var $p57: ref;
  var $p58: ref;
  var $i59: i16;
  var $i60: i32;
  var $i61: i1;
  var $p62: ref;
  var $i63: i32;
  var $i64: i1;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $i71: i24;
  var $i72: i24;
  var $i73: i24;
  var $p74: ref;
  var $p75: ref;
  var $i76: i8;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $i80: i1;
  var $p81: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i32;
  var $i95: i64;
  var $i96: i64;
  var $i97: i8;
  var $i98: i32;
  var $i99: i32;
  var $i100: i8;
  var $p101: ref;
  var $i102: i1;
  var $p103: ref;
  var $i104: i8;
  var $i105: i32;
  var $i106: i32;
  var $i107: i8;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i32;
  var $i114: i8;
  var $p115: ref;
  var $p116: ref;
  var $i117: i64;
  var $i118: i1;
  var $p119: ref;
  var $i120: i32;
  var $i121: i32;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $i125: i32;
  var $i126: i32;
  var $i127: i64;
  var $i128: i64;
  var $i129: i64;
  var $i130: i64;
  var $i131: i64;
  var $i132: i16;
  var $p133: ref;
  var $p134: ref;
  var $i135: i32;
  var $i136: i16;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $i144: i32;
  var $i145: i1;
  var $i146: i1;
  var $i148: i1;
  var $i149: i1;
  var $i150: i32;
  var $i147: i32;
  var $i151: i1;
  var $i152: i1;
  var $i153: i32;
  var $i154: i32;
  var $i155: i32;
  var $i156: i32;
  var $i157: i32;
  var $i158: i32;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i32;
  var $i163: i32;
  var $i164: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i32;
  var $i175: i1;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i32;
  var $i184: i32;
  var $i185: i32;
  var $i186: i32;
  var $i187: i32;
  var $i188: i32;
  var $i179: i32;
  var $i180: i32;
  var $i173: i32;
  var $i174: i32;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $i195: i24;
  var $i196: i24;
  var $i197: i24;
  var $p198: ref;
  var $p199: ref;
  var $i200: i8;
  var $i201: i64;
  var $i202: i64;
  var $i203: i64;
  var $i204: i1;
  var $p205: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $i214: i32;
  var $i165: i32;
  var $i166: i32;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $i218: i1;
  var $i219: i32;
  var $i220: i64;
  var $p221: ref;
  var $p222: ref;
  var $p224: ref;
  var $i225: i32;
  var $p226: ref;
  var $i227: i32;
  var $i228: i32;
  var $i229: i32;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $p233: ref;
  var $i234: i32;
  var $i235: i32;
  var $i236: i32;
  var $i237: i32;
  var $i238: i32;
  var $i239: i1;
  var $i240: i32;
  var $i241: i64;
  var $p242: ref;
  var $p243: ref;
  var $p245: ref;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1170} $p3 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1171} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1172} {:cexpr "qh_make:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_6080;

  corral_source_split_6080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1173} $p5 := oxu_qh_alloc($p0);
    goto corral_source_split_6081;

  corral_source_split_6081:
    assume {:verifier.code 0} true;
    $i6 := $p2i.ref.i64($p5);
    goto corral_source_split_6082;

  corral_source_split_6082:
    assume {:verifier.code 0} true;
    $i7 := $eq.i64($i6, 0);
    goto corral_source_split_6083;

  corral_source_split_6083:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6089;

  corral_source_split_6089:
    assume {:verifier.code 0} true;
    $i10 := $load.i32($M.0, $p9);
    goto corral_source_split_6090;

  corral_source_split_6090:
    assume {:verifier.code 0} true;
    $i11 := $lshr.i32($i10, 15);
    goto corral_source_split_6091;

  corral_source_split_6091:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i11, 15);
    goto corral_source_split_6092;

  corral_source_split_6092:
    assume {:verifier.code 0} true;
    $i13 := $shl.i32($i12, 8);
    goto corral_source_split_6093;

  corral_source_split_6093:
    assume {:verifier.code 0} true;
    $i14 := $or.i32($i13, 0);
    call {:si_unique_call 1174} {:cexpr "info1"} boogie_si_record_i32($i14);
    goto corral_source_split_6094;

  corral_source_split_6094:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6095;

  corral_source_split_6095:
    assume {:verifier.code 0} true;
    $i16 := $load.i32($M.0, $p15);
    goto corral_source_split_6096;

  corral_source_split_6096:
    assume {:verifier.code 0} true;
    $i17 := $lshr.i32($i16, 8);
    goto corral_source_split_6097;

  corral_source_split_6097:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i17, 127);
    goto corral_source_split_6098;

  corral_source_split_6098:
    assume {:verifier.code 0} true;
    $i19 := $or.i32($i18, $i14);
    call {:si_unique_call 1175} {:cexpr "info1"} boogie_si_record_i32($i19);
    goto corral_source_split_6099;

  corral_source_split_6099:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6100;

  corral_source_split_6100:
    assume {:verifier.code 0} true;
    $i21 := $load.i32($M.0, $p20);
    goto corral_source_split_6101;

  corral_source_split_6101:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i21, 128);
    call {:si_unique_call 1176} {:cexpr "is_input"} boogie_si_record_i32($i22);
    goto corral_source_split_6102;

  corral_source_split_6102:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6103;

  corral_source_split_6103:
    assume {:verifier.code 0} true;
    $i24 := $load.i32($M.0, $p23);
    goto corral_source_split_6104;

  corral_source_split_6104:
    assume {:verifier.code 0} true;
    $i25 := $lshr.i32($i24, 30);
    call {:si_unique_call 1177} {:cexpr "type"} boogie_si_record_i32($i25);
    goto corral_source_split_6105;

  corral_source_split_6105:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6106;

  corral_source_split_6106:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6107;

  corral_source_split_6107:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6108;

  corral_source_split_6108:
    assume {:verifier.code 0} true;
    $i29 := $load.i32($M.0, $p28);
    goto corral_source_split_6109;

  corral_source_split_6109:
    assume {:verifier.code 0} true;
    $i30 := $eq.i32($i22, 0);
    goto corral_source_split_6110;

  corral_source_split_6110:
    assume {:verifier.code 0} true;
    $i31 := $zext.i1.i32($i30);
    goto corral_source_split_6111;

  corral_source_split_6111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1178} $i32 := usb_maxpacket($p27, $i29, $i31);
    call {:si_unique_call 1179} {:cexpr "tmp___0"} boogie_si_record_i16($i32);
    goto corral_source_split_6112;

  corral_source_split_6112:
    assume {:verifier.code 0} true;
    $i33 := $zext.i16.i32($i32);
    call {:si_unique_call 1180} {:cexpr "maxp"} boogie_si_record_i32($i33);
    goto corral_source_split_6113;

  corral_source_split_6113:
    assume {:verifier.code 0} true;
    $i34 := $eq.i32($i25, 1);
    goto corral_source_split_6114;

  corral_source_split_6114:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $p138 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6259;

  corral_source_split_6259:
    assume {:verifier.code 0} true;
    $p139 := $load.ref($M.0, $p138);
    goto corral_source_split_6260;

  corral_source_split_6260:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(152, 1));
    goto corral_source_split_6261;

  corral_source_split_6261:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p140, $p139);
    goto corral_source_split_6262;

  corral_source_split_6262:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6263;

  corral_source_split_6263:
    assume {:verifier.code 0} true;
    $p142 := $load.ref($M.0, $p141);
    goto corral_source_split_6264;

  corral_source_split_6264:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($p142, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6265;

  corral_source_split_6265:
    assume {:verifier.code 0} true;
    $i144 := $load.i32($M.0, $p143);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $i145 := $slt.i32($i144, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i145 == 1);
    assume {:verifier.code 0} true;
    $i146 := $slt.i32($i144, 3);
    assume {:verifier.code 0} true;
    $i147 := $i19;
    assume true;
    goto $bb30, $bb32;

  $bb32:
    assume !($i146 == 1);
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i144, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    assume !($i148 == 1);
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6357;

  corral_source_split_6357:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p189, .str.2);
    goto corral_source_split_6358;

  corral_source_split_6358:
    assume {:verifier.code 0} true;
    $p190 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6359;

  corral_source_split_6359:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p190, .str.82);
    goto corral_source_split_6360;

  corral_source_split_6360:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6361;

  corral_source_split_6361:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p191, .str);
    goto corral_source_split_6362;

  corral_source_split_6362:
    assume {:verifier.code 0} true;
    $p192 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6363;

  corral_source_split_6363:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p192, .str.84);
    goto corral_source_split_6364;

  corral_source_split_6364:
    assume {:verifier.code 0} true;
    $p193 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6365;

  corral_source_split_6365:
    assume {:verifier.code 0} true;
    $p194 := $bitcast.ref.ref($p193);
    goto corral_source_split_6366;

  corral_source_split_6366:
    assume {:verifier.code 0} true;
    $i195 := $load.i24($M.6, $p194);
    goto corral_source_split_6367;

  corral_source_split_6367:
    assume {:verifier.code 0} true;
    $i196 := $and.i24($i195, $sub.i24(0, 262144));
    goto corral_source_split_6368;

  corral_source_split_6368:
    assume {:verifier.code 0} true;
    $i197 := $or.i24($i196, 1477);
    goto corral_source_split_6369;

  corral_source_split_6369:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p194, $i197);
    goto corral_source_split_6370;

  corral_source_split_6370:
    assume {:verifier.code 0} true;
    $p198 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6371;

  corral_source_split_6371:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p198, 0);
    goto corral_source_split_6372;

  corral_source_split_6372:
    assume {:verifier.code 0} true;
    $p199 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6373;

  corral_source_split_6373:
    assume {:verifier.code 0} true;
    $i200 := $load.i8($M.7, $p199);
    goto corral_source_split_6374;

  corral_source_split_6374:
    assume {:verifier.code 0} true;
    $i201 := $zext.i8.i64($i200);
    goto corral_source_split_6375;

  corral_source_split_6375:
    assume {:verifier.code 0} true;
    $i202 := $and.i64($i201, 1);
    goto corral_source_split_6376;

  corral_source_split_6376:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1209} $i203 := ldv__builtin_expect($i202, 0);
    call {:si_unique_call 1210} {:cexpr "tmp___7"} boogie_si_record_i64($i203);
    goto corral_source_split_6377;

  corral_source_split_6377:
    assume {:verifier.code 0} true;
    $i204 := $ne.i64($i203, 0);
    goto corral_source_split_6378;

  corral_source_split_6378:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i204 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1189} qh_put($p5);
    goto SeqInstr_373, SeqInstr_374;

  SeqInstr_374:
    assume assertsPassed;
    goto SeqInstr_375;

  SeqInstr_375:
    goto corral_source_split_6208;

  corral_source_split_6208:
    assume {:verifier.code 0} true;
    $p8 := $0.ref;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6087;

  corral_source_split_6087:
    assume {:verifier.code 0} true;
    $r := $p8;
    return;

  SeqInstr_373:
    assume !assertsPassed;
    return;

  $bb52:
    assume $i204 == 1;
    goto corral_source_split_6380;

  corral_source_split_6380:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1211} $p205 := oxu_to_hcd($p0);
    goto corral_source_split_6381;

  corral_source_split_6381:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($add.ref($p205, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6382;

  corral_source_split_6382:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_6383;

  corral_source_split_6383:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6384;

  corral_source_split_6384:
    assume {:verifier.code 0} true;
    $p210 := $load.ref($M.0, $p209);
    goto corral_source_split_6385;

  corral_source_split_6385:
    assume {:verifier.code 0} true;
    $p211 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6386;

  corral_source_split_6386:
    assume {:verifier.code 0} true;
    $p212 := $load.ref($M.0, $p211);
    goto corral_source_split_6387;

  corral_source_split_6387:
    assume {:verifier.code 0} true;
    $p213 := $add.ref($add.ref($p212, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6388;

  corral_source_split_6388:
    assume {:verifier.code 0} true;
    $i214 := $load.i32($M.0, $p213);
    goto corral_source_split_6389;

  corral_source_split_6389:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1212} __dynamic_dev_dbg.ref.ref.ref.ref.i32($p4, $p208, .str.84, $p210, $i214);
    goto corral_source_split_6390;

  corral_source_split_6390:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb33:
    assume $i148 == 1;
    goto corral_source_split_6270;

  corral_source_split_6270:
    assume {:verifier.code 0} true;
    $i167 := $or.i32($i19, 8192);
    call {:si_unique_call 1192} {:cexpr "info1"} boogie_si_record_i32($i167);
    goto corral_source_split_6271;

  corral_source_split_6271:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i25, 2);
    goto corral_source_split_6272;

  corral_source_split_6272:
    assume {:verifier.code 0} true;
    assume {:branchcond $i168} true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i168 == 1);
    goto corral_source_split_6338;

  corral_source_split_6338:
    assume {:verifier.code 0} true;
    $i175 := $eq.i32($i25, 3);
    goto corral_source_split_6339;

  corral_source_split_6339:
    assume {:verifier.code 0} true;
    assume {:branchcond $i175} true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i175 == 1);
    goto corral_source_split_6348;

  corral_source_split_6348:
    assume {:verifier.code 0} true;
    $i181 := $and.i32($i33, 2047);
    goto corral_source_split_6349;

  corral_source_split_6349:
    assume {:verifier.code 0} true;
    $i182 := $shl.i32($i181, 16);
    goto corral_source_split_6350;

  corral_source_split_6350:
    assume {:verifier.code 0} true;
    $i183 := $or.i32($i182, $i167);
    call {:si_unique_call 1207} {:cexpr "info1"} boogie_si_record_i32($i183);
    goto corral_source_split_6351;

  corral_source_split_6351:
    assume {:verifier.code 0} true;
    $i184 := $ashr.i32($i33, 11);
    goto corral_source_split_6352;

  corral_source_split_6352:
    assume {:verifier.code 0} true;
    $i185 := $and.i32($i184, 3);
    goto corral_source_split_6353;

  corral_source_split_6353:
    assume {:verifier.code 0} true;
    $i186 := $add.i32($i185, 1);
    goto corral_source_split_6354;

  corral_source_split_6354:
    assume {:verifier.code 0} true;
    $i187 := $shl.i32($i186, 30);
    goto corral_source_split_6355;

  corral_source_split_6355:
    assume {:verifier.code 0} true;
    $i188 := $or.i32($i187, 0);
    call {:si_unique_call 1208} {:cexpr "info2"} boogie_si_record_i32($i188);
    assume {:verifier.code 0} true;
    $i179, $i180 := $i183, $i188;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i173, $i174 := $i179, $i180;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6341;

  corral_source_split_6341:
    assume {:verifier.code 0} true;
    $i165, $i166 := $i173, $i174;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6296;

  corral_source_split_6296:
    assume {:verifier.code 0} true;
    $p215 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_6297;

  corral_source_split_6297:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p215, 3);
    goto corral_source_split_6298;

  corral_source_split_6298:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_6299;

  corral_source_split_6299:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p216, $i165);
    goto corral_source_split_6300;

  corral_source_split_6300:
    assume {:verifier.code 0} true;
    $p217 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_6301;

  corral_source_split_6301:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p217, $i166);
    goto corral_source_split_6302;

  corral_source_split_6302:
    assume {:verifier.code 0} true;
    $i218 := $eq.i32($i22, 0);
    goto corral_source_split_6303;

  corral_source_split_6303:
    assume {:verifier.code 0} true;
    $i219 := $zext.i1.i32($i218);
    goto corral_source_split_6304;

  corral_source_split_6304:
    assume {:verifier.code 0} true;
    $i220 := $sext.i32.i64($i219);
    goto corral_source_split_6305;

  corral_source_split_6305:
    assume {:verifier.code 0} true;
    $p221 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6306;

  corral_source_split_6306:
    assume {:verifier.code 0} true;
    $p222 := $load.ref($M.0, $p221);
    goto corral_source_split_6307;

  corral_source_split_6307:
    assume {:verifier.code 0} true;
    $p224 := $add.ref($add.ref($add.ref($p222, $mul.ref(0, 2040)), $mul.ref(44, 1)), $mul.ref($i220, 4));
    goto corral_source_split_6308;

  corral_source_split_6308:
    assume {:verifier.code 0} true;
    $i225 := $load.i32($M.0, $p224);
    goto corral_source_split_6309;

  corral_source_split_6309:
    assume {:verifier.code 0} true;
    $p226 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6310;

  corral_source_split_6310:
    assume {:verifier.code 0} true;
    $i227 := $load.i32($M.0, $p226);
    goto corral_source_split_6311;

  corral_source_split_6311:
    assume {:verifier.code 0} true;
    $i228 := $lshr.i32($i227, 15);
    goto corral_source_split_6312;

  corral_source_split_6312:
    assume {:verifier.code 0} true;
    $i229 := $and.i32($i228, 15);
    goto corral_source_split_6313;

  corral_source_split_6313:
    assume {:verifier.code 0} true;
    $i230 := $shl.i32(1, $i229);
    goto corral_source_split_6314;

  corral_source_split_6314:
    assume {:verifier.code 0} true;
    $i231 := $xor.i32($i230, $sub.i32(0, 1));
    goto corral_source_split_6315;

  corral_source_split_6315:
    assume {:verifier.code 0} true;
    $i232 := $and.i32($i225, $i231);
    goto corral_source_split_6316;

  corral_source_split_6316:
    assume {:verifier.code 0} true;
    $p233 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_6317;

  corral_source_split_6317:
    assume {:verifier.code 0} true;
    $i234 := $load.i32($M.0, $p233);
    goto corral_source_split_6318;

  corral_source_split_6318:
    assume {:verifier.code 0} true;
    $i235 := $lshr.i32($i234, 15);
    goto corral_source_split_6319;

  corral_source_split_6319:
    assume {:verifier.code 0} true;
    $i236 := $and.i32($i235, 15);
    goto corral_source_split_6320;

  corral_source_split_6320:
    assume {:verifier.code 0} true;
    $i237 := $shl.i32(1, $i236);
    goto corral_source_split_6321;

  corral_source_split_6321:
    assume {:verifier.code 0} true;
    $i238 := $or.i32($i232, $i237);
    goto corral_source_split_6322;

  corral_source_split_6322:
    assume {:verifier.code 0} true;
    $i239 := $eq.i32($i22, 0);
    goto corral_source_split_6323;

  corral_source_split_6323:
    assume {:verifier.code 0} true;
    $i240 := $zext.i1.i32($i239);
    goto corral_source_split_6324;

  corral_source_split_6324:
    assume {:verifier.code 0} true;
    $i241 := $sext.i32.i64($i240);
    goto corral_source_split_6325;

  corral_source_split_6325:
    assume {:verifier.code 0} true;
    $p242 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6326;

  corral_source_split_6326:
    assume {:verifier.code 0} true;
    $p243 := $load.ref($M.0, $p242);
    goto corral_source_split_6327;

  corral_source_split_6327:
    assume {:verifier.code 0} true;
    $p245 := $add.ref($add.ref($add.ref($p243, $mul.ref(0, 2040)), $mul.ref(44, 1)), $mul.ref($i241, 4));
    goto corral_source_split_6328;

  corral_source_split_6328:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p245, $i238);
    goto corral_source_split_6329;

  corral_source_split_6329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1199} qh_refresh($p0, $p5);
    goto corral_source_split_6330;

  corral_source_split_6330:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb3;

  $bb48:
    assume $i175 == 1;
    goto corral_source_split_6343;

  corral_source_split_6343:
    assume {:verifier.code 0} true;
    $i176 := $or.i32($i167, 1073741824);
    call {:si_unique_call 1204} {:cexpr "info1"} boogie_si_record_i32($i176);
    goto corral_source_split_6344;

  corral_source_split_6344:
    assume {:verifier.code 0} true;
    $i177 := $or.i32($i176, 33554432);
    call {:si_unique_call 1205} {:cexpr "info1"} boogie_si_record_i32($i177);
    goto corral_source_split_6345;

  corral_source_split_6345:
    assume {:verifier.code 0} true;
    $i178 := $or.i32(0, 1073741824);
    call {:si_unique_call 1206} {:cexpr "info2"} boogie_si_record_i32($i178);
    goto corral_source_split_6346;

  corral_source_split_6346:
    assume {:verifier.code 0} true;
    $i179, $i180 := $i177, $i178;
    goto $bb50;

  $bb45:
    assume $i168 == 1;
    goto corral_source_split_6332;

  corral_source_split_6332:
    assume {:verifier.code 0} true;
    $i169 := $or.i32($i167, 1073741824);
    call {:si_unique_call 1200} {:cexpr "info1"} boogie_si_record_i32($i169);
    goto corral_source_split_6333;

  corral_source_split_6333:
    assume {:verifier.code 0} true;
    $i170 := $or.i32($i169, 4194304);
    call {:si_unique_call 1201} {:cexpr "info1"} boogie_si_record_i32($i170);
    goto corral_source_split_6334;

  corral_source_split_6334:
    assume {:verifier.code 0} true;
    $i171 := $or.i32($i170, 16384);
    call {:si_unique_call 1202} {:cexpr "info1"} boogie_si_record_i32($i171);
    goto corral_source_split_6335;

  corral_source_split_6335:
    assume {:verifier.code 0} true;
    $i172 := $or.i32(0, 1073741824);
    call {:si_unique_call 1203} {:cexpr "info2"} boogie_si_record_i32($i172);
    goto corral_source_split_6336;

  corral_source_split_6336:
    assume {:verifier.code 0} true;
    $i173, $i174 := $i171, $i172;
    goto $bb47;

  $bb30:
    assume {:verifier.code 0} true;
    assume $i146 == 1;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_6267;

  corral_source_split_6267:
    assume {:verifier.code 0} true;
    $i151 := $ne.i32($i25, 1);
    goto corral_source_split_6268;

  corral_source_split_6268:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $i152 := $eq.i32($i25, 2);
    goto corral_source_split_6279;

  corral_source_split_6279:
    assume {:verifier.code 0} true;
    assume {:branchcond $i152} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i152 == 1);
    assume {:verifier.code 0} true;
    $i155 := $i147;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto corral_source_split_6285;

  corral_source_split_6285:
    assume {:verifier.code 0} true;
    $i156 := $shl.i32($i33, 16);
    goto corral_source_split_6286;

  corral_source_split_6286:
    assume {:verifier.code 0} true;
    $i157 := $or.i32($i156, $i155);
    call {:si_unique_call 1196} {:cexpr "info1"} boogie_si_record_i32($i157);
    goto corral_source_split_6287;

  corral_source_split_6287:
    assume {:verifier.code 0} true;
    $i158 := $or.i32(0, 1073741824);
    call {:si_unique_call 1197} {:cexpr "info2"} boogie_si_record_i32($i158);
    goto corral_source_split_6288;

  corral_source_split_6288:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6289;

  corral_source_split_6289:
    assume {:verifier.code 0} true;
    $p160 := $load.ref($M.0, $p159);
    goto corral_source_split_6290;

  corral_source_split_6290:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($p160, $mul.ref(0, 2040)), $mul.ref(40, 1));
    goto corral_source_split_6291;

  corral_source_split_6291:
    assume {:verifier.code 0} true;
    $i162 := $load.i32($M.0, $p161);
    goto corral_source_split_6292;

  corral_source_split_6292:
    assume {:verifier.code 0} true;
    $i163 := $shl.i32($i162, 23);
    goto corral_source_split_6293;

  corral_source_split_6293:
    assume {:verifier.code 0} true;
    $i164 := $or.i32($i163, $i158);
    call {:si_unique_call 1198} {:cexpr "info2"} boogie_si_record_i32($i164);
    goto corral_source_split_6294;

  corral_source_split_6294:
    assume {:verifier.code 0} true;
    $i165, $i166 := $i157, $i164;
    goto $bb44;

  $bb41:
    assume $i152 == 1;
    goto corral_source_split_6281;

  corral_source_split_6281:
    assume {:verifier.code 0} true;
    $i153 := $or.i32($i147, 134217728);
    call {:si_unique_call 1194} {:cexpr "info1"} boogie_si_record_i32($i153);
    goto corral_source_split_6282;

  corral_source_split_6282:
    assume {:verifier.code 0} true;
    $i154 := $or.i32($i153, 16384);
    call {:si_unique_call 1195} {:cexpr "info1"} boogie_si_record_i32($i154);
    goto corral_source_split_6283;

  corral_source_split_6283:
    assume {:verifier.code 0} true;
    $i155 := $i154;
    goto $bb43;

  $bb38:
    assume $i151 == 1;
    goto corral_source_split_6277;

  corral_source_split_6277:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb28:
    assume $i145 == 1;
    assume {:verifier.code 0} true;
    $i149 := $eq.i32($i144, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i149} true;
    goto $bb36, $bb37;

  $bb37:
    assume {:verifier.code 0} true;
    assume !($i149 == 1);
    goto $bb35;

  $bb36:
    assume $i149 == 1;
    goto corral_source_split_6274;

  corral_source_split_6274:
    assume {:verifier.code 0} true;
    $i150 := $or.i32($i19, 4096);
    call {:si_unique_call 1193} {:cexpr "info1"} boogie_si_record_i32($i150);
    goto corral_source_split_6275;

  corral_source_split_6275:
    assume {:verifier.code 0} true;
    $i147 := $i150;
    goto $bb31;

  $bb5:
    assume $i34 == 1;
    goto corral_source_split_6116;

  corral_source_split_6116:
    assume {:verifier.code 0} true;
    $i35 := $ashr.i32($i33, 11);
    goto corral_source_split_6117;

  corral_source_split_6117:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i35, 3);
    goto corral_source_split_6118;

  corral_source_split_6118:
    assume {:verifier.code 0} true;
    $i37 := $add.i32($i36, 1);
    goto corral_source_split_6119;

  corral_source_split_6119:
    assume {:verifier.code 0} true;
    $i38 := $and.i32($i33, 2047);
    goto corral_source_split_6120;

  corral_source_split_6120:
    assume {:verifier.code 0} true;
    $i39 := $mul.i32($i37, $i38);
    goto corral_source_split_6121;

  corral_source_split_6121:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1181} $i40 := usb_calc_bus_time(3, $i22, 0, $i39);
    call {:si_unique_call 1182} {:cexpr "tmp___1"} boogie_si_record_i64($i40);
    goto corral_source_split_6122;

  corral_source_split_6122:
    assume {:verifier.code 0} true;
    $i41 := $add.i64($i40, 999);
    goto corral_source_split_6123;

  corral_source_split_6123:
    assume {:verifier.code 0} true;
    $i42 := $sdiv.i64($i41, 1000);
    goto corral_source_split_6124;

  corral_source_split_6124:
    assume {:verifier.code 0} true;
    $i43 := $trunc.i64.i8($i42);
    goto corral_source_split_6125;

  corral_source_split_6125:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_6126;

  corral_source_split_6126:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p44, $i43);
    goto corral_source_split_6127;

  corral_source_split_6127:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(144, 1));
    goto corral_source_split_6128;

  corral_source_split_6128:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p45, $sub.i16(0, 1));
    goto corral_source_split_6129;

  corral_source_split_6129:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6130;

  corral_source_split_6130:
    assume {:verifier.code 0} true;
    $p47 := $load.ref($M.0, $p46);
    goto corral_source_split_6131;

  corral_source_split_6131:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p47, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6132;

  corral_source_split_6132:
    assume {:verifier.code 0} true;
    $i49 := $load.i32($M.0, $p48);
    goto corral_source_split_6133;

  corral_source_split_6133:
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i49, 3);
    goto corral_source_split_6134;

  corral_source_split_6134:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i50 == 1);
    goto corral_source_split_6152;

  corral_source_split_6152:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6153;

  corral_source_split_6153:
    assume {:verifier.code 0} true;
    $p88 := $load.ref($M.0, $p87);
    goto corral_source_split_6154;

  corral_source_split_6154:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p88, $mul.ref(0, 2040)), $mul.ref(32, 1));
    goto corral_source_split_6155;

  corral_source_split_6155:
    assume {:verifier.code 0} true;
    $p90 := $load.ref($M.0, $p89);
    goto corral_source_split_6156;

  corral_source_split_6156:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6157;

  corral_source_split_6157:
    assume {:verifier.code 0} true;
    $p92 := $load.ref($M.0, $p91);
    goto corral_source_split_6158;

  corral_source_split_6158:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($p92, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6159;

  corral_source_split_6159:
    assume {:verifier.code 0} true;
    $i94 := $load.i32($M.0, $p93);
    goto corral_source_split_6160;

  corral_source_split_6160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1183} $i95 := usb_calc_bus_time($i94, $i22, 0, $i33);
    call {:si_unique_call 1184} {:cexpr "tmp___4"} boogie_si_record_i64($i95);
    goto corral_source_split_6161;

  corral_source_split_6161:
    assume {:verifier.code 0} true;
    $i96 := $sdiv.i64($i95, 125000);
    goto corral_source_split_6162;

  corral_source_split_6162:
    assume {:verifier.code 0} true;
    $i97 := $trunc.i64.i8($i96);
    goto corral_source_split_6163;

  corral_source_split_6163:
    assume {:verifier.code 0} true;
    $i98 := $zext.i8.i32($i97);
    goto corral_source_split_6164;

  corral_source_split_6164:
    assume {:verifier.code 0} true;
    $i99 := $add.i32($i98, 1);
    goto corral_source_split_6165;

  corral_source_split_6165:
    assume {:verifier.code 0} true;
    $i100 := $trunc.i32.i8($i99);
    goto corral_source_split_6166;

  corral_source_split_6166:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(138, 1));
    goto corral_source_split_6167;

  corral_source_split_6167:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, $i100);
    goto corral_source_split_6168;

  corral_source_split_6168:
    assume {:verifier.code 0} true;
    $i102 := $ne.i32($i22, 0);
    goto corral_source_split_6169;

  corral_source_split_6169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i102 == 1);
    goto corral_source_split_6221;

  corral_source_split_6221:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_6222;

  corral_source_split_6222:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_6223;

  corral_source_split_6223:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_6224;

  corral_source_split_6224:
    assume {:verifier.code 0} true;
    $i113 := $add.i32($i112, 1);
    goto corral_source_split_6225;

  corral_source_split_6225:
    assume {:verifier.code 0} true;
    $i114 := $trunc.i32.i8($i113);
    goto corral_source_split_6226;

  corral_source_split_6226:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_6227;

  corral_source_split_6227:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, $i114);
    goto corral_source_split_6228;

  corral_source_split_6228:
    assume {:verifier.code 0} true;
    $p116 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_6229;

  corral_source_split_6229:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p116, 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $i117 := $p2i.ref.i64($p90);
    goto corral_source_split_6231;

  corral_source_split_6231:
    assume {:verifier.code 0} true;
    $i118 := $ne.i64($i117, 0);
    goto corral_source_split_6232;

  corral_source_split_6232:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i118 == 1);
    goto corral_source_split_6238;

  corral_source_split_6238:
    assume {:verifier.code 0} true;
    $i121 := 0;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_6240;

  corral_source_split_6240:
    assume {:verifier.code 0} true;
    $p122 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(72, 1));
    goto corral_source_split_6241;

  corral_source_split_6241:
    assume {:verifier.code 0} true;
    $p123 := $load.ref($M.0, $p122);
    goto corral_source_split_6242;

  corral_source_split_6242:
    assume {:verifier.code 0} true;
    $p124 := $add.ref($add.ref($p123, $mul.ref(0, 2040)), $mul.ref(28, 1));
    goto corral_source_split_6243;

  corral_source_split_6243:
    assume {:verifier.code 0} true;
    $i125 := $load.i32($M.0, $p124);
    goto corral_source_split_6244;

  corral_source_split_6244:
    assume {:verifier.code 0} true;
    $i126 := $and.i32($i33, 2047);
    goto corral_source_split_6245;

  corral_source_split_6245:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1190} $i127 := usb_calc_bus_time($i125, $i22, 0, $i126);
    call {:si_unique_call 1191} {:cexpr "tmp___5"} boogie_si_record_i64($i127);
    goto corral_source_split_6246;

  corral_source_split_6246:
    assume {:verifier.code 0} true;
    $i128 := $sext.i32.i64($i121);
    goto corral_source_split_6247;

  corral_source_split_6247:
    assume {:verifier.code 0} true;
    $i129 := $add.i64($i128, $i127);
    goto corral_source_split_6248;

  corral_source_split_6248:
    assume {:verifier.code 0} true;
    $i130 := $add.i64($i129, 999);
    goto corral_source_split_6249;

  corral_source_split_6249:
    assume {:verifier.code 0} true;
    $i131 := $sdiv.i64($i130, 1000);
    goto corral_source_split_6250;

  corral_source_split_6250:
    assume {:verifier.code 0} true;
    $i132 := $trunc.i64.i16($i131);
    goto corral_source_split_6251;

  corral_source_split_6251:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(140, 1));
    goto corral_source_split_6252;

  corral_source_split_6252:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p133, $i132);
    goto corral_source_split_6253;

  corral_source_split_6253:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6254;

  corral_source_split_6254:
    assume {:verifier.code 0} true;
    $i135 := $load.i32($M.0, $p134);
    goto corral_source_split_6255;

  corral_source_split_6255:
    assume {:verifier.code 0} true;
    $i136 := $trunc.i32.i16($i135);
    goto corral_source_split_6256;

  corral_source_split_6256:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_6257;

  corral_source_split_6257:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p137, $i136);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb23:
    assume $i118 == 1;
    goto corral_source_split_6234;

  corral_source_split_6234:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p90, $mul.ref(0, 192)), $mul.ref(12, 1));
    goto corral_source_split_6235;

  corral_source_split_6235:
    assume {:verifier.code 0} true;
    $i120 := $load.i32($M.0, $p119);
    goto corral_source_split_6236;

  corral_source_split_6236:
    assume {:verifier.code 0} true;
    $i121 := $i120;
    goto $bb25;

  $bb20:
    assume $i102 == 1;
    goto corral_source_split_6210;

  corral_source_split_6210:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_6211;

  corral_source_split_6211:
    assume {:verifier.code 0} true;
    $i104 := $load.i8($M.0, $p103);
    goto corral_source_split_6212;

  corral_source_split_6212:
    assume {:verifier.code 0} true;
    $i105 := $zext.i8.i32($i104);
    goto corral_source_split_6213;

  corral_source_split_6213:
    assume {:verifier.code 0} true;
    $i106 := $add.i32($i105, 1);
    goto corral_source_split_6214;

  corral_source_split_6214:
    assume {:verifier.code 0} true;
    $i107 := $trunc.i32.i8($i106);
    goto corral_source_split_6215;

  corral_source_split_6215:
    assume {:verifier.code 0} true;
    $p108 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_6216;

  corral_source_split_6216:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p108, $i107);
    goto corral_source_split_6217;

  corral_source_split_6217:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_6218;

  corral_source_split_6218:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 1);
    goto corral_source_split_6219;

  corral_source_split_6219:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb7:
    assume $i50 == 1;
    goto corral_source_split_6136;

  corral_source_split_6136:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_6137;

  corral_source_split_6137:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p51, 0);
    goto corral_source_split_6138;

  corral_source_split_6138:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(138, 1));
    goto corral_source_split_6139;

  corral_source_split_6139:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_6140;

  corral_source_split_6140:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6141;

  corral_source_split_6141:
    assume {:verifier.code 0} true;
    $i54 := $load.i32($M.0, $p53);
    goto corral_source_split_6142;

  corral_source_split_6142:
    assume {:verifier.code 0} true;
    $i55 := $ashr.i32($i54, 3);
    goto corral_source_split_6143;

  corral_source_split_6143:
    assume {:verifier.code 0} true;
    $i56 := $trunc.i32.i16($i55);
    goto corral_source_split_6144;

  corral_source_split_6144:
    assume {:verifier.code 0} true;
    $p57 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_6145;

  corral_source_split_6145:
    assume {:verifier.code 0} true;
    $M.0 := $store.i16($M.0, $p57, $i56);
    goto corral_source_split_6146;

  corral_source_split_6146:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p5, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_6147;

  corral_source_split_6147:
    assume {:verifier.code 0} true;
    $i59 := $load.i16($M.0, $p58);
    goto corral_source_split_6148;

  corral_source_split_6148:
    assume {:verifier.code 0} true;
    $i60 := $zext.i16.i32($i59);
    goto corral_source_split_6149;

  corral_source_split_6149:
    assume {:verifier.code 0} true;
    $i61 := $eq.i32($i60, 0);
    goto corral_source_split_6150;

  corral_source_split_6150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i61 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb9:
    assume $i61 == 1;
    goto corral_source_split_6171;

  corral_source_split_6171:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6172;

  corral_source_split_6172:
    assume {:verifier.code 0} true;
    $i63 := $load.i32($M.0, $p62);
    goto corral_source_split_6173;

  corral_source_split_6173:
    assume {:verifier.code 0} true;
    $i64 := $ne.i32($i63, 1);
    goto corral_source_split_6174;

  corral_source_split_6174:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    assume !($i64 == 1);
    goto $bb11;

  $bb12:
    assume $i64 == 1;
    goto corral_source_split_6176;

  corral_source_split_6176:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6177;

  corral_source_split_6177:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p65, .str.2);
    goto corral_source_split_6178;

  corral_source_split_6178:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6179;

  corral_source_split_6179:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p66, .str.82);
    goto corral_source_split_6180;

  corral_source_split_6180:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6181;

  corral_source_split_6181:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p67, .str);
    goto corral_source_split_6182;

  corral_source_split_6182:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6183;

  corral_source_split_6183:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p68, .str.83);
    goto corral_source_split_6184;

  corral_source_split_6184:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6185;

  corral_source_split_6185:
    assume {:verifier.code 0} true;
    $p70 := $bitcast.ref.ref($p69);
    goto corral_source_split_6186;

  corral_source_split_6186:
    assume {:verifier.code 0} true;
    $i71 := $load.i24($M.6, $p70);
    goto corral_source_split_6187;

  corral_source_split_6187:
    assume {:verifier.code 0} true;
    $i72 := $and.i24($i71, $sub.i24(0, 262144));
    goto corral_source_split_6188;

  corral_source_split_6188:
    assume {:verifier.code 0} true;
    $i73 := $or.i24($i72, 1406);
    goto corral_source_split_6189;

  corral_source_split_6189:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p70, $i73);
    goto corral_source_split_6190;

  corral_source_split_6190:
    assume {:verifier.code 0} true;
    $p74 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6191;

  corral_source_split_6191:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p74, 0);
    goto corral_source_split_6192;

  corral_source_split_6192:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6193;

  corral_source_split_6193:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.7, $p75);
    goto corral_source_split_6194;

  corral_source_split_6194:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i64($i76);
    goto corral_source_split_6195;

  corral_source_split_6195:
    assume {:verifier.code 0} true;
    $i78 := $and.i64($i77, 1);
    goto corral_source_split_6196;

  corral_source_split_6196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1185} $i79 := ldv__builtin_expect($i78, 0);
    call {:si_unique_call 1186} {:cexpr "tmp___3"} boogie_si_record_i64($i79);
    goto corral_source_split_6197;

  corral_source_split_6197:
    assume {:verifier.code 0} true;
    $i80 := $ne.i64($i79, 0);
    goto corral_source_split_6198;

  corral_source_split_6198:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb14:
    assume $i80 == 1;
    goto corral_source_split_6200;

  corral_source_split_6200:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1187} $p81 := oxu_to_hcd($p0);
    goto corral_source_split_6201;

  corral_source_split_6201:
    assume {:verifier.code 0} true;
    $p83 := $add.ref($add.ref($add.ref($p81, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6202;

  corral_source_split_6202:
    assume {:verifier.code 0} true;
    $p84 := $load.ref($M.0, $p83);
    goto corral_source_split_6203;

  corral_source_split_6203:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($p1, $mul.ref(0, 192)), $mul.ref(168, 1));
    goto corral_source_split_6204;

  corral_source_split_6204:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.0, $p85);
    goto corral_source_split_6205;

  corral_source_split_6205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1188} __dynamic_dev_dbg.ref.ref.ref.i32($p3, $p84, .str.83, $i86);
    goto corral_source_split_6206;

  corral_source_split_6206:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb1:
    assume $i7 == 1;
    goto corral_source_split_6085;

  corral_source_split_6085:
    assume {:verifier.code 0} true;
    $p8 := $p5;
    goto $bb3;
}



const list_add: ref;

axiom list_add == $sub.ref(0, 346293);

procedure list_add($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6392;

  corral_source_split_6392:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6393;

  corral_source_split_6393:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6394;

  corral_source_split_6394:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1213} __list_add($p0, $p1, $p3);
    goto corral_source_split_6395;

  corral_source_split_6395:
    assume {:verifier.code 0} true;
    return;
}



const list_splice: ref;

axiom list_splice == $sub.ref(0, 347325);

procedure list_splice($p0: ref, $p1: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation list_splice($p0: ref, $p1: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $p4: ref;
  var $p5: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6397;

  corral_source_split_6397:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1214} $i2 := list_empty($p0);
    call {:si_unique_call 1215} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_6398;

  corral_source_split_6398:
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i2, 0);
    goto corral_source_split_6399;

  corral_source_split_6399:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6401;

  corral_source_split_6401:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6402;

  corral_source_split_6402:
    assume {:verifier.code 0} true;
    $p5 := $load.ref($M.0, $p4);
    goto corral_source_split_6403;

  corral_source_split_6403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1216} __list_splice($p0, $p1, $p5);
    goto corral_source_split_6404;

  corral_source_split_6404:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ehci_qtd_init: ref;

axiom ehci_qtd_init == $sub.ref(0, 348357);

procedure ehci_qtd_init($p0: ref, $i1: i64);
  free requires assertsPassed;
  modifies $M.0;



implementation ehci_qtd_init($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var cmdloc_dummy_var_54: [ref]i8;
  var cmdloc_dummy_var_55: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1217} {:cexpr "ehci_qtd_init:arg:dma"} boogie_si_record_i64($i1);
    goto corral_source_split_6406;

  corral_source_split_6406:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p0);
    goto corral_source_split_6407;

  corral_source_split_6407:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_54 := $M.0;
    call {:si_unique_call 1218} cmdloc_dummy_var_55 := $memset.i8(cmdloc_dummy_var_54, $p2, 0, 160, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_55;
    goto corral_source_split_6408;

  corral_source_split_6408:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_6409;

  corral_source_split_6409:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p3, $i1);
    goto corral_source_split_6410;

  corral_source_split_6410:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_6411;

  corral_source_split_6411:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p4, 64);
    goto corral_source_split_6412;

  corral_source_split_6412:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_6413;

  corral_source_split_6413:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p5, 1);
    goto corral_source_split_6414;

  corral_source_split_6414:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(4, 1));
    goto corral_source_split_6415;

  corral_source_split_6415:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p6, 1);
    goto corral_source_split_6416;

  corral_source_split_6416:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_6417;

  corral_source_split_6417:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1219} INIT_LIST_HEAD($p7);
    goto corral_source_split_6418;

  corral_source_split_6418:
    assume {:verifier.code 0} true;
    return;
}



const __list_splice: ref;

axiom __list_splice == $sub.ref(0, 349389);

procedure __list_splice($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation __list_splice($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6420;

  corral_source_split_6420:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6421;

  corral_source_split_6421:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_6422;

  corral_source_split_6422:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6423;

  corral_source_split_6423:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_6424;

  corral_source_split_6424:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p4, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6425;

  corral_source_split_6425:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p7, $p1);
    goto corral_source_split_6426;

  corral_source_split_6426:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6427;

  corral_source_split_6427:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p8, $p4);
    goto corral_source_split_6428;

  corral_source_split_6428:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6429;

  corral_source_split_6429:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p9, $p2);
    goto corral_source_split_6430;

  corral_source_split_6430:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6431;

  corral_source_split_6431:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p10, $p6);
    goto corral_source_split_6432;

  corral_source_split_6432:
    assume {:verifier.code 0} true;
    return;
}



const __list_add: ref;

axiom __list_add == $sub.ref(0, 350421);

procedure __list_add($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __list_add($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6434;

  corral_source_split_6434:
    assume {:verifier.code 0} true;
    return;
}



const oxu_qh_alloc: ref;

axiom oxu_qh_alloc == $sub.ref(0, 351453);

procedure oxu_qh_alloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr;



implementation oxu_qh_alloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p4: ref;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i64;
  var $i29: i1;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $i36: i24;
  var $i37: i24;
  var $i38: i24;
  var $p39: ref;
  var $p40: ref;
  var $i41: i8;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i1;
  var $p46: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p52: ref;
  var $i54: i64;
  var $p56: ref;
  var $p57: ref;
  var $p53: ref;
  var $p58: ref;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i1;
  var cmdloc_dummy_var_56: [ref]i8;
  var cmdloc_dummy_var_57: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1220} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_6436;

  corral_source_split_6436:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_6437;

  corral_source_split_6437:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1221} spin_lock($p2);
    goto corral_source_split_6438;

  corral_source_split_6438:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(0, 1));
    goto corral_source_split_6440;

  corral_source_split_6440:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p4);
    goto corral_source_split_6441;

  corral_source_split_6441:
    assume {:verifier.code 0} true;
    $i6 := $zext.i8.i32($i5);
    goto corral_source_split_6442;

  corral_source_split_6442:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 0);
    goto corral_source_split_6443;

  corral_source_split_6443:
    assume {:verifier.code 0} true;
    $i8 := 0;
    assume {:branchcond $i7} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(1, 1));
    goto corral_source_split_6450;

  corral_source_split_6450:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_6451;

  corral_source_split_6451:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_6452;

  corral_source_split_6452:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_6453;

  corral_source_split_6453:
    assume {:verifier.code 0} true;
    $i8 := 1;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(2, 1));
    goto corral_source_split_6526;

  corral_source_split_6526:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_6527;

  corral_source_split_6527:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_6528;

  corral_source_split_6528:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_6529;

  corral_source_split_6529:
    assume {:verifier.code 0} true;
    $i8 := 2;
    assume {:branchcond $i68} true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(3, 1));
    goto corral_source_split_6531;

  corral_source_split_6531:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_6532;

  corral_source_split_6532:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_6533;

  corral_source_split_6533:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_6534;

  corral_source_split_6534:
    assume {:verifier.code 0} true;
    $i8 := 3;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(4, 1));
    goto corral_source_split_6536;

  corral_source_split_6536:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_6537;

  corral_source_split_6537:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_6538;

  corral_source_split_6538:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_6539;

  corral_source_split_6539:
    assume {:verifier.code 0} true;
    $i8 := 4;
    assume {:branchcond $i78} true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb34:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(5, 1));
    goto corral_source_split_6541;

  corral_source_split_6541:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_6542;

  corral_source_split_6542:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_6543;

  corral_source_split_6543:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_6544;

  corral_source_split_6544:
    assume {:verifier.code 0} true;
    $i8 := 5;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(6, 1));
    goto corral_source_split_6546;

  corral_source_split_6546:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_6547;

  corral_source_split_6547:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_6548;

  corral_source_split_6548:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_6549;

  corral_source_split_6549:
    assume {:verifier.code 0} true;
    $i8 := 6;
    assume {:branchcond $i88} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(7, 1));
    goto corral_source_split_6551;

  corral_source_split_6551:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_6552;

  corral_source_split_6552:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_6553;

  corral_source_split_6553:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_6554;

  corral_source_split_6554:
    assume {:verifier.code 0} true;
    $i8 := 7;
    assume {:branchcond $i93} true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(8, 1));
    goto corral_source_split_6556;

  corral_source_split_6556:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_6557;

  corral_source_split_6557:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_6558;

  corral_source_split_6558:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_6559;

  corral_source_split_6559:
    assume {:verifier.code 0} true;
    $i8 := 8;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(9, 1));
    goto corral_source_split_6561;

  corral_source_split_6561:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_6562;

  corral_source_split_6562:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_6563;

  corral_source_split_6563:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_6564;

  corral_source_split_6564:
    assume {:verifier.code 0} true;
    $i8 := 9;
    assume true;
    goto $bb52, $bb53;

  $bb53:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(10, 1));
    goto corral_source_split_6566;

  corral_source_split_6566:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_6567;

  corral_source_split_6567:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_6568;

  corral_source_split_6568:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_6569;

  corral_source_split_6569:
    assume {:verifier.code 0} true;
    $i8 := 10;
    assume true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(11, 1));
    goto corral_source_split_6571;

  corral_source_split_6571:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_6572;

  corral_source_split_6572:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_6573;

  corral_source_split_6573:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_6574;

  corral_source_split_6574:
    assume {:verifier.code 0} true;
    $i8 := 11;
    assume {:branchcond $i113} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(12, 1));
    goto corral_source_split_6576;

  corral_source_split_6576:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_6577;

  corral_source_split_6577:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_6578;

  corral_source_split_6578:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_6579;

  corral_source_split_6579:
    assume {:verifier.code 0} true;
    $i8 := 12;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(13, 1));
    goto corral_source_split_6581;

  corral_source_split_6581:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_6582;

  corral_source_split_6582:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_6583;

  corral_source_split_6583:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_6584;

  corral_source_split_6584:
    assume {:verifier.code 0} true;
    $i8 := 13;
    assume {:branchcond $i123} true;
    goto $bb68, $bb69;

  $bb69:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(14, 1));
    goto corral_source_split_6586;

  corral_source_split_6586:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_6587;

  corral_source_split_6587:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_6588;

  corral_source_split_6588:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    goto corral_source_split_6589;

  corral_source_split_6589:
    assume {:verifier.code 0} true;
    $i8 := 14;
    assume true;
    goto $bb72, $bb73;

  $bb73:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(15, 1));
    goto corral_source_split_6591;

  corral_source_split_6591:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_6592;

  corral_source_split_6592:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_6593;

  corral_source_split_6593:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 0);
    goto corral_source_split_6594;

  corral_source_split_6594:
    assume {:verifier.code 0} true;
    $i8 := 15;
    assume {:branchcond $i133} true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i9 := 16;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6447;

  corral_source_split_6447:
    assume {:verifier.code 0} true;
    $i10 := $sle.i32($i9, 15);
    goto corral_source_split_6448;

  corral_source_split_6448:
    assume {:verifier.code 0} true;
    assume {:branchcond $i10} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i10 == 1);
    assume {:verifier.code 0} true;
    $p57 := $0.ref;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_6524;

  corral_source_split_6524:
    assume {:verifier.code 0} true;
    $p53 := $p57;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_6516;

  corral_source_split_6516:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_6517;

  corral_source_split_6517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1231} spin_unlock($p58);
    goto corral_source_split_6518;

  corral_source_split_6518:
    assume {:verifier.code 0} true;
    $r := $p53;
    return;

  $bb10:
    assume $i10 == 1;
    goto corral_source_split_6455;

  corral_source_split_6455:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_6456;

  corral_source_split_6456:
    assume {:verifier.code 0} true;
    $p12 := $load.ref($M.0, $p11);
    goto corral_source_split_6457;

  corral_source_split_6457:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p12, $mul.ref(0, 15104)), $mul.ref(8192, 1));
    goto corral_source_split_6458;

  corral_source_split_6458:
    assume {:verifier.code 0} true;
    $p14 := $bitcast.ref.ref($p13);
    goto corral_source_split_6459;

  corral_source_split_6459:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i9);
    goto corral_source_split_6460;

  corral_source_split_6460:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($p14, $mul.ref($i15, 160));
    goto corral_source_split_6461;

  corral_source_split_6461:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_6462;

  corral_source_split_6462:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_56 := $M.0;
    call {:si_unique_call 1222} cmdloc_dummy_var_57 := $memset.i8(cmdloc_dummy_var_56, $p17, 0, 160, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_57;
    goto corral_source_split_6463;

  corral_source_split_6463:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p14, $mul.ref($i15, 160)), $mul.ref(128, 1));
    goto corral_source_split_6464;

  corral_source_split_6464:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1223} kref_init($p18);
    goto corral_source_split_6465;

  corral_source_split_6465:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p14, $mul.ref($i15, 160)), $mul.ref(120, 1));
    goto corral_source_split_6466;

  corral_source_split_6466:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p19, $p0);
    goto corral_source_split_6467;

  corral_source_split_6467:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p16);
    goto corral_source_split_6468;

  corral_source_split_6468:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1224} $i21 := virt_to_phys($p20);
    goto corral_source_split_6469;

  corral_source_split_6469:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p14, $mul.ref($i15, 160)), $mul.ref(72, 1));
    goto corral_source_split_6470;

  corral_source_split_6470:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p22, $i21);
    goto corral_source_split_6471;

  corral_source_split_6471:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p14, $mul.ref($i15, 160)), $mul.ref(88, 1));
    goto corral_source_split_6472;

  corral_source_split_6472:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1225} INIT_LIST_HEAD($p23);
    goto corral_source_split_6473;

  corral_source_split_6473:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1226} $p24 := ehci_qtd_alloc($p0);
    goto corral_source_split_6474;

  corral_source_split_6474:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p14, $mul.ref($i15, 160)), $mul.ref(104, 1));
    goto corral_source_split_6475;

  corral_source_split_6475:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p25, $p24);
    goto corral_source_split_6476;

  corral_source_split_6476:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p14, $mul.ref($i15, 160)), $mul.ref(104, 1));
    goto corral_source_split_6477;

  corral_source_split_6477:
    assume {:verifier.code 0} true;
    $p27 := $load.ref($M.0, $p26);
    goto corral_source_split_6478;

  corral_source_split_6478:
    assume {:verifier.code 0} true;
    $i28 := $p2i.ref.i64($p27);
    goto corral_source_split_6479;

  corral_source_split_6479:
    assume {:verifier.code 0} true;
    $i29 := $eq.i64($i28, 0);
    goto corral_source_split_6480;

  corral_source_split_6480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i9);
    goto corral_source_split_6520;

  corral_source_split_6520:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref($i54, 1));
    goto corral_source_split_6521;

  corral_source_split_6521:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p56, 1);
    goto corral_source_split_6522;

  corral_source_split_6522:
    assume {:verifier.code 0} true;
    $p57 := $p16;
    goto $bb19;

  $bb12:
    assume $i29 == 1;
    goto corral_source_split_6482;

  corral_source_split_6482:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_6483;

  corral_source_split_6483:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p30, .str.2);
    goto corral_source_split_6484;

  corral_source_split_6484:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_6485;

  corral_source_split_6485:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p31, .str.58);
    goto corral_source_split_6486;

  corral_source_split_6486:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_6487;

  corral_source_split_6487:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p32, .str);
    goto corral_source_split_6488;

  corral_source_split_6488:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_6489;

  corral_source_split_6489:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p33, .str.59);
    goto corral_source_split_6490;

  corral_source_split_6490:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_6491;

  corral_source_split_6491:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_6492;

  corral_source_split_6492:
    assume {:verifier.code 0} true;
    $i36 := $load.i24($M.6, $p35);
    goto corral_source_split_6493;

  corral_source_split_6493:
    assume {:verifier.code 0} true;
    $i37 := $and.i24($i36, $sub.i24(0, 262144));
    goto corral_source_split_6494;

  corral_source_split_6494:
    assume {:verifier.code 0} true;
    $i38 := $or.i24($i37, 656);
    goto corral_source_split_6495;

  corral_source_split_6495:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p35, $i38);
    goto corral_source_split_6496;

  corral_source_split_6496:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6497;

  corral_source_split_6497:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p39, 0);
    goto corral_source_split_6498;

  corral_source_split_6498:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_6499;

  corral_source_split_6499:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.7, $p40);
    goto corral_source_split_6500;

  corral_source_split_6500:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i64($i41);
    goto corral_source_split_6501;

  corral_source_split_6501:
    assume {:verifier.code 0} true;
    $i43 := $and.i64($i42, 1);
    goto corral_source_split_6502;

  corral_source_split_6502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1227} $i44 := ldv__builtin_expect($i43, 0);
    call {:si_unique_call 1228} {:cexpr "tmp___0"} boogie_si_record_i64($i44);
    goto corral_source_split_6503;

  corral_source_split_6503:
    assume {:verifier.code 0} true;
    $i45 := $ne.i64($i44, 0);
    goto corral_source_split_6504;

  corral_source_split_6504:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i9);
    goto corral_source_split_6512;

  corral_source_split_6512:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref($i50, 1));
    goto corral_source_split_6513;

  corral_source_split_6513:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, 0);
    goto corral_source_split_6514;

  corral_source_split_6514:
    assume {:verifier.code 0} true;
    $p53 := $0.ref;
    goto $bb17;

  $bb14:
    assume $i45 == 1;
    goto corral_source_split_6506;

  corral_source_split_6506:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1229} $p46 := oxu_to_hcd($p0);
    goto corral_source_split_6507;

  corral_source_split_6507:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($add.ref($p46, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6508;

  corral_source_split_6508:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_6509;

  corral_source_split_6509:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1230} __dynamic_dev_dbg.ref.ref.ref($p1, $p49, .str.59);
    goto corral_source_split_6510;

  corral_source_split_6510:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb76:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6445;

  corral_source_split_6445:
    assume {:verifier.code 0} true;
    $i9 := $i8;
    goto $bb6;

  $bb72:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb4;

  $bb68:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb4;

  $bb64:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb60:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb4;

  $bb56:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb4;

  $bb52:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb4;

  $bb48:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb4;

  $bb44:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb4;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb36:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb4;

  $bb32:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb4;

  $bb28:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb24:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb4;

  $bb20:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i7 == 1;
    goto $bb4;
}



const usb_maxpacket: ref;

axiom usb_maxpacket == $sub.ref(0, 352485);

procedure usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16);
  free requires assertsPassed;



implementation usb_maxpacket($p0: ref, $i1: i32, $i2: i32) returns ($r: i16)
{
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $i9: i1;
  var $i10: i32;
  var $i11: i64;
  var $i12: i64;
  var $i13: i1;
  var $i14: i1;
  var $i15: i32;
  var $i16: i64;
  var $i18: i64;
  var $p20: ref;
  var $p21: ref;
  var $i23: i32;
  var $i24: i1;
  var $i25: i32;
  var $i26: i1;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $i31: i1;
  var $i32: i32;
  var $i33: i64;
  var $i35: i64;
  var $p37: ref;
  var $p38: ref;
  var $p22: ref;
  var $i39: i64;
  var $i40: i1;
  var $p42: ref;
  var $i43: i32;
  var $i44: i16;
  var $i41: i16;
  var vslice_dummy_var_99: i64;
  var vslice_dummy_var_100: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1232} {:cexpr "usb_maxpacket:arg:pipe"} boogie_si_record_i32($i1);
    call {:si_unique_call 1233} {:cexpr "usb_maxpacket:arg:is_out"} boogie_si_record_i32($i2);
    goto corral_source_split_6596;

  corral_source_split_6596:
    assume {:verifier.code 0} true;
    $i3 := $ashr.i32($i1, 15);
    goto corral_source_split_6597;

  corral_source_split_6597:
    assume {:verifier.code 0} true;
    $i4 := $and.i32($i3, 15);
    call {:si_unique_call 1234} {:cexpr "epnum"} boogie_si_record_i32($i4);
    goto corral_source_split_6598;

  corral_source_split_6598:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i2, 0);
    goto corral_source_split_6599;

  corral_source_split_6599:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    goto corral_source_split_6611;

  corral_source_split_6611:
    assume {:verifier.code 0} true;
    $i23 := $and.i32($i1, 128);
    goto corral_source_split_6612;

  corral_source_split_6612:
    assume {:verifier.code 0} true;
    $i24 := $eq.i32($i23, 0);
    goto corral_source_split_6613;

  corral_source_split_6613:
    assume {:verifier.code 0} true;
    $i25 := $zext.i1.i32($i24);
    call {:si_unique_call 1238} {:cexpr "__ret_warn_on___0"} boogie_si_record_i32($i25);
    goto corral_source_split_6614;

  corral_source_split_6614:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_6615;

  corral_source_split_6615:
    assume {:verifier.code 0} true;
    $i27 := $zext.i1.i32($i26);
    goto corral_source_split_6616;

  corral_source_split_6616:
    assume {:verifier.code 0} true;
    $i28 := $sext.i32.i64($i27);
    goto corral_source_split_6617;

  corral_source_split_6617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1239} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1240} {:cexpr "tmp___0"} boogie_si_record_i64($i29);
    goto corral_source_split_6618;

  corral_source_split_6618:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_6619;

  corral_source_split_6619:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i25, 0);
    goto corral_source_split_6639;

  corral_source_split_6639:
    assume {:verifier.code 0} true;
    $i32 := $zext.i1.i32($i31);
    goto corral_source_split_6640;

  corral_source_split_6640:
    assume {:verifier.code 0} true;
    $i33 := $sext.i32.i64($i32);
    goto corral_source_split_6641;

  corral_source_split_6641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1244} vslice_dummy_var_100 := ldv__builtin_expect($i33, 0);
    goto corral_source_split_6642;

  corral_source_split_6642:
    assume {:verifier.code 0} true;
    $i35 := $zext.i32.i64($i4);
    goto corral_source_split_6643;

  corral_source_split_6643:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1616, 1)), $mul.ref($i35, 8));
    goto corral_source_split_6644;

  corral_source_split_6644:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    assume {:verifier.code 0} true;
    $p22 := $p38;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6632;

  corral_source_split_6632:
    assume {:verifier.code 0} true;
    $i39 := $p2i.ref.i64($p22);
    goto corral_source_split_6633;

  corral_source_split_6633:
    assume {:verifier.code 0} true;
    $i40 := $eq.i64($i39, 0);
    goto corral_source_split_6634;

  corral_source_split_6634:
    assume {:verifier.code 0} true;
    assume {:branchcond $i40} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i40 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p22, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_6650;

  corral_source_split_6650:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1245} $i43 := usb_endpoint_maxp($p42);
    call {:si_unique_call 1246} {:cexpr "tmp___1"} boogie_si_record_i32($i43);
    goto corral_source_split_6651;

  corral_source_split_6651:
    assume {:verifier.code 0} true;
    $i44 := $trunc.i32.i16($i43);
    goto corral_source_split_6652;

  corral_source_split_6652:
    assume {:verifier.code 0} true;
    $i41 := $i44;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6648;

  corral_source_split_6648:
    assume {:verifier.code 0} true;
    $r := $i41;
    return;

  $bb10:
    assume $i40 == 1;
    goto corral_source_split_6646;

  corral_source_split_6646:
    assume {:verifier.code 0} true;
    $i41 := 0;
    goto $bb12;

  $bb7:
    assume $i30 == 1;
    goto corral_source_split_6636;

  corral_source_split_6636:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1243} warn_slowpath_null(.str.81, 1849);
    goto corral_source_split_6637;

  corral_source_split_6637:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_6601;

  corral_source_split_6601:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i1, 128);
    goto corral_source_split_6602;

  corral_source_split_6602:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_6603;

  corral_source_split_6603:
    assume {:verifier.code 0} true;
    $i8 := $zext.i1.i32($i7);
    call {:si_unique_call 1235} {:cexpr "__ret_warn_on"} boogie_si_record_i32($i8);
    goto corral_source_split_6604;

  corral_source_split_6604:
    assume {:verifier.code 0} true;
    $i9 := $ne.i32($i8, 0);
    goto corral_source_split_6605;

  corral_source_split_6605:
    assume {:verifier.code 0} true;
    $i10 := $zext.i1.i32($i9);
    goto corral_source_split_6606;

  corral_source_split_6606:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i10);
    goto corral_source_split_6607;

  corral_source_split_6607:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1236} $i12 := ldv__builtin_expect($i11, 0);
    call {:si_unique_call 1237} {:cexpr "tmp"} boogie_si_record_i64($i12);
    goto corral_source_split_6608;

  corral_source_split_6608:
    assume {:verifier.code 0} true;
    $i13 := $ne.i64($i12, 0);
    goto corral_source_split_6609;

  corral_source_split_6609:
    assume {:verifier.code 0} true;
    assume {:branchcond $i13} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i13 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i8, 0);
    goto corral_source_split_6624;

  corral_source_split_6624:
    assume {:verifier.code 0} true;
    $i15 := $zext.i1.i32($i14);
    goto corral_source_split_6625;

  corral_source_split_6625:
    assume {:verifier.code 0} true;
    $i16 := $sext.i32.i64($i15);
    goto corral_source_split_6626;

  corral_source_split_6626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1242} vslice_dummy_var_99 := ldv__builtin_expect($i16, 0);
    goto corral_source_split_6627;

  corral_source_split_6627:
    assume {:verifier.code 0} true;
    $i18 := $zext.i32.i64($i4);
    goto corral_source_split_6628;

  corral_source_split_6628:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 2040)), $mul.ref(1744, 1)), $mul.ref($i18, 8));
    goto corral_source_split_6629;

  corral_source_split_6629:
    assume {:verifier.code 0} true;
    $p21 := $load.ref($M.0, $p20);
    goto corral_source_split_6630;

  corral_source_split_6630:
    assume {:verifier.code 0} true;
    $p22 := $p21;
    goto $bb6;

  $bb3:
    assume $i13 == 1;
    goto corral_source_split_6621;

  corral_source_split_6621:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1241} warn_slowpath_null(.str.81, 1846);
    goto corral_source_split_6622;

  corral_source_split_6622:
    assume {:verifier.code 0} true;
    goto $bb5;
}



const usb_calc_bus_time: ref;

axiom usb_calc_bus_time == $sub.ref(0, 353517);

procedure usb_calc_bus_time($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: i64);
  free requires assertsPassed;



implementation usb_calc_bus_time($i0: i32, $i1: i32, $i2: i32, $i3: i32) returns ($r: i64)
{
  var $i4: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1247} {:cexpr "usb_calc_bus_time:arg:arg0"} boogie_si_record_i32($i0);
    call {:si_unique_call 1248} {:cexpr "usb_calc_bus_time:arg:arg1"} boogie_si_record_i32($i1);
    call {:si_unique_call 1249} {:cexpr "usb_calc_bus_time:arg:arg2"} boogie_si_record_i32($i2);
    call {:si_unique_call 1250} {:cexpr "usb_calc_bus_time:arg:arg3"} boogie_si_record_i32($i3);
    goto corral_source_split_6654;

  corral_source_split_6654:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1251} $i4 := __VERIFIER_nondet_long();
    call {:si_unique_call 1252} {:cexpr "smack:ext:__VERIFIER_nondet_long"} boogie_si_record_i64($i4);
    goto corral_source_split_6655;

  corral_source_split_6655:
    assume {:verifier.code 0} true;
    $r := $i4;
    return;
}



const usb_endpoint_maxp: ref;

axiom usb_endpoint_maxp == $sub.ref(0, 354549);

procedure usb_endpoint_maxp($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation usb_endpoint_maxp($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $i2: i16;
  var $i3: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6657;

  corral_source_split_6657:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 10)), $mul.ref(4, 1));
    goto corral_source_split_6658;

  corral_source_split_6658:
    assume {:verifier.code 0} true;
    $i2 := $load.i16($M.0, $p1);
    goto corral_source_split_6659;

  corral_source_split_6659:
    assume {:verifier.code 0} true;
    $i3 := $zext.i16.i32($i2);
    goto corral_source_split_6660;

  corral_source_split_6660:
    assume {:verifier.code 0} true;
    $r := $i3;
    return;
}



const kref_init: ref;

axiom kref_init == $sub.ref(0, 355581);

procedure kref_init($p0: ref);
  free requires assertsPassed;
  modifies $M.0;



implementation kref_init($p0: ref)
{
  var $p1: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6662;

  corral_source_split_6662:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6663;

  corral_source_split_6663:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1253} atomic_set($p1, 1);
    goto corral_source_split_6664;

  corral_source_split_6664:
    assume {:verifier.code 0} true;
    return;
}



const virt_to_phys: ref;

axiom virt_to_phys == $sub.ref(0, 356613);

procedure virt_to_phys($p0: ref) returns ($r: i64);
  free requires assertsPassed;



implementation virt_to_phys($p0: ref) returns ($r: i64)
{
  var $i1: i64;
  var $i2: i64;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6666;

  corral_source_split_6666:
    assume {:verifier.code 0} true;
    $i1 := $p2i.ref.i64($p0);
    goto corral_source_split_6667;

  corral_source_split_6667:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1254} $i2 := __phys_addr($i1);
    call {:si_unique_call 1255} {:cexpr "tmp"} boogie_si_record_i64($i2);
    goto corral_source_split_6668;

  corral_source_split_6668:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ehci_qtd_alloc: ref;

axiom ehci_qtd_alloc == $sub.ref(0, 357645);

procedure ehci_qtd_alloc($p0: ref) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.22, $M.0;



implementation ehci_qtd_alloc($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p3: ref;
  var $i4: i8;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
  var $i8: i32;
  var $i9: i1;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $i24: i64;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p30: ref;
  var $i31: i8;
  var $i32: i32;
  var $i33: i1;
  var $p35: ref;
  var $i36: i8;
  var $i37: i32;
  var $i38: i1;
  var $p40: ref;
  var $i41: i8;
  var $i42: i32;
  var $i43: i1;
  var $p45: ref;
  var $i46: i8;
  var $i47: i32;
  var $i48: i1;
  var $p50: ref;
  var $i51: i8;
  var $i52: i32;
  var $i53: i1;
  var $p55: ref;
  var $i56: i8;
  var $i57: i32;
  var $i58: i1;
  var $p60: ref;
  var $i61: i8;
  var $i62: i32;
  var $i63: i1;
  var $p65: ref;
  var $i66: i8;
  var $i67: i32;
  var $i68: i1;
  var $p70: ref;
  var $i71: i8;
  var $i72: i32;
  var $i73: i1;
  var $p75: ref;
  var $i76: i8;
  var $i77: i32;
  var $i78: i1;
  var $p80: ref;
  var $i81: i8;
  var $i82: i32;
  var $i83: i1;
  var $p85: ref;
  var $i86: i8;
  var $i87: i32;
  var $i88: i1;
  var $p90: ref;
  var $i91: i8;
  var $i92: i32;
  var $i93: i1;
  var $p95: ref;
  var $i96: i8;
  var $i97: i32;
  var $i98: i1;
  var $p100: ref;
  var $i101: i8;
  var $i102: i32;
  var $i103: i1;
  var $p105: ref;
  var $i106: i8;
  var $i107: i32;
  var $i108: i1;
  var $p110: ref;
  var $i111: i8;
  var $i112: i32;
  var $i113: i1;
  var $p115: ref;
  var $i116: i8;
  var $i117: i32;
  var $i118: i1;
  var $p120: ref;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $p125: ref;
  var $i126: i8;
  var $i127: i32;
  var $i128: i1;
  var $p130: ref;
  var $i131: i8;
  var $i132: i32;
  var $i133: i1;
  var $p135: ref;
  var $i136: i8;
  var $i137: i32;
  var $i138: i1;
  var $p140: ref;
  var $i141: i8;
  var $i142: i32;
  var $i143: i1;
  var $p145: ref;
  var $i146: i8;
  var $i147: i32;
  var $i148: i1;
  var $p150: ref;
  var $i151: i8;
  var $i152: i32;
  var $i153: i1;
  var $p155: ref;
  var $i156: i8;
  var $i157: i32;
  var $i158: i1;
  var $p160: ref;
  var $i161: i8;
  var $i162: i32;
  var $i163: i1;
  var $p165: ref;
  var $i166: i8;
  var $i167: i32;
  var $i168: i1;
  var $p170: ref;
  var $i171: i8;
  var $i172: i32;
  var $i173: i1;
  var $p175: ref;
  var $i176: i8;
  var $i177: i32;
  var $i178: i1;
  var $p180: ref;
  var $i181: i8;
  var $i182: i32;
  var $i183: i1;
  var cmdloc_dummy_var_58: [ref]i8;
  var cmdloc_dummy_var_59: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6670;

  corral_source_split_6670:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_6671;

  corral_source_split_6671:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1256} spin_lock($p1);
    goto corral_source_split_6672;

  corral_source_split_6672:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(0, 1));
    goto corral_source_split_6674;

  corral_source_split_6674:
    assume {:verifier.code 0} true;
    $i4 := $load.i8($M.0, $p3);
    goto corral_source_split_6675;

  corral_source_split_6675:
    assume {:verifier.code 0} true;
    $i5 := $zext.i8.i32($i4);
    goto corral_source_split_6676;

  corral_source_split_6676:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_6677;

  corral_source_split_6677:
    assume {:verifier.code 0} true;
    $i7 := 0;
    assume {:branchcond $i6} true;
    goto $bb3, $bb5;

  $bb5:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(1, 1));
    goto corral_source_split_6684;

  corral_source_split_6684:
    assume {:verifier.code 0} true;
    $i31 := $load.i8($M.0, $p30);
    goto corral_source_split_6685;

  corral_source_split_6685:
    assume {:verifier.code 0} true;
    $i32 := $zext.i8.i32($i31);
    goto corral_source_split_6686;

  corral_source_split_6686:
    assume {:verifier.code 0} true;
    $i33 := $eq.i32($i32, 0);
    goto corral_source_split_6687;

  corral_source_split_6687:
    assume {:verifier.code 0} true;
    $i7 := 1;
    assume {:branchcond $i33} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(2, 1));
    goto corral_source_split_6718;

  corral_source_split_6718:
    assume {:verifier.code 0} true;
    $i36 := $load.i8($M.0, $p35);
    goto corral_source_split_6719;

  corral_source_split_6719:
    assume {:verifier.code 0} true;
    $i37 := $zext.i8.i32($i36);
    goto corral_source_split_6720;

  corral_source_split_6720:
    assume {:verifier.code 0} true;
    $i38 := $eq.i32($i37, 0);
    goto corral_source_split_6721;

  corral_source_split_6721:
    assume {:verifier.code 0} true;
    $i7 := 2;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(3, 1));
    goto corral_source_split_6723;

  corral_source_split_6723:
    assume {:verifier.code 0} true;
    $i41 := $load.i8($M.0, $p40);
    goto corral_source_split_6724;

  corral_source_split_6724:
    assume {:verifier.code 0} true;
    $i42 := $zext.i8.i32($i41);
    goto corral_source_split_6725;

  corral_source_split_6725:
    assume {:verifier.code 0} true;
    $i43 := $eq.i32($i42, 0);
    goto corral_source_split_6726;

  corral_source_split_6726:
    assume {:verifier.code 0} true;
    $i7 := 3;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i43 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $p45 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(4, 1));
    goto corral_source_split_6728;

  corral_source_split_6728:
    assume {:verifier.code 0} true;
    $i46 := $load.i8($M.0, $p45);
    goto corral_source_split_6729;

  corral_source_split_6729:
    assume {:verifier.code 0} true;
    $i47 := $zext.i8.i32($i46);
    goto corral_source_split_6730;

  corral_source_split_6730:
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i47, 0);
    goto corral_source_split_6731;

  corral_source_split_6731:
    assume {:verifier.code 0} true;
    $i7 := 4;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(5, 1));
    goto corral_source_split_6733;

  corral_source_split_6733:
    assume {:verifier.code 0} true;
    $i51 := $load.i8($M.0, $p50);
    goto corral_source_split_6734;

  corral_source_split_6734:
    assume {:verifier.code 0} true;
    $i52 := $zext.i8.i32($i51);
    goto corral_source_split_6735;

  corral_source_split_6735:
    assume {:verifier.code 0} true;
    $i53 := $eq.i32($i52, 0);
    goto corral_source_split_6736;

  corral_source_split_6736:
    assume {:verifier.code 0} true;
    $i7 := 5;
    assume true;
    goto $bb29, $bb30;

  $bb30:
    assume !($i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  $bb31:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(6, 1));
    goto corral_source_split_6738;

  corral_source_split_6738:
    assume {:verifier.code 0} true;
    $i56 := $load.i8($M.0, $p55);
    goto corral_source_split_6739;

  corral_source_split_6739:
    assume {:verifier.code 0} true;
    $i57 := $zext.i8.i32($i56);
    goto corral_source_split_6740;

  corral_source_split_6740:
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i57, 0);
    goto corral_source_split_6741;

  corral_source_split_6741:
    assume {:verifier.code 0} true;
    $i7 := 6;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i58 == 1);
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(7, 1));
    goto corral_source_split_6743;

  corral_source_split_6743:
    assume {:verifier.code 0} true;
    $i61 := $load.i8($M.0, $p60);
    goto corral_source_split_6744;

  corral_source_split_6744:
    assume {:verifier.code 0} true;
    $i62 := $zext.i8.i32($i61);
    goto corral_source_split_6745;

  corral_source_split_6745:
    assume {:verifier.code 0} true;
    $i63 := $eq.i32($i62, 0);
    goto corral_source_split_6746;

  corral_source_split_6746:
    assume {:verifier.code 0} true;
    $i7 := 7;
    assume true;
    goto $bb37, $bb38;

  $bb38:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb40;

  $bb40:
    assume {:verifier.code 0} true;
    $p65 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_6748;

  corral_source_split_6748:
    assume {:verifier.code 0} true;
    $i66 := $load.i8($M.0, $p65);
    goto corral_source_split_6749;

  corral_source_split_6749:
    assume {:verifier.code 0} true;
    $i67 := $zext.i8.i32($i66);
    goto corral_source_split_6750;

  corral_source_split_6750:
    assume {:verifier.code 0} true;
    $i68 := $eq.i32($i67, 0);
    goto corral_source_split_6751;

  corral_source_split_6751:
    assume {:verifier.code 0} true;
    $i7 := 8;
    assume {:branchcond $i68} true;
    goto $bb41, $bb42;

  $bb42:
    assume !($i68 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_6753;

  corral_source_split_6753:
    assume {:verifier.code 0} true;
    $i71 := $load.i8($M.0, $p70);
    goto corral_source_split_6754;

  corral_source_split_6754:
    assume {:verifier.code 0} true;
    $i72 := $zext.i8.i32($i71);
    goto corral_source_split_6755;

  corral_source_split_6755:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_6756;

  corral_source_split_6756:
    assume {:verifier.code 0} true;
    $i7 := 9;
    assume true;
    goto $bb45, $bb46;

  $bb46:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(10, 1));
    goto corral_source_split_6758;

  corral_source_split_6758:
    assume {:verifier.code 0} true;
    $i76 := $load.i8($M.0, $p75);
    goto corral_source_split_6759;

  corral_source_split_6759:
    assume {:verifier.code 0} true;
    $i77 := $zext.i8.i32($i76);
    goto corral_source_split_6760;

  corral_source_split_6760:
    assume {:verifier.code 0} true;
    $i78 := $eq.i32($i77, 0);
    goto corral_source_split_6761;

  corral_source_split_6761:
    assume {:verifier.code 0} true;
    $i7 := 10;
    assume {:branchcond $i78} true;
    goto $bb49, $bb50;

  $bb50:
    assume !($i78 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p80 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(11, 1));
    goto corral_source_split_6763;

  corral_source_split_6763:
    assume {:verifier.code 0} true;
    $i81 := $load.i8($M.0, $p80);
    goto corral_source_split_6764;

  corral_source_split_6764:
    assume {:verifier.code 0} true;
    $i82 := $zext.i8.i32($i81);
    goto corral_source_split_6765;

  corral_source_split_6765:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 0);
    goto corral_source_split_6766;

  corral_source_split_6766:
    assume {:verifier.code 0} true;
    $i7 := 11;
    assume true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p85 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(12, 1));
    goto corral_source_split_6768;

  corral_source_split_6768:
    assume {:verifier.code 0} true;
    $i86 := $load.i8($M.0, $p85);
    goto corral_source_split_6769;

  corral_source_split_6769:
    assume {:verifier.code 0} true;
    $i87 := $zext.i8.i32($i86);
    goto corral_source_split_6770;

  corral_source_split_6770:
    assume {:verifier.code 0} true;
    $i88 := $eq.i32($i87, 0);
    goto corral_source_split_6771;

  corral_source_split_6771:
    assume {:verifier.code 0} true;
    $i7 := 12;
    assume {:branchcond $i88} true;
    goto $bb57, $bb58;

  $bb58:
    assume !($i88 == 1);
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(13, 1));
    goto corral_source_split_6773;

  corral_source_split_6773:
    assume {:verifier.code 0} true;
    $i91 := $load.i8($M.0, $p90);
    goto corral_source_split_6774;

  corral_source_split_6774:
    assume {:verifier.code 0} true;
    $i92 := $zext.i8.i32($i91);
    goto corral_source_split_6775;

  corral_source_split_6775:
    assume {:verifier.code 0} true;
    $i93 := $eq.i32($i92, 0);
    goto corral_source_split_6776;

  corral_source_split_6776:
    assume {:verifier.code 0} true;
    $i7 := 13;
    assume {:branchcond $i93} true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i93 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(14, 1));
    goto corral_source_split_6778;

  corral_source_split_6778:
    assume {:verifier.code 0} true;
    $i96 := $load.i8($M.0, $p95);
    goto corral_source_split_6779;

  corral_source_split_6779:
    assume {:verifier.code 0} true;
    $i97 := $zext.i8.i32($i96);
    goto corral_source_split_6780;

  corral_source_split_6780:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_6781;

  corral_source_split_6781:
    assume {:verifier.code 0} true;
    $i7 := 14;
    assume true;
    goto $bb65, $bb66;

  $bb66:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p100 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(15, 1));
    goto corral_source_split_6783;

  corral_source_split_6783:
    assume {:verifier.code 0} true;
    $i101 := $load.i8($M.0, $p100);
    goto corral_source_split_6784;

  corral_source_split_6784:
    assume {:verifier.code 0} true;
    $i102 := $zext.i8.i32($i101);
    goto corral_source_split_6785;

  corral_source_split_6785:
    assume {:verifier.code 0} true;
    $i103 := $eq.i32($i102, 0);
    goto corral_source_split_6786;

  corral_source_split_6786:
    assume {:verifier.code 0} true;
    $i7 := 15;
    assume true;
    goto $bb69, $bb70;

  $bb70:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(16, 1));
    goto corral_source_split_6788;

  corral_source_split_6788:
    assume {:verifier.code 0} true;
    $i106 := $load.i8($M.0, $p105);
    goto corral_source_split_6789;

  corral_source_split_6789:
    assume {:verifier.code 0} true;
    $i107 := $zext.i8.i32($i106);
    goto corral_source_split_6790;

  corral_source_split_6790:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 0);
    goto corral_source_split_6791;

  corral_source_split_6791:
    assume {:verifier.code 0} true;
    $i7 := 16;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(17, 1));
    goto corral_source_split_6793;

  corral_source_split_6793:
    assume {:verifier.code 0} true;
    $i111 := $load.i8($M.0, $p110);
    goto corral_source_split_6794;

  corral_source_split_6794:
    assume {:verifier.code 0} true;
    $i112 := $zext.i8.i32($i111);
    goto corral_source_split_6795;

  corral_source_split_6795:
    assume {:verifier.code 0} true;
    $i113 := $eq.i32($i112, 0);
    goto corral_source_split_6796;

  corral_source_split_6796:
    assume {:verifier.code 0} true;
    $i7 := 17;
    assume {:branchcond $i113} true;
    goto $bb77, $bb78;

  $bb78:
    assume !($i113 == 1);
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(18, 1));
    goto corral_source_split_6798;

  corral_source_split_6798:
    assume {:verifier.code 0} true;
    $i116 := $load.i8($M.0, $p115);
    goto corral_source_split_6799;

  corral_source_split_6799:
    assume {:verifier.code 0} true;
    $i117 := $zext.i8.i32($i116);
    goto corral_source_split_6800;

  corral_source_split_6800:
    assume {:verifier.code 0} true;
    $i118 := $eq.i32($i117, 0);
    goto corral_source_split_6801;

  corral_source_split_6801:
    assume {:verifier.code 0} true;
    $i7 := 18;
    assume true;
    goto $bb81, $bb82;

  $bb82:
    assume !($i118 == 1);
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(19, 1));
    goto corral_source_split_6803;

  corral_source_split_6803:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.0, $p120);
    goto corral_source_split_6804;

  corral_source_split_6804:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i32($i121);
    goto corral_source_split_6805;

  corral_source_split_6805:
    assume {:verifier.code 0} true;
    $i123 := $eq.i32($i122, 0);
    goto corral_source_split_6806;

  corral_source_split_6806:
    assume {:verifier.code 0} true;
    $i7 := 19;
    assume {:branchcond $i123} true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i123 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(20, 1));
    goto corral_source_split_6808;

  corral_source_split_6808:
    assume {:verifier.code 0} true;
    $i126 := $load.i8($M.0, $p125);
    goto corral_source_split_6809;

  corral_source_split_6809:
    assume {:verifier.code 0} true;
    $i127 := $zext.i8.i32($i126);
    goto corral_source_split_6810;

  corral_source_split_6810:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 0);
    goto corral_source_split_6811;

  corral_source_split_6811:
    assume {:verifier.code 0} true;
    $i7 := 20;
    assume true;
    goto $bb89, $bb90;

  $bb90:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p130 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(21, 1));
    goto corral_source_split_6813;

  corral_source_split_6813:
    assume {:verifier.code 0} true;
    $i131 := $load.i8($M.0, $p130);
    goto corral_source_split_6814;

  corral_source_split_6814:
    assume {:verifier.code 0} true;
    $i132 := $zext.i8.i32($i131);
    goto corral_source_split_6815;

  corral_source_split_6815:
    assume {:verifier.code 0} true;
    $i133 := $eq.i32($i132, 0);
    goto corral_source_split_6816;

  corral_source_split_6816:
    assume {:verifier.code 0} true;
    $i7 := 21;
    assume {:branchcond $i133} true;
    goto $bb93, $bb94;

  $bb94:
    assume !($i133 == 1);
    assume {:verifier.code 0} true;
    goto $bb95;

  $bb95:
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(22, 1));
    goto corral_source_split_6818;

  corral_source_split_6818:
    assume {:verifier.code 0} true;
    $i136 := $load.i8($M.0, $p135);
    goto corral_source_split_6819;

  corral_source_split_6819:
    assume {:verifier.code 0} true;
    $i137 := $zext.i8.i32($i136);
    goto corral_source_split_6820;

  corral_source_split_6820:
    assume {:verifier.code 0} true;
    $i138 := $eq.i32($i137, 0);
    goto corral_source_split_6821;

  corral_source_split_6821:
    assume {:verifier.code 0} true;
    $i7 := 22;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    goto $bb100;

  $bb100:
    assume {:verifier.code 0} true;
    $p140 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(23, 1));
    goto corral_source_split_6823;

  corral_source_split_6823:
    assume {:verifier.code 0} true;
    $i141 := $load.i8($M.0, $p140);
    goto corral_source_split_6824;

  corral_source_split_6824:
    assume {:verifier.code 0} true;
    $i142 := $zext.i8.i32($i141);
    goto corral_source_split_6825;

  corral_source_split_6825:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 0);
    goto corral_source_split_6826;

  corral_source_split_6826:
    assume {:verifier.code 0} true;
    $i7 := 23;
    assume true;
    goto $bb101, $bb102;

  $bb102:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb103;

  $bb103:
    assume {:verifier.code 0} true;
    goto $bb104;

  $bb104:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(24, 1));
    goto corral_source_split_6828;

  corral_source_split_6828:
    assume {:verifier.code 0} true;
    $i146 := $load.i8($M.0, $p145);
    goto corral_source_split_6829;

  corral_source_split_6829:
    assume {:verifier.code 0} true;
    $i147 := $zext.i8.i32($i146);
    goto corral_source_split_6830;

  corral_source_split_6830:
    assume {:verifier.code 0} true;
    $i148 := $eq.i32($i147, 0);
    goto corral_source_split_6831;

  corral_source_split_6831:
    assume {:verifier.code 0} true;
    $i7 := 24;
    assume true;
    goto $bb105, $bb106;

  $bb106:
    assume !($i148 == 1);
    assume {:verifier.code 0} true;
    goto $bb107;

  $bb107:
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $p150 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(25, 1));
    goto corral_source_split_6833;

  corral_source_split_6833:
    assume {:verifier.code 0} true;
    $i151 := $load.i8($M.0, $p150);
    goto corral_source_split_6834;

  corral_source_split_6834:
    assume {:verifier.code 0} true;
    $i152 := $zext.i8.i32($i151);
    goto corral_source_split_6835;

  corral_source_split_6835:
    assume {:verifier.code 0} true;
    $i153 := $eq.i32($i152, 0);
    goto corral_source_split_6836;

  corral_source_split_6836:
    assume {:verifier.code 0} true;
    $i7 := 25;
    assume {:branchcond $i153} true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i153 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb112;

  $bb112:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(26, 1));
    goto corral_source_split_6838;

  corral_source_split_6838:
    assume {:verifier.code 0} true;
    $i156 := $load.i8($M.0, $p155);
    goto corral_source_split_6839;

  corral_source_split_6839:
    assume {:verifier.code 0} true;
    $i157 := $zext.i8.i32($i156);
    goto corral_source_split_6840;

  corral_source_split_6840:
    assume {:verifier.code 0} true;
    $i158 := $eq.i32($i157, 0);
    goto corral_source_split_6841;

  corral_source_split_6841:
    assume {:verifier.code 0} true;
    $i7 := 26;
    assume {:branchcond $i158} true;
    goto $bb113, $bb114;

  $bb114:
    assume !($i158 == 1);
    assume {:verifier.code 0} true;
    goto $bb115;

  $bb115:
    assume {:verifier.code 0} true;
    goto $bb116;

  $bb116:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(27, 1));
    goto corral_source_split_6843;

  corral_source_split_6843:
    assume {:verifier.code 0} true;
    $i161 := $load.i8($M.0, $p160);
    goto corral_source_split_6844;

  corral_source_split_6844:
    assume {:verifier.code 0} true;
    $i162 := $zext.i8.i32($i161);
    goto corral_source_split_6845;

  corral_source_split_6845:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 0);
    goto corral_source_split_6846;

  corral_source_split_6846:
    assume {:verifier.code 0} true;
    $i7 := 27;
    assume true;
    goto $bb117, $bb118;

  $bb118:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb119;

  $bb119:
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(28, 1));
    goto corral_source_split_6848;

  corral_source_split_6848:
    assume {:verifier.code 0} true;
    $i166 := $load.i8($M.0, $p165);
    goto corral_source_split_6849;

  corral_source_split_6849:
    assume {:verifier.code 0} true;
    $i167 := $zext.i8.i32($i166);
    goto corral_source_split_6850;

  corral_source_split_6850:
    assume {:verifier.code 0} true;
    $i168 := $eq.i32($i167, 0);
    goto corral_source_split_6851;

  corral_source_split_6851:
    assume {:verifier.code 0} true;
    $i7 := 28;
    assume {:branchcond $i168} true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i168 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    goto $bb124;

  $bb124:
    assume {:verifier.code 0} true;
    $p170 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(29, 1));
    goto corral_source_split_6853;

  corral_source_split_6853:
    assume {:verifier.code 0} true;
    $i171 := $load.i8($M.0, $p170);
    goto corral_source_split_6854;

  corral_source_split_6854:
    assume {:verifier.code 0} true;
    $i172 := $zext.i8.i32($i171);
    goto corral_source_split_6855;

  corral_source_split_6855:
    assume {:verifier.code 0} true;
    $i173 := $eq.i32($i172, 0);
    goto corral_source_split_6856;

  corral_source_split_6856:
    assume {:verifier.code 0} true;
    $i7 := 29;
    assume {:branchcond $i173} true;
    goto $bb125, $bb126;

  $bb126:
    assume !($i173 == 1);
    assume {:verifier.code 0} true;
    goto $bb127;

  $bb127:
    assume {:verifier.code 0} true;
    goto $bb128;

  $bb128:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(30, 1));
    goto corral_source_split_6858;

  corral_source_split_6858:
    assume {:verifier.code 0} true;
    $i176 := $load.i8($M.0, $p175);
    goto corral_source_split_6859;

  corral_source_split_6859:
    assume {:verifier.code 0} true;
    $i177 := $zext.i8.i32($i176);
    goto corral_source_split_6860;

  corral_source_split_6860:
    assume {:verifier.code 0} true;
    $i178 := $eq.i32($i177, 0);
    goto corral_source_split_6861;

  corral_source_split_6861:
    assume {:verifier.code 0} true;
    $i7 := 30;
    assume {:branchcond $i178} true;
    goto $bb129, $bb130;

  $bb130:
    assume !($i178 == 1);
    assume {:verifier.code 0} true;
    goto $bb131;

  $bb131:
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(31, 1));
    goto corral_source_split_6863;

  corral_source_split_6863:
    assume {:verifier.code 0} true;
    $i181 := $load.i8($M.0, $p180);
    goto corral_source_split_6864;

  corral_source_split_6864:
    assume {:verifier.code 0} true;
    $i182 := $zext.i8.i32($i181);
    goto corral_source_split_6865;

  corral_source_split_6865:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 0);
    goto corral_source_split_6866;

  corral_source_split_6866:
    assume {:verifier.code 0} true;
    $i7 := 31;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i8 := 32;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_6681;

  corral_source_split_6681:
    assume {:verifier.code 0} true;
    $i9 := $sle.i32($i8, 31);
    goto corral_source_split_6682;

  corral_source_split_6682:
    assume {:verifier.code 0} true;
    assume {:branchcond $i9} true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i9 == 1);
    assume {:verifier.code 0} true;
    $p27 := $0.ref;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_6714;

  corral_source_split_6714:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_6715;

  corral_source_split_6715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1260} spin_unlock($p28);
    goto corral_source_split_6716;

  corral_source_split_6716:
    assume {:verifier.code 0} true;
    $r := $p27;
    return;

  $bb10:
    assume $i9 == 1;
    goto corral_source_split_6689;

  corral_source_split_6689:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_6690;

  corral_source_split_6690:
    assume {:verifier.code 0} true;
    $p11 := $load.ref($M.0, $p10);
    goto corral_source_split_6691;

  corral_source_split_6691:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p11, $mul.ref(0, 15104)), $mul.ref(10752, 1));
    goto corral_source_split_6692;

  corral_source_split_6692:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_6693;

  corral_source_split_6693:
    assume {:verifier.code 0} true;
    $i14 := $sext.i32.i64($i8);
    goto corral_source_split_6694;

  corral_source_split_6694:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($p13, $mul.ref($i14, 136));
    goto corral_source_split_6695;

  corral_source_split_6695:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_6696;

  corral_source_split_6696:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_58 := $M.0;
    call {:si_unique_call 1257} cmdloc_dummy_var_59 := $memset.i8(cmdloc_dummy_var_58, $p16, 0, 160, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_59;
    goto corral_source_split_6697;

  corral_source_split_6697:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p13, $mul.ref($i14, 136)), $mul.ref(8, 1));
    goto corral_source_split_6698;

  corral_source_split_6698:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p17, 64);
    goto corral_source_split_6699;

  corral_source_split_6699:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p13, $mul.ref($i14, 136)), $mul.ref(0, 1));
    goto corral_source_split_6700;

  corral_source_split_6700:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p18, 1);
    goto corral_source_split_6701;

  corral_source_split_6701:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p13, $mul.ref($i14, 136)), $mul.ref(4, 1));
    goto corral_source_split_6702;

  corral_source_split_6702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p19, 1);
    goto corral_source_split_6703;

  corral_source_split_6703:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p13, $mul.ref($i14, 136)), $mul.ref(64, 1));
    goto corral_source_split_6704;

  corral_source_split_6704:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1258} INIT_LIST_HEAD($p20);
    goto corral_source_split_6705;

  corral_source_split_6705:
    assume {:verifier.code 0} true;
    $p21 := $bitcast.ref.ref($p15);
    goto corral_source_split_6706;

  corral_source_split_6706:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1259} $i22 := virt_to_phys($p21);
    goto corral_source_split_6707;

  corral_source_split_6707:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p13, $mul.ref($i14, 136)), $mul.ref(56, 1));
    goto corral_source_split_6708;

  corral_source_split_6708:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p23, $i22);
    goto corral_source_split_6709;

  corral_source_split_6709:
    assume {:verifier.code 0} true;
    $i24 := $sext.i32.i64($i8);
    goto corral_source_split_6710;

  corral_source_split_6710:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref($i24, 1));
    goto corral_source_split_6711;

  corral_source_split_6711:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p26, 1);
    goto corral_source_split_6712;

  corral_source_split_6712:
    assume {:verifier.code 0} true;
    $p27 := $p15;
    goto $bb12;

  $bb133:
    assume {:verifier.code 0} true;
    assume $i183 == 1;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_6679;

  corral_source_split_6679:
    assume {:verifier.code 0} true;
    $i8 := $i7;
    goto $bb6;

  $bb129:
    assume {:verifier.code 0} true;
    assume $i178 == 1;
    goto $bb4;

  $bb125:
    assume {:verifier.code 0} true;
    assume $i173 == 1;
    goto $bb4;

  $bb121:
    assume {:verifier.code 0} true;
    assume $i168 == 1;
    goto $bb4;

  $bb117:
    assume {:verifier.code 0} true;
    assume $i163 == 1;
    goto $bb4;

  $bb113:
    assume {:verifier.code 0} true;
    assume $i158 == 1;
    goto $bb4;

  $bb109:
    assume {:verifier.code 0} true;
    assume $i153 == 1;
    goto $bb4;

  $bb105:
    assume {:verifier.code 0} true;
    assume $i148 == 1;
    goto $bb4;

  $bb101:
    assume {:verifier.code 0} true;
    assume $i143 == 1;
    goto $bb4;

  $bb97:
    assume {:verifier.code 0} true;
    assume $i138 == 1;
    goto $bb4;

  $bb93:
    assume {:verifier.code 0} true;
    assume $i133 == 1;
    goto $bb4;

  $bb89:
    assume {:verifier.code 0} true;
    assume $i128 == 1;
    goto $bb4;

  $bb85:
    assume {:verifier.code 0} true;
    assume $i123 == 1;
    goto $bb4;

  $bb81:
    assume {:verifier.code 0} true;
    assume $i118 == 1;
    goto $bb4;

  $bb77:
    assume {:verifier.code 0} true;
    assume $i113 == 1;
    goto $bb4;

  $bb73:
    assume {:verifier.code 0} true;
    assume $i108 == 1;
    goto $bb4;

  $bb69:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb4;

  $bb65:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb4;

  $bb61:
    assume {:verifier.code 0} true;
    assume $i93 == 1;
    goto $bb4;

  $bb57:
    assume {:verifier.code 0} true;
    assume $i88 == 1;
    goto $bb4;

  $bb53:
    assume {:verifier.code 0} true;
    assume $i83 == 1;
    goto $bb4;

  $bb49:
    assume {:verifier.code 0} true;
    assume $i78 == 1;
    goto $bb4;

  $bb45:
    assume {:verifier.code 0} true;
    assume $i73 == 1;
    goto $bb4;

  $bb41:
    assume {:verifier.code 0} true;
    assume $i68 == 1;
    goto $bb4;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i63 == 1;
    goto $bb4;

  $bb33:
    assume {:verifier.code 0} true;
    assume $i58 == 1;
    goto $bb4;

  $bb29:
    assume {:verifier.code 0} true;
    assume $i53 == 1;
    goto $bb4;

  $bb25:
    assume {:verifier.code 0} true;
    assume $i48 == 1;
    goto $bb4;

  $bb21:
    assume {:verifier.code 0} true;
    assume $i43 == 1;
    goto $bb4;

  $bb17:
    assume {:verifier.code 0} true;
    assume $i38 == 1;
    goto $bb4;

  $bb13:
    assume {:verifier.code 0} true;
    assume $i33 == 1;
    goto $bb4;

  $bb3:
    assume {:verifier.code 0} true;
    assume $i6 == 1;
    goto $bb4;
}



const __phys_addr: ref;

axiom __phys_addr == $sub.ref(0, 358677);

procedure __phys_addr($i0: i64) returns ($r: i64);
  free requires assertsPassed;



implementation __phys_addr($i0: i64) returns ($r: i64)
{
  var $i1: i64;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1261} {:cexpr "__phys_addr:arg:arg0"} boogie_si_record_i64($i0);
    goto corral_source_split_6868;

  corral_source_split_6868:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1262} $i1 := __VERIFIER_nondet_ulong();
    call {:si_unique_call 1263} {:cexpr "smack:ext:__VERIFIER_nondet_ulong"} boogie_si_record_i64($i1);
    goto corral_source_split_6869;

  corral_source_split_6869:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const atomic_set: ref;

axiom atomic_set == $sub.ref(0, 359709);

procedure atomic_set($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation atomic_set($p0: ref, $i1: i32)
{
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1264} {:cexpr "atomic_set:arg:i"} boogie_si_record_i32($i1);
    goto corral_source_split_6871;

  corral_source_split_6871:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p0, $mul.ref(0, 4)), $mul.ref(0, 1));
    goto corral_source_split_6872;

  corral_source_split_6872:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p2, $i1);
    goto corral_source_split_6873;

  corral_source_split_6873:
    assume {:verifier.code 0} true;
    return;
}



const list_add_tail: ref;

axiom list_add_tail == $sub.ref(0, 360741);

procedure list_add_tail($p0: ref, $p1: ref);
  free requires assertsPassed;



implementation list_add_tail($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_6875;

  corral_source_split_6875:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 16)), $mul.ref(8, 1));
    goto corral_source_split_6876;

  corral_source_split_6876:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_6877;

  corral_source_split_6877:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1265} __list_add($p0, $p3, $p1);
    goto corral_source_split_6878;

  corral_source_split_6878:
    assume {:verifier.code 0} true;
    return;
}



const phys_to_virt: ref;

axiom phys_to_virt == $sub.ref(0, 361773);

procedure phys_to_virt($i0: i64) returns ($r: ref);
  free requires assertsPassed;



implementation phys_to_virt($i0: i64) returns ($r: ref)
{
  var $i1: i64;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1266} {:cexpr "phys_to_virt:arg:address"} boogie_si_record_i64($i0);
    goto corral_source_split_6880;

  corral_source_split_6880:
    assume {:verifier.code 0} true;
    $i1 := $add.i64($i0, $sub.i64(0, 131941395333120));
    goto corral_source_split_6881;

  corral_source_split_6881:
    assume {:verifier.code 0} true;
    $p2 := $i2p.i64.ref($i1);
    goto corral_source_split_6882;

  corral_source_split_6882:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const oxu_buf_alloc: ref;

axiom oxu_buf_alloc == $sub.ref(0, 362805);

procedure oxu_buf_alloc($p0: ref, $p1: ref, $i2: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.0;



implementation oxu_buf_alloc($p0: ref, $p1: ref, $i2: i32) returns ($r: i32)
{
  var $i3: i1;
  var $p4: ref;
  var $p6: ref;
  var $p7: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $i15: i32;
  var $i16: i1;
  var $i14: i32;
  var $i17: i32;
  var $i13: i32;
  var $i19: i1;
  var $i22: i32;
  var $i23: i64;
  var $p25: ref;
  var $i26: i8;
  var $i27: i32;
  var $i28: i1;
  var $i29: i32;
  var $i31: i32;
  var $i32: i1;
  var $i21: i32;
  var $i33: i32;
  var $i20: i32;
  var $i30: i32;
  var $i34: i1;
  var $i35: i32;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $i45: i64;
  var $p46: ref;
  var $i47: i32;
  var $p48: ref;
  var $i49: i8;
  var $i50: i64;
  var $p52: ref;
  var $p53: ref;
  var $i54: i64;
  var $p56: ref;
  var $i57: i8;
  var $i58: i32;
  var $i59: i1;
  var $i60: i32;
  var $i61: i32;
  var $i62: i1;
  var $i18: i32;
  var $p63: ref;
  var $i8: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1267} {:cexpr "oxu_buf_alloc:arg:len"} boogie_si_record_i32($i2);
    goto corral_source_split_6884;

  corral_source_split_6884:
    assume {:verifier.code 0} true;
    $i3 := $sgt.i32($i2, 4096);
    goto corral_source_split_6885;

  corral_source_split_6885:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_6895;

  corral_source_split_6895:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1270} spin_lock($p9);
    goto corral_source_split_6896;

  corral_source_split_6896:
    assume {:verifier.code 0} true;
    $i10 := $add.i32($i2, 511);
    goto corral_source_split_6897;

  corral_source_split_6897:
    assume {:verifier.code 0} true;
    $i11 := $sdiv.i32($i10, 512);
    call {:si_unique_call 1271} {:cexpr "n_blocks"} boogie_si_record_i32($i11);
    goto corral_source_split_6898;

  corral_source_split_6898:
    assume {:verifier.code 0} true;
    $i12 := $slt.i32(1, $i11);
    goto corral_source_split_6899;

  corral_source_split_6899:
    assume {:verifier.code 0} true;
    $i13 := 1;
    assume {:branchcond $i12} true;
    goto $bb5, $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume !($i12 == 1);
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i18 := 0;
    goto $bb13;

  $bb13:
    call $i19, $i22, $i23, $p25, $i26, $i27, $i28, $i29, $i31, $i32, $i21, $i33, $i20, $i30, $i34, $i35, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i18 := oxu_buf_alloc_loop_$bb13($p0, $i13, $i19, $i22, $i23, $p25, $i26, $i27, $i28, $i29, $i31, $i32, $i21, $i33, $i20, $i30, $i34, $i35, $i54, $p56, $i57, $i58, $i59, $i60, $i61, $i62, $i18);
    goto $bb13_last;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i19 := $slt.i32(0, $i13);
    goto corral_source_split_6912;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    $i20 := 0;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    assume !($i19 == 1);
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    $i30 := $i20;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6927;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i30, $i13);
    goto corral_source_split_6928;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    $i35 := $i18;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume !($i34 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_6943;

  corral_source_split_6943:
    assume {:verifier.code 0} true;
    $p37 := $load.ref($M.0, $p36);
    goto corral_source_split_6944;

  corral_source_split_6944:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p37, $mul.ref(0, 15104)), $mul.ref(0, 1));
    goto corral_source_split_6945;

  corral_source_split_6945:
    assume {:verifier.code 0} true;
    $p39 := $bitcast.ref.ref($p38);
    goto corral_source_split_6946;

  corral_source_split_6946:
    assume {:verifier.code 0} true;
    $i40 := $sext.i32.i64($i35);
    goto corral_source_split_6947;

  corral_source_split_6947:
    assume {:verifier.code 0} true;
    $p41 := $add.ref($p39, $mul.ref($i40, 1));
    goto corral_source_split_6948;

  corral_source_split_6948:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_6949;

  corral_source_split_6949:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p42, $p41);
    goto corral_source_split_6950;

  corral_source_split_6950:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(104, 1));
    goto corral_source_split_6951;

  corral_source_split_6951:
    assume {:verifier.code 0} true;
    $p44 := $load.ref($M.0, $p43);
    goto corral_source_split_6952;

  corral_source_split_6952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1275} $i45 := virt_to_phys($p44);
    goto corral_source_split_6953;

  corral_source_split_6953:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(112, 1));
    goto corral_source_split_6954;

  corral_source_split_6954:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p46, $i45);
    goto corral_source_split_6955;

  corral_source_split_6955:
    assume {:verifier.code 0} true;
    $i47 := $mul.i32($i13, 512);
    goto corral_source_split_6956;

  corral_source_split_6956:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p1, $mul.ref(0, 136)), $mul.ref(96, 1));
    goto corral_source_split_6957;

  corral_source_split_6957:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p48, $i47);
    goto corral_source_split_6958;

  corral_source_split_6958:
    assume {:verifier.code 0} true;
    $i49 := $trunc.i32.i8($i13);
    goto corral_source_split_6959;

  corral_source_split_6959:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i35);
    goto corral_source_split_6960;

  corral_source_split_6960:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(49, 1)), $mul.ref($i50, 1));
    goto corral_source_split_6961;

  corral_source_split_6961:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p52, $i49);
    goto corral_source_split_6962;

  corral_source_split_6962:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_6963;

  corral_source_split_6963:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1276} spin_unlock($p53);
    goto corral_source_split_6964;

  corral_source_split_6964:
    assume {:verifier.code 0} true;
    $i8 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_6893;

  corral_source_split_6893:
    assume {:verifier.code 0} true;
    $r := $i8;
    return;

  $bb27:
    assume $i34 == 1;
    goto corral_source_split_6935;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    $i54 := $sext.i32.i64($i18);
    goto corral_source_split_6937;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(49, 1)), $mul.ref($i54, 1));
    goto corral_source_split_6938;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    $i57 := $load.i8($M.0, $p56);
    goto corral_source_split_6939;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    $i58 := $zext.i8.i32($i57);
    call {:si_unique_call 1274} {:cexpr "_max2"} boogie_si_record_i32($i58);
    goto corral_source_split_6940;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    $i59 := $sgt.i32($i13, $i58);
    goto corral_source_split_6941;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i59 == 1);
    goto corral_source_split_6968;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    $i60 := $i58;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    $i61 := $add.i32($i60, $i18);
    call {:si_unique_call 1277} {:cexpr "i"} boogie_si_record_i32($i61);
    goto corral_source_split_6971;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    $i62 := $sle.i32($i61, 7);
    goto corral_source_split_6972;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(80, 1));
    goto corral_source_split_6974;

  corral_source_split_6974:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1278} spin_unlock($p63);
    goto corral_source_split_6975;

  corral_source_split_6975:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb34:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i18 := $i61;
    goto $bb34_dummy;

  $bb31:
    assume $i59 == 1;
    goto corral_source_split_6966;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    $i60 := $i13;
    goto $bb33;

  $bb15:
    assume $i19 == 1;
    goto corral_source_split_6914;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    $i21 := 0;
    goto $bb18;

  $bb18:
    call $i22, $i23, $p25, $i26, $i27, $i28, $i29, $i31, $i32, $i21, $i33 := oxu_buf_alloc_loop_$bb18($p0, $i13, $i22, $i23, $p25, $i26, $i27, $i28, $i29, $i31, $i32, $i21, $i33, $i18);
    goto $bb18_last;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $i22 := $add.i32($i18, $i21);
    goto corral_source_split_6918;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    $i23 := $sext.i32.i64($i22);
    goto corral_source_split_6919;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(49, 1)), $mul.ref($i23, 1));
    goto corral_source_split_6920;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.0, $p25);
    goto corral_source_split_6921;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i32($i26);
    goto corral_source_split_6922;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_6923;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    $i29 := $i21;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $i31 := $add.i32($i21, 1);
    call {:si_unique_call 1273} {:cexpr "j"} boogie_si_record_i32($i31);
    goto corral_source_split_6930;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    $i32 := $slt.i32($i31, $i13);
    goto corral_source_split_6931;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    assume true;
    goto $bb24, $bb25;

  $bb25:
    assume !($i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6933;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    $i20 := $i33;
    goto $bb17;

  $bb24:
    assume $i32 == 1;
    assume {:verifier.code 0} true;
    $i21 := $i31;
    goto $bb24_dummy;

  $bb20:
    assume $i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6925;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    $i30 := $i29;
    goto $bb22;

  $bb5:
    assume $i12 == 1;
    goto corral_source_split_6901;

  corral_source_split_6901:
    assume {:verifier.code 0} true;
    $i14 := 1;
    goto $bb8;

  $bb8:
    call $i15, $i16, $i14, $i17 := oxu_buf_alloc_loop_$bb8($i11, $i15, $i16, $i14, $i17);
    goto $bb8_last;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $i15 := $shl.i32($i14, 1);
    call {:si_unique_call 1272} {:cexpr "a_blocks"} boogie_si_record_i32($i15);
    goto corral_source_split_6905;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    $i16 := $slt.i32($i15, $i11);
    goto corral_source_split_6906;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    $i17 := $i15;
    assume true;
    goto $bb10, $bb11;

  $bb11:
    assume !($i16 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6908;

  corral_source_split_6908:
    assume {:verifier.code 0} true;
    $i13 := $i17;
    goto $bb7;

  $bb10:
    assume $i16 == 1;
    assume {:verifier.code 0} true;
    $i14 := $i15;
    goto $bb10_dummy;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_6887;

  corral_source_split_6887:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1268} $p4 := oxu_to_hcd($p0);
    goto corral_source_split_6888;

  corral_source_split_6888:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($add.ref($p4, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_6889;

  corral_source_split_6889:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_6890;

  corral_source_split_6890:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1269} dev_err.ref.ref.i32($p7, .str.80, $i2);
    goto corral_source_split_6891;

  corral_source_split_6891:
    assume {:verifier.code 0} true;
    $i8 := $sub.i32(0, 12);
    goto $bb3;

  $bb24_dummy:
    assume false;
    return;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6916;

  $bb34_dummy:
    assume false;
    return;

  $bb13_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6910;

  $bb10_dummy:
    assume false;
    return;

  $bb8_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6903;
}



const qtd_fill: ref;

axiom qtd_fill == $sub.ref(0, 363837);

procedure qtd_fill($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0;



implementation qtd_fill($p0: ref, $i1: i64, $i2: i64, $i3: i32, $i4: i32) returns ($r: i32)
{
  var $i5: i32;
  var $p7: ref;
  var $i8: i64;
  var $i9: i32;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i64;
  var $i16: i1;
  var $i17: i32;
  var $i18: i64;
  var $i19: i64;
  var $i20: i1;
  var $i21: i32;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $i31: i32;
  var $i32: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i32;
  var $i37: i64;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i64;
  var $i43: i1;
  var $i44: i32;
  var $i46: i32;
  var $i45: i32;
  var $i47: i32;
  var $i48: i64;
  var $i49: i1;
  var $i50: i1;
  var $i51: i1;
  var $i28: i64;
  var $i29: i32;
  var $i30: i32;
  var $i52: i32;
  var $i27: i32;
  var $i53: i64;
  var $i54: i1;
  var $i55: i32;
  var $i56: i32;
  var $i57: i32;
  var $i22: i32;
  var $i58: i32;
  var $i59: i32;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1279} {:cexpr "qtd_fill:arg:buf"} boogie_si_record_i64($i1);
    call {:si_unique_call 1280} {:cexpr "qtd_fill:arg:len"} boogie_si_record_i64($i2);
    call {:si_unique_call 1281} {:cexpr "qtd_fill:arg:token"} boogie_si_record_i32($i3);
    call {:si_unique_call 1282} {:cexpr "qtd_fill:arg:maxpacket"} boogie_si_record_i32($i4);
    call {:si_unique_call 1283} {:cexpr "qtd_fill:arg:addr"} boogie_si_record_i64($i1);
    goto corral_source_split_6977;

  corral_source_split_6977:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i1);
    goto corral_source_split_6978;

  corral_source_split_6978:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(12, 1)), $mul.ref(0, 4));
    goto corral_source_split_6979;

  corral_source_split_6979:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p7, $i5);
    goto corral_source_split_6980;

  corral_source_split_6980:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i1, 32);
    goto corral_source_split_6981;

  corral_source_split_6981:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_6982;

  corral_source_split_6982:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(0, 4));
    goto corral_source_split_6983;

  corral_source_split_6983:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, $i9);
    goto corral_source_split_6984;

  corral_source_split_6984:
    assume {:verifier.code 0} true;
    $i12 := $trunc.i64.i32($i1);
    goto corral_source_split_6985;

  corral_source_split_6985:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 4095);
    goto corral_source_split_6986;

  corral_source_split_6986:
    assume {:verifier.code 0} true;
    $i14 := $sub.i32(4096, $i13);
    call {:si_unique_call 1284} {:cexpr "count"} boogie_si_record_i32($i14);
    goto corral_source_split_6987;

  corral_source_split_6987:
    assume {:verifier.code 0} true;
    $i15 := $sext.i32.i64($i14);
    goto corral_source_split_6988;

  corral_source_split_6988:
    assume {:verifier.code 0} true;
    $i16 := $ugt.i64($i15, $i2);
    goto corral_source_split_6989;

  corral_source_split_6989:
    assume {:verifier.code 0} true;
    $i17 := $zext.i1.i32($i16);
    goto corral_source_split_6990;

  corral_source_split_6990:
    assume {:verifier.code 0} true;
    $i18 := $sext.i32.i64($i17);
    goto corral_source_split_6991;

  corral_source_split_6991:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1285} $i19 := ldv__builtin_expect($i18, 1);
    call {:si_unique_call 1286} {:cexpr "tmp"} boogie_si_record_i64($i19);
    goto corral_source_split_6992;

  corral_source_split_6992:
    assume {:verifier.code 0} true;
    $i20 := $ne.i64($i19, 0);
    goto corral_source_split_6993;

  corral_source_split_6993:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i20 == 1);
    goto corral_source_split_6998;

  corral_source_split_6998:
    assume {:verifier.code 0} true;
    $i23 := $add.i64($i1, 4096);
    call {:si_unique_call 1288} {:cexpr "buf"} boogie_si_record_i64($i23);
    goto corral_source_split_6999;

  corral_source_split_6999:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, $sub.i64(0, 4096));
    call {:si_unique_call 1289} {:cexpr "buf"} boogie_si_record_i64($i24);
    goto corral_source_split_7000;

  corral_source_split_7000:
    assume {:verifier.code 0} true;
    $i25 := $sext.i32.i64($i14);
    goto corral_source_split_7001;

  corral_source_split_7001:
    assume {:verifier.code 0} true;
    $i26 := $ult.i64($i25, $i2);
    goto corral_source_split_7002;

  corral_source_split_7002:
    assume {:verifier.code 0} true;
    $i27 := $i14;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i26 == 1);
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $i53 := $sext.i32.i64($i27);
    goto corral_source_split_7045;

  corral_source_split_7045:
    assume {:verifier.code 0} true;
    $i54 := $ne.i64($i53, $i2);
    goto corral_source_split_7046;

  corral_source_split_7046:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i57 := $i27;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    $i22 := $i57;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7004;

  corral_source_split_7004:
    assume {:verifier.code 0} true;
    $i58 := $shl.i32($i22, 16);
    goto corral_source_split_7005;

  corral_source_split_7005:
    assume {:verifier.code 0} true;
    $i59 := $or.i32($i58, $i3);
    goto corral_source_split_7006;

  corral_source_split_7006:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(8, 1));
    goto corral_source_split_7007;

  corral_source_split_7007:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p60, $i59);
    goto corral_source_split_7008;

  corral_source_split_7008:
    assume {:verifier.code 0} true;
    $i61 := $sext.i32.i64($i22);
    goto corral_source_split_7009;

  corral_source_split_7009:
    assume {:verifier.code 0} true;
    $p62 := $add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(88, 1));
    goto corral_source_split_7010;

  corral_source_split_7010:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p62, $i61);
    goto corral_source_split_7011;

  corral_source_split_7011:
    assume {:verifier.code 0} true;
    $r := $i22;
    return;

  $bb15:
    assume $i54 == 1;
    goto corral_source_split_7048;

  corral_source_split_7048:
    assume {:verifier.code 0} true;
    $i55 := $srem.i32($i27, $i4);
    goto corral_source_split_7049;

  corral_source_split_7049:
    assume {:verifier.code 0} true;
    $i56 := $sub.i32($i27, $i55);
    call {:si_unique_call 1294} {:cexpr "count"} boogie_si_record_i32($i56);
    goto corral_source_split_7050;

  corral_source_split_7050:
    assume {:verifier.code 0} true;
    $i57 := $i56;
    goto $bb17;

  $bb4:
    assume $i26 == 1;
    goto corral_source_split_7013;

  corral_source_split_7013:
    assume {:verifier.code 0} true;
    $i28, $i29, $i30 := $i24, $i14, 1;
    goto $bb7;

  $bb7:
    call $i31, $i32, $p34, $i35, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $i49, $i50, $i51, $i28, $i29, $i30, $i52 := qtd_fill_loop_$bb7($p0, $i2, $i31, $i32, $p34, $i35, $i36, $i37, $p39, $i40, $i41, $i42, $i43, $i44, $i46, $i45, $i47, $i48, $i49, $i50, $i51, $i28, $i29, $i30, $i52);
    goto $bb7_last;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    $i31 := $trunc.i64.i32($i28);
    goto corral_source_split_7017;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    $i32 := $sext.i32.i64($i30);
    goto corral_source_split_7018;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(12, 1)), $mul.ref($i32, 4));
    goto corral_source_split_7019;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p34, $i31);
    goto corral_source_split_7020;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    $i35 := $lshr.i64($i28, 32);
    goto corral_source_split_7021;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    $i36 := $trunc.i64.i32($i35);
    goto corral_source_split_7022;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    $i37 := $sext.i32.i64($i30);
    goto corral_source_split_7023;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref($i37, 4));
    goto corral_source_split_7024;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p39, $i36);
    goto corral_source_split_7025;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    $i40 := $add.i64($i28, 4096);
    call {:si_unique_call 1290} {:cexpr "buf"} boogie_si_record_i64($i40);
    goto corral_source_split_7026;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    $i41 := $add.i32($i29, 4096);
    goto corral_source_split_7027;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    $i42 := $sext.i32.i64($i41);
    goto corral_source_split_7028;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    $i43 := $ult.i64($i42, $i2);
    goto corral_source_split_7029;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i43 == 1);
    goto corral_source_split_7034;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    $i46 := $trunc.i64.i32($i2);
    call {:si_unique_call 1292} {:cexpr "count"} boogie_si_record_i32($i46);
    assume {:verifier.code 0} true;
    $i45 := $i46;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7036;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    $i47 := $add.i32($i30, 1);
    call {:si_unique_call 1293} {:cexpr "i"} boogie_si_record_i32($i47);
    goto corral_source_split_7037;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    $i48 := $sext.i32.i64($i45);
    goto corral_source_split_7038;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    $i49 := $ult.i64($i48, $i2);
    goto corral_source_split_7039;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    $i50 := $sle.i32($i47, 4);
    goto corral_source_split_7040;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    $i51 := $and.i1($i49, $i50);
    goto corral_source_split_7041;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    $i52 := $i45;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i51 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_7043;

  corral_source_split_7043:
    assume {:verifier.code 0} true;
    $i27 := $i52;
    goto $bb6;

  $bb12:
    assume $i51 == 1;
    assume {:verifier.code 0} true;
    $i28, $i29, $i30 := $i40, $i45, $i47;
    goto $bb12_dummy;

  $bb9:
    assume $i43 == 1;
    goto corral_source_split_7031;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    $i44 := $add.i32($i29, 4096);
    call {:si_unique_call 1291} {:cexpr "count"} boogie_si_record_i32($i44);
    goto corral_source_split_7032;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    $i45 := $i44;
    goto $bb11;

  $bb1:
    assume $i20 == 1;
    goto corral_source_split_6995;

  corral_source_split_6995:
    assume {:verifier.code 0} true;
    $i21 := $trunc.i64.i32($i2);
    call {:si_unique_call 1287} {:cexpr "count"} boogie_si_record_i32($i21);
    goto corral_source_split_6996;

  corral_source_split_6996:
    assume {:verifier.code 0} true;
    $i22 := $i21;
    goto $bb3;

  $bb12_dummy:
    assume false;
    return;

  $bb7_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7015;
}



const ehci_turn_off_all_ports: ref;

axiom ehci_turn_off_all_ports == $sub.ref(0, 364869);

procedure ehci_turn_off_all_ports($p0: ref);
  free requires assertsPassed;



implementation ehci_turn_off_all_ports($p0: ref)
{
  var $p1: ref;
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $i6: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7052;

  corral_source_split_7052:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_7053;

  corral_source_split_7053:
    assume {:verifier.code 0} true;
    $i2 := $load.i32($M.0, $p1);
    goto corral_source_split_7054;

  corral_source_split_7054:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i2, 15);
    call {:si_unique_call 1295} {:cexpr "port"} boogie_si_record_i32($i3);
    goto corral_source_split_7055;

  corral_source_split_7055:
    assume {:verifier.code 0} true;
    $i4 := $sub.i32($i3, 1);
    call {:si_unique_call 1296} {:cexpr "port"} boogie_si_record_i32($i4);
    goto corral_source_split_7056;

  corral_source_split_7056:
    assume {:verifier.code 0} true;
    $i5 := $ne.i32($i3, 0);
    goto corral_source_split_7057;

  corral_source_split_7057:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7059;

  corral_source_split_7059:
    assume {:verifier.code 0} true;
    $i6 := $i4;
    goto $bb4;

  $bb4:
    call $p7, $p8, $p9, $p10, $i11, $p12, $i13, $i14, $i6 := ehci_turn_off_all_ports_loop_$bb4($p0, $p7, $p8, $p9, $p10, $i11, $p12, $i13, $i14, $i6);
    goto $bb4_last;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7063;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    $p8 := $load.ref($M.0, $p7);
    goto corral_source_split_7064;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p8, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_7065;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    $p10 := $bitcast.ref.ref($p9);
    goto corral_source_split_7066;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    $i11 := $sext.i32.i64($i6);
    goto corral_source_split_7067;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($p10, $mul.ref($i11, 1));
    goto corral_source_split_7068;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} writel(42, $p12);
    goto corral_source_split_7069;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    $i13 := $sub.i32($i6, 1);
    call {:si_unique_call 1298} {:cexpr "port"} boogie_si_record_i32($i13);
    goto corral_source_split_7070;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    $i14 := $ne.i32($i6, 0);
    goto corral_source_split_7071;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_7073;

  corral_source_split_7073:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i13;
    goto $bb6_dummy;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7061;
}



const ehci_port_power: ref;

axiom ehci_port_power == $sub.ref(0, 365901);

procedure ehci_port_power($p0: ref, $i1: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.24, $M.25, $CurrAddr, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.8, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_port_power($p0: ref, $i1: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i24;
  var $i14: i24;
  var $i15: i24;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i1;
  var $p23: ref;
  var $p25: ref;
  var $p26: ref;
  var $i27: i1;
  var $p28: ref;
  var $p29: ref;
  var $i30: i32;
  var $i31: i32;
  var $i32: i1;
  var $i34: i32;
  var $p35: ref;
  var $i36: i1;
  var $i37: i32;
  var $i38: i16;
  var $i39: i16;
  var $i40: i32;
  var $i41: i16;
  var $i43: i1;
  var $i33: i32;
  var vslice_dummy_var_101: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1299} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1300} {:cexpr "ehci_port_power:arg:is_on"} boogie_si_record_i32($i1);
    goto corral_source_split_7075;

  corral_source_split_7075:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_7076;

  corral_source_split_7076:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7077;

  corral_source_split_7077:
    assume {:verifier.code 0} true;
    $i5 := $and.i32($i4, 16);
    goto corral_source_split_7078;

  corral_source_split_7078:
    assume {:verifier.code 0} true;
    $i6 := $eq.i32($i5, 0);
    goto corral_source_split_7079;

  corral_source_split_7079:
    assume {:verifier.code 0} true;
    assume {:branchcond $i6} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i6 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7083;

  corral_source_split_7083:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p7, .str.2);
    goto corral_source_split_7084;

  corral_source_split_7084:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7085;

  corral_source_split_7085:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p8, .str.76);
    goto corral_source_split_7086;

  corral_source_split_7086:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7087;

  corral_source_split_7087:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p9, .str);
    goto corral_source_split_7088;

  corral_source_split_7088:
    assume {:verifier.code 0} true;
    $p10 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7089;

  corral_source_split_7089:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p10, .str.77);
    goto corral_source_split_7090;

  corral_source_split_7090:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7091;

  corral_source_split_7091:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7092;

  corral_source_split_7092:
    assume {:verifier.code 0} true;
    $i13 := $load.i24($M.6, $p12);
    goto corral_source_split_7093;

  corral_source_split_7093:
    assume {:verifier.code 0} true;
    $i14 := $and.i24($i13, $sub.i24(0, 262144));
    goto corral_source_split_7094;

  corral_source_split_7094:
    assume {:verifier.code 0} true;
    $i15 := $or.i24($i14, 2372);
    goto corral_source_split_7095;

  corral_source_split_7095:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p12, $i15);
    goto corral_source_split_7096;

  corral_source_split_7096:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7097;

  corral_source_split_7097:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p16, 0);
    goto corral_source_split_7098;

  corral_source_split_7098:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7099;

  corral_source_split_7099:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.7, $p17);
    goto corral_source_split_7100;

  corral_source_split_7100:
    assume {:verifier.code 0} true;
    $i19 := $zext.i8.i64($i18);
    goto corral_source_split_7101;

  corral_source_split_7101:
    assume {:verifier.code 0} true;
    $i20 := $and.i64($i19, 1);
    goto corral_source_split_7102;

  corral_source_split_7102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1301} $i21 := ldv__builtin_expect($i20, 0);
    call {:si_unique_call 1302} {:cexpr "tmp___0"} boogie_si_record_i64($i21);
    goto corral_source_split_7103;

  corral_source_split_7103:
    assume {:verifier.code 0} true;
    $i22 := $ne.i64($i21, 0);
    goto corral_source_split_7104;

  corral_source_split_7104:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_7114;

  corral_source_split_7114:
    assume {:verifier.code 0} true;
    $i30 := $load.i32($M.0, $p29);
    goto corral_source_split_7115;

  corral_source_split_7115:
    assume {:verifier.code 0} true;
    $i31 := $and.i32($i30, 15);
    call {:si_unique_call 1305} {:cexpr "port"} boogie_si_record_i32($i31);
    goto corral_source_split_7116;

  corral_source_split_7116:
    assume {:verifier.code 0} true;
    $i32 := $ne.i32($i31, 0);
    goto corral_source_split_7117;

  corral_source_split_7117:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    assume !($i32 == 1);
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1309} msleep(20);
    goto corral_source_split_7136;

  corral_source_split_7136:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    return;

  $bb8:
    assume $i32 == 1;
    goto corral_source_split_7119;

  corral_source_split_7119:
    assume {:verifier.code 0} true;
    $i33 := $i31;
    goto $bb11;

  $bb11:
    call $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i33, vslice_dummy_var_101 := ehci_port_power_loop_$bb11($p0, $i1, $i34, $p35, $i36, $i37, $i38, $i39, $i40, $i41, $i43, $i33, vslice_dummy_var_101);
    goto $bb11_last;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    $i34 := $sub.i32($i33, 1);
    call {:si_unique_call 1306} {:cexpr "port"} boogie_si_record_i32($i34);
    goto corral_source_split_7123;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} $p35 := oxu_to_hcd($p0);
    goto corral_source_split_7124;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    $i36 := $ne.i32($i1, 0);
    goto corral_source_split_7125;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    $i37 := (if $i36 == 1 then 8963 else 8961);
    goto corral_source_split_7126;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    $i38 := $trunc.i32.i16($i37);
    goto corral_source_split_7127;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    $i39 := $trunc.i32.i16($i33);
    goto corral_source_split_7128;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    $i40 := $zext.i16.i32($i39);
    goto corral_source_split_7129;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i32.i16($i40);
    goto corral_source_split_7130;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} vslice_dummy_var_101 := oxu_hub_control($p35, $i38, 8, $i41, $0.ref, 0);
    goto SeqInstr_376, SeqInstr_377;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  SeqInstr_378:
    goto corral_source_split_7131;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    $i43 := $ne.i32($i34, 0);
    goto corral_source_split_7132;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i43 == 1);
    goto corral_source_split_7134;

  corral_source_split_7134:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb13:
    assume $i43 == 1;
    assume {:verifier.code 0} true;
    $i33 := $i34;
    goto $bb13_dummy;

  SeqInstr_376:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_7106;

  corral_source_split_7106:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1303} $p23 := oxu_to_hcd($p0);
    goto corral_source_split_7107;

  corral_source_split_7107:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($add.ref($p23, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7108;

  corral_source_split_7108:
    assume {:verifier.code 0} true;
    $p26 := $load.ref($M.61, $p25);
    goto corral_source_split_7109;

  corral_source_split_7109:
    assume {:verifier.code 0} true;
    $i27 := $ne.i32($i1, 0);
    goto corral_source_split_7110;

  corral_source_split_7110:
    assume {:verifier.code 0} true;
    $p28 := (if $i27 == 1 then .str.78 else .str.79);
    goto corral_source_split_7111;

  corral_source_split_7111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1304} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p26, .str.77, $p28);
    goto corral_source_split_7112;

  corral_source_split_7112:
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb1:
    assume $i6 == 1;
    goto corral_source_split_7081;

  corral_source_split_7081:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb13_dummy:
    assume false;
    return;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7121;
}



const ldv_del_timer_sync_27: ref;

axiom ldv_del_timer_sync_27 == $sub.ref(0, 366933);

procedure ldv_del_timer_sync_27($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.31, $M.33;



implementation ldv_del_timer_sync_27($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7138;

  corral_source_split_7138:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1310} $i1 := del_timer_sync($p0);
    call {:si_unique_call 1311} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7139;

  corral_source_split_7139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1312} disable_suitable_timer_1($p0);
    goto corral_source_split_7140;

  corral_source_split_7140:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const ehci_reset: ref;

axiom ehci_reset == $sub.ref(0, 367965);

procedure ehci_reset($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.63, $M.0, $CurrAddr, $M.22, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_reset($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i32;
  var $i8: i32;
  var $p9: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $i17: i24;
  var $i18: i24;
  var $i19: i24;
  var $p20: ref;
  var $p21: ref;
  var $i22: i8;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i1;
  var $p27: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $i38: i64;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $i44: i32;
  var $i45: i1;
  var vslice_dummy_var_102: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1313} $p1 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1314} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7142;

  corral_source_split_7142:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7143;

  corral_source_split_7143:
    assume {:verifier.code 0} true;
    $p4 := $load.ref($M.0, $p3);
    goto corral_source_split_7144;

  corral_source_split_7144:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p4, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_7145;

  corral_source_split_7145:
    assume {:verifier.code 0} true;
    $p6 := $bitcast.ref.ref($p5);
    goto corral_source_split_7146;

  corral_source_split_7146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1315} $i7 := readl($p6);
    goto SeqInstr_379, SeqInstr_380;

  SeqInstr_380:
    assume assertsPassed;
    goto SeqInstr_381;

  SeqInstr_381:
    call {:si_unique_call 1316} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7147;

  corral_source_split_7147:
    assume {:verifier.code 0} true;
    $i8 := $or.i32($i7, 2);
    call {:si_unique_call 1317} {:cexpr "command"} boogie_si_record_i32($i8);
    goto corral_source_split_7148;

  corral_source_split_7148:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p1);
    goto corral_source_split_7149;

  corral_source_split_7149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1318} vslice_dummy_var_102 := dbg_command_buf($p9, 80, .str.25, $i8);
    goto corral_source_split_7150;

  corral_source_split_7150:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7151;

  corral_source_split_7151:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p11, .str.2);
    goto corral_source_split_7152;

  corral_source_split_7152:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7153;

  corral_source_split_7153:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p12, .str.26);
    goto corral_source_split_7154;

  corral_source_split_7154:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7155;

  corral_source_split_7155:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p13, .str);
    goto corral_source_split_7156;

  corral_source_split_7156:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7157;

  corral_source_split_7157:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p14, .str.20);
    goto corral_source_split_7158;

  corral_source_split_7158:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7159;

  corral_source_split_7159:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7160;

  corral_source_split_7160:
    assume {:verifier.code 0} true;
    $i17 := $load.i24($M.6, $p16);
    goto corral_source_split_7161;

  corral_source_split_7161:
    assume {:verifier.code 0} true;
    $i18 := $and.i24($i17, $sub.i24(0, 262144));
    goto corral_source_split_7162;

  corral_source_split_7162:
    assume {:verifier.code 0} true;
    $i19 := $or.i24($i18, 376);
    goto corral_source_split_7163;

  corral_source_split_7163:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p16, $i19);
    goto corral_source_split_7164;

  corral_source_split_7164:
    assume {:verifier.code 0} true;
    $p20 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7165;

  corral_source_split_7165:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p20, 0);
    goto corral_source_split_7166;

  corral_source_split_7166:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7167;

  corral_source_split_7167:
    assume {:verifier.code 0} true;
    $i22 := $load.i8($M.7, $p21);
    goto corral_source_split_7168;

  corral_source_split_7168:
    assume {:verifier.code 0} true;
    $i23 := $zext.i8.i64($i22);
    goto corral_source_split_7169;

  corral_source_split_7169:
    assume {:verifier.code 0} true;
    $i24 := $and.i64($i23, 1);
    goto corral_source_split_7170;

  corral_source_split_7170:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1319} $i25 := ldv__builtin_expect($i24, 0);
    call {:si_unique_call 1320} {:cexpr "tmp___1"} boogie_si_record_i64($i25);
    goto corral_source_split_7171;

  corral_source_split_7171:
    assume {:verifier.code 0} true;
    $i26 := $ne.i64($i25, 0);
    goto corral_source_split_7172;

  corral_source_split_7172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i26 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7181;

  corral_source_split_7181:
    assume {:verifier.code 0} true;
    $p33 := $load.ref($M.0, $p32);
    goto corral_source_split_7182;

  corral_source_split_7182:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p33, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_7183;

  corral_source_split_7183:
    assume {:verifier.code 0} true;
    $p35 := $bitcast.ref.ref($p34);
    goto corral_source_split_7184;

  corral_source_split_7184:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1323} writel($i8, $p35);
    goto corral_source_split_7185;

  corral_source_split_7185:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1324} $p36 := oxu_to_hcd($p0);
    goto corral_source_split_7186;

  corral_source_split_7186:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p36, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_7187;

  corral_source_split_7187:
    assume {:verifier.code 0} true;
    $M.63 := $store.i32($M.63, $p37, 0);
    goto corral_source_split_7188;

  corral_source_split_7188:
    assume {:verifier.code 0} true;
    $i38 := $load.i64($M.0, jiffies);
    goto corral_source_split_7189;

  corral_source_split_7189:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(720, 1));
    goto corral_source_split_7190;

  corral_source_split_7190:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p39, $i38);
    goto corral_source_split_7191;

  corral_source_split_7191:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7192;

  corral_source_split_7192:
    assume {:verifier.code 0} true;
    $p41 := $load.ref($M.0, $p40);
    goto corral_source_split_7193;

  corral_source_split_7193:
    assume {:verifier.code 0} true;
    $p42 := $add.ref($add.ref($p41, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_7194;

  corral_source_split_7194:
    assume {:verifier.code 0} true;
    $p43 := $bitcast.ref.ref($p42);
    goto corral_source_split_7195;

  corral_source_split_7195:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1325} $i44 := handshake($p0, $p43, 2, 0, 250000);
    goto SeqInstr_382, SeqInstr_383;

  SeqInstr_383:
    assume assertsPassed;
    goto SeqInstr_384;

  SeqInstr_384:
    call {:si_unique_call 1326} {:cexpr "retval"} boogie_si_record_i32($i44);
    goto corral_source_split_7196;

  corral_source_split_7196:
    assume {:verifier.code 0} true;
    $i45 := $ne.i32($i44, 0);
    goto corral_source_split_7197;

  corral_source_split_7197:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1327} tdi_reset($p0);
    goto SeqInstr_385, SeqInstr_386;

  SeqInstr_386:
    assume assertsPassed;
    goto SeqInstr_387;

  SeqInstr_387:
    goto corral_source_split_7201;

  corral_source_split_7201:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $r := $i44;
    return;

  SeqInstr_385:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i45 == 1;
    goto corral_source_split_7199;

  corral_source_split_7199:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_382:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i26 == 1;
    goto corral_source_split_7174;

  corral_source_split_7174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1321} $p27 := oxu_to_hcd($p0);
    goto corral_source_split_7175;

  corral_source_split_7175:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($add.ref($p27, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7176;

  corral_source_split_7176:
    assume {:verifier.code 0} true;
    $p30 := $load.ref($M.62, $p29);
    goto corral_source_split_7177;

  corral_source_split_7177:
    assume {:verifier.code 0} true;
    $p31 := $bitcast.ref.ref($p1);
    goto corral_source_split_7178;

  corral_source_split_7178:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1322} __dynamic_dev_dbg.ref.ref.ref.ref($p2, $p30, .str.20, $p31);
    goto corral_source_split_7179;

  corral_source_split_7179:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_379:
    assume !assertsPassed;
    return;
}



const ehci_mem_cleanup: ref;

axiom ehci_mem_cleanup == $sub.ref(0, 368997);

procedure ehci_mem_cleanup($p0: ref);
  free requires assertsPassed;
  modifies $M.0, $M.27, $M.29, $M.31, $M.33, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_mem_cleanup($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $i7: i64;
  var $i8: i1;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var vslice_dummy_var_103: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7203;

  corral_source_split_7203:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(752, 1));
    goto corral_source_split_7204;

  corral_source_split_7204:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7205;

  corral_source_split_7205:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7206;

  corral_source_split_7206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1328} kfree($p3);
    goto corral_source_split_7207;

  corral_source_split_7207:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(752, 1));
    goto corral_source_split_7208;

  corral_source_split_7208:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p4, $0.ref);
    goto corral_source_split_7209;

  corral_source_split_7209:
    assume {:verifier.code 0} true;
    $p5 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7210;

  corral_source_split_7210:
    assume {:verifier.code 0} true;
    $p6 := $load.ref($M.0, $p5);
    goto corral_source_split_7211;

  corral_source_split_7211:
    assume {:verifier.code 0} true;
    $i7 := $p2i.ref.i64($p6);
    goto corral_source_split_7212;

  corral_source_split_7212:
    assume {:verifier.code 0} true;
    $i8 := $ne.i64($i7, 0);
    goto corral_source_split_7213;

  corral_source_split_7213:
    assume {:verifier.code 0} true;
    assume {:branchcond $i8} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i8 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7220;

  corral_source_split_7220:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p11, $0.ref);
    goto corral_source_split_7221;

  corral_source_split_7221:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(152, 1));
    goto corral_source_split_7222;

  corral_source_split_7222:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1330} vslice_dummy_var_103 := ldv_del_timer_25($p12);
    goto corral_source_split_7223;

  corral_source_split_7223:
    assume {:verifier.code 0} true;
    $p14 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_7224;

  corral_source_split_7224:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p14, $0.ref);
    goto corral_source_split_7225;

  corral_source_split_7225:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_7226;

  corral_source_split_7226:
    assume {:verifier.code 0} true;
    $p16 := $load.ref($M.0, $p15);
    goto corral_source_split_7227;

  corral_source_split_7227:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_7228;

  corral_source_split_7228:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1331} kfree($p17);
    goto corral_source_split_7229;

  corral_source_split_7229:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_7230;

  corral_source_split_7230:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p18, $0.ref);
    goto corral_source_split_7231;

  corral_source_split_7231:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i8 == 1;
    goto corral_source_split_7215;

  corral_source_split_7215:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7216;

  corral_source_split_7216:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7217;

  corral_source_split_7217:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1329} qh_put($p10);
    goto SeqInstr_388, SeqInstr_389;

  SeqInstr_389:
    assume assertsPassed;
    goto SeqInstr_390;

  SeqInstr_390:
    goto corral_source_split_7218;

  corral_source_split_7218:
    assume {:verifier.code 0} true;
    goto $bb3;

  SeqInstr_388:
    assume !assertsPassed;
    return;
}



const dbg_status_buf: ref;

axiom dbg_status_buf == $sub.ref(0, 370029);

procedure dbg_status_buf($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dbg_status_buf($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i1;
  var $p14: ref;
  var $i15: i32;
  var $i16: i1;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $p20: ref;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i1;
  var $p26: ref;
  var $i27: i32;
  var $i28: i1;
  var $p29: ref;
  var $i30: i32;
  var $i31: i1;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1332} {:cexpr "dbg_status_buf:arg:len"} boogie_si_record_i32($i1);
    call {:si_unique_call 1333} {:cexpr "dbg_status_buf:arg:status"} boogie_si_record_i32($i3);
    goto corral_source_split_7233;

  corral_source_split_7233:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_7234;

  corral_source_split_7234:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p2);
    goto corral_source_split_7235;

  corral_source_split_7235:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_7236;

  corral_source_split_7236:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7237;

  corral_source_split_7237:
    assume {:verifier.code 0} true;
    $p8 := (if $i7 == 1 then .str.28 else .str.24);
    goto corral_source_split_7238;

  corral_source_split_7238:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i3, 32768);
    goto corral_source_split_7239;

  corral_source_split_7239:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7240;

  corral_source_split_7240:
    assume {:verifier.code 0} true;
    $p11 := (if $i10 == 1 then .str.33 else .str.24);
    goto corral_source_split_7241;

  corral_source_split_7241:
    assume {:verifier.code 0} true;
    $i12 := $and.i32($i3, 16384);
    goto corral_source_split_7242;

  corral_source_split_7242:
    assume {:verifier.code 0} true;
    $i13 := $ne.i32($i12, 0);
    goto corral_source_split_7243;

  corral_source_split_7243:
    assume {:verifier.code 0} true;
    $p14 := (if $i13 == 1 then .str.34 else .str.24);
    goto corral_source_split_7244;

  corral_source_split_7244:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i3, 8192);
    goto corral_source_split_7245;

  corral_source_split_7245:
    assume {:verifier.code 0} true;
    $i16 := $ne.i32($i15, 0);
    goto corral_source_split_7246;

  corral_source_split_7246:
    assume {:verifier.code 0} true;
    $p17 := (if $i16 == 1 then .str.66 else .str.24);
    goto corral_source_split_7247;

  corral_source_split_7247:
    assume {:verifier.code 0} true;
    $i18 := $and.i32($i3, 4096);
    goto corral_source_split_7248;

  corral_source_split_7248:
    assume {:verifier.code 0} true;
    $i19 := $ne.i32($i18, 0);
    goto corral_source_split_7249;

  corral_source_split_7249:
    assume {:verifier.code 0} true;
    $p20 := (if $i19 == 1 then .str.67 else .str.24);
    goto corral_source_split_7250;

  corral_source_split_7250:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i3, 32);
    goto corral_source_split_7251;

  corral_source_split_7251:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7252;

  corral_source_split_7252:
    assume {:verifier.code 0} true;
    $p23 := (if $i22 == 1 then .str.68 else .str.24);
    goto corral_source_split_7253;

  corral_source_split_7253:
    assume {:verifier.code 0} true;
    $i24 := $and.i32($i3, 16);
    goto corral_source_split_7254;

  corral_source_split_7254:
    assume {:verifier.code 0} true;
    $i25 := $ne.i32($i24, 0);
    goto corral_source_split_7255;

  corral_source_split_7255:
    assume {:verifier.code 0} true;
    $p26 := (if $i25 == 1 then .str.69 else .str.24);
    goto corral_source_split_7256;

  corral_source_split_7256:
    assume {:verifier.code 0} true;
    $i27 := $and.i32($i3, 8);
    goto corral_source_split_7257;

  corral_source_split_7257:
    assume {:verifier.code 0} true;
    $i28 := $ne.i32($i27, 0);
    goto corral_source_split_7258;

  corral_source_split_7258:
    assume {:verifier.code 0} true;
    $p29 := (if $i28 == 1 then .str.70 else .str.24);
    goto corral_source_split_7259;

  corral_source_split_7259:
    assume {:verifier.code 0} true;
    $i30 := $and.i32($i3, 4);
    goto corral_source_split_7260;

  corral_source_split_7260:
    assume {:verifier.code 0} true;
    $i31 := $ne.i32($i30, 0);
    goto corral_source_split_7261;

  corral_source_split_7261:
    assume {:verifier.code 0} true;
    $p32 := (if $i31 == 1 then .str.71 else .str.24);
    goto corral_source_split_7262;

  corral_source_split_7262:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i3, 2);
    goto corral_source_split_7263;

  corral_source_split_7263:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7264;

  corral_source_split_7264:
    assume {:verifier.code 0} true;
    $p35 := (if $i34 == 1 then .str.72 else .str.24);
    goto corral_source_split_7265;

  corral_source_split_7265:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i3, 1);
    goto corral_source_split_7266;

  corral_source_split_7266:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7267;

  corral_source_split_7267:
    assume {:verifier.code 0} true;
    $p38 := (if $i37 == 1 then .str.73 else .str.24);
    goto corral_source_split_7268;

  corral_source_split_7268:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1334} $i39 := scnprintf.ref.i64.ref.ref.ref.i32.ref.ref.ref.ref.ref.ref.ref.ref.ref.ref($p0, $i4, .str.65, $p2, $p8, $i3, $p11, $p14, $p17, $p20, $p23, $p26, $p29, $p32, $p35, $p38);
    call {:si_unique_call 1335} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_7269;

  corral_source_split_7269:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;
}



const kfree: ref;

axiom kfree == $sub.ref(0, 371061);

procedure kfree($p0: ref);
  free requires assertsPassed;



implementation kfree($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7271;

  corral_source_split_7271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1336} free_($p0);
    goto corral_source_split_7272;

  corral_source_split_7272:
    assume {:verifier.code 0} true;
    return;
}



const ldv_del_timer_25: ref;

axiom ldv_del_timer_25 == $sub.ref(0, 372093);

procedure ldv_del_timer_25($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.31, $M.33;



implementation ldv_del_timer_25($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7274;

  corral_source_split_7274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1337} $i1 := del_timer($p0);
    call {:si_unique_call 1338} {:cexpr "tmp"} boogie_si_record_i32($i1);
    goto corral_source_split_7275;

  corral_source_split_7275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1339} disable_suitable_timer_1($p0);
    goto corral_source_split_7276;

  corral_source_split_7276:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const del_timer: ref;

axiom del_timer == $sub.ref(0, 373125);

procedure del_timer($p0: ref) returns ($r: i32);
  free requires assertsPassed;



implementation del_timer($p0: ref) returns ($r: i32)
{
  var $i1: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7278;

  corral_source_split_7278:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1340} $i1 := __VERIFIER_nondet_int();
    call {:si_unique_call 1341} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i1);
    goto corral_source_split_7279;

  corral_source_split_7279:
    assume {:verifier.code 0} true;
    $r := $i1;
    return;
}



const free_: ref;

axiom free_ == $sub.ref(0, 374157);

procedure free_($p0: ref);
  free requires assertsPassed;



implementation free_($p0: ref)
{

  anon0:
    call {:si_unique_call 1342} $free($p0);
    return;
}



const dbg_command_buf: ref;

axiom dbg_command_buf == $sub.ref(0, 375189);

procedure dbg_command_buf($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32);
  free requires assertsPassed;



implementation dbg_command_buf($p0: ref, $i1: i32, $p2: ref, $i3: i32) returns ($r: i32)
{
  var $i4: i64;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i32;
  var $i15: i32;
  var $i16: i32;
  var $i17: i1;
  var $p18: ref;
  var $i19: i32;
  var $i20: i1;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $i25: i32;
  var $i26: i1;
  var $p27: ref;
  var $i28: i32;
  var $i29: i32;
  var $i30: i64;
  var $p31: ref;
  var $p32: ref;
  var $i33: i32;
  var $i34: i1;
  var $p35: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $i39: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1343} {:cexpr "dbg_command_buf:arg:len"} boogie_si_record_i32($i1);
    call {:si_unique_call 1344} {:cexpr "dbg_command_buf:arg:command"} boogie_si_record_i32($i3);
    goto corral_source_split_7281;

  corral_source_split_7281:
    assume {:verifier.code 0} true;
    $i4 := $zext.i32.i64($i1);
    goto corral_source_split_7282;

  corral_source_split_7282:
    assume {:verifier.code 0} true;
    $i5 := $load.i8($M.0, $p2);
    goto corral_source_split_7283;

  corral_source_split_7283:
    assume {:verifier.code 0} true;
    $i6 := $sext.i8.i32($i5);
    goto corral_source_split_7284;

  corral_source_split_7284:
    assume {:verifier.code 0} true;
    $i7 := $ne.i32($i6, 0);
    goto corral_source_split_7285;

  corral_source_split_7285:
    assume {:verifier.code 0} true;
    $p8 := (if $i7 == 1 then .str.28 else .str.24);
    goto corral_source_split_7286;

  corral_source_split_7286:
    assume {:verifier.code 0} true;
    $i9 := $and.i32($i3, 2048);
    goto corral_source_split_7287;

  corral_source_split_7287:
    assume {:verifier.code 0} true;
    $i10 := $ne.i32($i9, 0);
    goto corral_source_split_7288;

  corral_source_split_7288:
    assume {:verifier.code 0} true;
    $p11 := (if $i10 == 1 then .str.29 else .str.30);
    goto corral_source_split_7289;

  corral_source_split_7289:
    assume {:verifier.code 0} true;
    $i12 := $lshr.i32($i3, 8);
    goto corral_source_split_7290;

  corral_source_split_7290:
    assume {:verifier.code 0} true;
    $i13 := $and.i32($i12, 3);
    goto corral_source_split_7291;

  corral_source_split_7291:
    assume {:verifier.code 0} true;
    $i14 := $lshr.i32($i3, 16);
    goto corral_source_split_7292;

  corral_source_split_7292:
    assume {:verifier.code 0} true;
    $i15 := $and.i32($i14, 63);
    goto corral_source_split_7293;

  corral_source_split_7293:
    assume {:verifier.code 0} true;
    $i16 := $and.i32($i3, 128);
    goto corral_source_split_7294;

  corral_source_split_7294:
    assume {:verifier.code 0} true;
    $i17 := $ne.i32($i16, 0);
    goto corral_source_split_7295;

  corral_source_split_7295:
    assume {:verifier.code 0} true;
    $p18 := (if $i17 == 1 then .str.31 else .str.24);
    goto corral_source_split_7296;

  corral_source_split_7296:
    assume {:verifier.code 0} true;
    $i19 := $and.i32($i3, 64);
    goto corral_source_split_7297;

  corral_source_split_7297:
    assume {:verifier.code 0} true;
    $i20 := $ne.i32($i19, 0);
    goto corral_source_split_7298;

  corral_source_split_7298:
    assume {:verifier.code 0} true;
    $p21 := (if $i20 == 1 then .str.32 else .str.24);
    goto corral_source_split_7299;

  corral_source_split_7299:
    assume {:verifier.code 0} true;
    $i22 := $and.i32($i3, 32);
    goto corral_source_split_7300;

  corral_source_split_7300:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7301;

  corral_source_split_7301:
    assume {:verifier.code 0} true;
    $p24 := (if $i23 == 1 then .str.33 else .str.24);
    goto corral_source_split_7302;

  corral_source_split_7302:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i3, 16);
    goto corral_source_split_7303;

  corral_source_split_7303:
    assume {:verifier.code 0} true;
    $i26 := $ne.i32($i25, 0);
    goto corral_source_split_7304;

  corral_source_split_7304:
    assume {:verifier.code 0} true;
    $p27 := (if $i26 == 1 then .str.34 else .str.24);
    goto corral_source_split_7305;

  corral_source_split_7305:
    assume {:verifier.code 0} true;
    $i28 := $lshr.i32($i3, 2);
    goto corral_source_split_7306;

  corral_source_split_7306:
    assume {:verifier.code 0} true;
    $i29 := $and.i32($i28, 3);
    goto corral_source_split_7307;

  corral_source_split_7307:
    assume {:verifier.code 0} true;
    $i30 := $zext.i32.i64($i29);
    goto corral_source_split_7308;

  corral_source_split_7308:
    assume {:verifier.code 0} true;
    $p31 := $add.ref($add.ref(fls_strings, $mul.ref(0, 32)), $mul.ref($i30, 8));
    goto corral_source_split_7309;

  corral_source_split_7309:
    assume {:verifier.code 0} true;
    $p32 := $load.ref($M.64, $p31);
    goto corral_source_split_7310;

  corral_source_split_7310:
    assume {:verifier.code 0} true;
    $i33 := $and.i32($i3, 2);
    goto corral_source_split_7311;

  corral_source_split_7311:
    assume {:verifier.code 0} true;
    $i34 := $ne.i32($i33, 0);
    goto corral_source_split_7312;

  corral_source_split_7312:
    assume {:verifier.code 0} true;
    $p35 := (if $i34 == 1 then .str.35 else .str.24);
    goto corral_source_split_7313;

  corral_source_split_7313:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i3, 1);
    goto corral_source_split_7314;

  corral_source_split_7314:
    assume {:verifier.code 0} true;
    $i37 := $ne.i32($i36, 0);
    goto corral_source_split_7315;

  corral_source_split_7315:
    assume {:verifier.code 0} true;
    $p38 := (if $i37 == 1 then .str.36 else .str.37);
    goto corral_source_split_7316;

  corral_source_split_7316:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1345} $i39 := scnprintf.ref.i64.ref.ref.ref.i32.ref.i32.i32.ref.ref.ref.ref.ref.ref.ref($p0, $i4, .str.27, $p2, $p8, $i3, $p11, $i13, $i15, $p18, $p21, $p24, $p27, $p32, $p35, $p38);
    call {:si_unique_call 1346} {:cexpr "tmp"} boogie_si_record_i32($i39);
    goto corral_source_split_7317;

  corral_source_split_7317:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;
}



const tdi_reset: ref;

axiom tdi_reset == $sub.ref(0, 376221);

procedure tdi_reset($p0: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation tdi_reset($p0: ref)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i32;
  var $p8: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7319;

  corral_source_split_7319:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7320;

  corral_source_split_7320:
    assume {:verifier.code 0} true;
    $p2 := $load.ref($M.0, $p1);
    goto corral_source_split_7321;

  corral_source_split_7321:
    assume {:verifier.code 0} true;
    $p3 := $bitcast.ref.ref($p2);
    goto corral_source_split_7322;

  corral_source_split_7322:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($p3, $mul.ref(104, 4));
    goto corral_source_split_7323;

  corral_source_split_7323:
    assume {:verifier.code 0} true;
    $p5 := $bitcast.ref.ref($p4);
    goto corral_source_split_7324;

  corral_source_split_7324:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1347} $i6 := readl($p5);
    goto SeqInstr_391, SeqInstr_392;

  SeqInstr_392:
    assume assertsPassed;
    goto SeqInstr_393;

  SeqInstr_393:
    call {:si_unique_call 1348} {:cexpr "tmp"} boogie_si_record_i32($i6);
    goto corral_source_split_7325;

  corral_source_split_7325:
    assume {:verifier.code 0} true;
    $i7 := $or.i32($i6, 3);
    call {:si_unique_call 1349} {:cexpr "tmp"} boogie_si_record_i32($i7);
    goto corral_source_split_7326;

  corral_source_split_7326:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p4);
    goto corral_source_split_7327;

  corral_source_split_7327:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1350} writel($i7, $p8);
    goto corral_source_split_7328;

  corral_source_split_7328:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_391:
    assume !assertsPassed;
    return;
}



const spinlock_check: ref;

axiom spinlock_check == $sub.ref(0, 377253);

procedure spinlock_check($p0: ref) returns ($r: ref);
  free requires assertsPassed;



implementation spinlock_check($p0: ref) returns ($r: ref)
{
  var $p1: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7330;

  corral_source_split_7330:
    assume {:verifier.code 0} true;
    $p1 := $add.ref($add.ref($p0, $mul.ref(0, 72)), $mul.ref(0, 1));
    goto corral_source_split_7331;

  corral_source_split_7331:
    assume {:verifier.code 0} true;
    $p2 := $bitcast.ref.ref($p1);
    goto corral_source_split_7332;

  corral_source_split_7332:
    assume {:verifier.code 0} true;
    $r := $p2;
    return;
}



const __raw_spin_lock_init: ref;

axiom __raw_spin_lock_init == $sub.ref(0, 378285);

procedure __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref);
  free requires assertsPassed;



implementation __raw_spin_lock_init($p0: ref, $p1: ref, $p2: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7334;

  corral_source_split_7334:
    assume {:verifier.code 0} true;
    return;
}



const oxu_hcd_init: ref;

axiom oxu_hcd_init == $sub.ref(0, 379317);

procedure oxu_hcd_init($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.22, $CurrAddr, $M.63, $M.24, $M.25, $M.8, $M.39, $M.60, assertsPassed, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59;



implementation oxu_hcd_init($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i64;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $i20: i32;
  var $i21: i32;
  var $i22: i1;
  var $p23: ref;
  var $i24: i32;
  var $i25: i32;
  var $i26: i32;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $i30: i8;
  var $i31: i8;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i32;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $i64: i64;
  var $i65: i32;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $i69: i32;
  var $i70: i1;
  var $i71: i32;
  var $i72: i1;
  var $i73: i32;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $i78: i32;
  var $i79: i1;
  var $i80: i32;
  var $i81: i1;
  var $i82: i32;
  var $i83: i32;
  var $i84: i32;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $i94: i24;
  var $i95: i24;
  var $i96: i24;
  var $p97: ref;
  var $p98: ref;
  var $i99: i8;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i1;
  var $p104: ref;
  var $p106: ref;
  var $p107: ref;
  var $i108: i32;
  var $i109: i32;
  var $i110: i32;
  var $i111: i1;
  var $i112: i32;
  var $i113: i32;
  var $i114: i32;
  var $p115: ref;
  var $i15: i32;
  var vslice_dummy_var_104: ref;
  var vslice_dummy_var_105: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1351} $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1352} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7336;

  corral_source_split_7336:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1353} $p3 := hcd_to_oxu($p0);
    goto corral_source_split_7337;

  corral_source_split_7337:
    assume {:verifier.code 0} true;
    $p4 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_7338;

  corral_source_split_7338:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1354} vslice_dummy_var_104 := spinlock_check($p4);
    goto corral_source_split_7339;

  corral_source_split_7339:
    assume {:verifier.code 0} true;
    $p7 := $add.ref($add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(304, 1)), $mul.ref(0, 1));
    goto corral_source_split_7340;

  corral_source_split_7340:
    assume {:verifier.code 0} true;
    $p8 := $bitcast.ref.ref($p7);
    goto corral_source_split_7341;

  corral_source_split_7341:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1355} __raw_spin_lock_init($p8, .str.53, $p1);
    goto corral_source_split_7342;

  corral_source_split_7342:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(576, 1));
    goto corral_source_split_7343;

  corral_source_split_7343:
    assume {:verifier.code 0} true;
    $i10 := $p2i.ref.i64($p3);
    goto corral_source_split_7344;

  corral_source_split_7344:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1356} vslice_dummy_var_105 := reg_timer_1($p9, oxu_watchdog, $i10);
    goto corral_source_split_7345;

  corral_source_split_7345:
    assume {:verifier.code 0} true;
    $p12 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_7346;

  corral_source_split_7346:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p12, 1024);
    goto corral_source_split_7347;

  corral_source_split_7347:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1357} $i13 := ehci_mem_init($p3, 208);
    goto SeqInstr_394, SeqInstr_395;

  SeqInstr_395:
    assume assertsPassed;
    goto SeqInstr_396;

  SeqInstr_396:
    call {:si_unique_call 1358} {:cexpr "retval"} boogie_si_record_i32($i13);
    goto corral_source_split_7348;

  corral_source_split_7348:
    assume {:verifier.code 0} true;
    $i14 := $slt.i32($i13, 0);
    goto corral_source_split_7349;

  corral_source_split_7349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb4;

  $bb4:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(280, 1));
    goto corral_source_split_7355;

  corral_source_split_7355:
    assume {:verifier.code 0} true;
    $p17 := $load.ref($M.0, $p16);
    goto corral_source_split_7356;

  corral_source_split_7356:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p17, $mul.ref(0, 20)), $mul.ref(8, 1));
    goto corral_source_split_7357;

  corral_source_split_7357:
    assume {:verifier.code 0} true;
    $p19 := $bitcast.ref.ref($p18);
    goto corral_source_split_7358;

  corral_source_split_7358:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1359} $i20 := readl($p19);
    goto SeqInstr_397, SeqInstr_398;

  SeqInstr_398:
    assume assertsPassed;
    goto SeqInstr_399;

  SeqInstr_399:
    call {:si_unique_call 1360} {:cexpr "hcc_params"} boogie_si_record_i32($i20);
    goto corral_source_split_7359;

  corral_source_split_7359:
    assume {:verifier.code 0} true;
    $i21 := $and.i32($i20, 128);
    goto corral_source_split_7360;

  corral_source_split_7360:
    assume {:verifier.code 0} true;
    $i22 := $ne.i32($i21, 0);
    goto corral_source_split_7361;

  corral_source_split_7361:
    assume {:verifier.code 0} true;
    assume {:branchcond $i22} true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i22 == 1);
    goto corral_source_split_7367;

  corral_source_split_7367:
    assume {:verifier.code 0} true;
    $i24 := $lshr.i32($i20, 4);
    goto corral_source_split_7368;

  corral_source_split_7368:
    assume {:verifier.code 0} true;
    $i25 := $and.i32($i24, 7);
    goto corral_source_split_7369;

  corral_source_split_7369:
    assume {:verifier.code 0} true;
    $i26 := $add.i32($i25, 2);
    goto corral_source_split_7370;

  corral_source_split_7370:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(416, 1));
    goto corral_source_split_7371;

  corral_source_split_7371:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p27, $i26);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $p28 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_7373;

  corral_source_split_7373:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p28, $0.ref);
    goto corral_source_split_7374;

  corral_source_split_7374:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(392, 1));
    goto corral_source_split_7375;

  corral_source_split_7375:
    assume {:verifier.code 0} true;
    $i30 := $load.i8($M.0, $p29);
    goto corral_source_split_7376;

  corral_source_split_7376:
    assume {:verifier.code 0} true;
    $i31 := $and.i8($i30, $sub.i8(0, 2));
    goto corral_source_split_7377;

  corral_source_split_7377:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p29, $i31);
    goto corral_source_split_7378;

  corral_source_split_7378:
    assume {:verifier.code 0} true;
    $p32 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(432, 1));
    goto corral_source_split_7379;

  corral_source_split_7379:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p32, $sub.i32(0, 1));
    goto corral_source_split_7380;

  corral_source_split_7380:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7381;

  corral_source_split_7381:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.0, $p33);
    goto corral_source_split_7382;

  corral_source_split_7382:
    assume {:verifier.code 0} true;
    $p35 := $add.ref($add.ref($p34, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_7383;

  corral_source_split_7383:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p35);
    goto corral_source_split_7384;

  corral_source_split_7384:
    assume {:verifier.code 0} true;
    $M.66 := $store.ref($M.66, $p36, $0.ref);
    goto corral_source_split_7385;

  corral_source_split_7385:
    assume {:verifier.code 0} true;
    $p37 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7386;

  corral_source_split_7386:
    assume {:verifier.code 0} true;
    $p38 := $load.ref($M.0, $p37);
    goto corral_source_split_7387;

  corral_source_split_7387:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p38, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_7388;

  corral_source_split_7388:
    assume {:verifier.code 0} true;
    $i40 := $load.i64($M.67, $p39);
    goto corral_source_split_7389;

  corral_source_split_7389:
    assume {:verifier.code 0} true;
    $i41 := $trunc.i64.i32($i40);
    goto corral_source_split_7390;

  corral_source_split_7390:
    assume {:verifier.code 0} true;
    $i42 := $and.i32($i41, $sub.i32(0, 32));
    goto corral_source_split_7391;

  corral_source_split_7391:
    assume {:verifier.code 0} true;
    $i43 := $or.i32($i42, 2);
    goto corral_source_split_7392;

  corral_source_split_7392:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7393;

  corral_source_split_7393:
    assume {:verifier.code 0} true;
    $p45 := $load.ref($M.0, $p44);
    goto corral_source_split_7394;

  corral_source_split_7394:
    assume {:verifier.code 0} true;
    $p46 := $add.ref($add.ref($p45, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_7395;

  corral_source_split_7395:
    assume {:verifier.code 0} true;
    $M.68 := $store.i32($M.68, $p46, $i43);
    goto corral_source_split_7396;

  corral_source_split_7396:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7397;

  corral_source_split_7397:
    assume {:verifier.code 0} true;
    $p48 := $load.ref($M.0, $p47);
    goto corral_source_split_7398;

  corral_source_split_7398:
    assume {:verifier.code 0} true;
    $p49 := $add.ref($add.ref($p48, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_7399;

  corral_source_split_7399:
    assume {:verifier.code 0} true;
    $M.69 := $store.i32($M.69, $p49, 32768);
    goto corral_source_split_7400;

  corral_source_split_7400:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7401;

  corral_source_split_7401:
    assume {:verifier.code 0} true;
    $p51 := $load.ref($M.0, $p50);
    goto corral_source_split_7402;

  corral_source_split_7402:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p51, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_7403;

  corral_source_split_7403:
    assume {:verifier.code 0} true;
    $M.70 := $store.i32($M.70, $p52, 64);
    goto corral_source_split_7404;

  corral_source_split_7404:
    assume {:verifier.code 0} true;
    $p53 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7405;

  corral_source_split_7405:
    assume {:verifier.code 0} true;
    $p54 := $load.ref($M.0, $p53);
    goto corral_source_split_7406;

  corral_source_split_7406:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p54, $mul.ref(0, 160)), $mul.ref(16, 1));
    goto corral_source_split_7407;

  corral_source_split_7407:
    assume {:verifier.code 0} true;
    $M.71 := $store.i32($M.71, $p55, 1);
    goto corral_source_split_7408;

  corral_source_split_7408:
    assume {:verifier.code 0} true;
    $p56 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7409;

  corral_source_split_7409:
    assume {:verifier.code 0} true;
    $p57 := $load.ref($M.0, $p56);
    goto corral_source_split_7410;

  corral_source_split_7410:
    assume {:verifier.code 0} true;
    $p58 := $add.ref($add.ref($p57, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_7411;

  corral_source_split_7411:
    assume {:verifier.code 0} true;
    $M.72 := $store.i8($M.72, $p58, 1);
    goto corral_source_split_7412;

  corral_source_split_7412:
    assume {:verifier.code 0} true;
    $p59 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7413;

  corral_source_split_7413:
    assume {:verifier.code 0} true;
    $p60 := $load.ref($M.0, $p59);
    goto corral_source_split_7414;

  corral_source_split_7414:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p60, $mul.ref(0, 160)), $mul.ref(104, 1));
    goto corral_source_split_7415;

  corral_source_split_7415:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.73, $p61);
    goto corral_source_split_7416;

  corral_source_split_7416:
    assume {:verifier.code 0} true;
    $p63 := $add.ref($add.ref($p62, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_7417;

  corral_source_split_7417:
    assume {:verifier.code 0} true;
    $i64 := $load.i64($M.74, $p63);
    goto corral_source_split_7418;

  corral_source_split_7418:
    assume {:verifier.code 0} true;
    $i65 := $trunc.i64.i32($i64);
    goto corral_source_split_7419;

  corral_source_split_7419:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7420;

  corral_source_split_7420:
    assume {:verifier.code 0} true;
    $p67 := $load.ref($M.0, $p66);
    goto corral_source_split_7421;

  corral_source_split_7421:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p67, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_7422;

  corral_source_split_7422:
    assume {:verifier.code 0} true;
    $M.75 := $store.i32($M.75, $p68, $i65);
    goto corral_source_split_7423;

  corral_source_split_7423:
    assume {:verifier.code 0} true;
    $i69 := $M.76;
    goto corral_source_split_7424;

  corral_source_split_7424:
    assume {:verifier.code 0} true;
    $i70 := $slt.i32($i69, 0);
    goto corral_source_split_7425;

  corral_source_split_7425:
    assume {:verifier.code 0} true;
    assume {:branchcond $i70} true;
    goto $bb8, $bb10;

  $bb10:
    assume !($i70 == 1);
    goto corral_source_split_7429;

  corral_source_split_7429:
    assume {:verifier.code 0} true;
    $i71 := $M.76;
    goto corral_source_split_7430;

  corral_source_split_7430:
    assume {:verifier.code 0} true;
    $i72 := $sgt.i32($i71, 6);
    goto corral_source_split_7431;

  corral_source_split_7431:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    $i73 := $M.76;
    goto corral_source_split_7433;

  corral_source_split_7433:
    assume {:verifier.code 0} true;
    $i74 := $add.i32($i73, 16);
    goto corral_source_split_7434;

  corral_source_split_7434:
    assume {:verifier.code 0} true;
    $i75 := $shl.i32(1, $i74);
    call {:si_unique_call 1362} {:cexpr "temp"} boogie_si_record_i32($i75);
    goto corral_source_split_7435;

  corral_source_split_7435:
    assume {:verifier.code 0} true;
    $i76 := $and.i32($i20, 4);
    goto corral_source_split_7436;

  corral_source_split_7436:
    assume {:verifier.code 0} true;
    $i77 := $ne.i32($i76, 0);
    goto corral_source_split_7437;

  corral_source_split_7437:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    $i109 := $i75;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_7489;

  corral_source_split_7489:
    assume {:verifier.code 0} true;
    $i110 := $and.i32($i20, 2);
    goto corral_source_split_7490;

  corral_source_split_7490:
    assume {:verifier.code 0} true;
    $i111 := $ne.i32($i110, 0);
    goto corral_source_split_7491;

  corral_source_split_7491:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume !($i111 == 1);
    assume {:verifier.code 0} true;
    $i114 := $i109;
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_7497;

  corral_source_split_7497:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(728, 1));
    goto corral_source_split_7498;

  corral_source_split_7498:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p115, $i114);
    goto corral_source_split_7499;

  corral_source_split_7499:
    assume {:verifier.code 0} true;
    $i15 := 0;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_7353;

  corral_source_split_7353:
    assume {:verifier.code 0} true;
    $r := $i15;
    return;

  $bb26:
    assume $i111 == 1;
    goto corral_source_split_7493;

  corral_source_split_7493:
    assume {:verifier.code 0} true;
    $i112 := $and.i32($i109, $sub.i32(0, 13));
    call {:si_unique_call 1371} {:cexpr "temp"} boogie_si_record_i32($i112);
    goto corral_source_split_7494;

  corral_source_split_7494:
    assume {:verifier.code 0} true;
    $i113 := $or.i32($i112, 8);
    call {:si_unique_call 1372} {:cexpr "temp"} boogie_si_record_i32($i113);
    goto corral_source_split_7495;

  corral_source_split_7495:
    assume {:verifier.code 0} true;
    $i114 := $i113;
    goto $bb28;

  $bb14:
    assume $i77 == 1;
    goto corral_source_split_7439;

  corral_source_split_7439:
    assume {:verifier.code 0} true;
    $i78 := $M.77;
    goto corral_source_split_7440;

  corral_source_split_7440:
    assume {:verifier.code 0} true;
    $i79 := $ne.i32($i78, 0);
    goto corral_source_split_7441;

  corral_source_split_7441:
    assume {:verifier.code 0} true;
    assume {:branchcond $i79} true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i79 == 1);
    assume {:verifier.code 0} true;
    $i87 := $i75;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_7458;

  corral_source_split_7458:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7459;

  corral_source_split_7459:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p88, .str.2);
    goto corral_source_split_7460;

  corral_source_split_7460:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7461;

  corral_source_split_7461:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p89, .str.54);
    goto corral_source_split_7462;

  corral_source_split_7462:
    assume {:verifier.code 0} true;
    $p90 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7463;

  corral_source_split_7463:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p90, .str);
    goto corral_source_split_7464;

  corral_source_split_7464:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7465;

  corral_source_split_7465:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p91, .str.55);
    goto corral_source_split_7466;

  corral_source_split_7466:
    assume {:verifier.code 0} true;
    $p92 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7467;

  corral_source_split_7467:
    assume {:verifier.code 0} true;
    $p93 := $bitcast.ref.ref($p92);
    goto corral_source_split_7468;

  corral_source_split_7468:
    assume {:verifier.code 0} true;
    $i94 := $load.i24($M.6, $p93);
    goto corral_source_split_7469;

  corral_source_split_7469:
    assume {:verifier.code 0} true;
    $i95 := $and.i24($i94, $sub.i24(0, 262144));
    goto corral_source_split_7470;

  corral_source_split_7470:
    assume {:verifier.code 0} true;
    $i96 := $or.i24($i95, 2656);
    goto corral_source_split_7471;

  corral_source_split_7471:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p93, $i96);
    goto corral_source_split_7472;

  corral_source_split_7472:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7473;

  corral_source_split_7473:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p97, 0);
    goto corral_source_split_7474;

  corral_source_split_7474:
    assume {:verifier.code 0} true;
    $p98 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7475;

  corral_source_split_7475:
    assume {:verifier.code 0} true;
    $i99 := $load.i8($M.7, $p98);
    goto corral_source_split_7476;

  corral_source_split_7476:
    assume {:verifier.code 0} true;
    $i100 := $zext.i8.i64($i99);
    goto corral_source_split_7477;

  corral_source_split_7477:
    assume {:verifier.code 0} true;
    $i101 := $and.i64($i100, 1);
    goto corral_source_split_7478;

  corral_source_split_7478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1367} $i102 := ldv__builtin_expect($i101, 0);
    call {:si_unique_call 1368} {:cexpr "tmp___1"} boogie_si_record_i64($i102);
    goto corral_source_split_7479;

  corral_source_split_7479:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_7480;

  corral_source_split_7480:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  $bb23:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    $i109 := $i87;
    goto $bb25;

  $bb22:
    assume $i103 == 1;
    goto corral_source_split_7482;

  corral_source_split_7482:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1369} $p104 := oxu_to_hcd($p3);
    goto corral_source_split_7483;

  corral_source_split_7483:
    assume {:verifier.code 0} true;
    $p106 := $add.ref($add.ref($add.ref($p104, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7484;

  corral_source_split_7484:
    assume {:verifier.code 0} true;
    $p107 := $load.ref($M.78, $p106);
    goto corral_source_split_7485;

  corral_source_split_7485:
    assume {:verifier.code 0} true;
    $i108 := $M.77;
    goto corral_source_split_7486;

  corral_source_split_7486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1370} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p107, .str.55, $i108);
    goto corral_source_split_7487;

  corral_source_split_7487:
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb16:
    assume $i79 == 1;
    goto corral_source_split_7443;

  corral_source_split_7443:
    assume {:verifier.code 0} true;
    $i80 := $M.77;
    call {:si_unique_call 1363} {:cexpr "_min1"} boogie_si_record_i32($i80);
    goto corral_source_split_7444;

  corral_source_split_7444:
    assume {:verifier.code 0} true;
    $i81 := $ult.i32($i80, 3);
    goto corral_source_split_7445;

  corral_source_split_7445:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i81 == 1);
    goto corral_source_split_7449;

  corral_source_split_7449:
    assume {:verifier.code 0} true;
    $i82 := 3;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7451;

  corral_source_split_7451:
    assume {:verifier.code 0} true;
    $M.77 := $i82;
    call {:si_unique_call 1364} {:cexpr "park"} boogie_si_record_i32($i82);
    goto corral_source_split_7452;

  corral_source_split_7452:
    assume {:verifier.code 0} true;
    $i83 := $or.i32($i75, 2048);
    call {:si_unique_call 1365} {:cexpr "temp"} boogie_si_record_i32($i83);
    goto corral_source_split_7453;

  corral_source_split_7453:
    assume {:verifier.code 0} true;
    $i84 := $M.77;
    goto corral_source_split_7454;

  corral_source_split_7454:
    assume {:verifier.code 0} true;
    $i85 := $shl.i32($i84, 8);
    goto corral_source_split_7455;

  corral_source_split_7455:
    assume {:verifier.code 0} true;
    $i86 := $or.i32($i85, $i83);
    call {:si_unique_call 1366} {:cexpr "temp"} boogie_si_record_i32($i86);
    goto corral_source_split_7456;

  corral_source_split_7456:
    assume {:verifier.code 0} true;
    $i87 := $i86;
    goto $bb21;

  $bb18:
    assume $i81 == 1;
    goto corral_source_split_7447;

  corral_source_split_7447:
    assume {:verifier.code 0} true;
    $i82 := $i80;
    goto $bb20;

  $bb11:
    assume {:verifier.code 0} true;
    assume $i72 == 1;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    $M.76 := 0;
    call {:si_unique_call 1361} {:cexpr "log2_irq_thresh"} boogie_si_record_i32(0);
    goto corral_source_split_7427;

  corral_source_split_7427:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb8:
    assume {:verifier.code 0} true;
    assume $i70 == 1;
    goto $bb9;

  $bb5:
    assume $i22 == 1;
    goto corral_source_split_7363;

  corral_source_split_7363:
    assume {:verifier.code 0} true;
    $p23 := $add.ref($add.ref($p3, $mul.ref(0, 768)), $mul.ref(416, 1));
    goto corral_source_split_7364;

  corral_source_split_7364:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p23, 8);
    goto corral_source_split_7365;

  corral_source_split_7365:
    assume {:verifier.code 0} true;
    goto $bb7;

  SeqInstr_397:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_7351;

  corral_source_split_7351:
    assume {:verifier.code 0} true;
    $i15 := $i13;
    goto $bb3;

  SeqInstr_394:
    assume !assertsPassed;
    return;
}



const oxu_watchdog: ref;

axiom oxu_watchdog == $sub.ref(0, 380349);

procedure oxu_watchdog($i0: i64);
  free requires assertsPassed;
  modifies $M.22, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.60, $M.39, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.48, $M.50, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr, $M.8, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_watchdog($i0: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i64;
  var $i5: i1;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i32;
  var $i11: i32;
  var $i12: i1;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $i18: i8;
  var $i19: i8;
  var $i20: i8;
  var $p21: ref;
  var $i22: i32;
  var $i23: i1;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1373} {:cexpr "oxu_watchdog:arg:param"} boogie_si_record_i64($i0);
    goto corral_source_split_7501;

  corral_source_split_7501:
    assume {:verifier.code 0} true;
    $p1 := $i2p.i64.ref($i0);
    goto corral_source_split_7502;

  corral_source_split_7502:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1374} ldv_spin_lock();
    goto corral_source_split_7503;

  corral_source_split_7503:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_7504;

  corral_source_split_7504:
    assume {:verifier.code 0} true;
    $p3 := $load.ref($M.0, $p2);
    goto corral_source_split_7505;

  corral_source_split_7505:
    assume {:verifier.code 0} true;
    $i4 := $p2i.ref.i64($p3);
    goto corral_source_split_7506;

  corral_source_split_7506:
    assume {:verifier.code 0} true;
    $i5 := $ne.i64($i4, 0);
    goto corral_source_split_7507;

  corral_source_split_7507:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i5 == 1);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(704, 1));
    goto corral_source_split_7530;

  corral_source_split_7530:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1378} $i22 := constant_test_bit(3, $p21);
    call {:si_unique_call 1379} {:cexpr "tmp___0"} boogie_si_record_i32($i22);
    goto corral_source_split_7531;

  corral_source_split_7531:
    assume {:verifier.code 0} true;
    $i23 := $ne.i32($i22, 0);
    goto corral_source_split_7532;

  corral_source_split_7532:
    assume {:verifier.code 0} true;
    assume {:branchcond $i23} true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i23 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1381} ehci_work($p1);
    goto SeqInstr_406, SeqInstr_407;

  SeqInstr_407:
    assume assertsPassed;
    goto SeqInstr_408;

  SeqInstr_408:
    goto corral_source_split_7539;

  corral_source_split_7539:
    assume {:verifier.code 0} true;
    $p26 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_7540;

  corral_source_split_7540:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1382} spin_unlock_irqrestore($p26, $u0);
    goto corral_source_split_7541;

  corral_source_split_7541:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_406:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i23 == 1;
    goto corral_source_split_7534;

  corral_source_split_7534:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7535;

  corral_source_split_7535:
    assume {:verifier.code 0} true;
    $p25 := $load.ref($M.0, $p24);
    goto corral_source_split_7536;

  corral_source_split_7536:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1380} start_unlink_async($p1, $p25);
    goto SeqInstr_403, SeqInstr_404;

  SeqInstr_404:
    assume assertsPassed;
    goto SeqInstr_405;

  SeqInstr_405:
    goto corral_source_split_7537;

  corral_source_split_7537:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_403:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7509;

  corral_source_split_7509:
    assume {:verifier.code 0} true;
    $p6 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7510;

  corral_source_split_7510:
    assume {:verifier.code 0} true;
    $p7 := $load.ref($M.0, $p6);
    goto corral_source_split_7511;

  corral_source_split_7511:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_7512;

  corral_source_split_7512:
    assume {:verifier.code 0} true;
    $p9 := $bitcast.ref.ref($p8);
    goto corral_source_split_7513;

  corral_source_split_7513:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1375} $i10 := readl($p9);
    goto SeqInstr_400, SeqInstr_401;

  SeqInstr_401:
    assume assertsPassed;
    goto SeqInstr_402;

  SeqInstr_402:
    call {:si_unique_call 1376} {:cexpr "tmp"} boogie_si_record_i32($i10);
    goto corral_source_split_7514;

  corral_source_split_7514:
    assume {:verifier.code 0} true;
    $i11 := $and.i32($i10, 32);
    goto corral_source_split_7515;

  corral_source_split_7515:
    assume {:verifier.code 0} true;
    $i12 := $ne.i32($i11, 0);
    goto corral_source_split_7516;

  corral_source_split_7516:
    assume {:verifier.code 0} true;
    assume {:branchcond $i12} true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i12 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb3:
    assume $i12 == 1;
    goto corral_source_split_7518;

  corral_source_split_7518:
    assume {:verifier.code 0} true;
    $p13 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7519;

  corral_source_split_7519:
    assume {:verifier.code 0} true;
    $p14 := $load.ref($M.0, $p13);
    goto corral_source_split_7520;

  corral_source_split_7520:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p14, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_7521;

  corral_source_split_7521:
    assume {:verifier.code 0} true;
    $p16 := $bitcast.ref.ref($p15);
    goto corral_source_split_7522;

  corral_source_split_7522:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1377} writel(32, $p16);
    goto corral_source_split_7523;

  corral_source_split_7523:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 768)), $mul.ref(392, 1));
    goto corral_source_split_7524;

  corral_source_split_7524:
    assume {:verifier.code 0} true;
    $i18 := $load.i8($M.0, $p17);
    goto corral_source_split_7525;

  corral_source_split_7525:
    assume {:verifier.code 0} true;
    $i19 := $and.i8($i18, $sub.i8(0, 2));
    goto corral_source_split_7526;

  corral_source_split_7526:
    assume {:verifier.code 0} true;
    $i20 := $or.i8($i19, 1);
    goto corral_source_split_7527;

  corral_source_split_7527:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p17, $i20);
    goto corral_source_split_7528;

  corral_source_split_7528:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_400:
    assume !assertsPassed;
    return;
}



const reg_timer_1: ref;

axiom reg_timer_1 == $sub.ref(0, 381381);

procedure reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33;



implementation reg_timer_1($p0: ref, $p1: ref, $i2: i64) returns ($r: i32)
{
  var $i3: i64;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1383} {:cexpr "reg_timer_1:arg:data"} boogie_si_record_i64($i2);
    goto corral_source_split_7543;

  corral_source_split_7543:
    assume {:verifier.code 0} true;
    $i3 := $p2i.ref.i64($p1);
    goto corral_source_split_7544;

  corral_source_split_7544:
    assume {:verifier.code 0} true;
    $i4 := $eq.i64($i3, $p2i.ref.i64(oxu_watchdog));
    goto corral_source_split_7545;

  corral_source_split_7545:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i4 == 1);
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb1:
    assume $i4 == 1;
    goto corral_source_split_7547;

  corral_source_split_7547:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1384} activate_suitable_timer_1($p0, $i2);
    goto corral_source_split_7548;

  corral_source_split_7548:
    assume {:verifier.code 0} true;
    goto $bb3;
}



const ehci_mem_init: ref;

axiom ehci_mem_init == $sub.ref(0, 382413);

procedure ehci_mem_init($p0: ref, $i1: i32) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.27, $M.29, $M.31, $M.33, $CurrAddr, assertsPassed, $M.24, $M.25, $M.63, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59;



implementation ehci_mem_init($p0: ref, $i1: i32) returns ($r: i32)
{
  var $p2: ref;
  var $p3: ref;
  var $i4: i32;
  var $i5: i1;
  var $i7: i64;
  var $p8: ref;
  var $p9: ref;
  var $p11: ref;
  var $i12: i32;
  var $i13: i32;
  var $i14: i1;
  var $i6: i32;
  var $p16: ref;
  var $p18: ref;
  var $p19: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $i24: i64;
  var $i25: i1;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $i32: i64;
  var $i33: i1;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $p44: ref;
  var $i45: i32;
  var $i46: i1;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i32;
  var $i53: i32;
  var $i54: i1;
  var $i47: i32;
  var $p55: ref;
  var $i56: i32;
  var $i57: i64;
  var $p58: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $i63: i64;
  var $i64: i1;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $i72: i24;
  var $i73: i24;
  var $i74: i24;
  var $p75: ref;
  var $p76: ref;
  var $i77: i8;
  var $i78: i64;
  var $i79: i64;
  var $i80: i64;
  var $i81: i1;
  var $p82: ref;
  var $p84: ref;
  var $p85: ref;
  var $i65: i32;
  var $p87: ref;
  var $p89: ref;
  var $p91: ref;
  var $p93: ref;
  var $p95: ref;
  var $p97: ref;
  var $p99: ref;
  var $p101: ref;
  var $p103: ref;
  var $p105: ref;
  var $p107: ref;
  var $p109: ref;
  var $p111: ref;
  var $p113: ref;
  var $p115: ref;
  var $p117: ref;
  var $p119: ref;
  var $p121: ref;
  var $p123: ref;
  var $p125: ref;
  var $p127: ref;
  var $p129: ref;
  var $p131: ref;
  var $p133: ref;
  var $p135: ref;
  var $p137: ref;
  var $p139: ref;
  var $p141: ref;
  var $p143: ref;
  var $p145: ref;
  var $p147: ref;
  var $p149: ref;
  var $p151: ref;
  var $p153: ref;
  var $p155: ref;
  var $p157: ref;
  var $p159: ref;
  var $p161: ref;
  var $p163: ref;
  var $p165: ref;
  var $p167: ref;
  var $p169: ref;
  var $p171: ref;
  var $p173: ref;
  var $p175: ref;
  var $p177: ref;
  var $p179: ref;
  var $p181: ref;
  var $p183: ref;
  var $p185: ref;
  var $p187: ref;
  var $p189: ref;
  var $p191: ref;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1385} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    call {:si_unique_call 1386} {:cexpr "ehci_mem_init:arg:flags"} boogie_si_record_i32($i1);
    goto corral_source_split_7550;

  corral_source_split_7550:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_7551;

  corral_source_split_7551:
    assume {:verifier.code 0} true;
    $i4 := $load.i32($M.0, $p3);
    goto corral_source_split_7552;

  corral_source_split_7552:
    assume {:verifier.code 0} true;
    $i5 := $ult.i32(0, $i4);
    goto corral_source_split_7553;

  corral_source_split_7553:
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(0, 1));
    goto corral_source_split_7570;

  corral_source_split_7570:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p16, 0);
    goto corral_source_split_7571;

  corral_source_split_7571:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    $p163 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(1, 1));
    goto corral_source_split_7573;

  corral_source_split_7573:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p163, 0);
    goto corral_source_split_7574;

  corral_source_split_7574:
    assume {:verifier.code 0} true;
    goto $bb79;

  $bb79:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(2, 1));
    goto corral_source_split_7793;

  corral_source_split_7793:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p165, 0);
    goto corral_source_split_7794;

  corral_source_split_7794:
    assume {:verifier.code 0} true;
    goto $bb80;

  $bb80:
    assume {:verifier.code 0} true;
    $p167 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(3, 1));
    goto corral_source_split_7796;

  corral_source_split_7796:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p167, 0);
    goto corral_source_split_7797;

  corral_source_split_7797:
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    $p169 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(4, 1));
    goto corral_source_split_7799;

  corral_source_split_7799:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p169, 0);
    goto corral_source_split_7800;

  corral_source_split_7800:
    assume {:verifier.code 0} true;
    goto $bb82;

  $bb82:
    assume {:verifier.code 0} true;
    $p171 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(5, 1));
    goto corral_source_split_7802;

  corral_source_split_7802:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p171, 0);
    goto corral_source_split_7803;

  corral_source_split_7803:
    assume {:verifier.code 0} true;
    goto $bb83;

  $bb83:
    assume {:verifier.code 0} true;
    $p173 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(6, 1));
    goto corral_source_split_7805;

  corral_source_split_7805:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p173, 0);
    goto corral_source_split_7806;

  corral_source_split_7806:
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $p175 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(7, 1));
    goto corral_source_split_7808;

  corral_source_split_7808:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p175, 0);
    goto corral_source_split_7809;

  corral_source_split_7809:
    assume {:verifier.code 0} true;
    goto $bb85;

  $bb85:
    assume {:verifier.code 0} true;
    $p177 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(8, 1));
    goto corral_source_split_7811;

  corral_source_split_7811:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p177, 0);
    goto corral_source_split_7812;

  corral_source_split_7812:
    assume {:verifier.code 0} true;
    goto $bb86;

  $bb86:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(9, 1));
    goto corral_source_split_7814;

  corral_source_split_7814:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p179, 0);
    goto corral_source_split_7815;

  corral_source_split_7815:
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(10, 1));
    goto corral_source_split_7817;

  corral_source_split_7817:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p181, 0);
    goto corral_source_split_7818;

  corral_source_split_7818:
    assume {:verifier.code 0} true;
    goto $bb88;

  $bb88:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(11, 1));
    goto corral_source_split_7820;

  corral_source_split_7820:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p183, 0);
    goto corral_source_split_7821;

  corral_source_split_7821:
    assume {:verifier.code 0} true;
    goto $bb89;

  $bb89:
    assume {:verifier.code 0} true;
    $p185 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(12, 1));
    goto corral_source_split_7823;

  corral_source_split_7823:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p185, 0);
    goto corral_source_split_7824;

  corral_source_split_7824:
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    $p187 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(13, 1));
    goto corral_source_split_7826;

  corral_source_split_7826:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p187, 0);
    goto corral_source_split_7827;

  corral_source_split_7827:
    assume {:verifier.code 0} true;
    goto $bb91;

  $bb91:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(14, 1));
    goto corral_source_split_7829;

  corral_source_split_7829:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p189, 0);
    goto corral_source_split_7830;

  corral_source_split_7830:
    assume {:verifier.code 0} true;
    goto $bb92;

  $bb92:
    assume {:verifier.code 0} true;
    $p191 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(1, 1)), $mul.ref(15, 1));
    goto corral_source_split_7832;

  corral_source_split_7832:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p191, 0);
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(0, 1));
    goto corral_source_split_7576;

  corral_source_split_7576:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p18, 0);
    goto corral_source_split_7577;

  corral_source_split_7577:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(1, 1));
    goto corral_source_split_7579;

  corral_source_split_7579:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p101, 0);
    goto corral_source_split_7580;

  corral_source_split_7580:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb49:
    assume {:verifier.code 0} true;
    $p103 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(2, 1));
    goto corral_source_split_7704;

  corral_source_split_7704:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p103, 0);
    goto corral_source_split_7705;

  corral_source_split_7705:
    assume {:verifier.code 0} true;
    goto $bb50;

  $bb50:
    assume {:verifier.code 0} true;
    $p105 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(3, 1));
    goto corral_source_split_7707;

  corral_source_split_7707:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p105, 0);
    goto corral_source_split_7708;

  corral_source_split_7708:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb51:
    assume {:verifier.code 0} true;
    $p107 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(4, 1));
    goto corral_source_split_7710;

  corral_source_split_7710:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p107, 0);
    goto corral_source_split_7711;

  corral_source_split_7711:
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(5, 1));
    goto corral_source_split_7713;

  corral_source_split_7713:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p109, 0);
    goto corral_source_split_7714;

  corral_source_split_7714:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(6, 1));
    goto corral_source_split_7716;

  corral_source_split_7716:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p111, 0);
    goto corral_source_split_7717;

  corral_source_split_7717:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(7, 1));
    goto corral_source_split_7719;

  corral_source_split_7719:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p113, 0);
    goto corral_source_split_7720;

  corral_source_split_7720:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $p115 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(8, 1));
    goto corral_source_split_7722;

  corral_source_split_7722:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p115, 0);
    goto corral_source_split_7723;

  corral_source_split_7723:
    assume {:verifier.code 0} true;
    goto $bb56;

  $bb56:
    assume {:verifier.code 0} true;
    $p117 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(9, 1));
    goto corral_source_split_7725;

  corral_source_split_7725:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p117, 0);
    goto corral_source_split_7726;

  corral_source_split_7726:
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(10, 1));
    goto corral_source_split_7728;

  corral_source_split_7728:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p119, 0);
    goto corral_source_split_7729;

  corral_source_split_7729:
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    $p121 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(11, 1));
    goto corral_source_split_7731;

  corral_source_split_7731:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p121, 0);
    goto corral_source_split_7732;

  corral_source_split_7732:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    $p123 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(12, 1));
    goto corral_source_split_7734;

  corral_source_split_7734:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p123, 0);
    goto corral_source_split_7735;

  corral_source_split_7735:
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $p125 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(13, 1));
    goto corral_source_split_7737;

  corral_source_split_7737:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p125, 0);
    goto corral_source_split_7738;

  corral_source_split_7738:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb61:
    assume {:verifier.code 0} true;
    $p127 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(14, 1));
    goto corral_source_split_7740;

  corral_source_split_7740:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p127, 0);
    goto corral_source_split_7741;

  corral_source_split_7741:
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p129 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(15, 1));
    goto corral_source_split_7743;

  corral_source_split_7743:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p129, 0);
    goto corral_source_split_7744;

  corral_source_split_7744:
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(16, 1));
    goto corral_source_split_7746;

  corral_source_split_7746:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p131, 0);
    goto corral_source_split_7747;

  corral_source_split_7747:
    assume {:verifier.code 0} true;
    goto $bb64;

  $bb64:
    assume {:verifier.code 0} true;
    $p133 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(17, 1));
    goto corral_source_split_7749;

  corral_source_split_7749:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p133, 0);
    goto corral_source_split_7750;

  corral_source_split_7750:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $p135 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(18, 1));
    goto corral_source_split_7752;

  corral_source_split_7752:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p135, 0);
    goto corral_source_split_7753;

  corral_source_split_7753:
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $p137 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(19, 1));
    goto corral_source_split_7755;

  corral_source_split_7755:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p137, 0);
    goto corral_source_split_7756;

  corral_source_split_7756:
    assume {:verifier.code 0} true;
    goto $bb67;

  $bb67:
    assume {:verifier.code 0} true;
    $p139 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(20, 1));
    goto corral_source_split_7758;

  corral_source_split_7758:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p139, 0);
    goto corral_source_split_7759;

  corral_source_split_7759:
    assume {:verifier.code 0} true;
    goto $bb68;

  $bb68:
    assume {:verifier.code 0} true;
    $p141 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(21, 1));
    goto corral_source_split_7761;

  corral_source_split_7761:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p141, 0);
    goto corral_source_split_7762;

  corral_source_split_7762:
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $p143 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(22, 1));
    goto corral_source_split_7764;

  corral_source_split_7764:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p143, 0);
    goto corral_source_split_7765;

  corral_source_split_7765:
    assume {:verifier.code 0} true;
    goto $bb70;

  $bb70:
    assume {:verifier.code 0} true;
    $p145 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(23, 1));
    goto corral_source_split_7767;

  corral_source_split_7767:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p145, 0);
    goto corral_source_split_7768;

  corral_source_split_7768:
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb71:
    assume {:verifier.code 0} true;
    $p147 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(24, 1));
    goto corral_source_split_7770;

  corral_source_split_7770:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p147, 0);
    goto corral_source_split_7771;

  corral_source_split_7771:
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(25, 1));
    goto corral_source_split_7773;

  corral_source_split_7773:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p149, 0);
    goto corral_source_split_7774;

  corral_source_split_7774:
    assume {:verifier.code 0} true;
    goto $bb73;

  $bb73:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(26, 1));
    goto corral_source_split_7776;

  corral_source_split_7776:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p151, 0);
    goto corral_source_split_7777;

  corral_source_split_7777:
    assume {:verifier.code 0} true;
    goto $bb74;

  $bb74:
    assume {:verifier.code 0} true;
    $p153 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(27, 1));
    goto corral_source_split_7779;

  corral_source_split_7779:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p153, 0);
    goto corral_source_split_7780;

  corral_source_split_7780:
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $p155 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(28, 1));
    goto corral_source_split_7782;

  corral_source_split_7782:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p155, 0);
    goto corral_source_split_7783;

  corral_source_split_7783:
    assume {:verifier.code 0} true;
    goto $bb76;

  $bb76:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(29, 1));
    goto corral_source_split_7785;

  corral_source_split_7785:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p157, 0);
    goto corral_source_split_7786;

  corral_source_split_7786:
    assume {:verifier.code 0} true;
    goto $bb77;

  $bb77:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(30, 1));
    goto corral_source_split_7788;

  corral_source_split_7788:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p159, 0);
    goto corral_source_split_7789;

  corral_source_split_7789:
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $p161 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(17, 1)), $mul.ref(31, 1));
    goto corral_source_split_7791;

  corral_source_split_7791:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p161, 0);
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1388} $p19 := kcalloc(8, 208, $i1);
    goto SeqInstr_409, SeqInstr_410;

  SeqInstr_410:
    assume assertsPassed;
    goto SeqInstr_411;

  SeqInstr_411:
    goto corral_source_split_7582;

  corral_source_split_7582:
    assume {:verifier.code 0} true;
    goto corral_source_split_7583;

  corral_source_split_7583:
    assume {:verifier.code 0} true;
    $p21 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(752, 1));
    goto corral_source_split_7584;

  corral_source_split_7584:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p21, $p19);
    goto corral_source_split_7585;

  corral_source_split_7585:
    assume {:verifier.code 0} true;
    $p22 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(752, 1));
    goto corral_source_split_7586;

  corral_source_split_7586:
    assume {:verifier.code 0} true;
    $p23 := $load.ref($M.0, $p22);
    goto corral_source_split_7587;

  corral_source_split_7587:
    assume {:verifier.code 0} true;
    $i24 := $p2i.ref.i64($p23);
    goto corral_source_split_7588;

  corral_source_split_7588:
    assume {:verifier.code 0} true;
    $i25 := $eq.i64($i24, 0);
    goto corral_source_split_7589;

  corral_source_split_7589:
    assume {:verifier.code 0} true;
    assume {:branchcond $i25} true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i25 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb21:
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    $p27 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(0, 1));
    goto corral_source_split_7616;

  corral_source_split_7616:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p27, 0);
    goto corral_source_split_7617;

  corral_source_split_7617:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb23:
    assume {:verifier.code 0} true;
    $p87 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(1, 1));
    goto corral_source_split_7619;

  corral_source_split_7619:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p87, 0);
    goto corral_source_split_7620;

  corral_source_split_7620:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb43:
    assume {:verifier.code 0} true;
    $p89 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(2, 1));
    goto corral_source_split_7687;

  corral_source_split_7687:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p89, 0);
    goto corral_source_split_7688;

  corral_source_split_7688:
    assume {:verifier.code 0} true;
    goto $bb44;

  $bb44:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(3, 1));
    goto corral_source_split_7690;

  corral_source_split_7690:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p91, 0);
    goto corral_source_split_7691;

  corral_source_split_7691:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p93 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(4, 1));
    goto corral_source_split_7693;

  corral_source_split_7693:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p93, 0);
    goto corral_source_split_7694;

  corral_source_split_7694:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $p95 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(5, 1));
    goto corral_source_split_7696;

  corral_source_split_7696:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p95, 0);
    goto corral_source_split_7697;

  corral_source_split_7697:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    $p97 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(6, 1));
    goto corral_source_split_7699;

  corral_source_split_7699:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p97, 0);
    goto corral_source_split_7700;

  corral_source_split_7700:
    assume {:verifier.code 0} true;
    goto $bb48;

  $bb48:
    assume {:verifier.code 0} true;
    $p99 := $add.ref($add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(57, 1)), $mul.ref(7, 1));
    goto corral_source_split_7702;

  corral_source_split_7702:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p99, 0);
    assume {:verifier.code 0} true;
    goto $bb24;

  $bb24:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1391} $p28 := oxu_qh_alloc($p0);
    goto corral_source_split_7622;

  corral_source_split_7622:
    assume {:verifier.code 0} true;
    $p29 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7623;

  corral_source_split_7623:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p29, $p28);
    goto corral_source_split_7624;

  corral_source_split_7624:
    assume {:verifier.code 0} true;
    $p30 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_7625;

  corral_source_split_7625:
    assume {:verifier.code 0} true;
    $p31 := $load.ref($M.0, $p30);
    goto corral_source_split_7626;

  corral_source_split_7626:
    assume {:verifier.code 0} true;
    $i32 := $p2i.ref.i64($p31);
    goto corral_source_split_7627;

  corral_source_split_7627:
    assume {:verifier.code 0} true;
    $i33 := $eq.i64($i32, 0);
    goto corral_source_split_7628;

  corral_source_split_7628:
    assume {:verifier.code 0} true;
    assume {:branchcond $i33} true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i33 == 1);
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    $p34 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_7632;

  corral_source_split_7632:
    assume {:verifier.code 0} true;
    $p35 := $load.ref($M.0, $p34);
    goto corral_source_split_7633;

  corral_source_split_7633:
    assume {:verifier.code 0} true;
    $p36 := $add.ref($add.ref($p35, $mul.ref(0, 15104)), $mul.ref(4096, 1));
    goto corral_source_split_7634;

  corral_source_split_7634:
    assume {:verifier.code 0} true;
    goto corral_source_split_7635;

  corral_source_split_7635:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_7636;

  corral_source_split_7636:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p38, $p36);
    goto corral_source_split_7637;

  corral_source_split_7637:
    assume {:verifier.code 0} true;
    $p39 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_7638;

  corral_source_split_7638:
    assume {:verifier.code 0} true;
    $p40 := $load.ref($M.0, $p39);
    goto corral_source_split_7639;

  corral_source_split_7639:
    assume {:verifier.code 0} true;
    $p41 := $bitcast.ref.ref($p40);
    goto corral_source_split_7640;

  corral_source_split_7640:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1392} $i42 := virt_to_phys($p41);
    goto corral_source_split_7641;

  corral_source_split_7641:
    assume {:verifier.code 0} true;
    $p43 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(408, 1));
    goto corral_source_split_7642;

  corral_source_split_7642:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p43, $i42);
    goto corral_source_split_7643;

  corral_source_split_7643:
    assume {:verifier.code 0} true;
    $p44 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_7644;

  corral_source_split_7644:
    assume {:verifier.code 0} true;
    $i45 := $load.i32($M.0, $p44);
    goto corral_source_split_7645;

  corral_source_split_7645:
    assume {:verifier.code 0} true;
    $i46 := $ult.i32(0, $i45);
    goto corral_source_split_7646;

  corral_source_split_7646:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    assume !($i46 == 1);
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb35;

  $bb35:
    assume {:verifier.code 0} true;
    $p55 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_7663;

  corral_source_split_7663:
    assume {:verifier.code 0} true;
    $i56 := $load.i32($M.0, $p55);
    goto corral_source_split_7664;

  corral_source_split_7664:
    assume {:verifier.code 0} true;
    $i57 := $zext.i32.i64($i56);
    goto corral_source_split_7665;

  corral_source_split_7665:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1394} $p58 := kcalloc($i57, 8, $i1);
    goto SeqInstr_412, SeqInstr_413;

  SeqInstr_413:
    assume assertsPassed;
    goto SeqInstr_414;

  SeqInstr_414:
    goto corral_source_split_7666;

  corral_source_split_7666:
    assume {:verifier.code 0} true;
    goto corral_source_split_7667;

  corral_source_split_7667:
    assume {:verifier.code 0} true;
    $p60 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_7668;

  corral_source_split_7668:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, $p60, $p58);
    goto corral_source_split_7669;

  corral_source_split_7669:
    assume {:verifier.code 0} true;
    $p61 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_7670;

  corral_source_split_7670:
    assume {:verifier.code 0} true;
    $p62 := $load.ref($M.0, $p61);
    goto corral_source_split_7671;

  corral_source_split_7671:
    assume {:verifier.code 0} true;
    $i63 := $p2i.ref.i64($p62);
    goto corral_source_split_7672;

  corral_source_split_7672:
    assume {:verifier.code 0} true;
    $i64 := $ne.i64($i63, 0);
    goto corral_source_split_7673;

  corral_source_split_7673:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i64 == 1);
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb39:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7593;

  corral_source_split_7593:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p66, .str.2);
    goto corral_source_split_7594;

  corral_source_split_7594:
    assume {:verifier.code 0} true;
    $p67 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7595;

  corral_source_split_7595:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p67, .str.56);
    goto corral_source_split_7596;

  corral_source_split_7596:
    assume {:verifier.code 0} true;
    $p68 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7597;

  corral_source_split_7597:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p68, .str);
    goto corral_source_split_7598;

  corral_source_split_7598:
    assume {:verifier.code 0} true;
    $p69 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7599;

  corral_source_split_7599:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p69, .str.57);
    goto corral_source_split_7600;

  corral_source_split_7600:
    assume {:verifier.code 0} true;
    $p70 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7601;

  corral_source_split_7601:
    assume {:verifier.code 0} true;
    $p71 := $bitcast.ref.ref($p70);
    goto corral_source_split_7602;

  corral_source_split_7602:
    assume {:verifier.code 0} true;
    $i72 := $load.i24($M.6, $p71);
    goto corral_source_split_7603;

  corral_source_split_7603:
    assume {:verifier.code 0} true;
    $i73 := $and.i24($i72, $sub.i24(0, 262144));
    goto corral_source_split_7604;

  corral_source_split_7604:
    assume {:verifier.code 0} true;
    $i74 := $or.i24($i73, 775);
    goto corral_source_split_7605;

  corral_source_split_7605:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p71, $i74);
    goto corral_source_split_7606;

  corral_source_split_7606:
    assume {:verifier.code 0} true;
    $p75 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7607;

  corral_source_split_7607:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p75, 0);
    goto corral_source_split_7608;

  corral_source_split_7608:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7609;

  corral_source_split_7609:
    assume {:verifier.code 0} true;
    $i77 := $load.i8($M.7, $p76);
    goto corral_source_split_7610;

  corral_source_split_7610:
    assume {:verifier.code 0} true;
    $i78 := $zext.i8.i64($i77);
    goto corral_source_split_7611;

  corral_source_split_7611:
    assume {:verifier.code 0} true;
    $i79 := $and.i64($i78, 1);
    goto corral_source_split_7612;

  corral_source_split_7612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1389} $i80 := ldv__builtin_expect($i79, 0);
    call {:si_unique_call 1390} {:cexpr "tmp___2"} boogie_si_record_i64($i80);
    goto corral_source_split_7613;

  corral_source_split_7613:
    assume {:verifier.code 0} true;
    $i81 := $ne.i64($i80, 0);
    goto corral_source_split_7614;

  corral_source_split_7614:
    assume {:verifier.code 0} true;
    assume {:branchcond $i81} true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i81 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1397} ehci_mem_cleanup($p0);
    goto SeqInstr_415, SeqInstr_416;

  SeqInstr_416:
    assume assertsPassed;
    goto SeqInstr_417;

  SeqInstr_417:
    goto corral_source_split_7685;

  corral_source_split_7685:
    assume {:verifier.code 0} true;
    $i65 := $sub.i32(0, 12);
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_7677;

  corral_source_split_7677:
    assume {:verifier.code 0} true;
    $r := $i65;
    return;

  SeqInstr_415:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i81 == 1;
    goto corral_source_split_7679;

  corral_source_split_7679:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1395} $p82 := oxu_to_hcd($p0);
    goto corral_source_split_7680;

  corral_source_split_7680:
    assume {:verifier.code 0} true;
    $p84 := $add.ref($add.ref($add.ref($p82, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7681;

  corral_source_split_7681:
    assume {:verifier.code 0} true;
    $p85 := $load.ref($M.79, $p84);
    goto corral_source_split_7682;

  corral_source_split_7682:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1396} __dynamic_dev_dbg.ref.ref.ref($p2, $p85, .str.57);
    goto corral_source_split_7683;

  corral_source_split_7683:
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb36:
    assume $i64 == 1;
    goto corral_source_split_7675;

  corral_source_split_7675:
    assume {:verifier.code 0} true;
    $i65 := 0;
    goto $bb38;

  SeqInstr_412:
    assume !assertsPassed;
    return;

  $bb28:
    assume $i46 == 1;
    goto corral_source_split_7648;

  corral_source_split_7648:
    assume {:verifier.code 0} true;
    $i47 := 0;
    goto $bb31;

  $bb31:
    call $p48, $p49, $i50, $p51, $i52, $i53, $i54, $i47 := ehci_mem_init_loop_$bb31($p0, $p44, $p48, $p49, $i50, $p51, $i52, $i53, $i54, $i47);
    goto $bb31_last;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb32:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_7652;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_7653;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    $i50 := $sext.i32.i64($i47);
    goto corral_source_split_7654;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    $p51 := $add.ref($p49, $mul.ref($i50, 4));
    goto corral_source_split_7655;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p51, 1);
    goto corral_source_split_7656;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    $i52 := $add.i32($i47, 1);
    call {:si_unique_call 1393} {:cexpr "i"} boogie_si_record_i32($i52);
    goto corral_source_split_7657;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    $i53 := $load.i32($M.0, $p44);
    goto corral_source_split_7658;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    $i54 := $ult.i32($i52, $i53);
    goto corral_source_split_7659;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33, $bb34;

  $bb34:
    assume !($i54 == 1);
    goto corral_source_split_7661;

  corral_source_split_7661:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb33:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i47 := $i52;
    goto $bb33_dummy;

  $bb25:
    assume $i33 == 1;
    goto corral_source_split_7630;

  corral_source_split_7630:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb17:
    assume $i25 == 1;
    goto corral_source_split_7591;

  corral_source_split_7591:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_409:
    assume !assertsPassed;
    return;

  $bb1:
    assume $i5 == 1;
    goto corral_source_split_7555;

  corral_source_split_7555:
    assume {:verifier.code 0} true;
    $i6 := 0;
    goto $bb4;

  $bb4:
    call $i7, $p8, $p9, $p11, $i12, $i13, $i14, $i6 := ehci_mem_init_loop_$bb4($p0, $p3, $i7, $p8, $p9, $p11, $i12, $i13, $i14, $i6);
    goto $bb4_last;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i7 := $sext.i32.i64($i6);
    goto corral_source_split_7559;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_7560;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    $p9 := $load.ref($M.0, $p8);
    goto corral_source_split_7561;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($add.ref($p9, $mul.ref(0, 15104)), $mul.ref(4096, 1)), $mul.ref($i7, 4));
    goto corral_source_split_7562;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, $p11, 1);
    goto corral_source_split_7563;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    $i12 := $add.i32($i6, 1);
    call {:si_unique_call 1387} {:cexpr "i"} boogie_si_record_i32($i12);
    goto corral_source_split_7564;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    $i13 := $load.i32($M.0, $p3);
    goto corral_source_split_7565;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    $i14 := $ult.i32($i12, $i13);
    goto corral_source_split_7566;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6, $bb7;

  $bb7:
    assume !($i14 == 1);
    goto corral_source_split_7568;

  corral_source_split_7568:
    assume {:verifier.code 0} true;
    goto $bb3;

  $bb6:
    assume $i14 == 1;
    assume {:verifier.code 0} true;
    $i6 := $i12;
    goto $bb6_dummy;

  $bb33_dummy:
    assume false;
    return;

  $bb31_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7650;

  $bb6_dummy:
    assume false;
    return;

  $bb4_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7557;
}



const kcalloc: ref;

axiom kcalloc == $sub.ref(0, 383445);

procedure kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref);
  free requires assertsPassed;
  modifies assertsPassed;



implementation kcalloc($i0: i64, $i1: i64, $i2: i32) returns ($r: ref)
{
  var $p3: ref;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1398} {:cexpr "kcalloc:arg:n"} boogie_si_record_i64($i0);
    call {:si_unique_call 1399} {:cexpr "kcalloc:arg:size"} boogie_si_record_i64($i1);
    call {:si_unique_call 1400} {:cexpr "kcalloc:arg:flags"} boogie_si_record_i32($i2);
    goto corral_source_split_7834;

  corral_source_split_7834:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1401} ldv_check_alloc_flags($i2);
    goto SeqInstr_418, SeqInstr_419;

  SeqInstr_419:
    assume assertsPassed;
    goto SeqInstr_420;

  SeqInstr_420:
    goto corral_source_split_7835;

  corral_source_split_7835:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1402} $p3 := ldv_undef_ptr();
    goto corral_source_split_7836;

  corral_source_split_7836:
    assume {:verifier.code 0} true;
    $r := $p3;
    return;

  SeqInstr_418:
    assume !assertsPassed;
    return;
}



const ldv_check_alloc_flags: ref;

axiom ldv_check_alloc_flags == $sub.ref(0, 384477);

procedure ldv_check_alloc_flags($i0: i32);
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_check_alloc_flags($i0: i32)
{
  var $i1: i32;
  var $i2: i1;
  var $i3: i32;
  var $i4: i1;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1403} {:cexpr "ldv_check_alloc_flags:arg:flags"} boogie_si_record_i32($i0);
    goto corral_source_split_7838;

  corral_source_split_7838:
    assume {:verifier.code 0} true;
    $i1 := $M.22;
    goto corral_source_split_7839;

  corral_source_split_7839:
    assume {:verifier.code 0} true;
    $i2 := $ne.i32($i1, 0);
    goto corral_source_split_7840;

  corral_source_split_7840:
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i2 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    return;

  $bb1:
    assume $i2 == 1;
    goto corral_source_split_7842;

  corral_source_split_7842:
    assume {:verifier.code 0} true;
    $i3 := $and.i32($i0, 16);
    goto corral_source_split_7843;

  corral_source_split_7843:
    assume {:verifier.code 0} true;
    $i4 := $ne.i32($i3, 0);
    goto corral_source_split_7844;

  corral_source_split_7844:
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i4 == 1);
    goto $bb3;

  $bb4:
    assume $i4 == 1;
    goto corral_source_split_7846;

  corral_source_split_7846:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1404} ldv_error();
    goto SeqInstr_421, SeqInstr_422;

  SeqInstr_422:
    assume assertsPassed;
    goto SeqInstr_423;

  SeqInstr_423:
    goto corral_source_split_7847;

  corral_source_split_7847:
    assume {:verifier.code 0} true;
    goto $bb6;

  SeqInstr_421:
    assume !assertsPassed;
    return;
}



const ldv_undef_ptr: ref;

axiom ldv_undef_ptr == $sub.ref(0, 385509);

procedure ldv_undef_ptr() returns ($r: ref);
  free requires assertsPassed;



implementation ldv_undef_ptr() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_7849;

  corral_source_split_7849:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1405} $p0 := __VERIFIER_nondet_pointer();
    call {:si_unique_call 1406} {:cexpr "smack:ext:__VERIFIER_nondet_pointer"} boogie_si_record_ref($p0);
    goto corral_source_split_7850;

  corral_source_split_7850:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const ldv_error: ref;

axiom ldv_error == $sub.ref(0, 386541);

procedure ldv_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation ldv_error()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_7852;

  corral_source_split_7852:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1407} __VERIFIER_error();
    goto SeqInstr_424, SeqInstr_425;

  SeqInstr_425:
    assume assertsPassed;
    goto SeqInstr_426;

  SeqInstr_426:
    goto corral_source_split_7854;

  corral_source_split_7854:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_424:
    assume !assertsPassed;
    return;
}



const constant_test_bit: ref;

axiom constant_test_bit == $sub.ref(0, 387573);

procedure constant_test_bit($i0: i64, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation constant_test_bit($i0: i64, $p1: ref) returns ($r: i32)
{
  var $i2: i64;
  var $p3: ref;
  var $i4: i64;
  var $i5: i32;
  var $i6: i32;
  var $i7: i64;
  var $i8: i64;
  var $i9: i32;
  var $i10: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1408} {:cexpr "constant_test_bit:arg:nr"} boogie_si_record_i64($i0);
    goto corral_source_split_7856;

  corral_source_split_7856:
    assume {:verifier.code 0} true;
    $i2 := $ashr.i64($i0, 6);
    goto corral_source_split_7857;

  corral_source_split_7857:
    assume {:verifier.code 0} true;
    $p3 := $add.ref($p1, $mul.ref($i2, 8));
    goto corral_source_split_7858;

  corral_source_split_7858:
    assume {:verifier.code 0} true;
    $i4 := $load.i64($M.0, $p3);
    goto corral_source_split_7859;

  corral_source_split_7859:
    assume {:verifier.code 0} true;
    $i5 := $trunc.i64.i32($i0);
    goto corral_source_split_7860;

  corral_source_split_7860:
    assume {:verifier.code 0} true;
    $i6 := $and.i32($i5, 63);
    goto corral_source_split_7861;

  corral_source_split_7861:
    assume {:verifier.code 0} true;
    $i7 := $zext.i32.i64($i6);
    goto corral_source_split_7862;

  corral_source_split_7862:
    assume {:verifier.code 0} true;
    $i8 := $lshr.i64($i4, $i7);
    goto corral_source_split_7863;

  corral_source_split_7863:
    assume {:verifier.code 0} true;
    $i9 := $trunc.i64.i32($i8);
    goto corral_source_split_7864;

  corral_source_split_7864:
    assume {:verifier.code 0} true;
    $i10 := $and.i32($i9, 1);
    goto corral_source_split_7865;

  corral_source_split_7865:
    assume {:verifier.code 0} true;
    $r := $i10;
    return;
}



const oxu210_hcd_irq: ref;

axiom oxu210_hcd_irq == $sub.ref(0, 388605);

procedure oxu210_hcd_irq($p0: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.22, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.63, $M.0, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $CurrAddr, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu210_hcd_irq($p0: ref) returns ($r: i32)
{
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $i13: i32;
  var $i14: i1;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $i21: i24;
  var $i22: i24;
  var $i23: i24;
  var $p24: ref;
  var $p25: ref;
  var $i26: i8;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i1;
  var $p31: ref;
  var $p33: ref;
  var $p34: ref;
  var $i36: i32;
  var $i37: i1;
  var $p38: ref;
  var $p40: ref;
  var $i41: i32;
  var $i42: i1;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i1;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $i57: i32;
  var $i58: i1;
  var $i59: i32;
  var $i60: i64;
  var $i61: i64;
  var $i62: i1;
  var $i63: i32;
  var $i64: i32;
  var $i65: i1;
  var $p66: ref;
  var $i67: i8;
  var $i68: i8;
  var $i69: i8;
  var $i70: i32;
  var $i71: i32;
  var $i72: i1;
  var $p73: ref;
  var $i74: i32;
  var $i75: i32;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i81: i32;
  var $i82: i1;
  var $i83: i32;
  var $i84: i1;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $i92: i32;
  var $i93: i32;
  var $i94: i1;
  var $i95: i32;
  var $i96: i1;
  var $i97: i32;
  var $i98: i1;
  var $i99: i64;
  var $p101: ref;
  var $i102: i64;
  var $i103: i1;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $i107: i64;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $i116: i24;
  var $i117: i24;
  var $i118: i24;
  var $p119: ref;
  var $p120: ref;
  var $i121: i8;
  var $i122: i64;
  var $i123: i64;
  var $i124: i64;
  var $i125: i1;
  var $p126: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i32;
  var $p131: ref;
  var $i132: i64;
  var $p134: ref;
  var $i135: i64;
  var $i85: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i1;
  var $i140: i32;
  var $i141: i64;
  var $i142: i64;
  var $i143: i1;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $i148: i32;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $i153: i32;
  var $p154: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i24;
  var $i163: i24;
  var $i164: i24;
  var $p165: ref;
  var $p166: ref;
  var $i167: i8;
  var $i168: i64;
  var $i169: i64;
  var $i170: i64;
  var $i171: i1;
  var $p172: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $i185: i24;
  var $i186: i24;
  var $i187: i24;
  var $p188: ref;
  var $p189: ref;
  var $i190: i8;
  var $i191: i64;
  var $i192: i64;
  var $i193: i64;
  var $i194: i1;
  var $p195: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $i200: i32;
  var $i201: i1;
  var $p202: ref;
  var $p204: ref;
  var $p205: ref;
  var $i35: i32;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i32;
  var $i212: i32;
  var $i213: i32;
  var $i214: i32;
  var $i215: i1;
  var $p216: ref;
  var $i217: i32;
  var $i218: i1;
  var $i39: i32;
  var vslice_dummy_var_106: i32;
  var vslice_dummy_var_107: i32;
  var vslice_dummy_var_108: i32;
  var vslice_dummy_var_109: i32;
  var vslice_dummy_var_110: i32;

  $bb0:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    call {:si_unique_call 1409} $p1 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1410} $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1411} $p3 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1412} $p4 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1413} $p5 := $alloc($mul.ref(80, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1414} $p6 := $alloc($mul.ref(40, $zext.i32.i64(1)));
    goto corral_source_split_7867;

  corral_source_split_7867:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1415} $p7 := hcd_to_oxu($p0);
    goto corral_source_split_7868;

  corral_source_split_7868:
    assume {:verifier.code 0} true;
    $p8 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_7869;

  corral_source_split_7869:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1416} spin_lock($p8);
    goto corral_source_split_7870;

  corral_source_split_7870:
    assume {:verifier.code 0} true;
    $p9 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7871;

  corral_source_split_7871:
    assume {:verifier.code 0} true;
    $p10 := $load.ref($M.0, $p9);
    goto corral_source_split_7872;

  corral_source_split_7872:
    assume {:verifier.code 0} true;
    $p11 := $add.ref($add.ref($p10, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_7873;

  corral_source_split_7873:
    assume {:verifier.code 0} true;
    $p12 := $bitcast.ref.ref($p11);
    goto corral_source_split_7874;

  corral_source_split_7874:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1417} $i13 := readl($p12);
    goto SeqInstr_427, SeqInstr_428;

  SeqInstr_428:
    assume assertsPassed;
    goto SeqInstr_429;

  SeqInstr_429:
    call {:si_unique_call 1418} {:cexpr "status"} boogie_si_record_i32($i13);
    goto corral_source_split_7875;

  corral_source_split_7875:
    assume {:verifier.code 0} true;
    $i14 := $eq.i32($i13, $sub.i32(0, 1));
    goto corral_source_split_7876;

  corral_source_split_7876:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    $i36 := $and.i32($i13, 55);
    call {:si_unique_call 1426} {:cexpr "status"} boogie_si_record_i32($i36);
    goto corral_source_split_7917;

  corral_source_split_7917:
    assume {:verifier.code 0} true;
    $i37 := $eq.i32($i36, 0);
    goto corral_source_split_7918;

  corral_source_split_7918:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  $bb9:
    assume !($i37 == 1);
    goto corral_source_split_7924;

  corral_source_split_7924:
    assume {:verifier.code 0} true;
    $p40 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_7925;

  corral_source_split_7925:
    assume {:verifier.code 0} true;
    $i41 := $load.i32($M.0, $p40);
    goto corral_source_split_7926;

  corral_source_split_7926:
    assume {:verifier.code 0} true;
    $i42 := $eq.i32($i41, 0);
    goto corral_source_split_7927;

  corral_source_split_7927:
    assume {:verifier.code 0} true;
    $i43 := $zext.i1.i32($i42);
    goto corral_source_split_7928;

  corral_source_split_7928:
    assume {:verifier.code 0} true;
    $i44 := $sext.i32.i64($i43);
    goto corral_source_split_7929;

  corral_source_split_7929:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1428} $i45 := ldv__builtin_expect($i44, 0);
    call {:si_unique_call 1429} {:cexpr "tmp___2"} boogie_si_record_i64($i45);
    goto corral_source_split_7930;

  corral_source_split_7930:
    assume {:verifier.code 0} true;
    $i46 := $ne.i64($i45, 0);
    goto corral_source_split_7931;

  corral_source_split_7931:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11, $bb12;

  $bb12:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb14:
    assume {:verifier.code 0} true;
    $p48 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7939;

  corral_source_split_7939:
    assume {:verifier.code 0} true;
    $p49 := $load.ref($M.0, $p48);
    goto corral_source_split_7940;

  corral_source_split_7940:
    assume {:verifier.code 0} true;
    $p50 := $add.ref($add.ref($p49, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_7941;

  corral_source_split_7941:
    assume {:verifier.code 0} true;
    $p51 := $bitcast.ref.ref($p50);
    goto corral_source_split_7942;

  corral_source_split_7942:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1431} writel($i36, $p51);
    goto corral_source_split_7943;

  corral_source_split_7943:
    assume {:verifier.code 0} true;
    $p52 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7944;

  corral_source_split_7944:
    assume {:verifier.code 0} true;
    $p53 := $load.ref($M.0, $p52);
    goto corral_source_split_7945;

  corral_source_split_7945:
    assume {:verifier.code 0} true;
    $p54 := $add.ref($add.ref($p53, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_7946;

  corral_source_split_7946:
    assume {:verifier.code 0} true;
    $p55 := $bitcast.ref.ref($p54);
    goto corral_source_split_7947;

  corral_source_split_7947:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1432} vslice_dummy_var_107 := readl($p55);
    goto SeqInstr_433, SeqInstr_434;

  SeqInstr_434:
    assume assertsPassed;
    goto SeqInstr_435;

  SeqInstr_435:
    goto corral_source_split_7948;

  corral_source_split_7948:
    assume {:verifier.code 0} true;
    $i57 := $and.i32($i36, 3);
    goto corral_source_split_7949;

  corral_source_split_7949:
    assume {:verifier.code 0} true;
    $i58 := $ne.i32($i57, 0);
    goto corral_source_split_7950;

  corral_source_split_7950:
    assume {:verifier.code 0} true;
    $i59 := $zext.i1.i32($i58);
    goto corral_source_split_7951;

  corral_source_split_7951:
    assume {:verifier.code 0} true;
    $i60 := $sext.i32.i64($i59);
    goto corral_source_split_7952;

  corral_source_split_7952:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1433} $i61 := ldv__builtin_expect($i60, 1);
    call {:si_unique_call 1434} {:cexpr "tmp___3"} boogie_si_record_i64($i61);
    goto corral_source_split_7953;

  corral_source_split_7953:
    assume {:verifier.code 0} true;
    $i62 := $ne.i64($i61, 0);
    goto corral_source_split_7954;

  corral_source_split_7954:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb16:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := 0;
    goto $bb17;

  $bb17:
    assume {:verifier.code 0} true;
    goto corral_source_split_7958;

  corral_source_split_7958:
    assume {:verifier.code 0} true;
    $i64 := $and.i32($i36, 32);
    goto corral_source_split_7959;

  corral_source_split_7959:
    assume {:verifier.code 0} true;
    $i65 := $ne.i32($i64, 0);
    goto corral_source_split_7960;

  corral_source_split_7960:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  $bb19:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i70 := $i63;
    goto $bb20;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_7969;

  corral_source_split_7969:
    assume {:verifier.code 0} true;
    $i71 := $and.i32($i36, 4);
    goto corral_source_split_7970;

  corral_source_split_7970:
    assume {:verifier.code 0} true;
    $i72 := $ne.i32($i71, 0);
    goto corral_source_split_7971;

  corral_source_split_7971:
    assume {:verifier.code 0} true;
    assume {:branchcond $i72} true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i72 == 1);
    assume {:verifier.code 0} true;
    $i137 := 0;
    goto $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    goto corral_source_split_8063;

  corral_source_split_8063:
    assume {:verifier.code 0} true;
    $i138 := $and.i32($i36, 16);
    goto corral_source_split_8064;

  corral_source_split_8064:
    assume {:verifier.code 0} true;
    $i139 := $ne.i32($i138, 0);
    goto corral_source_split_8065;

  corral_source_split_8065:
    assume {:verifier.code 0} true;
    $i140 := $zext.i1.i32($i139);
    goto corral_source_split_8066;

  corral_source_split_8066:
    assume {:verifier.code 0} true;
    $i141 := $sext.i32.i64($i140);
    goto corral_source_split_8067;

  corral_source_split_8067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1450} $i142 := ldv__builtin_expect($i141, 0);
    call {:si_unique_call 1451} {:cexpr "tmp___16"} boogie_si_record_i64($i142);
    goto corral_source_split_8068;

  corral_source_split_8068:
    assume {:verifier.code 0} true;
    $i143 := $ne.i64($i142, 0);
    goto corral_source_split_8069;

  corral_source_split_8069:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    $i213, $i214 := $i137, $i70;
    goto $bb59;

  $bb59:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8157;

  corral_source_split_8157:
    assume {:verifier.code 0} true;
    $i215 := $ne.i32($i214, 0);
    goto corral_source_split_8158;

  corral_source_split_8158:
    assume {:verifier.code 0} true;
    assume {:branchcond $i215} true;
    goto $bb60, $bb61;

  $bb61:
    assume !($i215 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb62:
    assume {:verifier.code 0} true;
    $p216 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_8163;

  corral_source_split_8163:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1469} spin_unlock($p216);
    goto corral_source_split_8164;

  corral_source_split_8164:
    assume {:verifier.code 0} true;
    $i217 := $and.i32($i213, 4);
    goto corral_source_split_8165;

  corral_source_split_8165:
    assume {:verifier.code 0} true;
    $i218 := $ne.i32($i217, 0);
    goto corral_source_split_8166;

  corral_source_split_8166:
    assume {:verifier.code 0} true;
    assume {:branchcond $i218} true;
    goto $bb63, $bb64;

  $bb64:
    assume !($i218 == 1);
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb65:
    assume {:verifier.code 0} true;
    $i39 := 1;
    goto $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_7933;

  corral_source_split_7933:
    assume {:verifier.code 0} true;
    $r := $i39;
    return;

  $bb63:
    assume $i218 == 1;
    goto corral_source_split_8168;

  corral_source_split_8168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1470} usb_hcd_poll_rh_status($p0);
    goto corral_source_split_8169;

  corral_source_split_8169:
    assume {:verifier.code 0} true;
    goto $bb65;

  $bb60:
    assume $i215 == 1;
    goto corral_source_split_8160;

  corral_source_split_8160:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1468} ehci_work($p7);
    goto SeqInstr_448, SeqInstr_449;

  SeqInstr_449:
    assume assertsPassed;
    goto SeqInstr_450;

  SeqInstr_450:
    goto corral_source_split_8161;

  corral_source_split_8161:
    assume {:verifier.code 0} true;
    goto $bb62;

  SeqInstr_448:
    assume !assertsPassed;
    return;

  $bb48:
    assume $i143 == 1;
    goto corral_source_split_8071;

  corral_source_split_8071:
    assume {:verifier.code 0} true;
    $p144 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_8072;

  corral_source_split_8072:
    assume {:verifier.code 0} true;
    $p145 := $load.ref($M.0, $p144);
    goto corral_source_split_8073;

  corral_source_split_8073:
    assume {:verifier.code 0} true;
    $p146 := $add.ref($add.ref($p145, $mul.ref(0, 68)), $mul.ref(4, 1));
    goto corral_source_split_8074;

  corral_source_split_8074:
    assume {:verifier.code 0} true;
    $p147 := $bitcast.ref.ref($p146);
    goto corral_source_split_8075;

  corral_source_split_8075:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1452} $i148 := readl($p147);
    goto SeqInstr_442, SeqInstr_443;

  SeqInstr_443:
    assume assertsPassed;
    goto SeqInstr_444;

  SeqInstr_444:
    call {:si_unique_call 1453} {:cexpr "status"} boogie_si_record_i32($i148);
    goto corral_source_split_8076;

  corral_source_split_8076:
    assume {:verifier.code 0} true;
    $p149 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_8077;

  corral_source_split_8077:
    assume {:verifier.code 0} true;
    $p150 := $load.ref($M.0, $p149);
    goto corral_source_split_8078;

  corral_source_split_8078:
    assume {:verifier.code 0} true;
    $p151 := $add.ref($add.ref($p150, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_8079;

  corral_source_split_8079:
    assume {:verifier.code 0} true;
    $p152 := $bitcast.ref.ref($p151);
    goto corral_source_split_8080;

  corral_source_split_8080:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1454} $i153 := readl($p152);
    goto SeqInstr_445, SeqInstr_446;

  SeqInstr_446:
    assume assertsPassed;
    goto SeqInstr_447;

  SeqInstr_447:
    call {:si_unique_call 1455} {:cexpr "tmp___10"} boogie_si_record_i32($i153);
    goto corral_source_split_8081;

  corral_source_split_8081:
    assume {:verifier.code 0} true;
    $p154 := $bitcast.ref.ref($p3);
    goto corral_source_split_8082;

  corral_source_split_8082:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1456} vslice_dummy_var_109 := dbg_command_buf($p154, 80, .str.63, $i153);
    goto corral_source_split_8083;

  corral_source_split_8083:
    assume {:verifier.code 0} true;
    $p156 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8084;

  corral_source_split_8084:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p156, .str.2);
    goto corral_source_split_8085;

  corral_source_split_8085:
    assume {:verifier.code 0} true;
    $p157 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8086;

  corral_source_split_8086:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p157, .str.60);
    goto corral_source_split_8087;

  corral_source_split_8087:
    assume {:verifier.code 0} true;
    $p158 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8088;

  corral_source_split_8088:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p158, .str);
    goto corral_source_split_8089;

  corral_source_split_8089:
    assume {:verifier.code 0} true;
    $p159 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8090;

  corral_source_split_8090:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p159, .str.20);
    goto corral_source_split_8091;

  corral_source_split_8091:
    assume {:verifier.code 0} true;
    $p160 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8092;

  corral_source_split_8092:
    assume {:verifier.code 0} true;
    $p161 := $bitcast.ref.ref($p160);
    goto corral_source_split_8093;

  corral_source_split_8093:
    assume {:verifier.code 0} true;
    $i162 := $load.i24($M.6, $p161);
    goto corral_source_split_8094;

  corral_source_split_8094:
    assume {:verifier.code 0} true;
    $i163 := $and.i24($i162, $sub.i24(0, 262144));
    goto corral_source_split_8095;

  corral_source_split_8095:
    assume {:verifier.code 0} true;
    $i164 := $or.i24($i163, 2518);
    goto corral_source_split_8096;

  corral_source_split_8096:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p161, $i164);
    goto corral_source_split_8097;

  corral_source_split_8097:
    assume {:verifier.code 0} true;
    $p165 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8098;

  corral_source_split_8098:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p165, 0);
    goto corral_source_split_8099;

  corral_source_split_8099:
    assume {:verifier.code 0} true;
    $p166 := $add.ref($add.ref($p4, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8100;

  corral_source_split_8100:
    assume {:verifier.code 0} true;
    $i167 := $load.i8($M.7, $p166);
    goto corral_source_split_8101;

  corral_source_split_8101:
    assume {:verifier.code 0} true;
    $i168 := $zext.i8.i64($i167);
    goto corral_source_split_8102;

  corral_source_split_8102:
    assume {:verifier.code 0} true;
    $i169 := $and.i64($i168, 1);
    goto corral_source_split_8103;

  corral_source_split_8103:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1457} $i170 := ldv__builtin_expect($i169, 0);
    call {:si_unique_call 1458} {:cexpr "tmp___12"} boogie_si_record_i64($i170);
    goto corral_source_split_8104;

  corral_source_split_8104:
    assume {:verifier.code 0} true;
    $i171 := $ne.i64($i170, 0);
    goto corral_source_split_8105;

  corral_source_split_8105:
    assume {:verifier.code 0} true;
    assume {:branchcond $i171} true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i171 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    $p177 := $bitcast.ref.ref($p5);
    goto corral_source_split_8114;

  corral_source_split_8114:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1461} vslice_dummy_var_110 := dbg_status_buf($p177, 80, .str.63, $i148);
    goto corral_source_split_8115;

  corral_source_split_8115:
    assume {:verifier.code 0} true;
    $p179 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8116;

  corral_source_split_8116:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p179, .str.2);
    goto corral_source_split_8117;

  corral_source_split_8117:
    assume {:verifier.code 0} true;
    $p180 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8118;

  corral_source_split_8118:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p180, .str.60);
    goto corral_source_split_8119;

  corral_source_split_8119:
    assume {:verifier.code 0} true;
    $p181 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8120;

  corral_source_split_8120:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p181, .str);
    goto corral_source_split_8121;

  corral_source_split_8121:
    assume {:verifier.code 0} true;
    $p182 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8122;

  corral_source_split_8122:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p182, .str.20);
    goto corral_source_split_8123;

  corral_source_split_8123:
    assume {:verifier.code 0} true;
    $p183 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8124;

  corral_source_split_8124:
    assume {:verifier.code 0} true;
    $p184 := $bitcast.ref.ref($p183);
    goto corral_source_split_8125;

  corral_source_split_8125:
    assume {:verifier.code 0} true;
    $i185 := $load.i24($M.6, $p184);
    goto corral_source_split_8126;

  corral_source_split_8126:
    assume {:verifier.code 0} true;
    $i186 := $and.i24($i185, $sub.i24(0, 262144));
    goto corral_source_split_8127;

  corral_source_split_8127:
    assume {:verifier.code 0} true;
    $i187 := $or.i24($i186, 2519);
    goto corral_source_split_8128;

  corral_source_split_8128:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p184, $i187);
    goto corral_source_split_8129;

  corral_source_split_8129:
    assume {:verifier.code 0} true;
    $p188 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8130;

  corral_source_split_8130:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p188, 0);
    goto corral_source_split_8131;

  corral_source_split_8131:
    assume {:verifier.code 0} true;
    $p189 := $add.ref($add.ref($p6, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8132;

  corral_source_split_8132:
    assume {:verifier.code 0} true;
    $i190 := $load.i8($M.7, $p189);
    goto corral_source_split_8133;

  corral_source_split_8133:
    assume {:verifier.code 0} true;
    $i191 := $zext.i8.i64($i190);
    goto corral_source_split_8134;

  corral_source_split_8134:
    assume {:verifier.code 0} true;
    $i192 := $and.i64($i191, 1);
    goto corral_source_split_8135;

  corral_source_split_8135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1462} $i193 := ldv__builtin_expect($i192, 0);
    call {:si_unique_call 1463} {:cexpr "tmp___14"} boogie_si_record_i64($i193);
    goto corral_source_split_8136;

  corral_source_split_8136:
    assume {:verifier.code 0} true;
    $i194 := $ne.i64($i193, 0);
    goto corral_source_split_8137;

  corral_source_split_8137:
    assume {:verifier.code 0} true;
    assume {:branchcond $i194} true;
    goto $bb53, $bb54;

  $bb54:
    assume !($i194 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb55:
    assume {:verifier.code 0} true;
    $i200 := $and.i32($i148, 4096);
    goto corral_source_split_8146;

  corral_source_split_8146:
    assume {:verifier.code 0} true;
    $i201 := $ne.i32($i200, 0);
    goto corral_source_split_8147;

  corral_source_split_8147:
    assume {:verifier.code 0} true;
    assume {:branchcond $i201} true;
    goto $bb56, $bb57;

  $bb57:
    assume !($i201 == 1);
    assume {:verifier.code 0} true;
    $i211, $i212 := $i137, $i70;
    goto $bb58;

  $bb58:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_8155;

  corral_source_split_8155:
    assume {:verifier.code 0} true;
    $i213, $i214 := $i211, $i212;
    goto $bb59;

  $bb56:
    assume $i201 == 1;
    goto corral_source_split_8149;

  corral_source_split_8149:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1466} $p202 := oxu_to_hcd($p7);
    goto corral_source_split_8150;

  corral_source_split_8150:
    assume {:verifier.code 0} true;
    $p204 := $add.ref($add.ref($add.ref($p202, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8151;

  corral_source_split_8151:
    assume {:verifier.code 0} true;
    $p205 := $load.ref($M.84, $p204);
    goto corral_source_split_8152;

  corral_source_split_8152:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1467} dev_err.ref.ref($p205, .str.64);
    goto corral_source_split_8153;

  corral_source_split_8153:
    assume {:verifier.code 0} true;
    $i35 := $i137;
    goto $bb6;

  $bb6:
    assume {:verifier.code 0} true;
    goto corral_source_split_7908;

  corral_source_split_7908:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1423} vslice_dummy_var_106 := ehci_reset($p7);
    goto SeqInstr_430, SeqInstr_431;

  SeqInstr_431:
    assume assertsPassed;
    goto SeqInstr_432;

  SeqInstr_432:
    goto corral_source_split_7909;

  corral_source_split_7909:
    assume {:verifier.code 0} true;
    $p207 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7910;

  corral_source_split_7910:
    assume {:verifier.code 0} true;
    $p208 := $load.ref($M.0, $p207);
    goto corral_source_split_7911;

  corral_source_split_7911:
    assume {:verifier.code 0} true;
    $p209 := $add.ref($add.ref($p208, $mul.ref(0, 68)), $mul.ref(64, 1));
    goto corral_source_split_7912;

  corral_source_split_7912:
    assume {:verifier.code 0} true;
    $p210 := $bitcast.ref.ref($p209);
    goto corral_source_split_7913;

  corral_source_split_7913:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1424} writel(0, $p210);
    goto corral_source_split_7914;

  corral_source_split_7914:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1425} usb_hc_died($p0);
    goto corral_source_split_7915;

  corral_source_split_7915:
    assume {:verifier.code 0} true;
    $i211, $i212 := $i35, 1;
    goto $bb58;

  SeqInstr_430:
    assume !assertsPassed;
    return;

  $bb53:
    assume $i194 == 1;
    goto corral_source_split_8139;

  corral_source_split_8139:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1464} $p195 := oxu_to_hcd($p7);
    goto corral_source_split_8140;

  corral_source_split_8140:
    assume {:verifier.code 0} true;
    $p197 := $add.ref($add.ref($add.ref($p195, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8141;

  corral_source_split_8141:
    assume {:verifier.code 0} true;
    $p198 := $load.ref($M.83, $p197);
    goto corral_source_split_8142;

  corral_source_split_8142:
    assume {:verifier.code 0} true;
    $p199 := $bitcast.ref.ref($p5);
    goto corral_source_split_8143;

  corral_source_split_8143:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1465} __dynamic_dev_dbg.ref.ref.ref.ref($p6, $p198, .str.20, $p199);
    goto corral_source_split_8144;

  corral_source_split_8144:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb50:
    assume $i171 == 1;
    goto corral_source_split_8107;

  corral_source_split_8107:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1459} $p172 := oxu_to_hcd($p7);
    goto corral_source_split_8108;

  corral_source_split_8108:
    assume {:verifier.code 0} true;
    $p174 := $add.ref($add.ref($add.ref($p172, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8109;

  corral_source_split_8109:
    assume {:verifier.code 0} true;
    $p175 := $load.ref($M.82, $p174);
    goto corral_source_split_8110;

  corral_source_split_8110:
    assume {:verifier.code 0} true;
    $p176 := $bitcast.ref.ref($p3);
    goto corral_source_split_8111;

  corral_source_split_8111:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1460} __dynamic_dev_dbg.ref.ref.ref.ref($p4, $p175, .str.20, $p176);
    goto corral_source_split_8112;

  corral_source_split_8112:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_445:
    assume !assertsPassed;
    return;

  SeqInstr_442:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i72 == 1;
    goto corral_source_split_7973;

  corral_source_split_7973:
    assume {:verifier.code 0} true;
    $p73 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(296, 1));
    goto corral_source_split_7974;

  corral_source_split_7974:
    assume {:verifier.code 0} true;
    $i74 := $load.i32($M.0, $p73);
    goto corral_source_split_7975;

  corral_source_split_7975:
    assume {:verifier.code 0} true;
    $i75 := $and.i32($i74, 15);
    call {:si_unique_call 1435} {:cexpr "i"} boogie_si_record_i32($i75);
    goto corral_source_split_7976;

  corral_source_split_7976:
    assume {:verifier.code 0} true;
    $p76 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7977;

  corral_source_split_7977:
    assume {:verifier.code 0} true;
    $p77 := $load.ref($M.0, $p76);
    goto corral_source_split_7978;

  corral_source_split_7978:
    assume {:verifier.code 0} true;
    $p78 := $add.ref($add.ref($p77, $mul.ref(0, 68)), $mul.ref(0, 1));
    goto corral_source_split_7979;

  corral_source_split_7979:
    assume {:verifier.code 0} true;
    $p79 := $bitcast.ref.ref($p78);
    goto corral_source_split_7980;

  corral_source_split_7980:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1436} $i80 := readl($p79);
    goto SeqInstr_436, SeqInstr_437;

  SeqInstr_437:
    assume assertsPassed;
    goto SeqInstr_438;

  SeqInstr_438:
    call {:si_unique_call 1437} {:cexpr "tmp___4"} boogie_si_record_i32($i80);
    goto corral_source_split_7981;

  corral_source_split_7981:
    assume {:verifier.code 0} true;
    $i81 := $and.i32($i80, 1);
    goto corral_source_split_7982;

  corral_source_split_7982:
    assume {:verifier.code 0} true;
    $i82 := $eq.i32($i81, 0);
    goto corral_source_split_7983;

  corral_source_split_7983:
    assume {:verifier.code 0} true;
    assume {:branchcond $i82} true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i82 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    $i83 := $sub.i32($i75, 1);
    call {:si_unique_call 1439} {:cexpr "i"} boogie_si_record_i32($i83);
    goto corral_source_split_7988;

  corral_source_split_7988:
    assume {:verifier.code 0} true;
    $i84 := $ne.i32($i75, 0);
    goto corral_source_split_7989;

  corral_source_split_7989:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    assume !($i84 == 1);
    goto $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    goto $bb46;

  $bb46:
    assume {:verifier.code 0} true;
    $i137 := $i36;
    goto $bb47;

  $bb26:
    assume $i84 == 1;
    goto corral_source_split_7991;

  corral_source_split_7991:
    assume {:verifier.code 0} true;
    $i85 := $i83;
    goto $bb29;

  $bb29:
    call $p86, $p87, $p88, $p89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $i116, $i117, $i118, $p119, $p120, $i121, $i122, $i123, $i124, $i125, $p126, $p128, $p129, $i130, $p131, $i132, $p134, $i135, $i85, vslice_dummy_var_108 := oxu210_hcd_irq_loop_$bb29($p0, $p2, $p7, $p86, $p87, $p88, $p89, $i90, $p91, $i92, $i93, $i94, $i95, $i96, $i97, $i98, $i99, $p101, $i102, $i103, $i104, $i105, $i106, $i107, $p109, $p110, $p111, $p112, $p113, $p114, $p115, $i116, $i117, $i118, $p119, $p120, $i121, $i122, $i123, $i124, $i125, $p126, $p128, $p129, $i130, $p131, $i132, $p134, $i135, $i85, vslice_dummy_var_108);
    goto $bb29_last;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb30:
    assume {:verifier.code 0} true;
    $p86 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7995;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    $p87 := $load.ref($M.0, $p86);
    goto corral_source_split_7996;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    $p88 := $add.ref($add.ref($p87, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_7997;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    $p89 := $bitcast.ref.ref($p88);
    goto corral_source_split_7998;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    $i90 := $zext.i32.i64($i85);
    goto corral_source_split_7999;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    $p91 := $add.ref($p89, $mul.ref($i90, 1));
    goto corral_source_split_8000;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} $i92 := readl($p91);
    goto SeqInstr_439, SeqInstr_440;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  SeqInstr_441:
    call {:si_unique_call 1441} {:cexpr "tmp___5"} boogie_si_record_i32($i92);
    goto corral_source_split_8001;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    $i93 := $and.i32($i92, 8192);
    goto corral_source_split_8002;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    $i94 := $ne.i32($i93, 0);
    goto corral_source_split_8003;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  $bb32:
    assume !($i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb36:
    assume {:verifier.code 0} true;
    $i97 := $and.i32($i92, 64);
    goto corral_source_split_8012;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 0);
    goto corral_source_split_8013;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  $bb39:
    assume !($i98 == 1);
    goto corral_source_split_8015;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    $i99 := $zext.i32.i64($i85);
    goto corral_source_split_8016;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    $p101 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i99, 8));
    goto corral_source_split_8017;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    $i102 := $load.i64($M.0, $p101);
    goto corral_source_split_8018;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    $i103 := $ne.i64($i102, 0);
    goto corral_source_split_8019;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} $i104 := msecs_to_jiffies(40);
    call {:si_unique_call 1444} {:cexpr "tmp___6"} boogie_si_record_i64($i104);
    goto corral_source_split_8021;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    $i105 := $load.i64($M.0, jiffies);
    goto corral_source_split_8022;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    $i106 := $add.i64($i104, $i105);
    goto corral_source_split_8023;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    $i107 := $zext.i32.i64($i85);
    goto corral_source_split_8024;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    $p109 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i107, 8));
    goto corral_source_split_8025;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, $p109, $i106);
    goto corral_source_split_8026;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    $p110 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8027;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p110, .str.2);
    goto corral_source_split_8028;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    $p111 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8029;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p111, .str.60);
    goto corral_source_split_8030;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    $p112 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8031;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p112, .str);
    goto corral_source_split_8032;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    $p113 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8033;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p113, .str.62);
    goto corral_source_split_8034;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    $p114 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8035;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    $p115 := $bitcast.ref.ref($p114);
    goto corral_source_split_8036;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    $i116 := $load.i24($M.6, $p115);
    goto corral_source_split_8037;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    $i117 := $and.i24($i116, $sub.i24(0, 262144));
    goto corral_source_split_8038;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    $i118 := $or.i24($i117, 2509);
    goto corral_source_split_8039;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p115, $i118);
    goto corral_source_split_8040;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    $p119 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8041;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p119, 0);
    goto corral_source_split_8042;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    $p120 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8043;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    $i121 := $load.i8($M.7, $p120);
    goto corral_source_split_8044;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    $i122 := $zext.i8.i64($i121);
    goto corral_source_split_8045;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    $i123 := $and.i64($i122, 1);
    goto corral_source_split_8046;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} $i124 := ldv__builtin_expect($i123, 0);
    call {:si_unique_call 1446} {:cexpr "tmp___8"} boogie_si_record_i64($i124);
    goto corral_source_split_8047;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    $i125 := $ne.i64($i124, 0);
    goto corral_source_split_8048;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  $bb44:
    assume !($i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb45:
    assume {:verifier.code 0} true;
    $p131 := $add.ref($add.ref($p0, $mul.ref(0, 968)), $mul.ref(328, 1));
    goto corral_source_split_8057;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    $i132 := $zext.i32.i64($i85);
    goto corral_source_split_8058;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    $p134 := $add.ref($add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref($i132, 8));
    goto corral_source_split_8059;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    $i135 := $load.i64($M.0, $p134);
    goto corral_source_split_8060;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} vslice_dummy_var_108 := ldv_mod_timer_26($p131, $i135);
    goto corral_source_split_8061;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb33:
    assume {:verifier.code 0} true;
    $i95 := $sub.i32($i85, 1);
    call {:si_unique_call 1442} {:cexpr "i"} boogie_si_record_i32($i95);
    goto corral_source_split_8007;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    $i96 := $ne.i32($i85, 0);
    goto corral_source_split_8008;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i96 == 1);
    goto corral_source_split_8010;

  corral_source_split_8010:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb34:
    assume $i96 == 1;
    assume {:verifier.code 0} true;
    $i85 := $i95;
    goto $bb34_dummy;

  $bb43:
    assume $i125 == 1;
    goto corral_source_split_8050;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} $p126 := oxu_to_hcd($p7);
    goto corral_source_split_8051;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    $p128 := $add.ref($add.ref($add.ref($p126, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8052;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    $p129 := $load.ref($M.81, $p128);
    goto corral_source_split_8053;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    $i130 := $add.i32($i85, 1);
    goto corral_source_split_8054;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} __dynamic_dev_dbg.ref.ref.ref.i32($p2, $p129, .str.62, $i130);
    goto corral_source_split_8055;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb40:
    assume {:verifier.code 0} true;
    assume $i103 == 1;
    goto $bb38;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume $i98 == 1;
    goto $bb38;

  $bb31:
    assume $i94 == 1;
    goto corral_source_split_8005;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb33;

  SeqInstr_439:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i82 == 1;
    goto corral_source_split_7985;

  corral_source_split_7985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1438} usb_hcd_resume_root_hub($p0);
    goto corral_source_split_7986;

  corral_source_split_7986:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_436:
    assume !assertsPassed;
    return;

  $bb18:
    assume $i65 == 1;
    goto corral_source_split_7962;

  corral_source_split_7962:
    assume {:verifier.code 0} true;
    $p66 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(392, 1));
    goto corral_source_split_7963;

  corral_source_split_7963:
    assume {:verifier.code 0} true;
    $i67 := $load.i8($M.0, $p66);
    goto corral_source_split_7964;

  corral_source_split_7964:
    assume {:verifier.code 0} true;
    $i68 := $and.i8($i67, $sub.i8(0, 2));
    goto corral_source_split_7965;

  corral_source_split_7965:
    assume {:verifier.code 0} true;
    $i69 := $or.i8($i68, 1);
    goto corral_source_split_7966;

  corral_source_split_7966:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, $p66, $i69);
    goto corral_source_split_7967;

  corral_source_split_7967:
    assume {:verifier.code 0} true;
    $i70 := 1;
    goto $bb20;

  $bb15:
    assume $i62 == 1;
    goto corral_source_split_7956;

  corral_source_split_7956:
    assume {:verifier.code 0} true;
    $i63 := 1;
    goto $bb17;

  SeqInstr_433:
    assume !assertsPassed;
    return;

  $bb11:
    assume $i46 == 1;
    goto corral_source_split_7935;

  corral_source_split_7935:
    assume {:verifier.code 0} true;
    $p47 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_7936;

  corral_source_split_7936:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1430} spin_unlock($p47);
    goto corral_source_split_7937;

  corral_source_split_7937:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb10;

  $bb8:
    assume $i37 == 1;
    goto corral_source_split_7920;

  corral_source_split_7920:
    assume {:verifier.code 0} true;
    $p38 := $add.ref($add.ref($p7, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_7921;

  corral_source_split_7921:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1427} spin_unlock($p38);
    goto corral_source_split_7922;

  corral_source_split_7922:
    assume {:verifier.code 0} true;
    $i39 := 0;
    goto $bb10;

  $bb1:
    assume $i14 == 1;
    goto corral_source_split_7878;

  corral_source_split_7878:
    assume {:verifier.code 0} true;
    $p15 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_7879;

  corral_source_split_7879:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, $p15, .str.2);
    goto corral_source_split_7880;

  corral_source_split_7880:
    assume {:verifier.code 0} true;
    $p16 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_7881;

  corral_source_split_7881:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, $p16, .str.60);
    goto corral_source_split_7882;

  corral_source_split_7882:
    assume {:verifier.code 0} true;
    $p17 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_7883;

  corral_source_split_7883:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, $p17, .str);
    goto corral_source_split_7884;

  corral_source_split_7884:
    assume {:verifier.code 0} true;
    $p18 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_7885;

  corral_source_split_7885:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, $p18, .str.61);
    goto corral_source_split_7886;

  corral_source_split_7886:
    assume {:verifier.code 0} true;
    $p19 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_7887;

  corral_source_split_7887:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p19);
    goto corral_source_split_7888;

  corral_source_split_7888:
    assume {:verifier.code 0} true;
    $i21 := $load.i24($M.6, $p20);
    goto corral_source_split_7889;

  corral_source_split_7889:
    assume {:verifier.code 0} true;
    $i22 := $and.i24($i21, $sub.i24(0, 262144));
    goto corral_source_split_7890;

  corral_source_split_7890:
    assume {:verifier.code 0} true;
    $i23 := $or.i24($i22, 2452);
    goto corral_source_split_7891;

  corral_source_split_7891:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, $p20, $i23);
    goto corral_source_split_7892;

  corral_source_split_7892:
    assume {:verifier.code 0} true;
    $p24 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7893;

  corral_source_split_7893:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, $p24, 0);
    goto corral_source_split_7894;

  corral_source_split_7894:
    assume {:verifier.code 0} true;
    $p25 := $add.ref($add.ref($p1, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_7895;

  corral_source_split_7895:
    assume {:verifier.code 0} true;
    $i26 := $load.i8($M.7, $p25);
    goto corral_source_split_7896;

  corral_source_split_7896:
    assume {:verifier.code 0} true;
    $i27 := $zext.i8.i64($i26);
    goto corral_source_split_7897;

  corral_source_split_7897:
    assume {:verifier.code 0} true;
    $i28 := $and.i64($i27, 1);
    goto corral_source_split_7898;

  corral_source_split_7898:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1419} $i29 := ldv__builtin_expect($i28, 0);
    call {:si_unique_call 1420} {:cexpr "tmp___1"} boogie_si_record_i64($i29);
    goto corral_source_split_7899;

  corral_source_split_7899:
    assume {:verifier.code 0} true;
    $i30 := $ne.i64($i29, 0);
    goto corral_source_split_7900;

  corral_source_split_7900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    $i35 := 0;
    goto $bb6;

  $bb3:
    assume $i30 == 1;
    goto corral_source_split_7902;

  corral_source_split_7902:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1421} $p31 := oxu_to_hcd($p7);
    goto corral_source_split_7903;

  corral_source_split_7903:
    assume {:verifier.code 0} true;
    $p33 := $add.ref($add.ref($add.ref($p31, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_7904;

  corral_source_split_7904:
    assume {:verifier.code 0} true;
    $p34 := $load.ref($M.80, $p33);
    goto corral_source_split_7905;

  corral_source_split_7905:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1422} __dynamic_dev_dbg.ref.ref.ref($p1, $p34, .str.61);
    goto corral_source_split_7906;

  corral_source_split_7906:
    assume {:verifier.code 0} true;
    goto $bb5;

  SeqInstr_427:
    assume !assertsPassed;
    return;

  $bb34_dummy:
    assume false;
    return;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_7993;
}



const usb_hcd_resume_root_hub: ref;

axiom usb_hcd_resume_root_hub == $sub.ref(0, 389637);

procedure usb_hcd_resume_root_hub($p0: ref);
  free requires assertsPassed;



implementation usb_hcd_resume_root_hub($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8171;

  corral_source_split_8171:
    assume {:verifier.code 0} true;
    return;
}



const ldv_mod_timer_26: ref;

axiom ldv_mod_timer_26 == $sub.ref(0, 390669);

procedure ldv_mod_timer_26($p0: ref, $i1: i64) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.28, $M.0, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33;



implementation ldv_mod_timer_26($p0: ref, $i1: i64) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1471} {:cexpr "ldv_mod_timer_26:arg:ldv_func_arg2"} boogie_si_record_i64($i1);
    goto corral_source_split_8173;

  corral_source_split_8173:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1472} $i2 := mod_timer($p0, $i1);
    call {:si_unique_call 1473} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_8174;

  corral_source_split_8174:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1474} activate_pending_timer_1($p0, $i1, 1);
    goto corral_source_split_8175;

  corral_source_split_8175:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const usb_hcd_poll_rh_status: ref;

axiom usb_hcd_poll_rh_status == $sub.ref(0, 391701);

procedure usb_hcd_poll_rh_status($p0: ref);
  free requires assertsPassed;



implementation usb_hcd_poll_rh_status($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8177;

  corral_source_split_8177:
    assume {:verifier.code 0} true;
    return;
}



const ldv_init_zalloc: ref;

axiom ldv_init_zalloc == $sub.ref(0, 392733);

procedure ldv_init_zalloc($i0: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation ldv_init_zalloc($i0: i64) returns ($r: ref)
{
  var $p1: ref;
  var $i2: i64;
  var $i3: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1475} {:cexpr "ldv_init_zalloc:arg:size"} boogie_si_record_i64($i0);
    goto corral_source_split_8179;

  corral_source_split_8179:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1476} $p1 := calloc(1, $i0);
    goto corral_source_split_8180;

  corral_source_split_8180:
    assume {:verifier.code 1} true;
    $i2 := $p2i.ref.i64($p1);
    goto corral_source_split_8181;

  corral_source_split_8181:
    assume {:verifier.code 1} true;
    $i3 := $ne.i64($i2, 0);
    goto corral_source_split_8182;

  corral_source_split_8182:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i3);
    goto corral_source_split_8183;

  corral_source_split_8183:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1477} __VERIFIER_assume($i4);
    goto corral_source_split_8184;

  corral_source_split_8184:
    assume {:verifier.code 0} true;
    $r := $p1;
    return;
}



const ldv_memset: ref;

axiom ldv_memset == $sub.ref(0, 393765);

procedure ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.85;



implementation ldv_memset($p0: ref, $i1: i32, $i2: i64) returns ($r: ref)
{
  var $i3: i8;
  var cmdloc_dummy_var_60: [ref]i8;
  var cmdloc_dummy_var_61: [ref]i8;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1478} {:cexpr "ldv_memset:arg:c"} boogie_si_record_i32($i1);
    call {:si_unique_call 1479} {:cexpr "ldv_memset:arg:n"} boogie_si_record_i64($i2);
    goto corral_source_split_8186;

  corral_source_split_8186:
    assume {:verifier.code 0} true;
    $i3 := $trunc.i32.i8($i1);
    goto corral_source_split_8187;

  corral_source_split_8187:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_60 := $M.85;
    call {:si_unique_call 1480} cmdloc_dummy_var_61 := $memset.i8(cmdloc_dummy_var_60, $p0, $i3, $i2, $zext.i32.i64(1), 0 == 1);
    $M.85 := cmdloc_dummy_var_61;
    goto corral_source_split_8188;

  corral_source_split_8188:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const timer_init_1: ref;

axiom timer_init_1 == $sub.ref(0, 394797);

procedure timer_init_1();
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.31, $M.33;



implementation timer_init_1()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8190;

  corral_source_split_8190:
    assume {:verifier.code 0} true;
    $M.27 := 0;
    call {:si_unique_call 1481} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    goto corral_source_split_8191;

  corral_source_split_8191:
    assume {:verifier.code 0} true;
    $M.29 := 0;
    call {:si_unique_call 1482} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    goto corral_source_split_8192;

  corral_source_split_8192:
    assume {:verifier.code 0} true;
    $M.31 := 0;
    call {:si_unique_call 1483} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    goto corral_source_split_8193;

  corral_source_split_8193:
    assume {:verifier.code 0} true;
    $M.33 := 0;
    call {:si_unique_call 1484} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    goto corral_source_split_8194;

  corral_source_split_8194:
    assume {:verifier.code 0} true;
    return;
}



const ldv_initialize_hc_driver_3: ref;

axiom ldv_initialize_hc_driver_3 == $sub.ref(0, 395829);

procedure ldv_initialize_hc_driver_3();
  free requires assertsPassed;
  modifies $M.86, $M.87, $M.0, $CurrAddr;



implementation ldv_initialize_hc_driver_3()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8196;

  corral_source_split_8196:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1485} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_8197;

  corral_source_split_8197:
    assume {:verifier.code 0} true;
    goto corral_source_split_8198;

  corral_source_split_8198:
    assume {:verifier.code 0} true;
    $M.86 := $p0;
    goto corral_source_split_8199;

  corral_source_split_8199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1486} $p2 := ldv_init_zalloc(968);
    goto corral_source_split_8200;

  corral_source_split_8200:
    assume {:verifier.code 0} true;
    goto corral_source_split_8201;

  corral_source_split_8201:
    assume {:verifier.code 0} true;
    $M.87 := $p2;
    goto corral_source_split_8202;

  corral_source_split_8202:
    assume {:verifier.code 0} true;
    return;
}



const choose_timer_1: ref;

axiom choose_timer_1 == $sub.ref(0, 396861);

procedure choose_timer_1();
  free requires assertsPassed;
  modifies $M.27, $M.29, $M.31, $M.33, $M.22, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.60, $M.39, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.48, $M.50, $M.28, $M.30, $M.32, $M.34, $CurrAddr, $M.8, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation choose_timer_1()
{
  var $i0: i32;
  var $i1: i1;
  var $i2: i1;
  var $i3: i1;
  var $i4: i1;
  var $i5: i1;
  var $i6: i32;
  var $i7: i1;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $i11: i1;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $i15: i1;
  var $i16: i32;
  var $p17: ref;
  var $i18: i32;
  var $i19: i1;
  var $i20: i32;
  var $p21: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_8204;

  corral_source_split_8204:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1487} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1488} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1489} {:cexpr "tmp"} boogie_si_record_i32($i0);
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    assume {:verifier.code 0} true;
    $i1 := $slt.i32($i0, 2);
    assume {:verifier.code 0} true;
    assume {:branchcond $i1} true;
    goto $bb2, $bb3;

  $bb3:
    assume !($i1 == 1);
    assume {:verifier.code 0} true;
    $i2 := $slt.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i2} true;
    goto $bb4, $bb5;

  $bb5:
    assume !($i2 == 1);
    assume {:verifier.code 0} true;
    $i3 := $eq.i32($i0, 3);
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb26:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1498} ldv_stop();
    goto corral_source_split_8246;

  corral_source_split_8246:
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb16:
    assume {:verifier.code 0} true;
    return;

  $bb6:
    assume $i3 == 1;
    goto corral_source_split_8210;

  corral_source_split_8210:
    assume {:verifier.code 0} true;
    $i18 := $M.33;
    goto corral_source_split_8211;

  corral_source_split_8211:
    assume {:verifier.code 0} true;
    $i19 := $eq.i32($i18, 1);
    goto corral_source_split_8212;

  corral_source_split_8212:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i19 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  $bb25:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb23:
    assume $i19 == 1;
    goto corral_source_split_8240;

  corral_source_split_8240:
    assume {:verifier.code 0} true;
    $M.33 := 2;
    call {:si_unique_call 1496} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(2);
    goto corral_source_split_8241;

  corral_source_split_8241:
    assume {:verifier.code 0} true;
    $i20 := $M.33;
    goto corral_source_split_8242;

  corral_source_split_8242:
    assume {:verifier.code 0} true;
    $p21 := $M.34;
    goto corral_source_split_8243;

  corral_source_split_8243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1497} ldv_timer_1($i20, $p21);
    goto SeqInstr_460, SeqInstr_461;

  SeqInstr_461:
    assume assertsPassed;
    goto SeqInstr_462;

  SeqInstr_462:
    goto corral_source_split_8244;

  corral_source_split_8244:
    assume {:verifier.code 0} true;
    goto $bb25;

  SeqInstr_460:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i2 == 1;
    goto corral_source_split_8206;

  corral_source_split_8206:
    assume {:verifier.code 0} true;
    $i14 := $M.31;
    goto corral_source_split_8207;

  corral_source_split_8207:
    assume {:verifier.code 0} true;
    $i15 := $eq.i32($i14, 1);
    goto corral_source_split_8208;

  corral_source_split_8208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  $bb21:
    assume !($i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb22;

  $bb22:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume $i15 == 1;
    goto corral_source_split_8234;

  corral_source_split_8234:
    assume {:verifier.code 0} true;
    $M.31 := 2;
    call {:si_unique_call 1494} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(2);
    goto corral_source_split_8235;

  corral_source_split_8235:
    assume {:verifier.code 0} true;
    $i16 := $M.31;
    goto corral_source_split_8236;

  corral_source_split_8236:
    assume {:verifier.code 0} true;
    $p17 := $M.32;
    goto corral_source_split_8237;

  corral_source_split_8237:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1495} ldv_timer_1($i16, $p17);
    goto SeqInstr_457, SeqInstr_458;

  SeqInstr_458:
    assume assertsPassed;
    goto SeqInstr_459;

  SeqInstr_459:
    goto corral_source_split_8238;

  corral_source_split_8238:
    assume {:verifier.code 0} true;
    goto $bb22;

  SeqInstr_457:
    assume !assertsPassed;
    return;

  $bb2:
    assume $i1 == 1;
    assume {:verifier.code 0} true;
    $i4 := $slt.i32($i0, 1);
    assume {:verifier.code 0} true;
    assume {:branchcond $i4} true;
    goto $bb9, $bb10;

  $bb10:
    assume !($i4 == 1);
    goto corral_source_split_8214;

  corral_source_split_8214:
    assume {:verifier.code 0} true;
    $i10 := $M.29;
    goto corral_source_split_8215;

  corral_source_split_8215:
    assume {:verifier.code 0} true;
    $i11 := $eq.i32($i10, 1);
    goto corral_source_split_8216;

  corral_source_split_8216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  $bb18:
    assume !($i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb17:
    assume $i11 == 1;
    goto corral_source_split_8228;

  corral_source_split_8228:
    assume {:verifier.code 0} true;
    $M.29 := 2;
    call {:si_unique_call 1492} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(2);
    goto corral_source_split_8229;

  corral_source_split_8229:
    assume {:verifier.code 0} true;
    $i12 := $M.29;
    goto corral_source_split_8230;

  corral_source_split_8230:
    assume {:verifier.code 0} true;
    $p13 := $M.30;
    goto corral_source_split_8231;

  corral_source_split_8231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1493} ldv_timer_1($i12, $p13);
    goto SeqInstr_454, SeqInstr_455;

  SeqInstr_455:
    assume assertsPassed;
    goto SeqInstr_456;

  SeqInstr_456:
    goto corral_source_split_8232;

  corral_source_split_8232:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_454:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i4 == 1;
    assume {:verifier.code 0} true;
    $i5 := $eq.i32($i0, 0);
    assume {:verifier.code 0} true;
    assume {:branchcond $i5} true;
    goto $bb11, $bb12;

  $bb12:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb8;

  $bb11:
    assume $i5 == 1;
    goto corral_source_split_8218;

  corral_source_split_8218:
    assume {:verifier.code 0} true;
    $i6 := $M.27;
    goto corral_source_split_8219;

  corral_source_split_8219:
    assume {:verifier.code 0} true;
    $i7 := $eq.i32($i6, 1);
    goto corral_source_split_8220;

  corral_source_split_8220:
    assume {:verifier.code 0} true;
    assume {:branchcond $i7} true;
    goto $bb13, $bb14;

  $bb14:
    assume !($i7 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume $i7 == 1;
    goto corral_source_split_8222;

  corral_source_split_8222:
    assume {:verifier.code 0} true;
    $M.27 := 2;
    call {:si_unique_call 1490} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(2);
    goto corral_source_split_8223;

  corral_source_split_8223:
    assume {:verifier.code 0} true;
    $i8 := $M.27;
    goto corral_source_split_8224;

  corral_source_split_8224:
    assume {:verifier.code 0} true;
    $p9 := $M.28;
    goto corral_source_split_8225;

  corral_source_split_8225:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1491} ldv_timer_1($i8, $p9);
    goto SeqInstr_451, SeqInstr_452;

  SeqInstr_452:
    assume assertsPassed;
    goto SeqInstr_453;

  SeqInstr_453:
    goto corral_source_split_8226;

  corral_source_split_8226:
    assume {:verifier.code 0} true;
    goto $bb15;

  SeqInstr_451:
    assume !assertsPassed;
    return;
}



const ldv_timer_1: ref;

axiom ldv_timer_1 == $sub.ref(0, 397893);

procedure ldv_timer_1($i0: i32, $p1: ref);
  free requires assertsPassed;
  modifies $M.22, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.60, $M.39, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.48, $M.50, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr, $M.8, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ldv_timer_1($i0: i32, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;

  $bb0:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1499} {:cexpr "ldv_timer_1:arg:state"} boogie_si_record_i32($i0);
    goto corral_source_split_8248;

  corral_source_split_8248:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1500} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(2);
    goto corral_source_split_8249;

  corral_source_split_8249:
    assume {:verifier.code 0} true;
    $p2 := $add.ref($add.ref($p1, $mul.ref(0, 128)), $mul.ref(32, 1));
    goto corral_source_split_8250;

  corral_source_split_8250:
    assume {:verifier.code 0} true;
    $i3 := $load.i64($M.89, $p2);
    goto corral_source_split_8251;

  corral_source_split_8251:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1501} oxu_watchdog($i3);
    goto SeqInstr_463, SeqInstr_464;

  SeqInstr_464:
    assume assertsPassed;
    goto SeqInstr_465;

  SeqInstr_465:
    goto corral_source_split_8252;

  corral_source_split_8252:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1502} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    goto corral_source_split_8253;

  corral_source_split_8253:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_463:
    assume !assertsPassed;
    return;
}



const ldv_stop: ref;

axiom ldv_stop == $sub.ref(0, 398925);

procedure ldv_stop();
  free requires assertsPassed;



implementation ldv_stop()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8255;

  corral_source_split_8255:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call ldv_stop_loop_$bb1();
    goto $bb1_last;

  $bb1_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;
}



const ldv_initialize_hc_driver_4: ref;

axiom ldv_initialize_hc_driver_4 == $sub.ref(0, 399957);

procedure ldv_initialize_hc_driver_4();
  free requires assertsPassed;
  modifies $M.86, $M.87, $M.0, $CurrAddr;



implementation ldv_initialize_hc_driver_4()
{
  var $p0: ref;
  var $p2: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8257;

  corral_source_split_8257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1503} $p0 := ldv_init_zalloc(192);
    goto corral_source_split_8258;

  corral_source_split_8258:
    assume {:verifier.code 0} true;
    goto corral_source_split_8259;

  corral_source_split_8259:
    assume {:verifier.code 0} true;
    $M.86 := $p0;
    goto corral_source_split_8260;

  corral_source_split_8260:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1504} $p2 := ldv_init_zalloc(968);
    goto corral_source_split_8261;

  corral_source_split_8261:
    assume {:verifier.code 0} true;
    goto corral_source_split_8262;

  corral_source_split_8262:
    assume {:verifier.code 0} true;
    $M.87 := $p2;
    goto corral_source_split_8263;

  corral_source_split_8263:
    assume {:verifier.code 0} true;
    return;
}



const ldv_platform_driver_init_2: ref;

axiom ldv_platform_driver_init_2 == $sub.ref(0, 400989);

procedure ldv_platform_driver_init_2();
  free requires assertsPassed;
  modifies $M.90, $M.0, $CurrAddr;



implementation ldv_platform_driver_init_2()
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_8265;

  corral_source_split_8265:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1505} $p0 := ldv_init_zalloc(1472);
    goto corral_source_split_8266;

  corral_source_split_8266:
    assume {:verifier.code 0} true;
    goto corral_source_split_8267;

  corral_source_split_8267:
    assume {:verifier.code 0} true;
    $M.90 := $p0;
    goto corral_source_split_8268;

  corral_source_split_8268:
    assume {:verifier.code 0} true;
    return;
}



const main: ref;

axiom main == $sub.ref(0, 402021);

procedure main() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.85, $M.91, $M.27, $M.29, $M.31, $M.33, $M.92, $M.93, $M.94, $M.95, $M.96, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.97, $M.98, $M.86, $M.87, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.28, $M.30, $M.32, $M.34, $M.90, $M.22, $M.77, $M.76, $M.13, $M.64, $CurrAddr, $M.63, $M.50, $M.24, $M.25, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.60, $M.48, $M.46, $M.57, $M.39, $M.8, $M.47, $M.58, $M.59, assertsPassed;



implementation main() returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p22: ref;
  var $p24: ref;
  var $p26: ref;
  var $p28: ref;
  var $p30: ref;
  var $p32: ref;
  var $p34: ref;
  var $p36: ref;
  var $p38: ref;
  var $p40: ref;
  var $p42: ref;
  var $i44: i32;
  var $i45: i1;
  var $i46: i1;
  var $i47: i1;
  var $i48: i1;
  var $i49: i1;
  var $i50: i1;
  var $i51: i32;
  var $i52: i1;
  var $i53: i32;
  var $i54: i1;
  var $i55: i1;
  var $i56: i1;
  var $i57: i1;
  var $i58: i1;
  var $i59: i1;
  var $i60: i1;
  var $i61: i1;
  var $i62: i1;
  var $i63: i1;
  var $i64: i1;
  var $i65: i1;
  var $i66: i1;
  var $i67: i1;
  var $i68: i32;
  var $i69: i1;
  var $p70: ref;
  var $i71: i32;
  var $i72: i32;
  var $i73: i1;
  var $i74: i32;
  var $i75: i32;
  var $i76: i32;
  var $i77: i1;
  var $p78: ref;
  var $p79: ref;
  var $i80: i32;
  var $i82: i32;
  var $i83: i1;
  var $p84: ref;
  var $p85: ref;
  var $i86: i32;
  var $i88: i32;
  var $i89: i1;
  var $p90: ref;
  var $p91: ref;
  var $i92: i32;
  var $i94: i32;
  var $i95: i1;
  var $p96: ref;
  var $i97: i32;
  var $i98: i1;
  var $p99: ref;
  var $i100: i32;
  var $i101: i1;
  var $p102: ref;
  var $i103: i32;
  var $i104: i1;
  var $p105: ref;
  var $i107: i32;
  var $i108: i1;
  var $p109: ref;
  var $i111: i32;
  var $i112: i1;
  var $p113: ref;
  var $i115: i32;
  var $i116: i1;
  var $p117: ref;
  var $i119: i32;
  var $i120: i1;
  var $p121: ref;
  var $i123: i32;
  var $i124: i1;
  var $p125: ref;
  var $i127: i32;
  var $i128: i1;
  var $p129: ref;
  var $i130: i32;
  var $i131: i1;
  var $p132: ref;
  var $i134: i32;
  var $i135: i1;
  var $p136: ref;
  var $i138: i32;
  var $i139: i1;
  var $p140: ref;
  var $i142: i32;
  var $i143: i1;
  var $p144: ref;
  var $i146: i32;
  var $i147: i1;
  var $p148: ref;
  var $i150: i32;
  var $i151: i1;
  var $p152: ref;
  var $i154: i32;
  var $i155: i1;
  var $p156: ref;
  var $i158: i32;
  var $i159: i1;
  var $p160: ref;
  var $i162: i32;
  var $i163: i1;
  var $p164: ref;
  var $i166: i32;
  var $i167: i1;
  var $p168: ref;
  var $i169: i32;
  var $i170: i32;
  var $i171: i32;
  var $i172: i1;
  var $p173: ref;
  var $i174: i32;
  var $i175: i32;
  var $i176: i32;
  var $i177: i1;
  var $p178: ref;
  var $p179: ref;
  var $i180: i32;
  var $i182: i32;
  var $i183: i1;
  var $p184: ref;
  var $p185: ref;
  var $i186: i32;
  var $i188: i32;
  var $i189: i1;
  var $p190: ref;
  var $p191: ref;
  var $i192: i32;
  var $i194: i32;
  var $i195: i1;
  var $p196: ref;
  var $i197: i16;
  var $i198: i32;
  var $i199: i16;
  var $i200: i16;
  var $i201: i32;
  var $i202: i16;
  var $i203: i16;
  var $i204: i32;
  var $i205: i16;
  var $i206: i16;
  var $i207: i32;
  var $i208: i16;
  var $i210: i32;
  var $i211: i1;
  var $p212: ref;
  var $i213: i16;
  var $i214: i32;
  var $i215: i16;
  var $i216: i16;
  var $i217: i32;
  var $i218: i16;
  var $i219: i16;
  var $i220: i32;
  var $i221: i16;
  var $i222: i16;
  var $i223: i32;
  var $i224: i16;
  var $i226: i32;
  var $i227: i1;
  var $p228: ref;
  var $i229: i16;
  var $i230: i32;
  var $i231: i16;
  var $i232: i16;
  var $i233: i32;
  var $i234: i16;
  var $i235: i16;
  var $i236: i32;
  var $i237: i16;
  var $i238: i16;
  var $i239: i32;
  var $i240: i16;
  var $i242: i32;
  var $i243: i1;
  var $p244: ref;
  var $i246: i32;
  var $i247: i1;
  var $p248: ref;
  var $i250: i32;
  var $i251: i1;
  var $p252: ref;
  var $i254: i32;
  var $i255: i1;
  var $i256: i32;
  var $i257: i1;
  var $i258: i32;
  var $i259: i1;
  var $i260: i1;
  var $i261: i1;
  var $i262: i32;
  var $i263: i1;
  var $i264: i32;
  var $i265: i1;
  var $i266: i32;
  var $i267: i1;
  var $i268: i32;
  var $i269: i32;
  var $i270: i1;
  var $i271: i32;
  var $i272: i1;
  var $i273: i32;
  var $i274: i1;
  var $i275: i32;
  var $i276: i1;
  var $i277: i1;
  var $i278: i1;
  var $i279: i1;
  var $i280: i1;
  var $i281: i1;
  var $i282: i1;
  var $i283: i1;
  var $i284: i1;
  var $i285: i1;
  var $i286: i1;
  var $i287: i1;
  var $i288: i1;
  var $i289: i1;
  var $i290: i32;
  var $i291: i1;
  var $p292: ref;
  var $i293: i32;
  var $i294: i32;
  var $i295: i1;
  var $i296: i32;
  var $i297: i32;
  var $i298: i32;
  var $i299: i1;
  var $p300: ref;
  var $p301: ref;
  var $i302: i32;
  var $i304: i32;
  var $i305: i1;
  var $p306: ref;
  var $p307: ref;
  var $i308: i32;
  var $i310: i32;
  var $i311: i1;
  var $p312: ref;
  var $p313: ref;
  var $i314: i32;
  var $i316: i32;
  var $i317: i1;
  var $p318: ref;
  var $i319: i32;
  var $i320: i1;
  var $p321: ref;
  var $i322: i32;
  var $i323: i1;
  var $p324: ref;
  var $i325: i32;
  var $i326: i1;
  var $p327: ref;
  var $i329: i32;
  var $i330: i1;
  var $p331: ref;
  var $i333: i32;
  var $i334: i1;
  var $p335: ref;
  var $i337: i32;
  var $i338: i1;
  var $p339: ref;
  var $i341: i32;
  var $i342: i1;
  var $p343: ref;
  var $i345: i32;
  var $i346: i1;
  var $p347: ref;
  var $i349: i32;
  var $i350: i1;
  var $p351: ref;
  var $i352: i32;
  var $i353: i1;
  var $p354: ref;
  var $i356: i32;
  var $i357: i1;
  var $p358: ref;
  var $i360: i32;
  var $i361: i1;
  var $p362: ref;
  var $i364: i32;
  var $i365: i1;
  var $p366: ref;
  var $i368: i32;
  var $i369: i1;
  var $p370: ref;
  var $i372: i32;
  var $i373: i1;
  var $p374: ref;
  var $i376: i32;
  var $i377: i1;
  var $p378: ref;
  var $i380: i32;
  var $i381: i1;
  var $p382: ref;
  var $i384: i32;
  var $i385: i1;
  var $p386: ref;
  var $i388: i32;
  var $i389: i1;
  var $p390: ref;
  var $i391: i32;
  var $i392: i32;
  var $i393: i32;
  var $i394: i1;
  var $p395: ref;
  var $i396: i32;
  var $i397: i32;
  var $i398: i32;
  var $i399: i1;
  var $p400: ref;
  var $p401: ref;
  var $i402: i32;
  var $i404: i32;
  var $i405: i1;
  var $p406: ref;
  var $p407: ref;
  var $i408: i32;
  var $i410: i32;
  var $i411: i1;
  var $p412: ref;
  var $p413: ref;
  var $i414: i32;
  var $i416: i32;
  var $i417: i1;
  var $p418: ref;
  var $i419: i16;
  var $i420: i32;
  var $i421: i16;
  var $i422: i16;
  var $i423: i32;
  var $i424: i16;
  var $i425: i16;
  var $i426: i32;
  var $i427: i16;
  var $i428: i16;
  var $i429: i32;
  var $i430: i16;
  var $i432: i32;
  var $i433: i1;
  var $p434: ref;
  var $i435: i16;
  var $i436: i32;
  var $i437: i16;
  var $i438: i16;
  var $i439: i32;
  var $i440: i16;
  var $i441: i16;
  var $i442: i32;
  var $i443: i16;
  var $i444: i16;
  var $i445: i32;
  var $i446: i16;
  var $i448: i32;
  var $i449: i1;
  var $p450: ref;
  var $i451: i16;
  var $i452: i32;
  var $i453: i16;
  var $i454: i16;
  var $i455: i32;
  var $i456: i16;
  var $i457: i16;
  var $i458: i32;
  var $i459: i16;
  var $i460: i16;
  var $i461: i32;
  var $i462: i16;
  var $i464: i32;
  var $i465: i1;
  var $p466: ref;
  var $i468: i32;
  var $i469: i1;
  var $p470: ref;
  var $i472: i32;
  var $i473: i1;
  var $p474: ref;
  var $i476: i32;
  var $i477: i1;
  var $i478: i32;
  var $i479: i1;
  var $i480: i1;
  var $i481: i1;
  var $i482: i1;
  var $i483: i1;
  var $i484: i1;
  var $i485: i32;
  var $i486: i1;
  var $p487: ref;
  var $i488: i32;
  var $i489: i32;
  var $i490: i1;
  var $i491: i32;
  var $i492: i32;
  var $i493: i32;
  var $i494: i1;
  var $p495: ref;
  var $i496: i32;
  var $i497: i1;
  var $i498: i32;
  var $i499: i1;
  var $p500: ref;
  var $i501: i32;
  var $i502: i32;
  var $i503: i1;
  var $i504: i32;
  var $i505: i32;
  var $i506: i32;
  var $i507: i1;
  var $i508: i32;
  var $i509: i1;
  var $p510: ref;
  var $i511: i32;
  var $i512: i32;
  var $i513: i1;
  var $i514: i32;
  var $i515: i32;
  var $i516: i32;
  var $i517: i1;
  var $i518: i32;
  var $i519: i32;
  var $i520: i1;
  var $i521: i32;
  var $i522: i1;
  var $i523: i32;
  var $i524: i32;
  var $i525: i1;
  var vslice_dummy_var_111: ref;
  var vslice_dummy_var_112: ref;
  var vslice_dummy_var_113: ref;
  var vslice_dummy_var_114: ref;
  var vslice_dummy_var_115: ref;
  var vslice_dummy_var_116: ref;
  var vslice_dummy_var_117: ref;
  var vslice_dummy_var_118: ref;
  var vslice_dummy_var_119: ref;
  var vslice_dummy_var_120: ref;
  var vslice_dummy_var_121: ref;
  var vslice_dummy_var_122: ref;
  var vslice_dummy_var_123: i32;
  var vslice_dummy_var_124: i32;
  var vslice_dummy_var_125: i32;
  var vslice_dummy_var_126: i32;
  var vslice_dummy_var_127: i32;
  var vslice_dummy_var_128: i32;
  var vslice_dummy_var_129: i32;
  var vslice_dummy_var_130: i32;
  var vslice_dummy_var_131: i32;
  var vslice_dummy_var_132: i32;
  var vslice_dummy_var_133: i32;
  var vslice_dummy_var_134: i32;
  var vslice_dummy_var_135: i32;
  var vslice_dummy_var_136: i32;
  var vslice_dummy_var_137: i32;
  var vslice_dummy_var_138: i32;
  var vslice_dummy_var_139: i32;
  var vslice_dummy_var_140: i32;
  var vslice_dummy_var_141: i32;
  var vslice_dummy_var_142: i32;
  var vslice_dummy_var_143: i32;
  var vslice_dummy_var_144: i32;
  var vslice_dummy_var_145: i32;
  var vslice_dummy_var_146: i32;
  var vslice_dummy_var_147: i32;
  var vslice_dummy_var_148: i32;
  var vslice_dummy_var_149: i32;
  var vslice_dummy_var_150: i32;
  var vslice_dummy_var_151: i32;
  var vslice_dummy_var_152: i32;
  var vslice_dummy_var_153: i32;
  var vslice_dummy_var_154: i32;
  var vslice_dummy_var_155: i32;
  var vslice_dummy_var_156: i32;
  var vslice_dummy_var_157: i32;
  var vslice_dummy_var_158: i32;
  var vslice_dummy_var_159: i32;
  var vslice_dummy_var_160: i32;
  var vslice_dummy_var_161: i32;
  var vslice_dummy_var_162: i32;
  var vslice_dummy_var_163: i32;
  var vslice_dummy_var_164: i32;
  var vslice_dummy_var_165: i32;
  var vslice_dummy_var_166: i32;
  var vslice_dummy_var_167: i32;
  var vslice_dummy_var_168: i32;
  var vslice_dummy_var_169: i32;
  var vslice_dummy_var_170: i32;
  var vslice_dummy_var_171: i32;
  var vslice_dummy_var_172: i32;
  var vslice_dummy_var_173: i32;
  var vslice_dummy_var_174: i32;
  var vslice_dummy_var_175: i32;
  var vslice_dummy_var_176: i32;

  $bb0:
    call {:si_unique_call 1506} $initialize();
    goto corral_source_split_8270;

  corral_source_split_8270:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1507} {:cexpr "smack:entry:main"} boogie_si_record_ref(main);
    assume {:verifier.code 0} true;
    call {:si_unique_call 1508} $p0 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1509} $p1 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1510} $p2 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1511} $p3 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1512} $p4 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1513} $p5 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1514} $p6 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1515} $p7 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1516} $p8 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1517} $p9 := $alloc($mul.ref(4, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1518} $p10 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    assume {:verifier.code 0} true;
    call {:si_unique_call 1519} $p11 := $alloc($mul.ref(2, $zext.i32.i64(1)));
    goto corral_source_split_8271;

  corral_source_split_8271:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1520} $p12 := ldv_init_zalloc(72);
    goto corral_source_split_8272;

  corral_source_split_8272:
    assume {:verifier.code 0} true;
    $p13 := $bitcast.ref.ref($p12);
    goto corral_source_split_8273;

  corral_source_split_8273:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1521} $p14 := ldv_init_zalloc(1);
    goto corral_source_split_8274;

  corral_source_split_8274:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1522} $p15 := ldv_init_zalloc(1);
    goto corral_source_split_8275;

  corral_source_split_8275:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1523} $p16 := ldv_init_zalloc(72);
    goto corral_source_split_8276;

  corral_source_split_8276:
    assume {:verifier.code 0} true;
    $p17 := $bitcast.ref.ref($p16);
    goto corral_source_split_8277;

  corral_source_split_8277:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1524} $p18 := ldv_init_zalloc(1);
    goto corral_source_split_8278;

  corral_source_split_8278:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1525} $p19 := ldv_init_zalloc(1);
    goto corral_source_split_8279;

  corral_source_split_8279:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1526} ldv_initialize();
    goto corral_source_split_8280;

  corral_source_split_8280:
    assume {:verifier.code 0} true;
    $p20 := $bitcast.ref.ref($p0);
    goto corral_source_split_8281;

  corral_source_split_8281:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1527} vslice_dummy_var_111 := ldv_memset($p20, 0, 2);
    goto corral_source_split_8282;

  corral_source_split_8282:
    assume {:verifier.code 0} true;
    $p22 := $bitcast.ref.ref($p1);
    goto corral_source_split_8283;

  corral_source_split_8283:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1528} vslice_dummy_var_112 := ldv_memset($p22, 0, 2);
    goto corral_source_split_8284;

  corral_source_split_8284:
    assume {:verifier.code 0} true;
    $p24 := $bitcast.ref.ref($p2);
    goto corral_source_split_8285;

  corral_source_split_8285:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1529} vslice_dummy_var_113 := ldv_memset($p24, 0, 4);
    goto corral_source_split_8286;

  corral_source_split_8286:
    assume {:verifier.code 0} true;
    $p26 := $bitcast.ref.ref($p3);
    goto corral_source_split_8287;

  corral_source_split_8287:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1530} vslice_dummy_var_114 := ldv_memset($p26, 0, 4);
    goto corral_source_split_8288;

  corral_source_split_8288:
    assume {:verifier.code 0} true;
    $p28 := $bitcast.ref.ref($p4);
    goto corral_source_split_8289;

  corral_source_split_8289:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1531} vslice_dummy_var_115 := ldv_memset($p28, 0, 2);
    goto corral_source_split_8290;

  corral_source_split_8290:
    assume {:verifier.code 0} true;
    $p30 := $bitcast.ref.ref($p5);
    goto corral_source_split_8291;

  corral_source_split_8291:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1532} vslice_dummy_var_116 := ldv_memset($p30, 0, 2);
    goto corral_source_split_8292;

  corral_source_split_8292:
    assume {:verifier.code 0} true;
    $p32 := $bitcast.ref.ref($p6);
    goto corral_source_split_8293;

  corral_source_split_8293:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1533} vslice_dummy_var_117 := ldv_memset($p32, 0, 2);
    goto corral_source_split_8294;

  corral_source_split_8294:
    assume {:verifier.code 0} true;
    $p34 := $bitcast.ref.ref($p7);
    goto corral_source_split_8295;

  corral_source_split_8295:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1534} vslice_dummy_var_118 := ldv_memset($p34, 0, 2);
    goto corral_source_split_8296;

  corral_source_split_8296:
    assume {:verifier.code 0} true;
    $p36 := $bitcast.ref.ref($p8);
    goto corral_source_split_8297;

  corral_source_split_8297:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1535} vslice_dummy_var_119 := ldv_memset($p36, 0, 4);
    goto corral_source_split_8298;

  corral_source_split_8298:
    assume {:verifier.code 0} true;
    $p38 := $bitcast.ref.ref($p9);
    goto corral_source_split_8299;

  corral_source_split_8299:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1536} vslice_dummy_var_120 := ldv_memset($p38, 0, 4);
    goto corral_source_split_8300;

  corral_source_split_8300:
    assume {:verifier.code 0} true;
    $p40 := $bitcast.ref.ref($p10);
    goto corral_source_split_8301;

  corral_source_split_8301:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1537} vslice_dummy_var_121 := ldv_memset($p40, 0, 2);
    goto corral_source_split_8302;

  corral_source_split_8302:
    assume {:verifier.code 0} true;
    $p42 := $bitcast.ref.ref($p11);
    goto corral_source_split_8303;

  corral_source_split_8303:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1538} vslice_dummy_var_122 := ldv_memset($p42, 0, 2);
    goto corral_source_split_8304;

  corral_source_split_8304:
    assume {:verifier.code 0} true;
    $M.91 := 0;
    call {:si_unique_call 1539} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    goto corral_source_split_8305;

  corral_source_split_8305:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1540} timer_init_1();
    goto corral_source_split_8306;

  corral_source_split_8306:
    assume {:verifier.code 0} true;
    $M.92 := 1;
    call {:si_unique_call 1541} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(1);
    goto corral_source_split_8307;

  corral_source_split_8307:
    assume {:verifier.code 0} true;
    $M.93 := 0;
    call {:si_unique_call 1542} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    goto corral_source_split_8308;

  corral_source_split_8308:
    assume {:verifier.code 0} true;
    $M.94 := 1;
    call {:si_unique_call 1543} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(1);
    goto corral_source_split_8309;

  corral_source_split_8309:
    assume {:verifier.code 0} true;
    $M.95 := 0;
    call {:si_unique_call 1544} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    goto corral_source_split_8310;

  corral_source_split_8310:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 1545} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_8311;

  corral_source_split_8311:
    assume {:verifier.code 0} true;
    goto $bb1;

  $bb1:
    call $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $i80, $i82, $i83, $p84, $p85, $i86, $i88, $i89, $p90, $p91, $i92, $i94, $i95, $p96, $i97, $i98, $p99, $i100, $i101, $p102, $i103, $i104, $p105, $i107, $i108, $p109, $i111, $i112, $p113, $i115, $i116, $p117, $i119, $i120, $p121, $i123, $i124, $p125, $i127, $i128, $p129, $i130, $i131, $p132, $i134, $i135, $p136, $i138, $i139, $p140, $i142, $i143, $p144, $i146, $i147, $p148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i169, $i170, $i171, $i172, $p173, $i174, $i175, $i176, $i177, $p178, $p179, $i180, $i182, $i183, $p184, $p185, $i186, $i188, $i189, $p190, $p191, $i192, $i194, $i195, $p196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i210, $i211, $p212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i226, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $p292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $p300, $p301, $i302, $i304, $i305, $p306, $p307, $i308, $i310, $i311, $p312, $p313, $i314, $i316, $i317, $p318, $i319, $i320, $p321, $i322, $i323, $p324, $i325, $i326, $p327, $i329, $i330, $p331, $i333, $i334, $p335, $i337, $i338, $p339, $i341, $i342, $p343, $i345, $i346, $p347, $i349, $i350, $p351, $i352, $i353, $p354, $i356, $i357, $p358, $i360, $i361, $p362, $i364, $i365, $p366, $i368, $i369, $p370, $i372, $i373, $p374, $i376, $i377, $p378, $i380, $i381, $p382, $i384, $i385, $p386, $i388, $i389, $p390, $i391, $i392, $i393, $i394, $p395, $i396, $i397, $i398, $i399, $p400, $p401, $i402, $i404, $i405, $p406, $p407, $i408, $i410, $i411, $p412, $p413, $i414, $i416, $i417, $p418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i432, $i433, $p434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i448, $i449, $p450, $i451, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $i464, $i465, $p466, $i468, $i469, $p470, $i472, $i473, $p474, $i476, $i477, $i478, $i479, $i480, $i481, $i482, $i483, $i484, $i485, $i486, $p487, $i488, $i489, $i490, $i491, $i492, $i493, $i494, $p495, $i496, $i497, $i498, $i499, $p500, $i501, $i502, $i503, $i504, $i505, $i506, $i507, $i508, $i509, $p510, $i511, $i512, $i513, $i514, $i515, $i516, $i517, $i518, $i519, $i520, $i521, $i522, $i523, $i524, $i525, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176 := main_loop_$bb1($p0, $p1, $p2, $p3, $p4, $p5, $p6, $p7, $p8, $p9, $p10, $p11, $p13, $p14, $p15, $p17, $p18, $p19, $i44, $i45, $i46, $i47, $i48, $i49, $i50, $i51, $i52, $i53, $i54, $i55, $i56, $i57, $i58, $i59, $i60, $i61, $i62, $i63, $i64, $i65, $i66, $i67, $i68, $i69, $p70, $i71, $i72, $i73, $i74, $i75, $i76, $i77, $p78, $p79, $i80, $i82, $i83, $p84, $p85, $i86, $i88, $i89, $p90, $p91, $i92, $i94, $i95, $p96, $i97, $i98, $p99, $i100, $i101, $p102, $i103, $i104, $p105, $i107, $i108, $p109, $i111, $i112, $p113, $i115, $i116, $p117, $i119, $i120, $p121, $i123, $i124, $p125, $i127, $i128, $p129, $i130, $i131, $p132, $i134, $i135, $p136, $i138, $i139, $p140, $i142, $i143, $p144, $i146, $i147, $p148, $i150, $i151, $p152, $i154, $i155, $p156, $i158, $i159, $p160, $i162, $i163, $p164, $i166, $i167, $p168, $i169, $i170, $i171, $i172, $p173, $i174, $i175, $i176, $i177, $p178, $p179, $i180, $i182, $i183, $p184, $p185, $i186, $i188, $i189, $p190, $p191, $i192, $i194, $i195, $p196, $i197, $i198, $i199, $i200, $i201, $i202, $i203, $i204, $i205, $i206, $i207, $i208, $i210, $i211, $p212, $i213, $i214, $i215, $i216, $i217, $i218, $i219, $i220, $i221, $i222, $i223, $i224, $i226, $i227, $p228, $i229, $i230, $i231, $i232, $i233, $i234, $i235, $i236, $i237, $i238, $i239, $i240, $i242, $i243, $p244, $i246, $i247, $p248, $i250, $i251, $p252, $i254, $i255, $i256, $i257, $i258, $i259, $i260, $i261, $i262, $i263, $i264, $i265, $i266, $i267, $i268, $i269, $i270, $i271, $i272, $i273, $i274, $i275, $i276, $i277, $i278, $i279, $i280, $i281, $i282, $i283, $i284, $i285, $i286, $i287, $i288, $i289, $i290, $i291, $p292, $i293, $i294, $i295, $i296, $i297, $i298, $i299, $p300, $p301, $i302, $i304, $i305, $p306, $p307, $i308, $i310, $i311, $p312, $p313, $i314, $i316, $i317, $p318, $i319, $i320, $p321, $i322, $i323, $p324, $i325, $i326, $p327, $i329, $i330, $p331, $i333, $i334, $p335, $i337, $i338, $p339, $i341, $i342, $p343, $i345, $i346, $p347, $i349, $i350, $p351, $i352, $i353, $p354, $i356, $i357, $p358, $i360, $i361, $p362, $i364, $i365, $p366, $i368, $i369, $p370, $i372, $i373, $p374, $i376, $i377, $p378, $i380, $i381, $p382, $i384, $i385, $p386, $i388, $i389, $p390, $i391, $i392, $i393, $i394, $p395, $i396, $i397, $i398, $i399, $p400, $p401, $i402, $i404, $i405, $p406, $p407, $i408, $i410, $i411, $p412, $p413, $i414, $i416, $i417, $p418, $i419, $i420, $i421, $i422, $i423, $i424, $i425, $i426, $i427, $i428, $i429, $i430, $i432, $i433, $p434, $i435, $i436, $i437, $i438, $i439, $i440, $i441, $i442, $i443, $i444, $i445, $i446, $i448, $i449, $p450, $i451, $i452, $i453, $i454, $i455, $i456, $i457, $i458, $i459, $i460, $i461, $i462, $i464, $i465, $p466, $i468, $i469, $p470, $i472, $i473, $p474, $i476, $i477, $i478, $i479, $i480, $i481, $i482, $i483, $i484, $i485, $i486, $p487, $i488, $i489, $i490, $i491, $i492, $i493, $i494, $p495, $i496, $i497, $i498, $i499, $p500, $i501, $i502, $i503, $i504, $i505, $i506, $i507, $i508, $i509, $p510, $i511, $i512, $i513, $i514, $i515, $i516, $i517, $i518, $i519, $i520, $i521, $i522, $i523, $i524, $i525, vslice_dummy_var_123, vslice_dummy_var_124, vslice_dummy_var_125, vslice_dummy_var_126, vslice_dummy_var_127, vslice_dummy_var_128, vslice_dummy_var_129, vslice_dummy_var_130, vslice_dummy_var_131, vslice_dummy_var_132, vslice_dummy_var_133, vslice_dummy_var_134, vslice_dummy_var_135, vslice_dummy_var_136, vslice_dummy_var_137, vslice_dummy_var_138, vslice_dummy_var_139, vslice_dummy_var_140, vslice_dummy_var_141, vslice_dummy_var_142, vslice_dummy_var_143, vslice_dummy_var_144, vslice_dummy_var_145, vslice_dummy_var_146, vslice_dummy_var_147, vslice_dummy_var_148, vslice_dummy_var_149, vslice_dummy_var_150, vslice_dummy_var_151, vslice_dummy_var_152, vslice_dummy_var_153, vslice_dummy_var_154, vslice_dummy_var_155, vslice_dummy_var_156, vslice_dummy_var_157, vslice_dummy_var_158, vslice_dummy_var_159, vslice_dummy_var_160, vslice_dummy_var_161, vslice_dummy_var_162, vslice_dummy_var_163, vslice_dummy_var_164, vslice_dummy_var_165, vslice_dummy_var_166, vslice_dummy_var_167, vslice_dummy_var_168, vslice_dummy_var_169, vslice_dummy_var_170, vslice_dummy_var_171, vslice_dummy_var_172, vslice_dummy_var_173, vslice_dummy_var_174, vslice_dummy_var_175, vslice_dummy_var_176);
    goto $bb1_last;

  $bb2:
    assume {:verifier.code 0} true;
    $i45 := $slt.i32($i44, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb4:
    assume !($i45 == 1);
    assume {:verifier.code 0} true;
    $i46 := $slt.i32($i44, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb6:
    assume !($i46 == 1);
    assume {:verifier.code 0} true;
    $i47 := $slt.i32($i44, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb8:
    assume !($i47 == 1);
    assume {:verifier.code 0} true;
    $i48 := $eq.i32($i44, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb10:
    assume {:verifier.code 0} true;
    assume !($i48 == 1);
    goto $bb11;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} ldv_stop();
    goto corral_source_split_9179;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb157_dummy;

  $bb9:
    assume $i48 == 1;
    goto corral_source_split_8321;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    $i476 := $M.96;
    goto corral_source_split_8322;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    $i477 := $ne.i32($i476, 0);
    goto corral_source_split_8323;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  $bb333:
    assume !($i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb332:
    assume $i477 == 1;
    goto corral_source_split_9079;

  corral_source_split_9079:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1717} $i478 := __VERIFIER_nondet_int();
    call {:si_unique_call 1718} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i478);
    call {:si_unique_call 1719} {:cexpr "tmp___9"} boogie_si_record_i32($i478);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb334:
    assume {:verifier.code 0} true;
    $i479 := $slt.i32($i478, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  $bb336:
    assume !($i479 == 1);
    assume {:verifier.code 0} true;
    $i480 := $slt.i32($i478, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb338:
    assume !($i480 == 1);
    assume {:verifier.code 0} true;
    $i481 := $slt.i32($i478, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb340:
    assume !($i481 == 1);
    assume {:verifier.code 0} true;
    $i482 := $eq.i32($i478, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  $bb342:
    assume {:verifier.code 0} true;
    assume !($i482 == 1);
    goto $bb343;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_stop();
    goto corral_source_split_9177;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb341:
    assume $i482 == 1;
    goto corral_source_split_9089;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    $i521 := $M.96;
    goto corral_source_split_9090;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    $i522 := $eq.i32($i521, 3);
    goto corral_source_split_9091;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  $bb383:
    assume !($i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb382:
    assume $i522 == 1;
    goto corral_source_split_9168;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} $i523 := ldv_suspend_2();
    goto corral_source_split_9169;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $M.104 := $i523;
    call {:si_unique_call 1741} {:cexpr "ldv_retval_3"} boogie_si_record_i32($i523);
    goto corral_source_split_9170;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    $i524 := $M.104;
    goto corral_source_split_9171;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    $i525 := $eq.i32($i524, 0);
    goto corral_source_split_9172;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  $bb385:
    assume !($i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb384:
    assume $i525 == 1;
    goto corral_source_split_9174;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $M.96 := 4;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_9175;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    goto $bb386;

  $bb339:
    assume $i481 == 1;
    goto corral_source_split_9085;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    $i516 := $M.96;
    goto corral_source_split_9086;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    $i517 := $eq.i32($i516, 4);
    goto corral_source_split_9087;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  $bb377:
    assume !($i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb376:
    assume $i517 == 1;
    goto corral_source_split_9159;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} $i518 := ldv_resume_2();
    goto corral_source_split_9160;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $M.103 := $i518;
    call {:si_unique_call 1738} {:cexpr "ldv_retval_4"} boogie_si_record_i32($i518);
    goto corral_source_split_9161;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    $i519 := $M.103;
    goto corral_source_split_9162;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    $i520 := $eq.i32($i519, 0);
    goto corral_source_split_9163;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  $bb379:
    assume !($i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb378:
    assume $i520 == 1;
    goto corral_source_split_9165;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9166;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    goto $bb380;

  $bb337:
    assume $i480 == 1;
    goto corral_source_split_9081;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    $i496 := $M.96;
    goto corral_source_split_9082;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    $i497 := $eq.i32($i496, 1);
    goto corral_source_split_9083;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  $bb359:
    assume {:verifier.code 0} true;
    assume !($i497 == 1);
    goto $bb360;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb366:
    assume {:verifier.code 0} true;
    $i506 := $M.96;
    goto corral_source_split_9138;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    $i507 := $eq.i32($i506, 2);
    goto corral_source_split_9139;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  $bb368:
    assume {:verifier.code 0} true;
    assume !($i507 == 1);
    goto $bb369;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb367:
    assume $i507 == 1;
    goto corral_source_split_9141;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    $i508 := $M.101;
    goto corral_source_split_9142;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    $i509 := $eq.i32($i508, 1);
    goto corral_source_split_9143;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  $bb371:
    assume {:verifier.code 0} true;
    assume !($i509 == 1);
    goto $bb369;

  $bb370:
    assume $i509 == 1;
    goto corral_source_split_9145;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    $p510 := $M.90;
    goto corral_source_split_9146;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} $i511 := oxu_drv_remove($p510);
    goto corral_source_split_9147;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $M.102 := $i511;
    call {:si_unique_call 1733} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i511);
    goto corral_source_split_9148;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    $i512 := $M.102;
    goto corral_source_split_9149;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    $i513 := $eq.i32($i512, 0);
    goto corral_source_split_9150;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  $bb373:
    assume !($i513 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb372:
    assume $i513 == 1;
    goto corral_source_split_9152;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9153;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    $i514 := $M.93;
    goto corral_source_split_9154;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    $i515 := $sub.i32($i514, 1);
    goto corral_source_split_9155;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $M.93 := $i515;
    call {:si_unique_call 1735} {:cexpr "ref_cnt"} boogie_si_record_i32($i515);
    goto corral_source_split_9156;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.101 := 0;
    call {:si_unique_call 1736} {:cexpr "probed_2"} boogie_si_record_i32(0);
    goto corral_source_split_9157;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    goto $bb374;

  $bb358:
    assume $i497 == 1;
    goto corral_source_split_9120;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    $i498 := $M.101;
    goto corral_source_split_9121;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    $i499 := $eq.i32($i498, 1);
    goto corral_source_split_9122;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  $bb362:
    assume {:verifier.code 0} true;
    assume !($i499 == 1);
    goto $bb360;

  $bb361:
    assume $i499 == 1;
    goto corral_source_split_9124;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    $p500 := $M.90;
    goto corral_source_split_9125;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} $i501 := oxu_drv_remove($p500);
    goto corral_source_split_9126;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $M.102 := $i501;
    call {:si_unique_call 1728} {:cexpr "ldv_retval_5"} boogie_si_record_i32($i501);
    goto corral_source_split_9127;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    $i502 := $M.102;
    goto corral_source_split_9128;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    $i503 := $eq.i32($i502, 0);
    goto corral_source_split_9129;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  $bb364:
    assume !($i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb363:
    assume $i503 == 1;
    goto corral_source_split_9131;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9132;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    $i504 := $M.93;
    goto corral_source_split_9133;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    $i505 := $sub.i32($i504, 1);
    goto corral_source_split_9134;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $M.93 := $i505;
    call {:si_unique_call 1730} {:cexpr "ref_cnt"} boogie_si_record_i32($i505);
    goto corral_source_split_9135;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.101 := 0;
    call {:si_unique_call 1731} {:cexpr "probed_2"} boogie_si_record_i32(0);
    goto corral_source_split_9136;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    goto $bb365;

  $bb335:
    assume $i479 == 1;
    assume {:verifier.code 0} true;
    $i483 := $slt.i32($i478, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb345:
    assume !($i483 == 1);
    goto corral_source_split_9093;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    $i493 := $M.96;
    goto corral_source_split_9094;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    $i494 := $eq.i32($i493, 2);
    goto corral_source_split_9095;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  $bb356:
    assume !($i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb355:
    assume $i494 == 1;
    goto corral_source_split_9115;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    $p495 := $M.90;
    goto corral_source_split_9116;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} oxu_drv_shutdown($p495);
    goto corral_source_split_9117;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $M.96 := 3;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9118;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    goto $bb357;

  $bb344:
    assume $i483 == 1;
    assume {:verifier.code 0} true;
    $i484 := $eq.i32($i478, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb347:
    assume {:verifier.code 0} true;
    assume !($i484 == 1);
    goto $bb343;

  $bb346:
    assume $i484 == 1;
    goto corral_source_split_9097;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    $i485 := $M.96;
    goto corral_source_split_9098;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    $i486 := $eq.i32($i485, 1);
    goto corral_source_split_9099;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  $bb349:
    assume !($i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb348:
    assume $i486 == 1;
    goto corral_source_split_9101;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    $p487 := $M.90;
    goto corral_source_split_9102;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} $i488 := oxu_drv_probe($p487);
    goto SeqInstr_673, SeqInstr_674;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  SeqInstr_675:
    goto corral_source_split_9103;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $M.100 := $i488;
    call {:si_unique_call 1721} {:cexpr "ldv_retval_6"} boogie_si_record_i32($i488);
    goto corral_source_split_9104;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    $i489 := $M.100;
    goto corral_source_split_9105;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    $i490 := $eq.i32($i489, 0);
    goto corral_source_split_9106;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  $bb351:
    assume !($i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb350:
    assume $i490 == 1;
    goto corral_source_split_9108;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9109;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    $i491 := $M.93;
    goto corral_source_split_9110;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    $i492 := $add.i32($i491, 1);
    goto corral_source_split_9111;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $M.93 := $i492;
    call {:si_unique_call 1723} {:cexpr "ref_cnt"} boogie_si_record_i32($i492);
    goto corral_source_split_9112;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1724} {:cexpr "probed_2"} boogie_si_record_i32(1);
    goto corral_source_split_9113;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    goto $bb352;

  SeqInstr_673:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i47 == 1;
    goto corral_source_split_8317;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    $i273 := $M.95;
    goto corral_source_split_8318;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    $i274 := $ne.i32($i273, 0);
    goto corral_source_split_8319;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  $bb192:
    assume !($i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb191:
    assume $i274 == 1;
    goto corral_source_split_8728;

  corral_source_split_8728:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} $i275 := __VERIFIER_nondet_int();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i275);
    call {:si_unique_call 1643} {:cexpr "tmp___8"} boogie_si_record_i32($i275);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb193:
    assume {:verifier.code 0} true;
    $i276 := $slt.i32($i275, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  $bb195:
    assume !($i276 == 1);
    assume {:verifier.code 0} true;
    $i277 := $slt.i32($i275, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb197:
    assume !($i277 == 1);
    assume {:verifier.code 0} true;
    $i278 := $slt.i32($i275, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb199:
    assume !($i278 == 1);
    assume {:verifier.code 0} true;
    $i279 := $slt.i32($i275, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb201:
    assume !($i279 == 1);
    assume {:verifier.code 0} true;
    $i280 := $eq.i32($i275, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  $bb203:
    assume {:verifier.code 0} true;
    assume !($i280 == 1);
    goto $bb204;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} ldv_stop();
    goto corral_source_split_9077;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb202:
    assume $i280 == 1;
    goto corral_source_split_8734;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    $i464 := $M.95;
    goto corral_source_split_8735;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    $i465 := $eq.i32($i464, 1);
    goto corral_source_split_8736;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  $bb321:
    assume !($i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  $bb322:
    assume {:verifier.code 0} true;
    $i468 := $M.95;
    goto corral_source_split_9061;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    $i469 := $eq.i32($i468, 3);
    goto corral_source_split_9062;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  $bb324:
    assume !($i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  $bb325:
    assume {:verifier.code 0} true;
    $i472 := $M.95;
    goto corral_source_split_9069;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    $i473 := $eq.i32($i472, 2);
    goto corral_source_split_9070;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  $bb327:
    assume !($i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb326:
    assume $i473 == 1;
    goto corral_source_split_9072;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    $p474 := $M.87;
    goto corral_source_split_9073;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} vslice_dummy_var_176 := oxu_get_frame($p474);
    goto SeqInstr_670, SeqInstr_671;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  SeqInstr_672:
    goto corral_source_split_9074;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9075;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    goto $bb328;

  SeqInstr_670:
    assume !assertsPassed;
    return;

  $bb323:
    assume $i469 == 1;
    goto corral_source_split_9064;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    $p470 := $M.87;
    goto corral_source_split_9065;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} vslice_dummy_var_175 := oxu_get_frame($p470);
    goto SeqInstr_667, SeqInstr_668;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  SeqInstr_669:
    goto corral_source_split_9066;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9067;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    goto $bb325;

  SeqInstr_667:
    assume !assertsPassed;
    return;

  $bb320:
    assume $i465 == 1;
    goto corral_source_split_9056;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    $p466 := $M.87;
    goto corral_source_split_9057;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} vslice_dummy_var_174 := oxu_get_frame($p466);
    goto SeqInstr_664, SeqInstr_665;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  SeqInstr_666:
    goto corral_source_split_9058;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9059;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    goto $bb322;

  SeqInstr_664:
    assume !assertsPassed;
    return;

  $bb200:
    assume $i279 == 1;
    goto corral_source_split_8730;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    $i416 := $M.95;
    goto corral_source_split_8731;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    $i417 := $eq.i32($i416, 1);
    goto corral_source_split_8732;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  $bb312:
    assume !($i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  $bb313:
    assume {:verifier.code 0} true;
    $i432 := $M.95;
    goto corral_source_split_9016;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    $i433 := $eq.i32($i432, 3);
    goto corral_source_split_9017;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  $bb315:
    assume !($i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  $bb316:
    assume {:verifier.code 0} true;
    $i448 := $M.95;
    goto corral_source_split_9036;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    $i449 := $eq.i32($i448, 2);
    goto corral_source_split_9037;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  $bb318:
    assume !($i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb317:
    assume $i449 == 1;
    goto corral_source_split_9039;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    $p450 := $M.87;
    goto corral_source_split_9040;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    $i451 := $load.i16($M.85, $p7);
    goto corral_source_split_9041;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    $i452 := $zext.i16.i32($i451);
    goto corral_source_split_9042;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    $i453 := $trunc.i32.i16($i452);
    goto corral_source_split_9043;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    $i454 := $load.i16($M.85, $p6);
    goto corral_source_split_9044;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    $i455 := $zext.i16.i32($i454);
    goto corral_source_split_9045;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    $i456 := $trunc.i32.i16($i455);
    goto corral_source_split_9046;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    $i457 := $load.i16($M.85, $p10);
    goto corral_source_split_9047;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    $i458 := $zext.i16.i32($i457);
    goto corral_source_split_9048;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    $i459 := $trunc.i32.i16($i458);
    goto corral_source_split_9049;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    $i460 := $load.i16($M.85, $p11);
    goto corral_source_split_9050;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    $i461 := $zext.i16.i32($i460);
    goto corral_source_split_9051;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    $i462 := $trunc.i32.i16($i461);
    goto corral_source_split_9052;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} vslice_dummy_var_173 := oxu_hub_control($p450, $i453, $i456, $i459, $p19, $i462);
    goto SeqInstr_661, SeqInstr_662;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  SeqInstr_663:
    goto corral_source_split_9053;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9054;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    goto $bb319;

  SeqInstr_661:
    assume !assertsPassed;
    return;

  $bb314:
    assume $i433 == 1;
    goto corral_source_split_9019;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    $p434 := $M.87;
    goto corral_source_split_9020;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    $i435 := $load.i16($M.85, $p7);
    goto corral_source_split_9021;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    $i436 := $zext.i16.i32($i435);
    goto corral_source_split_9022;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    $i437 := $trunc.i32.i16($i436);
    goto corral_source_split_9023;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    $i438 := $load.i16($M.85, $p6);
    goto corral_source_split_9024;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    $i439 := $zext.i16.i32($i438);
    goto corral_source_split_9025;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    $i440 := $trunc.i32.i16($i439);
    goto corral_source_split_9026;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    $i441 := $load.i16($M.85, $p10);
    goto corral_source_split_9027;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    $i442 := $zext.i16.i32($i441);
    goto corral_source_split_9028;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    $i443 := $trunc.i32.i16($i442);
    goto corral_source_split_9029;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    $i444 := $load.i16($M.85, $p11);
    goto corral_source_split_9030;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    $i445 := $zext.i16.i32($i444);
    goto corral_source_split_9031;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    $i446 := $trunc.i32.i16($i445);
    goto corral_source_split_9032;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} vslice_dummy_var_172 := oxu_hub_control($p434, $i437, $i440, $i443, $p19, $i446);
    goto SeqInstr_658, SeqInstr_659;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  SeqInstr_660:
    goto corral_source_split_9033;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9034;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb316;

  SeqInstr_658:
    assume !assertsPassed;
    return;

  $bb311:
    assume $i417 == 1;
    goto corral_source_split_8999;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    $p418 := $M.87;
    goto corral_source_split_9000;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    $i419 := $load.i16($M.85, $p7);
    goto corral_source_split_9001;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    $i420 := $zext.i16.i32($i419);
    goto corral_source_split_9002;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    $i421 := $trunc.i32.i16($i420);
    goto corral_source_split_9003;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    $i422 := $load.i16($M.85, $p6);
    goto corral_source_split_9004;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    $i423 := $zext.i16.i32($i422);
    goto corral_source_split_9005;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    $i424 := $trunc.i32.i16($i423);
    goto corral_source_split_9006;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    $i425 := $load.i16($M.85, $p10);
    goto corral_source_split_9007;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    $i426 := $zext.i16.i32($i425);
    goto corral_source_split_9008;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    $i427 := $trunc.i32.i16($i426);
    goto corral_source_split_9009;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    $i428 := $load.i16($M.85, $p11);
    goto corral_source_split_9010;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    $i429 := $zext.i16.i32($i428);
    goto corral_source_split_9011;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    $i430 := $trunc.i32.i16($i429);
    goto corral_source_split_9012;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} vslice_dummy_var_171 := oxu_hub_control($p418, $i421, $i424, $i427, $p19, $i430);
    goto SeqInstr_655, SeqInstr_656;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  SeqInstr_657:
    goto corral_source_split_9013;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9014;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    goto $bb313;

  SeqInstr_655:
    assume !assertsPassed;
    return;

  $bb198:
    assume $i278 == 1;
    assume {:verifier.code 0} true;
    $i281 := $slt.i32($i275, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb206:
    assume !($i281 == 1);
    goto corral_source_split_8742;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    $i398 := $M.95;
    goto corral_source_split_8743;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    $i399 := $eq.i32($i398, 1);
    goto corral_source_split_8744;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  $bb303:
    assume !($i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  $bb304:
    assume {:verifier.code 0} true;
    $i404 := $M.95;
    goto corral_source_split_8979;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    $i405 := $eq.i32($i404, 3);
    goto corral_source_split_8980;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  $bb306:
    assume !($i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  $bb307:
    assume {:verifier.code 0} true;
    $i410 := $M.95;
    goto corral_source_split_8989;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    $i411 := $eq.i32($i410, 2);
    goto corral_source_split_8990;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  $bb309:
    assume !($i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb308:
    assume $i411 == 1;
    goto corral_source_split_8992;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    $p412 := $M.87;
    goto corral_source_split_8993;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    $p413 := $M.86;
    goto corral_source_split_8994;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    $i414 := $load.i32($M.85, $p9);
    goto corral_source_split_8995;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} vslice_dummy_var_170 := oxu_urb_enqueue($p412, $p413, $i414);
    goto SeqInstr_652, SeqInstr_653;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  SeqInstr_654:
    goto corral_source_split_8996;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8997;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb310;

  SeqInstr_652:
    assume !assertsPassed;
    return;

  $bb305:
    assume $i405 == 1;
    goto corral_source_split_8982;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    $p406 := $M.87;
    goto corral_source_split_8983;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    $p407 := $M.86;
    goto corral_source_split_8984;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    $i408 := $load.i32($M.85, $p9);
    goto corral_source_split_8985;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} vslice_dummy_var_169 := oxu_urb_enqueue($p406, $p407, $i408);
    goto SeqInstr_649, SeqInstr_650;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  SeqInstr_651:
    goto corral_source_split_8986;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8987;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    goto $bb307;

  SeqInstr_649:
    assume !assertsPassed;
    return;

  $bb302:
    assume $i399 == 1;
    goto corral_source_split_8972;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    $p400 := $M.87;
    goto corral_source_split_8973;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    $p401 := $M.86;
    goto corral_source_split_8974;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    $i402 := $load.i32($M.85, $p9);
    goto corral_source_split_8975;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} vslice_dummy_var_168 := oxu_urb_enqueue($p400, $p401, $i402);
    goto SeqInstr_646, SeqInstr_647;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  SeqInstr_648:
    goto corral_source_split_8976;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8977;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    goto $bb304;

  SeqInstr_646:
    assume !assertsPassed;
    return;

  $bb205:
    assume $i281 == 1;
    goto corral_source_split_8738;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    $i388 := $M.95;
    goto corral_source_split_8739;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    $i389 := $eq.i32($i388, 3);
    goto corral_source_split_8740;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  $bb297:
    assume !($i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  $bb298:
    assume {:verifier.code 0} true;
    $i393 := $M.95;
    goto corral_source_split_8961;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    $i394 := $eq.i32($i393, 2);
    goto corral_source_split_8962;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  $bb300:
    assume !($i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb299:
    assume $i394 == 1;
    goto corral_source_split_8964;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    $p395 := $M.87;
    goto corral_source_split_8965;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} oxu_stop($p395);
    goto SeqInstr_643, SeqInstr_644;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  SeqInstr_645:
    goto corral_source_split_8966;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1696} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8967;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    $i396 := $M.93;
    goto corral_source_split_8968;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    $i397 := $sub.i32($i396, 1);
    goto corral_source_split_8969;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $M.93 := $i397;
    call {:si_unique_call 1697} {:cexpr "ref_cnt"} boogie_si_record_i32($i397);
    goto corral_source_split_8970;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    goto $bb301;

  SeqInstr_643:
    assume !assertsPassed;
    return;

  $bb296:
    assume $i389 == 1;
    goto corral_source_split_8953;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    $p390 := $M.87;
    goto corral_source_split_8954;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} oxu_stop($p390);
    goto SeqInstr_640, SeqInstr_641;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  SeqInstr_642:
    goto corral_source_split_8955;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8956;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    $i391 := $M.93;
    goto corral_source_split_8957;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    $i392 := $sub.i32($i391, 1);
    goto corral_source_split_8958;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $M.93 := $i392;
    call {:si_unique_call 1694} {:cexpr "ref_cnt"} boogie_si_record_i32($i392);
    goto corral_source_split_8959;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    goto $bb298;

  SeqInstr_640:
    assume !assertsPassed;
    return;

  $bb196:
    assume $i277 == 1;
    assume {:verifier.code 0} true;
    $i282 := $slt.i32($i275, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb208:
    assume !($i282 == 1);
    assume {:verifier.code 0} true;
    $i283 := $slt.i32($i275, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb210:
    assume !($i283 == 1);
    goto corral_source_split_8754;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    $i376 := $M.95;
    goto corral_source_split_8755;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    $i377 := $eq.i32($i376, 1);
    goto corral_source_split_8756;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  $bb288:
    assume !($i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  $bb289:
    assume {:verifier.code 0} true;
    $i380 := $M.95;
    goto corral_source_split_8937;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    $i381 := $eq.i32($i380, 3);
    goto corral_source_split_8938;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  $bb291:
    assume !($i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  $bb292:
    assume {:verifier.code 0} true;
    $i384 := $M.95;
    goto corral_source_split_8945;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    $i385 := $eq.i32($i384, 2);
    goto corral_source_split_8946;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  $bb294:
    assume !($i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb293:
    assume $i385 == 1;
    goto corral_source_split_8948;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    $p386 := $M.87;
    goto corral_source_split_8949;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} vslice_dummy_var_167 := oxu_irq($p386);
    goto SeqInstr_637, SeqInstr_638;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  SeqInstr_639:
    goto corral_source_split_8950;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8951;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    goto $bb295;

  SeqInstr_637:
    assume !assertsPassed;
    return;

  $bb290:
    assume $i381 == 1;
    goto corral_source_split_8940;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    $p382 := $M.87;
    goto corral_source_split_8941;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} vslice_dummy_var_166 := oxu_irq($p382);
    goto SeqInstr_634, SeqInstr_635;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  SeqInstr_636:
    goto corral_source_split_8942;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8943;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb292;

  SeqInstr_634:
    assume !assertsPassed;
    return;

  $bb287:
    assume $i377 == 1;
    goto corral_source_split_8932;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    $p378 := $M.87;
    goto corral_source_split_8933;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} vslice_dummy_var_165 := oxu_irq($p378);
    goto SeqInstr_631, SeqInstr_632;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  SeqInstr_633:
    goto corral_source_split_8934;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8935;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    goto $bb289;

  SeqInstr_631:
    assume !assertsPassed;
    return;

  $bb209:
    assume $i283 == 1;
    goto corral_source_split_8750;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    $i364 := $M.95;
    goto corral_source_split_8751;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    $i365 := $eq.i32($i364, 1);
    goto corral_source_split_8752;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  $bb279:
    assume !($i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  $bb280:
    assume {:verifier.code 0} true;
    $i368 := $M.95;
    goto corral_source_split_8916;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    $i369 := $eq.i32($i368, 3);
    goto corral_source_split_8917;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  $bb282:
    assume !($i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  $bb283:
    assume {:verifier.code 0} true;
    $i372 := $M.95;
    goto corral_source_split_8924;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    $i373 := $eq.i32($i372, 2);
    goto corral_source_split_8925;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  $bb285:
    assume !($i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb284:
    assume $i373 == 1;
    goto corral_source_split_8927;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    $p374 := $M.87;
    goto corral_source_split_8928;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} vslice_dummy_var_164 := oxu_hub_status_data($p374, $p18);
    goto SeqInstr_628, SeqInstr_629;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  SeqInstr_630:
    goto corral_source_split_8929;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8930;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb286;

  SeqInstr_628:
    assume !assertsPassed;
    return;

  $bb281:
    assume $i369 == 1;
    goto corral_source_split_8919;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    $p370 := $M.87;
    goto corral_source_split_8920;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} vslice_dummy_var_163 := oxu_hub_status_data($p370, $p18);
    goto SeqInstr_625, SeqInstr_626;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  SeqInstr_627:
    goto corral_source_split_8921;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8922;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb283;

  SeqInstr_625:
    assume !assertsPassed;
    return;

  $bb278:
    assume $i365 == 1;
    goto corral_source_split_8911;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    $p366 := $M.87;
    goto corral_source_split_8912;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} vslice_dummy_var_162 := oxu_hub_status_data($p366, $p18);
    goto SeqInstr_622, SeqInstr_623;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  SeqInstr_624:
    goto corral_source_split_8913;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8914;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    goto $bb280;

  SeqInstr_622:
    assume !assertsPassed;
    return;

  $bb207:
    assume $i282 == 1;
    goto corral_source_split_8746;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    $i352 := $M.95;
    goto corral_source_split_8747;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    $i353 := $eq.i32($i352, 1);
    goto corral_source_split_8748;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  $bb270:
    assume !($i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  $bb271:
    assume {:verifier.code 0} true;
    $i356 := $M.95;
    goto corral_source_split_8895;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    $i357 := $eq.i32($i356, 3);
    goto corral_source_split_8896;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  $bb273:
    assume !($i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  $bb274:
    assume {:verifier.code 0} true;
    $i360 := $M.95;
    goto corral_source_split_8903;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    $i361 := $eq.i32($i360, 2);
    goto corral_source_split_8904;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  $bb276:
    assume !($i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb275:
    assume $i361 == 1;
    goto corral_source_split_8906;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    $p362 := $M.87;
    goto corral_source_split_8907;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} vslice_dummy_var_161 := oxu_reset($p362);
    goto SeqInstr_619, SeqInstr_620;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  SeqInstr_621:
    goto corral_source_split_8908;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8909;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    goto $bb277;

  SeqInstr_619:
    assume !assertsPassed;
    return;

  $bb272:
    assume $i357 == 1;
    goto corral_source_split_8898;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    $p358 := $M.87;
    goto corral_source_split_8899;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} vslice_dummy_var_160 := oxu_reset($p358);
    goto SeqInstr_616, SeqInstr_617;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  SeqInstr_618:
    goto corral_source_split_8900;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8901;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    goto $bb274;

  SeqInstr_616:
    assume !assertsPassed;
    return;

  $bb269:
    assume $i353 == 1;
    goto corral_source_split_8890;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    $p354 := $M.87;
    goto corral_source_split_8891;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} vslice_dummy_var_159 := oxu_reset($p354);
    goto SeqInstr_613, SeqInstr_614;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  SeqInstr_615:
    goto corral_source_split_8892;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8893;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    goto $bb271;

  SeqInstr_613:
    assume !assertsPassed;
    return;

  $bb194:
    assume $i276 == 1;
    assume {:verifier.code 0} true;
    $i284 := $slt.i32($i275, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb212:
    assume !($i284 == 1);
    assume {:verifier.code 0} true;
    $i285 := $slt.i32($i275, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb214:
    assume !($i285 == 1);
    assume {:verifier.code 0} true;
    $i286 := $slt.i32($i275, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb216:
    assume !($i286 == 1);
    goto corral_source_split_8766;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    $i349 := $M.95;
    goto corral_source_split_8767;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    $i350 := $eq.i32($i349, 2);
    goto corral_source_split_8768;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  $bb267:
    assume !($i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb266:
    assume $i350 == 1;
    goto corral_source_split_8885;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    $p351 := $M.87;
    goto corral_source_split_8886;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} oxu_shutdown($p351);
    goto SeqInstr_610, SeqInstr_611;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  SeqInstr_612:
    goto corral_source_split_8887;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8888;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb268;

  SeqInstr_610:
    assume !assertsPassed;
    return;

  $bb215:
    assume $i286 == 1;
    goto corral_source_split_8762;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    $i337 := $M.95;
    goto corral_source_split_8763;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    $i338 := $eq.i32($i337, 1);
    goto corral_source_split_8764;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  $bb258:
    assume !($i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  $bb259:
    assume {:verifier.code 0} true;
    $i341 := $M.95;
    goto corral_source_split_8869;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    $i342 := $eq.i32($i341, 3);
    goto corral_source_split_8870;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  $bb261:
    assume !($i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  $bb262:
    assume {:verifier.code 0} true;
    $i345 := $M.95;
    goto corral_source_split_8877;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    $i346 := $eq.i32($i345, 2);
    goto corral_source_split_8878;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  $bb264:
    assume !($i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb263:
    assume $i346 == 1;
    goto corral_source_split_8880;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    $p347 := $M.87;
    goto corral_source_split_8881;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} vslice_dummy_var_158 := oxu_bus_suspend($p347);
    goto SeqInstr_607, SeqInstr_608;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  SeqInstr_609:
    goto corral_source_split_8882;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8883;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    goto $bb265;

  SeqInstr_607:
    assume !assertsPassed;
    return;

  $bb260:
    assume $i342 == 1;
    goto corral_source_split_8872;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    $p343 := $M.87;
    goto corral_source_split_8873;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} vslice_dummy_var_157 := oxu_bus_suspend($p343);
    goto SeqInstr_604, SeqInstr_605;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  SeqInstr_606:
    goto corral_source_split_8874;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8875;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    goto $bb262;

  SeqInstr_604:
    assume !assertsPassed;
    return;

  $bb257:
    assume $i338 == 1;
    goto corral_source_split_8864;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    $p339 := $M.87;
    goto corral_source_split_8865;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} vslice_dummy_var_156 := oxu_bus_suspend($p339);
    goto SeqInstr_601, SeqInstr_602;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  SeqInstr_603:
    goto corral_source_split_8866;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8867;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    goto $bb259;

  SeqInstr_601:
    assume !assertsPassed;
    return;

  $bb213:
    assume $i285 == 1;
    goto corral_source_split_8758;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    $i325 := $M.95;
    goto corral_source_split_8759;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    $i326 := $eq.i32($i325, 1);
    goto corral_source_split_8760;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  $bb249:
    assume !($i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  $bb250:
    assume {:verifier.code 0} true;
    $i329 := $M.95;
    goto corral_source_split_8848;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    $i330 := $eq.i32($i329, 3);
    goto corral_source_split_8849;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  $bb252:
    assume !($i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  $bb253:
    assume {:verifier.code 0} true;
    $i333 := $M.95;
    goto corral_source_split_8856;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    $i334 := $eq.i32($i333, 2);
    goto corral_source_split_8857;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  $bb255:
    assume !($i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb254:
    assume $i334 == 1;
    goto corral_source_split_8859;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    $p335 := $M.87;
    goto corral_source_split_8860;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} vslice_dummy_var_155 := oxu_bus_resume($p335);
    goto SeqInstr_598, SeqInstr_599;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  SeqInstr_600:
    goto corral_source_split_8861;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8862;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    goto $bb256;

  SeqInstr_598:
    assume !assertsPassed;
    return;

  $bb251:
    assume $i330 == 1;
    goto corral_source_split_8851;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    $p331 := $M.87;
    goto corral_source_split_8852;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} vslice_dummy_var_154 := oxu_bus_resume($p331);
    goto SeqInstr_595, SeqInstr_596;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  SeqInstr_597:
    goto corral_source_split_8853;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8854;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    goto $bb253;

  SeqInstr_595:
    assume !assertsPassed;
    return;

  $bb248:
    assume $i326 == 1;
    goto corral_source_split_8843;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    $p327 := $M.87;
    goto corral_source_split_8844;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} vslice_dummy_var_153 := oxu_bus_resume($p327);
    goto SeqInstr_592, SeqInstr_593;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  SeqInstr_594:
    goto corral_source_split_8845;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1661} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8846;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    goto $bb250;

  SeqInstr_592:
    assume !assertsPassed;
    return;

  $bb211:
    assume $i284 == 1;
    assume {:verifier.code 0} true;
    $i287 := $slt.i32($i275, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb218:
    assume !($i287 == 1);
    assume {:verifier.code 0} true;
    $i288 := $slt.i32($i275, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb220:
    assume !($i288 == 1);
    goto corral_source_split_8774;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    $i316 := $M.95;
    goto corral_source_split_8775;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    $i317 := $eq.i32($i316, 1);
    goto corral_source_split_8776;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  $bb240:
    assume !($i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  $bb241:
    assume {:verifier.code 0} true;
    $i319 := $M.95;
    goto corral_source_split_8827;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    $i320 := $eq.i32($i319, 3);
    goto corral_source_split_8828;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  $bb243:
    assume !($i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  $bb244:
    assume {:verifier.code 0} true;
    $i322 := $M.95;
    goto corral_source_split_8835;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    $i323 := $eq.i32($i322, 2);
    goto corral_source_split_8836;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  $bb246:
    assume !($i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb245:
    assume $i323 == 1;
    goto corral_source_split_8838;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    $p324 := $M.87;
    goto corral_source_split_8839;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} oxu_endpoint_disable($p324, $p17);
    goto SeqInstr_589, SeqInstr_590;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  SeqInstr_591:
    goto corral_source_split_8840;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8841;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    goto $bb247;

  SeqInstr_589:
    assume !assertsPassed;
    return;

  $bb242:
    assume $i320 == 1;
    goto corral_source_split_8830;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    $p321 := $M.87;
    goto corral_source_split_8831;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} oxu_endpoint_disable($p321, $p17);
    goto SeqInstr_586, SeqInstr_587;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  SeqInstr_588:
    goto corral_source_split_8832;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8833;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    goto $bb244;

  SeqInstr_586:
    assume !assertsPassed;
    return;

  $bb239:
    assume $i317 == 1;
    goto corral_source_split_8822;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    $p318 := $M.87;
    goto corral_source_split_8823;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} oxu_endpoint_disable($p318, $p17);
    goto SeqInstr_583, SeqInstr_584;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  SeqInstr_585:
    goto corral_source_split_8824;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8825;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    goto $bb241;

  SeqInstr_583:
    assume !assertsPassed;
    return;

  $bb219:
    assume $i288 == 1;
    goto corral_source_split_8770;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    $i298 := $M.95;
    goto corral_source_split_8771;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    $i299 := $eq.i32($i298, 1);
    goto corral_source_split_8772;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  $bb231:
    assume !($i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  $bb232:
    assume {:verifier.code 0} true;
    $i304 := $M.95;
    goto corral_source_split_8802;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    $i305 := $eq.i32($i304, 3);
    goto corral_source_split_8803;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  $bb234:
    assume !($i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  $bb235:
    assume {:verifier.code 0} true;
    $i310 := $M.95;
    goto corral_source_split_8812;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    $i311 := $eq.i32($i310, 2);
    goto corral_source_split_8813;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  $bb237:
    assume !($i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb236:
    assume $i311 == 1;
    goto corral_source_split_8815;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    $p312 := $M.87;
    goto corral_source_split_8816;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    $p313 := $M.86;
    goto corral_source_split_8817;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    $i314 := $load.i32($M.85, $p8);
    goto corral_source_split_8818;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} vslice_dummy_var_152 := oxu_urb_dequeue($p312, $p313, $i314);
    goto SeqInstr_580, SeqInstr_581;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  SeqInstr_582:
    goto corral_source_split_8819;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8820;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    goto $bb238;

  SeqInstr_580:
    assume !assertsPassed;
    return;

  $bb233:
    assume $i305 == 1;
    goto corral_source_split_8805;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    $p306 := $M.87;
    goto corral_source_split_8806;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    $p307 := $M.86;
    goto corral_source_split_8807;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    $i308 := $load.i32($M.85, $p8);
    goto corral_source_split_8808;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} vslice_dummy_var_151 := oxu_urb_dequeue($p306, $p307, $i308);
    goto SeqInstr_577, SeqInstr_578;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  SeqInstr_579:
    goto corral_source_split_8809;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8810;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    goto $bb235;

  SeqInstr_577:
    assume !assertsPassed;
    return;

  $bb230:
    assume $i299 == 1;
    goto corral_source_split_8795;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    $p300 := $M.87;
    goto corral_source_split_8796;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    $p301 := $M.86;
    goto corral_source_split_8797;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    $i302 := $load.i32($M.85, $p8);
    goto corral_source_split_8798;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} vslice_dummy_var_150 := oxu_urb_dequeue($p300, $p301, $i302);
    goto SeqInstr_574, SeqInstr_575;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  SeqInstr_576:
    goto corral_source_split_8799;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8800;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    goto $bb232;

  SeqInstr_574:
    assume !assertsPassed;
    return;

  $bb217:
    assume $i287 == 1;
    assume {:verifier.code 0} true;
    $i289 := $eq.i32($i275, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb222:
    assume {:verifier.code 0} true;
    assume !($i289 == 1);
    goto $bb204;

  $bb221:
    assume $i289 == 1;
    goto corral_source_split_8778;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    $i290 := $M.95;
    goto corral_source_split_8779;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    $i291 := $eq.i32($i290, 1);
    goto corral_source_split_8780;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  $bb224:
    assume !($i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb223:
    assume $i291 == 1;
    goto corral_source_split_8782;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    $p292 := $M.87;
    goto corral_source_split_8783;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} $i293 := oxu_run($p292);
    goto SeqInstr_571, SeqInstr_572;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  SeqInstr_573:
    goto corral_source_split_8784;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.99 := $i293;
    call {:si_unique_call 1645} {:cexpr "ldv_retval_2"} boogie_si_record_i32($i293);
    goto corral_source_split_8785;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    $i294 := $M.99;
    goto corral_source_split_8786;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    $i295 := $eq.i32($i294, 0);
    goto corral_source_split_8787;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  $bb226:
    assume !($i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb225:
    assume $i295 == 1;
    goto corral_source_split_8789;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8790;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    $i296 := $M.93;
    goto corral_source_split_8791;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    $i297 := $add.i32($i296, 1);
    goto corral_source_split_8792;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.93 := $i297;
    call {:si_unique_call 1647} {:cexpr "ref_cnt"} boogie_si_record_i32($i297);
    goto corral_source_split_8793;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    goto $bb227;

  SeqInstr_571:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i46 == 1;
    goto corral_source_split_8313;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    $i256 := $M.94;
    goto corral_source_split_8314;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    $i257 := $ne.i32($i256, 0);
    goto corral_source_split_8315;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  $bb162:
    assume !($i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb161:
    assume $i257 == 1;
    goto corral_source_split_8687;

  corral_source_split_8687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} $i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i258);
    call {:si_unique_call 1628} {:cexpr "tmp___7"} boogie_si_record_i32($i258);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb163:
    assume {:verifier.code 0} true;
    $i259 := $slt.i32($i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  $bb165:
    assume !($i259 == 1);
    assume {:verifier.code 0} true;
    $i260 := $eq.i32($i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  $bb167:
    assume {:verifier.code 0} true;
    assume !($i260 == 1);
    goto $bb168;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_stop();
    goto corral_source_split_8726;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb166:
    assume $i260 == 1;
    goto corral_source_split_8689;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    $i266 := $M.94;
    goto corral_source_split_8690;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    $i267 := $eq.i32($i266, 1);
    goto corral_source_split_8691;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  $bb180:
    assume !($i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb179:
    assume $i267 == 1;
    goto corral_source_split_8707;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} $i268 := oxu_driver_init();
    goto corral_source_split_8708;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $M.98 := $i268;
    call {:si_unique_call 1633} {:cexpr "ldv_retval_1"} boogie_si_record_i32($i268);
    goto corral_source_split_8709;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    $i269 := $M.98;
    goto corral_source_split_8710;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    $i270 := $eq.i32($i269, 0);
    goto corral_source_split_8711;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  $bb182:
    assume !($i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb183:
    assume {:verifier.code 0} true;
    $i271 := $M.98;
    goto corral_source_split_8720;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    $i272 := $ne.i32($i271, 0);
    goto corral_source_split_8721;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb184, $bb185;

  $bb185:
    assume !($i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb184:
    assume $i272 == 1;
    goto corral_source_split_8723;

  corral_source_split_8723:
    assume {:verifier.code 0} true;
    $M.94 := 2;
    call {:si_unique_call 1639} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8724;

  corral_source_split_8724:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb176:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1631} ldv_check_final_state();
    goto corral_source_split_8705;

  corral_source_split_8705:
    assume {:verifier.code 0} true;
    $r := 0;
    return;

  $bb181:
    assume $i270 == 1;
    goto corral_source_split_8713;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $M.94 := 3;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8714;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8715;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} ldv_initialize_hc_driver_3();
    goto corral_source_split_8716;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8717;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv_initialize_hc_driver_4();
    goto corral_source_split_8718;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    goto $bb183;

  $bb164:
    assume $i259 == 1;
    assume {:verifier.code 0} true;
    $i261 := $eq.i32($i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb170:
    assume {:verifier.code 0} true;
    assume !($i261 == 1);
    goto $bb168;

  $bb169:
    assume $i261 == 1;
    goto corral_source_split_8693;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    $i262 := $M.94;
    goto corral_source_split_8694;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    $i263 := $eq.i32($i262, 3);
    goto corral_source_split_8695;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  $bb172:
    assume {:verifier.code 0} true;
    assume !($i263 == 1);
    goto $bb173;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb171:
    assume $i263 == 1;
    goto corral_source_split_8697;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    $i264 := $M.93;
    goto corral_source_split_8698;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    $i265 := $eq.i32($i264, 0);
    goto corral_source_split_8699;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb174, $bb175;

  $bb175:
    assume {:verifier.code 0} true;
    assume !($i265 == 1);
    goto $bb173;

  $bb174:
    assume $i265 == 1;
    goto corral_source_split_8701;

  corral_source_split_8701:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1629} oxu_driver_exit();
    goto corral_source_split_8702;

  corral_source_split_8702:
    assume {:verifier.code 0} true;
    $M.94 := 2;
    call {:si_unique_call 1630} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(2);
    goto corral_source_split_8703;

  corral_source_split_8703:
    assume {:verifier.code 0} true;
    goto $bb176;

  $bb3:
    assume $i45 == 1;
    assume {:verifier.code 0} true;
    $i49 := $slt.i32($i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb13:
    assume !($i49 == 1);
    goto corral_source_split_8325;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    $i254 := $M.92;
    goto corral_source_split_8326;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    $i255 := $ne.i32($i254, 0);
    goto corral_source_split_8327;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  $bb159:
    assume !($i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb158:
    assume $i255 == 1;
    goto corral_source_split_8684;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} choose_timer_1();
    goto SeqInstr_568, SeqInstr_569;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  SeqInstr_570:
    goto corral_source_split_8685;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    goto $bb160;

  SeqInstr_568:
    assume !assertsPassed;
    return;

  $bb12:
    assume $i49 == 1;
    assume {:verifier.code 0} true;
    $i50 := $eq.i32($i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb15:
    assume {:verifier.code 0} true;
    assume !($i50 == 1);
    goto $bb11;

  $bb14:
    assume $i50 == 1;
    goto corral_source_split_8329;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    $i51 := $M.91;
    goto corral_source_split_8330;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    $i52 := $ne.i32($i51, 0);
    goto corral_source_split_8331;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  $bb17:
    assume !($i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb16:
    assume $i52 == 1;
    goto corral_source_split_8333;

  corral_source_split_8333:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} $i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1550} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i53);
    call {:si_unique_call 1551} {:cexpr "tmp___6"} boogie_si_record_i32($i53);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb18:
    assume {:verifier.code 0} true;
    $i54 := $slt.i32($i53, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  $bb20:
    assume !($i54 == 1);
    assume {:verifier.code 0} true;
    $i55 := $slt.i32($i53, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb22:
    assume !($i55 == 1);
    assume {:verifier.code 0} true;
    $i56 := $slt.i32($i53, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb24:
    assume !($i56 == 1);
    assume {:verifier.code 0} true;
    $i57 := $slt.i32($i53, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb26:
    assume !($i57 == 1);
    assume {:verifier.code 0} true;
    $i58 := $eq.i32($i53, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb28:
    assume {:verifier.code 0} true;
    assume !($i58 == 1);
    goto $bb29;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_stop();
    goto corral_source_split_8682;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb27:
    assume $i58 == 1;
    goto corral_source_split_8339;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    $i242 := $M.91;
    goto corral_source_split_8340;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    $i243 := $eq.i32($i242, 1);
    goto corral_source_split_8341;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  $bb146:
    assume !($i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  $bb147:
    assume {:verifier.code 0} true;
    $i246 := $M.91;
    goto corral_source_split_8666;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    $i247 := $eq.i32($i246, 3);
    goto corral_source_split_8667;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  $bb149:
    assume !($i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  $bb150:
    assume {:verifier.code 0} true;
    $i250 := $M.91;
    goto corral_source_split_8674;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    $i251 := $eq.i32($i250, 2);
    goto corral_source_split_8675;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  $bb152:
    assume !($i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb151:
    assume $i251 == 1;
    goto corral_source_split_8677;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    $p252 := $M.87;
    goto corral_source_split_8678;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} vslice_dummy_var_149 := oxu_get_frame($p252);
    goto SeqInstr_565, SeqInstr_566;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  SeqInstr_567:
    goto corral_source_split_8679;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8680;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    goto $bb153;

  SeqInstr_565:
    assume !assertsPassed;
    return;

  $bb148:
    assume $i247 == 1;
    goto corral_source_split_8669;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    $p248 := $M.87;
    goto corral_source_split_8670;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} vslice_dummy_var_148 := oxu_get_frame($p248);
    goto SeqInstr_562, SeqInstr_563;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  SeqInstr_564:
    goto corral_source_split_8671;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8672;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    goto $bb150;

  SeqInstr_562:
    assume !assertsPassed;
    return;

  $bb145:
    assume $i243 == 1;
    goto corral_source_split_8661;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    $p244 := $M.87;
    goto corral_source_split_8662;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} vslice_dummy_var_147 := oxu_get_frame($p244);
    goto SeqInstr_559, SeqInstr_560;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  SeqInstr_561:
    goto corral_source_split_8663;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8664;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    goto $bb147;

  SeqInstr_559:
    assume !assertsPassed;
    return;

  $bb25:
    assume $i57 == 1;
    goto corral_source_split_8335;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    $i194 := $M.91;
    goto corral_source_split_8336;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    $i195 := $eq.i32($i194, 1);
    goto corral_source_split_8337;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  $bb137:
    assume !($i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  $bb138:
    assume {:verifier.code 0} true;
    $i210 := $M.91;
    goto corral_source_split_8621;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    $i211 := $eq.i32($i210, 3);
    goto corral_source_split_8622;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  $bb140:
    assume !($i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  $bb141:
    assume {:verifier.code 0} true;
    $i226 := $M.91;
    goto corral_source_split_8641;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    $i227 := $eq.i32($i226, 2);
    goto corral_source_split_8642;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  $bb143:
    assume !($i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb142:
    assume $i227 == 1;
    goto corral_source_split_8644;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    $p228 := $M.87;
    goto corral_source_split_8645;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    $i229 := $load.i16($M.85, $p0);
    goto corral_source_split_8646;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    $i230 := $zext.i16.i32($i229);
    goto corral_source_split_8647;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    $i231 := $trunc.i32.i16($i230);
    goto corral_source_split_8648;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    $i232 := $load.i16($M.85, $p5);
    goto corral_source_split_8649;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    $i233 := $zext.i16.i32($i232);
    goto corral_source_split_8650;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    $i234 := $trunc.i32.i16($i233);
    goto corral_source_split_8651;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    $i235 := $load.i16($M.85, $p4);
    goto corral_source_split_8652;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    $i236 := $zext.i16.i32($i235);
    goto corral_source_split_8653;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    $i237 := $trunc.i32.i16($i236);
    goto corral_source_split_8654;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    $i238 := $load.i16($M.85, $p1);
    goto corral_source_split_8655;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    $i239 := $zext.i16.i32($i238);
    goto corral_source_split_8656;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    $i240 := $trunc.i32.i16($i239);
    goto corral_source_split_8657;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} vslice_dummy_var_146 := oxu_hub_control($p228, $i231, $i234, $i237, $p15, $i240);
    goto SeqInstr_556, SeqInstr_557;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  SeqInstr_558:
    goto corral_source_split_8658;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8659;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    goto $bb144;

  SeqInstr_556:
    assume !assertsPassed;
    return;

  $bb139:
    assume $i211 == 1;
    goto corral_source_split_8624;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    $p212 := $M.87;
    goto corral_source_split_8625;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    $i213 := $load.i16($M.85, $p0);
    goto corral_source_split_8626;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    $i214 := $zext.i16.i32($i213);
    goto corral_source_split_8627;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    $i215 := $trunc.i32.i16($i214);
    goto corral_source_split_8628;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    $i216 := $load.i16($M.85, $p5);
    goto corral_source_split_8629;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    $i217 := $zext.i16.i32($i216);
    goto corral_source_split_8630;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    $i218 := $trunc.i32.i16($i217);
    goto corral_source_split_8631;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    $i219 := $load.i16($M.85, $p4);
    goto corral_source_split_8632;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    $i220 := $zext.i16.i32($i219);
    goto corral_source_split_8633;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    $i221 := $trunc.i32.i16($i220);
    goto corral_source_split_8634;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    $i222 := $load.i16($M.85, $p1);
    goto corral_source_split_8635;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    $i223 := $zext.i16.i32($i222);
    goto corral_source_split_8636;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    $i224 := $trunc.i32.i16($i223);
    goto corral_source_split_8637;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} vslice_dummy_var_145 := oxu_hub_control($p212, $i215, $i218, $i221, $p15, $i224);
    goto SeqInstr_553, SeqInstr_554;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  SeqInstr_555:
    goto corral_source_split_8638;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8639;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    goto $bb141;

  SeqInstr_553:
    assume !assertsPassed;
    return;

  $bb136:
    assume $i195 == 1;
    goto corral_source_split_8604;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    $p196 := $M.87;
    goto corral_source_split_8605;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    $i197 := $load.i16($M.85, $p0);
    goto corral_source_split_8606;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    $i198 := $zext.i16.i32($i197);
    goto corral_source_split_8607;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    $i199 := $trunc.i32.i16($i198);
    goto corral_source_split_8608;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    $i200 := $load.i16($M.85, $p5);
    goto corral_source_split_8609;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    $i201 := $zext.i16.i32($i200);
    goto corral_source_split_8610;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    $i202 := $trunc.i32.i16($i201);
    goto corral_source_split_8611;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    $i203 := $load.i16($M.85, $p4);
    goto corral_source_split_8612;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    $i204 := $zext.i16.i32($i203);
    goto corral_source_split_8613;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    $i205 := $trunc.i32.i16($i204);
    goto corral_source_split_8614;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    $i206 := $load.i16($M.85, $p1);
    goto corral_source_split_8615;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    $i207 := $zext.i16.i32($i206);
    goto corral_source_split_8616;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    $i208 := $trunc.i32.i16($i207);
    goto corral_source_split_8617;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} vslice_dummy_var_144 := oxu_hub_control($p196, $i199, $i202, $i205, $p15, $i208);
    goto SeqInstr_550, SeqInstr_551;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  SeqInstr_552:
    goto corral_source_split_8618;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8619;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb138;

  SeqInstr_550:
    assume !assertsPassed;
    return;

  $bb23:
    assume $i56 == 1;
    assume {:verifier.code 0} true;
    $i59 := $slt.i32($i53, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb31:
    assume !($i59 == 1);
    goto corral_source_split_8347;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    $i176 := $M.91;
    goto corral_source_split_8348;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    $i177 := $eq.i32($i176, 1);
    goto corral_source_split_8349;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  $bb128:
    assume !($i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  $bb129:
    assume {:verifier.code 0} true;
    $i182 := $M.91;
    goto corral_source_split_8584;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    $i183 := $eq.i32($i182, 3);
    goto corral_source_split_8585;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  $bb131:
    assume !($i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  $bb132:
    assume {:verifier.code 0} true;
    $i188 := $M.91;
    goto corral_source_split_8594;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    $i189 := $eq.i32($i188, 2);
    goto corral_source_split_8595;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  $bb134:
    assume !($i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb133:
    assume $i189 == 1;
    goto corral_source_split_8597;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    $p190 := $M.87;
    goto corral_source_split_8598;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    $p191 := $M.86;
    goto corral_source_split_8599;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    $i192 := $load.i32($M.85, $p2);
    goto corral_source_split_8600;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} vslice_dummy_var_143 := oxu_urb_enqueue($p190, $p191, $i192);
    goto SeqInstr_547, SeqInstr_548;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  SeqInstr_549:
    goto corral_source_split_8601;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8602;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    goto $bb135;

  SeqInstr_547:
    assume !assertsPassed;
    return;

  $bb130:
    assume $i183 == 1;
    goto corral_source_split_8587;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    $p184 := $M.87;
    goto corral_source_split_8588;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    $p185 := $M.86;
    goto corral_source_split_8589;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    $i186 := $load.i32($M.85, $p2);
    goto corral_source_split_8590;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} vslice_dummy_var_142 := oxu_urb_enqueue($p184, $p185, $i186);
    goto SeqInstr_544, SeqInstr_545;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  SeqInstr_546:
    goto corral_source_split_8591;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8592;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb132;

  SeqInstr_544:
    assume !assertsPassed;
    return;

  $bb127:
    assume $i177 == 1;
    goto corral_source_split_8577;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    $p178 := $M.87;
    goto corral_source_split_8578;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    $p179 := $M.86;
    goto corral_source_split_8579;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    $i180 := $load.i32($M.85, $p2);
    goto corral_source_split_8580;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} vslice_dummy_var_141 := oxu_urb_enqueue($p178, $p179, $i180);
    goto SeqInstr_541, SeqInstr_542;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  SeqInstr_543:
    goto corral_source_split_8581;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8582;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    goto $bb129;

  SeqInstr_541:
    assume !assertsPassed;
    return;

  $bb30:
    assume $i59 == 1;
    goto corral_source_split_8343;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    $i166 := $M.91;
    goto corral_source_split_8344;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    $i167 := $eq.i32($i166, 3);
    goto corral_source_split_8345;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  $bb122:
    assume !($i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  $bb123:
    assume {:verifier.code 0} true;
    $i171 := $M.91;
    goto corral_source_split_8566;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    $i172 := $eq.i32($i171, 2);
    goto corral_source_split_8567;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  $bb125:
    assume !($i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb124:
    assume $i172 == 1;
    goto corral_source_split_8569;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    $p173 := $M.87;
    goto corral_source_split_8570;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} oxu_stop($p173);
    goto SeqInstr_538, SeqInstr_539;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  SeqInstr_540:
    goto corral_source_split_8571;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1604} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8572;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    $i174 := $M.93;
    goto corral_source_split_8573;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    $i175 := $sub.i32($i174, 1);
    goto corral_source_split_8574;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $M.93 := $i175;
    call {:si_unique_call 1605} {:cexpr "ref_cnt"} boogie_si_record_i32($i175);
    goto corral_source_split_8575;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    goto $bb126;

  SeqInstr_538:
    assume !assertsPassed;
    return;

  $bb121:
    assume $i167 == 1;
    goto corral_source_split_8558;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    $p168 := $M.87;
    goto corral_source_split_8559;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} oxu_stop($p168);
    goto SeqInstr_535, SeqInstr_536;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  SeqInstr_537:
    goto corral_source_split_8560;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8561;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    $i169 := $M.93;
    goto corral_source_split_8562;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    $i170 := $sub.i32($i169, 1);
    goto corral_source_split_8563;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $M.93 := $i170;
    call {:si_unique_call 1602} {:cexpr "ref_cnt"} boogie_si_record_i32($i170);
    goto corral_source_split_8564;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    goto $bb123;

  SeqInstr_535:
    assume !assertsPassed;
    return;

  $bb21:
    assume $i55 == 1;
    assume {:verifier.code 0} true;
    $i60 := $slt.i32($i53, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb33:
    assume !($i60 == 1);
    assume {:verifier.code 0} true;
    $i61 := $slt.i32($i53, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb35:
    assume !($i61 == 1);
    goto corral_source_split_8359;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    $i154 := $M.91;
    goto corral_source_split_8360;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    $i155 := $eq.i32($i154, 1);
    goto corral_source_split_8361;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  $bb113:
    assume !($i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  $bb114:
    assume {:verifier.code 0} true;
    $i158 := $M.91;
    goto corral_source_split_8542;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    $i159 := $eq.i32($i158, 3);
    goto corral_source_split_8543;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  $bb116:
    assume !($i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  $bb117:
    assume {:verifier.code 0} true;
    $i162 := $M.91;
    goto corral_source_split_8550;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    $i163 := $eq.i32($i162, 2);
    goto corral_source_split_8551;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  $bb119:
    assume !($i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb118:
    assume $i163 == 1;
    goto corral_source_split_8553;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    $p164 := $M.87;
    goto corral_source_split_8554;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} vslice_dummy_var_140 := oxu_hub_status_data($p164, $p14);
    goto SeqInstr_532, SeqInstr_533;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  SeqInstr_534:
    goto corral_source_split_8555;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1599} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8556;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    goto $bb120;

  SeqInstr_532:
    assume !assertsPassed;
    return;

  $bb115:
    assume $i159 == 1;
    goto corral_source_split_8545;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    $p160 := $M.87;
    goto corral_source_split_8546;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} vslice_dummy_var_139 := oxu_hub_status_data($p160, $p14);
    goto SeqInstr_529, SeqInstr_530;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  SeqInstr_531:
    goto corral_source_split_8547;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8548;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    goto $bb117;

  SeqInstr_529:
    assume !assertsPassed;
    return;

  $bb112:
    assume $i155 == 1;
    goto corral_source_split_8537;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    $p156 := $M.87;
    goto corral_source_split_8538;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} vslice_dummy_var_138 := oxu_hub_status_data($p156, $p14);
    goto SeqInstr_526, SeqInstr_527;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  SeqInstr_528:
    goto corral_source_split_8539;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8540;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb114;

  SeqInstr_526:
    assume !assertsPassed;
    return;

  $bb34:
    assume $i61 == 1;
    goto corral_source_split_8355;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    $i142 := $M.91;
    goto corral_source_split_8356;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    $i143 := $eq.i32($i142, 1);
    goto corral_source_split_8357;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  $bb104:
    assume !($i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  $bb105:
    assume {:verifier.code 0} true;
    $i146 := $M.91;
    goto corral_source_split_8521;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    $i147 := $eq.i32($i146, 3);
    goto corral_source_split_8522;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  $bb107:
    assume !($i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  $bb108:
    assume {:verifier.code 0} true;
    $i150 := $M.91;
    goto corral_source_split_8529;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    $i151 := $eq.i32($i150, 2);
    goto corral_source_split_8530;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  $bb110:
    assume !($i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb109:
    assume $i151 == 1;
    goto corral_source_split_8532;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    $p152 := $M.87;
    goto corral_source_split_8533;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} vslice_dummy_var_137 := oxu_irq($p152);
    goto SeqInstr_523, SeqInstr_524;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  SeqInstr_525:
    goto corral_source_split_8534;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1593} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8535;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    goto $bb111;

  SeqInstr_523:
    assume !assertsPassed;
    return;

  $bb106:
    assume $i147 == 1;
    goto corral_source_split_8524;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    $p148 := $M.87;
    goto corral_source_split_8525;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} vslice_dummy_var_136 := oxu_irq($p148);
    goto SeqInstr_520, SeqInstr_521;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  SeqInstr_522:
    goto corral_source_split_8526;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1591} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8527;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    goto $bb108;

  SeqInstr_520:
    assume !assertsPassed;
    return;

  $bb103:
    assume $i143 == 1;
    goto corral_source_split_8516;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    $p144 := $M.87;
    goto corral_source_split_8517;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} vslice_dummy_var_135 := oxu_irq($p144);
    goto SeqInstr_517, SeqInstr_518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  SeqInstr_519:
    goto corral_source_split_8518;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8519;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    goto $bb105;

  SeqInstr_517:
    assume !assertsPassed;
    return;

  $bb32:
    assume $i60 == 1;
    goto corral_source_split_8351;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    $i130 := $M.91;
    goto corral_source_split_8352;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    $i131 := $eq.i32($i130, 1);
    goto corral_source_split_8353;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  $bb95:
    assume !($i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  $bb96:
    assume {:verifier.code 0} true;
    $i134 := $M.91;
    goto corral_source_split_8500;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    $i135 := $eq.i32($i134, 3);
    goto corral_source_split_8501;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  $bb98:
    assume !($i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  $bb99:
    assume {:verifier.code 0} true;
    $i138 := $M.91;
    goto corral_source_split_8508;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    $i139 := $eq.i32($i138, 2);
    goto corral_source_split_8509;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  $bb101:
    assume !($i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb100:
    assume $i139 == 1;
    goto corral_source_split_8511;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    $p140 := $M.87;
    goto corral_source_split_8512;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} vslice_dummy_var_134 := oxu_reset($p140);
    goto SeqInstr_514, SeqInstr_515;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  SeqInstr_516:
    goto corral_source_split_8513;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8514;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    goto $bb102;

  SeqInstr_514:
    assume !assertsPassed;
    return;

  $bb97:
    assume $i135 == 1;
    goto corral_source_split_8503;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    $p136 := $M.87;
    goto corral_source_split_8504;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} vslice_dummy_var_133 := oxu_reset($p136);
    goto SeqInstr_511, SeqInstr_512;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  SeqInstr_513:
    goto corral_source_split_8505;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8506;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb99;

  SeqInstr_511:
    assume !assertsPassed;
    return;

  $bb94:
    assume $i131 == 1;
    goto corral_source_split_8495;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    $p132 := $M.87;
    goto corral_source_split_8496;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} vslice_dummy_var_132 := oxu_reset($p132);
    goto SeqInstr_508, SeqInstr_509;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  SeqInstr_510:
    goto corral_source_split_8497;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8498;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    goto $bb96;

  SeqInstr_508:
    assume !assertsPassed;
    return;

  $bb19:
    assume $i54 == 1;
    assume {:verifier.code 0} true;
    $i62 := $slt.i32($i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb37:
    assume !($i62 == 1);
    assume {:verifier.code 0} true;
    $i63 := $slt.i32($i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb39:
    assume !($i63 == 1);
    assume {:verifier.code 0} true;
    $i64 := $slt.i32($i53, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb41:
    assume !($i64 == 1);
    goto corral_source_split_8371;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    $i127 := $M.91;
    goto corral_source_split_8372;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    $i128 := $eq.i32($i127, 2);
    goto corral_source_split_8373;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  $bb92:
    assume !($i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb91:
    assume $i128 == 1;
    goto corral_source_split_8490;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    $p129 := $M.87;
    goto corral_source_split_8491;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} oxu_shutdown($p129);
    goto SeqInstr_505, SeqInstr_506;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  SeqInstr_507:
    goto corral_source_split_8492;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8493;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    goto $bb93;

  SeqInstr_505:
    assume !assertsPassed;
    return;

  $bb40:
    assume $i64 == 1;
    goto corral_source_split_8367;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    $i115 := $M.91;
    goto corral_source_split_8368;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    $i116 := $eq.i32($i115, 1);
    goto corral_source_split_8369;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  $bb83:
    assume !($i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  $bb84:
    assume {:verifier.code 0} true;
    $i119 := $M.91;
    goto corral_source_split_8474;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    $i120 := $eq.i32($i119, 3);
    goto corral_source_split_8475;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  $bb86:
    assume !($i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  $bb87:
    assume {:verifier.code 0} true;
    $i123 := $M.91;
    goto corral_source_split_8482;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    $i124 := $eq.i32($i123, 2);
    goto corral_source_split_8483;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  $bb89:
    assume !($i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb88:
    assume $i124 == 1;
    goto corral_source_split_8485;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    $p125 := $M.87;
    goto corral_source_split_8486;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} vslice_dummy_var_131 := oxu_bus_suspend($p125);
    goto SeqInstr_502, SeqInstr_503;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  SeqInstr_504:
    goto corral_source_split_8487;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8488;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb90;

  SeqInstr_502:
    assume !assertsPassed;
    return;

  $bb85:
    assume $i120 == 1;
    goto corral_source_split_8477;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    $p121 := $M.87;
    goto corral_source_split_8478;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} vslice_dummy_var_130 := oxu_bus_suspend($p121);
    goto SeqInstr_499, SeqInstr_500;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  SeqInstr_501:
    goto corral_source_split_8479;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8480;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    goto $bb87;

  SeqInstr_499:
    assume !assertsPassed;
    return;

  $bb82:
    assume $i116 == 1;
    goto corral_source_split_8469;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    $p117 := $M.87;
    goto corral_source_split_8470;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} vslice_dummy_var_129 := oxu_bus_suspend($p117);
    goto SeqInstr_496, SeqInstr_497;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  SeqInstr_498:
    goto corral_source_split_8471;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8472;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    goto $bb84;

  SeqInstr_496:
    assume !assertsPassed;
    return;

  $bb38:
    assume $i63 == 1;
    goto corral_source_split_8363;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    $i103 := $M.91;
    goto corral_source_split_8364;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    $i104 := $eq.i32($i103, 1);
    goto corral_source_split_8365;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  $bb74:
    assume !($i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  $bb75:
    assume {:verifier.code 0} true;
    $i107 := $M.91;
    goto corral_source_split_8453;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    $i108 := $eq.i32($i107, 3);
    goto corral_source_split_8454;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  $bb77:
    assume !($i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  $bb78:
    assume {:verifier.code 0} true;
    $i111 := $M.91;
    goto corral_source_split_8461;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    $i112 := $eq.i32($i111, 2);
    goto corral_source_split_8462;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  $bb80:
    assume !($i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb79:
    assume $i112 == 1;
    goto corral_source_split_8464;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    $p113 := $M.87;
    goto corral_source_split_8465;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} vslice_dummy_var_128 := oxu_bus_resume($p113);
    goto SeqInstr_493, SeqInstr_494;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  SeqInstr_495:
    goto corral_source_split_8466;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8467;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    goto $bb81;

  SeqInstr_493:
    assume !assertsPassed;
    return;

  $bb76:
    assume $i108 == 1;
    goto corral_source_split_8456;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    $p109 := $M.87;
    goto corral_source_split_8457;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} vslice_dummy_var_127 := oxu_bus_resume($p109);
    goto SeqInstr_490, SeqInstr_491;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  SeqInstr_492:
    goto corral_source_split_8458;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8459;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    goto $bb78;

  SeqInstr_490:
    assume !assertsPassed;
    return;

  $bb73:
    assume $i104 == 1;
    goto corral_source_split_8448;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    $p105 := $M.87;
    goto corral_source_split_8449;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} vslice_dummy_var_126 := oxu_bus_resume($p105);
    goto SeqInstr_487, SeqInstr_488;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  SeqInstr_489:
    goto corral_source_split_8450;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8451;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    goto $bb75;

  SeqInstr_487:
    assume !assertsPassed;
    return;

  $bb36:
    assume $i62 == 1;
    assume {:verifier.code 0} true;
    $i65 := $slt.i32($i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb43:
    assume !($i65 == 1);
    assume {:verifier.code 0} true;
    $i66 := $slt.i32($i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb45:
    assume !($i66 == 1);
    goto corral_source_split_8379;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    $i94 := $M.91;
    goto corral_source_split_8380;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    $i95 := $eq.i32($i94, 1);
    goto corral_source_split_8381;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  $bb65:
    assume !($i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  $bb66:
    assume {:verifier.code 0} true;
    $i97 := $M.91;
    goto corral_source_split_8432;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    $i98 := $eq.i32($i97, 3);
    goto corral_source_split_8433;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  $bb68:
    assume !($i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  $bb69:
    assume {:verifier.code 0} true;
    $i100 := $M.91;
    goto corral_source_split_8440;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    $i101 := $eq.i32($i100, 2);
    goto corral_source_split_8441;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  $bb71:
    assume !($i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb70:
    assume $i101 == 1;
    goto corral_source_split_8443;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    $p102 := $M.87;
    goto corral_source_split_8444;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} oxu_endpoint_disable($p102, $p13);
    goto SeqInstr_484, SeqInstr_485;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  SeqInstr_486:
    goto corral_source_split_8445;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8446;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    goto $bb72;

  SeqInstr_484:
    assume !assertsPassed;
    return;

  $bb67:
    assume $i98 == 1;
    goto corral_source_split_8435;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    $p99 := $M.87;
    goto corral_source_split_8436;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} oxu_endpoint_disable($p99, $p13);
    goto SeqInstr_481, SeqInstr_482;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  SeqInstr_483:
    goto corral_source_split_8437;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8438;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    goto $bb69;

  SeqInstr_481:
    assume !assertsPassed;
    return;

  $bb64:
    assume $i95 == 1;
    goto corral_source_split_8427;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    $p96 := $M.87;
    goto corral_source_split_8428;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} oxu_endpoint_disable($p96, $p13);
    goto SeqInstr_478, SeqInstr_479;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  SeqInstr_480:
    goto corral_source_split_8429;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8430;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    goto $bb66;

  SeqInstr_478:
    assume !assertsPassed;
    return;

  $bb44:
    assume $i66 == 1;
    goto corral_source_split_8375;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    $i76 := $M.91;
    goto corral_source_split_8376;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    $i77 := $eq.i32($i76, 1);
    goto corral_source_split_8377;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  $bb56:
    assume !($i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  $bb57:
    assume {:verifier.code 0} true;
    $i82 := $M.91;
    goto corral_source_split_8407;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    $i83 := $eq.i32($i82, 3);
    goto corral_source_split_8408;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  $bb59:
    assume !($i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  $bb60:
    assume {:verifier.code 0} true;
    $i88 := $M.91;
    goto corral_source_split_8417;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    $i89 := $eq.i32($i88, 2);
    goto corral_source_split_8418;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  $bb62:
    assume !($i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb61:
    assume $i89 == 1;
    goto corral_source_split_8420;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    $p90 := $M.87;
    goto corral_source_split_8421;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    $p91 := $M.86;
    goto corral_source_split_8422;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    $i92 := $load.i32($M.85, $p3);
    goto corral_source_split_8423;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} vslice_dummy_var_125 := oxu_urb_dequeue($p90, $p91, $i92);
    goto SeqInstr_475, SeqInstr_476;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  SeqInstr_477:
    goto corral_source_split_8424;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8425;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    goto $bb63;

  SeqInstr_475:
    assume !assertsPassed;
    return;

  $bb58:
    assume $i83 == 1;
    goto corral_source_split_8410;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    $p84 := $M.87;
    goto corral_source_split_8411;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    $p85 := $M.86;
    goto corral_source_split_8412;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    $i86 := $load.i32($M.85, $p3);
    goto corral_source_split_8413;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} vslice_dummy_var_124 := oxu_urb_dequeue($p84, $p85, $i86);
    goto SeqInstr_472, SeqInstr_473;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  SeqInstr_474:
    goto corral_source_split_8414;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8415;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    goto $bb60;

  SeqInstr_472:
    assume !assertsPassed;
    return;

  $bb55:
    assume $i77 == 1;
    goto corral_source_split_8400;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    $p78 := $M.87;
    goto corral_source_split_8401;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    $p79 := $M.86;
    goto corral_source_split_8402;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    $i80 := $load.i32($M.85, $p3);
    goto corral_source_split_8403;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} vslice_dummy_var_123 := oxu_urb_dequeue($p78, $p79, $i80);
    goto SeqInstr_469, SeqInstr_470;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  SeqInstr_471:
    goto corral_source_split_8404;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8405;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    goto $bb57;

  SeqInstr_469:
    assume !assertsPassed;
    return;

  $bb42:
    assume $i65 == 1;
    assume {:verifier.code 0} true;
    $i67 := $eq.i32($i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb47:
    assume {:verifier.code 0} true;
    assume !($i67 == 1);
    goto $bb29;

  $bb46:
    assume $i67 == 1;
    goto corral_source_split_8383;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    $i68 := $M.91;
    goto corral_source_split_8384;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    $i69 := $eq.i32($i68, 1);
    goto corral_source_split_8385;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  $bb49:
    assume !($i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb48:
    assume $i69 == 1;
    goto corral_source_split_8387;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    $p70 := $M.87;
    goto corral_source_split_8388;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} $i71 := oxu_run($p70);
    goto SeqInstr_466, SeqInstr_467;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  SeqInstr_468:
    goto corral_source_split_8389;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.97 := $i71;
    call {:si_unique_call 1553} {:cexpr "ldv_retval_0"} boogie_si_record_i32($i71);
    goto corral_source_split_8390;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    $i72 := $M.97;
    goto corral_source_split_8391;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    $i73 := $eq.i32($i72, 0);
    goto corral_source_split_8392;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  $bb51:
    assume !($i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb50:
    assume $i73 == 1;
    goto corral_source_split_8394;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8395;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    $i74 := $M.93;
    goto corral_source_split_8396;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    $i75 := $add.i32($i74, 1);
    goto corral_source_split_8397;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $M.93 := $i75;
    call {:si_unique_call 1555} {:cexpr "ref_cnt"} boogie_si_record_i32($i75);
    goto corral_source_split_8398;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    goto $bb52;

  SeqInstr_466:
    assume !assertsPassed;
    return;

  $bb157_dummy:
    assume false;
    return;

  $bb1_last:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1546} $i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 1547} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i44);
    call {:si_unique_call 1548} {:cexpr "tmp___5"} boogie_si_record_i32($i44);
    assume {:verifier.code 0} true;
    goto $bb2;
}



const ldv_initialize: ref;

axiom ldv_initialize == $sub.ref(0, 403053);

procedure ldv_initialize();
  free requires assertsPassed;



implementation ldv_initialize()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9181;

  corral_source_split_9181:
    assume {:verifier.code 0} true;
    return;
}



const oxu_driver_exit: ref;

axiom oxu_driver_exit == $sub.ref(0, 404085);

procedure oxu_driver_exit();
  free requires assertsPassed;
  modifies $M.96;



implementation oxu_driver_exit()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9183;

  corral_source_split_9183:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1745} ldv_platform_driver_unregister_31(oxu_driver);
    goto corral_source_split_9184;

  corral_source_split_9184:
    assume {:verifier.code 0} true;
    return;
}



const oxu_driver_init: ref;

axiom oxu_driver_init == $sub.ref(0, 405117);

procedure oxu_driver_init() returns ($r: i32);
  free requires assertsPassed;
  modifies $M.96, $M.90, $M.0, $CurrAddr;



implementation oxu_driver_init() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9186;

  corral_source_split_9186:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1746} $i0 := ldv___platform_driver_register_30(oxu_driver, __this_module);
    call {:si_unique_call 1747} {:cexpr "tmp"} boogie_si_record_i32($i0);
    goto corral_source_split_9187;

  corral_source_split_9187:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_resume_2: ref;

axiom ldv_resume_2 == $sub.ref(0, 406149);

procedure ldv_resume_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_resume_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9189;

  corral_source_split_9189:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1748} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1749} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9190;

  corral_source_split_9190:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_suspend_2: ref;

axiom ldv_suspend_2 == $sub.ref(0, 407181);

procedure ldv_suspend_2() returns ($r: i32);
  free requires assertsPassed;



implementation ldv_suspend_2() returns ($r: i32)
{
  var $i0: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9192;

  corral_source_split_9192:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1750} $i0 := __VERIFIER_nondet_int();
    call {:si_unique_call 1751} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i0);
    goto corral_source_split_9193;

  corral_source_split_9193:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const ldv_check_final_state: ref;

axiom ldv_check_final_state == $sub.ref(0, 408213);

procedure ldv_check_final_state();
  free requires assertsPassed;



implementation ldv_check_final_state()
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9195;

  corral_source_split_9195:
    assume {:verifier.code 0} true;
    return;
}



const ldv___platform_driver_register_30: ref;

axiom ldv___platform_driver_register_30 == $sub.ref(0, 409245);

procedure ldv___platform_driver_register_30($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.96, $M.90, $M.0, $CurrAddr;



implementation ldv___platform_driver_register_30($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9197;

  corral_source_split_9197:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1752} $i2 := __platform_driver_register($p0, $p1);
    call {:si_unique_call 1753} {:cexpr "tmp"} boogie_si_record_i32($i2);
    goto corral_source_split_9198;

  corral_source_split_9198:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1754} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9199;

  corral_source_split_9199:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1755} ldv_platform_driver_init_2();
    goto corral_source_split_9200;

  corral_source_split_9200:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const __platform_driver_register: ref;

axiom __platform_driver_register == $sub.ref(0, 410277);

procedure __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32);
  free requires assertsPassed;



implementation __platform_driver_register($p0: ref, $p1: ref) returns ($r: i32)
{
  var $i2: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9202;

  corral_source_split_9202:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1756} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1757} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9203;

  corral_source_split_9203:
    assume {:verifier.code 0} true;
    $r := $i2;
    return;
}



const ldv_platform_driver_unregister_31: ref;

axiom ldv_platform_driver_unregister_31 == $sub.ref(0, 411309);

procedure ldv_platform_driver_unregister_31($p0: ref);
  free requires assertsPassed;
  modifies $M.96;



implementation ldv_platform_driver_unregister_31($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9205;

  corral_source_split_9205:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1758} platform_driver_unregister($p0);
    goto corral_source_split_9206;

  corral_source_split_9206:
    assume {:verifier.code 0} true;
    $M.96 := 0;
    call {:si_unique_call 1759} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    goto corral_source_split_9207;

  corral_source_split_9207:
    assume {:verifier.code 0} true;
    return;
}



const platform_driver_unregister: ref;

axiom platform_driver_unregister == $sub.ref(0, 412341);

procedure platform_driver_unregister($p0: ref);
  free requires assertsPassed;



implementation platform_driver_unregister($p0: ref)
{

  $bb0:
    assume {:verifier.code 0} true;
    goto corral_source_split_9209;

  corral_source_split_9209:
    assume {:verifier.code 0} true;
    return;
}



const __VERIFIER_assume: ref;

axiom __VERIFIER_assume == $sub.ref(0, 413373);

procedure __VERIFIER_assume($i0: i32);
  free requires assertsPassed;



implementation __VERIFIER_assume($i0: i32)
{

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1760} {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
    goto corral_source_split_9211;

  corral_source_split_9211:
    assume {:verifier.code 1} true;
    goto corral_source_split_9212;

  corral_source_split_9212:
    assume {:verifier.code 1} true;
    assume $i0 != $0;
    goto corral_source_split_9213;

  corral_source_split_9213:
    assume {:verifier.code 0} true;
    return;
}



const __SMACK_code: ref;

axiom __SMACK_code == $sub.ref(0, 414405);

procedure __SMACK_code.ref($p0: ref);



procedure __SMACK_code.ref.i32($p0: ref, p.1: i32);



const __SMACK_dummy: ref;

axiom __SMACK_dummy == $sub.ref(0, 415437);

procedure __SMACK_dummy($i0: i32);



const __VERIFIER_error: ref;

axiom __VERIFIER_error == $sub.ref(0, 416469);

procedure __VERIFIER_error();
  free requires assertsPassed;
  modifies assertsPassed;



implementation __VERIFIER_error()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9215;

  corral_source_split_9215:
    assume {:verifier.code 1} true;
    goto assert_rewrite_dummy_block_0, assert_rewrite_dummy_block_1;

  assert_rewrite_dummy_block_1:
    assume false;
    return;

  assert_rewrite_dummy_block_0:
    assume {:corral_assert_pt} !false;
    assertsPassed := false;
    goto SeqInstr_676, SeqInstr_677;

  SeqInstr_677:
    assume assertsPassed;
    goto SeqInstr_678;

  SeqInstr_678:
    goto assert_rewrite_dummy_block_2;

  assert_rewrite_dummy_block_2:
    goto corral_source_split_9216;

  corral_source_split_9216:
    assume {:verifier.code 0} true;
    return;

  SeqInstr_676:
    assume !assertsPassed;
    return;
}



const __SMACK_check_overflow: ref;

axiom __SMACK_check_overflow == $sub.ref(0, 417501);

procedure __SMACK_check_overflow($i0: i32);



const __SMACK_nondet_char: ref;

axiom __SMACK_nondet_char == $sub.ref(0, 418533);

procedure __SMACK_nondet_char() returns ($r: i8);



const __SMACK_nondet_signed_char: ref;

axiom __SMACK_nondet_signed_char == $sub.ref(0, 419565);

procedure __SMACK_nondet_signed_char() returns ($r: i8);



const __SMACK_nondet_unsigned_char: ref;

axiom __SMACK_nondet_unsigned_char == $sub.ref(0, 420597);

procedure __SMACK_nondet_unsigned_char() returns ($r: i8);



const __SMACK_nondet_short: ref;

axiom __SMACK_nondet_short == $sub.ref(0, 421629);

procedure __SMACK_nondet_short() returns ($r: i16);



const __SMACK_nondet_signed_short: ref;

axiom __SMACK_nondet_signed_short == $sub.ref(0, 422661);

procedure __SMACK_nondet_signed_short() returns ($r: i16);



const __SMACK_nondet_signed_short_int: ref;

axiom __SMACK_nondet_signed_short_int == $sub.ref(0, 423693);

procedure __SMACK_nondet_signed_short_int() returns ($r: i16);



const __SMACK_nondet_unsigned_short: ref;

axiom __SMACK_nondet_unsigned_short == $sub.ref(0, 424725);

procedure __SMACK_nondet_unsigned_short() returns ($r: i16);



const __SMACK_nondet_unsigned_short_int: ref;

axiom __SMACK_nondet_unsigned_short_int == $sub.ref(0, 425757);

procedure __SMACK_nondet_unsigned_short_int() returns ($r: i16);



const __VERIFIER_nondet_int: ref;

axiom __VERIFIER_nondet_int == $sub.ref(0, 426789);

procedure __VERIFIER_nondet_int() returns ($r: i32);
  free requires assertsPassed;



implementation __VERIFIER_nondet_int() returns ($r: i32)
{
  var $i0: i32;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9218;

  corral_source_split_9218:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1761} $i0 := __SMACK_nondet_int();
    call {:si_unique_call 1762} {:cexpr "smack:ext:__SMACK_nondet_int"} boogie_si_record_i32($i0);
    call {:si_unique_call 1763} {:cexpr "x"} boogie_si_record_i32($i0);
    goto corral_source_split_9219;

  corral_source_split_9219:
    assume {:verifier.code 0} true;
    $i1 := $sge.i32($i0, $sub.i32(0, 2147483648));
    goto corral_source_split_9220;

  corral_source_split_9220:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9224;

  corral_source_split_9224:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9225;

  corral_source_split_9225:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1764} __VERIFIER_assume($i4);
    goto corral_source_split_9226;

  corral_source_split_9226:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9222;

  corral_source_split_9222:
    assume {:verifier.code 1} true;
    $i3 := $sle.i32($i0, 2147483647);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_int: ref;

axiom __SMACK_nondet_int == $sub.ref(0, 427821);

procedure __SMACK_nondet_int() returns ($r: i32);



const __SMACK_nondet_signed_int: ref;

axiom __SMACK_nondet_signed_int == $sub.ref(0, 428853);

procedure __SMACK_nondet_signed_int() returns ($r: i32);



const __SMACK_nondet_unsigned: ref;

axiom __SMACK_nondet_unsigned == $sub.ref(0, 429885);

procedure __SMACK_nondet_unsigned() returns ($r: i32);



const __SMACK_nondet_unsigned_int: ref;

axiom __SMACK_nondet_unsigned_int == $sub.ref(0, 430917);

procedure __SMACK_nondet_unsigned_int() returns ($r: i32);



const __VERIFIER_nondet_long: ref;

axiom __VERIFIER_nondet_long == $sub.ref(0, 431949);

procedure __VERIFIER_nondet_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i1;
  var $i3: i1;
  var $i2: i1;
  var $i4: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9228;

  corral_source_split_9228:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1765} $i0 := __SMACK_nondet_long();
    call {:si_unique_call 1766} {:cexpr "smack:ext:__SMACK_nondet_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1767} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9229;

  corral_source_split_9229:
    assume {:verifier.code 0} true;
    $i1 := $sge.i64($i0, $sub.i64(0, 9223372036854775808));
    goto corral_source_split_9230;

  corral_source_split_9230:
    assume {:verifier.code 0} true;
    $i2 := 0;
    assume {:branchcond $i1} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i1 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9234;

  corral_source_split_9234:
    assume {:verifier.code 1} true;
    $i4 := $zext.i1.i32($i2);
    goto corral_source_split_9235;

  corral_source_split_9235:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1768} __VERIFIER_assume($i4);
    goto corral_source_split_9236;

  corral_source_split_9236:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb1:
    assume $i1 == 1;
    goto corral_source_split_9232;

  corral_source_split_9232:
    assume {:verifier.code 1} true;
    $i3 := $sle.i64($i0, 9223372036854775807);
    assume {:verifier.code 0} true;
    $i2 := $i3;
    goto $bb3;
}



const __SMACK_nondet_long: ref;

axiom __SMACK_nondet_long == $sub.ref(0, 432981);

procedure __SMACK_nondet_long() returns ($r: i64);



const __SMACK_nondet_long_int: ref;

axiom __SMACK_nondet_long_int == $sub.ref(0, 434013);

procedure __SMACK_nondet_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long: ref;

axiom __SMACK_nondet_signed_long == $sub.ref(0, 435045);

procedure __SMACK_nondet_signed_long() returns ($r: i64);



const __SMACK_nondet_signed_long_int: ref;

axiom __SMACK_nondet_signed_long_int == $sub.ref(0, 436077);

procedure __SMACK_nondet_signed_long_int() returns ($r: i64);



const __VERIFIER_nondet_unsigned_long: ref;

axiom __VERIFIER_nondet_unsigned_long == $sub.ref(0, 437109);

procedure __VERIFIER_nondet_unsigned_long() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_unsigned_long() returns ($r: i64)
{
  var $i0: i64;
  var $i1: i64;
  var $i2: i64;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i4: i1;
  var $i7: i32;
  var $i8: i1;
  var $i10: i1;
  var $i9: i1;
  var $i11: i32;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9238;

  corral_source_split_9238:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1769} $i0 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1770} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1771} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9239;

  corral_source_split_9239:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1772} $i1 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1773} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i1);
    call {:si_unique_call 1774} {:cexpr "min"} boogie_si_record_i64($i1);
    goto corral_source_split_9240;

  corral_source_split_9240:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1775} $i2 := __SMACK_nondet_unsigned_long();
    call {:si_unique_call 1776} {:cexpr "smack:ext:__SMACK_nondet_unsigned_long"} boogie_si_record_i64($i2);
    call {:si_unique_call 1777} {:cexpr "max"} boogie_si_record_i64($i2);
    goto corral_source_split_9241;

  corral_source_split_9241:
    assume {:verifier.code 0} true;
    $i3 := $eq.i64($i1, 0);
    goto corral_source_split_9242;

  corral_source_split_9242:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume {:verifier.code 0} true;
    assume !($i3 == 1);
    goto $bb3;

  $bb3:
    assume {:verifier.code 1} true;
    goto corral_source_split_9247;

  corral_source_split_9247:
    assume {:verifier.code 1} true;
    $i7 := $zext.i1.i32($i4);
    goto corral_source_split_9248;

  corral_source_split_9248:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1778} __VERIFIER_assume($i7);
    goto corral_source_split_9249;

  corral_source_split_9249:
    assume {:verifier.code 0} true;
    $i8 := $uge.i64($i0, $i1);
    goto corral_source_split_9250;

  corral_source_split_9250:
    assume {:verifier.code 0} true;
    $i9 := 0;
    assume {:branchcond $i8} true;
    goto $bb6, $bb7;

  $bb7:
    assume {:verifier.code 0} true;
    assume !($i8 == 1);
    goto $bb8;

  $bb8:
    assume {:verifier.code 1} true;
    goto corral_source_split_9256;

  corral_source_split_9256:
    assume {:verifier.code 1} true;
    $i11 := $zext.i1.i32($i9);
    goto corral_source_split_9257;

  corral_source_split_9257:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1779} __VERIFIER_assume($i11);
    goto corral_source_split_9258;

  corral_source_split_9258:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;

  $bb6:
    assume $i8 == 1;
    goto corral_source_split_9254;

  corral_source_split_9254:
    assume {:verifier.code 1} true;
    $i10 := $ule.i64($i0, $i2);
    assume {:verifier.code 0} true;
    $i9 := $i10;
    goto $bb8;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9244;

  corral_source_split_9244:
    assume {:verifier.code 0} true;
    $i5 := $uge.i64($i2, 18446744073709551615);
    goto corral_source_split_9245;

  corral_source_split_9245:
    assume {:verifier.code 0} true;
    $i4 := 0;
    assume {:branchcond $i5} true;
    goto $bb4, $bb5;

  $bb5:
    assume {:verifier.code 0} true;
    assume !($i5 == 1);
    goto $bb3;

  $bb4:
    assume $i5 == 1;
    goto corral_source_split_9252;

  corral_source_split_9252:
    assume {:verifier.code 1} true;
    $i6 := $ule.i64($i2, 18446744073709551615);
    assume {:verifier.code 0} true;
    $i4 := $i6;
    goto $bb3;
}



const __SMACK_nondet_unsigned_long: ref;

axiom __SMACK_nondet_unsigned_long == $sub.ref(0, 438141);

procedure __SMACK_nondet_unsigned_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_int: ref;

axiom __SMACK_nondet_unsigned_long_int == $sub.ref(0, 439173);

procedure __SMACK_nondet_unsigned_long_int() returns ($r: i64);



const __SMACK_nondet_long_long: ref;

axiom __SMACK_nondet_long_long == $sub.ref(0, 440205);

procedure __SMACK_nondet_long_long() returns ($r: i64);



const __SMACK_nondet_long_long_int: ref;

axiom __SMACK_nondet_long_long_int == $sub.ref(0, 441237);

procedure __SMACK_nondet_long_long_int() returns ($r: i64);



const __SMACK_nondet_signed_long_long: ref;

axiom __SMACK_nondet_signed_long_long == $sub.ref(0, 442269);

procedure __SMACK_nondet_signed_long_long() returns ($r: i64);



const __SMACK_nondet_signed_long_long_int: ref;

axiom __SMACK_nondet_signed_long_long_int == $sub.ref(0, 443301);

procedure __SMACK_nondet_signed_long_long_int() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long: ref;

axiom __SMACK_nondet_unsigned_long_long == $sub.ref(0, 444333);

procedure __SMACK_nondet_unsigned_long_long() returns ($r: i64);



const __SMACK_nondet_unsigned_long_long_int: ref;

axiom __SMACK_nondet_unsigned_long_long_int == $sub.ref(0, 445365);

procedure __SMACK_nondet_unsigned_long_long_int() returns ($r: i64);



const __VERIFIER_nondet_ulong: ref;

axiom __VERIFIER_nondet_ulong == $sub.ref(0, 446397);

procedure __VERIFIER_nondet_ulong() returns ($r: i64);
  free requires assertsPassed;



implementation __VERIFIER_nondet_ulong() returns ($r: i64)
{
  var $i0: i64;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9260;

  corral_source_split_9260:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1780} $i0 := __VERIFIER_nondet_unsigned_long();
    call {:si_unique_call 1781} {:cexpr "smack:ext:__VERIFIER_nondet_unsigned_long"} boogie_si_record_i64($i0);
    call {:si_unique_call 1782} {:cexpr "x"} boogie_si_record_i64($i0);
    goto corral_source_split_9261;

  corral_source_split_9261:
    assume {:verifier.code 0} true;
    $r := $i0;
    return;
}



const __VERIFIER_nondet_pointer: ref;

axiom __VERIFIER_nondet_pointer == $sub.ref(0, 447429);

procedure __VERIFIER_nondet_pointer() returns ($r: ref);
  free requires assertsPassed;



implementation __VERIFIER_nondet_pointer() returns ($r: ref)
{
  var $p0: ref;

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9263;

  corral_source_split_9263:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1783} $p0 := __VERIFIER_nondet();
    call {:si_unique_call 1784} {:cexpr "smack:ext:__VERIFIER_nondet"} boogie_si_record_ref($p0);
    goto corral_source_split_9264;

  corral_source_split_9264:
    assume {:verifier.code 0} true;
    $r := $p0;
    return;
}



const __VERIFIER_nondet: ref;

axiom __VERIFIER_nondet == $sub.ref(0, 448461);

procedure __VERIFIER_nondet() returns ($r: ref);



const __SMACK_decls: ref;

axiom __SMACK_decls == $sub.ref(0, 449493);

function {:inline} $bitcast.ref.ref(i: ref) : ref
{
  i
}

function {:inline} $zext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 1bv8)
}

function {:inline} $zext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 1bv16)
}

function {:inline} $zext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 1bv24)
}

function {:inline} $zext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 1bv32)
}

function {:inline} $zext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1bv40)
}

function {:inline} $zext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 1bv48)
}

function {:inline} $zext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 1bv56)
}

function {:inline} $zext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 1bv64)
}

function {:inline} $zext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1bv80)
}

function {:inline} $zext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 1bv88)
}

function {:inline} $zext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 1bv96)
}

function {:inline} $zext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 1bv128)
}

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ zero_extend 120)"} $zext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ zero_extend 112)"} $zext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ zero_extend 104)"} $zext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ zero_extend 96)"} $zext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ zero_extend 56)"} $zext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ zero_extend 88)"} $zext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ zero_extend 80)"} $zext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ zero_extend 72)"} $zext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ zero_extend 24)"} $zext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ zero_extend 64)"} $zext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ zero_extend 16)"} $zext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ zero_extend 48)"} $zext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ zero_extend 8)"} $zext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ zero_extend 40)"} $zext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ zero_extend 32)"} $zext.bv96.bv128(i: bv96) : bv128;

function {:inline} $sext.bv1.bv8(i: bv1) : bv8
{
  (if i == 0bv1 then 0bv8 else 255bv8)
}

function {:inline} $sext.bv1.bv16(i: bv1) : bv16
{
  (if i == 0bv1 then 0bv16 else 65535bv16)
}

function {:inline} $sext.bv1.bv24(i: bv1) : bv24
{
  (if i == 0bv1 then 0bv24 else 16777215bv24)
}

function {:inline} $sext.bv1.bv32(i: bv1) : bv32
{
  (if i == 0bv1 then 0bv32 else 4294967295bv32)
}

function {:inline} $sext.bv1.bv40(i: bv1) : bv40
{
  (if i == 0bv1 then 0bv40 else 1099511627775bv40)
}

function {:inline} $sext.bv1.bv48(i: bv1) : bv48
{
  (if i == 0bv1 then 0bv48 else 281474976710655bv48)
}

function {:inline} $sext.bv1.bv56(i: bv1) : bv56
{
  (if i == 0bv1 then 0bv56 else 72057594037927935bv56)
}

function {:inline} $sext.bv1.bv64(i: bv1) : bv64
{
  (if i == 0bv1 then 0bv64 else 18446744073709551615bv64)
}

function {:inline} $sext.bv1.bv80(i: bv1) : bv80
{
  (if i == 0bv1 then 0bv80 else 1208925819614629174706175bv80)
}

function {:inline} $sext.bv1.bv88(i: bv1) : bv88
{
  (if i == 0bv1 then 0bv88 else 309485009821345068724781055bv88)
}

function {:inline} $sext.bv1.bv96(i: bv1) : bv96
{
  (if i == 0bv1 then 0bv96 else 79228162514264337593543950335bv96)
}

function {:inline} $sext.bv1.bv128(i: bv1) : bv128
{
  (if i == 0bv1 then 0bv128 else 340282366920938463463374607431768211455bv128)
}

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv8.bv16(i: bv8) : bv16;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv8.bv24(i: bv8) : bv24;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv8.bv32(i: bv8) : bv32;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv8.bv40(i: bv8) : bv40;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv8.bv48(i: bv8) : bv48;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv8.bv56(i: bv8) : bv56;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv8.bv64(i: bv8) : bv64;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv8.bv80(i: bv8) : bv80;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv8.bv88(i: bv8) : bv88;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv8.bv96(i: bv8) : bv96;

function {:bvbuiltin "(_ sign_extend 120)"} $sext.bv8.bv128(i: bv8) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv16.bv24(i: bv16) : bv24;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv16.bv32(i: bv16) : bv32;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv16.bv40(i: bv16) : bv40;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv16.bv48(i: bv16) : bv48;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv16.bv56(i: bv16) : bv56;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv16.bv64(i: bv16) : bv64;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv16.bv80(i: bv16) : bv80;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv16.bv88(i: bv16) : bv88;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv16.bv96(i: bv16) : bv96;

function {:bvbuiltin "(_ sign_extend 112)"} $sext.bv16.bv128(i: bv16) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv24.bv32(i: bv24) : bv32;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv24.bv40(i: bv24) : bv40;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv24.bv48(i: bv24) : bv48;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv24.bv56(i: bv24) : bv56;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv24.bv64(i: bv24) : bv64;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv24.bv80(i: bv24) : bv80;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv24.bv88(i: bv24) : bv88;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv24.bv96(i: bv24) : bv96;

function {:bvbuiltin "(_ sign_extend 104)"} $sext.bv24.bv128(i: bv24) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv32.bv40(i: bv32) : bv40;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv32.bv48(i: bv32) : bv48;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv32.bv56(i: bv32) : bv56;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv32.bv64(i: bv32) : bv64;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv32.bv80(i: bv32) : bv80;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv32.bv88(i: bv32) : bv88;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv32.bv96(i: bv32) : bv96;

function {:bvbuiltin "(_ sign_extend 96)"} $sext.bv32.bv128(i: bv32) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv40.bv48(i: bv40) : bv48;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv40.bv56(i: bv40) : bv56;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv40.bv64(i: bv40) : bv64;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv40.bv80(i: bv40) : bv80;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv40.bv88(i: bv40) : bv88;

function {:bvbuiltin "(_ sign_extend 56)"} $sext.bv40.bv96(i: bv40) : bv96;

function {:bvbuiltin "(_ sign_extend 88)"} $sext.bv40.bv128(i: bv40) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv48.bv56(i: bv48) : bv56;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv48.bv64(i: bv48) : bv64;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv48.bv80(i: bv48) : bv80;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv48.bv88(i: bv48) : bv88;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv48.bv96(i: bv48) : bv96;

function {:bvbuiltin "(_ sign_extend 80)"} $sext.bv48.bv128(i: bv48) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv56.bv64(i: bv56) : bv64;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv56.bv80(i: bv56) : bv80;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv56.bv88(i: bv56) : bv88;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv56.bv96(i: bv56) : bv96;

function {:bvbuiltin "(_ sign_extend 72)"} $sext.bv56.bv128(i: bv56) : bv128;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv64.bv80(i: bv64) : bv80;

function {:bvbuiltin "(_ sign_extend 24)"} $sext.bv64.bv88(i: bv64) : bv88;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv64.bv96(i: bv64) : bv96;

function {:bvbuiltin "(_ sign_extend 64)"} $sext.bv64.bv128(i: bv64) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv80.bv88(i: bv80) : bv88;

function {:bvbuiltin "(_ sign_extend 16)"} $sext.bv80.bv96(i: bv80) : bv96;

function {:bvbuiltin "(_ sign_extend 48)"} $sext.bv80.bv128(i: bv80) : bv128;

function {:bvbuiltin "(_ sign_extend 8)"} $sext.bv88.bv96(i: bv88) : bv96;

function {:bvbuiltin "(_ sign_extend 40)"} $sext.bv88.bv128(i: bv88) : bv128;

function {:bvbuiltin "(_ sign_extend 32)"} $sext.bv96.bv128(i: bv96) : bv128;

function {:builtin "div"} $div(i1: int, i2: int) : int;

function {:builtin "mod"} $mod(i1: int, i2: int) : int;

function {:builtin "rem"} $rem(i1: int, i2: int) : int;

function {:inline} $min(i1: int, i2: int) : int
{
  (if i1 < i2 then i1 else i2)
}

function {:inline} $max(i1: int, i2: int) : int
{
  (if i1 > i2 then i1 else i2)
}

axiom $and.i1(0, 0) == 0;

axiom $and.i1(0, 1) == 0;

axiom $and.i1(1, 0) == 0;

axiom $and.i1(1, 1) == 1;

axiom $or.i1(0, 0) == 0;

axiom $or.i1(0, 1) == 1;

axiom $or.i1(1, 0) == 1;

axiom $or.i1(1, 1) == 1;

axiom $xor.i1(0, 0) == 0;

axiom $xor.i1(0, 1) == 1;

axiom $xor.i1(1, 0) == 1;

axiom $xor.i1(1, 1) == 0;

axiom $and.i32(32, 16) == 0;

function $fp(ipart: int, fpart: int, epart: int) : float;

function $fadd.float(i1: float, i2: float) : float;

function $fsub.float(i1: float, i2: float) : float;

function $fmul.float(i1: float, i2: float) : float;

function $fdiv.float(i1: float, i2: float) : float;

function $frem.float(i1: float, i2: float) : float;

function {:inline} $ffalse.float.bool(i1: float, i2: float) : bool
{
  false
}

function {:inline} $ftrue.float.bool(i1: float, i2: float) : bool
{
  true
}

function $foeq.float.bool(i1: float, i2: float) : bool;

function $foge.float.bool(i1: float, i2: float) : bool;

function $fogt.float.bool(i1: float, i2: float) : bool;

function $fole.float.bool(i1: float, i2: float) : bool;

function $folt.float.bool(i1: float, i2: float) : bool;

function $fone.float.bool(i1: float, i2: float) : bool;

function $ford.float.bool(i1: float, i2: float) : bool;

function $fueq.float.bool(i1: float, i2: float) : bool;

function $fuge.float.bool(i1: float, i2: float) : bool;

function $fugt.float.bool(i1: float, i2: float) : bool;

function $fule.float.bool(i1: float, i2: float) : bool;

function $fult.float.bool(i1: float, i2: float) : bool;

function $fune.float.bool(i1: float, i2: float) : bool;

function $funo.float.bool(i1: float, i2: float) : bool;

function $fp2si.float.i128(i: float) : i128;

function $fp2ui.float.i128(i: float) : i128;

function $fp2si.float.i96(i: float) : i96;

function $fp2ui.float.i96(i: float) : i96;

function $fp2si.float.i88(i: float) : i88;

function $fp2ui.float.i88(i: float) : i88;

function $fp2si.float.i80(i: float) : i80;

function $fp2ui.float.i80(i: float) : i80;

function $fp2si.float.i64(i: float) : i64;

function $fp2ui.float.i64(i: float) : i64;

function $fp2si.float.i56(i: float) : i56;

function $fp2ui.float.i56(i: float) : i56;

function $fp2si.float.i48(i: float) : i48;

function $fp2ui.float.i48(i: float) : i48;

function $fp2si.float.i40(i: float) : i40;

function $fp2ui.float.i40(i: float) : i40;

function $fp2si.float.i32(i: float) : i32;

function $fp2ui.float.i32(i: float) : i32;

function $fp2si.float.i24(i: float) : i24;

function $fp2ui.float.i24(i: float) : i24;

function $fp2si.float.i16(i: float) : i16;

function $fp2ui.float.i16(i: float) : i16;

function $fp2si.float.i8(i: float) : i8;

function $fp2ui.float.i8(i: float) : i8;

function $fp2si.float.i1(i: float) : i1;

function $fp2ui.float.i1(i: float) : i1;

function $si2fp.i128.float(i: i128) : float;

function $ui2fp.i128.float(i: i128) : float;

function $si2fp.i96.float(i: i96) : float;

function $ui2fp.i96.float(i: i96) : float;

function $si2fp.i88.float(i: i88) : float;

function $ui2fp.i88.float(i: i88) : float;

function $si2fp.i80.float(i: i80) : float;

function $ui2fp.i80.float(i: i80) : float;

function $si2fp.i64.float(i: i64) : float;

function $ui2fp.i64.float(i: i64) : float;

function $si2fp.i56.float(i: i56) : float;

function $ui2fp.i56.float(i: i56) : float;

function $si2fp.i48.float(i: i48) : float;

function $ui2fp.i48.float(i: i48) : float;

function $si2fp.i40.float(i: i40) : float;

function $ui2fp.i40.float(i: i40) : float;

function $si2fp.i32.float(i: i32) : float;

function $ui2fp.i32.float(i: i32) : float;

function $si2fp.i24.float(i: i24) : float;

function $ui2fp.i24.float(i: i24) : float;

function $si2fp.i16.float(i: i16) : float;

function $ui2fp.i16.float(i: i16) : float;

function $si2fp.i8.float(i: i8) : float;

function $ui2fp.i8.float(i: i8) : float;

function $si2fp.i1.float(i: i1) : float;

function $ui2fp.i1.float(i: i1) : float;

function $fp2si.float.bv128(i: float) : bv128;

function $fp2ui.float.bv128(i: float) : bv128;

function $fp2si.float.bv96(i: float) : bv96;

function $fp2ui.float.bv96(i: float) : bv96;

function $fp2si.float.bv88(i: float) : bv88;

function $fp2ui.float.bv88(i: float) : bv88;

function $fp2si.float.bv80(i: float) : bv80;

function $fp2ui.float.bv80(i: float) : bv80;

function $fp2si.float.bv64(i: float) : bv64;

function $fp2ui.float.bv64(i: float) : bv64;

function $fp2si.float.bv56(i: float) : bv56;

function $fp2ui.float.bv56(i: float) : bv56;

function $fp2si.float.bv48(i: float) : bv48;

function $fp2ui.float.bv48(i: float) : bv48;

function $fp2si.float.bv40(i: float) : bv40;

function $fp2ui.float.bv40(i: float) : bv40;

function $fp2si.float.bv32(i: float) : bv32;

function $fp2ui.float.bv32(i: float) : bv32;

function $fp2si.float.bv24(i: float) : bv24;

function $fp2ui.float.bv24(i: float) : bv24;

function $fp2si.float.bv16(i: float) : bv16;

function $fp2ui.float.bv16(i: float) : bv16;

function $fp2si.float.bv8(i: float) : bv8;

function $fp2ui.float.bv8(i: float) : bv8;

function $fp2si.float.bv1(i: float) : bv1;

function $fp2ui.float.bv1(i: float) : bv1;

function $si2fp.bv128.float(i: bv128) : float;

function $ui2fp.bv128.float(i: bv128) : float;

function $si2fp.bv96.float(i: bv96) : float;

function $ui2fp.bv96.float(i: bv96) : float;

function $si2fp.bv88.float(i: bv88) : float;

function $ui2fp.bv88.float(i: bv88) : float;

function $si2fp.bv80.float(i: bv80) : float;

function $ui2fp.bv80.float(i: bv80) : float;

function $si2fp.bv64.float(i: bv64) : float;

function $ui2fp.bv64.float(i: bv64) : float;

function $si2fp.bv56.float(i: bv56) : float;

function $ui2fp.bv56.float(i: bv56) : float;

function $si2fp.bv48.float(i: bv48) : float;

function $ui2fp.bv48.float(i: bv48) : float;

function $si2fp.bv40.float(i: bv40) : float;

function $ui2fp.bv40.float(i: bv40) : float;

function $si2fp.bv32.float(i: bv32) : float;

function $ui2fp.bv32.float(i: bv32) : float;

function $si2fp.bv24.float(i: bv24) : float;

function $ui2fp.bv24.float(i: bv24) : float;

function $si2fp.bv16.float(i: bv16) : float;

function $ui2fp.bv16.float(i: bv16) : float;

function $si2fp.bv8.float(i: bv8) : float;

function $ui2fp.bv8.float(i: bv8) : float;

function $si2fp.bv1.float(i: bv1) : float;

function $ui2fp.bv1.float(i: bv1) : float;

function $fptrunc.float.float(i: float) : float;

function $fpext.float.float(i: float) : float;

function $bitcast.float.i1(i: float) : i1;

function $bitcast.float.bv1(i: float) : bv1;

function $bitcast.i1.float(i: i1) : float;

function $bitcast.bv1.float(i: bv1) : float;

function $bitcast.float.i8(i: float) : i8;

function $bitcast.float.bv8(i: float) : bv8;

function $bitcast.i8.float(i: i8) : float;

function $bitcast.bv8.float(i: bv8) : float;

function $bitcast.float.i16(i: float) : i16;

function $bitcast.float.bv16(i: float) : bv16;

function $bitcast.i16.float(i: i16) : float;

function $bitcast.bv16.float(i: bv16) : float;

function $bitcast.float.i32(i: float) : i32;

function $bitcast.float.bv32(i: float) : bv32;

function $bitcast.i32.float(i: i32) : float;

function $bitcast.bv32.float(i: bv32) : float;

function $bitcast.float.i64(i: float) : i64;

function $bitcast.float.bv64(i: float) : bv64;

function $bitcast.i64.float(i: i64) : float;

function $bitcast.bv64.float(i: bv64) : float;

function $bitcast.float.i80(i: float) : i80;

function $bitcast.float.bv80(i: float) : bv80;

function $bitcast.i80.float(i: i80) : float;

function $bitcast.bv80.float(i: bv80) : float;

const $GLOBALS_BOTTOM: ref;

const $EXTERNS_BOTTOM: ref;

const $MALLOC_TOP: ref;

function {:inline} $isExternal(p: ref) : bool
{
  $slt.ref.bool(p, $EXTERNS_BOTTOM)
}

function {:inline} $load.bytes.bv16(M: [ref]bv8, p: ref) : bv16
{
  $load.bytes.bv8(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv24(M: [ref]bv8, p: ref) : bv24
{
  $load.bytes.bv16(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv32(M: [ref]bv8, p: ref) : bv32
{
  $load.bytes.bv24(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv40(M: [ref]bv8, p: ref) : bv40
{
  $load.bytes.bv32(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv48(M: [ref]bv8, p: ref) : bv48
{
  $load.bytes.bv40(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv56(M: [ref]bv8, p: ref) : bv56
{
  $load.bytes.bv48(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv64(M: [ref]bv8, p: ref) : bv64
{
  $load.bytes.bv56(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv72(M: [ref]bv8, p: ref) : bv72
{
  $load.bytes.bv64(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv80(M: [ref]bv8, p: ref) : bv80
{
  $load.bytes.bv72(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv88(M: [ref]bv8, p: ref) : bv88
{
  $load.bytes.bv80(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv96(M: [ref]bv8, p: ref) : bv96
{
  $load.bytes.bv88(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv104(M: [ref]bv8, p: ref) : bv104
{
  $load.bytes.bv96(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv112(M: [ref]bv8, p: ref) : bv112
{
  $load.bytes.bv104(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv120(M: [ref]bv8, p: ref) : bv120
{
  $load.bytes.bv112(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv128(M: [ref]bv8, p: ref) : bv128
{
  $load.bytes.bv120(M, $add.ref(p, $1.ref)) ++ $load.bytes.bv8(M, p)
}

function {:inline} $load.bytes.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $load.bytes.bv1(M: [ref]bv8, p: ref) : bv1
{
  $trunc.bv8.bv1(M[p])
}

function {:inline} $store.bytes.bv16(M: [ref]bv8, p: ref, v: bv16) : [ref]bv8
{
  $store.bytes.bv8(M, $add.ref(p, $1.ref), v[16:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv24(M: [ref]bv8, p: ref, v: bv24) : [ref]bv8
{
  $store.bytes.bv16(M, $add.ref(p, $1.ref), v[24:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv32(M: [ref]bv8, p: ref, v: bv32) : [ref]bv8
{
  $store.bytes.bv24(M, $add.ref(p, $1.ref), v[32:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv40(M: [ref]bv8, p: ref, v: bv40) : [ref]bv8
{
  $store.bytes.bv32(M, $add.ref(p, $1.ref), v[40:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv48(M: [ref]bv8, p: ref, v: bv48) : [ref]bv8
{
  $store.bytes.bv40(M, $add.ref(p, $1.ref), v[48:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv56(M: [ref]bv8, p: ref, v: bv56) : [ref]bv8
{
  $store.bytes.bv48(M, $add.ref(p, $1.ref), v[56:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv64(M: [ref]bv8, p: ref, v: bv64) : [ref]bv8
{
  $store.bytes.bv56(M, $add.ref(p, $1.ref), v[64:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv72(M: [ref]bv8, p: ref, v: bv72) : [ref]bv8
{
  $store.bytes.bv64(M, $add.ref(p, $1.ref), v[72:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv80(M: [ref]bv8, p: ref, v: bv80) : [ref]bv8
{
  $store.bytes.bv72(M, $add.ref(p, $1.ref), v[80:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv88(M: [ref]bv8, p: ref, v: bv88) : [ref]bv8
{
  $store.bytes.bv80(M, $add.ref(p, $1.ref), v[88:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv96(M: [ref]bv8, p: ref, v: bv96) : [ref]bv8
{
  $store.bytes.bv88(M, $add.ref(p, $1.ref), v[96:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv104(M: [ref]bv8, p: ref, v: bv104) : [ref]bv8
{
  $store.bytes.bv96(M, $add.ref(p, $1.ref), v[104:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv112(M: [ref]bv8, p: ref, v: bv112) : [ref]bv8
{
  $store.bytes.bv104(M, $add.ref(p, $1.ref), v[112:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv120(M: [ref]bv8, p: ref, v: bv120) : [ref]bv8
{
  $store.bytes.bv112(M, $add.ref(p, $1.ref), v[120:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv128(M: [ref]bv8, p: ref, v: bv128) : [ref]bv8
{
  $store.bytes.bv120(M, $add.ref(p, $1.ref), v[128:8])[p := v[8:0]]
}

function {:inline} $store.bytes.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:inline} $store.bytes.bv1(M: [ref]bv8, p: ref, v: bv1) : [ref]bv8
{
  M[p := $zext.bv1.bv8(v)]
}

function {:inline} $load.ref(M: [ref]ref, p: ref) : ref
{
  M[p]
}

function {:inline} $store.ref(M: [ref]ref, p: ref, v: ref) : [ref]ref
{
  M[p := v]
}

function {:inline} $load.float(M: [ref]float, p: ref) : float
{
  M[p]
}

function {:inline} $load.unsafe.float(M: [ref]i8, p: ref) : float
{
  $bitcast.i8.float(M[p])
}

function {:inline} $store.float(M: [ref]float, p: ref, v: float) : [ref]float
{
  M[p := v]
}

function {:inline} $store.unsafe.float(M: [ref]i8, p: ref, v: float) : [ref]i8
{
  M[p := $bitcast.float.i8(v)]
}

function {:inline} $load.bytes.float(M: [ref]bv8, p: ref) : float
{
  $bitcast.bv8.float(M[p])
}

function {:inline} $store.bytes.float(M: [ref]bv8, p: ref, v: float) : [ref]bv8
{
  M[p := $bitcast.float.bv8(v)]
}

type $mop;

procedure boogie_si_record_mop(m: $mop);



const $MOP: $mop;

function $extractvalue(p: int, i: int) : int;

procedure $alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $alloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1785} p := $$alloc(n);
    return;
}



procedure $malloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation $malloc(n: ref) returns (p: ref)
{

  anon0:
    call {:si_unique_call 1786} p := $$alloc(n);
    return;
}



procedure $$alloc(n: ref) returns (p: ref);
  free requires assertsPassed;
  modifies $CurrAddr;



implementation {:ForceInline} $$alloc(n: ref) returns (p: ref)
{

  anon0:
    assume $sge.ref.bool(n, $0.ref);
    goto anon3_Then, anon3_Else;

  anon3_Else:
    assume {:partition} !$sgt.ref.bool(n, $0.ref);
    p := $0.ref;
    return;

  anon3_Then:
    assume {:partition} $sgt.ref.bool(n, $0.ref);
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
    return;
}



procedure $free(p: ref);



const __SMACK_top_decl: ref;

axiom __SMACK_top_decl == $sub.ref(0, 450525);

procedure __SMACK_top_decl.ref($p0: ref);



const __SMACK_init_func_memory_model: ref;

axiom __SMACK_init_func_memory_model == $sub.ref(0, 451557);

procedure __SMACK_init_func_memory_model();
  free requires assertsPassed;
  modifies $CurrAddr;



implementation __SMACK_init_func_memory_model()
{

  $bb0:
    assume {:verifier.code 1} true;
    goto corral_source_split_9266;

  corral_source_split_9266:
    assume {:verifier.code 1} true;
    $CurrAddr := $1024.ref;
    goto corral_source_split_9267;

  corral_source_split_9267:
    assume {:verifier.code 0} true;
    return;
}



const calloc: ref;

axiom calloc == $sub.ref(0, 452589);

procedure calloc($i0: i64, $i1: i64) returns ($r: ref);
  free requires assertsPassed;
  modifies $M.0, $CurrAddr;



implementation calloc($i0: i64, $i1: i64) returns ($r: ref)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p4: ref;
  var cmdloc_dummy_var_62: [ref]i8;
  var cmdloc_dummy_var_63: [ref]i8;

  $bb0:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1787} {:cexpr "calloc:arg:num"} boogie_si_record_i64($i0);
    call {:si_unique_call 1788} {:cexpr "calloc:arg:size"} boogie_si_record_i64($i1);
    goto corral_source_split_9269;

  corral_source_split_9269:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1789} $i2 := __VERIFIER_nondet_int();
    call {:si_unique_call 1790} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32($i2);
    goto corral_source_split_9270;

  corral_source_split_9270:
    assume {:verifier.code 0} true;
    $i3 := $ne.i32($i2, 0);
    goto corral_source_split_9271;

  corral_source_split_9271:
    assume {:verifier.code 0} true;
    assume {:branchcond $i3} true;
    goto $bb1, $bb2;

  $bb2:
    assume !($i3 == 1);
    goto corral_source_split_9275;

  corral_source_split_9275:
    assume {:verifier.code 0} true;
    $i5 := $mul.i64($i0, $i1);
    goto corral_source_split_9276;

  corral_source_split_9276:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1791} $p6 := malloc($i5);
    goto corral_source_split_9277;

  corral_source_split_9277:
    assume {:verifier.code 0} true;
    $i7 := $mul.i64($i0, $i1);
    goto corral_source_split_9278;

  corral_source_split_9278:
    assume {:verifier.code 0} true;
    cmdloc_dummy_var_62 := $M.0;
    call {:si_unique_call 1792} cmdloc_dummy_var_63 := $memset.i8(cmdloc_dummy_var_62, $p6, 0, $i7, $zext.i32.i64(1), 0 == 1);
    $M.0 := cmdloc_dummy_var_63;
    assume {:verifier.code 0} true;
    $p4 := $p6;
    goto $bb3;

  $bb3:
    assume {:verifier.code 0} true;
    goto corral_source_split_9280;

  corral_source_split_9280:
    assume {:verifier.code 0} true;
    $r := $p4;
    return;

  $bb1:
    assume $i3 == 1;
    goto corral_source_split_9273;

  corral_source_split_9273:
    assume {:verifier.code 0} true;
    $p4 := $0.ref;
    goto $bb3;
}



const llvm.dbg.value: ref;

axiom llvm.dbg.value == $sub.ref(0, 453621);

procedure llvm.dbg.value($p0: ref, $i1: i64, $p2: ref, $p3: ref);



const __SMACK_static_init: ref;

axiom __SMACK_static_init == $sub.ref(0, 454653);

procedure __SMACK_static_init();
  free requires assertsPassed;
  modifies $M.101, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.86, $M.87, $M.90, $M.93, $M.91, $M.92, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.102, $M.103, $M.104, $M.22, $M.77, $M.76, $M.13, $M.64;



implementation __SMACK_static_init()
{

  $bb0:
    call {:si_unique_call 1793} {:cexpr "LDV_IN_INTERRUPT"} boogie_si_record_i32(1);
    $M.101 := 0;
    call {:si_unique_call 1794} {:cexpr "probed_2"} boogie_si_record_i32(0);
    $M.27 := 0;
    call {:si_unique_call 1795} {:cexpr "ldv_timer_1_0"} boogie_si_record_i32(0);
    $M.28 := $0.ref;
    $M.29 := 0;
    call {:si_unique_call 1796} {:cexpr "ldv_timer_1_1"} boogie_si_record_i32(0);
    $M.30 := $0.ref;
    $M.31 := 0;
    call {:si_unique_call 1797} {:cexpr "ldv_timer_1_2"} boogie_si_record_i32(0);
    $M.32 := $0.ref;
    $M.33 := 0;
    call {:si_unique_call 1798} {:cexpr "ldv_timer_1_3"} boogie_si_record_i32(0);
    $M.34 := $0.ref;
    $M.86 := $0.ref;
    $M.87 := $0.ref;
    $M.90 := $0.ref;
    $M.93 := 0;
    call {:si_unique_call 1799} {:cexpr "ref_cnt"} boogie_si_record_i32(0);
    $M.91 := 0;
    call {:si_unique_call 1800} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(0);
    $M.92 := 0;
    call {:si_unique_call 1801} {:cexpr "ldv_state_variable_1"} boogie_si_record_i32(0);
    $M.94 := 0;
    call {:si_unique_call 1802} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(0);
    $M.95 := 0;
    call {:si_unique_call 1803} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(0);
    $M.96 := 0;
    call {:si_unique_call 1804} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(0);
    $M.97 := 0;
    call {:si_unique_call 1805} {:cexpr "ldv_retval_0"} boogie_si_record_i32(0);
    $M.98 := 0;
    call {:si_unique_call 1806} {:cexpr "ldv_retval_1"} boogie_si_record_i32(0);
    $M.99 := 0;
    call {:si_unique_call 1807} {:cexpr "ldv_retval_2"} boogie_si_record_i32(0);
    $M.100 := 0;
    call {:si_unique_call 1808} {:cexpr "ldv_retval_6"} boogie_si_record_i32(0);
    $M.102 := 0;
    call {:si_unique_call 1809} {:cexpr "ldv_retval_5"} boogie_si_record_i32(0);
    $M.103 := 0;
    call {:si_unique_call 1810} {:cexpr "ldv_retval_4"} boogie_si_record_i32(0);
    $M.104 := 0;
    call {:si_unique_call 1811} {:cexpr "ldv_retval_3"} boogie_si_record_i32(0);
    $M.22 := 0;
    call {:si_unique_call 1812} {:cexpr "ldv_spin"} boogie_si_record_i32(0);
    $M.77 := 0;
    call {:si_unique_call 1813} {:cexpr "park"} boogie_si_record_i32(0);
    $M.76 := 0;
    call {:si_unique_call 1814} {:cexpr "log2_irq_thresh"} boogie_si_record_i32(0);
    $M.13 := 0;
    call {:si_unique_call 1815} {:cexpr "ignore_oc"} boogie_si_record_i8(0);
    $M.64 := $store.ref($M.64, fls_strings, .str.38);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(fls_strings, $mul.ref(0, 32)), $mul.ref(1, 8)), .str.39);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(fls_strings, $mul.ref(0, 32)), $mul.ref(2, 8)), .str.40);
    $M.64 := $store.ref($M.64, $add.ref($add.ref(fls_strings, $mul.ref(0, 32)), $mul.ref(3, 8)), .str.41);
    call {:si_unique_call 1816} {:cexpr "errno_global"} boogie_si_record_i32(0);
    return;
}



const devirtbounce: ref;

axiom devirtbounce == $sub.ref(0, 455685);

procedure devirtbounce(funcPtr: ref, arg: i32, arg1: ref);
  free requires assertsPassed;



implementation devirtbounce(funcPtr: ref, arg: i32, arg1: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.1: ref;

axiom devirtbounce.1 == $sub.ref(0, 456717);

procedure devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation devirtbounce.1(funcPtr: ref, arg: ref) returns ($r: i32)
{
  var $p0: ref;
  var $p1: ref;
  var $i2: i32;
  var $p3: ref;
  var $i4: i32;
  var $p5: ref;
  var $i6: i32;
  var $p7: ref;
  var $i8: i32;
  var $p9: ref;
  var $i10: i32;
  var $p11: ref;
  var $i12: i32;
  var $p13: ref;
  var $i14: i32;
  var $p15: ref;
  var $i16: i32;
  var $i17: i1;
  var $i18: i1;
  var $i19: i1;
  var $i20: i1;
  var $i21: i1;
  var $i22: i1;
  var $i23: i1;
  var $i24: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i24 := $eq.ref(oxu_bus_resume, $p0);
    assume {:branchcond $i24} true;
    goto $bb9, $bb17;

  $bb17:
    assume !($i24 == 1);
    $i23 := $eq.ref(oxu_bus_suspend, $p0);
    assume {:branchcond $i23} true;
    goto $bb8, $bb16;

  $bb16:
    assume !($i23 == 1);
    $i22 := $eq.ref(oxu_get_frame, $p0);
    assume {:branchcond $i22} true;
    goto $bb7, $bb15;

  $bb15:
    assume !($i22 == 1);
    $i21 := $eq.ref(oxu_run, $p0);
    assume true;
    goto $bb6, $bb14;

  $bb14:
    assume !($i21 == 1);
    $i20 := $eq.ref(oxu_reset, $p0);
    assume true;
    goto $bb5, $bb13;

  $bb13:
    assume !($i20 == 1);
    $i19 := $eq.ref(oxu_irq, $p0);
    assume true;
    goto $bb4, $bb12;

  $bb12:
    assume !($i19 == 1);
    $i18 := $eq.ref(oxu_drv_remove, $p0);
    assume true;
    goto $bb3, $bb11;

  $bb11:
    assume !($i18 == 1);
    $i17 := $eq.ref(oxu_drv_probe, $p0);
    assume {:branchcond $i17} true;
    goto $bb2, $bb10;

  $bb10:
    assume !($i17 == 1);
    assume false;
    return;

  $bb2:
    assume $i17 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1817} $i2 := oxu_drv_probe($p1);
    goto SeqInstr_679, SeqInstr_680;

  SeqInstr_680:
    assume assertsPassed;
    goto SeqInstr_681;

  SeqInstr_681:
    $r := $i2;
    return;

  SeqInstr_679:
    assume !assertsPassed;
    return;

  $bb3:
    assume $i18 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1818} $i4 := oxu_drv_remove($p3);
    $r := $i4;
    return;

  $bb4:
    assume $i19 == 1;
    $p5 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1819} $i6 := oxu_irq($p5);
    goto SeqInstr_682, SeqInstr_683;

  SeqInstr_683:
    assume assertsPassed;
    goto SeqInstr_684;

  SeqInstr_684:
    $r := $i6;
    return;

  SeqInstr_682:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i20 == 1;
    $p7 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1820} $i8 := oxu_reset($p7);
    goto SeqInstr_685, SeqInstr_686;

  SeqInstr_686:
    assume assertsPassed;
    goto SeqInstr_687;

  SeqInstr_687:
    $r := $i8;
    return;

  SeqInstr_685:
    assume !assertsPassed;
    return;

  $bb6:
    assume $i21 == 1;
    $p9 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1821} $i10 := oxu_run($p9);
    goto SeqInstr_688, SeqInstr_689;

  SeqInstr_689:
    assume assertsPassed;
    goto SeqInstr_690;

  SeqInstr_690:
    $r := $i10;
    return;

  SeqInstr_688:
    assume !assertsPassed;
    return;

  $bb7:
    assume $i22 == 1;
    $p11 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1822} $i12 := oxu_get_frame($p11);
    goto SeqInstr_691, SeqInstr_692;

  SeqInstr_692:
    assume assertsPassed;
    goto SeqInstr_693;

  SeqInstr_693:
    $r := $i12;
    return;

  SeqInstr_691:
    assume !assertsPassed;
    return;

  $bb8:
    assume $i23 == 1;
    $p13 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1823} $i14 := oxu_bus_suspend($p13);
    goto SeqInstr_694, SeqInstr_695;

  SeqInstr_695:
    assume assertsPassed;
    goto SeqInstr_696;

  SeqInstr_696:
    $r := $i14;
    return;

  SeqInstr_694:
    assume !assertsPassed;
    return;

  $bb9:
    assume $i24 == 1;
    $p15 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1824} $i16 := oxu_bus_resume($p15);
    goto SeqInstr_697, SeqInstr_698;

  SeqInstr_698:
    assume assertsPassed;
    goto SeqInstr_699;

  SeqInstr_699:
    $r := $i16;
    return;

  SeqInstr_697:
    assume !assertsPassed;
    return;
}



const devirtbounce.2: ref;

axiom devirtbounce.2 == $sub.ref(0, 457749);

procedure devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.2(funcPtr: ref, arg: ref, arg1: i64) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.3: ref;

axiom devirtbounce.3 == $sub.ref(0, 458781);

procedure devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64);
  free requires assertsPassed;



implementation devirtbounce.3(funcPtr: ref, arg: ref, arg1: i32, arg2: i64)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.4: ref;

axiom devirtbounce.4 == $sub.ref(0, 459813);

procedure devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: ref);
  free requires assertsPassed;



implementation devirtbounce.4(funcPtr: ref, arg: ref, arg1: i64, arg2: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.5: ref;

axiom devirtbounce.5 == $sub.ref(0, 460845);

procedure devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.5(funcPtr: ref, arg: ref, arg1: ref, arg2: i64, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.6: ref;

axiom devirtbounce.6 == $sub.ref(0, 461877);

procedure devirtbounce.6(funcPtr: ref);
  free requires assertsPassed;



implementation devirtbounce.6(funcPtr: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.7: ref;

axiom devirtbounce.7 == $sub.ref(0, 462909);

procedure devirtbounce.7(funcPtr: ref, arg: ref);
  free requires assertsPassed;
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation devirtbounce.7(funcPtr: ref, arg: ref)
{
  var $p0: ref;
  var $p1: ref;
  var $p2: ref;
  var $p3: ref;
  var $i4: i1;
  var $i5: i1;
  var $i6: i1;
  var $i7: i1;

  $bb0:
    $p0 := $bitcast.ref.ref(funcPtr);
    goto $bb1;

  $bb1:
    $i7 := $eq.ref(qh_destroy, $p0);
    assume {:branchcond $i7} true;
    goto $bb5, $bb9;

  $bb9:
    assume !($i7 == 1);
    $i6 := $eq.ref(oxu_shutdown, $p0);
    assume {:branchcond $i6} true;
    goto $bb4, $bb8;

  $bb8:
    assume !($i6 == 1);
    $i5 := $eq.ref(oxu_stop, $p0);
    assume {:branchcond $i5} true;
    goto $bb3, $bb7;

  $bb7:
    assume !($i5 == 1);
    $i4 := $eq.ref(oxu_drv_shutdown, $p0);
    assume {:branchcond $i4} true;
    goto $bb2, $bb6;

  $bb6:
    assume !($i4 == 1);
    assume false;
    return;

  $bb2:
    assume $i4 == 1;
    $p1 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1825} oxu_drv_shutdown($p1);
    return;

  $bb3:
    assume $i5 == 1;
    $p2 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1826} oxu_stop($p2);
    goto SeqInstr_700, SeqInstr_701;

  SeqInstr_701:
    assume assertsPassed;
    goto SeqInstr_702;

  SeqInstr_702:
    return;

  SeqInstr_700:
    assume !assertsPassed;
    return;

  $bb4:
    assume $i6 == 1;
    $p3 := $bitcast.ref.ref(arg);
    call {:si_unique_call 1827} oxu_shutdown($p3);
    goto SeqInstr_703, SeqInstr_704;

  SeqInstr_704:
    assume assertsPassed;
    goto SeqInstr_705;

  SeqInstr_705:
    return;

  SeqInstr_703:
    assume !assertsPassed;
    return;

  $bb5:
    assume $i7 == 1;
    call {:si_unique_call 1828} qh_destroy(arg);
    return;
}



const devirtbounce.8: ref;

axiom devirtbounce.8 == $sub.ref(0, 463941);

procedure devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref);
  free requires assertsPassed;



implementation devirtbounce.8(funcPtr: ref, arg: ref, arg1: ref, arg2: i32, arg3: ref)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.9: ref;

axiom devirtbounce.9 == $sub.ref(0, 464973);

procedure devirtbounce.9(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.9(funcPtr: ref, arg: i32, arg1: i32) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



const devirtbounce.10: ref;

axiom devirtbounce.10 == $sub.ref(0, 466005);

procedure devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32);
  free requires assertsPassed;



implementation devirtbounce.10(funcPtr: ref, arg: ref, arg1: i32, arg2: ref) returns ($r: i32)
{

  $bb0:
    goto $bb1;

  $bb1:
    return;
}



procedure $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memcpy.i8(M.dst: [ref]i8, M.src: [ref]i8, dst: ref, src: ref, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src, dst), x)]);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M.dst[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M.dst[x]);
    return;
}



procedure $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8);
  free requires assertsPassed;



implementation $memset.i8(M: [ref]i8, dst: ref, val: i8, len: ref, align: ref, isvolatile: bool) returns (M.ret: [ref]i8)
{

  anon0:
    assume (forall x: ref :: $sle.ref.bool(dst, x) && $slt.ref.bool(x, $add.ref(dst, len)) ==> M.ret[x] == val);
    assume (forall x: ref :: $slt.ref.bool(x, dst) ==> M.ret[x] == M[x]);
    assume (forall x: ref :: $sle.ref.bool($add.ref(dst, len), x) ==> M.ret[x] == M[x]);
    return;
}



const $u0: i64;

procedure boogie_si_record_i16(x: i16);



procedure boogie_si_record_i32(x: i32);



procedure boogie_si_record_i64(x: i64);



procedure boogie_si_record_i8(x: i8);



procedure boogie_si_record_ref(x: ref);



procedure $initialize();
  free requires assertsPassed;
  modifies $M.101, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.86, $M.87, $M.90, $M.93, $M.91, $M.92, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.102, $M.103, $M.104, $M.22, $M.77, $M.76, $M.13, $M.64, $CurrAddr;



implementation $initialize()
{

  anon0:
    call {:si_unique_call 1829} __SMACK_static_init();
    call {:si_unique_call 1830} __SMACK_init_func_memory_model();
    return;
}



function {:bvbuiltin "bvadd"} $add.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $add.i1(i1: i1, i2: i1) : i1
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $sub.i1(i1: i1, i2: i1) : i1
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv1(i1: bv1, i2: bv1) : bv1;

function {:inline} $mul.i1(i1: i1, i2: i1) : i1
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $sdiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsmod"} $smod.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvsrem"} $srem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $srem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvudiv"} $udiv.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "div"} $udiv.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvurem"} $urem.bv1(i1: bv1, i2: bv1) : bv1;

function {:builtin "rem"} $urem.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvshl"} $shl.bv1(i1: bv1, i2: bv1) : bv1;

function $shl.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvlshr"} $lshr.bv1(i1: bv1, i2: bv1) : bv1;

function $lshr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvashr"} $ashr.bv1(i1: bv1, i2: bv1) : bv1;

function $ashr.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvand"} $and.bv1(i1: bv1, i2: bv1) : bv1;

function $and.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvor"} $or.bv1(i1: bv1, i2: bv1) : bv1;

function $or.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvxor"} $xor.bv1(i1: bv1, i2: bv1) : bv1;

function $xor.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvnand"} $nand.bv1(i1: bv1, i2: bv1) : bv1;

function $nand.i1(i1: i1, i2: i1) : i1;

function {:bvbuiltin "bvule"} $ule.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ule.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ule.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $ule.i1(i1: i1, i2: i1) : i1
{
  (if $ule.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ult.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $ult.i1(i1: i1, i2: i1) : i1
{
  (if $ult.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $uge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $uge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $uge.i1(i1: i1, i2: i1) : i1
{
  (if $uge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $ugt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $ugt.i1(i1: i1, i2: i1) : i1
{
  (if $ugt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sle.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sle.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i1.bool(i1: i1, i2: i1) : bool
{
  i1 <= i2
}

function {:inline} $sle.i1(i1: i1, i2: i1) : i1
{
  (if $sle.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $slt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 < i2
}

function {:inline} $slt.i1(i1: i1, i2: i1) : i1
{
  (if $slt.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sge.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sge.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i1.bool(i1: i1, i2: i1) : bool
{
  i1 >= i2
}

function {:inline} $sge.i1(i1: i1, i2: i1) : i1
{
  (if $sge.i1.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv1.bool(i1: bv1, i2: bv1) : bool;

function {:inline} $sgt.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i1.bool(i1: i1, i2: i1) : bool
{
  i1 > i2
}

function {:inline} $sgt.i1(i1: i1, i2: i1) : i1
{
  (if $sgt.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 == i2
}

function {:inline} $eq.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $eq.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i1.bool(i1: i1, i2: i1) : bool
{
  i1 == i2
}

function {:inline} $eq.i1(i1: i1, i2: i1) : i1
{
  (if $eq.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv1.bool(i1: bv1, i2: bv1) : bool
{
  i1 != i2
}

function {:inline} $ne.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ne.bv1.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i1.bool(i1: i1, i2: i1) : bool
{
  i1 != i2
}

function {:inline} $ne.i1(i1: i1, i2: i1) : i1
{
  (if $ne.i1.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $slt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $sgt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ult.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv1(i1: bv1, i2: bv1) : bv1
{
  (if $ugt.bv1.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $smax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:inline} $umin.i1(i1: i1, i2: i1) : i1
{
  $min(i1, i2)
}

function {:inline} $umax.i1(i1: i1, i2: i1) : i1
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv1(i1: bv1) : bv1;

function $not.i1(i1: i1) : i1;

function {:inline} $load.i1(M: [ref]i1, p: ref) : i1
{
  M[p]
}

function {:inline} $load.bv1(M: [ref]bv1, p: ref) : bv1
{
  M[p]
}

function {:inline} $store.i1(M: [ref]i1, p: ref, v: i1) : [ref]i1
{
  M[p := v]
}

function {:inline} $store.bv1(M: [ref]bv1, p: ref, v: bv1) : [ref]bv1
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $add.i5(i1: i5, i2: i5) : i5
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $sub.i5(i1: i5, i2: i5) : i5
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv5(i1: bv5, i2: bv5) : bv5;

function {:inline} $mul.i5(i1: i5, i2: i5) : i5
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $sdiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsmod"} $smod.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvsrem"} $srem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $srem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvudiv"} $udiv.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "div"} $udiv.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvurem"} $urem.bv5(i1: bv5, i2: bv5) : bv5;

function {:builtin "rem"} $urem.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvshl"} $shl.bv5(i1: bv5, i2: bv5) : bv5;

function $shl.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvlshr"} $lshr.bv5(i1: bv5, i2: bv5) : bv5;

function $lshr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvashr"} $ashr.bv5(i1: bv5, i2: bv5) : bv5;

function $ashr.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvand"} $and.bv5(i1: bv5, i2: bv5) : bv5;

function $and.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvor"} $or.bv5(i1: bv5, i2: bv5) : bv5;

function $or.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvxor"} $xor.bv5(i1: bv5, i2: bv5) : bv5;

function $xor.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvnand"} $nand.bv5(i1: bv5, i2: bv5) : bv5;

function $nand.i5(i1: i5, i2: i5) : i5;

function {:bvbuiltin "bvule"} $ule.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ule.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ule.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $ule.i5(i1: i5, i2: i5) : i1
{
  (if $ule.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ult.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ult.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $ult.i5(i1: i5, i2: i5) : i1
{
  (if $ult.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $uge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $uge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $uge.i5(i1: i5, i2: i5) : i1
{
  (if $uge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $ugt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ugt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $ugt.i5(i1: i5, i2: i5) : i1
{
  (if $ugt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sle.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sle.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i5.bool(i1: i5, i2: i5) : bool
{
  i1 <= i2
}

function {:inline} $sle.i5(i1: i5, i2: i5) : i1
{
  (if $sle.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $slt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $slt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 < i2
}

function {:inline} $slt.i5(i1: i5, i2: i5) : i1
{
  (if $slt.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sge.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sge.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i5.bool(i1: i5, i2: i5) : bool
{
  i1 >= i2
}

function {:inline} $sge.i5(i1: i5, i2: i5) : i1
{
  (if $sge.i5.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv5.bool(i1: bv5, i2: bv5) : bool;

function {:inline} $sgt.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $sgt.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i5.bool(i1: i5, i2: i5) : bool
{
  i1 > i2
}

function {:inline} $sgt.i5(i1: i5, i2: i5) : i1
{
  (if $sgt.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 == i2
}

function {:inline} $eq.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $eq.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i5.bool(i1: i5, i2: i5) : bool
{
  i1 == i2
}

function {:inline} $eq.i5(i1: i5, i2: i5) : i1
{
  (if $eq.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv5.bool(i1: bv5, i2: bv5) : bool
{
  i1 != i2
}

function {:inline} $ne.bv5(i1: bv5, i2: bv5) : bv1
{
  (if $ne.bv5.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i5.bool(i1: i5, i2: i5) : bool
{
  i1 != i2
}

function {:inline} $ne.i5(i1: i5, i2: i5) : i1
{
  (if $ne.i5.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $slt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $sgt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ult.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv5(i1: bv5, i2: bv5) : bv5
{
  (if $ugt.bv5.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $smax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:inline} $umin.i5(i1: i5, i2: i5) : i5
{
  $min(i1, i2)
}

function {:inline} $umax.i5(i1: i5, i2: i5) : i5
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv5(i1: bv5) : bv5;

function $not.i5(i1: i5) : i5;

function {:inline} $load.i5(M: [ref]i5, p: ref) : i5
{
  M[p]
}

function {:inline} $load.bv5(M: [ref]bv5, p: ref) : bv5
{
  M[p]
}

function {:inline} $store.i5(M: [ref]i5, p: ref, v: i5) : [ref]i5
{
  M[p := v]
}

function {:inline} $store.bv5(M: [ref]bv5, p: ref, v: bv5) : [ref]bv5
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $add.i6(i1: i6, i2: i6) : i6
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $sub.i6(i1: i6, i2: i6) : i6
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv6(i1: bv6, i2: bv6) : bv6;

function {:inline} $mul.i6(i1: i6, i2: i6) : i6
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $sdiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsmod"} $smod.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvsrem"} $srem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $srem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvudiv"} $udiv.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "div"} $udiv.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvurem"} $urem.bv6(i1: bv6, i2: bv6) : bv6;

function {:builtin "rem"} $urem.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvshl"} $shl.bv6(i1: bv6, i2: bv6) : bv6;

function $shl.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvlshr"} $lshr.bv6(i1: bv6, i2: bv6) : bv6;

function $lshr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvashr"} $ashr.bv6(i1: bv6, i2: bv6) : bv6;

function $ashr.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvand"} $and.bv6(i1: bv6, i2: bv6) : bv6;

function $and.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvor"} $or.bv6(i1: bv6, i2: bv6) : bv6;

function $or.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvxor"} $xor.bv6(i1: bv6, i2: bv6) : bv6;

function $xor.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvnand"} $nand.bv6(i1: bv6, i2: bv6) : bv6;

function $nand.i6(i1: i6, i2: i6) : i6;

function {:bvbuiltin "bvule"} $ule.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ule.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ule.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $ule.i6(i1: i6, i2: i6) : i1
{
  (if $ule.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ult.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ult.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $ult.i6(i1: i6, i2: i6) : i1
{
  (if $ult.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $uge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $uge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $uge.i6(i1: i6, i2: i6) : i1
{
  (if $uge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $ugt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ugt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $ugt.i6(i1: i6, i2: i6) : i1
{
  (if $ugt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sle.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sle.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i6.bool(i1: i6, i2: i6) : bool
{
  i1 <= i2
}

function {:inline} $sle.i6(i1: i6, i2: i6) : i1
{
  (if $sle.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $slt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $slt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 < i2
}

function {:inline} $slt.i6(i1: i6, i2: i6) : i1
{
  (if $slt.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sge.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sge.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i6.bool(i1: i6, i2: i6) : bool
{
  i1 >= i2
}

function {:inline} $sge.i6(i1: i6, i2: i6) : i1
{
  (if $sge.i6.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv6.bool(i1: bv6, i2: bv6) : bool;

function {:inline} $sgt.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $sgt.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i6.bool(i1: i6, i2: i6) : bool
{
  i1 > i2
}

function {:inline} $sgt.i6(i1: i6, i2: i6) : i1
{
  (if $sgt.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 == i2
}

function {:inline} $eq.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $eq.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i6.bool(i1: i6, i2: i6) : bool
{
  i1 == i2
}

function {:inline} $eq.i6(i1: i6, i2: i6) : i1
{
  (if $eq.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv6.bool(i1: bv6, i2: bv6) : bool
{
  i1 != i2
}

function {:inline} $ne.bv6(i1: bv6, i2: bv6) : bv1
{
  (if $ne.bv6.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i6.bool(i1: i6, i2: i6) : bool
{
  i1 != i2
}

function {:inline} $ne.i6(i1: i6, i2: i6) : i1
{
  (if $ne.i6.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $slt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $sgt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ult.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv6(i1: bv6, i2: bv6) : bv6
{
  (if $ugt.bv6.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $smax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:inline} $umin.i6(i1: i6, i2: i6) : i6
{
  $min(i1, i2)
}

function {:inline} $umax.i6(i1: i6, i2: i6) : i6
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv6(i1: bv6) : bv6;

function $not.i6(i1: i6) : i6;

function {:inline} $load.i6(M: [ref]i6, p: ref) : i6
{
  M[p]
}

function {:inline} $load.bv6(M: [ref]bv6, p: ref) : bv6
{
  M[p]
}

function {:inline} $store.i6(M: [ref]i6, p: ref, v: i6) : [ref]i6
{
  M[p := v]
}

function {:inline} $store.bv6(M: [ref]bv6, p: ref, v: bv6) : [ref]bv6
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $add.i8(i1: i8, i2: i8) : i8
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $sub.i8(i1: i8, i2: i8) : i8
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv8(i1: bv8, i2: bv8) : bv8;

function {:inline} $mul.i8(i1: i8, i2: i8) : i8
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $sdiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsmod"} $smod.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvsrem"} $srem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $srem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvudiv"} $udiv.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "div"} $udiv.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvurem"} $urem.bv8(i1: bv8, i2: bv8) : bv8;

function {:builtin "rem"} $urem.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvshl"} $shl.bv8(i1: bv8, i2: bv8) : bv8;

function $shl.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvlshr"} $lshr.bv8(i1: bv8, i2: bv8) : bv8;

function $lshr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvashr"} $ashr.bv8(i1: bv8, i2: bv8) : bv8;

function $ashr.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvand"} $and.bv8(i1: bv8, i2: bv8) : bv8;

function $and.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvor"} $or.bv8(i1: bv8, i2: bv8) : bv8;

function $or.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvxor"} $xor.bv8(i1: bv8, i2: bv8) : bv8;

function $xor.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvnand"} $nand.bv8(i1: bv8, i2: bv8) : bv8;

function $nand.i8(i1: i8, i2: i8) : i8;

function {:bvbuiltin "bvule"} $ule.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ule.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ule.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $ule.i8(i1: i8, i2: i8) : i1
{
  (if $ule.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ult.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ult.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $ult.i8(i1: i8, i2: i8) : i1
{
  (if $ult.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $uge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $uge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $uge.i8(i1: i8, i2: i8) : i1
{
  (if $uge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $ugt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ugt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $ugt.i8(i1: i8, i2: i8) : i1
{
  (if $ugt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sle.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sle.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i8.bool(i1: i8, i2: i8) : bool
{
  i1 <= i2
}

function {:inline} $sle.i8(i1: i8, i2: i8) : i1
{
  (if $sle.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $slt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $slt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 < i2
}

function {:inline} $slt.i8(i1: i8, i2: i8) : i1
{
  (if $slt.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sge.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sge.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i8.bool(i1: i8, i2: i8) : bool
{
  i1 >= i2
}

function {:inline} $sge.i8(i1: i8, i2: i8) : i1
{
  (if $sge.i8.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv8.bool(i1: bv8, i2: bv8) : bool;

function {:inline} $sgt.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $sgt.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i8.bool(i1: i8, i2: i8) : bool
{
  i1 > i2
}

function {:inline} $sgt.i8(i1: i8, i2: i8) : i1
{
  (if $sgt.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 == i2
}

function {:inline} $eq.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $eq.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i8.bool(i1: i8, i2: i8) : bool
{
  i1 == i2
}

function {:inline} $eq.i8(i1: i8, i2: i8) : i1
{
  (if $eq.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv8.bool(i1: bv8, i2: bv8) : bool
{
  i1 != i2
}

function {:inline} $ne.bv8(i1: bv8, i2: bv8) : bv1
{
  (if $ne.bv8.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i8.bool(i1: i8, i2: i8) : bool
{
  i1 != i2
}

function {:inline} $ne.i8(i1: i8, i2: i8) : i1
{
  (if $ne.i8.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $slt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $sgt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ult.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv8(i1: bv8, i2: bv8) : bv8
{
  (if $ugt.bv8.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $smax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:inline} $umin.i8(i1: i8, i2: i8) : i8
{
  $min(i1, i2)
}

function {:inline} $umax.i8(i1: i8, i2: i8) : i8
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv8(i1: bv8) : bv8;

function $not.i8(i1: i8) : i8;

function {:inline} $load.i8(M: [ref]i8, p: ref) : i8
{
  M[p]
}

function {:inline} $load.bv8(M: [ref]bv8, p: ref) : bv8
{
  M[p]
}

function {:inline} $store.i8(M: [ref]i8, p: ref, v: i8) : [ref]i8
{
  M[p := v]
}

function {:inline} $store.bv8(M: [ref]bv8, p: ref, v: bv8) : [ref]bv8
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $add.i16(i1: i16, i2: i16) : i16
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $sub.i16(i1: i16, i2: i16) : i16
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv16(i1: bv16, i2: bv16) : bv16;

function {:inline} $mul.i16(i1: i16, i2: i16) : i16
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $sdiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsmod"} $smod.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvsrem"} $srem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $srem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvudiv"} $udiv.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "div"} $udiv.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvurem"} $urem.bv16(i1: bv16, i2: bv16) : bv16;

function {:builtin "rem"} $urem.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvshl"} $shl.bv16(i1: bv16, i2: bv16) : bv16;

function $shl.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvlshr"} $lshr.bv16(i1: bv16, i2: bv16) : bv16;

function $lshr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvashr"} $ashr.bv16(i1: bv16, i2: bv16) : bv16;

function $ashr.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvand"} $and.bv16(i1: bv16, i2: bv16) : bv16;

function $and.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvor"} $or.bv16(i1: bv16, i2: bv16) : bv16;

function $or.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvxor"} $xor.bv16(i1: bv16, i2: bv16) : bv16;

function $xor.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvnand"} $nand.bv16(i1: bv16, i2: bv16) : bv16;

function $nand.i16(i1: i16, i2: i16) : i16;

function {:bvbuiltin "bvule"} $ule.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ule.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ule.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $ule.i16(i1: i16, i2: i16) : i1
{
  (if $ule.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ult.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ult.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $ult.i16(i1: i16, i2: i16) : i1
{
  (if $ult.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $uge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $uge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $uge.i16(i1: i16, i2: i16) : i1
{
  (if $uge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $ugt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ugt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $ugt.i16(i1: i16, i2: i16) : i1
{
  (if $ugt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sle.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sle.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i16.bool(i1: i16, i2: i16) : bool
{
  i1 <= i2
}

function {:inline} $sle.i16(i1: i16, i2: i16) : i1
{
  (if $sle.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $slt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $slt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 < i2
}

function {:inline} $slt.i16(i1: i16, i2: i16) : i1
{
  (if $slt.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sge.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sge.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i16.bool(i1: i16, i2: i16) : bool
{
  i1 >= i2
}

function {:inline} $sge.i16(i1: i16, i2: i16) : i1
{
  (if $sge.i16.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv16.bool(i1: bv16, i2: bv16) : bool;

function {:inline} $sgt.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $sgt.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i16.bool(i1: i16, i2: i16) : bool
{
  i1 > i2
}

function {:inline} $sgt.i16(i1: i16, i2: i16) : i1
{
  (if $sgt.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 == i2
}

function {:inline} $eq.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $eq.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i16.bool(i1: i16, i2: i16) : bool
{
  i1 == i2
}

function {:inline} $eq.i16(i1: i16, i2: i16) : i1
{
  (if $eq.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv16.bool(i1: bv16, i2: bv16) : bool
{
  i1 != i2
}

function {:inline} $ne.bv16(i1: bv16, i2: bv16) : bv1
{
  (if $ne.bv16.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i16.bool(i1: i16, i2: i16) : bool
{
  i1 != i2
}

function {:inline} $ne.i16(i1: i16, i2: i16) : i1
{
  (if $ne.i16.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $slt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $sgt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ult.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv16(i1: bv16, i2: bv16) : bv16
{
  (if $ugt.bv16.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $smax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:inline} $umin.i16(i1: i16, i2: i16) : i16
{
  $min(i1, i2)
}

function {:inline} $umax.i16(i1: i16, i2: i16) : i16
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv16(i1: bv16) : bv16;

function $not.i16(i1: i16) : i16;

function {:inline} $load.i16(M: [ref]i16, p: ref) : i16
{
  M[p]
}

function {:inline} $load.bv16(M: [ref]bv16, p: ref) : bv16
{
  M[p]
}

function {:inline} $store.i16(M: [ref]i16, p: ref, v: i16) : [ref]i16
{
  M[p := v]
}

function {:inline} $store.bv16(M: [ref]bv16, p: ref, v: bv16) : [ref]bv16
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $add.i24(i1: i24, i2: i24) : i24
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $sub.i24(i1: i24, i2: i24) : i24
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv24(i1: bv24, i2: bv24) : bv24;

function {:inline} $mul.i24(i1: i24, i2: i24) : i24
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $sdiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsmod"} $smod.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvsrem"} $srem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $srem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvudiv"} $udiv.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "div"} $udiv.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvurem"} $urem.bv24(i1: bv24, i2: bv24) : bv24;

function {:builtin "rem"} $urem.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvshl"} $shl.bv24(i1: bv24, i2: bv24) : bv24;

function $shl.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvlshr"} $lshr.bv24(i1: bv24, i2: bv24) : bv24;

function $lshr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvashr"} $ashr.bv24(i1: bv24, i2: bv24) : bv24;

function $ashr.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvand"} $and.bv24(i1: bv24, i2: bv24) : bv24;

function $and.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvor"} $or.bv24(i1: bv24, i2: bv24) : bv24;

function $or.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvxor"} $xor.bv24(i1: bv24, i2: bv24) : bv24;

function $xor.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvnand"} $nand.bv24(i1: bv24, i2: bv24) : bv24;

function $nand.i24(i1: i24, i2: i24) : i24;

function {:bvbuiltin "bvule"} $ule.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ule.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ule.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $ule.i24(i1: i24, i2: i24) : i1
{
  (if $ule.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ult.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ult.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $ult.i24(i1: i24, i2: i24) : i1
{
  (if $ult.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $uge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $uge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $uge.i24(i1: i24, i2: i24) : i1
{
  (if $uge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $ugt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ugt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $ugt.i24(i1: i24, i2: i24) : i1
{
  (if $ugt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sle.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sle.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i24.bool(i1: i24, i2: i24) : bool
{
  i1 <= i2
}

function {:inline} $sle.i24(i1: i24, i2: i24) : i1
{
  (if $sle.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $slt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $slt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 < i2
}

function {:inline} $slt.i24(i1: i24, i2: i24) : i1
{
  (if $slt.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sge.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sge.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i24.bool(i1: i24, i2: i24) : bool
{
  i1 >= i2
}

function {:inline} $sge.i24(i1: i24, i2: i24) : i1
{
  (if $sge.i24.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv24.bool(i1: bv24, i2: bv24) : bool;

function {:inline} $sgt.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $sgt.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i24.bool(i1: i24, i2: i24) : bool
{
  i1 > i2
}

function {:inline} $sgt.i24(i1: i24, i2: i24) : i1
{
  (if $sgt.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 == i2
}

function {:inline} $eq.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $eq.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i24.bool(i1: i24, i2: i24) : bool
{
  i1 == i2
}

function {:inline} $eq.i24(i1: i24, i2: i24) : i1
{
  (if $eq.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv24.bool(i1: bv24, i2: bv24) : bool
{
  i1 != i2
}

function {:inline} $ne.bv24(i1: bv24, i2: bv24) : bv1
{
  (if $ne.bv24.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i24.bool(i1: i24, i2: i24) : bool
{
  i1 != i2
}

function {:inline} $ne.i24(i1: i24, i2: i24) : i1
{
  (if $ne.i24.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $slt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $sgt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ult.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv24(i1: bv24, i2: bv24) : bv24
{
  (if $ugt.bv24.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $smax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:inline} $umin.i24(i1: i24, i2: i24) : i24
{
  $min(i1, i2)
}

function {:inline} $umax.i24(i1: i24, i2: i24) : i24
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv24(i1: bv24) : bv24;

function $not.i24(i1: i24) : i24;

function {:inline} $load.i24(M: [ref]i24, p: ref) : i24
{
  M[p]
}

function {:inline} $load.bv24(M: [ref]bv24, p: ref) : bv24
{
  M[p]
}

function {:inline} $store.i24(M: [ref]i24, p: ref, v: i24) : [ref]i24
{
  M[p := v]
}

function {:inline} $store.bv24(M: [ref]bv24, p: ref, v: bv24) : [ref]bv24
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $add.i32(i1: i32, i2: i32) : i32
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $sub.i32(i1: i32, i2: i32) : i32
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv32(i1: bv32, i2: bv32) : bv32;

function {:inline} $mul.i32(i1: i32, i2: i32) : i32
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $sdiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsmod"} $smod.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvsrem"} $srem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $srem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvudiv"} $udiv.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "div"} $udiv.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvurem"} $urem.bv32(i1: bv32, i2: bv32) : bv32;

function {:builtin "rem"} $urem.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvshl"} $shl.bv32(i1: bv32, i2: bv32) : bv32;

function $shl.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvlshr"} $lshr.bv32(i1: bv32, i2: bv32) : bv32;

function $lshr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvashr"} $ashr.bv32(i1: bv32, i2: bv32) : bv32;

function $ashr.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvand"} $and.bv32(i1: bv32, i2: bv32) : bv32;

function $and.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvor"} $or.bv32(i1: bv32, i2: bv32) : bv32;

function $or.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvxor"} $xor.bv32(i1: bv32, i2: bv32) : bv32;

function $xor.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvnand"} $nand.bv32(i1: bv32, i2: bv32) : bv32;

function $nand.i32(i1: i32, i2: i32) : i32;

function {:bvbuiltin "bvule"} $ule.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ule.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ule.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $ule.i32(i1: i32, i2: i32) : i1
{
  (if $ule.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ult.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ult.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $ult.i32(i1: i32, i2: i32) : i1
{
  (if $ult.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $uge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $uge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $uge.i32(i1: i32, i2: i32) : i1
{
  (if $uge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $ugt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ugt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $ugt.i32(i1: i32, i2: i32) : i1
{
  (if $ugt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sle.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sle.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i32.bool(i1: i32, i2: i32) : bool
{
  i1 <= i2
}

function {:inline} $sle.i32(i1: i32, i2: i32) : i1
{
  (if $sle.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $slt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $slt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 < i2
}

function {:inline} $slt.i32(i1: i32, i2: i32) : i1
{
  (if $slt.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sge.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sge.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i32.bool(i1: i32, i2: i32) : bool
{
  i1 >= i2
}

function {:inline} $sge.i32(i1: i32, i2: i32) : i1
{
  (if $sge.i32.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv32.bool(i1: bv32, i2: bv32) : bool;

function {:inline} $sgt.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $sgt.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i32.bool(i1: i32, i2: i32) : bool
{
  i1 > i2
}

function {:inline} $sgt.i32(i1: i32, i2: i32) : i1
{
  (if $sgt.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 == i2
}

function {:inline} $eq.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $eq.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i32.bool(i1: i32, i2: i32) : bool
{
  i1 == i2
}

function {:inline} $eq.i32(i1: i32, i2: i32) : i1
{
  (if $eq.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv32.bool(i1: bv32, i2: bv32) : bool
{
  i1 != i2
}

function {:inline} $ne.bv32(i1: bv32, i2: bv32) : bv1
{
  (if $ne.bv32.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i32.bool(i1: i32, i2: i32) : bool
{
  i1 != i2
}

function {:inline} $ne.i32(i1: i32, i2: i32) : i1
{
  (if $ne.i32.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $slt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $sgt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ult.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv32(i1: bv32, i2: bv32) : bv32
{
  (if $ugt.bv32.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $smax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:inline} $umin.i32(i1: i32, i2: i32) : i32
{
  $min(i1, i2)
}

function {:inline} $umax.i32(i1: i32, i2: i32) : i32
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv32(i1: bv32) : bv32;

function $not.i32(i1: i32) : i32;

function {:inline} $load.i32(M: [ref]i32, p: ref) : i32
{
  M[p]
}

function {:inline} $load.bv32(M: [ref]bv32, p: ref) : bv32
{
  M[p]
}

function {:inline} $store.i32(M: [ref]i32, p: ref, v: i32) : [ref]i32
{
  M[p := v]
}

function {:inline} $store.bv32(M: [ref]bv32, p: ref, v: bv32) : [ref]bv32
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $add.i40(i1: i40, i2: i40) : i40
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $sub.i40(i1: i40, i2: i40) : i40
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv40(i1: bv40, i2: bv40) : bv40;

function {:inline} $mul.i40(i1: i40, i2: i40) : i40
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $sdiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsmod"} $smod.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvsrem"} $srem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $srem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvudiv"} $udiv.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "div"} $udiv.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvurem"} $urem.bv40(i1: bv40, i2: bv40) : bv40;

function {:builtin "rem"} $urem.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvshl"} $shl.bv40(i1: bv40, i2: bv40) : bv40;

function $shl.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvlshr"} $lshr.bv40(i1: bv40, i2: bv40) : bv40;

function $lshr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvashr"} $ashr.bv40(i1: bv40, i2: bv40) : bv40;

function $ashr.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvand"} $and.bv40(i1: bv40, i2: bv40) : bv40;

function $and.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvor"} $or.bv40(i1: bv40, i2: bv40) : bv40;

function $or.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvxor"} $xor.bv40(i1: bv40, i2: bv40) : bv40;

function $xor.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvnand"} $nand.bv40(i1: bv40, i2: bv40) : bv40;

function $nand.i40(i1: i40, i2: i40) : i40;

function {:bvbuiltin "bvule"} $ule.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ule.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ule.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $ule.i40(i1: i40, i2: i40) : i1
{
  (if $ule.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ult.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ult.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $ult.i40(i1: i40, i2: i40) : i1
{
  (if $ult.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $uge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $uge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $uge.i40(i1: i40, i2: i40) : i1
{
  (if $uge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $ugt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ugt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $ugt.i40(i1: i40, i2: i40) : i1
{
  (if $ugt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sle.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sle.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i40.bool(i1: i40, i2: i40) : bool
{
  i1 <= i2
}

function {:inline} $sle.i40(i1: i40, i2: i40) : i1
{
  (if $sle.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $slt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $slt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 < i2
}

function {:inline} $slt.i40(i1: i40, i2: i40) : i1
{
  (if $slt.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sge.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sge.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i40.bool(i1: i40, i2: i40) : bool
{
  i1 >= i2
}

function {:inline} $sge.i40(i1: i40, i2: i40) : i1
{
  (if $sge.i40.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv40.bool(i1: bv40, i2: bv40) : bool;

function {:inline} $sgt.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $sgt.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i40.bool(i1: i40, i2: i40) : bool
{
  i1 > i2
}

function {:inline} $sgt.i40(i1: i40, i2: i40) : i1
{
  (if $sgt.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 == i2
}

function {:inline} $eq.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $eq.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i40.bool(i1: i40, i2: i40) : bool
{
  i1 == i2
}

function {:inline} $eq.i40(i1: i40, i2: i40) : i1
{
  (if $eq.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv40.bool(i1: bv40, i2: bv40) : bool
{
  i1 != i2
}

function {:inline} $ne.bv40(i1: bv40, i2: bv40) : bv1
{
  (if $ne.bv40.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i40.bool(i1: i40, i2: i40) : bool
{
  i1 != i2
}

function {:inline} $ne.i40(i1: i40, i2: i40) : i1
{
  (if $ne.i40.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $slt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $sgt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ult.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv40(i1: bv40, i2: bv40) : bv40
{
  (if $ugt.bv40.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $smax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:inline} $umin.i40(i1: i40, i2: i40) : i40
{
  $min(i1, i2)
}

function {:inline} $umax.i40(i1: i40, i2: i40) : i40
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv40(i1: bv40) : bv40;

function $not.i40(i1: i40) : i40;

function {:inline} $load.i40(M: [ref]i40, p: ref) : i40
{
  M[p]
}

function {:inline} $load.bv40(M: [ref]bv40, p: ref) : bv40
{
  M[p]
}

function {:inline} $store.i40(M: [ref]i40, p: ref, v: i40) : [ref]i40
{
  M[p := v]
}

function {:inline} $store.bv40(M: [ref]bv40, p: ref, v: bv40) : [ref]bv40
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $add.i48(i1: i48, i2: i48) : i48
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $sub.i48(i1: i48, i2: i48) : i48
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv48(i1: bv48, i2: bv48) : bv48;

function {:inline} $mul.i48(i1: i48, i2: i48) : i48
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $sdiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsmod"} $smod.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvsrem"} $srem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $srem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvudiv"} $udiv.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "div"} $udiv.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvurem"} $urem.bv48(i1: bv48, i2: bv48) : bv48;

function {:builtin "rem"} $urem.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvshl"} $shl.bv48(i1: bv48, i2: bv48) : bv48;

function $shl.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvlshr"} $lshr.bv48(i1: bv48, i2: bv48) : bv48;

function $lshr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvashr"} $ashr.bv48(i1: bv48, i2: bv48) : bv48;

function $ashr.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvand"} $and.bv48(i1: bv48, i2: bv48) : bv48;

function $and.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvor"} $or.bv48(i1: bv48, i2: bv48) : bv48;

function $or.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvxor"} $xor.bv48(i1: bv48, i2: bv48) : bv48;

function $xor.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvnand"} $nand.bv48(i1: bv48, i2: bv48) : bv48;

function $nand.i48(i1: i48, i2: i48) : i48;

function {:bvbuiltin "bvule"} $ule.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ule.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ule.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $ule.i48(i1: i48, i2: i48) : i1
{
  (if $ule.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ult.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ult.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $ult.i48(i1: i48, i2: i48) : i1
{
  (if $ult.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $uge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $uge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $uge.i48(i1: i48, i2: i48) : i1
{
  (if $uge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $ugt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ugt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $ugt.i48(i1: i48, i2: i48) : i1
{
  (if $ugt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sle.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sle.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i48.bool(i1: i48, i2: i48) : bool
{
  i1 <= i2
}

function {:inline} $sle.i48(i1: i48, i2: i48) : i1
{
  (if $sle.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $slt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $slt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 < i2
}

function {:inline} $slt.i48(i1: i48, i2: i48) : i1
{
  (if $slt.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sge.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sge.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i48.bool(i1: i48, i2: i48) : bool
{
  i1 >= i2
}

function {:inline} $sge.i48(i1: i48, i2: i48) : i1
{
  (if $sge.i48.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv48.bool(i1: bv48, i2: bv48) : bool;

function {:inline} $sgt.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $sgt.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i48.bool(i1: i48, i2: i48) : bool
{
  i1 > i2
}

function {:inline} $sgt.i48(i1: i48, i2: i48) : i1
{
  (if $sgt.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 == i2
}

function {:inline} $eq.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $eq.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i48.bool(i1: i48, i2: i48) : bool
{
  i1 == i2
}

function {:inline} $eq.i48(i1: i48, i2: i48) : i1
{
  (if $eq.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv48.bool(i1: bv48, i2: bv48) : bool
{
  i1 != i2
}

function {:inline} $ne.bv48(i1: bv48, i2: bv48) : bv1
{
  (if $ne.bv48.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i48.bool(i1: i48, i2: i48) : bool
{
  i1 != i2
}

function {:inline} $ne.i48(i1: i48, i2: i48) : i1
{
  (if $ne.i48.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $slt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $sgt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ult.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv48(i1: bv48, i2: bv48) : bv48
{
  (if $ugt.bv48.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $smax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:inline} $umin.i48(i1: i48, i2: i48) : i48
{
  $min(i1, i2)
}

function {:inline} $umax.i48(i1: i48, i2: i48) : i48
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv48(i1: bv48) : bv48;

function $not.i48(i1: i48) : i48;

function {:inline} $load.i48(M: [ref]i48, p: ref) : i48
{
  M[p]
}

function {:inline} $load.bv48(M: [ref]bv48, p: ref) : bv48
{
  M[p]
}

function {:inline} $store.i48(M: [ref]i48, p: ref, v: i48) : [ref]i48
{
  M[p := v]
}

function {:inline} $store.bv48(M: [ref]bv48, p: ref, v: bv48) : [ref]bv48
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $add.i56(i1: i56, i2: i56) : i56
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $sub.i56(i1: i56, i2: i56) : i56
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv56(i1: bv56, i2: bv56) : bv56;

function {:inline} $mul.i56(i1: i56, i2: i56) : i56
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $sdiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsmod"} $smod.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvsrem"} $srem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $srem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvudiv"} $udiv.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "div"} $udiv.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvurem"} $urem.bv56(i1: bv56, i2: bv56) : bv56;

function {:builtin "rem"} $urem.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvshl"} $shl.bv56(i1: bv56, i2: bv56) : bv56;

function $shl.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvlshr"} $lshr.bv56(i1: bv56, i2: bv56) : bv56;

function $lshr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvashr"} $ashr.bv56(i1: bv56, i2: bv56) : bv56;

function $ashr.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvand"} $and.bv56(i1: bv56, i2: bv56) : bv56;

function $and.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvor"} $or.bv56(i1: bv56, i2: bv56) : bv56;

function $or.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvxor"} $xor.bv56(i1: bv56, i2: bv56) : bv56;

function $xor.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvnand"} $nand.bv56(i1: bv56, i2: bv56) : bv56;

function $nand.i56(i1: i56, i2: i56) : i56;

function {:bvbuiltin "bvule"} $ule.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ule.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ule.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $ule.i56(i1: i56, i2: i56) : i1
{
  (if $ule.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ult.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ult.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $ult.i56(i1: i56, i2: i56) : i1
{
  (if $ult.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $uge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $uge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $uge.i56(i1: i56, i2: i56) : i1
{
  (if $uge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $ugt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ugt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $ugt.i56(i1: i56, i2: i56) : i1
{
  (if $ugt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sle.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sle.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i56.bool(i1: i56, i2: i56) : bool
{
  i1 <= i2
}

function {:inline} $sle.i56(i1: i56, i2: i56) : i1
{
  (if $sle.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $slt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $slt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 < i2
}

function {:inline} $slt.i56(i1: i56, i2: i56) : i1
{
  (if $slt.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sge.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sge.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i56.bool(i1: i56, i2: i56) : bool
{
  i1 >= i2
}

function {:inline} $sge.i56(i1: i56, i2: i56) : i1
{
  (if $sge.i56.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv56.bool(i1: bv56, i2: bv56) : bool;

function {:inline} $sgt.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $sgt.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i56.bool(i1: i56, i2: i56) : bool
{
  i1 > i2
}

function {:inline} $sgt.i56(i1: i56, i2: i56) : i1
{
  (if $sgt.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 == i2
}

function {:inline} $eq.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $eq.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i56.bool(i1: i56, i2: i56) : bool
{
  i1 == i2
}

function {:inline} $eq.i56(i1: i56, i2: i56) : i1
{
  (if $eq.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv56.bool(i1: bv56, i2: bv56) : bool
{
  i1 != i2
}

function {:inline} $ne.bv56(i1: bv56, i2: bv56) : bv1
{
  (if $ne.bv56.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i56.bool(i1: i56, i2: i56) : bool
{
  i1 != i2
}

function {:inline} $ne.i56(i1: i56, i2: i56) : i1
{
  (if $ne.i56.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $slt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $sgt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ult.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv56(i1: bv56, i2: bv56) : bv56
{
  (if $ugt.bv56.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $smax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:inline} $umin.i56(i1: i56, i2: i56) : i56
{
  $min(i1, i2)
}

function {:inline} $umax.i56(i1: i56, i2: i56) : i56
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv56(i1: bv56) : bv56;

function $not.i56(i1: i56) : i56;

function {:inline} $load.i56(M: [ref]i56, p: ref) : i56
{
  M[p]
}

function {:inline} $load.bv56(M: [ref]bv56, p: ref) : bv56
{
  M[p]
}

function {:inline} $store.i56(M: [ref]i56, p: ref, v: i56) : [ref]i56
{
  M[p := v]
}

function {:inline} $store.bv56(M: [ref]bv56, p: ref, v: bv56) : [ref]bv56
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $add.i64(i1: i64, i2: i64) : i64
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $sub.i64(i1: i64, i2: i64) : i64
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv64(i1: bv64, i2: bv64) : bv64;

function {:inline} $mul.i64(i1: i64, i2: i64) : i64
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $sdiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsmod"} $smod.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvsrem"} $srem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $srem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvudiv"} $udiv.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "div"} $udiv.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvurem"} $urem.bv64(i1: bv64, i2: bv64) : bv64;

function {:builtin "rem"} $urem.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvshl"} $shl.bv64(i1: bv64, i2: bv64) : bv64;

function $shl.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvlshr"} $lshr.bv64(i1: bv64, i2: bv64) : bv64;

function $lshr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvashr"} $ashr.bv64(i1: bv64, i2: bv64) : bv64;

function $ashr.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvand"} $and.bv64(i1: bv64, i2: bv64) : bv64;

function $and.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvor"} $or.bv64(i1: bv64, i2: bv64) : bv64;

function $or.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvxor"} $xor.bv64(i1: bv64, i2: bv64) : bv64;

function $xor.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvnand"} $nand.bv64(i1: bv64, i2: bv64) : bv64;

function $nand.i64(i1: i64, i2: i64) : i64;

function {:bvbuiltin "bvule"} $ule.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ule.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ule.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $ule.i64(i1: i64, i2: i64) : i1
{
  (if $ule.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ult.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ult.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $ult.i64(i1: i64, i2: i64) : i1
{
  (if $ult.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $uge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $uge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $uge.i64(i1: i64, i2: i64) : i1
{
  (if $uge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $ugt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ugt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $ugt.i64(i1: i64, i2: i64) : i1
{
  (if $ugt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sle.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sle.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i64.bool(i1: i64, i2: i64) : bool
{
  i1 <= i2
}

function {:inline} $sle.i64(i1: i64, i2: i64) : i1
{
  (if $sle.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $slt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $slt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 < i2
}

function {:inline} $slt.i64(i1: i64, i2: i64) : i1
{
  (if $slt.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sge.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sge.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i64.bool(i1: i64, i2: i64) : bool
{
  i1 >= i2
}

function {:inline} $sge.i64(i1: i64, i2: i64) : i1
{
  (if $sge.i64.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv64.bool(i1: bv64, i2: bv64) : bool;

function {:inline} $sgt.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $sgt.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i64.bool(i1: i64, i2: i64) : bool
{
  i1 > i2
}

function {:inline} $sgt.i64(i1: i64, i2: i64) : i1
{
  (if $sgt.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 == i2
}

function {:inline} $eq.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $eq.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i64.bool(i1: i64, i2: i64) : bool
{
  i1 == i2
}

function {:inline} $eq.i64(i1: i64, i2: i64) : i1
{
  (if $eq.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv64.bool(i1: bv64, i2: bv64) : bool
{
  i1 != i2
}

function {:inline} $ne.bv64(i1: bv64, i2: bv64) : bv1
{
  (if $ne.bv64.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i64.bool(i1: i64, i2: i64) : bool
{
  i1 != i2
}

function {:inline} $ne.i64(i1: i64, i2: i64) : i1
{
  (if $ne.i64.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $slt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $sgt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ult.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv64(i1: bv64, i2: bv64) : bv64
{
  (if $ugt.bv64.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $smax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:inline} $umin.i64(i1: i64, i2: i64) : i64
{
  $min(i1, i2)
}

function {:inline} $umax.i64(i1: i64, i2: i64) : i64
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv64(i1: bv64) : bv64;

function $not.i64(i1: i64) : i64;

function {:inline} $load.i64(M: [ref]i64, p: ref) : i64
{
  M[p]
}

function {:inline} $load.bv64(M: [ref]bv64, p: ref) : bv64
{
  M[p]
}

function {:inline} $store.i64(M: [ref]i64, p: ref, v: i64) : [ref]i64
{
  M[p := v]
}

function {:inline} $store.bv64(M: [ref]bv64, p: ref, v: bv64) : [ref]bv64
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $add.i80(i1: i80, i2: i80) : i80
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $sub.i80(i1: i80, i2: i80) : i80
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv80(i1: bv80, i2: bv80) : bv80;

function {:inline} $mul.i80(i1: i80, i2: i80) : i80
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $sdiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsmod"} $smod.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvsrem"} $srem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $srem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvudiv"} $udiv.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "div"} $udiv.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvurem"} $urem.bv80(i1: bv80, i2: bv80) : bv80;

function {:builtin "rem"} $urem.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvshl"} $shl.bv80(i1: bv80, i2: bv80) : bv80;

function $shl.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvlshr"} $lshr.bv80(i1: bv80, i2: bv80) : bv80;

function $lshr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvashr"} $ashr.bv80(i1: bv80, i2: bv80) : bv80;

function $ashr.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvand"} $and.bv80(i1: bv80, i2: bv80) : bv80;

function $and.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvor"} $or.bv80(i1: bv80, i2: bv80) : bv80;

function $or.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvxor"} $xor.bv80(i1: bv80, i2: bv80) : bv80;

function $xor.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvnand"} $nand.bv80(i1: bv80, i2: bv80) : bv80;

function $nand.i80(i1: i80, i2: i80) : i80;

function {:bvbuiltin "bvule"} $ule.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ule.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ule.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $ule.i80(i1: i80, i2: i80) : i1
{
  (if $ule.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ult.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ult.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $ult.i80(i1: i80, i2: i80) : i1
{
  (if $ult.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $uge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $uge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $uge.i80(i1: i80, i2: i80) : i1
{
  (if $uge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $ugt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ugt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $ugt.i80(i1: i80, i2: i80) : i1
{
  (if $ugt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sle.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sle.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i80.bool(i1: i80, i2: i80) : bool
{
  i1 <= i2
}

function {:inline} $sle.i80(i1: i80, i2: i80) : i1
{
  (if $sle.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $slt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $slt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 < i2
}

function {:inline} $slt.i80(i1: i80, i2: i80) : i1
{
  (if $slt.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sge.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sge.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i80.bool(i1: i80, i2: i80) : bool
{
  i1 >= i2
}

function {:inline} $sge.i80(i1: i80, i2: i80) : i1
{
  (if $sge.i80.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv80.bool(i1: bv80, i2: bv80) : bool;

function {:inline} $sgt.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $sgt.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i80.bool(i1: i80, i2: i80) : bool
{
  i1 > i2
}

function {:inline} $sgt.i80(i1: i80, i2: i80) : i1
{
  (if $sgt.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 == i2
}

function {:inline} $eq.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $eq.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i80.bool(i1: i80, i2: i80) : bool
{
  i1 == i2
}

function {:inline} $eq.i80(i1: i80, i2: i80) : i1
{
  (if $eq.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv80.bool(i1: bv80, i2: bv80) : bool
{
  i1 != i2
}

function {:inline} $ne.bv80(i1: bv80, i2: bv80) : bv1
{
  (if $ne.bv80.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i80.bool(i1: i80, i2: i80) : bool
{
  i1 != i2
}

function {:inline} $ne.i80(i1: i80, i2: i80) : i1
{
  (if $ne.i80.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $slt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $sgt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ult.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv80(i1: bv80, i2: bv80) : bv80
{
  (if $ugt.bv80.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $smax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:inline} $umin.i80(i1: i80, i2: i80) : i80
{
  $min(i1, i2)
}

function {:inline} $umax.i80(i1: i80, i2: i80) : i80
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv80(i1: bv80) : bv80;

function $not.i80(i1: i80) : i80;

function {:inline} $load.i80(M: [ref]i80, p: ref) : i80
{
  M[p]
}

function {:inline} $load.bv80(M: [ref]bv80, p: ref) : bv80
{
  M[p]
}

function {:inline} $store.i80(M: [ref]i80, p: ref, v: i80) : [ref]i80
{
  M[p := v]
}

function {:inline} $store.bv80(M: [ref]bv80, p: ref, v: bv80) : [ref]bv80
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $add.i88(i1: i88, i2: i88) : i88
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $sub.i88(i1: i88, i2: i88) : i88
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv88(i1: bv88, i2: bv88) : bv88;

function {:inline} $mul.i88(i1: i88, i2: i88) : i88
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $sdiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsmod"} $smod.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvsrem"} $srem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $srem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvudiv"} $udiv.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "div"} $udiv.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvurem"} $urem.bv88(i1: bv88, i2: bv88) : bv88;

function {:builtin "rem"} $urem.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvshl"} $shl.bv88(i1: bv88, i2: bv88) : bv88;

function $shl.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvlshr"} $lshr.bv88(i1: bv88, i2: bv88) : bv88;

function $lshr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvashr"} $ashr.bv88(i1: bv88, i2: bv88) : bv88;

function $ashr.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvand"} $and.bv88(i1: bv88, i2: bv88) : bv88;

function $and.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvor"} $or.bv88(i1: bv88, i2: bv88) : bv88;

function $or.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvxor"} $xor.bv88(i1: bv88, i2: bv88) : bv88;

function $xor.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvnand"} $nand.bv88(i1: bv88, i2: bv88) : bv88;

function $nand.i88(i1: i88, i2: i88) : i88;

function {:bvbuiltin "bvule"} $ule.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ule.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ule.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $ule.i88(i1: i88, i2: i88) : i1
{
  (if $ule.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ult.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ult.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $ult.i88(i1: i88, i2: i88) : i1
{
  (if $ult.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $uge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $uge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $uge.i88(i1: i88, i2: i88) : i1
{
  (if $uge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $ugt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ugt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $ugt.i88(i1: i88, i2: i88) : i1
{
  (if $ugt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sle.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sle.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i88.bool(i1: i88, i2: i88) : bool
{
  i1 <= i2
}

function {:inline} $sle.i88(i1: i88, i2: i88) : i1
{
  (if $sle.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $slt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $slt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 < i2
}

function {:inline} $slt.i88(i1: i88, i2: i88) : i1
{
  (if $slt.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sge.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sge.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i88.bool(i1: i88, i2: i88) : bool
{
  i1 >= i2
}

function {:inline} $sge.i88(i1: i88, i2: i88) : i1
{
  (if $sge.i88.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv88.bool(i1: bv88, i2: bv88) : bool;

function {:inline} $sgt.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $sgt.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i88.bool(i1: i88, i2: i88) : bool
{
  i1 > i2
}

function {:inline} $sgt.i88(i1: i88, i2: i88) : i1
{
  (if $sgt.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 == i2
}

function {:inline} $eq.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $eq.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i88.bool(i1: i88, i2: i88) : bool
{
  i1 == i2
}

function {:inline} $eq.i88(i1: i88, i2: i88) : i1
{
  (if $eq.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv88.bool(i1: bv88, i2: bv88) : bool
{
  i1 != i2
}

function {:inline} $ne.bv88(i1: bv88, i2: bv88) : bv1
{
  (if $ne.bv88.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i88.bool(i1: i88, i2: i88) : bool
{
  i1 != i2
}

function {:inline} $ne.i88(i1: i88, i2: i88) : i1
{
  (if $ne.i88.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $slt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $sgt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ult.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv88(i1: bv88, i2: bv88) : bv88
{
  (if $ugt.bv88.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $smax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:inline} $umin.i88(i1: i88, i2: i88) : i88
{
  $min(i1, i2)
}

function {:inline} $umax.i88(i1: i88, i2: i88) : i88
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv88(i1: bv88) : bv88;

function $not.i88(i1: i88) : i88;

function {:inline} $load.i88(M: [ref]i88, p: ref) : i88
{
  M[p]
}

function {:inline} $load.bv88(M: [ref]bv88, p: ref) : bv88
{
  M[p]
}

function {:inline} $store.i88(M: [ref]i88, p: ref, v: i88) : [ref]i88
{
  M[p := v]
}

function {:inline} $store.bv88(M: [ref]bv88, p: ref, v: bv88) : [ref]bv88
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $add.i96(i1: i96, i2: i96) : i96
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $sub.i96(i1: i96, i2: i96) : i96
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv96(i1: bv96, i2: bv96) : bv96;

function {:inline} $mul.i96(i1: i96, i2: i96) : i96
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $sdiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsmod"} $smod.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvsrem"} $srem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $srem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvudiv"} $udiv.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "div"} $udiv.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvurem"} $urem.bv96(i1: bv96, i2: bv96) : bv96;

function {:builtin "rem"} $urem.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvshl"} $shl.bv96(i1: bv96, i2: bv96) : bv96;

function $shl.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvlshr"} $lshr.bv96(i1: bv96, i2: bv96) : bv96;

function $lshr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvashr"} $ashr.bv96(i1: bv96, i2: bv96) : bv96;

function $ashr.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvand"} $and.bv96(i1: bv96, i2: bv96) : bv96;

function $and.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvor"} $or.bv96(i1: bv96, i2: bv96) : bv96;

function $or.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvxor"} $xor.bv96(i1: bv96, i2: bv96) : bv96;

function $xor.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvnand"} $nand.bv96(i1: bv96, i2: bv96) : bv96;

function $nand.i96(i1: i96, i2: i96) : i96;

function {:bvbuiltin "bvule"} $ule.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ule.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ule.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $ule.i96(i1: i96, i2: i96) : i1
{
  (if $ule.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ult.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ult.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $ult.i96(i1: i96, i2: i96) : i1
{
  (if $ult.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $uge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $uge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $uge.i96(i1: i96, i2: i96) : i1
{
  (if $uge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $ugt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ugt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $ugt.i96(i1: i96, i2: i96) : i1
{
  (if $ugt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sle.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sle.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i96.bool(i1: i96, i2: i96) : bool
{
  i1 <= i2
}

function {:inline} $sle.i96(i1: i96, i2: i96) : i1
{
  (if $sle.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $slt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $slt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 < i2
}

function {:inline} $slt.i96(i1: i96, i2: i96) : i1
{
  (if $slt.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sge.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sge.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i96.bool(i1: i96, i2: i96) : bool
{
  i1 >= i2
}

function {:inline} $sge.i96(i1: i96, i2: i96) : i1
{
  (if $sge.i96.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv96.bool(i1: bv96, i2: bv96) : bool;

function {:inline} $sgt.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $sgt.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i96.bool(i1: i96, i2: i96) : bool
{
  i1 > i2
}

function {:inline} $sgt.i96(i1: i96, i2: i96) : i1
{
  (if $sgt.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 == i2
}

function {:inline} $eq.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $eq.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i96.bool(i1: i96, i2: i96) : bool
{
  i1 == i2
}

function {:inline} $eq.i96(i1: i96, i2: i96) : i1
{
  (if $eq.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv96.bool(i1: bv96, i2: bv96) : bool
{
  i1 != i2
}

function {:inline} $ne.bv96(i1: bv96, i2: bv96) : bv1
{
  (if $ne.bv96.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i96.bool(i1: i96, i2: i96) : bool
{
  i1 != i2
}

function {:inline} $ne.i96(i1: i96, i2: i96) : i1
{
  (if $ne.i96.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $slt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $sgt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ult.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv96(i1: bv96, i2: bv96) : bv96
{
  (if $ugt.bv96.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $smax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:inline} $umin.i96(i1: i96, i2: i96) : i96
{
  $min(i1, i2)
}

function {:inline} $umax.i96(i1: i96, i2: i96) : i96
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv96(i1: bv96) : bv96;

function $not.i96(i1: i96) : i96;

function {:inline} $load.i96(M: [ref]i96, p: ref) : i96
{
  M[p]
}

function {:inline} $load.bv96(M: [ref]bv96, p: ref) : bv96
{
  M[p]
}

function {:inline} $store.i96(M: [ref]i96, p: ref, v: i96) : [ref]i96
{
  M[p := v]
}

function {:inline} $store.bv96(M: [ref]bv96, p: ref, v: bv96) : [ref]bv96
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $add.i128(i1: i128, i2: i128) : i128
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $sub.i128(i1: i128, i2: i128) : i128
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv128(i1: bv128, i2: bv128) : bv128;

function {:inline} $mul.i128(i1: i128, i2: i128) : i128
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $sdiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsmod"} $smod.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvsrem"} $srem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $srem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvudiv"} $udiv.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "div"} $udiv.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvurem"} $urem.bv128(i1: bv128, i2: bv128) : bv128;

function {:builtin "rem"} $urem.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvshl"} $shl.bv128(i1: bv128, i2: bv128) : bv128;

function $shl.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvlshr"} $lshr.bv128(i1: bv128, i2: bv128) : bv128;

function $lshr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvashr"} $ashr.bv128(i1: bv128, i2: bv128) : bv128;

function $ashr.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvand"} $and.bv128(i1: bv128, i2: bv128) : bv128;

function $and.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvor"} $or.bv128(i1: bv128, i2: bv128) : bv128;

function $or.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvxor"} $xor.bv128(i1: bv128, i2: bv128) : bv128;

function $xor.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvnand"} $nand.bv128(i1: bv128, i2: bv128) : bv128;

function $nand.i128(i1: i128, i2: i128) : i128;

function {:bvbuiltin "bvule"} $ule.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ule.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ule.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $ule.i128(i1: i128, i2: i128) : i1
{
  (if $ule.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ult.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ult.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $ult.i128(i1: i128, i2: i128) : i1
{
  (if $ult.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $uge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $uge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $uge.i128(i1: i128, i2: i128) : i1
{
  (if $uge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $ugt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ugt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $ugt.i128(i1: i128, i2: i128) : i1
{
  (if $ugt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sle.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sle.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i128.bool(i1: i128, i2: i128) : bool
{
  i1 <= i2
}

function {:inline} $sle.i128(i1: i128, i2: i128) : i1
{
  (if $sle.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $slt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $slt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 < i2
}

function {:inline} $slt.i128(i1: i128, i2: i128) : i1
{
  (if $slt.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sge.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sge.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i128.bool(i1: i128, i2: i128) : bool
{
  i1 >= i2
}

function {:inline} $sge.i128(i1: i128, i2: i128) : i1
{
  (if $sge.i128.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv128.bool(i1: bv128, i2: bv128) : bool;

function {:inline} $sgt.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $sgt.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i128.bool(i1: i128, i2: i128) : bool
{
  i1 > i2
}

function {:inline} $sgt.i128(i1: i128, i2: i128) : i1
{
  (if $sgt.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 == i2
}

function {:inline} $eq.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $eq.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i128.bool(i1: i128, i2: i128) : bool
{
  i1 == i2
}

function {:inline} $eq.i128(i1: i128, i2: i128) : i1
{
  (if $eq.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv128.bool(i1: bv128, i2: bv128) : bool
{
  i1 != i2
}

function {:inline} $ne.bv128(i1: bv128, i2: bv128) : bv1
{
  (if $ne.bv128.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i128.bool(i1: i128, i2: i128) : bool
{
  i1 != i2
}

function {:inline} $ne.i128(i1: i128, i2: i128) : i1
{
  (if $ne.i128.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $slt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $sgt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ult.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv128(i1: bv128, i2: bv128) : bv128
{
  (if $ugt.bv128.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $smax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:inline} $umin.i128(i1: i128, i2: i128) : i128
{
  $min(i1, i2)
}

function {:inline} $umax.i128(i1: i128, i2: i128) : i128
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv128(i1: bv128) : bv128;

function $not.i128(i1: i128) : i128;

function {:inline} $load.i128(M: [ref]i128, p: ref) : i128
{
  M[p]
}

function {:inline} $load.bv128(M: [ref]bv128, p: ref) : bv128
{
  M[p]
}

function {:inline} $store.i128(M: [ref]i128, p: ref, v: i128) : [ref]i128
{
  M[p := v]
}

function {:inline} $store.bv128(M: [ref]bv128, p: ref, v: bv128) : [ref]bv128
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $add.i160(i1: i160, i2: i160) : i160
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $sub.i160(i1: i160, i2: i160) : i160
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv160(i1: bv160, i2: bv160) : bv160;

function {:inline} $mul.i160(i1: i160, i2: i160) : i160
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $sdiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsmod"} $smod.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvsrem"} $srem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $srem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvudiv"} $udiv.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "div"} $udiv.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvurem"} $urem.bv160(i1: bv160, i2: bv160) : bv160;

function {:builtin "rem"} $urem.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvshl"} $shl.bv160(i1: bv160, i2: bv160) : bv160;

function $shl.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvlshr"} $lshr.bv160(i1: bv160, i2: bv160) : bv160;

function $lshr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvashr"} $ashr.bv160(i1: bv160, i2: bv160) : bv160;

function $ashr.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvand"} $and.bv160(i1: bv160, i2: bv160) : bv160;

function $and.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvor"} $or.bv160(i1: bv160, i2: bv160) : bv160;

function $or.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvxor"} $xor.bv160(i1: bv160, i2: bv160) : bv160;

function $xor.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvnand"} $nand.bv160(i1: bv160, i2: bv160) : bv160;

function $nand.i160(i1: i160, i2: i160) : i160;

function {:bvbuiltin "bvule"} $ule.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ule.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ule.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $ule.i160(i1: i160, i2: i160) : i1
{
  (if $ule.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ult.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ult.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $ult.i160(i1: i160, i2: i160) : i1
{
  (if $ult.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $uge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $uge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $uge.i160(i1: i160, i2: i160) : i1
{
  (if $uge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $ugt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ugt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $ugt.i160(i1: i160, i2: i160) : i1
{
  (if $ugt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sle.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sle.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i160.bool(i1: i160, i2: i160) : bool
{
  i1 <= i2
}

function {:inline} $sle.i160(i1: i160, i2: i160) : i1
{
  (if $sle.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $slt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $slt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 < i2
}

function {:inline} $slt.i160(i1: i160, i2: i160) : i1
{
  (if $slt.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sge.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sge.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i160.bool(i1: i160, i2: i160) : bool
{
  i1 >= i2
}

function {:inline} $sge.i160(i1: i160, i2: i160) : i1
{
  (if $sge.i160.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv160.bool(i1: bv160, i2: bv160) : bool;

function {:inline} $sgt.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $sgt.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i160.bool(i1: i160, i2: i160) : bool
{
  i1 > i2
}

function {:inline} $sgt.i160(i1: i160, i2: i160) : i1
{
  (if $sgt.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 == i2
}

function {:inline} $eq.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $eq.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i160.bool(i1: i160, i2: i160) : bool
{
  i1 == i2
}

function {:inline} $eq.i160(i1: i160, i2: i160) : i1
{
  (if $eq.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv160.bool(i1: bv160, i2: bv160) : bool
{
  i1 != i2
}

function {:inline} $ne.bv160(i1: bv160, i2: bv160) : bv1
{
  (if $ne.bv160.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i160.bool(i1: i160, i2: i160) : bool
{
  i1 != i2
}

function {:inline} $ne.i160(i1: i160, i2: i160) : i1
{
  (if $ne.i160.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $slt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $sgt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ult.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv160(i1: bv160, i2: bv160) : bv160
{
  (if $ugt.bv160.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $smax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:inline} $umin.i160(i1: i160, i2: i160) : i160
{
  $min(i1, i2)
}

function {:inline} $umax.i160(i1: i160, i2: i160) : i160
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv160(i1: bv160) : bv160;

function $not.i160(i1: i160) : i160;

function {:inline} $load.i160(M: [ref]i160, p: ref) : i160
{
  M[p]
}

function {:inline} $load.bv160(M: [ref]bv160, p: ref) : bv160
{
  M[p]
}

function {:inline} $store.i160(M: [ref]i160, p: ref, v: i160) : [ref]i160
{
  M[p := v]
}

function {:inline} $store.bv160(M: [ref]bv160, p: ref, v: bv160) : [ref]bv160
{
  M[p := v]
}

function {:bvbuiltin "bvadd"} $add.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $add.i256(i1: i256, i2: i256) : i256
{
  i1 + i2
}

function {:bvbuiltin "bvsub"} $sub.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $sub.i256(i1: i256, i2: i256) : i256
{
  i1 - i2
}

function {:bvbuiltin "bvmul"} $mul.bv256(i1: bv256, i2: bv256) : bv256;

function {:inline} $mul.i256(i1: i256, i2: i256) : i256
{
  i1 * i2
}

function {:bvbuiltin "bvsdiv"} $sdiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $sdiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsmod"} $smod.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvsrem"} $srem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $srem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvudiv"} $udiv.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "div"} $udiv.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvurem"} $urem.bv256(i1: bv256, i2: bv256) : bv256;

function {:builtin "rem"} $urem.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvshl"} $shl.bv256(i1: bv256, i2: bv256) : bv256;

function $shl.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvlshr"} $lshr.bv256(i1: bv256, i2: bv256) : bv256;

function $lshr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvashr"} $ashr.bv256(i1: bv256, i2: bv256) : bv256;

function $ashr.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvand"} $and.bv256(i1: bv256, i2: bv256) : bv256;

function $and.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvor"} $or.bv256(i1: bv256, i2: bv256) : bv256;

function $or.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvxor"} $xor.bv256(i1: bv256, i2: bv256) : bv256;

function $xor.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvnand"} $nand.bv256(i1: bv256, i2: bv256) : bv256;

function $nand.i256(i1: i256, i2: i256) : i256;

function {:bvbuiltin "bvule"} $ule.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ule.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ule.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ule.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $ule.i256(i1: i256, i2: i256) : i1
{
  (if $ule.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvult"} $ult.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ult.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ult.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ult.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $ult.i256(i1: i256, i2: i256) : i1
{
  (if $ult.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvuge"} $uge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $uge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $uge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $uge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $uge.i256(i1: i256, i2: i256) : i1
{
  (if $uge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvugt"} $ugt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $ugt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ugt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ugt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $ugt.i256(i1: i256, i2: i256) : i1
{
  (if $ugt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsle"} $sle.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sle.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sle.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sle.i256.bool(i1: i256, i2: i256) : bool
{
  i1 <= i2
}

function {:inline} $sle.i256(i1: i256, i2: i256) : i1
{
  (if $sle.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvslt"} $slt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $slt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $slt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $slt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 < i2
}

function {:inline} $slt.i256(i1: i256, i2: i256) : i1
{
  (if $slt.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsge"} $sge.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sge.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sge.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sge.i256.bool(i1: i256, i2: i256) : bool
{
  i1 >= i2
}

function {:inline} $sge.i256(i1: i256, i2: i256) : i1
{
  (if $sge.i256.bool(i1, i2) then 1 else 0)
}

function {:bvbuiltin "bvsgt"} $sgt.bv256.bool(i1: bv256, i2: bv256) : bool;

function {:inline} $sgt.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $sgt.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $sgt.i256.bool(i1: i256, i2: i256) : bool
{
  i1 > i2
}

function {:inline} $sgt.i256(i1: i256, i2: i256) : i1
{
  (if $sgt.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $eq.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 == i2
}

function {:inline} $eq.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $eq.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $eq.i256.bool(i1: i256, i2: i256) : bool
{
  i1 == i2
}

function {:inline} $eq.i256(i1: i256, i2: i256) : i1
{
  (if $eq.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $ne.bv256.bool(i1: bv256, i2: bv256) : bool
{
  i1 != i2
}

function {:inline} $ne.bv256(i1: bv256, i2: bv256) : bv1
{
  (if $ne.bv256.bool(i1, i2) then 1bv1 else 0bv1)
}

function {:inline} $ne.i256.bool(i1: i256, i2: i256) : bool
{
  i1 != i2
}

function {:inline} $ne.i256(i1: i256, i2: i256) : i1
{
  (if $ne.i256.bool(i1, i2) then 1 else 0)
}

function {:inline} $min.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $slt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $max.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $sgt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umin.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ult.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $umax.bv256(i1: bv256, i2: bv256) : bv256
{
  (if $ugt.bv256.bool(i1, i2) then i1 else i2)
}

function {:inline} $smin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $smax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:inline} $umin.i256(i1: i256, i2: i256) : i256
{
  $min(i1, i2)
}

function {:inline} $umax.i256(i1: i256, i2: i256) : i256
{
  $max(i1, i2)
}

function {:bvbuiltin "bvnot"} $not.bv256(i1: bv256) : bv256;

function $not.i256(i1: i256) : i256;

function {:inline} $load.i256(M: [ref]i256, p: ref) : i256
{
  M[p]
}

function {:inline} $load.bv256(M: [ref]bv256, p: ref) : bv256
{
  M[p]
}

function {:inline} $store.i256(M: [ref]i256, p: ref, v: i256) : [ref]i256
{
  M[p := v]
}

function {:inline} $store.bv256(M: [ref]bv256, p: ref, v: bv256) : [ref]bv256
{
  M[p := v]
}

function {:inline} $trunc.bv5.bv1(i1: bv5) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i5.i1(i1: i5) : i1
{
  i1
}

function {:inline} $zext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $sext.i1.i5(i1: i1) : i5
{
  i1
}

function {:inline} $trunc.bv6.bv1(i1: bv6) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i6.i1(i1: i6) : i1
{
  i1
}

function {:inline} $zext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $sext.i1.i6(i1: i1) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv1(i1: bv8) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i8.i1(i1: i8) : i1
{
  i1
}

function {:inline} $zext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $sext.i1.i8(i1: i1) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv1(i1: bv16) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i16.i1(i1: i16) : i1
{
  i1
}

function {:inline} $zext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $sext.i1.i16(i1: i1) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv1(i1: bv24) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i24.i1(i1: i24) : i1
{
  i1
}

function {:inline} $zext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $sext.i1.i24(i1: i1) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv1(i1: bv32) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i32.i1(i1: i32) : i1
{
  i1
}

function {:inline} $zext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $sext.i1.i32(i1: i1) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv1(i1: bv40) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i40.i1(i1: i40) : i1
{
  i1
}

function {:inline} $zext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $sext.i1.i40(i1: i1) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv1(i1: bv48) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i48.i1(i1: i48) : i1
{
  i1
}

function {:inline} $zext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $sext.i1.i48(i1: i1) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv1(i1: bv56) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i56.i1(i1: i56) : i1
{
  i1
}

function {:inline} $zext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $sext.i1.i56(i1: i1) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv1(i1: bv64) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i64.i1(i1: i64) : i1
{
  i1
}

function {:inline} $zext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $sext.i1.i64(i1: i1) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv1(i1: bv80) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i80.i1(i1: i80) : i1
{
  i1
}

function {:inline} $zext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $sext.i1.i80(i1: i1) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv1(i1: bv88) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i88.i1(i1: i88) : i1
{
  i1
}

function {:inline} $zext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $sext.i1.i88(i1: i1) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv1(i1: bv96) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i96.i1(i1: i96) : i1
{
  i1
}

function {:inline} $zext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $sext.i1.i96(i1: i1) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv1(i1: bv128) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i128.i1(i1: i128) : i1
{
  i1
}

function {:inline} $zext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $sext.i1.i128(i1: i1) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv1(i1: bv160) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i160.i1(i1: i160) : i1
{
  i1
}

function {:inline} $zext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $sext.i1.i160(i1: i1) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv1(i1: bv256) : bv1
{
  i1[1:0]
}

function {:inline} $trunc.i256.i1(i1: i256) : i1
{
  i1
}

function {:inline} $zext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $sext.i1.i256(i1: i1) : i256
{
  i1
}

function {:inline} $trunc.bv6.bv5(i1: bv6) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i6.i5(i1: i6) : i5
{
  i1
}

function {:inline} $zext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $sext.i5.i6(i1: i5) : i6
{
  i1
}

function {:inline} $trunc.bv8.bv5(i1: bv8) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i8.i5(i1: i8) : i5
{
  i1
}

function {:inline} $zext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $sext.i5.i8(i1: i5) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv5(i1: bv16) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i16.i5(i1: i16) : i5
{
  i1
}

function {:inline} $zext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $sext.i5.i16(i1: i5) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv5(i1: bv24) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i24.i5(i1: i24) : i5
{
  i1
}

function {:inline} $zext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $sext.i5.i24(i1: i5) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv5(i1: bv32) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i32.i5(i1: i32) : i5
{
  i1
}

function {:inline} $zext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $sext.i5.i32(i1: i5) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv5(i1: bv40) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i40.i5(i1: i40) : i5
{
  i1
}

function {:inline} $zext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $sext.i5.i40(i1: i5) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv5(i1: bv48) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i48.i5(i1: i48) : i5
{
  i1
}

function {:inline} $zext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $sext.i5.i48(i1: i5) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv5(i1: bv56) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i56.i5(i1: i56) : i5
{
  i1
}

function {:inline} $zext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $sext.i5.i56(i1: i5) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv5(i1: bv64) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i64.i5(i1: i64) : i5
{
  i1
}

function {:inline} $zext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $sext.i5.i64(i1: i5) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv5(i1: bv80) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i80.i5(i1: i80) : i5
{
  i1
}

function {:inline} $zext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $sext.i5.i80(i1: i5) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv5(i1: bv88) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i88.i5(i1: i88) : i5
{
  i1
}

function {:inline} $zext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $sext.i5.i88(i1: i5) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv5(i1: bv96) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i96.i5(i1: i96) : i5
{
  i1
}

function {:inline} $zext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $sext.i5.i96(i1: i5) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv5(i1: bv128) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i128.i5(i1: i128) : i5
{
  i1
}

function {:inline} $zext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $sext.i5.i128(i1: i5) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv5(i1: bv160) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i160.i5(i1: i160) : i5
{
  i1
}

function {:inline} $zext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $sext.i5.i160(i1: i5) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv5(i1: bv256) : bv5
{
  i1[5:0]
}

function {:inline} $trunc.i256.i5(i1: i256) : i5
{
  i1
}

function {:inline} $zext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $sext.i5.i256(i1: i5) : i256
{
  i1
}

function {:inline} $trunc.bv8.bv6(i1: bv8) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i8.i6(i1: i8) : i6
{
  i1
}

function {:inline} $zext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $sext.i6.i8(i1: i6) : i8
{
  i1
}

function {:inline} $trunc.bv16.bv6(i1: bv16) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i16.i6(i1: i16) : i6
{
  i1
}

function {:inline} $zext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $sext.i6.i16(i1: i6) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv6(i1: bv24) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i24.i6(i1: i24) : i6
{
  i1
}

function {:inline} $zext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $sext.i6.i24(i1: i6) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv6(i1: bv32) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i32.i6(i1: i32) : i6
{
  i1
}

function {:inline} $zext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $sext.i6.i32(i1: i6) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv6(i1: bv40) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i40.i6(i1: i40) : i6
{
  i1
}

function {:inline} $zext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $sext.i6.i40(i1: i6) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv6(i1: bv48) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i48.i6(i1: i48) : i6
{
  i1
}

function {:inline} $zext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $sext.i6.i48(i1: i6) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv6(i1: bv56) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i56.i6(i1: i56) : i6
{
  i1
}

function {:inline} $zext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $sext.i6.i56(i1: i6) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv6(i1: bv64) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i64.i6(i1: i64) : i6
{
  i1
}

function {:inline} $zext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $sext.i6.i64(i1: i6) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv6(i1: bv80) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i80.i6(i1: i80) : i6
{
  i1
}

function {:inline} $zext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $sext.i6.i80(i1: i6) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv6(i1: bv88) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i88.i6(i1: i88) : i6
{
  i1
}

function {:inline} $zext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $sext.i6.i88(i1: i6) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv6(i1: bv96) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i96.i6(i1: i96) : i6
{
  i1
}

function {:inline} $zext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $sext.i6.i96(i1: i6) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv6(i1: bv128) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i128.i6(i1: i128) : i6
{
  i1
}

function {:inline} $zext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $sext.i6.i128(i1: i6) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv6(i1: bv160) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i160.i6(i1: i160) : i6
{
  i1
}

function {:inline} $zext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $sext.i6.i160(i1: i6) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv6(i1: bv256) : bv6
{
  i1[6:0]
}

function {:inline} $trunc.i256.i6(i1: i256) : i6
{
  i1
}

function {:inline} $zext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $sext.i6.i256(i1: i6) : i256
{
  i1
}

function {:inline} $trunc.bv16.bv8(i1: bv16) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i16.i8(i1: i16) : i8
{
  i1
}

function {:inline} $zext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $sext.i8.i16(i1: i8) : i16
{
  i1
}

function {:inline} $trunc.bv24.bv8(i1: bv24) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i24.i8(i1: i24) : i8
{
  i1
}

function {:inline} $zext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $sext.i8.i24(i1: i8) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv8(i1: bv32) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i32.i8(i1: i32) : i8
{
  i1
}

function {:inline} $zext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $sext.i8.i32(i1: i8) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv8(i1: bv40) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i40.i8(i1: i40) : i8
{
  i1
}

function {:inline} $zext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $sext.i8.i40(i1: i8) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv8(i1: bv48) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i48.i8(i1: i48) : i8
{
  i1
}

function {:inline} $zext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $sext.i8.i48(i1: i8) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv8(i1: bv56) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i56.i8(i1: i56) : i8
{
  i1
}

function {:inline} $zext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $sext.i8.i56(i1: i8) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv8(i1: bv64) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i64.i8(i1: i64) : i8
{
  i1
}

function {:inline} $zext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $sext.i8.i64(i1: i8) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv8(i1: bv80) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i80.i8(i1: i80) : i8
{
  i1
}

function {:inline} $zext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $sext.i8.i80(i1: i8) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv8(i1: bv88) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i88.i8(i1: i88) : i8
{
  i1
}

function {:inline} $zext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $sext.i8.i88(i1: i8) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv8(i1: bv96) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i96.i8(i1: i96) : i8
{
  i1
}

function {:inline} $zext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $sext.i8.i96(i1: i8) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv8(i1: bv128) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i128.i8(i1: i128) : i8
{
  i1
}

function {:inline} $zext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $sext.i8.i128(i1: i8) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv8(i1: bv160) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i160.i8(i1: i160) : i8
{
  i1
}

function {:inline} $zext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $sext.i8.i160(i1: i8) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv8(i1: bv256) : bv8
{
  i1[8:0]
}

function {:inline} $trunc.i256.i8(i1: i256) : i8
{
  i1
}

function {:inline} $zext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $sext.i8.i256(i1: i8) : i256
{
  i1
}

function {:inline} $trunc.bv24.bv16(i1: bv24) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i24.i16(i1: i24) : i16
{
  i1
}

function {:inline} $zext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $sext.i16.i24(i1: i16) : i24
{
  i1
}

function {:inline} $trunc.bv32.bv16(i1: bv32) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i32.i16(i1: i32) : i16
{
  i1
}

function {:inline} $zext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $sext.i16.i32(i1: i16) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv16(i1: bv40) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i40.i16(i1: i40) : i16
{
  i1
}

function {:inline} $zext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $sext.i16.i40(i1: i16) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv16(i1: bv48) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i48.i16(i1: i48) : i16
{
  i1
}

function {:inline} $zext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $sext.i16.i48(i1: i16) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv16(i1: bv56) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i56.i16(i1: i56) : i16
{
  i1
}

function {:inline} $zext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $sext.i16.i56(i1: i16) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv16(i1: bv64) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i64.i16(i1: i64) : i16
{
  i1
}

function {:inline} $zext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $sext.i16.i64(i1: i16) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv16(i1: bv80) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i80.i16(i1: i80) : i16
{
  i1
}

function {:inline} $zext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $sext.i16.i80(i1: i16) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv16(i1: bv88) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i88.i16(i1: i88) : i16
{
  i1
}

function {:inline} $zext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $sext.i16.i88(i1: i16) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv16(i1: bv96) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i96.i16(i1: i96) : i16
{
  i1
}

function {:inline} $zext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $sext.i16.i96(i1: i16) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv16(i1: bv128) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i128.i16(i1: i128) : i16
{
  i1
}

function {:inline} $zext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $sext.i16.i128(i1: i16) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv16(i1: bv160) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i160.i16(i1: i160) : i16
{
  i1
}

function {:inline} $zext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $sext.i16.i160(i1: i16) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv16(i1: bv256) : bv16
{
  i1[16:0]
}

function {:inline} $trunc.i256.i16(i1: i256) : i16
{
  i1
}

function {:inline} $zext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $sext.i16.i256(i1: i16) : i256
{
  i1
}

function {:inline} $trunc.bv32.bv24(i1: bv32) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i32.i24(i1: i32) : i24
{
  i1
}

function {:inline} $zext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $sext.i24.i32(i1: i24) : i32
{
  i1
}

function {:inline} $trunc.bv40.bv24(i1: bv40) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i40.i24(i1: i40) : i24
{
  i1
}

function {:inline} $zext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $sext.i24.i40(i1: i24) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv24(i1: bv48) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i48.i24(i1: i48) : i24
{
  i1
}

function {:inline} $zext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $sext.i24.i48(i1: i24) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv24(i1: bv56) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i56.i24(i1: i56) : i24
{
  i1
}

function {:inline} $zext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $sext.i24.i56(i1: i24) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv24(i1: bv64) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i64.i24(i1: i64) : i24
{
  i1
}

function {:inline} $zext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $sext.i24.i64(i1: i24) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv24(i1: bv80) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i80.i24(i1: i80) : i24
{
  i1
}

function {:inline} $zext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $sext.i24.i80(i1: i24) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv24(i1: bv88) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i88.i24(i1: i88) : i24
{
  i1
}

function {:inline} $zext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $sext.i24.i88(i1: i24) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv24(i1: bv96) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i96.i24(i1: i96) : i24
{
  i1
}

function {:inline} $zext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $sext.i24.i96(i1: i24) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv24(i1: bv128) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i128.i24(i1: i128) : i24
{
  i1
}

function {:inline} $zext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $sext.i24.i128(i1: i24) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv24(i1: bv160) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i160.i24(i1: i160) : i24
{
  i1
}

function {:inline} $zext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $sext.i24.i160(i1: i24) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv24(i1: bv256) : bv24
{
  i1[24:0]
}

function {:inline} $trunc.i256.i24(i1: i256) : i24
{
  i1
}

function {:inline} $zext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $sext.i24.i256(i1: i24) : i256
{
  i1
}

function {:inline} $trunc.bv40.bv32(i1: bv40) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i40.i32(i1: i40) : i32
{
  i1
}

function {:inline} $zext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $sext.i32.i40(i1: i32) : i40
{
  i1
}

function {:inline} $trunc.bv48.bv32(i1: bv48) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i48.i32(i1: i48) : i32
{
  i1
}

function {:inline} $zext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $sext.i32.i48(i1: i32) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv32(i1: bv56) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i56.i32(i1: i56) : i32
{
  i1
}

function {:inline} $zext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $sext.i32.i56(i1: i32) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv32(i1: bv64) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i64.i32(i1: i64) : i32
{
  i1
}

function {:inline} $zext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $sext.i32.i64(i1: i32) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv32(i1: bv80) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i80.i32(i1: i80) : i32
{
  i1
}

function {:inline} $zext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $sext.i32.i80(i1: i32) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv32(i1: bv88) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i88.i32(i1: i88) : i32
{
  i1
}

function {:inline} $zext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $sext.i32.i88(i1: i32) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv32(i1: bv96) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i96.i32(i1: i96) : i32
{
  i1
}

function {:inline} $zext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $sext.i32.i96(i1: i32) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv32(i1: bv128) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i128.i32(i1: i128) : i32
{
  i1
}

function {:inline} $zext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $sext.i32.i128(i1: i32) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv32(i1: bv160) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i160.i32(i1: i160) : i32
{
  i1
}

function {:inline} $zext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $sext.i32.i160(i1: i32) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv32(i1: bv256) : bv32
{
  i1[32:0]
}

function {:inline} $trunc.i256.i32(i1: i256) : i32
{
  i1
}

function {:inline} $zext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $sext.i32.i256(i1: i32) : i256
{
  i1
}

function {:inline} $trunc.bv48.bv40(i1: bv48) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i48.i40(i1: i48) : i40
{
  i1
}

function {:inline} $zext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $sext.i40.i48(i1: i40) : i48
{
  i1
}

function {:inline} $trunc.bv56.bv40(i1: bv56) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i56.i40(i1: i56) : i40
{
  i1
}

function {:inline} $zext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $sext.i40.i56(i1: i40) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv40(i1: bv64) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i64.i40(i1: i64) : i40
{
  i1
}

function {:inline} $zext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $sext.i40.i64(i1: i40) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv40(i1: bv80) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i80.i40(i1: i80) : i40
{
  i1
}

function {:inline} $zext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $sext.i40.i80(i1: i40) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv40(i1: bv88) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i88.i40(i1: i88) : i40
{
  i1
}

function {:inline} $zext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $sext.i40.i88(i1: i40) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv40(i1: bv96) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i96.i40(i1: i96) : i40
{
  i1
}

function {:inline} $zext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $sext.i40.i96(i1: i40) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv40(i1: bv128) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i128.i40(i1: i128) : i40
{
  i1
}

function {:inline} $zext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $sext.i40.i128(i1: i40) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv40(i1: bv160) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i160.i40(i1: i160) : i40
{
  i1
}

function {:inline} $zext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $sext.i40.i160(i1: i40) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv40(i1: bv256) : bv40
{
  i1[40:0]
}

function {:inline} $trunc.i256.i40(i1: i256) : i40
{
  i1
}

function {:inline} $zext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $sext.i40.i256(i1: i40) : i256
{
  i1
}

function {:inline} $trunc.bv56.bv48(i1: bv56) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i56.i48(i1: i56) : i48
{
  i1
}

function {:inline} $zext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $sext.i48.i56(i1: i48) : i56
{
  i1
}

function {:inline} $trunc.bv64.bv48(i1: bv64) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i64.i48(i1: i64) : i48
{
  i1
}

function {:inline} $zext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $sext.i48.i64(i1: i48) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv48(i1: bv80) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i80.i48(i1: i80) : i48
{
  i1
}

function {:inline} $zext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $sext.i48.i80(i1: i48) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv48(i1: bv88) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i88.i48(i1: i88) : i48
{
  i1
}

function {:inline} $zext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $sext.i48.i88(i1: i48) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv48(i1: bv96) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i96.i48(i1: i96) : i48
{
  i1
}

function {:inline} $zext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $sext.i48.i96(i1: i48) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv48(i1: bv128) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i128.i48(i1: i128) : i48
{
  i1
}

function {:inline} $zext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $sext.i48.i128(i1: i48) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv48(i1: bv160) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i160.i48(i1: i160) : i48
{
  i1
}

function {:inline} $zext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $sext.i48.i160(i1: i48) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv48(i1: bv256) : bv48
{
  i1[48:0]
}

function {:inline} $trunc.i256.i48(i1: i256) : i48
{
  i1
}

function {:inline} $zext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $sext.i48.i256(i1: i48) : i256
{
  i1
}

function {:inline} $trunc.bv64.bv56(i1: bv64) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i64.i56(i1: i64) : i56
{
  i1
}

function {:inline} $zext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $sext.i56.i64(i1: i56) : i64
{
  i1
}

function {:inline} $trunc.bv80.bv56(i1: bv80) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i80.i56(i1: i80) : i56
{
  i1
}

function {:inline} $zext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $sext.i56.i80(i1: i56) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv56(i1: bv88) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i88.i56(i1: i88) : i56
{
  i1
}

function {:inline} $zext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $sext.i56.i88(i1: i56) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv56(i1: bv96) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i96.i56(i1: i96) : i56
{
  i1
}

function {:inline} $zext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $sext.i56.i96(i1: i56) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv56(i1: bv128) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i128.i56(i1: i128) : i56
{
  i1
}

function {:inline} $zext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $sext.i56.i128(i1: i56) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv56(i1: bv160) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i160.i56(i1: i160) : i56
{
  i1
}

function {:inline} $zext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $sext.i56.i160(i1: i56) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv56(i1: bv256) : bv56
{
  i1[56:0]
}

function {:inline} $trunc.i256.i56(i1: i256) : i56
{
  i1
}

function {:inline} $zext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $sext.i56.i256(i1: i56) : i256
{
  i1
}

function {:inline} $trunc.bv80.bv64(i1: bv80) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i80.i64(i1: i80) : i64
{
  i1
}

function {:inline} $zext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $sext.i64.i80(i1: i64) : i80
{
  i1
}

function {:inline} $trunc.bv88.bv64(i1: bv88) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i88.i64(i1: i88) : i64
{
  i1
}

function {:inline} $zext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $sext.i64.i88(i1: i64) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv64(i1: bv96) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i96.i64(i1: i96) : i64
{
  i1
}

function {:inline} $zext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $sext.i64.i96(i1: i64) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv64(i1: bv128) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i128.i64(i1: i128) : i64
{
  i1
}

function {:inline} $zext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $sext.i64.i128(i1: i64) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv64(i1: bv160) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i160.i64(i1: i160) : i64
{
  i1
}

function {:inline} $zext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $sext.i64.i160(i1: i64) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv64(i1: bv256) : bv64
{
  i1[64:0]
}

function {:inline} $trunc.i256.i64(i1: i256) : i64
{
  i1
}

function {:inline} $zext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $sext.i64.i256(i1: i64) : i256
{
  i1
}

function {:inline} $trunc.bv88.bv80(i1: bv88) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i88.i80(i1: i88) : i80
{
  i1
}

function {:inline} $zext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $sext.i80.i88(i1: i80) : i88
{
  i1
}

function {:inline} $trunc.bv96.bv80(i1: bv96) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i96.i80(i1: i96) : i80
{
  i1
}

function {:inline} $zext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $sext.i80.i96(i1: i80) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv80(i1: bv128) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i128.i80(i1: i128) : i80
{
  i1
}

function {:inline} $zext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $sext.i80.i128(i1: i80) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv80(i1: bv160) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i160.i80(i1: i160) : i80
{
  i1
}

function {:inline} $zext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $sext.i80.i160(i1: i80) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv80(i1: bv256) : bv80
{
  i1[80:0]
}

function {:inline} $trunc.i256.i80(i1: i256) : i80
{
  i1
}

function {:inline} $zext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $sext.i80.i256(i1: i80) : i256
{
  i1
}

function {:inline} $trunc.bv96.bv88(i1: bv96) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i96.i88(i1: i96) : i88
{
  i1
}

function {:inline} $zext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $sext.i88.i96(i1: i88) : i96
{
  i1
}

function {:inline} $trunc.bv128.bv88(i1: bv128) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i128.i88(i1: i128) : i88
{
  i1
}

function {:inline} $zext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $sext.i88.i128(i1: i88) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv88(i1: bv160) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i160.i88(i1: i160) : i88
{
  i1
}

function {:inline} $zext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $sext.i88.i160(i1: i88) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv88(i1: bv256) : bv88
{
  i1[88:0]
}

function {:inline} $trunc.i256.i88(i1: i256) : i88
{
  i1
}

function {:inline} $zext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $sext.i88.i256(i1: i88) : i256
{
  i1
}

function {:inline} $trunc.bv128.bv96(i1: bv128) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i128.i96(i1: i128) : i96
{
  i1
}

function {:inline} $zext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $sext.i96.i128(i1: i96) : i128
{
  i1
}

function {:inline} $trunc.bv160.bv96(i1: bv160) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i160.i96(i1: i160) : i96
{
  i1
}

function {:inline} $zext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $sext.i96.i160(i1: i96) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv96(i1: bv256) : bv96
{
  i1[96:0]
}

function {:inline} $trunc.i256.i96(i1: i256) : i96
{
  i1
}

function {:inline} $zext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $sext.i96.i256(i1: i96) : i256
{
  i1
}

function {:inline} $trunc.bv160.bv128(i1: bv160) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i160.i128(i1: i160) : i128
{
  i1
}

function {:inline} $zext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $sext.i128.i160(i1: i128) : i160
{
  i1
}

function {:inline} $trunc.bv256.bv128(i1: bv256) : bv128
{
  i1[128:0]
}

function {:inline} $trunc.i256.i128(i1: i256) : i128
{
  i1
}

function {:inline} $zext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $sext.i128.i256(i1: i128) : i256
{
  i1
}

function {:inline} $trunc.bv256.bv160(i1: bv256) : bv160
{
  i1[160:0]
}

function {:inline} $trunc.i256.i160(i1: i256) : i160
{
  i1
}

function {:inline} $zext.i160.i256(i1: i160) : i256
{
  i1
}

function {:inline} $sext.i160.i256(i1: i160) : i256
{
  i1
}

procedure corral_assert_not_reachable();



procedure {:entrypoint} main_SeqInstr() returns ($r: i32);
  free requires assertsPassed;
  modifies assertsPassed, $M.85, $M.91, $M.27, $M.29, $M.31, $M.33, $M.92, $M.93, $M.94, $M.95, $M.96, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.97, $M.98, $M.86, $M.87, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.28, $M.30, $M.32, $M.34, $M.90, $M.22, $M.77, $M.76, $M.13, $M.64, $CurrAddr, $M.63, $M.50, $M.24, $M.25, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.60, $M.48, $M.46, $M.57, $M.39, $M.8, $M.47, $M.58, $M.59;



implementation {:entrypoint} main_SeqInstr() returns ($r: i32)
{

  start:
    assertsPassed := true;
    call $r := main();
    assume {:OldAssert} !assertsPassed;
    return;
}



implementation oxu_urb_enqueue_loop_$bb43(in_$p0: ref, in_$i2: i32, in_$p56: ref, in_$i72: i32, in_$i73: i1, in_$i74: i1, in_$i75: i32) returns (out_$i72: i32, out_$i73: i1, out_$i74: i1, out_$i75: i32)
{

  entry:
    out_$i72, out_$i73, out_$i74, out_$i75 := in_$i72, in_$i73, in_$i74, in_$i75;
    goto $bb43, exit;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 240} out_$i72 := __oxu_urb_enqueue(in_$p0, in_$p56, in_$i2);
    goto SeqInstr_101;

  $bb47:
    assume {:verifier.code 0} true;
    assume out_$i74 == 1;
    goto $bb47_dummy;

  corral_source_split_948:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i72;
    assume true;
    goto $bb47;

  $bb46:
    assume {:verifier.code 0} true;
    out_$i74 := $ne.i32(out_$i72, 0);
    goto corral_source_split_948;

  $bb45:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_946:
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_945:
    assume {:verifier.code 0} true;
    call {:si_unique_call 242} schedule();
    goto corral_source_split_946;

  $bb44:
    assume out_$i73 == 1;
    goto corral_source_split_945;

  corral_source_split_943:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_942:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_943;

  SeqInstr_102:
    call {:si_unique_call 241} {:cexpr "ret"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_942;

  SeqInstr_101:
    assume assertsPassed;
    goto SeqInstr_102;

  $bb47_dummy:
    call {:si_unique_call 1} out_$i72, out_$i73, out_$i74, out_$i75 := oxu_urb_enqueue_loop_$bb43(in_$p0, in_$i2, in_$p56, out_$i72, out_$i73, out_$i74, out_$i75);
    return;

  exit:
    return;
}



procedure oxu_urb_enqueue_loop_$bb43(in_$p0: ref, in_$i2: i32, in_$p56: ref, in_$i72: i32, in_$i73: i1, in_$i74: i1, in_$i75: i32) returns (out_$i72: i32, out_$i73: i1, out_$i74: i1, out_$i75: i32);
  modifies $M.0, $M.22, $M.60, $M.50, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.58, $M.59, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.48, $M.46, $M.47, assertsPassed;



implementation oxu_urb_enqueue_loop_$bb33(in_$p3: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$i54: i64, in_$i55: i1, in_$p56: ref) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$i54: i64, out_$i55: i1, out_$p56: ref)
{

  entry:
    out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56 := in_$p50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i55, in_$p56;
    goto $bb33, exit;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 237} out_$p50 := oxu_murb_alloc(in_$p3);
    goto corral_source_split_904;

  $bb37:
    assume {:verifier.code 0} true;
    assume out_$i55 == 1;
    goto $bb37_dummy;

  corral_source_split_913:
    assume {:verifier.code 0} true;
    out_$p56 := out_$p50;
    assume true;
    goto $bb37;

  corral_source_split_912:
    assume {:verifier.code 0} true;
    out_$i55 := $eq.i64(out_$i54, 0);
    goto corral_source_split_913;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i54 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_912;

  $bb35:
    assume !(out_$i53 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_910:
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_909:
    assume {:verifier.code 0} true;
    call {:si_unique_call 238} schedule();
    goto corral_source_split_910;

  $bb34:
    assume out_$i53 == 1;
    goto corral_source_split_909;

  corral_source_split_907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_906:
    assume {:verifier.code 0} true;
    out_$i53 := $eq.i64(out_$i52, 0);
    goto corral_source_split_907;

  corral_source_split_905:
    assume {:verifier.code 0} true;
    out_$i52 := $p2i.ref.i64(out_$p51);
    goto corral_source_split_906;

  corral_source_split_904:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_905;

  $bb37_dummy:
    call {:si_unique_call 1} out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56 := oxu_urb_enqueue_loop_$bb33(in_$p3, out_$p50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i55, out_$p56);
    return;

  exit:
    return;
}



procedure oxu_urb_enqueue_loop_$bb33(in_$p3: ref, in_$p50: ref, in_$p51: ref, in_$i52: i64, in_$i53: i1, in_$i54: i64, in_$i55: i1, in_$p56: ref) returns (out_$p50: ref, out_$p51: ref, out_$i52: i64, out_$i53: i1, out_$i54: i64, out_$i55: i1, out_$p56: ref);
  modifies $M.22, $M.0;



implementation oxu_urb_enqueue_loop_$bb23(in_$p0: ref, in_$i2: i32, in_$p32: ref, in_$i45: i32, in_$i46: i1, in_$i47: i1) returns (out_$i45: i32, out_$i46: i1, out_$i47: i1)
{

  entry:
    out_$i45, out_$i46, out_$i47 := in_$i45, in_$i46, in_$i47;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} out_$i45 := __oxu_urb_enqueue(in_$p0, in_$p32, in_$i2);
    goto SeqInstr_98;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i47 == 1;
    goto $bb27_dummy;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i45, 0);
    goto corral_source_split_897;

  $bb25:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} schedule();
    goto corral_source_split_895;

  $bb24:
    assume out_$i46 == 1;
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_892;

  SeqInstr_99:
    call {:si_unique_call 234} {:cexpr "ret"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_891;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  $bb27_dummy:
    call {:si_unique_call 1} out_$i45, out_$i46, out_$i47 := oxu_urb_enqueue_loop_$bb23(in_$p0, in_$i2, in_$p32, out_$i45, out_$i46, out_$i47);
    return;

  exit:
    return;
}



procedure oxu_urb_enqueue_loop_$bb23(in_$p0: ref, in_$i2: i32, in_$p32: ref, in_$i45: i32, in_$i46: i1, in_$i47: i1) returns (out_$i45: i32, out_$i46: i1, out_$i47: i1);
  modifies $M.0, $M.22, $M.60, $M.50, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.58, $M.59, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.48, $M.46, $M.47, assertsPassed;



implementation oxu_urb_enqueue_loop_$bb16(in_$p3: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$i31: i1, in_$p32: ref) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$i31: i1, out_$p32: ref)
{

  entry:
    out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32 := in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} out_$p26 := oxu_murb_alloc(in_$p3);
    goto corral_source_split_861;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb20_dummy;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p26;
    assume true;
    goto $bb20;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i30, 0);
    goto corral_source_split_870;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_869;

  $bb18:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} schedule();
    goto corral_source_split_867;

  $bb17:
    assume out_$i29 == 1;
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_862;

  $bb20_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32 := oxu_urb_enqueue_loop_$bb16(in_$p3, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32);
    return;

  exit:
    return;
}



procedure oxu_urb_enqueue_loop_$bb16(in_$p3: ref, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$i31: i1, in_$p32: ref) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$i31: i1, out_$p32: ref);
  modifies $M.22, $M.0;



implementation oxu_urb_enqueue_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p11: ref, in_$i23: i32, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i25: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i25: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8)
{

  entry:
    out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i25, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := in_$p26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p32, in_$p33, in_$p34, in_$p35, in_$i36, in_$i37, in_$p38, in_$p39, in_$p40, in_$p41, in_$p42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i25, in_cmdloc_dummy_var_0, in_cmdloc_dummy_var_1, in_cmdloc_dummy_var_2;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_859;

  $bb30:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i25 := out_$i48;
    goto $bb30_dummy;

  corral_source_split_900:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30;

  corral_source_split_899:
    assume {:verifier.code 0} true;
    out_$i49 := $sgt.i32(in_$i23, out_$i48);
    goto corral_source_split_900;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i25, 1);
    call {:si_unique_call 236} {:cexpr "i"} boogie_si_record_i32(out_$i48);
    goto corral_source_split_899;

  $bb28:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_897:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i47 := $ne.i32(out_$i45, 0);
    goto corral_source_split_897;

  $bb25:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_895:
    assume {:verifier.code 0} true;
    goto $bb26;

  corral_source_split_894:
    assume {:verifier.code 0} true;
    call {:si_unique_call 235} schedule();
    goto corral_source_split_895;

  $bb24:
    assume out_$i46 == 1;
    goto corral_source_split_894;

  corral_source_split_892:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_891:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i32(out_$i45, 0);
    goto corral_source_split_892;

  SeqInstr_99:
    call {:si_unique_call 234} {:cexpr "ret"} boogie_si_record_i32(out_$i45);
    goto corral_source_split_891;

  SeqInstr_98:
    assume assertsPassed;
    goto SeqInstr_99;

  $bb23:
    call out_$i45, out_$i46, out_$i47 := oxu_urb_enqueue_loop_$bb23(in_$p0, in_$i2, out_$p32, out_$i45, out_$i46, out_$i47);
    goto $bb23_last;

  $bb23_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 233} out_$i45 := __oxu_urb_enqueue(in_$p0, out_$p32, in_$i2);
    goto SeqInstr_98;

  corral_source_split_889:
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb27:
    assume {:verifier.code 0} true;
    assume out_$i47 == 1;
    assume false;
    return;

  corral_source_split_888:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p44, 0);
    goto corral_source_split_889;

  corral_source_split_887:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_888;

  corral_source_split_886:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_887;

  corral_source_split_885:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p42, in_$p1);
    goto corral_source_split_886;

  corral_source_split_884:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p41, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_885;

  corral_source_split_883:
    assume {:verifier.code 0} true;
    out_$p41 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_884;

  corral_source_split_882:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, $0.ref);
    goto corral_source_split_883;

  corral_source_split_881:
    assume {:verifier.code 0} true;
    out_$p40 := $add.ref($add.ref(out_$p32, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_882;

  corral_source_split_880:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p39, out_$p38);
    goto corral_source_split_881;

  corral_source_split_879:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p32, $mul.ref(0, 192)), $mul.ref(104, 1));
    goto corral_source_split_880;

  corral_source_split_878:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref(in_$p11, $mul.ref(out_$i37, 1));
    goto corral_source_split_879;

  corral_source_split_877:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i36);
    goto corral_source_split_878;

  corral_source_split_876:
    assume {:verifier.code 0} true;
    out_$i36 := $mul.i32(out_$i25, 4096);
    goto corral_source_split_877;

  corral_source_split_875:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p35, 4096);
    goto corral_source_split_876;

  corral_source_split_874:
    assume {:verifier.code 0} true;
    out_$p35 := $add.ref($add.ref(out_$p32, $mul.ref(0, 192)), $mul.ref(136, 1));
    goto corral_source_split_875;

  corral_source_split_873:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_0 := $M.0;
    out_cmdloc_dummy_var_1 := $M.0;
    call {:si_unique_call 232} out_cmdloc_dummy_var_2 := $memcpy.i8(out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_$p33, out_$p34, 192, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_2;
    goto corral_source_split_874;

  corral_source_split_872:
    assume {:verifier.code 0} true;
    out_$p34 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_873;

  $bb22:
    assume {:verifier.code 0} true;
    out_$p33 := $bitcast.ref.ref(out_$p32);
    goto corral_source_split_872;

  $bb21:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb22;

  corral_source_split_870:
    assume {:verifier.code 0} true;
    out_$p32 := out_$p26;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_869:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i64(out_$i30, 0);
    goto corral_source_split_870;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i30 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_869;

  $bb18:
    assume !(out_$i29 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_867:
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_866:
    assume {:verifier.code 0} true;
    call {:si_unique_call 231} schedule();
    goto corral_source_split_867;

  $bb17:
    assume out_$i29 == 1;
    goto corral_source_split_866;

  corral_source_split_864:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_863:
    assume {:verifier.code 0} true;
    out_$i29 := $eq.i64(out_$i28, 0);
    goto corral_source_split_864;

  corral_source_split_862:
    assume {:verifier.code 0} true;
    out_$i28 := $p2i.ref.i64(out_$p27);
    goto corral_source_split_863;

  corral_source_split_861:
    assume {:verifier.code 0} true;
    out_$p27 := $bitcast.ref.ref(out_$p26);
    goto corral_source_split_862;

  $bb16:
    call out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32 := oxu_urb_enqueue_loop_$bb16(in_$p3, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32);
    goto $bb16_last;

  $bb16_last:
    assume {:verifier.code 0} true;
    call {:si_unique_call 230} out_$p26 := oxu_murb_alloc(in_$p3);
    goto corral_source_split_861;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb20:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    assume false;
    return;

  corral_source_split_859:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i25, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2 := oxu_urb_enqueue_loop_$bb14(in_$p0, in_$p1, in_$i2, in_$p3, in_$p11, in_$i23, out_$p26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p32, out_$p33, out_$p34, out_$p35, out_$i36, out_$i37, out_$p38, out_$p39, out_$p40, out_$p41, out_$p42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i25, out_cmdloc_dummy_var_0, out_cmdloc_dummy_var_1, out_cmdloc_dummy_var_2);
    return;

  exit:
    return;
}



procedure oxu_urb_enqueue_loop_$bb14(in_$p0: ref, in_$p1: ref, in_$i2: i32, in_$p3: ref, in_$p11: ref, in_$i23: i32, in_$p26: ref, in_$p27: ref, in_$i28: i64, in_$i29: i1, in_$i30: i64, in_$i31: i1, in_$p32: ref, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i32, in_$i37: i64, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$p41: ref, in_$p42: ref, in_$p43: ref, in_$p44: ref, in_$i45: i32, in_$i46: i1, in_$i47: i1, in_$i48: i32, in_$i49: i1, in_$i25: i32, in_cmdloc_dummy_var_0: [ref]i8, in_cmdloc_dummy_var_1: [ref]i8, in_cmdloc_dummy_var_2: [ref]i8) returns (out_$p26: ref, out_$p27: ref, out_$i28: i64, out_$i29: i1, out_$i30: i64, out_$i31: i1, out_$p32: ref, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i32, out_$i37: i64, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$p41: ref, out_$p42: ref, out_$p43: ref, out_$p44: ref, out_$i45: i32, out_$i46: i1, out_$i47: i1, out_$i48: i32, out_$i49: i1, out_$i25: i32, out_cmdloc_dummy_var_0: [ref]i8, out_cmdloc_dummy_var_1: [ref]i8, out_cmdloc_dummy_var_2: [ref]i8);
  modifies $M.0, $M.22, $M.60, $M.50, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $CurrAddr, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.58, $M.59, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.48, $M.46, $M.47, assertsPassed;



implementation oxu_endpoint_disable_loop_$bb29(in_$p8: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p36: ref, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p42: ref) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p36: ref, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p42: ref)
{

  entry:
    out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p36, out_$i43, out_$i44, out_$i45, out_$p46, out_$p42 := in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p36, in_$i43, in_$i44, in_$i45, in_$p46, in_$p42;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_1102;

  $bb32:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p36 := out_$p39;
    goto $bb32_dummy;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p39;
    assume true;
    goto $bb32;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_1108;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_1107;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb34:
    assume out_$i45 == 1;
    goto corral_source_split_1115;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p36;
    assume true;
    goto $bb34;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i43, out_$i44);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(in_$p8);
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_1103;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p36, out_$i43, out_$i44, out_$i45, out_$p46, out_$p42 := oxu_endpoint_disable_loop_$bb29(in_$p8, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p36, out_$i43, out_$i44, out_$i45, out_$p46, out_$p42);
    return;

  exit:
    return;
}



procedure oxu_endpoint_disable_loop_$bb29(in_$p8: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p36: ref, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p42: ref) returns (out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p36: ref, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p42: ref);



implementation oxu_endpoint_disable_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i26: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p36: ref, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p42: ref, in_$p35: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p27: ref, in_vslice_dummy_var_76: i64) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i26: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p36: ref, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p42: ref, out_$p35: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p27: ref, out_vslice_dummy_var_76: i64)
{

  entry:
    out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p36, out_$i43, out_$i44, out_$i45, out_$p46, out_$p42, out_$p35, out_$i47, out_$i48, out_$p49, out_$p51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p27, out_vslice_dummy_var_76 := in_$p8, in_$p9, in_$i10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i15, in_$p16, in_$p17, in_$i18, in_$i19, in_$i20, in_$i21, in_$p22, in_$i23, in_$i26, in_$p28, in_$p29, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p36, in_$i43, in_$i44, in_$i45, in_$p46, in_$p42, in_$p35, in_$i47, in_$i48, in_$p49, in_$p51, in_$p53, in_$p54, in_$i55, in_$i56, in_$p27, in_vslice_dummy_var_76;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb7;

  $bb41:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$p8 := out_$p53;
    goto $bb41_dummy;

  corral_source_split_1072:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41;

  corral_source_split_1071:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i64(out_$i55, 0);
    goto corral_source_split_1072;

  corral_source_split_1070:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_1071;

  corral_source_split_1069:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p53);
    goto corral_source_split_1070;

  corral_source_split_1068:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, in_$p3);
    goto corral_source_split_1069;

  corral_source_split_1067:
    assume {:verifier.code 0} true;
    call {:si_unique_call 266} ldv_spin_lock();
    goto corral_source_split_1068;

  corral_source_split_1066:
    assume {:verifier.code 0} true;
    call {:si_unique_call 265} out_vslice_dummy_var_76 := schedule_timeout_uninterruptible(1);
    goto corral_source_split_1067;

  corral_source_split_1065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 264} spin_unlock_irqrestore(out_$p51, $u0);
    goto corral_source_split_1066;

  $bb10:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(304, 1));
    goto corral_source_split_1065;

  $bb19:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_1063:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb8:
    assume out_$i11 == 1;
    goto corral_source_split_1063;

  corral_source_split_1061:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_1060:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, 0);
    goto corral_source_split_1061;

  corral_source_split_1059:
    assume {:verifier.code 0} true;
    out_$i10 := $load.i32($M.0, out_$p9);
    goto corral_source_split_1060;

  $bb7:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 160)), $mul.ref(4, 1));
    goto corral_source_split_1059;

  $bb18:
    assume {:verifier.code 0} true;
    assume out_$i21 == 1;
    goto $bb19;

  corral_source_split_1140:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_117:
    goto corral_source_split_1140;

  SeqInstr_116:
    assume assertsPassed;
    goto SeqInstr_117;

  $bb40:
    assume {:verifier.code 0} true;
    call {:si_unique_call 273} unlink_async(in_$p2, out_$p8);
    goto SeqInstr_116;

  $bb38:
    assume !(out_$i48 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_1120:
    assume {:verifier.code 0} true;
    out_$p49 := out_$p8;
    assume true;
    goto $bb38;

  corral_source_split_1119:
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i64(out_$i47, 0);
    goto corral_source_split_1120;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_1119;

  $bb28:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb36;

  $bb27:
    assume {:verifier.code 0} true;
    assume !(out_$i34 == 1);
    goto $bb28;

  corral_source_split_1117:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p46;
    goto $bb28;

  corral_source_split_1113:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p42;
    goto $bb28;

  $bb33:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1113;

  corral_source_split_1111:
    assume {:verifier.code 0} true;
    out_$p42 := out_$p39;
    assume true;
    goto $bb32, $bb33;

  corral_source_split_1110:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_1111;

  corral_source_split_1109:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_1110;

  corral_source_split_1108:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_1109;

  corral_source_split_1107:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p37);
    goto corral_source_split_1108;

  $bb31:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(out_$p36, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_1107;

  $bb30:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1115:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb34:
    assume out_$i45 == 1;
    goto corral_source_split_1115;

  corral_source_split_1105:
    assume {:verifier.code 0} true;
    out_$p46 := out_$p36;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_1104:
    assume {:verifier.code 0} true;
    out_$i45 := $ne.i64(out_$i43, out_$i44);
    goto corral_source_split_1105;

  corral_source_split_1103:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p8);
    goto corral_source_split_1104;

  corral_source_split_1102:
    assume {:verifier.code 0} true;
    out_$i43 := $p2i.ref.i64(out_$p36);
    goto corral_source_split_1103;

  $bb29:
    call out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p36, out_$i43, out_$i44, out_$i45, out_$p46, out_$p42 := oxu_endpoint_disable_loop_$bb29(out_$p8, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p36, out_$i43, out_$i44, out_$i45, out_$p46, out_$p42);
    goto $bb29_last;

  $bb29_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_1102;

  corral_source_split_1100:
    assume {:verifier.code 0} true;
    out_$p36 := out_$p32;
    goto $bb29;

  $bb32:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    out_$p36 := out_$p39;
    assume false;
    return;

  $bb26:
    assume out_$i34 == 1;
    goto corral_source_split_1100;

  corral_source_split_1098:
    assume {:verifier.code 0} true;
    out_$p35 := out_$p32;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1097:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i64(out_$i33, 0);
    goto corral_source_split_1098;

  corral_source_split_1096:
    assume {:verifier.code 0} true;
    out_$i33 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_1097;

  corral_source_split_1095:
    assume {:verifier.code 0} true;
    out_$p32 := $load.ref($M.0, out_$p31);
    goto corral_source_split_1096;

  corral_source_split_1094:
    assume {:verifier.code 0} true;
    out_$p31 := $bitcast.ref.ref(out_$p30);
    goto corral_source_split_1095;

  corral_source_split_1093:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(out_$p29, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_1094;

  corral_source_split_1092:
    assume {:verifier.code 0} true;
    out_$p29 := $load.ref($M.0, out_$p28);
    goto corral_source_split_1093;

  corral_source_split_1091:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_1092;

  $bb24:
    assume out_$i26 == 1;
    goto corral_source_split_1091;

  $bb16:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i26 := $eq.i32(out_$i19, 1);
    assume {:verifier.code 0} true;
    out_$p27 := out_$p8;
    assume true;
    goto $bb24;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i20 := $slt.i32(out_$i19, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1084:
    assume {:verifier.code 0} true;
    out_$i19 := $zext.i8.i32(out_$i18);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1083:
    assume {:verifier.code 0} true;
    out_$i18 := $load.i8($M.0, out_$p17);
    goto corral_source_split_1084;

  $bb14:
    assume {:verifier.code 0} true;
    out_$p17 := $add.ref($add.ref(out_$p8, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_1083;

  $bb13:
    assume !(out_$i15 == 1);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1081:
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_1080:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p16, 3);
    goto corral_source_split_1081;

  corral_source_split_1079:
    assume {:verifier.code 0} true;
    out_$p16 := $add.ref($add.ref(out_$p8, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_1080;

  $bb12:
    assume out_$i15 == 1;
    goto corral_source_split_1079;

  corral_source_split_1077:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_1076:
    assume {:verifier.code 0} true;
    out_$i15 := $eq.i32(out_$i14, 0);
    goto corral_source_split_1077;

  corral_source_split_1075:
    assume {:verifier.code 0} true;
    out_$i14 := $and.i32(out_$i13, 1);
    goto corral_source_split_1076;

  corral_source_split_1074:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, out_$p12);
    goto corral_source_split_1075;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref($add.ref(in_$p0, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_1074;

  $bb9:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb35:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_1117;

  $bb17:
    assume !(out_$i20 == 1);
    assume {:verifier.code 0} true;
    out_$i21 := $slt.i32(out_$i19, 3);
    assume {:verifier.code 0} true;
    out_$p22, out_$i23 := out_$p8, out_$i19;
    assume true;
    goto $bb18;

  $bb41_dummy:
    call {:si_unique_call 1} out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p36, out_$i43, out_$i44, out_$i45, out_$p46, out_$p42, out_$p35, out_$i47, out_$i48, out_$p49, out_$p51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p27, out_vslice_dummy_var_76 := oxu_endpoint_disable_loop_$bb4(in_$p0, in_$p2, in_$p3, out_$p8, out_$p9, out_$i10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i15, out_$p16, out_$p17, out_$i18, out_$i19, out_$i20, out_$i21, out_$p22, out_$i23, out_$i26, out_$p28, out_$p29, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p36, out_$i43, out_$i44, out_$i45, out_$p46, out_$p42, out_$p35, out_$i47, out_$i48, out_$p49, out_$p51, out_$p53, out_$p54, out_$i55, out_$i56, out_$p27, out_vslice_dummy_var_76);
    return;

  exit:
    return;
}



procedure oxu_endpoint_disable_loop_$bb4(in_$p0: ref, in_$p2: ref, in_$p3: ref, in_$p8: ref, in_$p9: ref, in_$i10: i32, in_$i11: i1, in_$p12: ref, in_$i13: i32, in_$i14: i32, in_$i15: i1, in_$p16: ref, in_$p17: ref, in_$i18: i8, in_$i19: i32, in_$i20: i1, in_$i21: i1, in_$p22: ref, in_$i23: i32, in_$i26: i1, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i64, in_$i34: i1, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p36: ref, in_$i43: i64, in_$i44: i64, in_$i45: i1, in_$p46: ref, in_$p42: ref, in_$p35: ref, in_$i47: i64, in_$i48: i1, in_$p49: ref, in_$p51: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p27: ref, in_vslice_dummy_var_76: i64) returns (out_$p8: ref, out_$p9: ref, out_$i10: i32, out_$i11: i1, out_$p12: ref, out_$i13: i32, out_$i14: i32, out_$i15: i1, out_$p16: ref, out_$p17: ref, out_$i18: i8, out_$i19: i32, out_$i20: i1, out_$i21: i1, out_$p22: ref, out_$i23: i32, out_$i26: i1, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i64, out_$i34: i1, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p36: ref, out_$i43: i64, out_$i44: i64, out_$i45: i1, out_$p46: ref, out_$p42: ref, out_$p35: ref, out_$i47: i64, out_$i48: i1, out_$p49: ref, out_$p51: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p27: ref, out_vslice_dummy_var_76: i64);
  modifies $M.22, $M.0, $M.60, $M.48, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.50, $M.46, $M.57, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $CurrAddr, $M.47, $M.58, $M.59, $M.8, $M.39, assertsPassed;



implementation oxu_hub_status_data_loop_$bb14(in_$p1: ref, in_$p2: ref, in_$i10: i32, in_$i17: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i64, in_$i39: i64, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i45: i1, in_$i46: i8, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i8, in_$i51: i32, in_$i52: i32, in_$i53: i8, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i8, in_$i60: i32, in_$i61: i32, in_$i62: i8, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i20: i32, in_$i21: i32, in_$i68: i32) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i64, out_$i39: i64, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i45: i1, out_$i46: i8, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i8, out_$i51: i32, out_$i52: i32, out_$i53: i8, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i8, out_$i60: i32, out_$i61: i32, out_$i62: i8, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i20: i32, out_$i21: i32, out_$i68: i32)
{

  entry:
    out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i20, out_$i21, out_$i68 := in_$p22, in_$p23, in_$p24, in_$p25, in_$i26, in_$p27, in_$i28, in_$i29, in_$i30, in_$i31, in_$p33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$p41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$p54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$p63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i20, in_$i21, in_$i68;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1184;

  $bb31:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    out_$i20, out_$i21 := out_$i66, out_$i65;
    goto $bb31_dummy;

  corral_source_split_1243:
    assume {:verifier.code 0} true;
    out_$i68 := out_$i65;
    assume true;
    goto $bb31;

  corral_source_split_1242:
    assume {:verifier.code 0} true;
    out_$i67 := $slt.i32(out_$i66, in_$i10);
    goto corral_source_split_1243;

  corral_source_split_1241:
    assume {:verifier.code 0} true;
    out_$i66 := $add.i32(out_$i64, 1);
    call {:si_unique_call 281} {:cexpr "i"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_1242;

  $bb30:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_1241;

  $bb24:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i20, out_$i21;
    goto $bb30;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i64, out_$i65 := out_$i20, 4;
    goto $bb30;

  corral_source_split_1239:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, out_$p63, out_$i62);
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1227:
    assume {:verifier.code 0} true;
    goto $bb29;

  corral_source_split_1226:
    assume {:verifier.code 0} true;
    $M.0 := $store.i8($M.0, in_$p1, out_$i53);
    goto corral_source_split_1227;

  corral_source_split_1225:
    assume {:verifier.code 0} true;
    out_$i53 := $trunc.i32.i8(out_$i52);
    goto corral_source_split_1226;

  corral_source_split_1224:
    assume {:verifier.code 0} true;
    out_$i52 := $or.i32(out_$i47, out_$i51);
    goto corral_source_split_1225;

  corral_source_split_1223:
    assume {:verifier.code 0} true;
    out_$i51 := $sext.i8.i32(out_$i50);
    goto corral_source_split_1224;

  corral_source_split_1222:
    assume {:verifier.code 0} true;
    out_$i50 := $trunc.i32.i8(out_$i49);
    goto corral_source_split_1223;

  corral_source_split_1221:
    assume {:verifier.code 0} true;
    out_$i49 := $shl.i32(1, out_$i48);
    goto corral_source_split_1222;

  corral_source_split_1220:
    assume {:verifier.code 0} true;
    out_$i48 := $add.i32(out_$i20, 1);
    goto corral_source_split_1221;

  corral_source_split_1219:
    assume {:verifier.code 0} true;
    out_$i47 := $sext.i8.i32(out_$i46);
    goto corral_source_split_1220;

  corral_source_split_1218:
    assume {:verifier.code 0} true;
    out_$i46 := $load.i8($M.0, in_$p1);
    goto corral_source_split_1219;

  $bb27:
    assume out_$i45 == 1;
    goto corral_source_split_1218;

  corral_source_split_1204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i45 := $sle.i32(out_$i20, 6);
    goto corral_source_split_1204;

  $bb25:
    assume {:verifier.code 0} true;
    assume out_$i44 == 1;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    assume out_$i35 == 1;
    goto $bb20;

  corral_source_split_1202:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb21;

  corral_source_split_1201:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i34, 0);
    goto corral_source_split_1202;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i34 := $and.i32(out_$i28, in_$i17);
    goto corral_source_split_1201;

  $bb17:
    assume !(out_$i30 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1199:
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_1198:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p33, 0);
    goto corral_source_split_1199;

  corral_source_split_1197:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref(out_$i31, 8));
    goto corral_source_split_1198;

  corral_source_split_1196:
    assume {:verifier.code 0} true;
    out_$i31 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1197;

  $bb16:
    assume out_$i30 == 1;
    goto corral_source_split_1196;

  corral_source_split_1194:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_1193:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_1194;

  corral_source_split_1192:
    assume {:verifier.code 0} true;
    out_$i29 := $and.i32(out_$i28, 1);
    goto corral_source_split_1193;

  SeqInstr_123:
    call {:si_unique_call 280} {:cexpr "temp"} boogie_si_record_i32(out_$i28);
    goto corral_source_split_1192;

  SeqInstr_122:
    assume assertsPassed;
    goto SeqInstr_123;

  corral_source_split_1191:
    assume {:verifier.code 0} true;
    call {:si_unique_call 279} out_$i28 := readl(out_$p27);
    goto SeqInstr_122;

  corral_source_split_1190:
    assume {:verifier.code 0} true;
    out_$p27 := $add.ref(out_$p25, $mul.ref(out_$i26, 1));
    goto corral_source_split_1191;

  corral_source_split_1189:
    assume {:verifier.code 0} true;
    out_$i26 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1190;

  corral_source_split_1188:
    assume {:verifier.code 0} true;
    out_$p25 := $bitcast.ref.ref(out_$p24);
    goto corral_source_split_1189;

  corral_source_split_1187:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_1188;

  corral_source_split_1186:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_1187;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p22 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1186;

  corral_source_split_1184:
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_1216:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_1215:
    assume {:verifier.code 0} true;
    out_$i44 := $sge.i64(out_$i43, 0);
    goto corral_source_split_1216;

  corral_source_split_1214:
    assume {:verifier.code 0} true;
    out_$i43 := $sub.i64(out_$i38, out_$i42);
    goto corral_source_split_1215;

  corral_source_split_1213:
    assume {:verifier.code 0} true;
    out_$i42 := $load.i64($M.0, out_$p41);
    goto corral_source_split_1214;

  corral_source_split_1212:
    assume {:verifier.code 0} true;
    out_$p41 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref(out_$i39, 8));
    goto corral_source_split_1213;

  corral_source_split_1211:
    assume {:verifier.code 0} true;
    out_$i39 := $sext.i32.i64(out_$i20);
    goto corral_source_split_1212;

  corral_source_split_1210:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i64($M.0, jiffies);
    goto corral_source_split_1211;

  $bb22:
    assume out_$i37 == 1;
    goto corral_source_split_1210;

  corral_source_split_1208:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_1207:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i36, 0);
    goto corral_source_split_1208;

  corral_source_split_1206:
    assume {:verifier.code 0} true;
    out_$i36 := $and.i32(out_$i28, 64);
    goto corral_source_split_1207;

  $bb21:
    assume !(out_$i35 == 1);
    goto corral_source_split_1206;

  corral_source_split_1238:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref(in_$p1, $mul.ref(1, 1));
    goto corral_source_split_1239;

  corral_source_split_1237:
    assume {:verifier.code 0} true;
    out_$i62 := $trunc.i32.i8(out_$i61);
    goto corral_source_split_1238;

  corral_source_split_1236:
    assume {:verifier.code 0} true;
    out_$i61 := $or.i32(out_$i56, out_$i60);
    goto corral_source_split_1237;

  corral_source_split_1235:
    assume {:verifier.code 0} true;
    out_$i60 := $sext.i8.i32(out_$i59);
    goto corral_source_split_1236;

  corral_source_split_1234:
    assume {:verifier.code 0} true;
    out_$i59 := $trunc.i32.i8(out_$i58);
    goto corral_source_split_1235;

  corral_source_split_1233:
    assume {:verifier.code 0} true;
    out_$i58 := $shl.i32(1, out_$i57);
    goto corral_source_split_1234;

  corral_source_split_1232:
    assume {:verifier.code 0} true;
    out_$i57 := $add.i32(out_$i20, $sub.i32(0, 7));
    goto corral_source_split_1233;

  corral_source_split_1231:
    assume {:verifier.code 0} true;
    out_$i56 := $sext.i8.i32(out_$i55);
    goto corral_source_split_1232;

  corral_source_split_1230:
    assume {:verifier.code 0} true;
    out_$i55 := $load.i8($M.0, out_$p54);
    goto corral_source_split_1231;

  corral_source_split_1229:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(in_$p1, $mul.ref(1, 1));
    goto corral_source_split_1230;

  $bb28:
    assume !(out_$i45 == 1);
    goto corral_source_split_1229;

  $bb23:
    assume {:verifier.code 0} true;
    assume !(out_$i37 == 1);
    goto $bb24;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i44 == 1);
    goto $bb24;

  $bb31_dummy:
    call {:si_unique_call 1} out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i20, out_$i21, out_$i68 := oxu_hub_status_data_loop_$bb14(in_$p1, in_$p2, in_$i10, in_$i17, out_$p22, out_$p23, out_$p24, out_$p25, out_$i26, out_$p27, out_$i28, out_$i29, out_$i30, out_$i31, out_$p33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$p41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$p54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$p63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i20, out_$i21, out_$i68);
    return;

  exit:
    return;
}



procedure oxu_hub_status_data_loop_$bb14(in_$p1: ref, in_$p2: ref, in_$i10: i32, in_$i17: i32, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$i26: i64, in_$p27: ref, in_$i28: i32, in_$i29: i32, in_$i30: i1, in_$i31: i64, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$i36: i32, in_$i37: i1, in_$i38: i64, in_$i39: i64, in_$p41: ref, in_$i42: i64, in_$i43: i64, in_$i44: i1, in_$i45: i1, in_$i46: i8, in_$i47: i32, in_$i48: i32, in_$i49: i32, in_$i50: i8, in_$i51: i32, in_$i52: i32, in_$i53: i8, in_$p54: ref, in_$i55: i8, in_$i56: i32, in_$i57: i32, in_$i58: i32, in_$i59: i8, in_$i60: i32, in_$i61: i32, in_$i62: i8, in_$p63: ref, in_$i64: i32, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$i20: i32, in_$i21: i32, in_$i68: i32) returns (out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$i26: i64, out_$p27: ref, out_$i28: i32, out_$i29: i32, out_$i30: i1, out_$i31: i64, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$i36: i32, out_$i37: i1, out_$i38: i64, out_$i39: i64, out_$p41: ref, out_$i42: i64, out_$i43: i64, out_$i44: i1, out_$i45: i1, out_$i46: i8, out_$i47: i32, out_$i48: i32, out_$i49: i32, out_$i50: i8, out_$i51: i32, out_$i52: i32, out_$i53: i8, out_$p54: ref, out_$i55: i8, out_$i56: i32, out_$i57: i32, out_$i58: i32, out_$i59: i8, out_$i60: i32, out_$i61: i32, out_$i62: i8, out_$p63: ref, out_$i64: i32, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$i20: i32, out_$i21: i32, out_$i68: i32);
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_bus_suspend_loop_$bb16(in_$p0: ref, in_$p2: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i1, in_$i79: i8, in_$i80: i1, in_$i81: i32, in_$i83: i32, in_$i82: i32, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i54: i32) returns (out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i1, out_$i79: i8, out_$i80: i1, out_$i81: i32, out_$i83: i32, out_$i82: i32, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i54: i32)
{

  entry:
    out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i82, out_$i84, out_$p85, out_$i86, out_$i87, out_$i54 := in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$p60, in_$p61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$i70, in_$i71, in_$p72, in_$i73, in_$p75, in_$p76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i83, in_$i82, in_$i84, in_$p85, in_$i86, in_$i87, in_$i54;
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto corral_source_split_1828;

  $bb32:
    assume out_$i87 == 1;
    assume {:verifier.code 0} true;
    out_$i54 := out_$i86;
    goto $bb32_dummy;

  corral_source_split_1877:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32;

  corral_source_split_1876:
    assume {:verifier.code 0} true;
    out_$i87 := $ne.i32(out_$i54, 0);
    goto corral_source_split_1877;

  $bb31:
    assume {:verifier.code 0} true;
    out_$i86 := $sub.i32(out_$i54, 1);
    call {:si_unique_call 408} {:cexpr "port"} boogie_si_record_i32(out_$i86);
    goto corral_source_split_1876;

  $bb30:
    assume !(out_$i84 == 1);
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1874:
    assume {:verifier.code 0} true;
    goto $bb31;

  corral_source_split_1873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 407} writel(out_$i82, out_$p85);
    goto corral_source_split_1874;

  corral_source_split_1872:
    assume {:verifier.code 0} true;
    out_$p85 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_1873;

  $bb29:
    assume out_$i84 == 1;
    goto corral_source_split_1872;

  corral_source_split_1870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_1869:
    assume {:verifier.code 0} true;
    out_$i84 := $ne.i32(out_$i63, out_$i82);
    goto corral_source_split_1870;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_1869;

  corral_source_split_1867:
    assume {:verifier.code 0} true;
    out_$i83 := $and.i32(out_$i73, $sub.i32(0, 7340033));
    call {:si_unique_call 406} {:cexpr "t2"} boogie_si_record_i32(out_$i83);
    assume {:verifier.code 0} true;
    out_$i82 := out_$i83;
    goto $bb28;

  corral_source_split_1865:
    assume {:verifier.code 0} true;
    out_$i82 := out_$i81;
    goto $bb28;

  corral_source_split_1864:
    assume {:verifier.code 0} true;
    out_$i81 := $or.i32(out_$i73, 7340032);
    call {:si_unique_call 405} {:cexpr "t2"} boogie_si_record_i32(out_$i81);
    goto corral_source_split_1865;

  $bb26:
    assume out_$i80 == 1;
    goto corral_source_split_1864;

  corral_source_split_1862:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_1861:
    assume {:verifier.code 0} true;
    out_$i80 := $trunc.i8.i1(out_$i79);
    goto corral_source_split_1862;

  corral_source_split_1860:
    assume {:verifier.code 0} true;
    out_$i79 := $zext.i1.i8(out_$i78);
    call {:si_unique_call 404} {:cexpr "tmp___3"} boogie_si_record_i8(out_$i79);
    goto corral_source_split_1861;

  corral_source_split_1859:
    assume {:verifier.code 0} true;
    call {:si_unique_call 403} out_$i78 := device_may_wakeup(out_$p77);
    goto corral_source_split_1860;

  corral_source_split_1858:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref($add.ref(out_$p76, $mul.ref(0, 2040)), $mul.ref(144, 1));
    goto corral_source_split_1859;

  corral_source_split_1857:
    assume {:verifier.code 0} true;
    out_$p76 := $load.ref($M.0, out_$p75);
    goto corral_source_split_1858;

  corral_source_split_1856:
    assume {:verifier.code 0} true;
    out_$p75 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(56, 1));
    goto corral_source_split_1857;

  $bb25:
    assume {:verifier.code 0} true;
    goto corral_source_split_1856;

  $bb20:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i63;
    goto $bb25;

  corral_source_split_1854:
    assume {:verifier.code 0} true;
    out_$i73 := out_$i70;
    goto $bb25;

  corral_source_split_1853:
    assume {:verifier.code 0} true;
    call {:si_unique_call 402} set_bit(out_$i71, out_$p72);
    goto corral_source_split_1854;

  corral_source_split_1852:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(560, 1));
    goto corral_source_split_1853;

  corral_source_split_1851:
    assume {:verifier.code 0} true;
    out_$i71 := $sext.i32.i64(out_$i54);
    goto corral_source_split_1852;

  corral_source_split_1850:
    assume {:verifier.code 0} true;
    out_$i70 := $or.i32(out_$i63, 128);
    call {:si_unique_call 401} {:cexpr "t2"} boogie_si_record_i32(out_$i70);
    goto corral_source_split_1851;

  $bb23:
    assume out_$i69 == 1;
    goto corral_source_split_1850;

  corral_source_split_1848:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  corral_source_split_1847:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 0);
    goto corral_source_split_1848;

  corral_source_split_1846:
    assume {:verifier.code 0} true;
    out_$i68 := $and.i32(out_$i63, 128);
    goto corral_source_split_1847;

  $bb21:
    assume out_$i67 == 1;
    goto corral_source_split_1846;

  corral_source_split_1844:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_1843:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 0);
    goto corral_source_split_1844;

  corral_source_split_1842:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i63, 8192);
    goto corral_source_split_1843;

  $bb18:
    assume out_$i65 == 1;
    goto corral_source_split_1842;

  corral_source_split_1840:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb18, $bb19;

  corral_source_split_1839:
    assume {:verifier.code 0} true;
    out_$i65 := $ne.i32(out_$i64, 0);
    goto corral_source_split_1840;

  corral_source_split_1838:
    assume {:verifier.code 0} true;
    out_$i64 := $and.i32(out_$i63, 4);
    goto corral_source_split_1839;

  corral_source_split_1837:
    assume {:verifier.code 0} true;
    out_$i63 := $and.i32(out_$i62, $sub.i32(0, 43));
    call {:si_unique_call 400} {:cexpr "t1"} boogie_si_record_i32(out_$i63);
    goto corral_source_split_1838;

  SeqInstr_171:
    call {:si_unique_call 399} {:cexpr "tmp___2"} boogie_si_record_i32(out_$i62);
    goto corral_source_split_1837;

  SeqInstr_170:
    assume assertsPassed;
    goto SeqInstr_171;

  corral_source_split_1836:
    assume {:verifier.code 0} true;
    call {:si_unique_call 398} out_$i62 := readl(out_$p61);
    goto SeqInstr_170;

  corral_source_split_1835:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(out_$p60);
    goto corral_source_split_1836;

  corral_source_split_1834:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref(out_$p58, $mul.ref(out_$i59, 4));
    goto corral_source_split_1835;

  corral_source_split_1833:
    assume {:verifier.code 0} true;
    out_$i59 := $sext.i32.i64(out_$i54);
    goto corral_source_split_1834;

  corral_source_split_1832:
    assume {:verifier.code 0} true;
    out_$p58 := $bitcast.ref.ref(out_$p57);
    goto corral_source_split_1833;

  corral_source_split_1831:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p56, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_1832;

  corral_source_split_1830:
    assume {:verifier.code 0} true;
    out_$p56 := $load.ref($M.0, out_$p55);
    goto corral_source_split_1831;

  $bb17:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_1830;

  corral_source_split_1828:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb19:
    assume {:verifier.code 0} true;
    assume !(out_$i65 == 1);
    goto $bb20;

  $bb22:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb20;

  $bb24:
    assume {:verifier.code 0} true;
    assume !(out_$i69 == 1);
    goto $bb20;

  $bb27:
    assume !(out_$i80 == 1);
    goto corral_source_split_1867;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i82, out_$i84, out_$p85, out_$i86, out_$i87, out_$i54 := oxu_bus_suspend_loop_$bb16(in_$p0, in_$p2, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$p60, out_$p61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$i70, out_$i71, out_$p72, out_$i73, out_$p75, out_$p76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i83, out_$i82, out_$i84, out_$p85, out_$i86, out_$i87, out_$i54);
    return;

  exit:
    return;
}



procedure oxu_bus_suspend_loop_$bb16(in_$p0: ref, in_$p2: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$p60: ref, in_$p61: ref, in_$i62: i32, in_$i63: i32, in_$i64: i32, in_$i65: i1, in_$i66: i32, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$i70: i32, in_$i71: i64, in_$p72: ref, in_$i73: i32, in_$p75: ref, in_$p76: ref, in_$p77: ref, in_$i78: i1, in_$i79: i8, in_$i80: i1, in_$i81: i32, in_$i83: i32, in_$i82: i32, in_$i84: i1, in_$p85: ref, in_$i86: i32, in_$i87: i1, in_$i54: i32) returns (out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$p60: ref, out_$p61: ref, out_$i62: i32, out_$i63: i32, out_$i64: i32, out_$i65: i1, out_$i66: i32, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$i70: i32, out_$i71: i64, out_$p72: ref, out_$i73: i32, out_$p75: ref, out_$p76: ref, out_$p77: ref, out_$i78: i1, out_$i79: i8, out_$i80: i1, out_$i81: i32, out_$i83: i32, out_$i82: i32, out_$i84: i1, out_$p85: ref, out_$i86: i32, out_$i87: i1, out_$i54: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_bus_resume_loop_$bb32(in_$p2: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i64, in_$p113: ref, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$i107: i32) returns (out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i64, out_$p113: ref, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$i107: i32)
{

  entry:
    out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i107 := in_$p108, in_$p109, in_$p110, in_$p111, in_$i112, in_$p113, in_$i114, in_$i115, in_$p116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p124, in_$p125, in_$i126, in_$p127, in_$i128, in_$i129, in_$i107;
    goto $bb32, exit;

  $bb32:
    assume {:verifier.code 0} true;
    goto corral_source_split_2071;

  $bb40:
    assume out_$i129 == 1;
    assume {:verifier.code 0} true;
    out_$i107 := out_$i128;
    goto $bb40_dummy;

  corral_source_split_2100:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40;

  corral_source_split_2099:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i32(out_$i107, 0);
    goto corral_source_split_2100;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i128 := $sub.i32(out_$i107, 1);
    call {:si_unique_call 458} {:cexpr "i"} boogie_si_record_i32(out_$i128);
    goto corral_source_split_2099;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_2097:
    assume {:verifier.code 0} true;
    goto $bb39;

  corral_source_split_2096:
    assume {:verifier.code 0} true;
    call {:si_unique_call 457} writel(out_$i121, out_$p127);
    goto corral_source_split_2097;

  corral_source_split_2095:
    assume {:verifier.code 0} true;
    out_$p127 := $add.ref(out_$p125, $mul.ref(out_$i126, 1));
    goto corral_source_split_2096;

  corral_source_split_2094:
    assume {:verifier.code 0} true;
    out_$i126 := $sext.i32.i64(out_$i107);
    goto corral_source_split_2095;

  corral_source_split_2093:
    assume {:verifier.code 0} true;
    out_$p125 := $bitcast.ref.ref(out_$p124);
    goto corral_source_split_2094;

  corral_source_split_2092:
    assume {:verifier.code 0} true;
    out_$p124 := $add.ref($add.ref(out_$p123, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_2093;

  corral_source_split_2091:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p122);
    goto corral_source_split_2092;

  corral_source_split_2090:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2091;

  corral_source_split_2089:
    assume {:verifier.code 0} true;
    out_$i121 := $and.i32(out_$i114, $sub.i32(0, 107));
    call {:si_unique_call 456} {:cexpr "temp"} boogie_si_record_i32(out_$i121);
    goto corral_source_split_2090;

  $bb37:
    assume out_$i120 == 1;
    goto corral_source_split_2089;

  corral_source_split_2087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb38;

  corral_source_split_2086:
    assume {:verifier.code 0} true;
    out_$i120 := $ne.i32(out_$i119, 0);
    goto corral_source_split_2087;

  corral_source_split_2085:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i114, 128);
    goto corral_source_split_2086;

  $bb34:
    assume out_$i118 == 1;
    goto corral_source_split_2085;

  corral_source_split_2083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_2082:
    assume {:verifier.code 0} true;
    out_$i118 := $ne.i32(out_$i117, 0);
    goto corral_source_split_2083;

  corral_source_split_2081:
    assume {:verifier.code 0} true;
    call {:si_unique_call 454} out_$i117 := variable_test_bit(out_$i115, out_$p116);
    call {:si_unique_call 455} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i117);
    goto corral_source_split_2082;

  corral_source_split_2080:
    assume {:verifier.code 0} true;
    out_$p116 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(560, 1));
    goto corral_source_split_2081;

  corral_source_split_2079:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i107);
    goto corral_source_split_2080;

  SeqInstr_186:
    call {:si_unique_call 453} {:cexpr "temp"} boogie_si_record_i32(out_$i114);
    goto corral_source_split_2079;

  SeqInstr_185:
    assume assertsPassed;
    goto SeqInstr_186;

  corral_source_split_2078:
    assume {:verifier.code 0} true;
    call {:si_unique_call 452} out_$i114 := readl(out_$p113);
    goto SeqInstr_185;

  corral_source_split_2077:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p111, $mul.ref(out_$i112, 1));
    goto corral_source_split_2078;

  corral_source_split_2076:
    assume {:verifier.code 0} true;
    out_$i112 := $sext.i32.i64(out_$i107);
    goto corral_source_split_2077;

  corral_source_split_2075:
    assume {:verifier.code 0} true;
    out_$p111 := $bitcast.ref.ref(out_$p110);
    goto corral_source_split_2076;

  corral_source_split_2074:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(out_$p109, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_2075;

  corral_source_split_2073:
    assume {:verifier.code 0} true;
    out_$p109 := $load.ref($M.0, out_$p108);
    goto corral_source_split_2074;

  $bb33:
    assume {:verifier.code 0} true;
    out_$p108 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2073;

  corral_source_split_2071:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i118 == 1);
    goto $bb36;

  $bb38:
    assume {:verifier.code 0} true;
    assume !(out_$i120 == 1);
    goto $bb36;

  $bb40_dummy:
    call {:si_unique_call 1} out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i107 := oxu_bus_resume_loop_$bb32(in_$p2, out_$p108, out_$p109, out_$p110, out_$p111, out_$i112, out_$p113, out_$i114, out_$i115, out_$p116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p124, out_$p125, out_$i126, out_$p127, out_$i128, out_$i129, out_$i107);
    return;

  exit:
    return;
}



procedure oxu_bus_resume_loop_$bb32(in_$p2: ref, in_$p108: ref, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$i112: i64, in_$p113: ref, in_$i114: i32, in_$i115: i64, in_$p116: ref, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i1, in_$i121: i32, in_$p122: ref, in_$p123: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$p127: ref, in_$i128: i32, in_$i129: i1, in_$i107: i32) returns (out_$p108: ref, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$i112: i64, out_$p113: ref, out_$i114: i32, out_$i115: i64, out_$p116: ref, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i1, out_$i121: i32, out_$p122: ref, out_$p123: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$p127: ref, out_$i128: i32, out_$i129: i1, out_$i107: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation oxu_bus_resume_loop_$bb14(in_$p2: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i64, in_$i87: i64, in_$i88: i64, in_$i89: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i71: i32) returns (out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i64, out_$i87: i64, out_$i88: i64, out_$i89: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i71: i32)
{

  entry:
    out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i71 := in_$p72, in_$p73, in_$p74, in_$p75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$p81, in_$i82, in_$i83, in_$i84, in_$i85, in_$i86, in_$i87, in_$i88, in_$i89, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$p97, in_$i98, in_$p99, in_$i100, in_$i101, in_$i71;
    goto $bb14, exit;

  $bb14:
    assume {:verifier.code 0} true;
    goto corral_source_split_2017;

  $bb22:
    assume out_$i101 == 1;
    assume {:verifier.code 0} true;
    out_$i71 := out_$i100;
    goto $bb22_dummy;

  corral_source_split_2054:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22;

  corral_source_split_2053:
    assume {:verifier.code 0} true;
    out_$i101 := $ne.i32(out_$i71, 0);
    goto corral_source_split_2054;

  corral_source_split_2052:
    assume {:verifier.code 0} true;
    out_$i100 := $sub.i32(out_$i71, 1);
    call {:si_unique_call 447} {:cexpr "i"} boogie_si_record_i32(out_$i100);
    goto corral_source_split_2053;

  corral_source_split_2051:
    assume {:verifier.code 0} true;
    call {:si_unique_call 446} writel(out_$i93, out_$p99);
    goto corral_source_split_2052;

  corral_source_split_2050:
    assume {:verifier.code 0} true;
    out_$p99 := $add.ref(out_$p97, $mul.ref(out_$i98, 1));
    goto corral_source_split_2051;

  corral_source_split_2049:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i71);
    goto corral_source_split_2050;

  corral_source_split_2048:
    assume {:verifier.code 0} true;
    out_$p97 := $bitcast.ref.ref(out_$p96);
    goto corral_source_split_2049;

  corral_source_split_2047:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_2048;

  corral_source_split_2046:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_2047;

  corral_source_split_2045:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2046;

  $bb21:
    assume {:verifier.code 0} true;
    goto corral_source_split_2045;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i79;
    goto $bb21;

  corral_source_split_2043:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i92;
    goto $bb21;

  corral_source_split_2042:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i32(out_$i79, 64);
    call {:si_unique_call 445} {:cexpr "temp"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_2043;

  corral_source_split_2041:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p91, out_$i88);
    goto corral_source_split_2042;

  corral_source_split_2040:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref(out_$i89, 8));
    goto corral_source_split_2041;

  corral_source_split_2039:
    assume {:verifier.code 0} true;
    out_$i89 := $sext.i32.i64(out_$i71);
    goto corral_source_split_2040;

  corral_source_split_2038:
    assume {:verifier.code 0} true;
    out_$i88 := $add.i64(out_$i86, out_$i87);
    goto corral_source_split_2039;

  corral_source_split_2037:
    assume {:verifier.code 0} true;
    out_$i87 := $load.i64($M.0, jiffies);
    goto corral_source_split_2038;

  corral_source_split_2036:
    assume {:verifier.code 0} true;
    call {:si_unique_call 443} out_$i86 := msecs_to_jiffies(20);
    call {:si_unique_call 444} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i86);
    goto corral_source_split_2037;

  $bb19:
    assume out_$i85 == 1;
    goto corral_source_split_2036;

  corral_source_split_2034:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_2033:
    assume {:verifier.code 0} true;
    out_$i85 := $ne.i32(out_$i84, 0);
    goto corral_source_split_2034;

  corral_source_split_2032:
    assume {:verifier.code 0} true;
    out_$i84 := $and.i32(out_$i79, 128);
    goto corral_source_split_2033;

  $bb16:
    assume out_$i83 == 1;
    goto corral_source_split_2032;

  corral_source_split_2030:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_2029:
    assume {:verifier.code 0} true;
    out_$i83 := $ne.i32(out_$i82, 0);
    goto corral_source_split_2030;

  corral_source_split_2028:
    assume {:verifier.code 0} true;
    call {:si_unique_call 441} out_$i82 := variable_test_bit(out_$i80, out_$p81);
    call {:si_unique_call 442} {:cexpr "tmp___4"} boogie_si_record_i32(out_$i82);
    goto corral_source_split_2029;

  corral_source_split_2027:
    assume {:verifier.code 0} true;
    out_$p81 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(560, 1));
    goto corral_source_split_2028;

  corral_source_split_2026:
    assume {:verifier.code 0} true;
    out_$i80 := $sext.i32.i64(out_$i71);
    goto corral_source_split_2027;

  corral_source_split_2025:
    assume {:verifier.code 0} true;
    out_$i79 := $and.i32(out_$i78, $sub.i32(0, 7340075));
    call {:si_unique_call 440} {:cexpr "temp"} boogie_si_record_i32(out_$i79);
    goto corral_source_split_2026;

  SeqInstr_183:
    call {:si_unique_call 439} {:cexpr "temp"} boogie_si_record_i32(out_$i78);
    goto corral_source_split_2025;

  SeqInstr_182:
    assume assertsPassed;
    goto SeqInstr_183;

  corral_source_split_2024:
    assume {:verifier.code 0} true;
    call {:si_unique_call 438} out_$i78 := readl(out_$p77);
    goto SeqInstr_182;

  corral_source_split_2023:
    assume {:verifier.code 0} true;
    out_$p77 := $add.ref(out_$p75, $mul.ref(out_$i76, 1));
    goto corral_source_split_2024;

  corral_source_split_2022:
    assume {:verifier.code 0} true;
    out_$i76 := $sext.i32.i64(out_$i71);
    goto corral_source_split_2023;

  corral_source_split_2021:
    assume {:verifier.code 0} true;
    out_$p75 := $bitcast.ref.ref(out_$p74);
    goto corral_source_split_2022;

  corral_source_split_2020:
    assume {:verifier.code 0} true;
    out_$p74 := $add.ref($add.ref(out_$p73, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_2021;

  corral_source_split_2019:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_2020;

  $bb15:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(in_$p2, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2019;

  corral_source_split_2017:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb17:
    assume {:verifier.code 0} true;
    assume !(out_$i83 == 1);
    goto $bb18;

  $bb20:
    assume {:verifier.code 0} true;
    assume !(out_$i85 == 1);
    goto $bb18;

  $bb22_dummy:
    call {:si_unique_call 1} out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i71 := oxu_bus_resume_loop_$bb14(in_$p2, out_$p72, out_$p73, out_$p74, out_$p75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$p81, out_$i82, out_$i83, out_$i84, out_$i85, out_$i86, out_$i87, out_$i88, out_$i89, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$p97, out_$i98, out_$p99, out_$i100, out_$i101, out_$i71);
    return;

  exit:
    return;
}



procedure oxu_bus_resume_loop_$bb14(in_$p2: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$p77: ref, in_$i78: i32, in_$i79: i32, in_$i80: i64, in_$p81: ref, in_$i82: i32, in_$i83: i1, in_$i84: i32, in_$i85: i1, in_$i86: i64, in_$i87: i64, in_$i88: i64, in_$i89: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$p97: ref, in_$i98: i64, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$i71: i32) returns (out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$p77: ref, out_$i78: i32, out_$i79: i32, out_$i80: i64, out_$p81: ref, out_$i82: i32, out_$i83: i1, out_$i84: i32, out_$i85: i1, out_$i86: i64, out_$i87: i64, out_$i88: i64, out_$i89: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$p97: ref, out_$i98: i64, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$i71: i32);
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_quiesce_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} ehci_quiesce_loop_$bb3();
    return;

  exit:
    return;
}



procedure ehci_quiesce_loop_$bb3();



implementation handshake_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i7: i32, in_$i8: i32, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1) returns (out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i7: i32, out_$i8: i32, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1)
{

  entry:
    out_$i9, out_$i10, out_$i11, out_$i7, out_$i8, out_$i13, out_$i14, out_$i15, out_$i16 := in_$i9, in_$i10, in_$i11, in_$i7, in_$i8, in_$i13, in_$i14, in_$i15, in_$i16;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume !(out_$i11 == 1);
    assume {:verifier.code 0} true;
    out_$i7, out_$i8 := out_$i10, out_$i9;
    goto $bb7_dummy;

  corral_source_split_2422:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7;

  corral_source_split_2421:
    assume {:verifier.code 0} true;
    out_$i11 := $eq.i32(out_$i10, $sub.i32(0, 1));
    goto corral_source_split_2422;

  SeqInstr_225:
    call {:si_unique_call 552} {:cexpr "result"} boogie_si_record_i32(out_$i10);
    goto corral_source_split_2421;

  SeqInstr_224:
    assume assertsPassed;
    goto SeqInstr_225;

  corral_source_split_2420:
    assume {:verifier.code 0} true;
    call {:si_unique_call 551} out_$i10 := readl(in_$p1);
    goto SeqInstr_224;

  $bb5:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2420;

  corral_source_split_2435:
    assume {:verifier.code 0} true;
    out_$i9 := out_$i15;
    assume true;
    goto $bb5;

  corral_source_split_2434:
    assume {:verifier.code 0} true;
    out_$i16 := $sgt.i32(out_$i15, 0);
    goto corral_source_split_2435;

  corral_source_split_2433:
    assume {:verifier.code 0} true;
    out_$i15 := $sub.i32(out_$i8, 1);
    call {:si_unique_call 555} {:cexpr "usec"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_2434;

  $bb12:
    assume {:verifier.code 0} true;
    call {:si_unique_call 554} __const_udelay(4295);
    goto corral_source_split_2433;

  $bb11:
    assume !(out_$i14 == 1);
    assume {:verifier.code 0} true;
    goto $bb12;

  corral_source_split_2429:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb11;

  corral_source_split_2428:
    assume {:verifier.code 0} true;
    out_$i14 := $eq.i32(out_$i13, in_$i3);
    goto corral_source_split_2429;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i13 := $and.i32(out_$i7, in_$i2);
    call {:si_unique_call 553} {:cexpr "result"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_2428;

  $bb7_dummy:
    call {:si_unique_call 1} out_$i9, out_$i10, out_$i11, out_$i7, out_$i8, out_$i13, out_$i14, out_$i15, out_$i16 := handshake_loop_$bb4(in_$p1, in_$i2, in_$i3, out_$i9, out_$i10, out_$i11, out_$i7, out_$i8, out_$i13, out_$i14, out_$i15, out_$i16);
    return;

  exit:
    return;
}



procedure handshake_loop_$bb4(in_$p1: ref, in_$i2: i32, in_$i3: i32, in_$i9: i32, in_$i10: i32, in_$i11: i1, in_$i7: i32, in_$i8: i32, in_$i13: i32, in_$i14: i1, in_$i15: i32, in_$i16: i1) returns (out_$i9: i32, out_$i10: i32, out_$i11: i1, out_$i7: i32, out_$i8: i32, out_$i13: i32, out_$i14: i1, out_$i15: i32, out_$i16: i1);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation scan_async_loop_$bb8(in_$p0: ref, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$i63: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i32) returns (out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$i63: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i32)
{

  entry:
    out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i63, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78 := in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i63, in_$i72, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  $bb32:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p75, out_$i72;
    goto $bb32_dummy;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i72;
    assume true;
    goto $bb32;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(out_$p73);
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p54, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2662;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  $bb21:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := out_$i27;
    goto $bb31;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i63;
    goto $bb31;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i27;
    goto $bb24;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    out_$i63 := 2;
    goto $bb24;

  $bb22:
    assume out_$i62 == 1;
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i59, out_$i61);
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p54, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2636;

  $bb20:
    assume out_$i57 == 1;
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} out_$i56 := list_empty(out_$p55);
    call {:si_unique_call 587} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2632;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2631;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p26;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p36;
    goto $bb19;

  $bb15:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i27;
    assume true;
    goto $bb15;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_2614;

  SeqInstr_246:
    goto corral_source_split_2613;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} qh_put(out_$p36);
    goto SeqInstr_245;

  SeqInstr_243:
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2612;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} out_$i40 := qh_completions(in_$p0, out_$p36);
    goto SeqInstr_242;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, out_$i38);
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p36, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} out_$p36 := qh_get(out_$p26);
    goto corral_source_split_2607;

  $bb12:
    assume out_$i35 == 1;
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i32, out_$i34);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p26, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2600;

  $bb9:
    assume out_$i30 == 1;
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} out_$i29 := list_empty(out_$p28);
    call {:si_unique_call 579} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p26, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2595;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb11;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_249:
    goto corral_source_split_2659;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} start_unlink_async(in_$p0, out_$p54);
    goto SeqInstr_248;

  $bb28:
    assume out_$i71 == 1;
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 1);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i69);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.0, out_$p68);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p54, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_2653;

  $bb25:
    assume out_$i67 == 1;
    goto corral_source_split_2652;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i64(out_$i66, 0);
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_2645;

  $bb23:
    assume !(out_$i62 == 1);
    goto corral_source_split_2644;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb27;

  $bb32_dummy:
    call {:si_unique_call 1} out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i63, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78 := scan_async_loop_$bb8(in_$p0, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i63, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78);
    return;

  exit:
    return;
}



procedure scan_async_loop_$bb8(in_$p0: ref, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$i63: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i32) returns (out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$i63: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation scan_async_loop_$bb7(in_$p0: ref, in_$p12: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$i63: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i32, in_$i53: i32) returns (out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$i63: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i32, out_$i53: i32)
{

  entry:
    out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i63, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i53 := in_$p24, in_$i25, in_$p26, in_$i27, in_$p28, in_$i29, in_$i30, in_$p31, in_$i32, in_$p33, in_$i34, in_$i35, in_$p36, in_$p37, in_$i38, in_$p39, in_$i40, in_$i41, in_$i42, in_$p43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$p54, in_$p55, in_$i56, in_$i57, in_$p58, in_$i59, in_$p60, in_$i61, in_$i62, in_$p64, in_$p65, in_$i66, in_$i67, in_$p68, in_$i69, in_$i70, in_$i71, in_$i63, in_$i72, in_$p73, in_$p74, in_$p75, in_$i76, in_$i77, in_$i78, in_$i53;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2592;

  $bb16:
    assume out_$i52 == 1;
    assume {:verifier.code 0} true;
    out_$p24, out_$i25 := out_$p46, out_$i42;
    goto $bb16_dummy;

  corral_source_split_2626:
    assume {:verifier.code 0} true;
    out_$i53 := out_$i42;
    assume true;
    goto $bb16;

  corral_source_split_2625:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i64(out_$i51, 0);
    goto corral_source_split_2626;

  corral_source_split_2624:
    assume {:verifier.code 0} true;
    call {:si_unique_call 584} out_$i51 := ldv__builtin_expect(out_$i50, 1);
    call {:si_unique_call 585} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i51);
    goto corral_source_split_2625;

  corral_source_split_2623:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i49);
    goto corral_source_split_2624;

  corral_source_split_2622:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i1.i32(out_$i48);
    goto corral_source_split_2623;

  corral_source_split_2621:
    assume {:verifier.code 0} true;
    out_$i48 := $ne.i64(out_$i47, 0);
    goto corral_source_split_2622;

  corral_source_split_2620:
    assume {:verifier.code 0} true;
    out_$i47 := $p2i.ref.i64(out_$p46);
    goto corral_source_split_2621;

  corral_source_split_2619:
    assume {:verifier.code 0} true;
    out_$p46 := $load.ref($M.0, out_$p45);
    goto corral_source_split_2620;

  corral_source_split_2618:
    assume {:verifier.code 0} true;
    out_$p45 := $bitcast.ref.ref(out_$p44);
    goto corral_source_split_2619;

  corral_source_split_2617:
    assume {:verifier.code 0} true;
    out_$p44 := $add.ref($add.ref(out_$p43, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2618;

  corral_source_split_2616:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, in_$p12);
    goto corral_source_split_2617;

  $bb14:
    assume out_$i41 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_2616;

  corral_source_split_2614:
    assume {:verifier.code 0} true;
    out_$i42 := out_$i27;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_2613:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i32(out_$i40, 0);
    goto corral_source_split_2614;

  SeqInstr_246:
    goto corral_source_split_2613;

  SeqInstr_245:
    assume assertsPassed;
    goto SeqInstr_246;

  corral_source_split_2612:
    assume {:verifier.code 0} true;
    call {:si_unique_call 583} qh_put(out_$p36);
    goto SeqInstr_245;

  SeqInstr_243:
    call {:si_unique_call 582} {:cexpr "tmp"} boogie_si_record_i32(out_$i40);
    goto corral_source_split_2612;

  SeqInstr_242:
    assume assertsPassed;
    goto SeqInstr_243;

  corral_source_split_2611:
    assume {:verifier.code 0} true;
    call {:si_unique_call 581} out_$i40 := qh_completions(in_$p0, out_$p36);
    goto SeqInstr_242;

  corral_source_split_2610:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, out_$i38);
    goto corral_source_split_2611;

  corral_source_split_2609:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref(out_$p36, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2610;

  corral_source_split_2608:
    assume {:verifier.code 0} true;
    out_$i38 := $load.i32($M.0, out_$p37);
    goto corral_source_split_2609;

  corral_source_split_2607:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2608;

  corral_source_split_2606:
    assume {:verifier.code 0} true;
    call {:si_unique_call 580} out_$p36 := qh_get(out_$p26);
    goto corral_source_split_2607;

  $bb12:
    assume out_$i35 == 1;
    goto corral_source_split_2606;

  corral_source_split_2604:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_2603:
    assume {:verifier.code 0} true;
    out_$i35 := $ne.i32(out_$i32, out_$i34);
    goto corral_source_split_2604;

  corral_source_split_2602:
    assume {:verifier.code 0} true;
    out_$i34 := $load.i32($M.0, out_$p33);
    goto corral_source_split_2603;

  corral_source_split_2601:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2602;

  corral_source_split_2600:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i32($M.0, out_$p31);
    goto corral_source_split_2601;

  corral_source_split_2599:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p26, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2600;

  $bb9:
    assume out_$i30 == 1;
    goto corral_source_split_2599;

  corral_source_split_2597:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_2596:
    assume {:verifier.code 0} true;
    out_$i30 := $eq.i32(out_$i29, 0);
    goto corral_source_split_2597;

  corral_source_split_2595:
    assume {:verifier.code 0} true;
    call {:si_unique_call 578} out_$i29 := list_empty(out_$p28);
    call {:si_unique_call 579} {:cexpr "tmp___0"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_2596;

  corral_source_split_2594:
    assume {:verifier.code 0} true;
    out_$p28 := $add.ref($add.ref(out_$p26, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2595;

  $bb8:
    call out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i63, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78 := scan_async_loop_$bb8(in_$p0, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i63, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78);
    goto $bb8_last;

  $bb8_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2594;

  corral_source_split_2592:
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p24, out_$i25;
    goto $bb8;

  $bb32:
    assume out_$i77 == 1;
    assume {:verifier.code 0} true;
    out_$p26, out_$i27 := out_$p75, out_$i72;
    assume false;
    return;

  corral_source_split_2666:
    assume {:verifier.code 0} true;
    out_$i78 := out_$i72;
    assume true;
    goto $bb32;

  corral_source_split_2665:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_2666;

  corral_source_split_2664:
    assume {:verifier.code 0} true;
    out_$i76 := $p2i.ref.i64(out_$p75);
    goto corral_source_split_2665;

  corral_source_split_2663:
    assume {:verifier.code 0} true;
    out_$p75 := $load.ref($M.0, out_$p74);
    goto corral_source_split_2664;

  corral_source_split_2662:
    assume {:verifier.code 0} true;
    out_$p74 := $bitcast.ref.ref(out_$p73);
    goto corral_source_split_2663;

  corral_source_split_2661:
    assume {:verifier.code 0} true;
    out_$p73 := $add.ref($add.ref(out_$p54, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2662;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_2661;

  $bb21:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i72 := out_$i27;
    goto $bb31;

  corral_source_split_2650:
    assume {:verifier.code 0} true;
    out_$i72 := out_$i63;
    goto $bb31;

  $bb24:
    assume {:verifier.code 0} true;
    goto corral_source_split_2650;

  $bb30:
    assume {:verifier.code 0} true;
    out_$i63 := out_$i27;
    goto $bb24;

  corral_source_split_2642:
    assume {:verifier.code 0} true;
    out_$i63 := 2;
    goto $bb24;

  $bb22:
    assume out_$i62 == 1;
    goto corral_source_split_2642;

  corral_source_split_2640:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2639:
    assume {:verifier.code 0} true;
    out_$i62 := $eq.i32(out_$i59, out_$i61);
    goto corral_source_split_2640;

  corral_source_split_2638:
    assume {:verifier.code 0} true;
    out_$i61 := $load.i32($M.0, out_$p60);
    goto corral_source_split_2639;

  corral_source_split_2637:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(712, 1));
    goto corral_source_split_2638;

  corral_source_split_2636:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_2637;

  corral_source_split_2635:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p54, $mul.ref(0, 160)), $mul.ref(132, 1));
    goto corral_source_split_2636;

  $bb20:
    assume out_$i57 == 1;
    goto corral_source_split_2635;

  corral_source_split_2633:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_2632:
    assume {:verifier.code 0} true;
    out_$i57 := $ne.i32(out_$i56, 0);
    goto corral_source_split_2633;

  corral_source_split_2631:
    assume {:verifier.code 0} true;
    call {:si_unique_call 586} out_$i56 := list_empty(out_$p55);
    call {:si_unique_call 587} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i56);
    goto corral_source_split_2632;

  corral_source_split_2630:
    assume {:verifier.code 0} true;
    out_$p55 := $add.ref($add.ref(out_$p54, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2631;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_2630;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p26;
    goto $bb19;

  $bb18:
    assume {:verifier.code 0} true;
    out_$p54 := out_$p36;
    goto $bb19;

  $bb15:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i30 == 1);
    goto $bb11;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i35 == 1);
    goto $bb11;

  $bb27:
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2659:
    assume {:verifier.code 0} true;
    goto $bb30;

  SeqInstr_249:
    goto corral_source_split_2659;

  SeqInstr_248:
    assume assertsPassed;
    goto SeqInstr_249;

  corral_source_split_2658:
    assume {:verifier.code 0} true;
    call {:si_unique_call 588} start_unlink_async(in_$p0, out_$p54);
    goto SeqInstr_248;

  $bb28:
    assume out_$i71 == 1;
    goto corral_source_split_2658;

  corral_source_split_2656:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2655:
    assume {:verifier.code 0} true;
    out_$i71 := $eq.i32(out_$i70, 1);
    goto corral_source_split_2656;

  corral_source_split_2654:
    assume {:verifier.code 0} true;
    out_$i70 := $zext.i8.i32(out_$i69);
    goto corral_source_split_2655;

  corral_source_split_2653:
    assume {:verifier.code 0} true;
    out_$i69 := $load.i8($M.0, out_$p68);
    goto corral_source_split_2654;

  corral_source_split_2652:
    assume {:verifier.code 0} true;
    out_$p68 := $add.ref($add.ref(out_$p54, $mul.ref(0, 160)), $mul.ref(136, 1));
    goto corral_source_split_2653;

  $bb25:
    assume out_$i67 == 1;
    goto corral_source_split_2652;

  corral_source_split_2648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  corral_source_split_2647:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i64(out_$i66, 0);
    goto corral_source_split_2648;

  corral_source_split_2646:
    assume {:verifier.code 0} true;
    out_$i66 := $p2i.ref.i64(out_$p65);
    goto corral_source_split_2647;

  corral_source_split_2645:
    assume {:verifier.code 0} true;
    out_$p65 := $load.ref($M.0, out_$p64);
    goto corral_source_split_2646;

  corral_source_split_2644:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(384, 1));
    goto corral_source_split_2645;

  $bb23:
    assume !(out_$i62 == 1);
    goto corral_source_split_2644;

  $bb26:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb27;

  $bb29:
    assume {:verifier.code 0} true;
    assume !(out_$i71 == 1);
    goto $bb27;

  $bb16_dummy:
    call {:si_unique_call 1} out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i63, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i53 := scan_async_loop_$bb7(in_$p0, in_$p12, out_$p24, out_$i25, out_$p26, out_$i27, out_$p28, out_$i29, out_$i30, out_$p31, out_$i32, out_$p33, out_$i34, out_$i35, out_$p36, out_$p37, out_$i38, out_$p39, out_$i40, out_$i41, out_$i42, out_$p43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$p54, out_$p55, out_$i56, out_$i57, out_$p58, out_$i59, out_$p60, out_$i61, out_$i62, out_$p64, out_$p65, out_$i66, out_$i67, out_$p68, out_$i69, out_$i70, out_$i71, out_$i63, out_$i72, out_$p73, out_$p74, out_$p75, out_$i76, out_$i77, out_$i78, out_$i53);
    return;

  exit:
    return;
}



procedure scan_async_loop_$bb7(in_$p0: ref, in_$p12: ref, in_$p24: ref, in_$i25: i32, in_$p26: ref, in_$i27: i32, in_$p28: ref, in_$i29: i32, in_$i30: i1, in_$p31: ref, in_$i32: i32, in_$p33: ref, in_$i34: i32, in_$i35: i1, in_$p36: ref, in_$p37: ref, in_$i38: i32, in_$p39: ref, in_$i40: i32, in_$i41: i1, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i64, in_$i48: i1, in_$i49: i32, in_$i50: i64, in_$i51: i64, in_$i52: i1, in_$p54: ref, in_$p55: ref, in_$i56: i32, in_$i57: i1, in_$p58: ref, in_$i59: i32, in_$p60: ref, in_$i61: i32, in_$i62: i1, in_$p64: ref, in_$p65: ref, in_$i66: i64, in_$i67: i1, in_$p68: ref, in_$i69: i8, in_$i70: i32, in_$i71: i1, in_$i63: i32, in_$i72: i32, in_$p73: ref, in_$p74: ref, in_$p75: ref, in_$i76: i64, in_$i77: i1, in_$i78: i32, in_$i53: i32) returns (out_$p24: ref, out_$i25: i32, out_$p26: ref, out_$i27: i32, out_$p28: ref, out_$i29: i32, out_$i30: i1, out_$p31: ref, out_$i32: i32, out_$p33: ref, out_$i34: i32, out_$i35: i1, out_$p36: ref, out_$p37: ref, out_$i38: i32, out_$p39: ref, out_$i40: i32, out_$i41: i1, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i64, out_$i48: i1, out_$i49: i32, out_$i50: i64, out_$i51: i64, out_$i52: i1, out_$p54: ref, out_$p55: ref, out_$i56: i32, out_$i57: i1, out_$p58: ref, out_$i59: i32, out_$p60: ref, out_$i61: i32, out_$i62: i1, out_$p64: ref, out_$p65: ref, out_$i66: i64, out_$i67: i1, out_$p68: ref, out_$i69: i8, out_$i70: i32, out_$i71: i1, out_$i63: i32, out_$i72: i32, out_$p73: ref, out_$p74: ref, out_$p75: ref, out_$i76: i64, out_$i77: i1, out_$i78: i32, out_$i53: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation scan_periodic_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i25: i32, in_$p43: ref, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i82: i32, in_$i83: i32, in_$i107: i1, in_$i108: i32, in_$i109: i64, in_$i110: i64, in_$i111: i1, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i48: i32, in_$i49: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_87: ref) returns (out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i82: i32, out_$i83: i32, out_$i107: i1, out_$i108: i32, out_$i109: i64, out_$i110: i64, out_$i111: i1, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i48: i32, out_$i49: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_87: ref)
{

  entry:
    out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i82, in_$i83, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p123, in_$i124, in_$i125, in_$i48, in_$i49, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_vslice_dummy_var_87;
    goto $bb12, exit;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  $bb31:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i83, out_$i82;
    goto $bb31_dummy;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, 0);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i124 := $p2i.ref.i64(out_$p123);
    goto corral_source_split_2831;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, in_$p43);
    goto corral_source_split_2830;

  $bb27:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i64(out_$i110, 0);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} out_$i110 := ldv__builtin_expect(out_$i109, 0);
    call {:si_unique_call 616} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i110);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i108);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i1.i32(out_$i107);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i82, 0);
    goto corral_source_split_2774;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i82, out_$i83 := out_$i49, out_$i48;
    goto $bb20;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$i82, out_$i83 := out_$i68, out_$i60;
    goto $bb20;

  SeqInstr_261:
    goto corral_source_split_2771;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} qh_put(out_$p81);
    goto SeqInstr_260;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.39, out_$p80);
    goto corral_source_split_2770;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2769;

  $bb18:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_258:
    goto corral_source_split_2767;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} intr_deschedule(in_$p0, out_$p79);
    goto SeqInstr_257;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.39, out_$p78);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2765;

  $bb17:
    assume out_$i77 == 1;
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} out_$i76 := ldv__builtin_expect(out_$i75, 0);
    call {:si_unique_call 612} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i1.i32(out_$i73);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} out_$i72 := list_empty(out_$p71);
    call {:si_unique_call 610} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.39, out_$p69);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2754;

  SeqInstr_255:
    call {:si_unique_call 608} {:cexpr "modified"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_2753;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} out_$i68 := qh_completions(in_$p0, out_$p67);
    goto SeqInstr_254;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.39, out_$p66);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.0;
    out_cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 606} out_cmdloc_dummy_var_10 := $memcpy.i8(out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_$p64, out_$p65, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_10;
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i59, 6);
    call {:si_unique_call 605} {:cexpr "type"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, out_$p55, out_$p54);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} out_$p54 := qh_get(out_$p53);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2735;

  $bb15:
    assume out_$i51 == 1;
    goto corral_source_split_2734;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} out_vslice_dummy_var_87 := oxu_to_hcd(in_$p0);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p106, $0.ref);
    goto corral_source_split_2812;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2811;

  $bb23:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref(in_$p3, out_$p103, .str.17, out_$i48, in_$i25, out_$p105);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.40, out_$p102);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p100, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} out_$p100 := oxu_to_hcd(in_$p0);
    goto corral_source_split_2804;

  $bb22:
    assume out_$i99 == 1;
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_$i98 := ldv__builtin_expect(out_$i97, 0);
    call {:si_unique_call 618} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i64(out_$i96, 1);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i64(out_$i95);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.7, out_$p94);
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p93, 0);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, out_$p89, out_$i92);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i24(out_$i91, 2314);
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i24(out_$i90, $sub.i24(0, 262144));
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i24($M.6, out_$p89);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p87, .str.17);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p86, .str);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p85, .str.16);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p84, .str.2);
    goto corral_source_split_2781;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2780;

  $bb16:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb31_dummy:
    call {:si_unique_call 1} out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := scan_periodic_loop_$bb12(in_$p0, in_$p1, in_$p2, in_$p3, in_$i25, in_$p43, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure scan_periodic_loop_$bb12(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i25: i32, in_$p43: ref, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i82: i32, in_$i83: i32, in_$i107: i1, in_$i108: i32, in_$i109: i64, in_$i110: i64, in_$i111: i1, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i48: i32, in_$i49: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_87: ref) returns (out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i82: i32, out_$i83: i32, out_$i107: i1, out_$i108: i32, out_$i109: i64, out_$i110: i64, out_$i111: i1, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i48: i32, out_$i49: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_87: ref);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation scan_periodic_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i25: i32, in_$p30: ref, in_$i32: i64, in_$p34: ref, in_$i36: i64, in_$p40: ref, in_$p43: ref, in_$i47: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i82: i32, in_$i83: i32, in_$i107: i1, in_$i108: i32, in_$i109: i64, in_$i110: i64, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i48: i32, in_$i49: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_87: ref) returns (out_$i47: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i82: i32, out_$i83: i32, out_$i107: i1, out_$i108: i32, out_$i109: i64, out_$i110: i64, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i48: i32, out_$i49: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_87: ref)
{

  entry:
    out_$i47, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := in_$i47, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i82, in_$i83, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i48, in_$i49, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_vslice_dummy_var_87;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_2730;

  $bb28:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i119;
    goto $bb28_dummy;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, in_$p43);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 6);
    call {:si_unique_call 621} {:cexpr "type"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p115);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, in_$p40, out_$p117);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(out_$p114, $mul.ref(in_$i36, 4));
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, in_$p34);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p112, $mul.ref(in_$i32, 8));
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, in_$p30);
    goto corral_source_split_2815;

  $bb26:
    assume out_$i111 == 1;
    goto corral_source_split_2814;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i64(out_$i110, 0);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} out_$i110 := ldv__builtin_expect(out_$i109, 0);
    call {:si_unique_call 616} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i110);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i108);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i1.i32(out_$i107);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i82, 0);
    goto corral_source_split_2774;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i82, out_$i83 := out_$i49, out_$i48;
    goto $bb20;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$i82, out_$i83 := out_$i68, out_$i60;
    goto $bb20;

  SeqInstr_261:
    goto corral_source_split_2771;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} qh_put(out_$p81);
    goto SeqInstr_260;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.39, out_$p80);
    goto corral_source_split_2770;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2769;

  $bb18:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_258:
    goto corral_source_split_2767;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} intr_deschedule(in_$p0, out_$p79);
    goto SeqInstr_257;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.39, out_$p78);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2765;

  $bb17:
    assume out_$i77 == 1;
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} out_$i76 := ldv__builtin_expect(out_$i75, 0);
    call {:si_unique_call 612} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i1.i32(out_$i73);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} out_$i72 := list_empty(out_$p71);
    call {:si_unique_call 610} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.39, out_$p69);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2754;

  SeqInstr_255:
    call {:si_unique_call 608} {:cexpr "modified"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_2753;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} out_$i68 := qh_completions(in_$p0, out_$p67);
    goto SeqInstr_254;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.39, out_$p66);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.0;
    out_cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 606} out_cmdloc_dummy_var_10 := $memcpy.i8(out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_$p64, out_$p65, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_10;
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i59, 6);
    call {:si_unique_call 605} {:cexpr "type"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, out_$p55, out_$p54);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} out_$p54 := qh_get(out_$p53);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2735;

  $bb15:
    assume out_$i51 == 1;
    goto corral_source_split_2734;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} out_vslice_dummy_var_87 := oxu_to_hcd(in_$p0);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := scan_periodic_loop_$bb12(in_$p0, in_$p1, in_$p2, in_$p3, in_$i25, in_$p43, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i47, 0;
    goto $bb12;

  $bb31:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i83, out_$i82;
    assume false;
    return;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, 0);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i124 := $p2i.ref.i64(out_$p123);
    goto corral_source_split_2831;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, in_$p43);
    goto corral_source_split_2830;

  $bb27:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p106, $0.ref);
    goto corral_source_split_2812;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2811;

  $bb23:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref(in_$p3, out_$p103, .str.17, out_$i48, in_$i25, out_$p105);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.40, out_$p102);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p100, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} out_$p100 := oxu_to_hcd(in_$p0);
    goto corral_source_split_2804;

  $bb22:
    assume out_$i99 == 1;
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_$i98 := ldv__builtin_expect(out_$i97, 0);
    call {:si_unique_call 618} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i64(out_$i96, 1);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i64(out_$i95);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.7, out_$p94);
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p93, 0);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, out_$p89, out_$i92);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i24(out_$i91, 2314);
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i24(out_$i90, $sub.i24(0, 262144));
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i24($M.6, out_$p89);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p87, .str.17);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p86, .str);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p85, .str.16);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p84, .str.2);
    goto corral_source_split_2781;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2780;

  $bb16:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb28_dummy:
    call {:si_unique_call 1} out_$i47, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := scan_periodic_loop_$bb11(in_$p0, in_$p1, in_$p2, in_$p3, in_$i25, in_$p30, in_$i32, in_$p34, in_$i36, in_$p40, in_$p43, out_$i47, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure scan_periodic_loop_$bb11(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i25: i32, in_$p30: ref, in_$i32: i64, in_$p34: ref, in_$i36: i64, in_$p40: ref, in_$p43: ref, in_$i47: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i82: i32, in_$i83: i32, in_$i107: i1, in_$i108: i32, in_$i109: i64, in_$i110: i64, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i48: i32, in_$i49: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_87: ref) returns (out_$i47: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i82: i32, out_$i83: i32, out_$i107: i1, out_$i108: i32, out_$i109: i64, out_$i110: i64, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i48: i32, out_$i49: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_87: ref);
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.22, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation scan_periodic_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i6: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i29: i32, in_$i28: i32, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i82: i32, in_$i83: i32, in_$i107: i1, in_$i108: i32, in_$i109: i64, in_$i110: i64, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i48: i32, in_$i49: i32, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i142: i32, in_$i143: i32, in_$i140: i32, in_$i141: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_87: ref) returns (out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i29: i32, out_$i28: i32, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i82: i32, out_$i83: i32, out_$i107: i1, out_$i108: i32, out_$i109: i64, out_$i110: i64, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i48: i32, out_$i49: i32, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i142: i32, out_$i143: i32, out_$i140: i32, out_$i141: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_87: ref)
{

  entry:
    out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i28, out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i142, out_$i143, out_$i140, out_$i141, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := in_$i23, in_$i24, in_$i25, in_$i26, in_$i27, in_$i29, in_$i28, in_$p30, in_$p31, in_$i32, in_$p33, in_$p34, in_$p35, in_$i36, in_$p37, in_$p38, in_$p39, in_$p40, in_$i41, in_$i42, in_$p43, in_$p44, in_$i45, in_$i46, in_$i47, in_$i51, in_$p52, in_$p53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$p61, in_$p62, in_$p63, in_$p64, in_$p65, in_$p66, in_$p67, in_$i68, in_$p69, in_$p70, in_$p71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$p79, in_$p80, in_$p81, in_$p84, in_$p85, in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$i91, in_$i92, in_$p93, in_$p94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p102, in_$p103, in_$p104, in_$p105, in_$p106, in_$i82, in_$i83, in_$i107, in_$i108, in_$i109, in_$i110, in_$i111, in_$p112, in_$p113, in_$p114, in_$p115, in_$p116, in_$p117, in_$i118, in_$i119, in_$p120, in_$i121, in_$i122, in_$p123, in_$i124, in_$i125, in_$i48, in_$i49, in_$i126, in_$p127, in_$p128, in_$i129, in_$i130, in_$i131, in_$p132, in_$p133, in_$p134, in_$p135, in_$p136, in_$i137, in_$i138, in_$i139, in_$i142, in_$i143, in_$i140, in_$i141, in_cmdloc_dummy_var_8, in_cmdloc_dummy_var_9, in_cmdloc_dummy_var_10, in_vslice_dummy_var_87;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2699;

  corral_source_split_2862:
    assume {:verifier.code 0} true;
    out_$i23, out_$i24 := out_$i140, out_$i141;
    goto corral_source_split_2862_dummy;

  $bb44:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2862;

  corral_source_split_2846:
    assume {:verifier.code 0} true;
    out_$i143 := $urem.i32(out_$i142, in_$i6);
    call {:si_unique_call 624} {:cexpr "now_uframe"} boogie_si_record_i32(out_$i143);
    assume {:verifier.code 0} true;
    out_$i140, out_$i141 := out_$i143, out_$i24;
    goto $bb44;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i140, out_$i141 := out_$i28, out_$i138;
    goto $bb44;

  $bb42:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_2858:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42;

  corral_source_split_2857:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i28, out_$i138);
    goto corral_source_split_2858;

  corral_source_split_2856:
    assume {:verifier.code 0} true;
    out_$i138 := $urem.i32(out_$i137, in_$i6);
    call {:si_unique_call 627} {:cexpr "now"} boogie_si_record_i32(out_$i138);
    goto corral_source_split_2857;

  SeqInstr_264:
    call {:si_unique_call 626} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_2856;

  SeqInstr_263:
    assume assertsPassed;
    goto SeqInstr_264;

  corral_source_split_2855:
    assume {:verifier.code 0} true;
    call {:si_unique_call 625} out_$i137 := readl(out_$p136);
    goto SeqInstr_263;

  corral_source_split_2854:
    assume {:verifier.code 0} true;
    out_$p136 := $bitcast.ref.ref(out_$p135);
    goto corral_source_split_2855;

  corral_source_split_2853:
    assume {:verifier.code 0} true;
    out_$p135 := $add.ref($add.ref(out_$p134, $mul.ref(0, 68)), $mul.ref(12, 1));
    goto corral_source_split_2854;

  corral_source_split_2852:
    assume {:verifier.code 0} true;
    out_$p134 := $load.ref($M.0, out_$p133);
    goto corral_source_split_2853;

  corral_source_split_2851:
    assume {:verifier.code 0} true;
    out_$p133 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_2852;

  corral_source_split_2850:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p132, out_$i28);
    goto corral_source_split_2851;

  $bb40:
    assume {:verifier.code 0} true;
    out_$p132 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(432, 1));
    goto corral_source_split_2850;

  $bb38:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_2843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38;

  corral_source_split_2842:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 0);
    goto corral_source_split_2843;

  corral_source_split_2841:
    assume {:verifier.code 0} true;
    out_$i130 := $and.i32(out_$i129, 1);
    goto corral_source_split_2842;

  corral_source_split_2840:
    assume {:verifier.code 0} true;
    out_$i129 := $load.i32($M.41, out_$p128);
    goto corral_source_split_2841;

  corral_source_split_2839:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref(out_$p127, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_2840;

  corral_source_split_2838:
    assume {:verifier.code 0} true;
    call {:si_unique_call 622} out_$p127 := oxu_to_hcd(in_$p0);
    goto corral_source_split_2839;

  $bb35:
    assume out_$i126 == 1;
    goto corral_source_split_2838;

  corral_source_split_2836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35, $bb36;

  $bb34:
    assume {:verifier.code 0} true;
    out_$i126 := $eq.i32(out_$i28, out_$i24);
    goto corral_source_split_2836;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb34;

  $bb10:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_2834:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb32:
    assume !(out_$i125 == 1);
    goto corral_source_split_2834;

  corral_source_split_2832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_2831:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, 0);
    goto corral_source_split_2832;

  corral_source_split_2830:
    assume {:verifier.code 0} true;
    out_$i124 := $p2i.ref.i64(out_$p123);
    goto corral_source_split_2831;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p123 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2830;

  $bb27:
    assume !(out_$i111 == 1);
    assume {:verifier.code 0} true;
    goto $bb30;

  corral_source_split_2778:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_2777:
    assume {:verifier.code 0} true;
    out_$i111 := $ne.i64(out_$i110, 0);
    goto corral_source_split_2778;

  corral_source_split_2776:
    assume {:verifier.code 0} true;
    call {:si_unique_call 615} out_$i110 := ldv__builtin_expect(out_$i109, 0);
    call {:si_unique_call 616} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i110);
    goto corral_source_split_2777;

  corral_source_split_2775:
    assume {:verifier.code 0} true;
    out_$i109 := $sext.i32.i64(out_$i108);
    goto corral_source_split_2776;

  corral_source_split_2774:
    assume {:verifier.code 0} true;
    out_$i108 := $zext.i1.i32(out_$i107);
    goto corral_source_split_2775;

  corral_source_split_2773:
    assume {:verifier.code 0} true;
    out_$i107 := $ne.i32(out_$i82, 0);
    goto corral_source_split_2774;

  $bb20:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2773;

  $bb25:
    assume {:verifier.code 0} true;
    out_$i82, out_$i83 := out_$i49, out_$i48;
    goto $bb20;

  corral_source_split_2771:
    assume {:verifier.code 0} true;
    out_$i82, out_$i83 := out_$i68, out_$i60;
    goto $bb20;

  SeqInstr_261:
    goto corral_source_split_2771;

  SeqInstr_260:
    assume assertsPassed;
    goto SeqInstr_261;

  corral_source_split_2770:
    assume {:verifier.code 0} true;
    call {:si_unique_call 614} qh_put(out_$p81);
    goto SeqInstr_260;

  corral_source_split_2769:
    assume {:verifier.code 0} true;
    out_$p81 := $load.ref($M.39, out_$p80);
    goto corral_source_split_2770;

  $bb19:
    assume {:verifier.code 0} true;
    out_$p80 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2769;

  $bb18:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb19;

  corral_source_split_2767:
    assume {:verifier.code 0} true;
    goto $bb19;

  SeqInstr_258:
    goto corral_source_split_2767;

  SeqInstr_257:
    assume assertsPassed;
    goto SeqInstr_258;

  corral_source_split_2766:
    assume {:verifier.code 0} true;
    call {:si_unique_call 613} intr_deschedule(in_$p0, out_$p79);
    goto SeqInstr_257;

  corral_source_split_2765:
    assume {:verifier.code 0} true;
    out_$p79 := $load.ref($M.39, out_$p78);
    goto corral_source_split_2766;

  corral_source_split_2764:
    assume {:verifier.code 0} true;
    out_$p78 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2765;

  $bb17:
    assume out_$i77 == 1;
    goto corral_source_split_2764;

  corral_source_split_2762:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_2761:
    assume {:verifier.code 0} true;
    out_$i77 := $ne.i64(out_$i76, 0);
    goto corral_source_split_2762;

  corral_source_split_2760:
    assume {:verifier.code 0} true;
    call {:si_unique_call 611} out_$i76 := ldv__builtin_expect(out_$i75, 0);
    call {:si_unique_call 612} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i76);
    goto corral_source_split_2761;

  corral_source_split_2759:
    assume {:verifier.code 0} true;
    out_$i75 := $sext.i32.i64(out_$i74);
    goto corral_source_split_2760;

  corral_source_split_2758:
    assume {:verifier.code 0} true;
    out_$i74 := $zext.i1.i32(out_$i73);
    goto corral_source_split_2759;

  corral_source_split_2757:
    assume {:verifier.code 0} true;
    out_$i73 := $ne.i32(out_$i72, 0);
    goto corral_source_split_2758;

  corral_source_split_2756:
    assume {:verifier.code 0} true;
    call {:si_unique_call 609} out_$i72 := list_empty(out_$p71);
    call {:si_unique_call 610} {:cexpr "tmp___1"} boogie_si_record_i32(out_$i72);
    goto corral_source_split_2757;

  corral_source_split_2755:
    assume {:verifier.code 0} true;
    out_$p71 := $add.ref($add.ref(out_$p70, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_2756;

  corral_source_split_2754:
    assume {:verifier.code 0} true;
    out_$p70 := $load.ref($M.39, out_$p69);
    goto corral_source_split_2755;

  corral_source_split_2753:
    assume {:verifier.code 0} true;
    out_$p69 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2754;

  SeqInstr_255:
    call {:si_unique_call 608} {:cexpr "modified"} boogie_si_record_i32(out_$i68);
    goto corral_source_split_2753;

  SeqInstr_254:
    assume assertsPassed;
    goto SeqInstr_255;

  corral_source_split_2752:
    assume {:verifier.code 0} true;
    call {:si_unique_call 607} out_$i68 := qh_completions(in_$p0, out_$p67);
    goto SeqInstr_254;

  corral_source_split_2751:
    assume {:verifier.code 0} true;
    out_$p67 := $load.ref($M.39, out_$p66);
    goto corral_source_split_2752;

  corral_source_split_2750:
    assume {:verifier.code 0} true;
    out_$p66 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2751;

  corral_source_split_2749:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_8 := $M.0;
    out_cmdloc_dummy_var_9 := $M.0;
    call {:si_unique_call 606} out_cmdloc_dummy_var_10 := $memcpy.i8(out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_$p64, out_$p65, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_10;
    goto corral_source_split_2750;

  corral_source_split_2748:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p63);
    goto corral_source_split_2749;

  corral_source_split_2747:
    assume {:verifier.code 0} true;
    out_$p64 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2748;

  corral_source_split_2746:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p62, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_2747;

  corral_source_split_2745:
    assume {:verifier.code 0} true;
    out_$p62 := $load.ref($M.0, out_$p61);
    goto corral_source_split_2746;

  corral_source_split_2744:
    assume {:verifier.code 0} true;
    out_$p61 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2745;

  corral_source_split_2743:
    assume {:verifier.code 0} true;
    out_$i60 := $and.i32(out_$i59, 6);
    call {:si_unique_call 605} {:cexpr "type"} boogie_si_record_i32(out_$i60);
    goto corral_source_split_2744;

  corral_source_split_2742:
    assume {:verifier.code 0} true;
    out_$i59 := $load.i32($M.0, out_$p58);
    goto corral_source_split_2743;

  corral_source_split_2741:
    assume {:verifier.code 0} true;
    out_$p58 := $add.ref($add.ref(out_$p57, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_2742;

  corral_source_split_2740:
    assume {:verifier.code 0} true;
    out_$p57 := $load.ref($M.0, out_$p56);
    goto corral_source_split_2741;

  corral_source_split_2739:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2740;

  corral_source_split_2738:
    assume {:verifier.code 0} true;
    $M.39 := $store.ref($M.39, out_$p55, out_$p54);
    goto corral_source_split_2739;

  corral_source_split_2737:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(in_$p2);
    goto corral_source_split_2738;

  corral_source_split_2736:
    assume {:verifier.code 0} true;
    call {:si_unique_call 604} out_$p54 := qh_get(out_$p53);
    goto corral_source_split_2737;

  corral_source_split_2735:
    assume {:verifier.code 0} true;
    out_$p53 := $load.ref($M.0, out_$p52);
    goto corral_source_split_2736;

  corral_source_split_2734:
    assume {:verifier.code 0} true;
    out_$p52 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2735;

  $bb15:
    assume out_$i51 == 1;
    goto corral_source_split_2734;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i51 := $eq.i32(out_$i48, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb15, $bb16;

  $bb13:
    assume {:verifier.code 0} true;
    call {:si_unique_call 603} out_vslice_dummy_var_87 := oxu_to_hcd(in_$p0);
    assume {:verifier.code 0} true;
    goto $bb14;

  corral_source_split_2732:
    assume {:verifier.code 0} true;
    goto $bb13;

  $bb12:
    call out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := scan_periodic_loop_$bb12(in_$p0, in_$p1, in_$p2, in_$p3, out_$i25, out_$p43, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87);
    goto $bb12_last;

  $bb12_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_2732;

  corral_source_split_2730:
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i47, 0;
    goto $bb12;

  $bb31:
    assume out_$i125 == 1;
    assume {:verifier.code 0} true;
    out_$i48, out_$i49 := out_$i83, out_$i82;
    assume false;
    return;

  $bb11:
    call out_$i47, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := scan_periodic_loop_$bb11(in_$p0, in_$p1, in_$p2, in_$p3, out_$i25, out_$p30, out_$i32, out_$p34, out_$i36, out_$p40, out_$p43, out_$i47, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87);
    goto $bb11_last;

  $bb11_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_2730;

  corral_source_split_2728:
    assume {:verifier.code 0} true;
    out_$i47 := out_$i42;
    goto $bb11;

  $bb28:
    assume out_$i122 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i119;
    assume false;
    return;

  corral_source_split_2826:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_2825:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_2826;

  corral_source_split_2824:
    assume {:verifier.code 0} true;
    out_$i121 := $p2i.ref.i64(out_$p120);
    goto corral_source_split_2825;

  corral_source_split_2823:
    assume {:verifier.code 0} true;
    out_$p120 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2824;

  corral_source_split_2822:
    assume {:verifier.code 0} true;
    out_$i119 := $and.i32(out_$i118, 6);
    call {:si_unique_call 621} {:cexpr "type"} boogie_si_record_i32(out_$i119);
    goto corral_source_split_2823;

  corral_source_split_2821:
    assume {:verifier.code 0} true;
    out_$i118 := $load.i32($M.0, out_$p115);
    goto corral_source_split_2822;

  corral_source_split_2820:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, out_$p117);
    goto corral_source_split_2821;

  corral_source_split_2819:
    assume {:verifier.code 0} true;
    out_$p117 := $load.ref($M.0, out_$p116);
    goto corral_source_split_2820;

  corral_source_split_2818:
    assume {:verifier.code 0} true;
    out_$p116 := $bitcast.ref.ref(out_$p113);
    goto corral_source_split_2819;

  corral_source_split_2817:
    assume {:verifier.code 0} true;
    out_$p115 := $add.ref(out_$p114, $mul.ref(out_$i36, 4));
    goto corral_source_split_2818;

  corral_source_split_2816:
    assume {:verifier.code 0} true;
    out_$p114 := $load.ref($M.0, out_$p34);
    goto corral_source_split_2817;

  corral_source_split_2815:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref(out_$p112, $mul.ref(out_$i32, 8));
    goto corral_source_split_2816;

  corral_source_split_2814:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p30);
    goto corral_source_split_2815;

  $bb26:
    assume out_$i111 == 1;
    goto corral_source_split_2814;

  $bb8:
    assume out_$i46 == 1;
    goto corral_source_split_2728;

  corral_source_split_2726:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb8, $bb9;

  corral_source_split_2725:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i45, 0);
    goto corral_source_split_2726;

  corral_source_split_2724:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p44);
    goto corral_source_split_2725;

  corral_source_split_2723:
    assume {:verifier.code 0} true;
    out_$p44 := $load.ref($M.0, out_$p43);
    goto corral_source_split_2724;

  corral_source_split_2722:
    assume {:verifier.code 0} true;
    out_$p43 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2723;

  corral_source_split_2721:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i41, 6);
    call {:si_unique_call 602} {:cexpr "type"} boogie_si_record_i32(out_$i42);
    goto corral_source_split_2722;

  corral_source_split_2720:
    assume {:verifier.code 0} true;
    out_$i41 := $load.i32($M.0, out_$p37);
    goto corral_source_split_2721;

  corral_source_split_2719:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p40, out_$p39);
    goto corral_source_split_2720;

  corral_source_split_2718:
    assume {:verifier.code 0} true;
    out_$p40 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2719;

  corral_source_split_2717:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_2718;

  corral_source_split_2716:
    assume {:verifier.code 0} true;
    out_$p38 := $bitcast.ref.ref(out_$p33);
    goto corral_source_split_2717;

  corral_source_split_2715:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p35, $mul.ref(out_$i36, 4));
    goto corral_source_split_2716;

  corral_source_split_2714:
    assume {:verifier.code 0} true;
    out_$i36 := $zext.i32.i64(out_$i25);
    goto corral_source_split_2715;

  corral_source_split_2713:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, out_$p34);
    goto corral_source_split_2714;

  corral_source_split_2712:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_2713;

  corral_source_split_2711:
    assume {:verifier.code 0} true;
    out_$p33 := $add.ref(out_$p31, $mul.ref(out_$i32, 8));
    goto corral_source_split_2712;

  corral_source_split_2710:
    assume {:verifier.code 0} true;
    out_$i32 := $zext.i32.i64(out_$i25);
    goto corral_source_split_2711;

  corral_source_split_2709:
    assume {:verifier.code 0} true;
    out_$p31 := $load.ref($M.0, out_$p30);
    goto corral_source_split_2710;

  corral_source_split_2708:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_2709;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_2708;

  corral_source_split_2706:
    assume {:verifier.code 0} true;
    out_$i29 := $or.i32(out_$i23, 7);
    call {:si_unique_call 601} {:cexpr "now_uframe"} boogie_si_record_i32(out_$i29);
    assume {:verifier.code 0} true;
    out_$i28 := out_$i29;
    goto $bb7;

  corral_source_split_2704:
    assume {:verifier.code 0} true;
    out_$i28 := out_$i23;
    goto $bb7;

  $bb5:
    assume out_$i27 == 1;
    goto corral_source_split_2704;

  corral_source_split_2702:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  corral_source_split_2701:
    assume {:verifier.code 0} true;
    out_$i27 := $eq.i32(out_$i26, out_$i25);
    goto corral_source_split_2702;

  corral_source_split_2700:
    assume {:verifier.code 0} true;
    out_$i26 := $lshr.i32(out_$i24, 3);
    goto corral_source_split_2701;

  corral_source_split_2699:
    assume {:verifier.code 0} true;
    out_$i25 := $lshr.i32(out_$i23, 3);
    call {:si_unique_call 600} {:cexpr "frame"} boogie_si_record_i32(out_$i25);
    goto corral_source_split_2700;

  $bb6:
    assume !(out_$i27 == 1);
    goto corral_source_split_2706;

  corral_source_split_2812:
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_2811:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p106, $0.ref);
    goto corral_source_split_2812;

  $bb24:
    assume {:verifier.code 0} true;
    out_$p106 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2811;

  $bb23:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2809:
    assume {:verifier.code 0} true;
    goto $bb24;

  corral_source_split_2808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 620} __dynamic_dev_dbg.ref.ref.ref.i32.i32.ref(in_$p3, out_$p103, .str.17, out_$i48, out_$i25, out_$p105);
    goto corral_source_split_2809;

  corral_source_split_2807:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_2808;

  corral_source_split_2806:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_2807;

  corral_source_split_2805:
    assume {:verifier.code 0} true;
    out_$p103 := $load.ref($M.40, out_$p102);
    goto corral_source_split_2806;

  corral_source_split_2804:
    assume {:verifier.code 0} true;
    out_$p102 := $add.ref($add.ref($add.ref(out_$p100, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_2805;

  corral_source_split_2803:
    assume {:verifier.code 0} true;
    call {:si_unique_call 619} out_$p100 := oxu_to_hcd(in_$p0);
    goto corral_source_split_2804;

  $bb22:
    assume out_$i99 == 1;
    goto corral_source_split_2803;

  corral_source_split_2801:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb22, $bb23;

  corral_source_split_2800:
    assume {:verifier.code 0} true;
    out_$i99 := $ne.i64(out_$i98, 0);
    goto corral_source_split_2801;

  corral_source_split_2799:
    assume {:verifier.code 0} true;
    call {:si_unique_call 617} out_$i98 := ldv__builtin_expect(out_$i97, 0);
    call {:si_unique_call 618} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i98);
    goto corral_source_split_2800;

  corral_source_split_2798:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i64(out_$i96, 1);
    goto corral_source_split_2799;

  corral_source_split_2797:
    assume {:verifier.code 0} true;
    out_$i96 := $zext.i8.i64(out_$i95);
    goto corral_source_split_2798;

  corral_source_split_2796:
    assume {:verifier.code 0} true;
    out_$i95 := $load.i8($M.7, out_$p94);
    goto corral_source_split_2797;

  corral_source_split_2795:
    assume {:verifier.code 0} true;
    out_$p94 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2796;

  corral_source_split_2794:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p93, 0);
    goto corral_source_split_2795;

  corral_source_split_2793:
    assume {:verifier.code 0} true;
    out_$p93 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_2794;

  corral_source_split_2792:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, out_$p89, out_$i92);
    goto corral_source_split_2793;

  corral_source_split_2791:
    assume {:verifier.code 0} true;
    out_$i92 := $or.i24(out_$i91, 2314);
    goto corral_source_split_2792;

  corral_source_split_2790:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i24(out_$i90, $sub.i24(0, 262144));
    goto corral_source_split_2791;

  corral_source_split_2789:
    assume {:verifier.code 0} true;
    out_$i90 := $load.i24($M.6, out_$p89);
    goto corral_source_split_2790;

  corral_source_split_2788:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_2789;

  corral_source_split_2787:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_2788;

  corral_source_split_2786:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p87, .str.17);
    goto corral_source_split_2787;

  corral_source_split_2785:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_2786;

  corral_source_split_2784:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p86, .str);
    goto corral_source_split_2785;

  corral_source_split_2783:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_2784;

  corral_source_split_2782:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p85, .str.16);
    goto corral_source_split_2783;

  corral_source_split_2781:
    assume {:verifier.code 0} true;
    out_$p85 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_2782;

  corral_source_split_2780:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p84, .str.2);
    goto corral_source_split_2781;

  $bb21:
    assume {:verifier.code 0} true;
    out_$p84 := $add.ref($add.ref(in_$p3, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_2780;

  $bb16:
    assume !(out_$i51 == 1);
    assume {:verifier.code 0} true;
    goto $bb21;

  $bb9:
    assume {:verifier.code 0} true;
    assume !(out_$i46 == 1);
    goto $bb10;

  corral_source_split_2828:
    assume {:verifier.code 0} true;
    goto $bb10;

  $bb29:
    assume !(out_$i122 == 1);
    goto corral_source_split_2828;

  corral_source_split_2845:
    assume {:verifier.code 0} true;
    out_$i142 := $add.i32(out_$i28, 1);
    call {:si_unique_call 623} {:cexpr "now_uframe"} boogie_si_record_i32(out_$i142);
    goto corral_source_split_2846;

  $bb36:
    assume !(out_$i126 == 1);
    goto corral_source_split_2845;

  corral_source_split_2862_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i28, out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i142, out_$i143, out_$i140, out_$i141, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87 := scan_periodic_loop_$bb4(in_$p0, in_$p1, in_$p2, in_$p3, in_$i6, out_$i23, out_$i24, out_$i25, out_$i26, out_$i27, out_$i29, out_$i28, out_$p30, out_$p31, out_$i32, out_$p33, out_$p34, out_$p35, out_$i36, out_$p37, out_$p38, out_$p39, out_$p40, out_$i41, out_$i42, out_$p43, out_$p44, out_$i45, out_$i46, out_$i47, out_$i51, out_$p52, out_$p53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$p61, out_$p62, out_$p63, out_$p64, out_$p65, out_$p66, out_$p67, out_$i68, out_$p69, out_$p70, out_$p71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$p80, out_$p81, out_$p84, out_$p85, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$i91, out_$i92, out_$p93, out_$p94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p102, out_$p103, out_$p104, out_$p105, out_$p106, out_$i82, out_$i83, out_$i107, out_$i108, out_$i109, out_$i110, out_$i111, out_$p112, out_$p113, out_$p114, out_$p115, out_$p116, out_$p117, out_$i118, out_$i119, out_$p120, out_$i121, out_$i122, out_$p123, out_$i124, out_$i125, out_$i48, out_$i49, out_$i126, out_$p127, out_$p128, out_$i129, out_$i130, out_$i131, out_$p132, out_$p133, out_$p134, out_$p135, out_$p136, out_$i137, out_$i138, out_$i139, out_$i142, out_$i143, out_$i140, out_$i141, out_cmdloc_dummy_var_8, out_cmdloc_dummy_var_9, out_cmdloc_dummy_var_10, out_vslice_dummy_var_87);
    return;

  exit:
    return;
}



procedure scan_periodic_loop_$bb4(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$i6: i32, in_$i23: i32, in_$i24: i32, in_$i25: i32, in_$i26: i32, in_$i27: i1, in_$i29: i32, in_$i28: i32, in_$p30: ref, in_$p31: ref, in_$i32: i64, in_$p33: ref, in_$p34: ref, in_$p35: ref, in_$i36: i64, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$p40: ref, in_$i41: i32, in_$i42: i32, in_$p43: ref, in_$p44: ref, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$i51: i1, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i32, in_$i60: i32, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$i68: i32, in_$p69: ref, in_$p70: ref, in_$p71: ref, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i64, in_$i76: i64, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$p80: ref, in_$p81: ref, in_$p84: ref, in_$p85: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i24, in_$i91: i24, in_$i92: i24, in_$p93: ref, in_$p94: ref, in_$i95: i8, in_$i96: i64, in_$i97: i64, in_$i98: i64, in_$i99: i1, in_$p100: ref, in_$p102: ref, in_$p103: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$i82: i32, in_$i83: i32, in_$i107: i1, in_$i108: i32, in_$i109: i64, in_$i110: i64, in_$i111: i1, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$p116: ref, in_$p117: ref, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$i124: i64, in_$i125: i1, in_$i48: i32, in_$i49: i32, in_$i126: i1, in_$p127: ref, in_$p128: ref, in_$i129: i32, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$p133: ref, in_$p134: ref, in_$p135: ref, in_$p136: ref, in_$i137: i32, in_$i138: i32, in_$i139: i1, in_$i142: i32, in_$i143: i32, in_$i140: i32, in_$i141: i32, in_cmdloc_dummy_var_8: [ref]i8, in_cmdloc_dummy_var_9: [ref]i8, in_cmdloc_dummy_var_10: [ref]i8, in_vslice_dummy_var_87: ref) returns (out_$i23: i32, out_$i24: i32, out_$i25: i32, out_$i26: i32, out_$i27: i1, out_$i29: i32, out_$i28: i32, out_$p30: ref, out_$p31: ref, out_$i32: i64, out_$p33: ref, out_$p34: ref, out_$p35: ref, out_$i36: i64, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$p40: ref, out_$i41: i32, out_$i42: i32, out_$p43: ref, out_$p44: ref, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$i51: i1, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i32, out_$i60: i32, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$i68: i32, out_$p69: ref, out_$p70: ref, out_$p71: ref, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i64, out_$i76: i64, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$p80: ref, out_$p81: ref, out_$p84: ref, out_$p85: ref, out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i24, out_$i91: i24, out_$i92: i24, out_$p93: ref, out_$p94: ref, out_$i95: i8, out_$i96: i64, out_$i97: i64, out_$i98: i64, out_$i99: i1, out_$p100: ref, out_$p102: ref, out_$p103: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$i82: i32, out_$i83: i32, out_$i107: i1, out_$i108: i32, out_$i109: i64, out_$i110: i64, out_$i111: i1, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$p116: ref, out_$p117: ref, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$i124: i64, out_$i125: i1, out_$i48: i32, out_$i49: i32, out_$i126: i1, out_$p127: ref, out_$p128: ref, out_$i129: i32, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$p133: ref, out_$p134: ref, out_$p135: ref, out_$p136: ref, out_$i137: i32, out_$i138: i32, out_$i139: i1, out_$i142: i32, out_$i143: i32, out_$i140: i32, out_$i141: i32, out_cmdloc_dummy_var_8: [ref]i8, out_cmdloc_dummy_var_9: [ref]i8, out_cmdloc_dummy_var_10: [ref]i8, out_vslice_dummy_var_87: ref);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation qh_completions_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i13: i8, in_$i24: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$i48: i64, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i71: i32, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i64, in_$i79: i64, in_$i80: i1, in_$i81: i32, in_$i82: i32, in_$p83: ref, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i93: i32, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i32, in_$i115: i64, in_$i116: i64, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i64, in_$i128: i64, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i64, in_$i136: i64, in_$i137: i1, in_$i141: i1, in_$i142: i32, in_$i143: i64, in_$i144: i64, in_$i145: i1, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i64, in_$i153: i32, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i104: i32, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$p167: ref, in_$i168: i32, in_$i105: i32, in_$i106: i32, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$i178: i64, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$p186: ref, in_$i187: i64, in_$i188: i1, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i202: i1, in_$i198: i1, in_$i203: i32, in_$i204: i1, in_$p206: ref, in_$p207: ref, in_$i208: i64, in_$p209: ref, in_$i210: i64, in_$i211: i1, in_$p213: ref, in_$p214: ref, in_$p215: ref, in_$p217: ref, in_$i218: i32, in_$p219: ref, in_$p220: ref, in_$i138: i32, in_$i139: i32, in_$p140: ref, in_$p221: ref, in_$p222: ref, in_$i223: i64, in_$i224: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i225: i32, in_$i226: i32, in_$p227: ref, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8) returns (out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$i48: i64, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i71: i32, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i64, out_$i79: i64, out_$i80: i1, out_$i81: i32, out_$i82: i32, out_$p83: ref, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i93: i32, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i32, out_$i115: i64, out_$i116: i64, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i64, out_$i128: i64, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i64, out_$i136: i64, out_$i137: i1, out_$i141: i1, out_$i142: i32, out_$i143: i64, out_$i144: i64, out_$i145: i1, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i64, out_$i153: i32, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i104: i32, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$p167: ref, out_$i168: i32, out_$i105: i32, out_$i106: i32, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$i178: i64, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$p186: ref, out_$i187: i64, out_$i188: i1, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i202: i1, out_$i198: i1, out_$i203: i32, out_$i204: i1, out_$p206: ref, out_$p207: ref, out_$i208: i64, out_$p209: ref, out_$i210: i64, out_$i211: i1, out_$p213: ref, out_$p214: ref, out_$p215: ref, out_$p217: ref, out_$i218: i32, out_$p219: ref, out_$p220: ref, out_$i138: i32, out_$i139: i32, out_$p140: ref, out_$p221: ref, out_$p222: ref, out_$i223: i64, out_$i224: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i225: i32, out_$i226: i32, out_$p227: ref, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8)
{

  entry:
    out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i71, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i93, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i104, out_$p164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i105, out_$i106, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$p179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p185, out_$p186, out_$i187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i198, out_$i203, out_$i204, out_$p206, out_$p207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p213, out_$p214, out_$p215, out_$p217, out_$i218, out_$p219, out_$p220, out_$i138, out_$i139, out_$p140, out_$p221, out_$p222, out_$i223, out_$i224, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i225, out_$i226, out_$p227, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13 := in_$p36, in_$p37, in_$p38, in_$p39, in_$i40, in_$i41, in_$p42, in_$p43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p53, in_$p54, in_$i55, in_$i56, in_$p57, in_$p58, in_$p59, in_$p60, in_$p61, in_$p62, in_$p63, in_$i64, in_$i65, in_$i66, in_$p67, in_$p68, in_$i69, in_$i70, in_$p72, in_$p73, in_$i74, in_$i71, in_$i75, in_$i76, in_$p77, in_$i78, in_$i79, in_$i80, in_$i81, in_$i82, in_$p83, in_$p87, in_$i88, in_$i89, in_$i90, in_$i91, in_$i92, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i93, in_$i107, in_$p108, in_$p109, in_$i110, in_$i111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$p120, in_$p121, in_$p122, in_$i123, in_$i124, in_$i125, in_$i126, in_$i127, in_$i128, in_$i129, in_$p130, in_$p131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i147, in_$i148, in_$i149, in_$i150, in_$p151, in_$i152, in_$i153, in_$p154, in_$i155, in_$i156, in_$p157, in_$i158, in_$i159, in_$p160, in_$i161, in_$i162, in_$i163, in_$i104, in_$p164, in_$i165, in_$i166, in_$p167, in_$i168, in_$i105, in_$i106, in_$p169, in_$p170, in_$i171, in_$i172, in_$p173, in_$p174, in_$p175, in_$p176, in_$p177, in_$i178, in_$p179, in_$p180, in_$p181, in_$i182, in_$i183, in_$i184, in_$p185, in_$p186, in_$i187, in_$i188, in_$p189, in_$p190, in_$p191, in_$p192, in_$p193, in_$i194, in_$p195, in_$i196, in_$i197, in_$p199, in_$i200, in_$i201, in_$i202, in_$i198, in_$i203, in_$i204, in_$p206, in_$p207, in_$i208, in_$p209, in_$i210, in_$i211, in_$p213, in_$p214, in_$p215, in_$p217, in_$i218, in_$p219, in_$p220, in_$i138, in_$i139, in_$p140, in_$p221, in_$p222, in_$i223, in_$i224, in_$p30, in_$p31, in_$p32, in_$i33, in_$i34, in_$i35, in_$i225, in_$i226, in_$p227, in_cmdloc_dummy_var_11, in_cmdloc_dummy_var_12, in_cmdloc_dummy_var_13;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3083;

  $bb90:
    assume out_$i224 == 1;
    assume {:verifier.code 0} true;
    out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35 := out_$p140, out_$p32, out_$p222, out_$i139, out_$i76, out_$i138;
    goto $bb90_dummy;

  corral_source_split_3253:
    assume {:verifier.code 0} true;
    out_$i225, out_$i226, out_$p227 := out_$i76, out_$i139, out_$p140;
    assume true;
    goto $bb90;

  corral_source_split_3252:
    assume {:verifier.code 0} true;
    out_$i224 := $ne.i64(in_$i24, out_$i223);
    goto corral_source_split_3253;

  corral_source_split_3251:
    assume {:verifier.code 0} true;
    out_$i223 := $p2i.ref.i64(out_$p32);
    goto corral_source_split_3252;

  corral_source_split_3250:
    assume {:verifier.code 0} true;
    out_$p222 := $load.ref($M.0, out_$p221);
    goto corral_source_split_3251;

  corral_source_split_3249:
    assume {:verifier.code 0} true;
    out_$p221 := $add.ref($add.ref(out_$p32, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_3250;

  $bb54:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3249;

  corral_source_split_3356:
    assume {:verifier.code 0} true;
    out_$i138, out_$i139, out_$p140 := out_$i203, out_$i105, out_$p37;
    goto $bb54;

  corral_source_split_3266:
    assume {:verifier.code 0} true;
    out_$i138, out_$i139, out_$p140 := 0, 1, out_$p77;
    goto $bb54;

  corral_source_split_3247:
    assume {:verifier.code 0} true;
    out_$i138, out_$i139, out_$p140 := out_$i35, 1, out_$p77;
    goto $bb54;

  $bb52:
    assume out_$i137 == 1;
    goto corral_source_split_3247;

  corral_source_split_3245:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_3244:
    assume {:verifier.code 0} true;
    out_$i137 := $ne.i64(out_$i136, 0);
    goto corral_source_split_3245;

  corral_source_split_3243:
    assume {:verifier.code 0} true;
    call {:si_unique_call 683} out_$i136 := ldv__builtin_expect(out_$i135, 1);
    call {:si_unique_call 684} {:cexpr "tmp___5"} boogie_si_record_i64(out_$i136);
    goto corral_source_split_3244;

  corral_source_split_3242:
    assume {:verifier.code 0} true;
    out_$i135 := $sext.i32.i64(out_$i134);
    goto corral_source_split_3243;

  corral_source_split_3241:
    assume {:verifier.code 0} true;
    out_$i134 := $zext.i1.i32(out_$i133);
    goto corral_source_split_3242;

  corral_source_split_3240:
    assume {:verifier.code 0} true;
    out_$i133 := $eq.i32(out_$i132, $sub.i32(0, 115));
    goto corral_source_split_3241;

  corral_source_split_3239:
    assume {:verifier.code 0} true;
    out_$i132 := $load.i32($M.0, out_$p131);
    goto corral_source_split_3240;

  $bb51:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3239;

  $bb50:
    assume !(out_$i129 == 1);
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_3237:
    assume {:verifier.code 0} true;
    goto $bb51;

  corral_source_split_3236:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p130, $sub.i32(0, 108));
    goto corral_source_split_3237;

  corral_source_split_3235:
    assume {:verifier.code 0} true;
    out_$p130 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3236;

  $bb49:
    assume out_$i129 == 1;
    goto corral_source_split_3235;

  corral_source_split_3233:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_3232:
    assume {:verifier.code 0} true;
    out_$i129 := $ne.i64(out_$i128, 0);
    goto corral_source_split_3233;

  corral_source_split_3231:
    assume {:verifier.code 0} true;
    call {:si_unique_call 681} out_$i128 := ldv__builtin_expect(out_$i127, 0);
    call {:si_unique_call 682} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i128);
    goto corral_source_split_3232;

  corral_source_split_3230:
    assume {:verifier.code 0} true;
    out_$i127 := $sext.i32.i64(out_$i126);
    goto corral_source_split_3231;

  corral_source_split_3229:
    assume {:verifier.code 0} true;
    out_$i126 := $zext.i1.i32(out_$i125);
    goto corral_source_split_3230;

  corral_source_split_3228:
    assume {:verifier.code 0} true;
    out_$i125 := $eq.i32(out_$i124, 0);
    goto corral_source_split_3229;

  corral_source_split_3227:
    assume {:verifier.code 0} true;
    out_$i124 := $and.i32(out_$i123, 1);
    goto corral_source_split_3228;

  corral_source_split_3226:
    assume {:verifier.code 0} true;
    out_$i123 := $load.i32($M.44, out_$p122);
    goto corral_source_split_3227;

  corral_source_split_3225:
    assume {:verifier.code 0} true;
    out_$p122 := $add.ref($add.ref(out_$p121, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_3226;

  corral_source_split_3224:
    assume {:verifier.code 0} true;
    call {:si_unique_call 680} out_$p121 := oxu_to_hcd(in_$p0);
    goto corral_source_split_3225;

  $bb48:
    assume !(out_$i117 == 1);
    goto corral_source_split_3224;

  corral_source_split_3220:
    assume {:verifier.code 0} true;
    out_$i118, out_$i119, out_$p120 := out_$i33, out_$i76, out_$p77;
    assume true;
    goto $bb48;

  corral_source_split_3219:
    assume {:verifier.code 0} true;
    out_$i117 := $ne.i64(out_$i116, 0);
    goto corral_source_split_3220;

  corral_source_split_3218:
    assume {:verifier.code 0} true;
    call {:si_unique_call 678} out_$i116 := ldv__builtin_expect(out_$i115, 1);
    call {:si_unique_call 679} {:cexpr "tmp___9"} boogie_si_record_i64(out_$i116);
    goto corral_source_split_3219;

  corral_source_split_3217:
    assume {:verifier.code 0} true;
    out_$i115 := $sext.i32.i64(out_$i114);
    goto corral_source_split_3218;

  $bb46:
    assume {:verifier.code 0} true;
    goto corral_source_split_3217;

  $bb42:
    assume !(out_$i107 == 1);
    assume {:verifier.code 0} true;
    out_$i114 := 0;
    goto $bb46;

  corral_source_split_3215:
    assume {:verifier.code 0} true;
    out_$i114 := out_$i113;
    goto $bb46;

  $bb45:
    assume {:verifier.code 0} true;
    goto corral_source_split_3215;

  $bb44:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    out_$i113 := 0;
    goto $bb45;

  corral_source_split_3213:
    assume {:verifier.code 0} true;
    out_$i113 := 1;
    goto $bb45;

  $bb43:
    assume out_$i112 == 1;
    goto corral_source_split_3213;

  corral_source_split_3211:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_3210:
    assume {:verifier.code 0} true;
    out_$i112 := $ne.i32(out_$i111, 0);
    goto corral_source_split_3211;

  corral_source_split_3209:
    assume {:verifier.code 0} true;
    out_$i111 := $and.i32(out_$i110, 1);
    goto corral_source_split_3210;

  corral_source_split_3208:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.43, out_$p109);
    goto corral_source_split_3209;

  corral_source_split_3207:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p108, $mul.ref(0, 968)), $mul.ref(960, 1));
    goto corral_source_split_3208;

  corral_source_split_3206:
    assume {:verifier.code 0} true;
    call {:si_unique_call 677} out_$p108 := oxu_to_hcd(in_$p0);
    goto corral_source_split_3207;

  $bb41:
    assume out_$i107 == 1;
    goto corral_source_split_3206;

  corral_source_split_3169:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb41, $bb42;

  corral_source_split_3168:
    assume {:verifier.code 0} true;
    out_$i107 := $eq.i32(out_$i33, 0);
    goto corral_source_split_3169;

  $bb27:
    assume !(out_$i90 == 1);
    goto corral_source_split_3168;

  corral_source_split_3162:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26, $bb27;

  corral_source_split_3161:
    assume {:verifier.code 0} true;
    out_$i90 := $eq.i32(out_$i89, 0);
    goto corral_source_split_3162;

  corral_source_split_3160:
    assume {:verifier.code 0} true;
    out_$i89 := $and.i32(out_$i88, 128);
    goto corral_source_split_3161;

  corral_source_split_3159:
    assume {:verifier.code 0} true;
    out_$i88 := $load.i32($M.0, out_$p87);
    call {:si_unique_call 675} {:cexpr "token"} boogie_si_record_i32(out_$i88);
    goto corral_source_split_3160;

  corral_source_split_3158:
    assume {:verifier.code 0} true;
    out_$p87 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(8, 1));
    goto corral_source_split_3159;

  $bb25:
    call {:si_unique_call 674} devirtbounce.6(0);
    goto corral_source_split_3158;

  $bb23:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    goto $bb25;

  corral_source_split_3146:
    assume {:verifier.code 0} true;
    out_$i81, out_$i82, out_$p83 := out_$i33, out_$i76, out_$p77;
    assume true;
    goto $bb23;

  corral_source_split_3145:
    assume {:verifier.code 0} true;
    out_$i80 := $eq.i64(out_$i78, out_$i79);
    goto corral_source_split_3146;

  corral_source_split_3144:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(in_$p3);
    goto corral_source_split_3145;

  corral_source_split_3143:
    assume {:verifier.code 0} true;
    out_$i78 := $p2i.ref.i64(out_$p37);
    goto corral_source_split_3144;

  $bb21:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3143;

  $bb11:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    out_$i76, out_$p77 := out_$i34, out_$p30;
    goto $bb21;

  corral_source_split_3141:
    assume {:verifier.code 0} true;
    out_$i76, out_$p77 := out_$i75, $0.ref;
    goto $bb21;

  corral_source_split_3140:
    assume {:verifier.code 0} true;
    call {:si_unique_call 671} oxu_qtd_free(in_$p0, out_$p30);
    goto corral_source_split_3141;

  $bb20:
    assume {:verifier.code 0} true;
    goto corral_source_split_3140;

  $bb13:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    out_$i75 := out_$i34;
    goto $bb20;

  corral_source_split_3138:
    assume {:verifier.code 0} true;
    out_$i75 := out_$i71;
    goto $bb20;

  $bb19:
    assume {:verifier.code 0} true;
    goto corral_source_split_3138;

  corral_source_split_3127:
    assume {:verifier.code 0} true;
    out_$i74 := $add.i32(out_$i34, 1);
    call {:si_unique_call 667} {:cexpr "count"} boogie_si_record_i32(out_$i74);
    assume {:verifier.code 0} true;
    out_$i71 := out_$i74;
    goto $bb19;

  corral_source_split_3136:
    assume {:verifier.code 0} true;
    out_$i71 := out_$i70;
    goto $bb19;

  corral_source_split_3135:
    assume {:verifier.code 0} true;
    call {:si_unique_call 670} oxu_murb_free(in_$p0, out_$p59);
    goto corral_source_split_3136;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_3135;

  $bb17:
    assume !(out_$i66 == 1);
    assume {:verifier.code 0} true;
    out_$i70 := out_$i34;
    goto $bb18;

  corral_source_split_3133:
    assume {:verifier.code 0} true;
    out_$i70 := out_$i69;
    goto $bb18;

  corral_source_split_3132:
    assume {:verifier.code 0} true;
    out_$i69 := $add.i32(out_$i34, 1);
    call {:si_unique_call 669} {:cexpr "count"} boogie_si_record_i32(out_$i69);
    goto corral_source_split_3133;

  SeqInstr_270:
    goto corral_source_split_3132;

  SeqInstr_269:
    assume assertsPassed;
    goto SeqInstr_270;

  corral_source_split_3131:
    assume {:verifier.code 0} true;
    call {:si_unique_call 668} ehci_urb_done(in_$p0, out_$p68);
    goto SeqInstr_269;

  corral_source_split_3130:
    assume {:verifier.code 0} true;
    out_$p68 := $load.ref($M.0, out_$p67);
    goto corral_source_split_3131;

  corral_source_split_3129:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3130;

  $bb16:
    assume out_$i66 == 1;
    goto corral_source_split_3129;

  corral_source_split_3122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_3121:
    assume {:verifier.code 0} true;
    out_$i66 := $ne.i32(out_$i65, 0);
    goto corral_source_split_3122;

  corral_source_split_3120:
    assume {:verifier.code 0} true;
    out_$i65 := $zext.i8.i32(out_$i64);
    goto corral_source_split_3121;

  corral_source_split_3119:
    assume {:verifier.code 0} true;
    out_$i64 := $load.i8($M.0, out_$p63);
    goto corral_source_split_3120;

  corral_source_split_3118:
    assume {:verifier.code 0} true;
    out_$p63 := $add.ref($add.ref(out_$p59, $mul.ref(0, 208)), $mul.ref(200, 1));
    goto corral_source_split_3119;

  corral_source_split_3117:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p62, out_$p61);
    goto corral_source_split_3118;

  corral_source_split_3116:
    assume {:verifier.code 0} true;
    out_$p62 := $add.ref($add.ref(out_$p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3117;

  corral_source_split_3115:
    assume {:verifier.code 0} true;
    out_$p61 := $load.ref($M.0, out_$p60);
    goto corral_source_split_3116;

  corral_source_split_3114:
    assume {:verifier.code 0} true;
    out_$p60 := $add.ref($add.ref(out_$p59, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_3115;

  corral_source_split_3113:
    assume {:verifier.code 0} true;
    out_$p59 := $bitcast.ref.ref(out_$p58);
    goto corral_source_split_3114;

  corral_source_split_3112:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_3113;

  corral_source_split_3111:
    assume {:verifier.code 0} true;
    out_$p57 := $add.ref($add.ref(out_$p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3112;

  $bb14:
    assume out_$i56 == 1;
    goto corral_source_split_3111;

  corral_source_split_3109:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  corral_source_split_3108:
    assume {:verifier.code 0} true;
    out_$i56 := $eq.i64(out_$i55, 0);
    goto corral_source_split_3109;

  corral_source_split_3107:
    assume {:verifier.code 0} true;
    out_$i55 := $p2i.ref.i64(out_$p54);
    goto corral_source_split_3108;

  corral_source_split_3106:
    assume {:verifier.code 0} true;
    out_$p54 := $load.ref($M.0, out_$p53);
    goto corral_source_split_3107;

  corral_source_split_3105:
    assume {:verifier.code 0} true;
    out_$p53 := $add.ref($add.ref(out_$p52, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3106;

  corral_source_split_3104:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_3105;

  corral_source_split_3103:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(out_$p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3104;

  $bb12:
    assume out_$i50 == 1;
    goto corral_source_split_3103;

  corral_source_split_3101:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_3100:
    assume {:verifier.code 0} true;
    out_$i50 := $ne.i64(out_$i49, 0);
    goto corral_source_split_3101;

  corral_source_split_3099:
    assume {:verifier.code 0} true;
    call {:si_unique_call 664} out_$i49 := ldv__builtin_expect(out_$i48, 1);
    call {:si_unique_call 665} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i49);
    goto corral_source_split_3100;

  corral_source_split_3098:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i47);
    goto corral_source_split_3099;

  corral_source_split_3097:
    assume {:verifier.code 0} true;
    out_$i47 := $zext.i1.i32(out_$i46);
    goto corral_source_split_3098;

  corral_source_split_3096:
    assume {:verifier.code 0} true;
    out_$i46 := $ne.i64(out_$i44, out_$i45);
    goto corral_source_split_3097;

  corral_source_split_3095:
    assume {:verifier.code 0} true;
    out_$i45 := $p2i.ref.i64(out_$p39);
    goto corral_source_split_3096;

  corral_source_split_3094:
    assume {:verifier.code 0} true;
    out_$i44 := $p2i.ref.i64(out_$p43);
    goto corral_source_split_3095;

  corral_source_split_3093:
    assume {:verifier.code 0} true;
    out_$p43 := $load.ref($M.0, out_$p42);
    goto corral_source_split_3094;

  corral_source_split_3092:
    assume {:verifier.code 0} true;
    out_$p42 := $add.ref($add.ref(out_$p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3093;

  $bb10:
    assume out_$i41 == 1;
    goto corral_source_split_3092;

  corral_source_split_3090:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_3089:
    assume {:verifier.code 0} true;
    out_$i41 := $ne.i64(out_$i40, 0);
    goto corral_source_split_3090;

  corral_source_split_3088:
    assume {:verifier.code 0} true;
    out_$i40 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_3089;

  corral_source_split_3087:
    assume {:verifier.code 0} true;
    out_$p39 := $load.ref($M.0, out_$p38);
    goto corral_source_split_3088;

  corral_source_split_3086:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(80, 1));
    goto corral_source_split_3087;

  corral_source_split_3085:
    assume {:verifier.code 0} true;
    out_$p37 := $add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136));
    goto corral_source_split_3086;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p31);
    goto corral_source_split_3085;

  corral_source_split_3083:
    assume {:verifier.code 0} true;
    goto $bb9;

  SeqInstr_267:
    goto corral_source_split_3127;

  SeqInstr_266:
    assume assertsPassed;
    goto SeqInstr_267;

  corral_source_split_3126:
    assume {:verifier.code 0} true;
    call {:si_unique_call 666} ehci_urb_done(in_$p0, out_$p73);
    goto SeqInstr_266;

  corral_source_split_3125:
    assume {:verifier.code 0} true;
    out_$p73 := $load.ref($M.0, out_$p72);
    goto corral_source_split_3126;

  corral_source_split_3124:
    assume {:verifier.code 0} true;
    out_$p72 := $add.ref($add.ref(out_$p30, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_3125;

  $bb15:
    assume !(out_$i56 == 1);
    goto corral_source_split_3124;

  $bb59:
    assume out_$i148 == 1;
    goto corral_source_split_3266;

  corral_source_split_3264:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb59, $bb60;

  corral_source_split_3263:
    assume {:verifier.code 0} true;
    out_$i148 := $eq.i32(out_$i147, 0);
    goto corral_source_split_3264;

  corral_source_split_3262:
    assume {:verifier.code 0} true;
    out_$i147 := $and.i32(out_$i146, 3);
    goto corral_source_split_3263;

  corral_source_split_3261:
    assume {:verifier.code 0} true;
    out_$i146 := $lshr.i32(out_$i88, 8);
    goto corral_source_split_3262;

  $bb56:
    assume out_$i145 == 1;
    goto corral_source_split_3261;

  corral_source_split_3259:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_3258:
    assume {:verifier.code 0} true;
    out_$i145 := $ne.i64(out_$i144, 0);
    goto corral_source_split_3259;

  corral_source_split_3257:
    assume {:verifier.code 0} true;
    call {:si_unique_call 685} out_$i144 := ldv__builtin_expect(out_$i143, 0);
    call {:si_unique_call 686} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i144);
    goto corral_source_split_3258;

  corral_source_split_3256:
    assume {:verifier.code 0} true;
    out_$i143 := $sext.i32.i64(out_$i142);
    goto corral_source_split_3257;

  corral_source_split_3255:
    assume {:verifier.code 0} true;
    out_$i142 := $zext.i1.i32(out_$i141);
    goto corral_source_split_3256;

  $bb55:
    assume {:verifier.code 0} true;
    out_$i141 := $ne.i32(out_$i35, 0);
    goto corral_source_split_3255;

  $bb53:
    assume !(out_$i137 == 1);
    assume {:verifier.code 0} true;
    goto $bb55;

  corral_source_split_3355:
    assume {:verifier.code 0} true;
    call {:si_unique_call 691} list_del(out_$p220);
    goto corral_source_split_3356;

  $bb89:
    assume {:verifier.code 0} true;
    out_$p220 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(64, 1));
    goto corral_source_split_3355;

  $bb86:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_3353:
    assume {:verifier.code 0} true;
    goto $bb89;

  corral_source_split_3352:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p219, out_$i218);
    goto corral_source_split_3353;

  corral_source_split_3351:
    assume {:verifier.code 0} true;
    out_$p219 := $add.ref($add.ref(out_$p215, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(0, 1));
    goto corral_source_split_3352;

  corral_source_split_3350:
    assume {:verifier.code 0} true;
    out_$i218 := $load.i32($M.0, out_$p217);
    goto corral_source_split_3351;

  corral_source_split_3349:
    assume {:verifier.code 0} true;
    out_$p217 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(0, 1));
    goto corral_source_split_3350;

  corral_source_split_3348:
    assume {:verifier.code 0} true;
    goto corral_source_split_3349;

  corral_source_split_3347:
    assume {:verifier.code 0} true;
    out_$p215 := $bitcast.ref.ref(out_$p214);
    goto corral_source_split_3348;

  corral_source_split_3346:
    assume {:verifier.code 0} true;
    out_$p214 := $load.ref($M.0, out_$p213);
    goto corral_source_split_3347;

  corral_source_split_3345:
    assume {:verifier.code 0} true;
    out_$p213 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_3346;

  $bb87:
    assume out_$i211 == 1;
    goto corral_source_split_3345;

  corral_source_split_3343:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb87, $bb88;

  corral_source_split_3342:
    assume {:verifier.code 0} true;
    out_$i211 := $ne.i64(out_$i208, out_$i210);
    goto corral_source_split_3343;

  corral_source_split_3341:
    assume {:verifier.code 0} true;
    out_$i210 := $p2i.ref.i64(out_$p209);
    goto corral_source_split_3342;

  corral_source_split_3340:
    assume {:verifier.code 0} true;
    out_$p209 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(88, 1));
    goto corral_source_split_3341;

  corral_source_split_3339:
    assume {:verifier.code 0} true;
    out_$i208 := $p2i.ref.i64(out_$p207);
    goto corral_source_split_3340;

  corral_source_split_3338:
    assume {:verifier.code 0} true;
    out_$p207 := $load.ref($M.0, out_$p206);
    goto corral_source_split_3339;

  corral_source_split_3337:
    assume {:verifier.code 0} true;
    out_$p206 := $add.ref($add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(64, 1)), $mul.ref(8, 1));
    goto corral_source_split_3338;

  $bb84:
    assume out_$i204 == 1;
    goto corral_source_split_3337;

  corral_source_split_3335:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb84, $bb85;

  corral_source_split_3334:
    assume {:verifier.code 0} true;
    out_$i204 := $ne.i32(out_$i105, 0);
    goto corral_source_split_3335;

  corral_source_split_3333:
    assume {:verifier.code 0} true;
    out_$i203 := $zext.i1.i32(out_$i198);
    call {:si_unique_call 690} {:cexpr "do_status"} boogie_si_record_i32(out_$i203);
    goto corral_source_split_3334;

  $bb83:
    assume {:verifier.code 0} true;
    goto corral_source_split_3333;

  $bb82:
    assume {:verifier.code 0} true;
    assume !(out_$i197 == 1);
    goto $bb83;

  corral_source_split_3331:
    assume {:verifier.code 0} true;
    out_$i202 := $eq.i32(out_$i201, 2);
    assume {:verifier.code 0} true;
    out_$i198 := out_$i202;
    goto $bb83;

  corral_source_split_3330:
    assume {:verifier.code 0} true;
    out_$i201 := $lshr.i32(out_$i200, 30);
    goto corral_source_split_3331;

  corral_source_split_3329:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i32($M.0, out_$p199);
    goto corral_source_split_3330;

  corral_source_split_3328:
    assume {:verifier.code 0} true;
    out_$p199 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3329;

  $bb81:
    assume out_$i197 == 1;
    goto corral_source_split_3328;

  corral_source_split_3326:
    assume {:verifier.code 0} true;
    out_$i198 := 0;
    assume true;
    goto $bb81, $bb82;

  corral_source_split_3325:
    assume {:verifier.code 0} true;
    out_$i197 := $eq.i32(out_$i196, $sub.i32(0, 121));
    goto corral_source_split_3326;

  corral_source_split_3324:
    assume {:verifier.code 0} true;
    out_$i196 := $load.i32($M.0, out_$p195);
    goto corral_source_split_3325;

  $bb80:
    assume {:verifier.code 0} true;
    out_$p195 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(96, 1));
    goto corral_source_split_3324;

  $bb77:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3322:
    assume {:verifier.code 0} true;
    goto $bb80;

  corral_source_split_3321:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_11 := $M.0;
    out_cmdloc_dummy_var_12 := $M.0;
    call {:si_unique_call 689} out_cmdloc_dummy_var_13 := $memcpy.i8(out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_$p190, out_$p192, out_$i194, $zext.i32.i64(1), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_13;
    goto corral_source_split_3322;

  corral_source_split_3320:
    assume {:verifier.code 0} true;
    out_$i194 := $load.i64($M.0, out_$p193);
    goto corral_source_split_3321;

  corral_source_split_3319:
    assume {:verifier.code 0} true;
    out_$p193 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(88, 1));
    goto corral_source_split_3320;

  corral_source_split_3318:
    assume {:verifier.code 0} true;
    out_$p192 := $load.ref($M.0, out_$p191);
    goto corral_source_split_3319;

  corral_source_split_3317:
    assume {:verifier.code 0} true;
    out_$p191 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(104, 1));
    goto corral_source_split_3318;

  corral_source_split_3316:
    assume {:verifier.code 0} true;
    out_$p190 := $load.ref($M.0, out_$p189);
    goto corral_source_split_3317;

  corral_source_split_3315:
    assume {:verifier.code 0} true;
    out_$p189 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(120, 1));
    goto corral_source_split_3316;

  $bb78:
    assume out_$i188 == 1;
    goto corral_source_split_3315;

  corral_source_split_3313:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb78, $bb79;

  corral_source_split_3312:
    assume {:verifier.code 0} true;
    out_$i188 := $ne.i64(out_$i187, 0);
    goto corral_source_split_3313;

  corral_source_split_3311:
    assume {:verifier.code 0} true;
    out_$i187 := $p2i.ref.i64(out_$p186);
    goto corral_source_split_3312;

  corral_source_split_3310:
    assume {:verifier.code 0} true;
    out_$p186 := $load.ref($M.0, out_$p185);
    goto corral_source_split_3311;

  corral_source_split_3309:
    assume {:verifier.code 0} true;
    out_$p185 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(120, 1));
    goto corral_source_split_3310;

  $bb75:
    assume out_$i184 == 1;
    goto corral_source_split_3309;

  corral_source_split_3307:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb75, $bb76;

  corral_source_split_3306:
    assume {:verifier.code 0} true;
    out_$i184 := $ne.i32(out_$i183, 0);
    goto corral_source_split_3307;

  corral_source_split_3305:
    assume {:verifier.code 0} true;
    out_$i183 := $and.i32(out_$i182, 128);
    goto corral_source_split_3306;

  corral_source_split_3304:
    assume {:verifier.code 0} true;
    out_$i182 := $load.i32($M.0, out_$p181);
    goto corral_source_split_3305;

  corral_source_split_3303:
    assume {:verifier.code 0} true;
    out_$p181 := $add.ref($add.ref(out_$p180, $mul.ref(0, 192)), $mul.ref(88, 1));
    goto corral_source_split_3304;

  corral_source_split_3302:
    assume {:verifier.code 0} true;
    out_$p180 := $load.ref($M.0, out_$p179);
    goto corral_source_split_3303;

  corral_source_split_3301:
    assume {:verifier.code 0} true;
    out_$p179 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(80, 1));
    goto corral_source_split_3302;

  corral_source_split_3300:
    assume {:verifier.code 0} true;
    call {:si_unique_call 688} qtd_copy_status(in_$p0, out_$p176, out_$i178, out_$i106);
    goto corral_source_split_3301;

  corral_source_split_3299:
    assume {:verifier.code 0} true;
    out_$i178 := $load.i64($M.0, out_$p177);
    goto corral_source_split_3300;

  corral_source_split_3298:
    assume {:verifier.code 0} true;
    out_$p177 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(88, 1));
    goto corral_source_split_3299;

  $bb74:
    assume {:verifier.code 0} true;
    goto corral_source_split_3298;

  corral_source_split_3296:
    assume {:verifier.code 0} true;
    out_$p176 := out_$p39;
    goto $bb74;

  corral_source_split_3294:
    assume {:verifier.code 0} true;
    out_$p176 := out_$p175;
    goto $bb74;

  corral_source_split_3293:
    assume {:verifier.code 0} true;
    out_$p175 := $load.ref($M.0, out_$p174);
    goto corral_source_split_3294;

  corral_source_split_3292:
    assume {:verifier.code 0} true;
    out_$p174 := $add.ref($add.ref(out_$p173, $mul.ref(0, 208)), $mul.ref(192, 1));
    goto corral_source_split_3293;

  corral_source_split_3291:
    assume {:verifier.code 0} true;
    out_$p173 := $bitcast.ref.ref(out_$p39);
    goto corral_source_split_3292;

  $bb72:
    assume out_$i172 == 1;
    goto corral_source_split_3291;

  corral_source_split_3204:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb72, $bb73;

  corral_source_split_3203:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i64(out_$i171, 0);
    goto corral_source_split_3204;

  corral_source_split_3202:
    assume {:verifier.code 0} true;
    out_$i171 := $p2i.ref.i64(out_$p170);
    goto corral_source_split_3203;

  corral_source_split_3201:
    assume {:verifier.code 0} true;
    out_$p170 := $load.ref($M.0, out_$p169);
    goto corral_source_split_3202;

  corral_source_split_3200:
    assume {:verifier.code 0} true;
    out_$p169 := $add.ref($add.ref(out_$p39, $mul.ref(0, 192)), $mul.ref(184, 1));
    goto corral_source_split_3201;

  $bb40:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3200;

  $bb71:
    assume {:verifier.code 0} true;
    out_$i105, out_$i106 := 1, out_$i168;
    goto $bb40;

  corral_source_split_3178:
    assume {:verifier.code 0} true;
    out_$i105, out_$i106 := out_$i93, out_$i88;
    goto $bb40;

  $bb30:
    assume {:verifier.code 0} true;
    goto corral_source_split_3178;

  $bb39:
    assume {:verifier.code 0} true;
    out_$i93 := out_$i33;
    goto $bb30;

  corral_source_split_3171:
    assume {:verifier.code 0} true;
    out_$i93 := 1;
    goto $bb30;

  $bb28:
    assume out_$i92 == 1;
    goto corral_source_split_3171;

  corral_source_split_3166:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb28, $bb29;

  corral_source_split_3165:
    assume {:verifier.code 0} true;
    out_$i92 := $ne.i32(out_$i91, 0);
    goto corral_source_split_3166;

  corral_source_split_3164:
    assume {:verifier.code 0} true;
    out_$i91 := $and.i32(out_$i88, 64);
    goto corral_source_split_3165;

  $bb26:
    assume out_$i90 == 1;
    goto corral_source_split_3164;

  $bb33:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb32:
    assume {:verifier.code 0} true;
    assume !(out_$i96 == 1);
    goto $bb33;

  $bb35:
    assume {:verifier.code 0} true;
    assume !(out_$i99 == 1);
    goto $bb33;

  $bb37:
    assume {:verifier.code 0} true;
    assume !(out_$i103 == 1);
    goto $bb33;

  corral_source_split_3189:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_3188:
    assume {:verifier.code 0} true;
    out_$i103 := $eq.i32(out_$i102, 0);
    goto corral_source_split_3189;

  corral_source_split_3187:
    assume {:verifier.code 0} true;
    out_$i102 := $and.i32(out_$i101, 1);
    goto corral_source_split_3188;

  corral_source_split_3186:
    assume {:verifier.code 0} true;
    out_$i101 := $load.i32($M.0, out_$p100);
    goto corral_source_split_3187;

  corral_source_split_3185:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(4, 1));
    goto corral_source_split_3186;

  $bb34:
    assume out_$i99 == 1;
    goto corral_source_split_3185;

  corral_source_split_3183:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  corral_source_split_3182:
    assume {:verifier.code 0} true;
    out_$i99 := $eq.i32(out_$i98, 1);
    goto corral_source_split_3183;

  corral_source_split_3181:
    assume {:verifier.code 0} true;
    out_$i98 := $and.i32(out_$i97, 3);
    goto corral_source_split_3182;

  corral_source_split_3180:
    assume {:verifier.code 0} true;
    out_$i97 := $lshr.i32(out_$i88, 8);
    goto corral_source_split_3181;

  $bb31:
    assume out_$i96 == 1;
    goto corral_source_split_3180;

  corral_source_split_3176:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_3175:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i95, 0);
    goto corral_source_split_3176;

  corral_source_split_3174:
    assume {:verifier.code 0} true;
    out_$i95 := $and.i32(out_$i94, 32767);
    goto corral_source_split_3175;

  corral_source_split_3173:
    assume {:verifier.code 0} true;
    out_$i94 := $lshr.i32(out_$i88, 16);
    goto corral_source_split_3174;

  $bb29:
    assume !(out_$i92 == 1);
    goto corral_source_split_3173;

  $bb70:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb71;

  $bb69:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    out_$i168 := out_$i159;
    goto $bb70;

  corral_source_split_3198:
    assume {:verifier.code 0} true;
    out_$i168 := out_$i104;
    goto $bb70;

  corral_source_split_3197:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p167, out_$i166);
    call {:si_unique_call 676} devirtbounce.6(0);
    goto corral_source_split_3198;

  corral_source_split_3196:
    assume {:verifier.code 0} true;
    out_$p167 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3197;

  corral_source_split_3195:
    assume {:verifier.code 0} true;
    out_$i166 := $or.i32(out_$i165, 64);
    goto corral_source_split_3196;

  corral_source_split_3194:
    assume {:verifier.code 0} true;
    out_$i165 := $load.i32($M.0, out_$p164);
    goto corral_source_split_3195;

  corral_source_split_3193:
    assume {:verifier.code 0} true;
    out_$p164 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3194;

  $bb38:
    assume {:verifier.code 0} true;
    goto corral_source_split_3193;

  corral_source_split_3289:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i159;
    goto $bb38;

  corral_source_split_3191:
    assume {:verifier.code 0} true;
    out_$i104 := out_$i88;
    goto $bb38;

  $bb36:
    assume out_$i103 == 1;
    goto corral_source_split_3191;

  $bb68:
    assume out_$i163 == 1;
    goto corral_source_split_3289;

  corral_source_split_3287:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb68, $bb69;

  corral_source_split_3286:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 0);
    goto corral_source_split_3287;

  corral_source_split_3285:
    assume {:verifier.code 0} true;
    out_$i162 := $and.i32(out_$i161, 64);
    goto corral_source_split_3286;

  corral_source_split_3284:
    assume {:verifier.code 0} true;
    out_$i161 := $load.i32($M.0, out_$p160);
    goto corral_source_split_3285;

  corral_source_split_3283:
    assume {:verifier.code 0} true;
    out_$p160 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3284;

  $bb67:
    assume {:verifier.code 0} true;
    goto corral_source_split_3283;

  $bb64:
    assume {:verifier.code 0} true;
    out_$i159 := out_$i88;
    goto $bb67;

  corral_source_split_3281:
    assume {:verifier.code 0} true;
    out_$i159 := out_$i158;
    goto $bb67;

  corral_source_split_3280:
    assume {:verifier.code 0} true;
    out_$i158 := $load.i32($M.0, out_$p157);
    call {:si_unique_call 687} {:cexpr "token"} boogie_si_record_i32(out_$i158);
    goto corral_source_split_3281;

  corral_source_split_3279:
    assume {:verifier.code 0} true;
    out_$p157 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(24, 1));
    goto corral_source_split_3280;

  $bb65:
    assume out_$i156 == 1;
    goto corral_source_split_3279;

  corral_source_split_3277:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb65, $bb66;

  corral_source_split_3276:
    assume {:verifier.code 0} true;
    out_$i156 := $eq.i32(out_$i153, out_$i155);
    goto corral_source_split_3277;

  corral_source_split_3275:
    assume {:verifier.code 0} true;
    out_$i155 := $load.i32($M.0, out_$p154);
    goto corral_source_split_3276;

  corral_source_split_3274:
    assume {:verifier.code 0} true;
    out_$p154 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(12, 1));
    goto corral_source_split_3275;

  corral_source_split_3273:
    assume {:verifier.code 0} true;
    out_$i153 := $trunc.i64.i32(out_$i152);
    goto corral_source_split_3274;

  corral_source_split_3272:
    assume {:verifier.code 0} true;
    out_$i152 := $load.i64($M.0, out_$p151);
    goto corral_source_split_3273;

  corral_source_split_3271:
    assume {:verifier.code 0} true;
    out_$p151 := $add.ref($add.ref(out_$p36, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(56, 1));
    goto corral_source_split_3272;

  $bb62:
    assume out_$i150 == 1;
    goto corral_source_split_3271;

  corral_source_split_3269:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb62, $bb63;

  corral_source_split_3268:
    assume {:verifier.code 0} true;
    out_$i150 := $eq.i32(out_$i149, 3);
    goto corral_source_split_3269;

  $bb61:
    assume {:verifier.code 0} true;
    out_$i149 := $zext.i8.i32(in_$i13);
    goto corral_source_split_3268;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb61;

  $bb57:
    assume {:verifier.code 0} true;
    assume !(out_$i145 == 1);
    goto $bb58;

  $bb60:
    assume {:verifier.code 0} true;
    assume !(out_$i148 == 1);
    goto $bb58;

  $bb63:
    assume {:verifier.code 0} true;
    assume !(out_$i150 == 1);
    goto $bb64;

  $bb66:
    assume {:verifier.code 0} true;
    assume !(out_$i156 == 1);
    goto $bb64;

  $bb73:
    assume !(out_$i172 == 1);
    goto corral_source_split_3296;

  $bb76:
    assume {:verifier.code 0} true;
    assume !(out_$i184 == 1);
    goto $bb77;

  $bb79:
    assume {:verifier.code 0} true;
    assume !(out_$i188 == 1);
    goto $bb77;

  $bb85:
    assume {:verifier.code 0} true;
    assume !(out_$i204 == 1);
    goto $bb86;

  $bb88:
    assume {:verifier.code 0} true;
    assume !(out_$i211 == 1);
    goto $bb86;

  $bb90_dummy:
    call {:si_unique_call 1} out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i71, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i93, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i104, out_$p164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i105, out_$i106, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$p179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p185, out_$p186, out_$i187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i198, out_$i203, out_$i204, out_$p206, out_$p207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p213, out_$p214, out_$p215, out_$p217, out_$i218, out_$p219, out_$p220, out_$i138, out_$i139, out_$p140, out_$p221, out_$p222, out_$i223, out_$i224, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i225, out_$i226, out_$p227, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13 := qh_completions_loop_$bb8(in_$p0, in_$p1, in_$p3, in_$i13, in_$i24, out_$p36, out_$p37, out_$p38, out_$p39, out_$i40, out_$i41, out_$p42, out_$p43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p53, out_$p54, out_$i55, out_$i56, out_$p57, out_$p58, out_$p59, out_$p60, out_$p61, out_$p62, out_$p63, out_$i64, out_$i65, out_$i66, out_$p67, out_$p68, out_$i69, out_$i70, out_$p72, out_$p73, out_$i74, out_$i71, out_$i75, out_$i76, out_$p77, out_$i78, out_$i79, out_$i80, out_$i81, out_$i82, out_$p83, out_$p87, out_$i88, out_$i89, out_$i90, out_$i91, out_$i92, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i93, out_$i107, out_$p108, out_$p109, out_$i110, out_$i111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$p120, out_$p121, out_$p122, out_$i123, out_$i124, out_$i125, out_$i126, out_$i127, out_$i128, out_$i129, out_$p130, out_$p131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i147, out_$i148, out_$i149, out_$i150, out_$p151, out_$i152, out_$i153, out_$p154, out_$i155, out_$i156, out_$p157, out_$i158, out_$i159, out_$p160, out_$i161, out_$i162, out_$i163, out_$i104, out_$p164, out_$i165, out_$i166, out_$p167, out_$i168, out_$i105, out_$i106, out_$p169, out_$p170, out_$i171, out_$i172, out_$p173, out_$p174, out_$p175, out_$p176, out_$p177, out_$i178, out_$p179, out_$p180, out_$p181, out_$i182, out_$i183, out_$i184, out_$p185, out_$p186, out_$i187, out_$i188, out_$p189, out_$p190, out_$p191, out_$p192, out_$p193, out_$i194, out_$p195, out_$i196, out_$i197, out_$p199, out_$i200, out_$i201, out_$i202, out_$i198, out_$i203, out_$i204, out_$p206, out_$p207, out_$i208, out_$p209, out_$i210, out_$i211, out_$p213, out_$p214, out_$p215, out_$p217, out_$i218, out_$p219, out_$p220, out_$i138, out_$i139, out_$p140, out_$p221, out_$p222, out_$i223, out_$i224, out_$p30, out_$p31, out_$p32, out_$i33, out_$i34, out_$i35, out_$i225, out_$i226, out_$p227, out_cmdloc_dummy_var_11, out_cmdloc_dummy_var_12, out_cmdloc_dummy_var_13);
    return;

  exit:
    return;
}



procedure qh_completions_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i13: i8, in_$i24: i64, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$p39: ref, in_$i40: i64, in_$i41: i1, in_$p42: ref, in_$p43: ref, in_$i44: i64, in_$i45: i64, in_$i46: i1, in_$i47: i32, in_$i48: i64, in_$i49: i64, in_$i50: i1, in_$p51: ref, in_$p52: ref, in_$p53: ref, in_$p54: ref, in_$i55: i64, in_$i56: i1, in_$p57: ref, in_$p58: ref, in_$p59: ref, in_$p60: ref, in_$p61: ref, in_$p62: ref, in_$p63: ref, in_$i64: i8, in_$i65: i32, in_$i66: i1, in_$p67: ref, in_$p68: ref, in_$i69: i32, in_$i70: i32, in_$p72: ref, in_$p73: ref, in_$i74: i32, in_$i71: i32, in_$i75: i32, in_$i76: i32, in_$p77: ref, in_$i78: i64, in_$i79: i64, in_$i80: i1, in_$i81: i32, in_$i82: i32, in_$p83: ref, in_$p87: ref, in_$i88: i32, in_$i89: i32, in_$i90: i1, in_$i91: i32, in_$i92: i1, in_$i94: i32, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$i101: i32, in_$i102: i32, in_$i103: i1, in_$i93: i32, in_$i107: i1, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$i111: i32, in_$i112: i1, in_$i113: i32, in_$i114: i32, in_$i115: i64, in_$i116: i64, in_$i117: i1, in_$i118: i32, in_$i119: i32, in_$p120: ref, in_$p121: ref, in_$p122: ref, in_$i123: i32, in_$i124: i32, in_$i125: i1, in_$i126: i32, in_$i127: i64, in_$i128: i64, in_$i129: i1, in_$p130: ref, in_$p131: ref, in_$i132: i32, in_$i133: i1, in_$i134: i32, in_$i135: i64, in_$i136: i64, in_$i137: i1, in_$i141: i1, in_$i142: i32, in_$i143: i64, in_$i144: i64, in_$i145: i1, in_$i146: i32, in_$i147: i32, in_$i148: i1, in_$i149: i32, in_$i150: i1, in_$p151: ref, in_$i152: i64, in_$i153: i32, in_$p154: ref, in_$i155: i32, in_$i156: i1, in_$p157: ref, in_$i158: i32, in_$i159: i32, in_$p160: ref, in_$i161: i32, in_$i162: i32, in_$i163: i1, in_$i104: i32, in_$p164: ref, in_$i165: i32, in_$i166: i32, in_$p167: ref, in_$i168: i32, in_$i105: i32, in_$i106: i32, in_$p169: ref, in_$p170: ref, in_$i171: i64, in_$i172: i1, in_$p173: ref, in_$p174: ref, in_$p175: ref, in_$p176: ref, in_$p177: ref, in_$i178: i64, in_$p179: ref, in_$p180: ref, in_$p181: ref, in_$i182: i32, in_$i183: i32, in_$i184: i1, in_$p185: ref, in_$p186: ref, in_$i187: i64, in_$i188: i1, in_$p189: ref, in_$p190: ref, in_$p191: ref, in_$p192: ref, in_$p193: ref, in_$i194: i64, in_$p195: ref, in_$i196: i32, in_$i197: i1, in_$p199: ref, in_$i200: i32, in_$i201: i32, in_$i202: i1, in_$i198: i1, in_$i203: i32, in_$i204: i1, in_$p206: ref, in_$p207: ref, in_$i208: i64, in_$p209: ref, in_$i210: i64, in_$i211: i1, in_$p213: ref, in_$p214: ref, in_$p215: ref, in_$p217: ref, in_$i218: i32, in_$p219: ref, in_$p220: ref, in_$i138: i32, in_$i139: i32, in_$p140: ref, in_$p221: ref, in_$p222: ref, in_$i223: i64, in_$i224: i1, in_$p30: ref, in_$p31: ref, in_$p32: ref, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i225: i32, in_$i226: i32, in_$p227: ref, in_cmdloc_dummy_var_11: [ref]i8, in_cmdloc_dummy_var_12: [ref]i8, in_cmdloc_dummy_var_13: [ref]i8) returns (out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$p39: ref, out_$i40: i64, out_$i41: i1, out_$p42: ref, out_$p43: ref, out_$i44: i64, out_$i45: i64, out_$i46: i1, out_$i47: i32, out_$i48: i64, out_$i49: i64, out_$i50: i1, out_$p51: ref, out_$p52: ref, out_$p53: ref, out_$p54: ref, out_$i55: i64, out_$i56: i1, out_$p57: ref, out_$p58: ref, out_$p59: ref, out_$p60: ref, out_$p61: ref, out_$p62: ref, out_$p63: ref, out_$i64: i8, out_$i65: i32, out_$i66: i1, out_$p67: ref, out_$p68: ref, out_$i69: i32, out_$i70: i32, out_$p72: ref, out_$p73: ref, out_$i74: i32, out_$i71: i32, out_$i75: i32, out_$i76: i32, out_$p77: ref, out_$i78: i64, out_$i79: i64, out_$i80: i1, out_$i81: i32, out_$i82: i32, out_$p83: ref, out_$p87: ref, out_$i88: i32, out_$i89: i32, out_$i90: i1, out_$i91: i32, out_$i92: i1, out_$i94: i32, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$i101: i32, out_$i102: i32, out_$i103: i1, out_$i93: i32, out_$i107: i1, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$i111: i32, out_$i112: i1, out_$i113: i32, out_$i114: i32, out_$i115: i64, out_$i116: i64, out_$i117: i1, out_$i118: i32, out_$i119: i32, out_$p120: ref, out_$p121: ref, out_$p122: ref, out_$i123: i32, out_$i124: i32, out_$i125: i1, out_$i126: i32, out_$i127: i64, out_$i128: i64, out_$i129: i1, out_$p130: ref, out_$p131: ref, out_$i132: i32, out_$i133: i1, out_$i134: i32, out_$i135: i64, out_$i136: i64, out_$i137: i1, out_$i141: i1, out_$i142: i32, out_$i143: i64, out_$i144: i64, out_$i145: i1, out_$i146: i32, out_$i147: i32, out_$i148: i1, out_$i149: i32, out_$i150: i1, out_$p151: ref, out_$i152: i64, out_$i153: i32, out_$p154: ref, out_$i155: i32, out_$i156: i1, out_$p157: ref, out_$i158: i32, out_$i159: i32, out_$p160: ref, out_$i161: i32, out_$i162: i32, out_$i163: i1, out_$i104: i32, out_$p164: ref, out_$i165: i32, out_$i166: i32, out_$p167: ref, out_$i168: i32, out_$i105: i32, out_$i106: i32, out_$p169: ref, out_$p170: ref, out_$i171: i64, out_$i172: i1, out_$p173: ref, out_$p174: ref, out_$p175: ref, out_$p176: ref, out_$p177: ref, out_$i178: i64, out_$p179: ref, out_$p180: ref, out_$p181: ref, out_$i182: i32, out_$i183: i32, out_$i184: i1, out_$p185: ref, out_$p186: ref, out_$i187: i64, out_$i188: i1, out_$p189: ref, out_$p190: ref, out_$p191: ref, out_$p192: ref, out_$p193: ref, out_$i194: i64, out_$p195: ref, out_$i196: i32, out_$i197: i1, out_$p199: ref, out_$i200: i32, out_$i201: i32, out_$i202: i1, out_$i198: i1, out_$i203: i32, out_$i204: i1, out_$p206: ref, out_$p207: ref, out_$i208: i64, out_$p209: ref, out_$i210: i64, out_$i211: i1, out_$p213: ref, out_$p214: ref, out_$p215: ref, out_$p217: ref, out_$i218: i32, out_$p219: ref, out_$p220: ref, out_$i138: i32, out_$i139: i32, out_$p140: ref, out_$p221: ref, out_$p222: ref, out_$i223: i64, out_$i224: i1, out_$p30: ref, out_$p31: ref, out_$p32: ref, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i225: i32, out_$i226: i32, out_$p227: ref, out_cmdloc_dummy_var_11: [ref]i8, out_cmdloc_dummy_var_12: [ref]i8, out_cmdloc_dummy_var_13: [ref]i8);
  modifies $M.0, $M.22, $M.48, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.27, $M.29, $M.31, $M.33, $M.24, $M.25, $M.63, $CurrAddr, $M.28, $M.30, $M.32, $M.34, $M.39, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.60, $M.8, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation qh_destroy_loop_$bb9()
{

  entry:
    goto $bb9, exit;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb9_dummy;

  $bb9_dummy:
    call {:si_unique_call 1} qh_destroy_loop_$bb9();
    return;

  exit:
    return;
}



procedure qh_destroy_loop_$bb9();



implementation qh_unlink_periodic_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i7: i32, in_$p11: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i14: i32) returns (out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i14: i32)
{

  entry:
    out_$p15, out_$i16, out_$i17, out_$i18, out_$i14 := in_$p15, in_$i16, in_$i17, in_$i18, in_$i14;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_3658;

  $bb9:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i16;
    goto $bb9_dummy;

  corral_source_split_3664:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9;

  corral_source_split_3663:
    assume {:verifier.code 0} true;
    out_$i18 := $ugt.i32(out_$i17, out_$i16);
    goto corral_source_split_3664;

  corral_source_split_3662:
    assume {:verifier.code 0} true;
    out_$i17 := $load.i32($M.0, in_$p11);
    goto corral_source_split_3663;

  corral_source_split_3661:
    assume {:verifier.code 0} true;
    out_$i16 := $add.i32(out_$i14, in_$i7);
    call {:si_unique_call 753} {:cexpr "i"} boogie_si_record_i32(out_$i16);
    goto corral_source_split_3662;

  corral_source_split_3660:
    assume {:verifier.code 0} true;
    call {:si_unique_call 752} periodic_unlink(in_$p0, out_$i14, out_$p15);
    goto corral_source_split_3661;

  $bb8:
    assume {:verifier.code 0} true;
    out_$p15 := $bitcast.ref.ref(in_$p1);
    goto corral_source_split_3660;

  corral_source_split_3658:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb9_dummy:
    call {:si_unique_call 1} out_$p15, out_$i16, out_$i17, out_$i18, out_$i14 := qh_unlink_periodic_loop_$bb7(in_$p0, in_$p1, in_$i7, in_$p11, out_$p15, out_$i16, out_$i17, out_$i18, out_$i14);
    return;

  exit:
    return;
}



procedure qh_unlink_periodic_loop_$bb7(in_$p0: ref, in_$p1: ref, in_$i7: i32, in_$p11: ref, in_$p15: ref, in_$i16: i32, in_$i17: i32, in_$i18: i1, in_$i14: i32) returns (out_$p15: ref, out_$i16: i32, out_$i17: i32, out_$i18: i1, out_$i14: i32);
  modifies $M.0, $CurrAddr;



implementation periodic_unlink_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p14: ref, in_$p15: ref, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p21: ref, in_$p22: ref, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p33: ref, in_$p34: ref, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8) returns (out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p21: ref, out_$p22: ref, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p33: ref, out_$p34: ref, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8)
{

  entry:
    out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p21, out_$p22, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p33, out_$p34, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19 := in_$i23, in_$i24, in_$p25, in_$p26, in_$p27, in_$p28, in_$p29, in_$p30, in_$i31, in_$i32, in_$p21, in_$p22, in_$p35, in_$i36, in_$i37, in_$i38, in_$p39, in_$p40, in_$p33, in_$p34, in_cmdloc_dummy_var_17, in_cmdloc_dummy_var_18, in_cmdloc_dummy_var_19;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_3783;

  $bb6:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$p21, out_$p22 := out_$p27, out_$p25;
    goto $bb6_dummy;

  corral_source_split_3799:
    assume {:verifier.code 0} true;
    out_$p33, out_$p34 := out_$p25, out_$p27;
    assume true;
    goto $bb6;

  corral_source_split_3798:
    assume {:verifier.code 0} true;
    out_$i32 := $ne.i64(out_$i31, 0);
    goto corral_source_split_3799;

  corral_source_split_3797:
    assume {:verifier.code 0} true;
    out_$i31 := $p2i.ref.i64(out_$p30);
    goto corral_source_split_3798;

  corral_source_split_3796:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, in_$p15);
    goto corral_source_split_3797;

  corral_source_split_3795:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_17 := $M.0;
    out_cmdloc_dummy_var_18 := $M.0;
    call {:si_unique_call 767} out_cmdloc_dummy_var_19 := $memcpy.i8(out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_$p28, out_$p29, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_19;
    goto corral_source_split_3796;

  corral_source_split_3794:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p25);
    goto corral_source_split_3795;

  corral_source_split_3793:
    assume {:verifier.code 0} true;
    out_$p28 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3794;

  corral_source_split_3792:
    assume {:verifier.code 0} true;
    out_$p27 := $load.ref($M.0, out_$p26);
    goto corral_source_split_3793;

  corral_source_split_3791:
    assume {:verifier.code 0} true;
    out_$p26 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_3792;

  corral_source_split_3790:
    assume {:verifier.code 0} true;
    call {:si_unique_call 766} out_$p25 := periodic_next_shadow(out_$p22, out_$i24);
    goto corral_source_split_3791;

  corral_source_split_3789:
    assume {:verifier.code 0} true;
    out_$i24 := $and.i32(out_$i23, 6);
    goto corral_source_split_3790;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i23 := $load.i32($M.0, out_$p21);
    goto corral_source_split_3789;

  corral_source_split_3803:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb8:
    assume out_$i38 == 1;
    goto corral_source_split_3803;

  corral_source_split_3787:
    assume {:verifier.code 0} true;
    out_$p39, out_$p40 := out_$p22, out_$p21;
    assume true;
    goto $bb8;

  corral_source_split_3786:
    assume {:verifier.code 0} true;
    out_$i38 := $ne.i64(out_$i36, out_$i37);
    goto corral_source_split_3787;

  corral_source_split_3785:
    assume {:verifier.code 0} true;
    out_$i37 := $p2i.ref.i64(in_$p2);
    goto corral_source_split_3786;

  corral_source_split_3784:
    assume {:verifier.code 0} true;
    out_$i36 := $p2i.ref.i64(out_$p35);
    goto corral_source_split_3785;

  corral_source_split_3783:
    assume {:verifier.code 0} true;
    out_$p35 := $load.ref($M.0, in_$p14);
    goto corral_source_split_3784;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p21, out_$p22, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p33, out_$p34, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19 := periodic_unlink_loop_$bb4(in_$p2, in_$p3, in_$p14, in_$p15, out_$i23, out_$i24, out_$p25, out_$p26, out_$p27, out_$p28, out_$p29, out_$p30, out_$i31, out_$i32, out_$p21, out_$p22, out_$p35, out_$i36, out_$i37, out_$i38, out_$p39, out_$p40, out_$p33, out_$p34, out_cmdloc_dummy_var_17, out_cmdloc_dummy_var_18, out_cmdloc_dummy_var_19);
    return;

  exit:
    return;
}



procedure periodic_unlink_loop_$bb4(in_$p2: ref, in_$p3: ref, in_$p14: ref, in_$p15: ref, in_$i23: i32, in_$i24: i32, in_$p25: ref, in_$p26: ref, in_$p27: ref, in_$p28: ref, in_$p29: ref, in_$p30: ref, in_$i31: i64, in_$i32: i1, in_$p21: ref, in_$p22: ref, in_$p35: ref, in_$i36: i64, in_$i37: i64, in_$i38: i1, in_$p39: ref, in_$p40: ref, in_$p33: ref, in_$p34: ref, in_cmdloc_dummy_var_17: [ref]i8, in_cmdloc_dummy_var_18: [ref]i8, in_cmdloc_dummy_var_19: [ref]i8) returns (out_$i23: i32, out_$i24: i32, out_$p25: ref, out_$p26: ref, out_$p27: ref, out_$p28: ref, out_$p29: ref, out_$p30: ref, out_$i31: i64, out_$i32: i1, out_$p21: ref, out_$p22: ref, out_$p35: ref, out_$i36: i64, out_$i37: i64, out_$i38: i1, out_$p39: ref, out_$p40: ref, out_$p33: ref, out_$p34: ref, out_cmdloc_dummy_var_17: [ref]i8, out_cmdloc_dummy_var_18: [ref]i8, out_cmdloc_dummy_var_19: [ref]i8);
  modifies $M.0;



implementation qh_schedule_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i37: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i36: i32, in_$i109: i1) returns (out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i37: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i36: i32, out_$i109: i1)
{

  entry:
    out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i38, out_$i39, out_$i40, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i36, out_$i109 := in_$i29, in_$i30, in_$i31, in_$i32, in_$i33, in_$i34, in_$i35, in_$i37, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i38, in_$i39, in_$i40, in_$i97, in_$i98, in_$i99, in_$i100, in_$i101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$i108, in_$i36, in_$i109;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_4183;

  $bb20:
    assume out_$i42 == 1;
    assume {:verifier.code 0} true;
    out_$i29 := out_$i41;
    goto $bb20_dummy;

  corral_source_split_4198:
    assume {:verifier.code 0} true;
    out_$i43, out_$i44, out_$i45 := out_$i35, out_$i41, out_$i34;
    assume true;
    goto $bb20;

  corral_source_split_4197:
    assume {:verifier.code 0} true;
    out_$i42 := $ne.i32(out_$i29, 0);
    goto corral_source_split_4198;

  corral_source_split_4196:
    assume {:verifier.code 0} true;
    out_$i41 := $sub.i32(out_$i29, 1);
    call {:si_unique_call 826} {:cexpr "frame"} boogie_si_record_i32(out_$i41);
    goto corral_source_split_4197;

  $bb18:
    assume out_$i37 == 1;
    goto corral_source_split_4196;

  corral_source_split_4191:
    assume {:verifier.code 0} true;
    out_$i38, out_$i39, out_$i40 := out_$i29, out_$i35, out_$i34;
    assume true;
    goto $bb18;

  corral_source_split_4190:
    assume {:verifier.code 0} true;
    out_$i37 := $ne.i32(out_$i35, 0);
    goto corral_source_split_4191;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4190;

  $bb17:
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := 8, out_$i36;
    goto $bb14;

  corral_source_split_4188:
    assume {:verifier.code 0} true;
    out_$i34, out_$i35 := out_$i32, out_$i33;
    goto $bb14;

  $bb12:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4188;

  $bb60:
    assume {:verifier.code 0} true;
    assume out_$i109 == 1;
    goto $bb12;

  $bb56:
    assume {:verifier.code 0} true;
    assume out_$i108 == 1;
    goto $bb12;

  $bb52:
    assume {:verifier.code 0} true;
    assume out_$i106 == 1;
    goto $bb12;

  $bb48:
    assume {:verifier.code 0} true;
    assume out_$i104 == 1;
    goto $bb12;

  $bb44:
    assume {:verifier.code 0} true;
    assume out_$i102 == 1;
    goto $bb12;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i100 == 1;
    goto $bb12;

  $bb36:
    assume {:verifier.code 0} true;
    assume out_$i98 == 1;
    goto $bb12;

  $bb11:
    assume {:verifier.code 0} true;
    assume out_$i31 == 1;
    goto $bb12;

  corral_source_split_4186:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 0, out_$i30;
    assume true;
    goto $bb11, $bb13;

  corral_source_split_4185:
    assume {:verifier.code 0} true;
    out_$i31 := $eq.i32(out_$i30, 0);
    goto corral_source_split_4186;

  $bb10:
    assume {:verifier.code 0} true;
    call {:si_unique_call 823} out_$i30 := check_intr_schedule(in_$p0, out_$i29, 0, in_$p1, in_$p2);
    call {:si_unique_call 824} {:cexpr "status"} boogie_si_record_i32(out_$i30);
    goto corral_source_split_4185;

  $bb9:
    assume {:verifier.code 0} true;
    goto $bb10;

  corral_source_split_4183:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4194:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 1, out_$i97;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_4193:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_4194;

  $bb16:
    assume {:verifier.code 0} true;
    call {:si_unique_call 825} out_$i97 := check_intr_schedule(in_$p0, out_$i29, 1, in_$p1, in_$p2);
    goto corral_source_split_4193;

  $bb15:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb13:
    assume !(out_$i31 == 1);
    assume {:verifier.code 0} true;
    goto $bb15;

  corral_source_split_4251:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 2, out_$i99;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_4250:
    assume {:verifier.code 0} true;
    out_$i100 := $eq.i32(out_$i99, 0);
    goto corral_source_split_4251;

  $bb39:
    assume {:verifier.code 0} true;
    call {:si_unique_call 831} out_$i99 := check_intr_schedule(in_$p0, out_$i29, 2, in_$p1, in_$p2);
    goto corral_source_split_4250;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb39;

  $bb37:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_4254:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 3, out_$i101;
    assume true;
    goto $bb44, $bb45;

  corral_source_split_4253:
    assume {:verifier.code 0} true;
    out_$i102 := $eq.i32(out_$i101, 0);
    goto corral_source_split_4254;

  $bb43:
    assume {:verifier.code 0} true;
    call {:si_unique_call 832} out_$i101 := check_intr_schedule(in_$p0, out_$i29, 3, in_$p1, in_$p2);
    goto corral_source_split_4253;

  $bb42:
    assume {:verifier.code 0} true;
    goto $bb43;

  $bb41:
    assume !(out_$i100 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4257:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 4, out_$i103;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_4256:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 0);
    goto corral_source_split_4257;

  $bb47:
    assume {:verifier.code 0} true;
    call {:si_unique_call 833} out_$i103 := check_intr_schedule(in_$p0, out_$i29, 4, in_$p1, in_$p2);
    goto corral_source_split_4256;

  $bb46:
    assume {:verifier.code 0} true;
    goto $bb47;

  $bb45:
    assume !(out_$i102 == 1);
    assume {:verifier.code 0} true;
    goto $bb46;

  corral_source_split_4260:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 5, out_$i105;
    assume true;
    goto $bb52, $bb53;

  corral_source_split_4259:
    assume {:verifier.code 0} true;
    out_$i106 := $eq.i32(out_$i105, 0);
    goto corral_source_split_4260;

  $bb51:
    assume {:verifier.code 0} true;
    call {:si_unique_call 834} out_$i105 := check_intr_schedule(in_$p0, out_$i29, 5, in_$p1, in_$p2);
    goto corral_source_split_4259;

  $bb50:
    assume {:verifier.code 0} true;
    goto $bb51;

  $bb49:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb50;

  corral_source_split_4263:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 6, out_$i107;
    assume true;
    goto $bb56, $bb57;

  corral_source_split_4262:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 0);
    goto corral_source_split_4263;

  $bb55:
    assume {:verifier.code 0} true;
    call {:si_unique_call 835} out_$i107 := check_intr_schedule(in_$p0, out_$i29, 6, in_$p1, in_$p2);
    goto corral_source_split_4262;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb55;

  $bb53:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  corral_source_split_4266:
    assume {:verifier.code 0} true;
    out_$i32, out_$i33 := 7, out_$i36;
    assume true;
    goto $bb60, $bb61;

  corral_source_split_4265:
    assume {:verifier.code 0} true;
    out_$i109 := $eq.i32(out_$i36, 0);
    goto corral_source_split_4266;

  $bb59:
    assume {:verifier.code 0} true;
    call {:si_unique_call 836} out_$i36 := check_intr_schedule(in_$p0, out_$i29, 7, in_$p1, in_$p2);
    goto corral_source_split_4265;

  $bb58:
    assume {:verifier.code 0} true;
    goto $bb59;

  $bb57:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb58;

  $bb62:
    assume {:verifier.code 0} true;
    goto $bb17;

  $bb61:
    assume !(out_$i109 == 1);
    assume {:verifier.code 0} true;
    goto $bb62;

  $bb20_dummy:
    call {:si_unique_call 1} out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i38, out_$i39, out_$i40, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i36, out_$i109 := qh_schedule_loop_$bb8(in_$p0, in_$p1, in_$p2, out_$i29, out_$i30, out_$i31, out_$i32, out_$i33, out_$i34, out_$i35, out_$i37, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i38, out_$i39, out_$i40, out_$i97, out_$i98, out_$i99, out_$i100, out_$i101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$i108, out_$i36, out_$i109);
    return;

  exit:
    return;
}



procedure qh_schedule_loop_$bb8(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i29: i32, in_$i30: i32, in_$i31: i1, in_$i32: i32, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$i37: i1, in_$i41: i32, in_$i42: i1, in_$i43: i32, in_$i44: i32, in_$i45: i32, in_$i38: i32, in_$i39: i32, in_$i40: i32, in_$i97: i32, in_$i98: i1, in_$i99: i32, in_$i100: i1, in_$i101: i32, in_$i102: i1, in_$i103: i32, in_$i104: i1, in_$i105: i32, in_$i106: i1, in_$i107: i32, in_$i108: i1, in_$i36: i32, in_$i109: i1) returns (out_$i29: i32, out_$i30: i32, out_$i31: i1, out_$i32: i32, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$i37: i1, out_$i41: i32, out_$i42: i1, out_$i43: i32, out_$i44: i32, out_$i45: i32, out_$i38: i32, out_$i39: i32, out_$i40: i32, out_$i97: i32, out_$i98: i1, out_$i99: i32, out_$i100: i1, out_$i101: i32, out_$i102: i1, out_$i103: i32, out_$i104: i1, out_$i105: i32, out_$i106: i1, out_$i107: i32, out_$i108: i1, out_$i36: i32, out_$i109: i1);
  modifies $M.50;



implementation unlink_async_loop_$bb11(in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p22: ref, in_$p29: ref) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p22: ref, out_$p29: ref)
{

  entry:
    out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p22, out_$p29 := in_$p23, in_$p24, in_$p25, in_$p26, in_$i27, in_$i28, in_$p22, in_$p29;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_4299;

  $bb14:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    out_$p22 := out_$p24;
    goto $bb14_dummy;

  corral_source_split_4306:
    assume {:verifier.code 0} true;
    out_$p29 := out_$p24;
    assume true;
    goto $bb14;

  corral_source_split_4305:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i64(out_$i27, 0);
    goto corral_source_split_4306;

  corral_source_split_4304:
    assume {:verifier.code 0} true;
    out_$i27 := $p2i.ref.i64(out_$p26);
    goto corral_source_split_4305;

  corral_source_split_4303:
    assume {:verifier.code 0} true;
    out_$p26 := $load.ref($M.0, out_$p25);
    goto corral_source_split_4304;

  corral_source_split_4302:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref(out_$p24, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4303;

  corral_source_split_4301:
    assume {:verifier.code 0} true;
    out_$p24 := $load.ref($M.0, out_$p23);
    goto corral_source_split_4302;

  $bb13:
    assume {:verifier.code 0} true;
    out_$p23 := $add.ref($add.ref(out_$p22, $mul.ref(0, 160)), $mul.ref(112, 1));
    goto corral_source_split_4301;

  $bb12:
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4299:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb14_dummy:
    call {:si_unique_call 1} out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p22, out_$p29 := unlink_async_loop_$bb11(out_$p23, out_$p24, out_$p25, out_$p26, out_$i27, out_$i28, out_$p22, out_$p29);
    return;

  exit:
    return;
}



procedure unlink_async_loop_$bb11(in_$p23: ref, in_$p24: ref, in_$p25: ref, in_$p26: ref, in_$i27: i64, in_$i28: i1, in_$p22: ref, in_$p29: ref) returns (out_$p23: ref, out_$p24: ref, out_$p25: ref, out_$p26: ref, out_$i27: i64, out_$i28: i1, out_$p22: ref, out_$p29: ref);



implementation start_unlink_async_loop_$bb28(in_$i60: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p63: ref, in_$p72: ref) returns (out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p63: ref, out_$p72: ref)
{

  entry:
    out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p63, out_$p72 := in_$p64, in_$p65, in_$p66, in_$p67, in_$p68, in_$p69, in_$i70, in_$i71, in_$p63, in_$p72;
    goto $bb28, exit;

  $bb28:
    assume {:verifier.code 0} true;
    goto corral_source_split_4422;

  $bb30:
    assume out_$i71 == 1;
    assume {:verifier.code 0} true;
    out_$p63 := out_$p66;
    goto $bb30_dummy;

  corral_source_split_4431:
    assume {:verifier.code 0} true;
    out_$p72 := out_$p66;
    assume true;
    goto $bb30;

  corral_source_split_4430:
    assume {:verifier.code 0} true;
    out_$i71 := $ne.i64(out_$i70, in_$i60);
    goto corral_source_split_4431;

  corral_source_split_4429:
    assume {:verifier.code 0} true;
    out_$i70 := $p2i.ref.i64(out_$p69);
    goto corral_source_split_4430;

  corral_source_split_4428:
    assume {:verifier.code 0} true;
    out_$p69 := $load.ref($M.0, out_$p68);
    goto corral_source_split_4429;

  corral_source_split_4427:
    assume {:verifier.code 0} true;
    out_$p68 := $bitcast.ref.ref(out_$p67);
    goto corral_source_split_4428;

  corral_source_split_4426:
    assume {:verifier.code 0} true;
    out_$p67 := $add.ref($add.ref(out_$p66, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4427;

  corral_source_split_4425:
    assume {:verifier.code 0} true;
    out_$p66 := $load.ref($M.0, out_$p65);
    goto corral_source_split_4426;

  corral_source_split_4424:
    assume {:verifier.code 0} true;
    out_$p65 := $bitcast.ref.ref(out_$p64);
    goto corral_source_split_4425;

  $bb29:
    assume {:verifier.code 0} true;
    out_$p64 := $add.ref($add.ref(out_$p63, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4424;

  corral_source_split_4422:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb30_dummy:
    call {:si_unique_call 1} out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p63, out_$p72 := start_unlink_async_loop_$bb28(in_$i60, out_$p64, out_$p65, out_$p66, out_$p67, out_$p68, out_$p69, out_$i70, out_$i71, out_$p63, out_$p72);
    return;

  exit:
    return;
}



procedure start_unlink_async_loop_$bb28(in_$i60: i64, in_$p64: ref, in_$p65: ref, in_$p66: ref, in_$p67: ref, in_$p68: ref, in_$p69: ref, in_$i70: i64, in_$i71: i1, in_$p63: ref, in_$p72: ref) returns (out_$p64: ref, out_$p65: ref, out_$p66: ref, out_$p67: ref, out_$p68: ref, out_$p69: ref, out_$i70: i64, out_$i71: i1, out_$p63: ref, out_$p72: ref);



implementation start_unlink_async_loop_$bb13()
{

  entry:
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb13_dummy;

  $bb13_dummy:
    call {:si_unique_call 1} start_unlink_async_loop_$bb13();
    return;

  exit:
    return;
}



procedure start_unlink_async_loop_$bb13();



implementation start_unlink_async_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} start_unlink_async_loop_$bb3();
    return;

  exit:
    return;
}



procedure start_unlink_async_loop_$bb3();



implementation qh_link_periodic_loop_$bb27(in_$p1: ref, in_$p3: ref, in_$p83: ref, in_$p91: ref, in_$i92: i16, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i16, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p89: ref, in_$p90: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$p115: ref, in_$p116: ref, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8) returns (out_$p91: ref, out_$i92: i16, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i16, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p89: ref, out_$p90: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$p115: ref, out_$p116: ref, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8)
{

  entry:
    out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p89, out_$p90, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p115, out_$p116, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34 := in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p89, in_$p90, in_$p117, in_$p118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p115, in_$p116, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34;
    goto $bb27, exit;

  $bb27:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4624;

  $bb33:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$p89, out_$p90 := out_$p108, out_$p106;
    goto $bb33_dummy;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$p115, out_$p116 := out_$p106, out_$p108;
    assume true;
    goto $bb33;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, in_$p83);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_32 := $M.0;
    out_cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 888} out_cmdloc_dummy_var_34 := $memcpy.i8(out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_$p110, out_$p111, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_34;
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$p111 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_4651;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4650;

  $bb30:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$p100, out_$p101 := out_$p90, out_$p89;
    assume true;
    goto $bb30;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$i99 := $sgt.i32(out_$i93, out_$i98);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i32(out_$i97);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i16($M.0, out_$p96);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$p94 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i16.i32(out_$i92);
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i16($M.0, out_$p91);
    goto corral_source_split_4632;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4631;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume out_$i121 == 1;
    goto corral_source_split_4665;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$p122, out_$p123 := out_$p90, out_$p89;
    assume true;
    goto $bb35;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i64(out_$i119, out_$i120);
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, out_$p117);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4625;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p89, out_$p90, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p115, out_$p116, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34 := qh_link_periodic_loop_$bb27(in_$p1, in_$p3, in_$p83, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p89, out_$p90, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p115, out_$p116, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34);
    return;

  exit:
    return;
}



procedure qh_link_periodic_loop_$bb27(in_$p1: ref, in_$p3: ref, in_$p83: ref, in_$p91: ref, in_$i92: i16, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i16, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p89: ref, in_$p90: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$p115: ref, in_$p116: ref, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8) returns (out_$p91: ref, out_$i92: i16, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i16, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p89: ref, out_$p90: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$p115: ref, out_$p116: ref, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8);
  modifies $M.0;



implementation qh_link_periodic_loop_$bb15(in_$p3: ref, in_$p57: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p63: ref, in_$p64: ref, in_$p81: ref, in_$p82: ref, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8) returns (out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p63: ref, out_$p64: ref, out_$p81: ref, out_$p82: ref, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8)
{

  entry:
    out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p63, out_$p64, out_$p81, out_$p82, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31 := in_$i65, in_$i66, in_$i67, in_$p68, in_$p69, in_$p72, in_$p73, in_$p74, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p63, in_$p64, in_$p81, in_$p82, in_cmdloc_dummy_var_29, in_cmdloc_dummy_var_30, in_cmdloc_dummy_var_31;
    goto $bb15, exit;

  $bb15:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4595;

  $bb21:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$p63, out_$p64 := out_$p74, out_$p72;
    goto $bb21_dummy;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$p81, out_$p82 := out_$p72, out_$p74;
    assume true;
    goto $bb21;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i64(out_$i79, 0);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p78);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, in_$p57);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_29 := $M.0;
    out_cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 887} out_cmdloc_dummy_var_31 := $memcpy.i8(out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_$p76, out_$p77, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_31;
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4610;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} out_$p72 := periodic_next_shadow(out_$p64, out_$i66);
    goto corral_source_split_4609;

  $bb18:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$p68, out_$p69 := out_$p64, out_$p63;
    assume true;
    goto $bb18;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 2);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, 6);
    call {:si_unique_call 885} {:cexpr "type"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_4598;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p63);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb21_dummy:
    call {:si_unique_call 1} out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p63, out_$p64, out_$p81, out_$p82, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31 := qh_link_periodic_loop_$bb15(in_$p3, in_$p57, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p63, out_$p64, out_$p81, out_$p82, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31);
    return;

  exit:
    return;
}



procedure qh_link_periodic_loop_$bb15(in_$p3: ref, in_$p57: ref, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p63: ref, in_$p64: ref, in_$p81: ref, in_$p82: ref, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8) returns (out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p63: ref, out_$p64: ref, out_$p81: ref, out_$p82: ref, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8);
  modifies $M.0;



implementation qh_link_periodic_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i39: i32, in_$p43: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p63: ref, in_$p64: ref, in_$p81: ref, in_$p82: ref, in_$p61: ref, in_$p62: ref, in_$p70: ref, in_$p71: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p91: ref, in_$i92: i16, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i16, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p89: ref, in_$p90: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$p115: ref, in_$p116: ref, in_$p87: ref, in_$p88: ref, in_$p102: ref, in_$p103: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$i136: i32, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i64, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$i46: i32, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p63: ref, out_$p64: ref, out_$p81: ref, out_$p82: ref, out_$p61: ref, out_$p62: ref, out_$p70: ref, out_$p71: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p91: ref, out_$i92: i16, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i16, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p89: ref, out_$p90: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$p115: ref, out_$p116: ref, out_$p87: ref, out_$p88: ref, out_$p102: ref, out_$p103: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$i136: i32, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i64, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$i46: i32, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8)
{

  entry:
    out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p63, out_$p64, out_$p81, out_$p82, out_$p61, out_$p62, out_$p70, out_$p71, out_$p83, out_$p84, out_$i85, out_$i86, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p89, out_$p90, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p115, out_$p116, out_$p87, out_$p88, out_$p102, out_$p103, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i46, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37 := in_$p47, in_$p48, in_$i49, in_$p50, in_$p51, in_$p52, in_$i53, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i65, in_$i66, in_$i67, in_$p68, in_$p69, in_$p72, in_$p73, in_$p74, in_$p76, in_$p77, in_$p78, in_$i79, in_$i80, in_$p63, in_$p64, in_$p81, in_$p82, in_$p61, in_$p62, in_$p70, in_$p71, in_$p83, in_$p84, in_$i85, in_$i86, in_$p91, in_$i92, in_$i93, in_$p94, in_$p95, in_$p96, in_$i97, in_$i98, in_$i99, in_$p100, in_$p101, in_$p104, in_$p105, in_$p106, in_$p107, in_$p108, in_$p110, in_$p111, in_$p112, in_$i113, in_$i114, in_$p89, in_$p90, in_$p117, in_$p118, in_$i119, in_$i120, in_$i121, in_$p122, in_$p123, in_$p115, in_$p116, in_$p87, in_$p88, in_$p102, in_$p103, in_$p124, in_$p125, in_$i126, in_$i127, in_$i128, in_$p129, in_$p130, in_$p131, in_$p132, in_$p133, in_$i134, in_$i135, in_$i136, in_$p137, in_$p138, in_$p139, in_$i140, in_$i141, in_$i142, in_$i143, in_$i144, in_$i145, in_$i146, in_$i46, in_cmdloc_dummy_var_26, in_cmdloc_dummy_var_27, in_cmdloc_dummy_var_28, in_cmdloc_dummy_var_29, in_cmdloc_dummy_var_30, in_cmdloc_dummy_var_31, in_cmdloc_dummy_var_32, in_cmdloc_dummy_var_33, in_cmdloc_dummy_var_34, in_cmdloc_dummy_var_35, in_cmdloc_dummy_var_36, in_cmdloc_dummy_var_37;
    goto $bb10, exit;

  $bb10:
    assume {:verifier.code 0} true;
    goto corral_source_split_4575;

  $bb44:
    assume out_$i146 == 1;
    assume {:verifier.code 0} true;
    out_$i46 := out_$i144;
    goto $bb44_dummy;

  corral_source_split_4696:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44;

  corral_source_split_4695:
    assume {:verifier.code 0} true;
    out_$i146 := $ugt.i32(out_$i145, out_$i144);
    goto corral_source_split_4696;

  corral_source_split_4694:
    assume {:verifier.code 0} true;
    out_$i145 := $load.i32($M.0, in_$p43);
    goto corral_source_split_4695;

  $bb43:
    assume {:verifier.code 0} true;
    out_$i144 := $add.i32(out_$i46, in_$i39);
    call {:si_unique_call 891} {:cexpr "i"} boogie_si_record_i32(out_$i144);
    goto corral_source_split_4694;

  $bb39:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4692:
    assume {:verifier.code 0} true;
    goto $bb43;

  corral_source_split_4691:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p103, out_$i143);
    goto corral_source_split_4692;

  corral_source_split_4690:
    assume {:verifier.code 0} true;
    out_$i143 := $or.i32(out_$i142, 2);
    goto corral_source_split_4691;

  corral_source_split_4689:
    assume {:verifier.code 0} true;
    out_$i142 := $and.i32(out_$i141, $sub.i32(0, 32));
    goto corral_source_split_4690;

  corral_source_split_4688:
    assume {:verifier.code 0} true;
    out_$i141 := $trunc.i64.i32(out_$i140);
    goto corral_source_split_4689;

  corral_source_split_4687:
    assume {:verifier.code 0} true;
    out_$i140 := $load.i64($M.0, out_$p139);
    goto corral_source_split_4688;

  corral_source_split_4686:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(72, 1));
    goto corral_source_split_4687;

  corral_source_split_4685:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p138, in_$p1);
    goto corral_source_split_4686;

  corral_source_split_4684:
    assume {:verifier.code 0} true;
    out_$p138 := $bitcast.ref.ref(out_$p102);
    goto corral_source_split_4685;

  $bb42:
    call {:si_unique_call 890} devirtbounce.6(0);
    goto corral_source_split_4684;

  $bb41:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4682:
    assume {:verifier.code 0} true;
    goto $bb42;

  corral_source_split_4681:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p137, out_$i136);
    goto corral_source_split_4682;

  corral_source_split_4680:
    assume {:verifier.code 0} true;
    out_$p137 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(0, 1));
    goto corral_source_split_4681;

  corral_source_split_4679:
    assume {:verifier.code 0} true;
    out_$i136 := $load.i32($M.0, out_$p103);
    goto corral_source_split_4680;

  $bb40:
    assume out_$i135 == 1;
    goto corral_source_split_4679;

  corral_source_split_4677:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_4676:
    assume {:verifier.code 0} true;
    out_$i135 := $ne.i64(out_$i134, 0);
    goto corral_source_split_4677;

  corral_source_split_4675:
    assume {:verifier.code 0} true;
    out_$i134 := $p2i.ref.i64(out_$p133);
    goto corral_source_split_4676;

  corral_source_split_4674:
    assume {:verifier.code 0} true;
    out_$p133 := $load.ref($M.0, out_$p132);
    goto corral_source_split_4675;

  corral_source_split_4673:
    assume {:verifier.code 0} true;
    out_$p132 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4674;

  corral_source_split_4672:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_35 := $M.0;
    out_cmdloc_dummy_var_36 := $M.0;
    call {:si_unique_call 889} out_cmdloc_dummy_var_37 := $memcpy.i8(out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_$p130, out_$p131, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_37;
    goto corral_source_split_4673;

  corral_source_split_4671:
    assume {:verifier.code 0} true;
    out_$p131 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4672;

  corral_source_split_4670:
    assume {:verifier.code 0} true;
    out_$p130 := $bitcast.ref.ref(out_$p129);
    goto corral_source_split_4671;

  corral_source_split_4669:
    assume {:verifier.code 0} true;
    out_$p129 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4670;

  $bb38:
    assume out_$i128 == 1;
    goto corral_source_split_4669;

  corral_source_split_4648:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  corral_source_split_4647:
    assume {:verifier.code 0} true;
    out_$i128 := $ne.i64(out_$i126, out_$i127);
    goto corral_source_split_4648;

  corral_source_split_4646:
    assume {:verifier.code 0} true;
    out_$i127 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4647;

  corral_source_split_4645:
    assume {:verifier.code 0} true;
    out_$i126 := $p2i.ref.i64(out_$p125);
    goto corral_source_split_4646;

  corral_source_split_4644:
    assume {:verifier.code 0} true;
    out_$p125 := $load.ref($M.0, out_$p124);
    goto corral_source_split_4645;

  corral_source_split_4643:
    assume {:verifier.code 0} true;
    out_$p124 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4644;

  $bb31:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4643;

  $bb37:
    assume {:verifier.code 0} true;
    out_$p102, out_$p103 := out_$p87, out_$p88;
    goto $bb31;

  corral_source_split_4641:
    assume {:verifier.code 0} true;
    out_$p102, out_$p103 := out_$p100, out_$p101;
    goto $bb31;

  $bb29:
    assume out_$i99 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4641;

  corral_source_split_4639:
    assume {:verifier.code 0} true;
    out_$p100, out_$p101 := out_$p90, out_$p89;
    assume true;
    goto $bb29, $bb30;

  corral_source_split_4638:
    assume {:verifier.code 0} true;
    out_$i99 := $sgt.i32(out_$i93, out_$i98);
    goto corral_source_split_4639;

  corral_source_split_4637:
    assume {:verifier.code 0} true;
    out_$i98 := $zext.i16.i32(out_$i97);
    goto corral_source_split_4638;

  corral_source_split_4636:
    assume {:verifier.code 0} true;
    out_$i97 := $load.i16($M.0, out_$p96);
    goto corral_source_split_4637;

  corral_source_split_4635:
    assume {:verifier.code 0} true;
    out_$p96 := $add.ref($add.ref(out_$p95, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4636;

  corral_source_split_4634:
    assume {:verifier.code 0} true;
    out_$p95 := $load.ref($M.0, out_$p94);
    goto corral_source_split_4635;

  corral_source_split_4633:
    assume {:verifier.code 0} true;
    out_$p94 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4634;

  corral_source_split_4632:
    assume {:verifier.code 0} true;
    out_$i93 := $zext.i16.i32(out_$i92);
    goto corral_source_split_4633;

  corral_source_split_4631:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i16($M.0, out_$p91);
    goto corral_source_split_4632;

  $bb28:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref($add.ref(in_$p1, $mul.ref(0, 160)), $mul.ref(142, 1));
    goto corral_source_split_4631;

  corral_source_split_4665:
    assume {:verifier.code 0} true;
    goto $bb28;

  $bb35:
    assume out_$i121 == 1;
    goto corral_source_split_4665;

  corral_source_split_4629:
    assume {:verifier.code 0} true;
    out_$p122, out_$p123 := out_$p90, out_$p89;
    assume true;
    goto $bb35, $bb36;

  corral_source_split_4628:
    assume {:verifier.code 0} true;
    out_$i121 := $ne.i64(out_$i119, out_$i120);
    goto corral_source_split_4629;

  corral_source_split_4627:
    assume {:verifier.code 0} true;
    out_$i120 := $p2i.ref.i64(in_$p1);
    goto corral_source_split_4628;

  corral_source_split_4626:
    assume {:verifier.code 0} true;
    out_$i119 := $p2i.ref.i64(out_$p118);
    goto corral_source_split_4627;

  corral_source_split_4625:
    assume {:verifier.code 0} true;
    out_$p118 := $load.ref($M.0, out_$p117);
    goto corral_source_split_4626;

  corral_source_split_4624:
    assume {:verifier.code 0} true;
    out_$p117 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4625;

  $bb27:
    call out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p89, out_$p90, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p115, out_$p116, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34 := qh_link_periodic_loop_$bb27(in_$p1, in_$p3, out_$p83, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p89, out_$p90, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p115, out_$p116, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34);
    goto $bb27_last;

  $bb27_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4624;

  corral_source_split_4622:
    assume {:verifier.code 0} true;
    out_$p89, out_$p90 := out_$p71, out_$p70;
    goto $bb27;

  $bb33:
    assume out_$i114 == 1;
    assume {:verifier.code 0} true;
    out_$p89, out_$p90 := out_$p108, out_$p106;
    assume false;
    return;

  corral_source_split_4661:
    assume {:verifier.code 0} true;
    out_$p115, out_$p116 := out_$p106, out_$p108;
    assume true;
    goto $bb33, $bb34;

  corral_source_split_4660:
    assume {:verifier.code 0} true;
    out_$i114 := $ne.i64(out_$i113, 0);
    goto corral_source_split_4661;

  corral_source_split_4659:
    assume {:verifier.code 0} true;
    out_$i113 := $p2i.ref.i64(out_$p112);
    goto corral_source_split_4660;

  corral_source_split_4658:
    assume {:verifier.code 0} true;
    out_$p112 := $load.ref($M.0, out_$p83);
    goto corral_source_split_4659;

  corral_source_split_4657:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_32 := $M.0;
    out_cmdloc_dummy_var_33 := $M.0;
    call {:si_unique_call 888} out_cmdloc_dummy_var_34 := $memcpy.i8(out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_$p110, out_$p111, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_34;
    goto corral_source_split_4658;

  corral_source_split_4656:
    assume {:verifier.code 0} true;
    out_$p111 := $bitcast.ref.ref(out_$p106);
    goto corral_source_split_4657;

  corral_source_split_4655:
    assume {:verifier.code 0} true;
    out_$p110 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4656;

  corral_source_split_4654:
    assume {:verifier.code 0} true;
    goto corral_source_split_4655;

  corral_source_split_4653:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_4654;

  corral_source_split_4652:
    assume {:verifier.code 0} true;
    out_$p107 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4653;

  corral_source_split_4651:
    assume {:verifier.code 0} true;
    out_$p106 := $add.ref($add.ref(out_$p105, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4652;

  corral_source_split_4650:
    assume {:verifier.code 0} true;
    out_$p105 := $load.ref($M.0, out_$p104);
    goto corral_source_split_4651;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p104 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4650;

  $bb30:
    assume !(out_$i99 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb24:
    assume out_$i86 == 1;
    goto corral_source_split_4622;

  corral_source_split_4607:
    assume {:verifier.code 0} true;
    out_$p87, out_$p88 := out_$p70, out_$p71;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_4606:
    assume {:verifier.code 0} true;
    out_$i86 := $ne.i64(out_$i85, 0);
    goto corral_source_split_4607;

  corral_source_split_4605:
    assume {:verifier.code 0} true;
    out_$i85 := $p2i.ref.i64(out_$p84);
    goto corral_source_split_4606;

  corral_source_split_4604:
    assume {:verifier.code 0} true;
    out_$p84 := $load.ref($M.0, out_$p83);
    goto corral_source_split_4605;

  corral_source_split_4603:
    assume {:verifier.code 0} true;
    out_$p83 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4604;

  $bb19:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4603;

  $bb23:
    assume {:verifier.code 0} true;
    out_$p70, out_$p71 := out_$p61, out_$p62;
    goto $bb19;

  corral_source_split_4601:
    assume {:verifier.code 0} true;
    out_$p70, out_$p71 := out_$p68, out_$p69;
    goto $bb19;

  $bb17:
    assume out_$i67 == 1;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4601;

  corral_source_split_4599:
    assume {:verifier.code 0} true;
    out_$p68, out_$p69 := out_$p64, out_$p63;
    assume true;
    goto $bb17, $bb18;

  corral_source_split_4598:
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i66, 2);
    goto corral_source_split_4599;

  corral_source_split_4597:
    assume {:verifier.code 0} true;
    out_$i66 := $and.i32(out_$i65, 6);
    call {:si_unique_call 885} {:cexpr "type"} boogie_si_record_i32(out_$i66);
    goto corral_source_split_4598;

  $bb16:
    assume {:verifier.code 0} true;
    out_$i65 := $load.i32($M.0, out_$p63);
    goto corral_source_split_4597;

  corral_source_split_4595:
    assume {:verifier.code 0} true;
    goto $bb16;

  $bb15:
    call out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p63, out_$p64, out_$p81, out_$p82, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31 := qh_link_periodic_loop_$bb15(in_$p3, out_$p57, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p63, out_$p64, out_$p81, out_$p82, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31);
    goto $bb15_last;

  $bb15_last:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4595;

  corral_source_split_4593:
    assume {:verifier.code 0} true;
    out_$p63, out_$p64 := out_$p54, out_$p50;
    goto $bb15;

  $bb21:
    assume out_$i80 == 1;
    assume {:verifier.code 0} true;
    out_$p63, out_$p64 := out_$p74, out_$p72;
    assume false;
    return;

  corral_source_split_4618:
    assume {:verifier.code 0} true;
    out_$p81, out_$p82 := out_$p72, out_$p74;
    assume true;
    goto $bb21, $bb22;

  corral_source_split_4617:
    assume {:verifier.code 0} true;
    out_$i80 := $ne.i64(out_$i79, 0);
    goto corral_source_split_4618;

  corral_source_split_4616:
    assume {:verifier.code 0} true;
    out_$i79 := $p2i.ref.i64(out_$p78);
    goto corral_source_split_4617;

  corral_source_split_4615:
    assume {:verifier.code 0} true;
    out_$p78 := $load.ref($M.0, out_$p57);
    goto corral_source_split_4616;

  corral_source_split_4614:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_29 := $M.0;
    out_cmdloc_dummy_var_30 := $M.0;
    call {:si_unique_call 887} out_cmdloc_dummy_var_31 := $memcpy.i8(out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_$p76, out_$p77, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_31;
    goto corral_source_split_4615;

  corral_source_split_4613:
    assume {:verifier.code 0} true;
    out_$p77 := $bitcast.ref.ref(out_$p72);
    goto corral_source_split_4614;

  corral_source_split_4612:
    assume {:verifier.code 0} true;
    out_$p76 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4613;

  corral_source_split_4611:
    assume {:verifier.code 0} true;
    goto corral_source_split_4612;

  corral_source_split_4610:
    assume {:verifier.code 0} true;
    out_$p74 := $load.ref($M.0, out_$p73);
    goto corral_source_split_4611;

  corral_source_split_4609:
    assume {:verifier.code 0} true;
    out_$p73 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4610;

  $bb20:
    assume {:verifier.code 0} true;
    call {:si_unique_call 886} out_$p72 := periodic_next_shadow(out_$p64, out_$i66);
    goto corral_source_split_4609;

  $bb18:
    assume !(out_$i67 == 1);
    assume {:verifier.code 0} true;
    goto $bb20;

  $bb12:
    assume out_$i60 == 1;
    goto corral_source_split_4593;

  corral_source_split_4591:
    assume {:verifier.code 0} true;
    out_$p61, out_$p62 := out_$p50, out_$p54;
    assume true;
    goto $bb12, $bb13;

  corral_source_split_4590:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_4591;

  corral_source_split_4589:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_4590;

  corral_source_split_4588:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_4589;

  corral_source_split_4587:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4588;

  corral_source_split_4586:
    assume {:verifier.code 0} true;
    out_cmdloc_dummy_var_26 := $M.0;
    out_cmdloc_dummy_var_27 := $M.0;
    call {:si_unique_call 884} out_cmdloc_dummy_var_28 := $memcpy.i8(out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_$p55, out_$p56, 8, $zext.i32.i64(8), 0 == 1);
    $M.0 := out_cmdloc_dummy_var_28;
    goto corral_source_split_4587;

  corral_source_split_4585:
    assume {:verifier.code 0} true;
    out_$p56 := $bitcast.ref.ref(out_$p50);
    goto corral_source_split_4586;

  corral_source_split_4584:
    assume {:verifier.code 0} true;
    out_$p55 := $bitcast.ref.ref(in_$p3);
    goto corral_source_split_4585;

  corral_source_split_4583:
    assume {:verifier.code 0} true;
    out_$p54 := $add.ref(out_$p52, $mul.ref(out_$i53, 4));
    goto corral_source_split_4584;

  corral_source_split_4582:
    assume {:verifier.code 0} true;
    out_$i53 := $zext.i32.i64(out_$i46);
    goto corral_source_split_4583;

  corral_source_split_4581:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_4582;

  corral_source_split_4580:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_4581;

  corral_source_split_4579:
    assume {:verifier.code 0} true;
    out_$p50 := $add.ref(out_$p48, $mul.ref(out_$i49, 8));
    goto corral_source_split_4580;

  corral_source_split_4578:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i32.i64(out_$i46);
    goto corral_source_split_4579;

  corral_source_split_4577:
    assume {:verifier.code 0} true;
    out_$p48 := $load.ref($M.0, out_$p47);
    goto corral_source_split_4578;

  $bb11:
    assume {:verifier.code 0} true;
    out_$p47 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(424, 1));
    goto corral_source_split_4577;

  corral_source_split_4575:
    assume {:verifier.code 0} true;
    goto $bb11;

  $bb14:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb13:
    assume {:verifier.code 0} true;
    assume !(out_$i60 == 1);
    goto $bb14;

  corral_source_split_4620:
    assume {:verifier.code 0} true;
    out_$p61, out_$p62 := out_$p81, out_$p82;
    goto $bb14;

  $bb22:
    assume !(out_$i80 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4620;

  $bb26:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb25:
    assume {:verifier.code 0} true;
    assume !(out_$i86 == 1);
    goto $bb26;

  corral_source_split_4667:
    assume {:verifier.code 0} true;
    out_$p87, out_$p88 := out_$p122, out_$p123;
    goto $bb26;

  corral_source_split_4663:
    assume {:verifier.code 0} true;
    out_$p87, out_$p88 := out_$p115, out_$p116;
    goto $bb26;

  $bb34:
    assume !(out_$i114 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4663;

  $bb36:
    assume !(out_$i121 == 1);
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4667;

  $bb44_dummy:
    call {:si_unique_call 1} out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p63, out_$p64, out_$p81, out_$p82, out_$p61, out_$p62, out_$p70, out_$p71, out_$p83, out_$p84, out_$i85, out_$i86, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p89, out_$p90, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p115, out_$p116, out_$p87, out_$p88, out_$p102, out_$p103, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i46, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37 := qh_link_periodic_loop_$bb10(in_$p0, in_$p1, in_$p3, in_$i39, in_$p43, out_$p47, out_$p48, out_$i49, out_$p50, out_$p51, out_$p52, out_$i53, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i65, out_$i66, out_$i67, out_$p68, out_$p69, out_$p72, out_$p73, out_$p74, out_$p76, out_$p77, out_$p78, out_$i79, out_$i80, out_$p63, out_$p64, out_$p81, out_$p82, out_$p61, out_$p62, out_$p70, out_$p71, out_$p83, out_$p84, out_$i85, out_$i86, out_$p91, out_$i92, out_$i93, out_$p94, out_$p95, out_$p96, out_$i97, out_$i98, out_$i99, out_$p100, out_$p101, out_$p104, out_$p105, out_$p106, out_$p107, out_$p108, out_$p110, out_$p111, out_$p112, out_$i113, out_$i114, out_$p89, out_$p90, out_$p117, out_$p118, out_$i119, out_$i120, out_$i121, out_$p122, out_$p123, out_$p115, out_$p116, out_$p87, out_$p88, out_$p102, out_$p103, out_$p124, out_$p125, out_$i126, out_$i127, out_$i128, out_$p129, out_$p130, out_$p131, out_$p132, out_$p133, out_$i134, out_$i135, out_$i136, out_$p137, out_$p138, out_$p139, out_$i140, out_$i141, out_$i142, out_$i143, out_$i144, out_$i145, out_$i146, out_$i46, out_cmdloc_dummy_var_26, out_cmdloc_dummy_var_27, out_cmdloc_dummy_var_28, out_cmdloc_dummy_var_29, out_cmdloc_dummy_var_30, out_cmdloc_dummy_var_31, out_cmdloc_dummy_var_32, out_cmdloc_dummy_var_33, out_cmdloc_dummy_var_34, out_cmdloc_dummy_var_35, out_cmdloc_dummy_var_36, out_cmdloc_dummy_var_37);
    return;

  exit:
    return;
}



procedure qh_link_periodic_loop_$bb10(in_$p0: ref, in_$p1: ref, in_$p3: ref, in_$i39: i32, in_$p43: ref, in_$p47: ref, in_$p48: ref, in_$i49: i64, in_$p50: ref, in_$p51: ref, in_$p52: ref, in_$i53: i64, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i65: i32, in_$i66: i32, in_$i67: i1, in_$p68: ref, in_$p69: ref, in_$p72: ref, in_$p73: ref, in_$p74: ref, in_$p76: ref, in_$p77: ref, in_$p78: ref, in_$i79: i64, in_$i80: i1, in_$p63: ref, in_$p64: ref, in_$p81: ref, in_$p82: ref, in_$p61: ref, in_$p62: ref, in_$p70: ref, in_$p71: ref, in_$p83: ref, in_$p84: ref, in_$i85: i64, in_$i86: i1, in_$p91: ref, in_$i92: i16, in_$i93: i32, in_$p94: ref, in_$p95: ref, in_$p96: ref, in_$i97: i16, in_$i98: i32, in_$i99: i1, in_$p100: ref, in_$p101: ref, in_$p104: ref, in_$p105: ref, in_$p106: ref, in_$p107: ref, in_$p108: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$i113: i64, in_$i114: i1, in_$p89: ref, in_$p90: ref, in_$p117: ref, in_$p118: ref, in_$i119: i64, in_$i120: i64, in_$i121: i1, in_$p122: ref, in_$p123: ref, in_$p115: ref, in_$p116: ref, in_$p87: ref, in_$p88: ref, in_$p102: ref, in_$p103: ref, in_$p124: ref, in_$p125: ref, in_$i126: i64, in_$i127: i64, in_$i128: i1, in_$p129: ref, in_$p130: ref, in_$p131: ref, in_$p132: ref, in_$p133: ref, in_$i134: i64, in_$i135: i1, in_$i136: i32, in_$p137: ref, in_$p138: ref, in_$p139: ref, in_$i140: i64, in_$i141: i32, in_$i142: i32, in_$i143: i32, in_$i144: i32, in_$i145: i32, in_$i146: i1, in_$i46: i32, in_cmdloc_dummy_var_26: [ref]i8, in_cmdloc_dummy_var_27: [ref]i8, in_cmdloc_dummy_var_28: [ref]i8, in_cmdloc_dummy_var_29: [ref]i8, in_cmdloc_dummy_var_30: [ref]i8, in_cmdloc_dummy_var_31: [ref]i8, in_cmdloc_dummy_var_32: [ref]i8, in_cmdloc_dummy_var_33: [ref]i8, in_cmdloc_dummy_var_34: [ref]i8, in_cmdloc_dummy_var_35: [ref]i8, in_cmdloc_dummy_var_36: [ref]i8, in_cmdloc_dummy_var_37: [ref]i8) returns (out_$p47: ref, out_$p48: ref, out_$i49: i64, out_$p50: ref, out_$p51: ref, out_$p52: ref, out_$i53: i64, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i65: i32, out_$i66: i32, out_$i67: i1, out_$p68: ref, out_$p69: ref, out_$p72: ref, out_$p73: ref, out_$p74: ref, out_$p76: ref, out_$p77: ref, out_$p78: ref, out_$i79: i64, out_$i80: i1, out_$p63: ref, out_$p64: ref, out_$p81: ref, out_$p82: ref, out_$p61: ref, out_$p62: ref, out_$p70: ref, out_$p71: ref, out_$p83: ref, out_$p84: ref, out_$i85: i64, out_$i86: i1, out_$p91: ref, out_$i92: i16, out_$i93: i32, out_$p94: ref, out_$p95: ref, out_$p96: ref, out_$i97: i16, out_$i98: i32, out_$i99: i1, out_$p100: ref, out_$p101: ref, out_$p104: ref, out_$p105: ref, out_$p106: ref, out_$p107: ref, out_$p108: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$i113: i64, out_$i114: i1, out_$p89: ref, out_$p90: ref, out_$p117: ref, out_$p118: ref, out_$i119: i64, out_$i120: i64, out_$i121: i1, out_$p122: ref, out_$p123: ref, out_$p115: ref, out_$p116: ref, out_$p87: ref, out_$p88: ref, out_$p102: ref, out_$p103: ref, out_$p124: ref, out_$p125: ref, out_$i126: i64, out_$i127: i64, out_$i128: i1, out_$p129: ref, out_$p130: ref, out_$p131: ref, out_$p132: ref, out_$p133: ref, out_$i134: i64, out_$i135: i1, out_$i136: i32, out_$p137: ref, out_$p138: ref, out_$p139: ref, out_$i140: i64, out_$i141: i32, out_$i142: i32, out_$i143: i32, out_$i144: i32, out_$i145: i32, out_$i146: i1, out_$i46: i32, out_cmdloc_dummy_var_26: [ref]i8, out_cmdloc_dummy_var_27: [ref]i8, out_cmdloc_dummy_var_28: [ref]i8, out_cmdloc_dummy_var_29: [ref]i8, out_cmdloc_dummy_var_30: [ref]i8, out_cmdloc_dummy_var_31: [ref]i8, out_cmdloc_dummy_var_32: [ref]i8, out_cmdloc_dummy_var_33: [ref]i8, out_cmdloc_dummy_var_34: [ref]i8, out_cmdloc_dummy_var_35: [ref]i8, out_cmdloc_dummy_var_36: [ref]i8, out_cmdloc_dummy_var_37: [ref]i8);
  modifies $M.0;



implementation check_period_loop_$bb23(in_$p0: ref, in_$i2: i32, in_$i3: i32, in_$i7: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i24: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1) returns (out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i24: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1)
{

  entry:
    out_$i25, out_$i26, out_$i27, out_$i28, out_$i24, out_$i29, out_$p30, out_$i31, out_$i32 := in_$i25, in_$i26, in_$i27, in_$i28, in_$i24, in_$i29, in_$p30, in_$i31, in_$i32;
    goto $bb23, exit;

  $bb23:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb27;

  $bb26:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i24 := out_$i25;
    goto $bb26_dummy;

  corral_source_split_4832:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb26;

  corral_source_split_4831:
    assume {:verifier.code 0} true;
    out_$i28 := $ugt.i32(out_$i27, in_$i7);
    goto corral_source_split_4832;

  corral_source_split_4830:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i16.i32(out_$i26);
    call {:si_unique_call 926} {:cexpr "claimed"} boogie_si_record_i32(out_$i27);
    goto corral_source_split_4831;

  corral_source_split_4829:
    assume {:verifier.code 0} true;
    call {:si_unique_call 924} out_$i26 := periodic_usecs(in_$p0, out_$i25, in_$i2);
    call {:si_unique_call 925} {:cexpr "tmp___0"} boogie_si_record_i16(out_$i26);
    goto corral_source_split_4830;

  $bb24:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_4829;

  corral_source_split_4839:
    assume {:verifier.code 0} true;
    out_$i25 := out_$i29;
    assume true;
    goto $bb24;

  corral_source_split_4838:
    assume {:verifier.code 0} true;
    out_$i32 := $ult.i32(out_$i29, out_$i31);
    goto corral_source_split_4839;

  corral_source_split_4837:
    assume {:verifier.code 0} true;
    out_$i31 := $load.i32($M.0, out_$p30);
    goto corral_source_split_4838;

  corral_source_split_4836:
    assume {:verifier.code 0} true;
    out_$p30 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_4837;

  $bb27:
    assume {:verifier.code 0} true;
    out_$i29 := $add.i32(out_$i24, in_$i3);
    call {:si_unique_call 927} {:cexpr "frame"} boogie_si_record_i32(out_$i29);
    goto corral_source_split_4836;

  $bb26_dummy:
    call {:si_unique_call 1} out_$i25, out_$i26, out_$i27, out_$i28, out_$i24, out_$i29, out_$p30, out_$i31, out_$i32 := check_period_loop_$bb23(in_$p0, in_$i2, in_$i3, in_$i7, out_$i25, out_$i26, out_$i27, out_$i28, out_$i24, out_$i29, out_$p30, out_$i31, out_$i32);
    return;

  exit:
    return;
}



procedure check_period_loop_$bb23(in_$p0: ref, in_$i2: i32, in_$i3: i32, in_$i7: i32, in_$i25: i32, in_$i26: i16, in_$i27: i32, in_$i28: i1, in_$i24: i32, in_$i29: i32, in_$p30: ref, in_$i31: i32, in_$i32: i1) returns (out_$i25: i32, out_$i26: i16, out_$i27: i32, out_$i28: i1, out_$i24: i32, out_$i29: i32, out_$p30: ref, out_$i31: i32, out_$i32: i1);



implementation check_period_loop_$bb7(in_$p0: ref, in_$i7: i32, in_$i13: i32, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i45: i16, in_$i46: i32, in_$i47: i1, in_$i48: i16, in_$i49: i32, in_$i50: i1) returns (out_$i13: i32, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i45: i16, out_$i46: i32, out_$i47: i1, out_$i48: i16, out_$i49: i32, out_$i50: i1)
{

  entry:
    out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50 := in_$i13, in_$i14, in_$i15, in_$i16, in_$i17, in_$p18, in_$i19, in_$i20, in_$i33, in_$i34, in_$i35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    goto corral_source_split_4812;

  $bb16:
    assume out_$i20 == 1;
    assume {:verifier.code 0} true;
    out_$i13 := out_$i17;
    goto $bb16_dummy;

  corral_source_split_4825:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16;

  corral_source_split_4824:
    assume {:verifier.code 0} true;
    out_$i20 := $ult.i32(out_$i17, out_$i19);
    goto corral_source_split_4825;

  corral_source_split_4823:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_4824;

  corral_source_split_4822:
    assume {:verifier.code 0} true;
    out_$p18 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(396, 1));
    goto corral_source_split_4823;

  $bb15:
    assume {:verifier.code 0} true;
    out_$i17 := $add.i32(out_$i13, 1);
    call {:si_unique_call 923} {:cexpr "frame"} boogie_si_record_i32(out_$i17);
    goto corral_source_split_4822;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb15;

  $bb51:
    assume !(out_$i50 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_4859:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb51;

  corral_source_split_4858:
    assume {:verifier.code 0} true;
    out_$i50 := $ugt.i32(out_$i49, in_$i7);
    goto corral_source_split_4859;

  corral_source_split_4857:
    assume {:verifier.code 0} true;
    out_$i49 := $zext.i16.i32(out_$i48);
    goto corral_source_split_4858;

  $bb49:
    assume {:verifier.code 0} true;
    call {:si_unique_call 932} out_$i48 := periodic_usecs(in_$p0, out_$i13, 6);
    goto corral_source_split_4857;

  $bb48:
    assume {:verifier.code 0} true;
    goto $bb49;

  $bb47:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_4855:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_4854:
    assume {:verifier.code 0} true;
    out_$i47 := $ugt.i32(out_$i46, in_$i7);
    goto corral_source_split_4855;

  corral_source_split_4853:
    assume {:verifier.code 0} true;
    out_$i46 := $zext.i16.i32(out_$i45);
    goto corral_source_split_4854;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 931} out_$i45 := periodic_usecs(in_$p0, out_$i13, 5);
    goto corral_source_split_4853;

  $bb44:
    assume {:verifier.code 0} true;
    goto $bb45;

  $bb43:
    assume !(out_$i44 == 1);
    assume {:verifier.code 0} true;
    goto $bb44;

  corral_source_split_4851:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43;

  corral_source_split_4850:
    assume {:verifier.code 0} true;
    out_$i44 := $ugt.i32(out_$i43, in_$i7);
    goto corral_source_split_4851;

  corral_source_split_4849:
    assume {:verifier.code 0} true;
    out_$i43 := $zext.i16.i32(out_$i42);
    goto corral_source_split_4850;

  $bb41:
    assume {:verifier.code 0} true;
    call {:si_unique_call 930} out_$i42 := periodic_usecs(in_$p0, out_$i13, 4);
    goto corral_source_split_4849;

  $bb40:
    assume {:verifier.code 0} true;
    goto $bb41;

  $bb39:
    assume !(out_$i41 == 1);
    assume {:verifier.code 0} true;
    goto $bb40;

  corral_source_split_4847:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39;

  corral_source_split_4846:
    assume {:verifier.code 0} true;
    out_$i41 := $ugt.i32(out_$i40, in_$i7);
    goto corral_source_split_4847;

  corral_source_split_4845:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i39);
    goto corral_source_split_4846;

  $bb37:
    assume {:verifier.code 0} true;
    call {:si_unique_call 929} out_$i39 := periodic_usecs(in_$p0, out_$i13, 3);
    goto corral_source_split_4845;

  $bb36:
    assume {:verifier.code 0} true;
    goto $bb37;

  $bb35:
    assume !(out_$i38 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_4843:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb35;

  corral_source_split_4842:
    assume {:verifier.code 0} true;
    out_$i38 := $ugt.i32(out_$i37, in_$i7);
    goto corral_source_split_4843;

  corral_source_split_4841:
    assume {:verifier.code 0} true;
    out_$i37 := $zext.i16.i32(out_$i36);
    goto corral_source_split_4842;

  $bb33:
    assume {:verifier.code 0} true;
    call {:si_unique_call 928} out_$i36 := periodic_usecs(in_$p0, out_$i13, 2);
    goto corral_source_split_4841;

  $bb32:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume !(out_$i35 == 1);
    assume {:verifier.code 0} true;
    goto $bb32;

  corral_source_split_4820:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31;

  corral_source_split_4819:
    assume {:verifier.code 0} true;
    out_$i35 := $ugt.i32(out_$i34, in_$i7);
    goto corral_source_split_4820;

  corral_source_split_4818:
    assume {:verifier.code 0} true;
    out_$i34 := $zext.i16.i32(out_$i33);
    goto corral_source_split_4819;

  $bb14:
    assume {:verifier.code 0} true;
    call {:si_unique_call 922} out_$i33 := periodic_usecs(in_$p0, out_$i13, 1);
    goto corral_source_split_4818;

  $bb13:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb12:
    assume !(out_$i16 == 1);
    assume {:verifier.code 0} true;
    goto $bb13;

  corral_source_split_4816:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12;

  corral_source_split_4815:
    assume {:verifier.code 0} true;
    out_$i16 := $ugt.i32(out_$i15, in_$i7);
    goto corral_source_split_4816;

  corral_source_split_4814:
    assume {:verifier.code 0} true;
    out_$i15 := $zext.i16.i32(out_$i14);
    call {:si_unique_call 921} {:cexpr "claimed"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_4815;

  $bb9:
    assume {:verifier.code 0} true;
    call {:si_unique_call 919} out_$i14 := periodic_usecs(in_$p0, out_$i13, 0);
    call {:si_unique_call 920} {:cexpr "tmp"} boogie_si_record_i16(out_$i14);
    goto corral_source_split_4814;

  $bb8:
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4812:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb16_dummy:
    call {:si_unique_call 1} out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50 := check_period_loop_$bb7(in_$p0, in_$i7, out_$i13, out_$i14, out_$i15, out_$i16, out_$i17, out_$p18, out_$i19, out_$i20, out_$i33, out_$i34, out_$i35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50);
    return;

  exit:
    return;
}



procedure check_period_loop_$bb7(in_$p0: ref, in_$i7: i32, in_$i13: i32, in_$i14: i16, in_$i15: i32, in_$i16: i1, in_$i17: i32, in_$p18: ref, in_$i19: i32, in_$i20: i1, in_$i33: i16, in_$i34: i32, in_$i35: i1, in_$i36: i16, in_$i37: i32, in_$i38: i1, in_$i39: i16, in_$i40: i32, in_$i41: i1, in_$i42: i16, in_$i43: i32, in_$i44: i1, in_$i45: i16, in_$i46: i32, in_$i47: i1, in_$i48: i16, in_$i49: i32, in_$i50: i1) returns (out_$i13: i32, out_$i14: i16, out_$i15: i32, out_$i16: i1, out_$i17: i32, out_$p18: ref, out_$i19: i32, out_$i20: i1, out_$i33: i16, out_$i34: i32, out_$i35: i1, out_$i36: i16, out_$i37: i32, out_$i38: i1, out_$i39: i16, out_$i40: i32, out_$i41: i1, out_$i42: i16, out_$i43: i32, out_$i44: i1, out_$i45: i16, out_$i46: i32, out_$i47: i1, out_$i48: i16, out_$i49: i32, out_$i50: i1);



implementation periodic_usecs_loop_$bb4(in_$i2: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$i61: i32) returns (out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$i61: i32)
{

  entry:
    out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i16, out_$p17, out_$p18, out_$i61 := in_$i19, in_$i20, in_$i21, in_$p22, in_$p23, in_$p24, in_$i25, in_$i26, in_$i27, in_$i28, in_$p29, in_$p30, in_$p31, in_$i32, in_$i33, in_$i34, in_$i35, in_$p36, in_$p37, in_$p38, in_$i39, in_$i40, in_$i41, in_$i42, in_$i43, in_$p44, in_$p45, in_$p46, in_$i47, in_$i48, in_$i49, in_$i50, in_$p51, in_$p52, in_$p54, in_$p55, in_$p56, in_$p57, in_$p58, in_$i59, in_$i60, in_$i16, in_$p17, in_$p18, in_$i61;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_4877;

  $bb17:
    assume out_$i60 == 1;
    assume {:verifier.code 0} true;
    out_$i16, out_$p17, out_$p18 := out_$i50, out_$p56, out_$p52;
    goto $bb17_dummy;

  corral_source_split_4928:
    assume {:verifier.code 0} true;
    out_$i61 := out_$i50;
    assume true;
    goto $bb17;

  corral_source_split_4927:
    assume {:verifier.code 0} true;
    out_$i60 := $ne.i64(out_$i59, 0);
    goto corral_source_split_4928;

  corral_source_split_4926:
    assume {:verifier.code 0} true;
    out_$i59 := $p2i.ref.i64(out_$p58);
    goto corral_source_split_4927;

  corral_source_split_4925:
    assume {:verifier.code 0} true;
    out_$p58 := $load.ref($M.0, out_$p57);
    goto corral_source_split_4926;

  $bb16:
    assume {:verifier.code 0} true;
    out_$p57 := $bitcast.ref.ref(out_$p56);
    goto corral_source_split_4925;

  corral_source_split_4923:
    assume {:verifier.code 0} true;
    goto $bb16;

  corral_source_split_4922:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref(out_$p55, $mul.ref(0, 160)), $mul.ref(80, 1));
    goto corral_source_split_4923;

  corral_source_split_4921:
    assume {:verifier.code 0} true;
    out_$p55 := $load.ref($M.0, out_$p54);
    goto corral_source_split_4922;

  corral_source_split_4920:
    assume {:verifier.code 0} true;
    out_$p54 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_4921;

  corral_source_split_4919:
    assume {:verifier.code 0} true;
    goto corral_source_split_4920;

  corral_source_split_4918:
    assume {:verifier.code 0} true;
    out_$p52 := $load.ref($M.0, out_$p51);
    goto corral_source_split_4919;

  corral_source_split_4917:
    assume {:verifier.code 0} true;
    out_$p51 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_4918;

  $bb15:
    assume {:verifier.code 0} true;
    goto corral_source_split_4917;

  $bb14:
    assume !(out_$i43 == 1);
    assume {:verifier.code 0} true;
    out_$i50 := out_$i35;
    goto $bb15;

  corral_source_split_4915:
    assume {:verifier.code 0} true;
    out_$i50 := out_$i49;
    goto $bb15;

  corral_source_split_4914:
    assume {:verifier.code 0} true;
    out_$i49 := $add.i32(out_$i48, out_$i35);
    call {:si_unique_call 936} {:cexpr "usecs"} boogie_si_record_i32(out_$i49);
    goto corral_source_split_4915;

  corral_source_split_4913:
    assume {:verifier.code 0} true;
    out_$i48 := $zext.i8.i32(out_$i47);
    goto corral_source_split_4914;

  corral_source_split_4912:
    assume {:verifier.code 0} true;
    out_$i47 := $load.i8($M.0, out_$p46);
    goto corral_source_split_4913;

  corral_source_split_4911:
    assume {:verifier.code 0} true;
    out_$p46 := $add.ref($add.ref(out_$p45, $mul.ref(0, 160)), $mul.ref(139, 1));
    goto corral_source_split_4912;

  corral_source_split_4910:
    assume {:verifier.code 0} true;
    out_$p45 := $load.ref($M.0, out_$p44);
    goto corral_source_split_4911;

  corral_source_split_4909:
    assume {:verifier.code 0} true;
    out_$p44 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_4910;

  $bb13:
    assume out_$i43 == 1;
    goto corral_source_split_4909;

  corral_source_split_4907:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13, $bb14;

  corral_source_split_4906:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i42, 0);
    goto corral_source_split_4907;

  corral_source_split_4905:
    assume {:verifier.code 0} true;
    out_$i42 := $and.i32(out_$i39, out_$i41);
    goto corral_source_split_4906;

  corral_source_split_4904:
    assume {:verifier.code 0} true;
    out_$i41 := $shl.i32(1, out_$i40);
    goto corral_source_split_4905;

  corral_source_split_4903:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i32(in_$i2, 8);
    goto corral_source_split_4904;

  corral_source_split_4902:
    assume {:verifier.code 0} true;
    out_$i39 := $load.i32($M.0, out_$p38);
    goto corral_source_split_4903;

  corral_source_split_4901:
    assume {:verifier.code 0} true;
    out_$p38 := $add.ref($add.ref(out_$p37, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4902;

  corral_source_split_4900:
    assume {:verifier.code 0} true;
    out_$p37 := $load.ref($M.0, out_$p36);
    goto corral_source_split_4901;

  corral_source_split_4899:
    assume {:verifier.code 0} true;
    out_$p36 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_4900;

  $bb12:
    assume {:verifier.code 0} true;
    goto corral_source_split_4899;

  $bb11:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    out_$i35 := out_$i16;
    goto $bb12;

  corral_source_split_4897:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i34;
    goto $bb12;

  corral_source_split_4896:
    assume {:verifier.code 0} true;
    out_$i34 := $add.i32(out_$i33, out_$i16);
    call {:si_unique_call 935} {:cexpr "usecs"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_4897;

  corral_source_split_4895:
    assume {:verifier.code 0} true;
    out_$i33 := $zext.i8.i32(out_$i32);
    goto corral_source_split_4896;

  corral_source_split_4894:
    assume {:verifier.code 0} true;
    out_$i32 := $load.i8($M.0, out_$p31);
    goto corral_source_split_4895;

  corral_source_split_4893:
    assume {:verifier.code 0} true;
    out_$p31 := $add.ref($add.ref(out_$p30, $mul.ref(0, 160)), $mul.ref(137, 1));
    goto corral_source_split_4894;

  corral_source_split_4892:
    assume {:verifier.code 0} true;
    out_$p30 := $load.ref($M.0, out_$p29);
    goto corral_source_split_4893;

  corral_source_split_4891:
    assume {:verifier.code 0} true;
    out_$p29 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_4892;

  $bb10:
    assume out_$i28 == 1;
    goto corral_source_split_4891;

  corral_source_split_4889:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb10, $bb11;

  corral_source_split_4888:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_4889;

  corral_source_split_4887:
    assume {:verifier.code 0} true;
    out_$i27 := $and.i32(out_$i25, out_$i26);
    goto corral_source_split_4888;

  corral_source_split_4886:
    assume {:verifier.code 0} true;
    out_$i26 := $shl.i32(1, in_$i2);
    goto corral_source_split_4887;

  corral_source_split_4885:
    assume {:verifier.code 0} true;
    out_$i25 := $load.i32($M.0, out_$p24);
    goto corral_source_split_4886;

  corral_source_split_4884:
    assume {:verifier.code 0} true;
    out_$p24 := $add.ref($add.ref(out_$p23, $mul.ref(0, 160)), $mul.ref(8, 1));
    goto corral_source_split_4885;

  corral_source_split_4883:
    assume {:verifier.code 0} true;
    out_$p23 := $load.ref($M.0, out_$p22);
    goto corral_source_split_4884;

  $bb9:
    assume {:verifier.code 0} true;
    out_$p22 := $bitcast.ref.ref(out_$p17);
    goto corral_source_split_4883;

  $bb8:
    assume !(out_$i21 == 1);
    assume {:verifier.code 0} true;
    goto $bb9;

  corral_source_split_4881:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb7:
    assume out_$i21 == 1;
    goto corral_source_split_4881;

  $bb6:
    assume {:verifier.code 0} true;
    out_$i21 := $eq.i32(out_$i20, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  corral_source_split_4879:
    assume {:verifier.code 0} true;
    out_$i20 := $and.i32(out_$i19, 6);
    assume {:verifier.code 0} true;
    goto $bb6;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i19 := $load.i32($M.0, out_$p18);
    goto corral_source_split_4879;

  corral_source_split_4877:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb17_dummy:
    call {:si_unique_call 1} out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i16, out_$p17, out_$p18, out_$i61 := periodic_usecs_loop_$bb4(in_$i2, out_$i19, out_$i20, out_$i21, out_$p22, out_$p23, out_$p24, out_$i25, out_$i26, out_$i27, out_$i28, out_$p29, out_$p30, out_$p31, out_$i32, out_$i33, out_$i34, out_$i35, out_$p36, out_$p37, out_$p38, out_$i39, out_$i40, out_$i41, out_$i42, out_$i43, out_$p44, out_$p45, out_$p46, out_$i47, out_$i48, out_$i49, out_$i50, out_$p51, out_$p52, out_$p54, out_$p55, out_$p56, out_$p57, out_$p58, out_$i59, out_$i60, out_$i16, out_$p17, out_$p18, out_$i61);
    return;

  exit:
    return;
}



procedure periodic_usecs_loop_$bb4(in_$i2: i32, in_$i19: i32, in_$i20: i32, in_$i21: i1, in_$p22: ref, in_$p23: ref, in_$p24: ref, in_$i25: i32, in_$i26: i32, in_$i27: i32, in_$i28: i1, in_$p29: ref, in_$p30: ref, in_$p31: ref, in_$i32: i8, in_$i33: i32, in_$i34: i32, in_$i35: i32, in_$p36: ref, in_$p37: ref, in_$p38: ref, in_$i39: i32, in_$i40: i32, in_$i41: i32, in_$i42: i32, in_$i43: i1, in_$p44: ref, in_$p45: ref, in_$p46: ref, in_$i47: i8, in_$i48: i32, in_$i49: i32, in_$i50: i32, in_$p51: ref, in_$p52: ref, in_$p54: ref, in_$p55: ref, in_$p56: ref, in_$p57: ref, in_$p58: ref, in_$i59: i64, in_$i60: i1, in_$i16: i32, in_$p17: ref, in_$p18: ref, in_$i61: i32) returns (out_$i19: i32, out_$i20: i32, out_$i21: i1, out_$p22: ref, out_$p23: ref, out_$p24: ref, out_$i25: i32, out_$i26: i32, out_$i27: i32, out_$i28: i1, out_$p29: ref, out_$p30: ref, out_$p31: ref, out_$i32: i8, out_$i33: i32, out_$i34: i32, out_$i35: i32, out_$p36: ref, out_$p37: ref, out_$p38: ref, out_$i39: i32, out_$i40: i32, out_$i41: i32, out_$i42: i32, out_$i43: i1, out_$p44: ref, out_$p45: ref, out_$p46: ref, out_$i47: i8, out_$i48: i32, out_$i49: i32, out_$i50: i32, out_$p51: ref, out_$p52: ref, out_$p54: ref, out_$p55: ref, out_$p56: ref, out_$p57: ref, out_$p58: ref, out_$i59: i64, out_$i60: i1, out_$i16: i32, out_$p17: ref, out_$p18: ref, out_$i61: i32);



implementation qh_update_loop_$bb3()
{

  entry:
    goto $bb3, exit;

  $bb3:
    assume {:verifier.code 0} true;
    goto $bb3_dummy;

  $bb3_dummy:
    call {:si_unique_call 1} qh_update_loop_$bb3();
    return;

  exit:
    return;
}



procedure qh_update_loop_$bb3();



implementation qh_urb_transaction_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i19: i32, in_$i92: i32, in_$i93: i32, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i64, in_$i99: i32, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i64, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$i128: i32, in_$i129: i64, in_$i130: i64, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$i134: i64, in_$i135: i64, in_$i136: i1, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i32, in_$p143: ref, in_$p144: ref) returns (out_$i93: i32, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i64, out_$i99: i32, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i64, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$i128: i32, out_$i129: i64, out_$i130: i64, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$i134: i64, out_$i135: i64, out_$i136: i1, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i32, out_$p143: ref, out_$p144: ref)
{

  entry:
    out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144 := in_$i93, in_$i94, in_$p95, in_$i96, in_$p97, in_$i98, in_$i99, in_$p100, in_$i101, in_$i102, in_$i103, in_$i104, in_$p105, in_$i106, in_$p107, in_$p108, in_$p109, in_$i110, in_$p111, in_$i112, in_$i113, in_$i114, in_$i115, in_$i116, in_$i117, in_$i118, in_$i119, in_$i120, in_$i121, in_$i122, in_$p123, in_$i124, in_$p125, in_$i126, in_$i127, in_$i128, in_$i129, in_$i130, in_$i131, in_$i132, in_$i133, in_$i134, in_$i135, in_$i136, in_$i137, in_$i138, in_$p139, in_$p140, in_$i141, in_$i142, in_$p143, in_$p144;
    goto $bb35, exit;

  $bb35:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_5595;

  corral_source_split_5667:
    assume {:verifier.code 0} true;
    out_$i93, out_$i94, out_$p95, out_$i96, out_$p97 := out_$i101, out_$i103, out_$p125, out_$i117, out_$p105;
    goto corral_source_split_5667_dummy;

  corral_source_split_5666:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1084} list_add_tail(out_$p144, in_$p2);
    goto corral_source_split_5667;

  corral_source_split_5665:
    assume {:verifier.code 0} true;
    out_$p144 := $add.ref($add.ref(out_$p125, $mul.ref(0, 136)), $mul.ref(64, 1));
    goto corral_source_split_5666;

  corral_source_split_5664:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p143, out_$i142);
    goto corral_source_split_5665;

  corral_source_split_5663:
    assume {:verifier.code 0} true;
    out_$p143 := $add.ref($add.ref(out_$p95, $mul.ref(0, 136)), $mul.ref(0, 1));
    goto corral_source_split_5664;

  corral_source_split_5662:
    assume {:verifier.code 0} true;
    out_$i142 := $trunc.i64.i32(out_$i141);
    goto corral_source_split_5663;

  corral_source_split_5661:
    assume {:verifier.code 0} true;
    out_$i141 := $load.i64($M.0, out_$p140);
    goto corral_source_split_5662;

  corral_source_split_5660:
    assume {:verifier.code 0} true;
    out_$p140 := $add.ref($add.ref(out_$p125, $mul.ref(0, 136)), $mul.ref(56, 1));
    goto corral_source_split_5661;

  corral_source_split_5659:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p139, in_$p1);
    goto corral_source_split_5660;

  $bb54:
    assume {:verifier.code 0} true;
    out_$p139 := $add.ref($add.ref(out_$p125, $mul.ref(0, 136)), $mul.ref(80, 1));
    goto corral_source_split_5659;

  $bb50:
    assume !(out_$i136 == 1);
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb52:
    assume !(out_$i138 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  corral_source_split_5655:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb52;

  corral_source_split_5654:
    assume {:verifier.code 0} true;
    out_$i138 := $ne.i32(out_$i137, 0);
    goto corral_source_split_5655;

  corral_source_split_5653:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1082} out_$i137 := oxu_buf_alloc(in_$p0, out_$p125, out_$i101);
    call {:si_unique_call 1083} {:cexpr "ret"} boogie_si_record_i32(out_$i137);
    goto corral_source_split_5654;

  $bb49:
    assume out_$i136 == 1;
    goto corral_source_split_5653;

  corral_source_split_5651:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb49, $bb50;

  corral_source_split_5650:
    assume {:verifier.code 0} true;
    out_$i136 := $ne.i64(out_$i135, 0);
    goto corral_source_split_5651;

  corral_source_split_5649:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1080} out_$i135 := ldv__builtin_expect(out_$i134, 1);
    call {:si_unique_call 1081} {:cexpr "tmp___4"} boogie_si_record_i64(out_$i135);
    goto corral_source_split_5650;

  corral_source_split_5648:
    assume {:verifier.code 0} true;
    out_$i134 := $sext.i32.i64(out_$i133);
    goto corral_source_split_5649;

  corral_source_split_5647:
    assume {:verifier.code 0} true;
    out_$i133 := $zext.i1.i32(out_$i132);
    goto corral_source_split_5648;

  $bb48:
    assume {:verifier.code 0} true;
    out_$i132 := $sgt.i32(out_$i101, 0);
    goto corral_source_split_5647;

  $bb47:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb48;

  corral_source_split_5643:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb47;

  corral_source_split_5642:
    assume {:verifier.code 0} true;
    out_$i131 := $ne.i64(out_$i130, 0);
    goto corral_source_split_5643;

  corral_source_split_5641:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1078} out_$i130 := ldv__builtin_expect(out_$i129, 0);
    call {:si_unique_call 1079} {:cexpr "tmp___3"} boogie_si_record_i64(out_$i130);
    goto corral_source_split_5642;

  corral_source_split_5640:
    assume {:verifier.code 0} true;
    out_$i129 := $sext.i32.i64(out_$i128);
    goto corral_source_split_5641;

  corral_source_split_5639:
    assume {:verifier.code 0} true;
    out_$i128 := $zext.i1.i32(out_$i127);
    goto corral_source_split_5640;

  corral_source_split_5638:
    assume {:verifier.code 0} true;
    out_$i127 := $eq.i64(out_$i126, 0);
    goto corral_source_split_5639;

  corral_source_split_5637:
    assume {:verifier.code 0} true;
    out_$i126 := $p2i.ref.i64(out_$p125);
    goto corral_source_split_5638;

  $bb45:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1077} out_$p125 := ehci_qtd_alloc(in_$p0);
    goto corral_source_split_5637;

  $bb43:
    assume !(out_$i122 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_5628:
    assume {:verifier.code 0} true;
    out_$p123, out_$i124 := out_$p95, out_$i117;
    assume true;
    goto $bb43;

  corral_source_split_5627:
    assume {:verifier.code 0} true;
    out_$i122 := $ne.i64(out_$i121, 0);
    goto corral_source_split_5628;

  corral_source_split_5626:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1075} out_$i121 := ldv__builtin_expect(out_$i120, 1);
    call {:si_unique_call 1076} {:cexpr "tmp___2"} boogie_si_record_i64(out_$i121);
    goto corral_source_split_5627;

  corral_source_split_5625:
    assume {:verifier.code 0} true;
    out_$i120 := $sext.i32.i64(out_$i119);
    goto corral_source_split_5626;

  corral_source_split_5624:
    assume {:verifier.code 0} true;
    out_$i119 := $zext.i1.i32(out_$i118);
    goto corral_source_split_5625;

  corral_source_split_5623:
    assume {:verifier.code 0} true;
    out_$i118 := $sle.i32(out_$i101, 0);
    goto corral_source_split_5624;

  $bb41:
    assume {:verifier.code 0} true;
    goto corral_source_split_5623;

  $bb40:
    assume !(out_$i115 == 1);
    assume {:verifier.code 0} true;
    out_$i117 := out_$i96;
    goto $bb41;

  corral_source_split_5621:
    assume {:verifier.code 0} true;
    out_$i117 := out_$i116;
    goto $bb41;

  corral_source_split_5620:
    assume {:verifier.code 0} true;
    out_$i116 := $xor.i32(out_$i96, $sub.i32(0, 2147483648));
    call {:si_unique_call 1074} {:cexpr "token"} boogie_si_record_i32(out_$i116);
    goto corral_source_split_5621;

  $bb39:
    assume out_$i115 == 1;
    goto corral_source_split_5620;

  corral_source_split_5618:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb39, $bb40;

  corral_source_split_5617:
    assume {:verifier.code 0} true;
    out_$i115 := $eq.i32(out_$i114, 0);
    goto corral_source_split_5618;

  corral_source_split_5616:
    assume {:verifier.code 0} true;
    out_$i114 := $and.i32(out_$i113, in_$i92);
    goto corral_source_split_5617;

  corral_source_split_5615:
    assume {:verifier.code 0} true;
    out_$i113 := $add.i32(out_$i112, out_$i99);
    goto corral_source_split_5616;

  $bb38:
    assume {:verifier.code 0} true;
    out_$i112 := $add.i32(in_$i92, $sub.i32(0, 1));
    goto corral_source_split_5615;

  $bb37:
    assume !(out_$i106 == 1);
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_5613:
    assume {:verifier.code 0} true;
    goto $bb38;

  corral_source_split_5612:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p111, out_$i110);
    goto corral_source_split_5613;

  corral_source_split_5611:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(out_$p95, $mul.ref(0, 136)), $mul.ref(4, 1));
    goto corral_source_split_5612;

  corral_source_split_5610:
    assume {:verifier.code 0} true;
    out_$i110 := $load.i32($M.0, out_$p109);
    goto corral_source_split_5611;

  corral_source_split_5609:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref(out_$p108, $mul.ref(0, 160)), $mul.ref(20, 1));
    goto corral_source_split_5610;

  corral_source_split_5608:
    assume {:verifier.code 0} true;
    out_$p108 := $load.ref($M.0, out_$p107);
    goto corral_source_split_5609;

  corral_source_split_5607:
    assume {:verifier.code 0} true;
    out_$p107 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(376, 1));
    goto corral_source_split_5608;

  $bb36:
    assume out_$i106 == 1;
    goto corral_source_split_5607;

  corral_source_split_5605:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  corral_source_split_5604:
    assume {:verifier.code 0} true;
    out_$i106 := $ne.i32(in_$i19, 0);
    goto corral_source_split_5605;

  corral_source_split_5603:
    assume {:verifier.code 0} true;
    out_$p105 := $add.ref(out_$p97, $mul.ref(out_$i104, 1));
    goto corral_source_split_5604;

  corral_source_split_5602:
    assume {:verifier.code 0} true;
    out_$i104 := $sext.i32.i64(out_$i99);
    goto corral_source_split_5603;

  corral_source_split_5601:
    assume {:verifier.code 0} true;
    out_$i103 := $add.i64(out_$i102, out_$i94);
    call {:si_unique_call 1073} {:cexpr "buf"} boogie_si_record_i64(out_$i103);
    goto corral_source_split_5602;

  corral_source_split_5600:
    assume {:verifier.code 0} true;
    out_$i102 := $sext.i32.i64(out_$i99);
    goto corral_source_split_5601;

  corral_source_split_5599:
    assume {:verifier.code 0} true;
    out_$i101 := $sub.i32(out_$i93, out_$i99);
    call {:si_unique_call 1072} {:cexpr "len"} boogie_si_record_i32(out_$i101);
    goto corral_source_split_5600;

  corral_source_split_5598:
    assume {:verifier.code 0} true;
    $M.0 := $store.ref($M.0, out_$p100, out_$p97);
    goto corral_source_split_5599;

  corral_source_split_5597:
    assume {:verifier.code 0} true;
    out_$p100 := $add.ref($add.ref(out_$p95, $mul.ref(0, 136)), $mul.ref(120, 1));
    goto corral_source_split_5598;

  corral_source_split_5596:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1070} out_$i99 := qtd_fill(out_$p95, out_$i94, out_$i98, out_$i96, in_$i92);
    call {:si_unique_call 1071} {:cexpr "this_qtd_len"} boogie_si_record_i32(out_$i99);
    goto corral_source_split_5597;

  corral_source_split_5595:
    assume {:verifier.code 0} true;
    out_$i98 := $sext.i32.i64(out_$i93);
    goto corral_source_split_5596;

  corral_source_split_5667_dummy:
    call {:si_unique_call 1} out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144 := qh_urb_transaction_loop_$bb35(in_$p0, in_$p1, in_$p2, in_$i19, in_$i92, out_$i93, out_$i94, out_$p95, out_$i96, out_$p97, out_$i98, out_$i99, out_$p100, out_$i101, out_$i102, out_$i103, out_$i104, out_$p105, out_$i106, out_$p107, out_$p108, out_$p109, out_$i110, out_$p111, out_$i112, out_$i113, out_$i114, out_$i115, out_$i116, out_$i117, out_$i118, out_$i119, out_$i120, out_$i121, out_$i122, out_$p123, out_$i124, out_$p125, out_$i126, out_$i127, out_$i128, out_$i129, out_$i130, out_$i131, out_$i132, out_$i133, out_$i134, out_$i135, out_$i136, out_$i137, out_$i138, out_$p139, out_$p140, out_$i141, out_$i142, out_$p143, out_$p144);
    return;

  exit:
    return;
}



procedure qh_urb_transaction_loop_$bb35(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$i19: i32, in_$i92: i32, in_$i93: i32, in_$i94: i64, in_$p95: ref, in_$i96: i32, in_$p97: ref, in_$i98: i64, in_$i99: i32, in_$p100: ref, in_$i101: i32, in_$i102: i64, in_$i103: i64, in_$i104: i64, in_$p105: ref, in_$i106: i1, in_$p107: ref, in_$p108: ref, in_$p109: ref, in_$i110: i32, in_$p111: ref, in_$i112: i32, in_$i113: i32, in_$i114: i32, in_$i115: i1, in_$i116: i32, in_$i117: i32, in_$i118: i1, in_$i119: i32, in_$i120: i64, in_$i121: i64, in_$i122: i1, in_$p123: ref, in_$i124: i32, in_$p125: ref, in_$i126: i64, in_$i127: i1, in_$i128: i32, in_$i129: i64, in_$i130: i64, in_$i131: i1, in_$i132: i1, in_$i133: i32, in_$i134: i64, in_$i135: i64, in_$i136: i1, in_$i137: i32, in_$i138: i1, in_$p139: ref, in_$p140: ref, in_$i141: i64, in_$i142: i32, in_$p143: ref, in_$p144: ref) returns (out_$i93: i32, out_$i94: i64, out_$p95: ref, out_$i96: i32, out_$p97: ref, out_$i98: i64, out_$i99: i32, out_$p100: ref, out_$i101: i32, out_$i102: i64, out_$i103: i64, out_$i104: i64, out_$p105: ref, out_$i106: i1, out_$p107: ref, out_$p108: ref, out_$p109: ref, out_$i110: i32, out_$p111: ref, out_$i112: i32, out_$i113: i32, out_$i114: i32, out_$i115: i1, out_$i116: i32, out_$i117: i32, out_$i118: i1, out_$i119: i32, out_$i120: i64, out_$i121: i64, out_$i122: i1, out_$p123: ref, out_$i124: i32, out_$p125: ref, out_$i126: i64, out_$i127: i1, out_$i128: i32, out_$i129: i64, out_$i130: i64, out_$i131: i1, out_$i132: i1, out_$i133: i32, out_$i134: i64, out_$i135: i64, out_$i136: i1, out_$i137: i32, out_$i138: i1, out_$p139: ref, out_$p140: ref, out_$i141: i64, out_$i142: i32, out_$p143: ref, out_$p144: ref);
  modifies $M.0, $M.22;



implementation intr_submit_loop_$bb16()
{

  entry:
    goto $bb16, exit;

  $bb16:
    assume {:verifier.code 0} true;
    goto $bb16_dummy;

  $bb16_dummy:
    call {:si_unique_call 1} intr_submit_loop_$bb16();
    return;

  exit:
    return;
}



procedure intr_submit_loop_$bb16();



implementation qtd_list_free_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p10: ref, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p10: ref, out_$p11: ref)
{

  entry:
    out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p10, out_$p11 := in_$p12, in_$p13, in_$p14, in_$p15, in_$p16, in_$i17, in_$i18, in_$p10, in_$p11;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_6066;

  $bb6:
    assume out_$i18 == 1;
    assume {:verifier.code 0} true;
    out_$p10, out_$p11 := out_$p16, out_$p10;
    goto $bb6_dummy;

  corral_source_split_6076:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_6075:
    assume {:verifier.code 0} true;
    out_$i18 := $ne.i64(out_$i17, in_$i8);
    goto corral_source_split_6076;

  corral_source_split_6074:
    assume {:verifier.code 0} true;
    out_$i17 := $p2i.ref.i64(out_$p10);
    goto corral_source_split_6075;

  corral_source_split_6073:
    assume {:verifier.code 0} true;
    out_$p16 := $load.ref($M.0, out_$p15);
    goto corral_source_split_6074;

  corral_source_split_6072:
    assume {:verifier.code 0} true;
    out_$p15 := $add.ref($add.ref(out_$p10, $mul.ref(0, 16)), $mul.ref(0, 1));
    goto corral_source_split_6073;

  corral_source_split_6071:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1169} oxu_qtd_free(in_$p0, out_$p13);
    goto corral_source_split_6072;

  corral_source_split_6070:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1168} list_del(out_$p14);
    goto corral_source_split_6071;

  corral_source_split_6069:
    assume {:verifier.code 0} true;
    out_$p14 := $add.ref($add.ref(out_$p12, $mul.ref($sub.ref(0, 64), 136)), $mul.ref(64, 1));
    goto corral_source_split_6070;

  corral_source_split_6068:
    assume {:verifier.code 0} true;
    out_$p13 := $add.ref(out_$p12, $mul.ref($sub.ref(0, 64), 136));
    goto corral_source_split_6069;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p12 := $bitcast.ref.ref(out_$p11);
    goto corral_source_split_6068;

  corral_source_split_6066:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p10, out_$p11 := qtd_list_free_loop_$bb4(in_$p0, in_$i8, out_$p12, out_$p13, out_$p14, out_$p15, out_$p16, out_$i17, out_$i18, out_$p10, out_$p11);
    return;

  exit:
    return;
}



procedure qtd_list_free_loop_$bb4(in_$p0: ref, in_$i8: i64, in_$p12: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p16: ref, in_$i17: i64, in_$i18: i1, in_$p10: ref, in_$p11: ref) returns (out_$p12: ref, out_$p13: ref, out_$p14: ref, out_$p15: ref, out_$p16: ref, out_$i17: i64, out_$i18: i1, out_$p10: ref, out_$p11: ref);
  modifies $M.0, $M.22;



implementation oxu_buf_alloc_loop_$bb18(in_$p0: ref, in_$i13: i32, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i31: i32, in_$i32: i1, in_$i21: i32, in_$i33: i32, in_$i18: i32) returns (out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i31: i32, out_$i32: i1, out_$i21: i32, out_$i33: i32)
{

  entry:
    out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i21, out_$i33 := in_$i22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i31, in_$i32, in_$i21, in_$i33;
    goto $bb18, exit;

  $bb18:
    assume {:verifier.code 0} true;
    goto corral_source_split_6916;

  $bb24:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i31;
    goto $bb24_dummy;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    assume true;
    goto $bb24;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i31, in_$i13);
    goto corral_source_split_6931;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1273} {:cexpr "j"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6930;

  $bb21:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb21;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(49, 1)), $mul.ref(out_$i23, 1));
    goto corral_source_split_6920;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_6919;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(in_$i18, out_$i21);
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb24_dummy:
    call {:si_unique_call 1} out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i21, out_$i33 := oxu_buf_alloc_loop_$bb18(in_$p0, in_$i13, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i21, out_$i33, in_$i18);
    return;

  exit:
    return;
}



procedure oxu_buf_alloc_loop_$bb18(in_$p0: ref, in_$i13: i32, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i31: i32, in_$i32: i1, in_$i21: i32, in_$i33: i32, in_$i18: i32) returns (out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i31: i32, out_$i32: i1, out_$i21: i32, out_$i33: i32);



implementation oxu_buf_alloc_loop_$bb13(in_$p0: ref, in_$i13: i32, in_$i19: i1, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i31: i32, in_$i32: i1, in_$i21: i32, in_$i33: i32, in_$i20: i32, in_$i30: i32, in_$i34: i1, in_$i35: i32, in_$i54: i64, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i18: i32) returns (out_$i19: i1, out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i31: i32, out_$i32: i1, out_$i21: i32, out_$i33: i32, out_$i20: i32, out_$i30: i32, out_$i34: i1, out_$i35: i32, out_$i54: i64, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i18: i32)
{

  entry:
    out_$i19, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i21, out_$i33, out_$i20, out_$i30, out_$i34, out_$i35, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i18 := in_$i19, in_$i22, in_$i23, in_$p25, in_$i26, in_$i27, in_$i28, in_$i29, in_$i31, in_$i32, in_$i21, in_$i33, in_$i20, in_$i30, in_$i34, in_$i35, in_$i54, in_$p56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i18;
    goto $bb13, exit;

  $bb13:
    assume {:verifier.code 0} true;
    goto corral_source_split_6910;

  $bb34:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i18 := out_$i61;
    goto $bb34_dummy;

  corral_source_split_6972:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_6971:
    assume {:verifier.code 0} true;
    out_$i62 := $sle.i32(out_$i61, 7);
    goto corral_source_split_6972;

  corral_source_split_6970:
    assume {:verifier.code 0} true;
    out_$i61 := $add.i32(out_$i60, out_$i18);
    call {:si_unique_call 1277} {:cexpr "i"} boogie_si_record_i32(out_$i61);
    goto corral_source_split_6971;

  $bb33:
    assume {:verifier.code 0} true;
    goto corral_source_split_6970;

  corral_source_split_6968:
    assume {:verifier.code 0} true;
    out_$i60 := out_$i58;
    goto $bb33;

  corral_source_split_6966:
    assume {:verifier.code 0} true;
    out_$i60 := in_$i13;
    goto $bb33;

  $bb31:
    assume out_$i59 == 1;
    goto corral_source_split_6966;

  corral_source_split_6941:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_6940:
    assume {:verifier.code 0} true;
    out_$i59 := $sgt.i32(in_$i13, out_$i58);
    goto corral_source_split_6941;

  corral_source_split_6939:
    assume {:verifier.code 0} true;
    out_$i58 := $zext.i8.i32(out_$i57);
    call {:si_unique_call 1274} {:cexpr "_max2"} boogie_si_record_i32(out_$i58);
    goto corral_source_split_6940;

  corral_source_split_6938:
    assume {:verifier.code 0} true;
    out_$i57 := $load.i8($M.0, out_$p56);
    goto corral_source_split_6939;

  corral_source_split_6937:
    assume {:verifier.code 0} true;
    out_$p56 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(49, 1)), $mul.ref(out_$i54, 1));
    goto corral_source_split_6938;

  $bb29:
    assume {:verifier.code 0} true;
    out_$i54 := $sext.i32.i64(out_$i18);
    goto corral_source_split_6937;

  corral_source_split_6935:
    assume {:verifier.code 0} true;
    goto $bb29;

  $bb27:
    assume out_$i34 == 1;
    goto corral_source_split_6935;

  corral_source_split_6928:
    assume {:verifier.code 0} true;
    out_$i35 := out_$i18;
    assume true;
    goto $bb27;

  corral_source_split_6927:
    assume {:verifier.code 0} true;
    out_$i34 := $ne.i32(out_$i30, in_$i13);
    goto corral_source_split_6928;

  $bb22:
    assume {:verifier.code 0} true;
    goto corral_source_split_6927;

  $bb26:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i20;
    goto $bb22;

  corral_source_split_6925:
    assume {:verifier.code 0} true;
    out_$i30 := out_$i29;
    goto $bb22;

  $bb20:
    assume out_$i28 == 1;
    assume {:verifier.code 0} true;
    goto corral_source_split_6925;

  corral_source_split_6923:
    assume {:verifier.code 0} true;
    out_$i29 := out_$i21;
    assume true;
    goto $bb20, $bb21;

  corral_source_split_6922:
    assume {:verifier.code 0} true;
    out_$i28 := $ne.i32(out_$i27, 0);
    goto corral_source_split_6923;

  corral_source_split_6921:
    assume {:verifier.code 0} true;
    out_$i27 := $zext.i8.i32(out_$i26);
    goto corral_source_split_6922;

  corral_source_split_6920:
    assume {:verifier.code 0} true;
    out_$i26 := $load.i8($M.0, out_$p25);
    goto corral_source_split_6921;

  corral_source_split_6919:
    assume {:verifier.code 0} true;
    out_$p25 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(49, 1)), $mul.ref(out_$i23, 1));
    goto corral_source_split_6920;

  corral_source_split_6918:
    assume {:verifier.code 0} true;
    out_$i23 := $sext.i32.i64(out_$i22);
    goto corral_source_split_6919;

  $bb19:
    assume {:verifier.code 0} true;
    out_$i22 := $add.i32(out_$i18, out_$i21);
    goto corral_source_split_6918;

  corral_source_split_6916:
    assume {:verifier.code 0} true;
    goto $bb19;

  $bb18:
    call out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i21, out_$i33 := oxu_buf_alloc_loop_$bb18(in_$p0, in_$i13, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i21, out_$i33, out_$i18);
    goto $bb18_last;

  $bb18_last:
    assume {:verifier.code 0} true;
    goto corral_source_split_6916;

  corral_source_split_6914:
    assume {:verifier.code 0} true;
    out_$i21 := 0;
    goto $bb18;

  $bb24:
    assume out_$i32 == 1;
    assume {:verifier.code 0} true;
    out_$i21 := out_$i31;
    assume false;
    return;

  corral_source_split_6931:
    assume {:verifier.code 0} true;
    out_$i33 := out_$i31;
    assume true;
    goto $bb24, $bb25;

  corral_source_split_6930:
    assume {:verifier.code 0} true;
    out_$i32 := $slt.i32(out_$i31, in_$i13);
    goto corral_source_split_6931;

  $bb23:
    assume {:verifier.code 0} true;
    out_$i31 := $add.i32(out_$i21, 1);
    call {:si_unique_call 1273} {:cexpr "j"} boogie_si_record_i32(out_$i31);
    goto corral_source_split_6930;

  $bb21:
    assume !(out_$i28 == 1);
    assume {:verifier.code 0} true;
    goto $bb23;

  $bb15:
    assume out_$i19 == 1;
    goto corral_source_split_6914;

  corral_source_split_6912:
    assume {:verifier.code 0} true;
    out_$i20 := 0;
    assume true;
    goto $bb15, $bb16;

  $bb14:
    assume {:verifier.code 0} true;
    out_$i19 := $slt.i32(0, in_$i13);
    goto corral_source_split_6912;

  corral_source_split_6910:
    assume {:verifier.code 0} true;
    goto $bb14;

  $bb17:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto $bb26;

  $bb16:
    assume {:verifier.code 0} true;
    assume !(out_$i19 == 1);
    goto $bb17;

  corral_source_split_6933:
    assume {:verifier.code 0} true;
    out_$i20 := out_$i33;
    goto $bb17;

  $bb25:
    assume !(out_$i32 == 1);
    assume {:verifier.code 0} true;
    goto corral_source_split_6933;

  $bb32:
    assume !(out_$i59 == 1);
    goto corral_source_split_6968;

  $bb34_dummy:
    call {:si_unique_call 1} out_$i19, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i21, out_$i33, out_$i20, out_$i30, out_$i34, out_$i35, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i18 := oxu_buf_alloc_loop_$bb13(in_$p0, in_$i13, out_$i19, out_$i22, out_$i23, out_$p25, out_$i26, out_$i27, out_$i28, out_$i29, out_$i31, out_$i32, out_$i21, out_$i33, out_$i20, out_$i30, out_$i34, out_$i35, out_$i54, out_$p56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i18);
    return;

  exit:
    return;
}



procedure oxu_buf_alloc_loop_$bb13(in_$p0: ref, in_$i13: i32, in_$i19: i1, in_$i22: i32, in_$i23: i64, in_$p25: ref, in_$i26: i8, in_$i27: i32, in_$i28: i1, in_$i29: i32, in_$i31: i32, in_$i32: i1, in_$i21: i32, in_$i33: i32, in_$i20: i32, in_$i30: i32, in_$i34: i1, in_$i35: i32, in_$i54: i64, in_$p56: ref, in_$i57: i8, in_$i58: i32, in_$i59: i1, in_$i60: i32, in_$i61: i32, in_$i62: i1, in_$i18: i32) returns (out_$i19: i1, out_$i22: i32, out_$i23: i64, out_$p25: ref, out_$i26: i8, out_$i27: i32, out_$i28: i1, out_$i29: i32, out_$i31: i32, out_$i32: i1, out_$i21: i32, out_$i33: i32, out_$i20: i32, out_$i30: i32, out_$i34: i1, out_$i35: i32, out_$i54: i64, out_$p56: ref, out_$i57: i8, out_$i58: i32, out_$i59: i1, out_$i60: i32, out_$i61: i32, out_$i62: i1, out_$i18: i32);



implementation oxu_buf_alloc_loop_$bb8(in_$i11: i32, in_$i15: i32, in_$i16: i1, in_$i14: i32, in_$i17: i32) returns (out_$i15: i32, out_$i16: i1, out_$i14: i32, out_$i17: i32)
{

  entry:
    out_$i15, out_$i16, out_$i14, out_$i17 := in_$i15, in_$i16, in_$i14, in_$i17;
    goto $bb8, exit;

  $bb8:
    assume {:verifier.code 0} true;
    goto corral_source_split_6903;

  $bb10:
    assume out_$i16 == 1;
    assume {:verifier.code 0} true;
    out_$i14 := out_$i15;
    goto $bb10_dummy;

  corral_source_split_6906:
    assume {:verifier.code 0} true;
    out_$i17 := out_$i15;
    assume true;
    goto $bb10;

  corral_source_split_6905:
    assume {:verifier.code 0} true;
    out_$i16 := $slt.i32(out_$i15, in_$i11);
    goto corral_source_split_6906;

  $bb9:
    assume {:verifier.code 0} true;
    out_$i15 := $shl.i32(out_$i14, 1);
    call {:si_unique_call 1272} {:cexpr "a_blocks"} boogie_si_record_i32(out_$i15);
    goto corral_source_split_6905;

  corral_source_split_6903:
    assume {:verifier.code 0} true;
    goto $bb9;

  $bb10_dummy:
    call {:si_unique_call 1} out_$i15, out_$i16, out_$i14, out_$i17 := oxu_buf_alloc_loop_$bb8(in_$i11, out_$i15, out_$i16, out_$i14, out_$i17);
    return;

  exit:
    return;
}



procedure oxu_buf_alloc_loop_$bb8(in_$i11: i32, in_$i15: i32, in_$i16: i1, in_$i14: i32, in_$i17: i32) returns (out_$i15: i32, out_$i16: i1, out_$i14: i32, out_$i17: i32);



implementation qtd_fill_loop_$bb7(in_$p0: ref, in_$i2: i64, in_$i31: i32, in_$i32: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i64, in_$i41: i32, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i46: i32, in_$i45: i32, in_$i47: i32, in_$i48: i64, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i28: i64, in_$i29: i32, in_$i30: i32, in_$i52: i32) returns (out_$i31: i32, out_$i32: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i64, out_$i41: i32, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i46: i32, out_$i45: i32, out_$i47: i32, out_$i48: i64, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i28: i64, out_$i29: i32, out_$i30: i32, out_$i52: i32)
{

  entry:
    out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i28, out_$i29, out_$i30, out_$i52 := in_$i31, in_$i32, in_$p34, in_$i35, in_$i36, in_$i37, in_$p39, in_$i40, in_$i41, in_$i42, in_$i43, in_$i44, in_$i46, in_$i45, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i28, in_$i29, in_$i30, in_$i52;
    goto $bb7, exit;

  $bb7:
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    assume {:verifier.code 0} true;
    goto corral_source_split_7015;

  $bb12:
    assume out_$i51 == 1;
    assume {:verifier.code 0} true;
    out_$i28, out_$i29, out_$i30 := out_$i40, out_$i45, out_$i47;
    goto $bb12_dummy;

  corral_source_split_7041:
    assume {:verifier.code 0} true;
    out_$i52 := out_$i45;
    assume true;
    goto $bb12;

  corral_source_split_7040:
    assume {:verifier.code 0} true;
    out_$i51 := $and.i1(out_$i49, out_$i50);
    goto corral_source_split_7041;

  corral_source_split_7039:
    assume {:verifier.code 0} true;
    out_$i50 := $sle.i32(out_$i47, 4);
    goto corral_source_split_7040;

  corral_source_split_7038:
    assume {:verifier.code 0} true;
    out_$i49 := $ult.i64(out_$i48, in_$i2);
    goto corral_source_split_7039;

  corral_source_split_7037:
    assume {:verifier.code 0} true;
    out_$i48 := $sext.i32.i64(out_$i45);
    goto corral_source_split_7038;

  corral_source_split_7036:
    assume {:verifier.code 0} true;
    out_$i47 := $add.i32(out_$i30, 1);
    call {:si_unique_call 1293} {:cexpr "i"} boogie_si_record_i32(out_$i47);
    goto corral_source_split_7037;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7036;

  corral_source_split_7034:
    assume {:verifier.code 0} true;
    out_$i46 := $trunc.i64.i32(in_$i2);
    call {:si_unique_call 1292} {:cexpr "count"} boogie_si_record_i32(out_$i46);
    assume {:verifier.code 0} true;
    out_$i45 := out_$i46;
    goto $bb11;

  corral_source_split_7032:
    assume {:verifier.code 0} true;
    out_$i45 := out_$i44;
    goto $bb11;

  corral_source_split_7031:
    assume {:verifier.code 0} true;
    out_$i44 := $add.i32(out_$i29, 4096);
    call {:si_unique_call 1291} {:cexpr "count"} boogie_si_record_i32(out_$i44);
    goto corral_source_split_7032;

  $bb9:
    assume out_$i43 == 1;
    goto corral_source_split_7031;

  corral_source_split_7029:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  corral_source_split_7028:
    assume {:verifier.code 0} true;
    out_$i43 := $ult.i64(out_$i42, in_$i2);
    goto corral_source_split_7029;

  corral_source_split_7027:
    assume {:verifier.code 0} true;
    out_$i42 := $sext.i32.i64(out_$i41);
    goto corral_source_split_7028;

  corral_source_split_7026:
    assume {:verifier.code 0} true;
    out_$i41 := $add.i32(out_$i29, 4096);
    goto corral_source_split_7027;

  corral_source_split_7025:
    assume {:verifier.code 0} true;
    out_$i40 := $add.i64(out_$i28, 4096);
    call {:si_unique_call 1290} {:cexpr "buf"} boogie_si_record_i64(out_$i40);
    goto corral_source_split_7026;

  corral_source_split_7024:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p39, out_$i36);
    goto corral_source_split_7025;

  corral_source_split_7023:
    assume {:verifier.code 0} true;
    out_$p39 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(32, 1)), $mul.ref(out_$i37, 4));
    goto corral_source_split_7024;

  corral_source_split_7022:
    assume {:verifier.code 0} true;
    out_$i37 := $sext.i32.i64(out_$i30);
    goto corral_source_split_7023;

  corral_source_split_7021:
    assume {:verifier.code 0} true;
    out_$i36 := $trunc.i64.i32(out_$i35);
    goto corral_source_split_7022;

  corral_source_split_7020:
    assume {:verifier.code 0} true;
    out_$i35 := $lshr.i64(out_$i28, 32);
    goto corral_source_split_7021;

  corral_source_split_7019:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p34, out_$i31);
    goto corral_source_split_7020;

  corral_source_split_7018:
    assume {:verifier.code 0} true;
    out_$p34 := $add.ref($add.ref($add.ref(in_$p0, $mul.ref(0, 136)), $mul.ref(12, 1)), $mul.ref(out_$i32, 4));
    goto corral_source_split_7019;

  corral_source_split_7017:
    assume {:verifier.code 0} true;
    out_$i32 := $sext.i32.i64(out_$i30);
    goto corral_source_split_7018;

  $bb8:
    assume {:verifier.code 0} true;
    out_$i31 := $trunc.i64.i32(out_$i28);
    goto corral_source_split_7017;

  corral_source_split_7015:
    assume {:verifier.code 0} true;
    goto $bb8;

  $bb10:
    assume !(out_$i43 == 1);
    goto corral_source_split_7034;

  $bb12_dummy:
    call {:si_unique_call 1} out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i28, out_$i29, out_$i30, out_$i52 := qtd_fill_loop_$bb7(in_$p0, in_$i2, out_$i31, out_$i32, out_$p34, out_$i35, out_$i36, out_$i37, out_$p39, out_$i40, out_$i41, out_$i42, out_$i43, out_$i44, out_$i46, out_$i45, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i28, out_$i29, out_$i30, out_$i52);
    return;

  exit:
    return;
}



procedure qtd_fill_loop_$bb7(in_$p0: ref, in_$i2: i64, in_$i31: i32, in_$i32: i64, in_$p34: ref, in_$i35: i64, in_$i36: i32, in_$i37: i64, in_$p39: ref, in_$i40: i64, in_$i41: i32, in_$i42: i64, in_$i43: i1, in_$i44: i32, in_$i46: i32, in_$i45: i32, in_$i47: i32, in_$i48: i64, in_$i49: i1, in_$i50: i1, in_$i51: i1, in_$i28: i64, in_$i29: i32, in_$i30: i32, in_$i52: i32) returns (out_$i31: i32, out_$i32: i64, out_$p34: ref, out_$i35: i64, out_$i36: i32, out_$i37: i64, out_$p39: ref, out_$i40: i64, out_$i41: i32, out_$i42: i64, out_$i43: i1, out_$i44: i32, out_$i46: i32, out_$i45: i32, out_$i47: i32, out_$i48: i64, out_$i49: i1, out_$i50: i1, out_$i51: i1, out_$i28: i64, out_$i29: i32, out_$i30: i32, out_$i52: i32);
  modifies $M.0;



implementation ehci_turn_off_all_ports_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i6: i32)
{

  entry:
    out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i6 := in_$p7, in_$p8, in_$p9, in_$p10, in_$i11, in_$p12, in_$i13, in_$i14, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7061;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i13;
    goto $bb6_dummy;

  corral_source_split_7071:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7070:
    assume {:verifier.code 0} true;
    out_$i14 := $ne.i32(out_$i6, 0);
    goto corral_source_split_7071;

  corral_source_split_7069:
    assume {:verifier.code 0} true;
    out_$i13 := $sub.i32(out_$i6, 1);
    call {:si_unique_call 1298} {:cexpr "port"} boogie_si_record_i32(out_$i13);
    goto corral_source_split_7070;

  corral_source_split_7068:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1297} writel(42, out_$p12);
    goto corral_source_split_7069;

  corral_source_split_7067:
    assume {:verifier.code 0} true;
    out_$p12 := $add.ref(out_$p10, $mul.ref(out_$i11, 1));
    goto corral_source_split_7068;

  corral_source_split_7066:
    assume {:verifier.code 0} true;
    out_$i11 := $sext.i32.i64(out_$i6);
    goto corral_source_split_7067;

  corral_source_split_7065:
    assume {:verifier.code 0} true;
    out_$p10 := $bitcast.ref.ref(out_$p9);
    goto corral_source_split_7066;

  corral_source_split_7064:
    assume {:verifier.code 0} true;
    out_$p9 := $add.ref($add.ref(out_$p8, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_7065;

  corral_source_split_7063:
    assume {:verifier.code 0} true;
    out_$p8 := $load.ref($M.0, out_$p7);
    goto corral_source_split_7064;

  $bb5:
    assume {:verifier.code 0} true;
    out_$p7 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7063;

  corral_source_split_7061:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i6 := ehci_turn_off_all_ports_loop_$bb4(in_$p0, out_$p7, out_$p8, out_$p9, out_$p10, out_$i11, out_$p12, out_$i13, out_$i14, out_$i6);
    return;

  exit:
    return;
}



procedure ehci_turn_off_all_ports_loop_$bb4(in_$p0: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$i11: i64, in_$p12: ref, in_$i13: i32, in_$i14: i1, in_$i6: i32) returns (out_$p7: ref, out_$p8: ref, out_$p9: ref, out_$p10: ref, out_$i11: i64, out_$p12: ref, out_$i13: i32, out_$i14: i1, out_$i6: i32);



implementation ehci_port_power_loop_$bb11(in_$p0: ref, in_$i1: i32, in_$i34: i32, in_$p35: ref, in_$i36: i1, in_$i37: i32, in_$i38: i16, in_$i39: i16, in_$i40: i32, in_$i41: i16, in_$i43: i1, in_$i33: i32, in_vslice_dummy_var_101: i32) returns (out_$i34: i32, out_$p35: ref, out_$i36: i1, out_$i37: i32, out_$i38: i16, out_$i39: i16, out_$i40: i32, out_$i41: i16, out_$i43: i1, out_$i33: i32, out_vslice_dummy_var_101: i32)
{

  entry:
    out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i33, out_vslice_dummy_var_101 := in_$i34, in_$p35, in_$i36, in_$i37, in_$i38, in_$i39, in_$i40, in_$i41, in_$i43, in_$i33, in_vslice_dummy_var_101;
    goto $bb11, exit;

  $bb11:
    assume {:verifier.code 0} true;
    goto corral_source_split_7121;

  $bb13:
    assume out_$i43 == 1;
    assume {:verifier.code 0} true;
    out_$i33 := out_$i34;
    goto $bb13_dummy;

  corral_source_split_7132:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb13;

  corral_source_split_7131:
    assume {:verifier.code 0} true;
    out_$i43 := $ne.i32(out_$i34, 0);
    goto corral_source_split_7132;

  SeqInstr_378:
    goto corral_source_split_7131;

  SeqInstr_377:
    assume assertsPassed;
    goto SeqInstr_378;

  corral_source_split_7130:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1308} out_vslice_dummy_var_101 := oxu_hub_control(out_$p35, out_$i38, 8, out_$i41, $0.ref, 0);
    goto SeqInstr_377;

  corral_source_split_7129:
    assume {:verifier.code 0} true;
    out_$i41 := $trunc.i32.i16(out_$i40);
    goto corral_source_split_7130;

  corral_source_split_7128:
    assume {:verifier.code 0} true;
    out_$i40 := $zext.i16.i32(out_$i39);
    goto corral_source_split_7129;

  corral_source_split_7127:
    assume {:verifier.code 0} true;
    out_$i39 := $trunc.i32.i16(out_$i33);
    goto corral_source_split_7128;

  corral_source_split_7126:
    assume {:verifier.code 0} true;
    out_$i38 := $trunc.i32.i16(out_$i37);
    goto corral_source_split_7127;

  corral_source_split_7125:
    assume {:verifier.code 0} true;
    out_$i37 := (if out_$i36 == 1 then 8963 else 8961);
    goto corral_source_split_7126;

  corral_source_split_7124:
    assume {:verifier.code 0} true;
    out_$i36 := $ne.i32(in_$i1, 0);
    goto corral_source_split_7125;

  corral_source_split_7123:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1307} out_$p35 := oxu_to_hcd(in_$p0);
    goto corral_source_split_7124;

  $bb12:
    assume {:verifier.code 0} true;
    out_$i34 := $sub.i32(out_$i33, 1);
    call {:si_unique_call 1306} {:cexpr "port"} boogie_si_record_i32(out_$i34);
    goto corral_source_split_7123;

  corral_source_split_7121:
    assume {:verifier.code 0} true;
    goto $bb12;

  $bb13_dummy:
    call {:si_unique_call 1} out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i33, out_vslice_dummy_var_101 := ehci_port_power_loop_$bb11(in_$p0, in_$i1, out_$i34, out_$p35, out_$i36, out_$i37, out_$i38, out_$i39, out_$i40, out_$i41, out_$i43, out_$i33, out_vslice_dummy_var_101);
    return;

  exit:
    return;
}



procedure ehci_port_power_loop_$bb11(in_$p0: ref, in_$i1: i32, in_$i34: i32, in_$p35: ref, in_$i36: i1, in_$i37: i32, in_$i38: i16, in_$i39: i16, in_$i40: i32, in_$i41: i16, in_$i43: i1, in_$i33: i32, in_vslice_dummy_var_101: i32) returns (out_$i34: i32, out_$p35: ref, out_$i36: i1, out_$i37: i32, out_$i38: i16, out_$i39: i16, out_$i40: i32, out_$i41: i16, out_$i43: i1, out_$i33: i32, out_vslice_dummy_var_101: i32);
  modifies $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.22, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.24, $M.25, $CurrAddr, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.8, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ehci_mem_init_loop_$bb31(in_$p0: ref, in_$p44: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i47: i32) returns (out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i47: i32)
{

  entry:
    out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i47 := in_$p48, in_$p49, in_$i50, in_$p51, in_$i52, in_$i53, in_$i54, in_$i47;
    goto $bb31, exit;

  $bb31:
    assume {:verifier.code 0} true;
    goto corral_source_split_7650;

  $bb33:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i47 := out_$i52;
    goto $bb33_dummy;

  corral_source_split_7659:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb33;

  corral_source_split_7658:
    assume {:verifier.code 0} true;
    out_$i54 := $ult.i32(out_$i52, out_$i53);
    goto corral_source_split_7659;

  corral_source_split_7657:
    assume {:verifier.code 0} true;
    out_$i53 := $load.i32($M.0, in_$p44);
    goto corral_source_split_7658;

  corral_source_split_7656:
    assume {:verifier.code 0} true;
    out_$i52 := $add.i32(out_$i47, 1);
    call {:si_unique_call 1393} {:cexpr "i"} boogie_si_record_i32(out_$i52);
    goto corral_source_split_7657;

  corral_source_split_7655:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p51, 1);
    goto corral_source_split_7656;

  corral_source_split_7654:
    assume {:verifier.code 0} true;
    out_$p51 := $add.ref(out_$p49, $mul.ref(out_$i50, 4));
    goto corral_source_split_7655;

  corral_source_split_7653:
    assume {:verifier.code 0} true;
    out_$i50 := $sext.i32.i64(out_$i47);
    goto corral_source_split_7654;

  corral_source_split_7652:
    assume {:verifier.code 0} true;
    out_$p49 := $load.ref($M.0, out_$p48);
    goto corral_source_split_7653;

  $bb32:
    assume {:verifier.code 0} true;
    out_$p48 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(400, 1));
    goto corral_source_split_7652;

  corral_source_split_7650:
    assume {:verifier.code 0} true;
    goto $bb32;

  $bb33_dummy:
    call {:si_unique_call 1} out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i47 := ehci_mem_init_loop_$bb31(in_$p0, in_$p44, out_$p48, out_$p49, out_$i50, out_$p51, out_$i52, out_$i53, out_$i54, out_$i47);
    return;

  exit:
    return;
}



procedure ehci_mem_init_loop_$bb31(in_$p0: ref, in_$p44: ref, in_$p48: ref, in_$p49: ref, in_$i50: i64, in_$p51: ref, in_$i52: i32, in_$i53: i32, in_$i54: i1, in_$i47: i32) returns (out_$p48: ref, out_$p49: ref, out_$i50: i64, out_$p51: ref, out_$i52: i32, out_$i53: i32, out_$i54: i1, out_$i47: i32);
  modifies $M.0;



implementation ehci_mem_init_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i6: i32) returns (out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i6: i32)
{

  entry:
    out_$i7, out_$p8, out_$p9, out_$p11, out_$i12, out_$i13, out_$i14, out_$i6 := in_$i7, in_$p8, in_$p9, in_$p11, in_$i12, in_$i13, in_$i14, in_$i6;
    goto $bb4, exit;

  $bb4:
    assume {:verifier.code 0} true;
    goto corral_source_split_7557;

  $bb6:
    assume out_$i14 == 1;
    assume {:verifier.code 0} true;
    out_$i6 := out_$i12;
    goto $bb6_dummy;

  corral_source_split_7566:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb6;

  corral_source_split_7565:
    assume {:verifier.code 0} true;
    out_$i14 := $ult.i32(out_$i12, out_$i13);
    goto corral_source_split_7566;

  corral_source_split_7564:
    assume {:verifier.code 0} true;
    out_$i13 := $load.i32($M.0, in_$p3);
    goto corral_source_split_7565;

  corral_source_split_7563:
    assume {:verifier.code 0} true;
    out_$i12 := $add.i32(out_$i6, 1);
    call {:si_unique_call 1387} {:cexpr "i"} boogie_si_record_i32(out_$i12);
    goto corral_source_split_7564;

  corral_source_split_7562:
    assume {:verifier.code 0} true;
    $M.0 := $store.i32($M.0, out_$p11, 1);
    goto corral_source_split_7563;

  corral_source_split_7561:
    assume {:verifier.code 0} true;
    out_$p11 := $add.ref($add.ref($add.ref(out_$p9, $mul.ref(0, 15104)), $mul.ref(4096, 1)), $mul.ref(out_$i7, 4));
    goto corral_source_split_7562;

  corral_source_split_7560:
    assume {:verifier.code 0} true;
    out_$p9 := $load.ref($M.0, out_$p8);
    goto corral_source_split_7561;

  corral_source_split_7559:
    assume {:verifier.code 0} true;
    out_$p8 := $add.ref($add.ref(in_$p0, $mul.ref(0, 768)), $mul.ref(72, 1));
    goto corral_source_split_7560;

  $bb5:
    assume {:verifier.code 0} true;
    out_$i7 := $sext.i32.i64(out_$i6);
    goto corral_source_split_7559;

  corral_source_split_7557:
    assume {:verifier.code 0} true;
    goto $bb5;

  $bb6_dummy:
    call {:si_unique_call 1} out_$i7, out_$p8, out_$p9, out_$p11, out_$i12, out_$i13, out_$i14, out_$i6 := ehci_mem_init_loop_$bb4(in_$p0, in_$p3, out_$i7, out_$p8, out_$p9, out_$p11, out_$i12, out_$i13, out_$i14, out_$i6);
    return;

  exit:
    return;
}



procedure ehci_mem_init_loop_$bb4(in_$p0: ref, in_$p3: ref, in_$i7: i64, in_$p8: ref, in_$p9: ref, in_$p11: ref, in_$i12: i32, in_$i13: i32, in_$i14: i1, in_$i6: i32) returns (out_$i7: i64, out_$p8: ref, out_$p9: ref, out_$p11: ref, out_$i12: i32, out_$i13: i32, out_$i14: i1, out_$i6: i32);
  modifies $M.0;



implementation oxu210_hcd_irq_loop_$bb29(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i64, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$i104: i64, in_$i105: i64, in_$i106: i64, in_$i107: i64, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i24, in_$i117: i24, in_$i118: i24, in_$p119: ref, in_$p120: ref, in_$i121: i8, in_$i122: i64, in_$i123: i64, in_$i124: i64, in_$i125: i1, in_$p126: ref, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$p131: ref, in_$i132: i64, in_$p134: ref, in_$i135: i64, in_$i85: i32, in_vslice_dummy_var_108: i32) returns (out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i64, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$i104: i64, out_$i105: i64, out_$i106: i64, out_$i107: i64, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i24, out_$i117: i24, out_$i118: i24, out_$p119: ref, out_$p120: ref, out_$i121: i8, out_$i122: i64, out_$i123: i64, out_$i124: i64, out_$i125: i1, out_$p126: ref, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$p131: ref, out_$i132: i64, out_$p134: ref, out_$i135: i64, out_$i85: i32, out_vslice_dummy_var_108: i32)
{

  entry:
    out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p128, out_$p129, out_$i130, out_$p131, out_$i132, out_$p134, out_$i135, out_$i85, out_vslice_dummy_var_108 := in_$p86, in_$p87, in_$p88, in_$p89, in_$i90, in_$p91, in_$i92, in_$i93, in_$i94, in_$i95, in_$i96, in_$i97, in_$i98, in_$i99, in_$p101, in_$i102, in_$i103, in_$i104, in_$i105, in_$i106, in_$i107, in_$p109, in_$p110, in_$p111, in_$p112, in_$p113, in_$p114, in_$p115, in_$i116, in_$i117, in_$i118, in_$p119, in_$p120, in_$i121, in_$i122, in_$i123, in_$i124, in_$i125, in_$p126, in_$p128, in_$p129, in_$i130, in_$p131, in_$i132, in_$p134, in_$i135, in_$i85, in_vslice_dummy_var_108;
    goto $bb29, exit;

  $bb29:
    assume {:verifier.code 0} true;
    goto corral_source_split_7993;

  $bb34:
    assume out_$i96 == 1;
    assume {:verifier.code 0} true;
    out_$i85 := out_$i95;
    goto $bb34_dummy;

  corral_source_split_8008:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34;

  corral_source_split_8007:
    assume {:verifier.code 0} true;
    out_$i96 := $ne.i32(out_$i85, 0);
    goto corral_source_split_8008;

  $bb33:
    assume {:verifier.code 0} true;
    out_$i95 := $sub.i32(out_$i85, 1);
    call {:si_unique_call 1442} {:cexpr "i"} boogie_si_record_i32(out_$i95);
    goto corral_source_split_8007;

  corral_source_split_8061:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb38:
    assume {:verifier.code 0} true;
    goto $bb33;

  corral_source_split_8005:
    assume {:verifier.code 0} true;
    goto $bb33;

  $bb31:
    assume out_$i94 == 1;
    goto corral_source_split_8005;

  corral_source_split_8003:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb31, $bb32;

  corral_source_split_8002:
    assume {:verifier.code 0} true;
    out_$i94 := $ne.i32(out_$i93, 0);
    goto corral_source_split_8003;

  corral_source_split_8001:
    assume {:verifier.code 0} true;
    out_$i93 := $and.i32(out_$i92, 8192);
    goto corral_source_split_8002;

  SeqInstr_441:
    call {:si_unique_call 1441} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i92);
    goto corral_source_split_8001;

  SeqInstr_440:
    assume assertsPassed;
    goto SeqInstr_441;

  corral_source_split_8000:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1440} out_$i92 := readl(out_$p91);
    goto SeqInstr_440;

  corral_source_split_7999:
    assume {:verifier.code 0} true;
    out_$p91 := $add.ref(out_$p89, $mul.ref(out_$i90, 1));
    goto corral_source_split_8000;

  corral_source_split_7998:
    assume {:verifier.code 0} true;
    out_$i90 := $zext.i32.i64(out_$i85);
    goto corral_source_split_7999;

  corral_source_split_7997:
    assume {:verifier.code 0} true;
    out_$p89 := $bitcast.ref.ref(out_$p88);
    goto corral_source_split_7998;

  corral_source_split_7996:
    assume {:verifier.code 0} true;
    out_$p88 := $add.ref($add.ref(out_$p87, $mul.ref(0, 68)), $mul.ref(68, 1));
    goto corral_source_split_7997;

  corral_source_split_7995:
    assume {:verifier.code 0} true;
    out_$p87 := $load.ref($M.0, out_$p86);
    goto corral_source_split_7996;

  $bb30:
    assume {:verifier.code 0} true;
    out_$p86 := $add.ref($add.ref(in_$p7, $mul.ref(0, 768)), $mul.ref(288, 1));
    goto corral_source_split_7995;

  corral_source_split_7993:
    assume {:verifier.code 0} true;
    goto $bb30;

  $bb40:
    assume {:verifier.code 0} true;
    assume out_$i103 == 1;
    goto $bb38;

  $bb37:
    assume {:verifier.code 0} true;
    assume out_$i98 == 1;
    goto $bb38;

  corral_source_split_8013:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb37, $bb39;

  corral_source_split_8012:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 0);
    goto corral_source_split_8013;

  $bb36:
    assume {:verifier.code 0} true;
    out_$i97 := $and.i32(out_$i92, 64);
    goto corral_source_split_8012;

  $bb32:
    assume !(out_$i94 == 1);
    assume {:verifier.code 0} true;
    goto $bb36;

  corral_source_split_8019:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  corral_source_split_8018:
    assume {:verifier.code 0} true;
    out_$i103 := $ne.i64(out_$i102, 0);
    goto corral_source_split_8019;

  corral_source_split_8017:
    assume {:verifier.code 0} true;
    out_$i102 := $load.i64($M.0, out_$p101);
    goto corral_source_split_8018;

  corral_source_split_8016:
    assume {:verifier.code 0} true;
    out_$p101 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref(out_$i99, 8));
    goto corral_source_split_8017;

  corral_source_split_8015:
    assume {:verifier.code 0} true;
    out_$i99 := $zext.i32.i64(out_$i85);
    goto corral_source_split_8016;

  $bb39:
    assume !(out_$i98 == 1);
    goto corral_source_split_8015;

  corral_source_split_8060:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1449} out_vslice_dummy_var_108 := ldv_mod_timer_26(out_$p131, out_$i135);
    goto corral_source_split_8061;

  corral_source_split_8059:
    assume {:verifier.code 0} true;
    out_$i135 := $load.i64($M.0, out_$p134);
    goto corral_source_split_8060;

  corral_source_split_8058:
    assume {:verifier.code 0} true;
    out_$p134 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref(out_$i132, 8));
    goto corral_source_split_8059;

  corral_source_split_8057:
    assume {:verifier.code 0} true;
    out_$i132 := $zext.i32.i64(out_$i85);
    goto corral_source_split_8058;

  $bb45:
    assume {:verifier.code 0} true;
    out_$p131 := $add.ref($add.ref(in_$p0, $mul.ref(0, 968)), $mul.ref(328, 1));
    goto corral_source_split_8057;

  $bb44:
    assume !(out_$i125 == 1);
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_8055:
    assume {:verifier.code 0} true;
    goto $bb45;

  corral_source_split_8054:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1448} __dynamic_dev_dbg.ref.ref.ref.i32(in_$p2, out_$p129, .str.62, out_$i130);
    goto corral_source_split_8055;

  corral_source_split_8053:
    assume {:verifier.code 0} true;
    out_$i130 := $add.i32(out_$i85, 1);
    goto corral_source_split_8054;

  corral_source_split_8052:
    assume {:verifier.code 0} true;
    out_$p129 := $load.ref($M.81, out_$p128);
    goto corral_source_split_8053;

  corral_source_split_8051:
    assume {:verifier.code 0} true;
    out_$p128 := $add.ref($add.ref($add.ref(out_$p126, $mul.ref(0, 968)), $mul.ref(0, 1)), $mul.ref(0, 1));
    goto corral_source_split_8052;

  corral_source_split_8050:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1447} out_$p126 := oxu_to_hcd(in_$p7);
    goto corral_source_split_8051;

  $bb43:
    assume out_$i125 == 1;
    goto corral_source_split_8050;

  corral_source_split_8048:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb43, $bb44;

  corral_source_split_8047:
    assume {:verifier.code 0} true;
    out_$i125 := $ne.i64(out_$i124, 0);
    goto corral_source_split_8048;

  corral_source_split_8046:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1445} out_$i124 := ldv__builtin_expect(out_$i123, 0);
    call {:si_unique_call 1446} {:cexpr "tmp___8"} boogie_si_record_i64(out_$i124);
    goto corral_source_split_8047;

  corral_source_split_8045:
    assume {:verifier.code 0} true;
    out_$i123 := $and.i64(out_$i122, 1);
    goto corral_source_split_8046;

  corral_source_split_8044:
    assume {:verifier.code 0} true;
    out_$i122 := $zext.i8.i64(out_$i121);
    goto corral_source_split_8045;

  corral_source_split_8043:
    assume {:verifier.code 0} true;
    out_$i121 := $load.i8($M.7, out_$p120);
    goto corral_source_split_8044;

  corral_source_split_8042:
    assume {:verifier.code 0} true;
    out_$p120 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8043;

  corral_source_split_8041:
    assume {:verifier.code 0} true;
    $M.7 := $store.i8($M.7, out_$p119, 0);
    goto corral_source_split_8042;

  corral_source_split_8040:
    assume {:verifier.code 0} true;
    out_$p119 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(35, 1));
    goto corral_source_split_8041;

  corral_source_split_8039:
    assume {:verifier.code 0} true;
    $M.6 := $store.i24($M.6, out_$p115, out_$i118);
    goto corral_source_split_8040;

  corral_source_split_8038:
    assume {:verifier.code 0} true;
    out_$i118 := $or.i24(out_$i117, 2509);
    goto corral_source_split_8039;

  corral_source_split_8037:
    assume {:verifier.code 0} true;
    out_$i117 := $and.i24(out_$i116, $sub.i24(0, 262144));
    goto corral_source_split_8038;

  corral_source_split_8036:
    assume {:verifier.code 0} true;
    out_$i116 := $load.i24($M.6, out_$p115);
    goto corral_source_split_8037;

  corral_source_split_8035:
    assume {:verifier.code 0} true;
    out_$p115 := $bitcast.ref.ref(out_$p114);
    goto corral_source_split_8036;

  corral_source_split_8034:
    assume {:verifier.code 0} true;
    out_$p114 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(32, 1));
    goto corral_source_split_8035;

  corral_source_split_8033:
    assume {:verifier.code 0} true;
    $M.5 := $store.ref($M.5, out_$p113, .str.62);
    goto corral_source_split_8034;

  corral_source_split_8032:
    assume {:verifier.code 0} true;
    out_$p113 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(24, 1));
    goto corral_source_split_8033;

  corral_source_split_8031:
    assume {:verifier.code 0} true;
    $M.4 := $store.ref($M.4, out_$p112, .str);
    goto corral_source_split_8032;

  corral_source_split_8030:
    assume {:verifier.code 0} true;
    out_$p112 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(16, 1));
    goto corral_source_split_8031;

  corral_source_split_8029:
    assume {:verifier.code 0} true;
    $M.3 := $store.ref($M.3, out_$p111, .str.60);
    goto corral_source_split_8030;

  corral_source_split_8028:
    assume {:verifier.code 0} true;
    out_$p111 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(8, 1));
    goto corral_source_split_8029;

  corral_source_split_8027:
    assume {:verifier.code 0} true;
    $M.2 := $store.ref($M.2, out_$p110, .str.2);
    goto corral_source_split_8028;

  corral_source_split_8026:
    assume {:verifier.code 0} true;
    out_$p110 := $add.ref($add.ref(in_$p2, $mul.ref(0, 40)), $mul.ref(0, 1));
    goto corral_source_split_8027;

  corral_source_split_8025:
    assume {:verifier.code 0} true;
    $M.0 := $store.i64($M.0, out_$p109, out_$i106);
    goto corral_source_split_8026;

  corral_source_split_8024:
    assume {:verifier.code 0} true;
    out_$p109 := $add.ref($add.ref($add.ref(in_$p7, $mul.ref(0, 768)), $mul.ref(440, 1)), $mul.ref(out_$i107, 8));
    goto corral_source_split_8025;

  corral_source_split_8023:
    assume {:verifier.code 0} true;
    out_$i107 := $zext.i32.i64(out_$i85);
    goto corral_source_split_8024;

  corral_source_split_8022:
    assume {:verifier.code 0} true;
    out_$i106 := $add.i64(out_$i104, out_$i105);
    goto corral_source_split_8023;

  corral_source_split_8021:
    assume {:verifier.code 0} true;
    out_$i105 := $load.i64($M.0, jiffies);
    goto corral_source_split_8022;

  $bb42:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1443} out_$i104 := msecs_to_jiffies(40);
    call {:si_unique_call 1444} {:cexpr "tmp___6"} boogie_si_record_i64(out_$i104);
    goto corral_source_split_8021;

  $bb41:
    assume !(out_$i103 == 1);
    assume {:verifier.code 0} true;
    goto $bb42;

  $bb34_dummy:
    call {:si_unique_call 1} out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p128, out_$p129, out_$i130, out_$p131, out_$i132, out_$p134, out_$i135, out_$i85, out_vslice_dummy_var_108 := oxu210_hcd_irq_loop_$bb29(in_$p0, in_$p2, in_$p7, out_$p86, out_$p87, out_$p88, out_$p89, out_$i90, out_$p91, out_$i92, out_$i93, out_$i94, out_$i95, out_$i96, out_$i97, out_$i98, out_$i99, out_$p101, out_$i102, out_$i103, out_$i104, out_$i105, out_$i106, out_$i107, out_$p109, out_$p110, out_$p111, out_$p112, out_$p113, out_$p114, out_$p115, out_$i116, out_$i117, out_$i118, out_$p119, out_$p120, out_$i121, out_$i122, out_$i123, out_$i124, out_$i125, out_$p126, out_$p128, out_$p129, out_$i130, out_$p131, out_$i132, out_$p134, out_$i135, out_$i85, out_vslice_dummy_var_108);
    return;

  exit:
    return;
}



procedure oxu210_hcd_irq_loop_$bb29(in_$p0: ref, in_$p2: ref, in_$p7: ref, in_$p86: ref, in_$p87: ref, in_$p88: ref, in_$p89: ref, in_$i90: i64, in_$p91: ref, in_$i92: i32, in_$i93: i32, in_$i94: i1, in_$i95: i32, in_$i96: i1, in_$i97: i32, in_$i98: i1, in_$i99: i64, in_$p101: ref, in_$i102: i64, in_$i103: i1, in_$i104: i64, in_$i105: i64, in_$i106: i64, in_$i107: i64, in_$p109: ref, in_$p110: ref, in_$p111: ref, in_$p112: ref, in_$p113: ref, in_$p114: ref, in_$p115: ref, in_$i116: i24, in_$i117: i24, in_$i118: i24, in_$p119: ref, in_$p120: ref, in_$i121: i8, in_$i122: i64, in_$i123: i64, in_$i124: i64, in_$i125: i1, in_$p126: ref, in_$p128: ref, in_$p129: ref, in_$i130: i32, in_$p131: ref, in_$i132: i64, in_$p134: ref, in_$i135: i64, in_$i85: i32, in_vslice_dummy_var_108: i32) returns (out_$p86: ref, out_$p87: ref, out_$p88: ref, out_$p89: ref, out_$i90: i64, out_$p91: ref, out_$i92: i32, out_$i93: i32, out_$i94: i1, out_$i95: i32, out_$i96: i1, out_$i97: i32, out_$i98: i1, out_$i99: i64, out_$p101: ref, out_$i102: i64, out_$i103: i1, out_$i104: i64, out_$i105: i64, out_$i106: i64, out_$i107: i64, out_$p109: ref, out_$p110: ref, out_$p111: ref, out_$p112: ref, out_$p113: ref, out_$p114: ref, out_$p115: ref, out_$i116: i24, out_$i117: i24, out_$i118: i24, out_$p119: ref, out_$p120: ref, out_$i121: i8, out_$i122: i64, out_$i123: i64, out_$i124: i64, out_$i125: i1, out_$p126: ref, out_$p128: ref, out_$p129: ref, out_$i130: i32, out_$p131: ref, out_$i132: i64, out_$p134: ref, out_$i135: i64, out_$i85: i32, out_vslice_dummy_var_108: i32);
  modifies $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.0, $M.22, $M.63, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $CurrAddr, $M.8, $M.28, $M.27, $M.30, $M.29, $M.32, $M.31, $M.34, $M.33, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed;



implementation ldv_stop_loop_$bb1()
{

  entry:
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 0} true;
    goto $bb1_dummy;

  $bb1_dummy:
    call {:si_unique_call 1} ldv_stop_loop_$bb1();
    return;

  exit:
    return;
}



procedure ldv_stop_loop_$bb1();



implementation main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$i174: i32, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$p179: ref, in_$i180: i32, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$i186: i32, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i16, in_$i198: i32, in_$i199: i16, in_$i200: i16, in_$i201: i32, in_$i202: i16, in_$i203: i16, in_$i204: i32, in_$i205: i16, in_$i206: i16, in_$i207: i32, in_$i208: i16, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i16, in_$i214: i32, in_$i215: i16, in_$i216: i16, in_$i217: i32, in_$i218: i16, in_$i219: i16, in_$i220: i32, in_$i221: i16, in_$i222: i16, in_$i223: i32, in_$i224: i16, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i229: i16, in_$i230: i32, in_$i231: i16, in_$i232: i16, in_$i233: i32, in_$i234: i16, in_$i235: i16, in_$i236: i32, in_$i237: i16, in_$i238: i16, in_$i239: i32, in_$i240: i16, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i32, in_$i270: i1, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$p292: ref, in_$i293: i32, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i32, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$p301: ref, in_$i302: i32, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$p307: ref, in_$i308: i32, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$p313: ref, in_$i314: i32, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i380: i32, in_$i381: i1, in_$p382: ref, in_$i384: i32, in_$i385: i1, in_$p386: ref, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i392: i32, in_$i393: i32, in_$i394: i1, in_$p395: ref, in_$i396: i32, in_$i397: i32, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$p401: ref, in_$i402: i32, in_$i404: i32, in_$i405: i1, in_$p406: ref, in_$p407: ref, in_$i408: i32, in_$i410: i32, in_$i411: i1, in_$p412: ref, in_$p413: ref, in_$i414: i32, in_$i416: i32, in_$i417: i1, in_$p418: ref, in_$i419: i16, in_$i420: i32, in_$i421: i16, in_$i422: i16, in_$i423: i32, in_$i424: i16, in_$i425: i16, in_$i426: i32, in_$i427: i16, in_$i428: i16, in_$i429: i32, in_$i430: i16, in_$i432: i32, in_$i433: i1, in_$p434: ref, in_$i435: i16, in_$i436: i32, in_$i437: i16, in_$i438: i16, in_$i439: i32, in_$i440: i16, in_$i441: i16, in_$i442: i32, in_$i443: i16, in_$i444: i16, in_$i445: i32, in_$i446: i16, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i451: i16, in_$i452: i32, in_$i453: i16, in_$i454: i16, in_$i455: i32, in_$i456: i16, in_$i457: i16, in_$i458: i32, in_$i459: i16, in_$i460: i16, in_$i461: i32, in_$i462: i16, in_$i464: i32, in_$i465: i1, in_$p466: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$i476: i32, in_$i477: i1, in_$i478: i32, in_$i479: i1, in_$i480: i1, in_$i481: i1, in_$i482: i1, in_$i483: i1, in_$i484: i1, in_$i485: i32, in_$i486: i1, in_$p487: ref, in_$i488: i32, in_$i489: i32, in_$i490: i1, in_$i491: i32, in_$i492: i32, in_$i493: i32, in_$i494: i1, in_$p495: ref, in_$i496: i32, in_$i497: i1, in_$i498: i32, in_$i499: i1, in_$p500: ref, in_$i501: i32, in_$i502: i32, in_$i503: i1, in_$i504: i32, in_$i505: i32, in_$i506: i32, in_$i507: i1, in_$i508: i32, in_$i509: i1, in_$p510: ref, in_$i511: i32, in_$i512: i32, in_$i513: i1, in_$i514: i32, in_$i515: i32, in_$i516: i32, in_$i517: i1, in_$i518: i32, in_$i519: i32, in_$i520: i1, in_$i521: i32, in_$i522: i1, in_$i523: i32, in_$i524: i32, in_$i525: i1, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32) returns (out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$i174: i32, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$p179: ref, out_$i180: i32, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$i186: i32, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i16, out_$i198: i32, out_$i199: i16, out_$i200: i16, out_$i201: i32, out_$i202: i16, out_$i203: i16, out_$i204: i32, out_$i205: i16, out_$i206: i16, out_$i207: i32, out_$i208: i16, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i16, out_$i214: i32, out_$i215: i16, out_$i216: i16, out_$i217: i32, out_$i218: i16, out_$i219: i16, out_$i220: i32, out_$i221: i16, out_$i222: i16, out_$i223: i32, out_$i224: i16, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i229: i16, out_$i230: i32, out_$i231: i16, out_$i232: i16, out_$i233: i32, out_$i234: i16, out_$i235: i16, out_$i236: i32, out_$i237: i16, out_$i238: i16, out_$i239: i32, out_$i240: i16, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i32, out_$i270: i1, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$p292: ref, out_$i293: i32, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i32, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$p301: ref, out_$i302: i32, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$p307: ref, out_$i308: i32, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$p313: ref, out_$i314: i32, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i380: i32, out_$i381: i1, out_$p382: ref, out_$i384: i32, out_$i385: i1, out_$p386: ref, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i392: i32, out_$i393: i32, out_$i394: i1, out_$p395: ref, out_$i396: i32, out_$i397: i32, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$p401: ref, out_$i402: i32, out_$i404: i32, out_$i405: i1, out_$p406: ref, out_$p407: ref, out_$i408: i32, out_$i410: i32, out_$i411: i1, out_$p412: ref, out_$p413: ref, out_$i414: i32, out_$i416: i32, out_$i417: i1, out_$p418: ref, out_$i419: i16, out_$i420: i32, out_$i421: i16, out_$i422: i16, out_$i423: i32, out_$i424: i16, out_$i425: i16, out_$i426: i32, out_$i427: i16, out_$i428: i16, out_$i429: i32, out_$i430: i16, out_$i432: i32, out_$i433: i1, out_$p434: ref, out_$i435: i16, out_$i436: i32, out_$i437: i16, out_$i438: i16, out_$i439: i32, out_$i440: i16, out_$i441: i16, out_$i442: i32, out_$i443: i16, out_$i444: i16, out_$i445: i32, out_$i446: i16, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i451: i16, out_$i452: i32, out_$i453: i16, out_$i454: i16, out_$i455: i32, out_$i456: i16, out_$i457: i16, out_$i458: i32, out_$i459: i16, out_$i460: i16, out_$i461: i32, out_$i462: i16, out_$i464: i32, out_$i465: i1, out_$p466: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$i476: i32, out_$i477: i1, out_$i478: i32, out_$i479: i1, out_$i480: i1, out_$i481: i1, out_$i482: i1, out_$i483: i1, out_$i484: i1, out_$i485: i32, out_$i486: i1, out_$p487: ref, out_$i488: i32, out_$i489: i32, out_$i490: i1, out_$i491: i32, out_$i492: i32, out_$i493: i32, out_$i494: i1, out_$p495: ref, out_$i496: i32, out_$i497: i1, out_$i498: i32, out_$i499: i1, out_$p500: ref, out_$i501: i32, out_$i502: i32, out_$i503: i1, out_$i504: i32, out_$i505: i32, out_$i506: i32, out_$i507: i1, out_$i508: i32, out_$i509: i1, out_$p510: ref, out_$i511: i32, out_$i512: i32, out_$i513: i1, out_$i514: i32, out_$i515: i32, out_$i516: i32, out_$i517: i1, out_$i518: i32, out_$i519: i32, out_$i520: i1, out_$i521: i32, out_$i522: i1, out_$i523: i32, out_$i524: i32, out_$i525: i1, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32)
{

  entry:
    out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$p105, out_$i107, out_$i108, out_$p109, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$p117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i188, out_$i189, out_$p190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$p292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$p300, out_$p301, out_$i302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i308, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i316, out_$i317, out_$p318, out_$i319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i380, out_$i381, out_$p382, out_$i384, out_$i385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i393, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400, out_$p401, out_$i402, out_$i404, out_$i405, out_$p406, out_$p407, out_$i408, out_$i410, out_$i411, out_$p412, out_$p413, out_$i414, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$p474, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$p495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$p510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176 := in_$i44, in_$i45, in_$i46, in_$i47, in_$i48, in_$i49, in_$i50, in_$i51, in_$i52, in_$i53, in_$i54, in_$i55, in_$i56, in_$i57, in_$i58, in_$i59, in_$i60, in_$i61, in_$i62, in_$i63, in_$i64, in_$i65, in_$i66, in_$i67, in_$i68, in_$i69, in_$p70, in_$i71, in_$i72, in_$i73, in_$i74, in_$i75, in_$i76, in_$i77, in_$p78, in_$p79, in_$i80, in_$i82, in_$i83, in_$p84, in_$p85, in_$i86, in_$i88, in_$i89, in_$p90, in_$p91, in_$i92, in_$i94, in_$i95, in_$p96, in_$i97, in_$i98, in_$p99, in_$i100, in_$i101, in_$p102, in_$i103, in_$i104, in_$p105, in_$i107, in_$i108, in_$p109, in_$i111, in_$i112, in_$p113, in_$i115, in_$i116, in_$p117, in_$i119, in_$i120, in_$p121, in_$i123, in_$i124, in_$p125, in_$i127, in_$i128, in_$p129, in_$i130, in_$i131, in_$p132, in_$i134, in_$i135, in_$p136, in_$i138, in_$i139, in_$p140, in_$i142, in_$i143, in_$p144, in_$i146, in_$i147, in_$p148, in_$i150, in_$i151, in_$p152, in_$i154, in_$i155, in_$p156, in_$i158, in_$i159, in_$p160, in_$i162, in_$i163, in_$p164, in_$i166, in_$i167, in_$p168, in_$i169, in_$i170, in_$i171, in_$i172, in_$p173, in_$i174, in_$i175, in_$i176, in_$i177, in_$p178, in_$p179, in_$i180, in_$i182, in_$i183, in_$p184, in_$p185, in_$i186, in_$i188, in_$i189, in_$p190, in_$p191, in_$i192, in_$i194, in_$i195, in_$p196, in_$i197, in_$i198, in_$i199, in_$i200, in_$i201, in_$i202, in_$i203, in_$i204, in_$i205, in_$i206, in_$i207, in_$i208, in_$i210, in_$i211, in_$p212, in_$i213, in_$i214, in_$i215, in_$i216, in_$i217, in_$i218, in_$i219, in_$i220, in_$i221, in_$i222, in_$i223, in_$i224, in_$i226, in_$i227, in_$p228, in_$i229, in_$i230, in_$i231, in_$i232, in_$i233, in_$i234, in_$i235, in_$i236, in_$i237, in_$i238, in_$i239, in_$i240, in_$i242, in_$i243, in_$p244, in_$i246, in_$i247, in_$p248, in_$i250, in_$i251, in_$p252, in_$i254, in_$i255, in_$i256, in_$i257, in_$i258, in_$i259, in_$i260, in_$i261, in_$i262, in_$i263, in_$i264, in_$i265, in_$i266, in_$i267, in_$i268, in_$i269, in_$i270, in_$i271, in_$i272, in_$i273, in_$i274, in_$i275, in_$i276, in_$i277, in_$i278, in_$i279, in_$i280, in_$i281, in_$i282, in_$i283, in_$i284, in_$i285, in_$i286, in_$i287, in_$i288, in_$i289, in_$i290, in_$i291, in_$p292, in_$i293, in_$i294, in_$i295, in_$i296, in_$i297, in_$i298, in_$i299, in_$p300, in_$p301, in_$i302, in_$i304, in_$i305, in_$p306, in_$p307, in_$i308, in_$i310, in_$i311, in_$p312, in_$p313, in_$i314, in_$i316, in_$i317, in_$p318, in_$i319, in_$i320, in_$p321, in_$i322, in_$i323, in_$p324, in_$i325, in_$i326, in_$p327, in_$i329, in_$i330, in_$p331, in_$i333, in_$i334, in_$p335, in_$i337, in_$i338, in_$p339, in_$i341, in_$i342, in_$p343, in_$i345, in_$i346, in_$p347, in_$i349, in_$i350, in_$p351, in_$i352, in_$i353, in_$p354, in_$i356, in_$i357, in_$p358, in_$i360, in_$i361, in_$p362, in_$i364, in_$i365, in_$p366, in_$i368, in_$i369, in_$p370, in_$i372, in_$i373, in_$p374, in_$i376, in_$i377, in_$p378, in_$i380, in_$i381, in_$p382, in_$i384, in_$i385, in_$p386, in_$i388, in_$i389, in_$p390, in_$i391, in_$i392, in_$i393, in_$i394, in_$p395, in_$i396, in_$i397, in_$i398, in_$i399, in_$p400, in_$p401, in_$i402, in_$i404, in_$i405, in_$p406, in_$p407, in_$i408, in_$i410, in_$i411, in_$p412, in_$p413, in_$i414, in_$i416, in_$i417, in_$p418, in_$i419, in_$i420, in_$i421, in_$i422, in_$i423, in_$i424, in_$i425, in_$i426, in_$i427, in_$i428, in_$i429, in_$i430, in_$i432, in_$i433, in_$p434, in_$i435, in_$i436, in_$i437, in_$i438, in_$i439, in_$i440, in_$i441, in_$i442, in_$i443, in_$i444, in_$i445, in_$i446, in_$i448, in_$i449, in_$p450, in_$i451, in_$i452, in_$i453, in_$i454, in_$i455, in_$i456, in_$i457, in_$i458, in_$i459, in_$i460, in_$i461, in_$i462, in_$i464, in_$i465, in_$p466, in_$i468, in_$i469, in_$p470, in_$i472, in_$i473, in_$p474, in_$i476, in_$i477, in_$i478, in_$i479, in_$i480, in_$i481, in_$i482, in_$i483, in_$i484, in_$i485, in_$i486, in_$p487, in_$i488, in_$i489, in_$i490, in_$i491, in_$i492, in_$i493, in_$i494, in_$p495, in_$i496, in_$i497, in_$i498, in_$i499, in_$p500, in_$i501, in_$i502, in_$i503, in_$i504, in_$i505, in_$i506, in_$i507, in_$i508, in_$i509, in_$p510, in_$i511, in_$i512, in_$i513, in_$i514, in_$i515, in_$i516, in_$i517, in_$i518, in_$i519, in_$i520, in_$i521, in_$i522, in_$i523, in_$i524, in_$i525, in_vslice_dummy_var_123, in_vslice_dummy_var_124, in_vslice_dummy_var_125, in_vslice_dummy_var_126, in_vslice_dummy_var_127, in_vslice_dummy_var_128, in_vslice_dummy_var_129, in_vslice_dummy_var_130, in_vslice_dummy_var_131, in_vslice_dummy_var_132, in_vslice_dummy_var_133, in_vslice_dummy_var_134, in_vslice_dummy_var_135, in_vslice_dummy_var_136, in_vslice_dummy_var_137, in_vslice_dummy_var_138, in_vslice_dummy_var_139, in_vslice_dummy_var_140, in_vslice_dummy_var_141, in_vslice_dummy_var_142, in_vslice_dummy_var_143, in_vslice_dummy_var_144, in_vslice_dummy_var_145, in_vslice_dummy_var_146, in_vslice_dummy_var_147, in_vslice_dummy_var_148, in_vslice_dummy_var_149, in_vslice_dummy_var_150, in_vslice_dummy_var_151, in_vslice_dummy_var_152, in_vslice_dummy_var_153, in_vslice_dummy_var_154, in_vslice_dummy_var_155, in_vslice_dummy_var_156, in_vslice_dummy_var_157, in_vslice_dummy_var_158, in_vslice_dummy_var_159, in_vslice_dummy_var_160, in_vslice_dummy_var_161, in_vslice_dummy_var_162, in_vslice_dummy_var_163, in_vslice_dummy_var_164, in_vslice_dummy_var_165, in_vslice_dummy_var_166, in_vslice_dummy_var_167, in_vslice_dummy_var_168, in_vslice_dummy_var_169, in_vslice_dummy_var_170, in_vslice_dummy_var_171, in_vslice_dummy_var_172, in_vslice_dummy_var_173, in_vslice_dummy_var_174, in_vslice_dummy_var_175, in_vslice_dummy_var_176;
    goto $bb1, exit;

  $bb1:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1546} out_$i44 := __VERIFIER_nondet_int();
    call {:si_unique_call 1547} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i44);
    call {:si_unique_call 1548} {:cexpr "tmp___5"} boogie_si_record_i32(out_$i44);
    assume {:verifier.code 0} true;
    goto $bb2;

  $bb157:
    assume {:verifier.code 0} true;
    goto $bb157_dummy;

  $bb392:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb390:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb331:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb190:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb160:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb156:
    assume {:verifier.code 0} true;
    goto $bb157;

  $bb17:
    assume !(out_$i52 == 1);
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb54:
    assume {:verifier.code 0} true;
    goto $bb156;

  $bb155:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb153:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb144:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb135:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb126:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb120:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb111:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb102:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb93:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb90:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb81:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb72:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb63:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb53:
    assume {:verifier.code 0} true;
    goto $bb54;

  $bb49:
    assume !(out_$i69 == 1);
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb52:
    assume {:verifier.code 0} true;
    goto $bb53;

  $bb51:
    assume !(out_$i73 == 1);
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_8398:
    assume {:verifier.code 0} true;
    goto $bb52;

  corral_source_split_8397:
    assume {:verifier.code 0} true;
    $M.93 := out_$i75;
    call {:si_unique_call 1555} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i75);
    goto corral_source_split_8398;

  corral_source_split_8396:
    assume {:verifier.code 0} true;
    out_$i75 := $add.i32(out_$i74, 1);
    goto corral_source_split_8397;

  corral_source_split_8395:
    assume {:verifier.code 0} true;
    out_$i74 := $M.93;
    goto corral_source_split_8396;

  corral_source_split_8394:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1554} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8395;

  $bb50:
    assume out_$i73 == 1;
    goto corral_source_split_8394;

  corral_source_split_8392:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb50, $bb51;

  corral_source_split_8391:
    assume {:verifier.code 0} true;
    out_$i73 := $eq.i32(out_$i72, 0);
    goto corral_source_split_8392;

  corral_source_split_8390:
    assume {:verifier.code 0} true;
    out_$i72 := $M.97;
    goto corral_source_split_8391;

  corral_source_split_8389:
    assume {:verifier.code 0} true;
    $M.97 := out_$i71;
    call {:si_unique_call 1553} {:cexpr "ldv_retval_0"} boogie_si_record_i32(out_$i71);
    goto corral_source_split_8390;

  SeqInstr_468:
    goto corral_source_split_8389;

  SeqInstr_467:
    assume assertsPassed;
    goto SeqInstr_468;

  corral_source_split_8388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1552} out_$i71 := oxu_run(out_$p70);
    goto SeqInstr_467;

  corral_source_split_8387:
    assume {:verifier.code 0} true;
    out_$p70 := $M.87;
    goto corral_source_split_8388;

  $bb48:
    assume out_$i69 == 1;
    goto corral_source_split_8387;

  corral_source_split_8385:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb48, $bb49;

  corral_source_split_8384:
    assume {:verifier.code 0} true;
    out_$i69 := $eq.i32(out_$i68, 1);
    goto corral_source_split_8385;

  corral_source_split_8383:
    assume {:verifier.code 0} true;
    out_$i68 := $M.91;
    goto corral_source_split_8384;

  $bb46:
    assume out_$i67 == 1;
    goto corral_source_split_8383;

  $bb42:
    assume out_$i65 == 1;
    assume {:verifier.code 0} true;
    out_$i67 := $eq.i32(out_$i53, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb46, $bb47;

  $bb36:
    assume out_$i62 == 1;
    assume {:verifier.code 0} true;
    out_$i65 := $slt.i32(out_$i53, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb42, $bb43;

  $bb19:
    assume out_$i54 == 1;
    assume {:verifier.code 0} true;
    out_$i62 := $slt.i32(out_$i53, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb36, $bb37;

  $bb18:
    assume {:verifier.code 0} true;
    out_$i54 := $slt.i32(out_$i53, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb19, $bb20;

  corral_source_split_8333:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1549} out_$i53 := __VERIFIER_nondet_int();
    call {:si_unique_call 1550} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i53);
    call {:si_unique_call 1551} {:cexpr "tmp___6"} boogie_si_record_i32(out_$i53);
    assume {:verifier.code 0} true;
    goto $bb18;

  $bb16:
    assume out_$i52 == 1;
    goto corral_source_split_8333;

  corral_source_split_8331:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb16, $bb17;

  corral_source_split_8330:
    assume {:verifier.code 0} true;
    out_$i52 := $ne.i32(out_$i51, 0);
    goto corral_source_split_8331;

  corral_source_split_8329:
    assume {:verifier.code 0} true;
    out_$i51 := $M.91;
    goto corral_source_split_8330;

  $bb14:
    assume out_$i50 == 1;
    goto corral_source_split_8329;

  $bb12:
    assume out_$i49 == 1;
    assume {:verifier.code 0} true;
    out_$i50 := $eq.i32(out_$i44, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb14, $bb15;

  $bb3:
    assume out_$i45 == 1;
    assume {:verifier.code 0} true;
    out_$i49 := $slt.i32(out_$i44, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb12, $bb13;

  $bb2:
    assume {:verifier.code 0} true;
    out_$i45 := $slt.i32(out_$i44, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb3, $bb4;

  $bb62:
    assume !(out_$i89 == 1);
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_8425:
    assume {:verifier.code 0} true;
    goto $bb63;

  corral_source_split_8424:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1561} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8425;

  SeqInstr_477:
    goto corral_source_split_8424;

  SeqInstr_476:
    assume assertsPassed;
    goto SeqInstr_477;

  corral_source_split_8423:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1560} out_vslice_dummy_var_125 := oxu_urb_dequeue(out_$p90, out_$p91, out_$i92);
    goto SeqInstr_476;

  corral_source_split_8422:
    assume {:verifier.code 0} true;
    out_$i92 := $load.i32($M.85, in_$p3);
    goto corral_source_split_8423;

  corral_source_split_8421:
    assume {:verifier.code 0} true;
    out_$p91 := $M.86;
    goto corral_source_split_8422;

  corral_source_split_8420:
    assume {:verifier.code 0} true;
    out_$p90 := $M.87;
    goto corral_source_split_8421;

  $bb61:
    assume out_$i89 == 1;
    goto corral_source_split_8420;

  corral_source_split_8418:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb61, $bb62;

  corral_source_split_8417:
    assume {:verifier.code 0} true;
    out_$i89 := $eq.i32(out_$i88, 2);
    goto corral_source_split_8418;

  $bb60:
    assume {:verifier.code 0} true;
    out_$i88 := $M.91;
    goto corral_source_split_8417;

  $bb59:
    assume !(out_$i83 == 1);
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_8415:
    assume {:verifier.code 0} true;
    goto $bb60;

  corral_source_split_8414:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1559} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8415;

  SeqInstr_474:
    goto corral_source_split_8414;

  SeqInstr_473:
    assume assertsPassed;
    goto SeqInstr_474;

  corral_source_split_8413:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1558} out_vslice_dummy_var_124 := oxu_urb_dequeue(out_$p84, out_$p85, out_$i86);
    goto SeqInstr_473;

  corral_source_split_8412:
    assume {:verifier.code 0} true;
    out_$i86 := $load.i32($M.85, in_$p3);
    goto corral_source_split_8413;

  corral_source_split_8411:
    assume {:verifier.code 0} true;
    out_$p85 := $M.86;
    goto corral_source_split_8412;

  corral_source_split_8410:
    assume {:verifier.code 0} true;
    out_$p84 := $M.87;
    goto corral_source_split_8411;

  $bb58:
    assume out_$i83 == 1;
    goto corral_source_split_8410;

  corral_source_split_8408:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb58, $bb59;

  corral_source_split_8407:
    assume {:verifier.code 0} true;
    out_$i83 := $eq.i32(out_$i82, 3);
    goto corral_source_split_8408;

  $bb57:
    assume {:verifier.code 0} true;
    out_$i82 := $M.91;
    goto corral_source_split_8407;

  $bb56:
    assume !(out_$i77 == 1);
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_8405:
    assume {:verifier.code 0} true;
    goto $bb57;

  corral_source_split_8404:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1557} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8405;

  SeqInstr_471:
    goto corral_source_split_8404;

  SeqInstr_470:
    assume assertsPassed;
    goto SeqInstr_471;

  corral_source_split_8403:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1556} out_vslice_dummy_var_123 := oxu_urb_dequeue(out_$p78, out_$p79, out_$i80);
    goto SeqInstr_470;

  corral_source_split_8402:
    assume {:verifier.code 0} true;
    out_$i80 := $load.i32($M.85, in_$p3);
    goto corral_source_split_8403;

  corral_source_split_8401:
    assume {:verifier.code 0} true;
    out_$p79 := $M.86;
    goto corral_source_split_8402;

  corral_source_split_8400:
    assume {:verifier.code 0} true;
    out_$p78 := $M.87;
    goto corral_source_split_8401;

  $bb55:
    assume out_$i77 == 1;
    goto corral_source_split_8400;

  corral_source_split_8377:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb55, $bb56;

  corral_source_split_8376:
    assume {:verifier.code 0} true;
    out_$i77 := $eq.i32(out_$i76, 1);
    goto corral_source_split_8377;

  corral_source_split_8375:
    assume {:verifier.code 0} true;
    out_$i76 := $M.91;
    goto corral_source_split_8376;

  $bb44:
    assume out_$i66 == 1;
    goto corral_source_split_8375;

  $bb43:
    assume !(out_$i65 == 1);
    assume {:verifier.code 0} true;
    out_$i66 := $slt.i32(out_$i53, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb44, $bb45;

  $bb71:
    assume !(out_$i101 == 1);
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8446:
    assume {:verifier.code 0} true;
    goto $bb72;

  corral_source_split_8445:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1567} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8446;

  SeqInstr_486:
    goto corral_source_split_8445;

  SeqInstr_485:
    assume assertsPassed;
    goto SeqInstr_486;

  corral_source_split_8444:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1566} oxu_endpoint_disable(out_$p102, in_$p13);
    goto SeqInstr_485;

  corral_source_split_8443:
    assume {:verifier.code 0} true;
    out_$p102 := $M.87;
    goto corral_source_split_8444;

  $bb70:
    assume out_$i101 == 1;
    goto corral_source_split_8443;

  corral_source_split_8441:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb70, $bb71;

  corral_source_split_8440:
    assume {:verifier.code 0} true;
    out_$i101 := $eq.i32(out_$i100, 2);
    goto corral_source_split_8441;

  $bb69:
    assume {:verifier.code 0} true;
    out_$i100 := $M.91;
    goto corral_source_split_8440;

  $bb68:
    assume !(out_$i98 == 1);
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_8438:
    assume {:verifier.code 0} true;
    goto $bb69;

  corral_source_split_8437:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1565} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8438;

  SeqInstr_483:
    goto corral_source_split_8437;

  SeqInstr_482:
    assume assertsPassed;
    goto SeqInstr_483;

  corral_source_split_8436:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1564} oxu_endpoint_disable(out_$p99, in_$p13);
    goto SeqInstr_482;

  corral_source_split_8435:
    assume {:verifier.code 0} true;
    out_$p99 := $M.87;
    goto corral_source_split_8436;

  $bb67:
    assume out_$i98 == 1;
    goto corral_source_split_8435;

  corral_source_split_8433:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb67, $bb68;

  corral_source_split_8432:
    assume {:verifier.code 0} true;
    out_$i98 := $eq.i32(out_$i97, 3);
    goto corral_source_split_8433;

  $bb66:
    assume {:verifier.code 0} true;
    out_$i97 := $M.91;
    goto corral_source_split_8432;

  $bb65:
    assume !(out_$i95 == 1);
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_8430:
    assume {:verifier.code 0} true;
    goto $bb66;

  corral_source_split_8429:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1563} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8430;

  SeqInstr_480:
    goto corral_source_split_8429;

  SeqInstr_479:
    assume assertsPassed;
    goto SeqInstr_480;

  corral_source_split_8428:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1562} oxu_endpoint_disable(out_$p96, in_$p13);
    goto SeqInstr_479;

  corral_source_split_8427:
    assume {:verifier.code 0} true;
    out_$p96 := $M.87;
    goto corral_source_split_8428;

  $bb64:
    assume out_$i95 == 1;
    goto corral_source_split_8427;

  corral_source_split_8381:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb64, $bb65;

  corral_source_split_8380:
    assume {:verifier.code 0} true;
    out_$i95 := $eq.i32(out_$i94, 1);
    goto corral_source_split_8381;

  corral_source_split_8379:
    assume {:verifier.code 0} true;
    out_$i94 := $M.91;
    goto corral_source_split_8380;

  $bb45:
    assume !(out_$i66 == 1);
    goto corral_source_split_8379;

  $bb80:
    assume !(out_$i112 == 1);
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_8467:
    assume {:verifier.code 0} true;
    goto $bb81;

  corral_source_split_8466:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1573} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8467;

  SeqInstr_495:
    goto corral_source_split_8466;

  SeqInstr_494:
    assume assertsPassed;
    goto SeqInstr_495;

  corral_source_split_8465:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1572} out_vslice_dummy_var_128 := oxu_bus_resume(out_$p113);
    goto SeqInstr_494;

  corral_source_split_8464:
    assume {:verifier.code 0} true;
    out_$p113 := $M.87;
    goto corral_source_split_8465;

  $bb79:
    assume out_$i112 == 1;
    goto corral_source_split_8464;

  corral_source_split_8462:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb79, $bb80;

  corral_source_split_8461:
    assume {:verifier.code 0} true;
    out_$i112 := $eq.i32(out_$i111, 2);
    goto corral_source_split_8462;

  $bb78:
    assume {:verifier.code 0} true;
    out_$i111 := $M.91;
    goto corral_source_split_8461;

  $bb77:
    assume !(out_$i108 == 1);
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_8459:
    assume {:verifier.code 0} true;
    goto $bb78;

  corral_source_split_8458:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1571} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8459;

  SeqInstr_492:
    goto corral_source_split_8458;

  SeqInstr_491:
    assume assertsPassed;
    goto SeqInstr_492;

  corral_source_split_8457:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1570} out_vslice_dummy_var_127 := oxu_bus_resume(out_$p109);
    goto SeqInstr_491;

  corral_source_split_8456:
    assume {:verifier.code 0} true;
    out_$p109 := $M.87;
    goto corral_source_split_8457;

  $bb76:
    assume out_$i108 == 1;
    goto corral_source_split_8456;

  corral_source_split_8454:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb76, $bb77;

  corral_source_split_8453:
    assume {:verifier.code 0} true;
    out_$i108 := $eq.i32(out_$i107, 3);
    goto corral_source_split_8454;

  $bb75:
    assume {:verifier.code 0} true;
    out_$i107 := $M.91;
    goto corral_source_split_8453;

  $bb74:
    assume !(out_$i104 == 1);
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_8451:
    assume {:verifier.code 0} true;
    goto $bb75;

  corral_source_split_8450:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1569} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8451;

  SeqInstr_489:
    goto corral_source_split_8450;

  SeqInstr_488:
    assume assertsPassed;
    goto SeqInstr_489;

  corral_source_split_8449:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1568} out_vslice_dummy_var_126 := oxu_bus_resume(out_$p105);
    goto SeqInstr_488;

  corral_source_split_8448:
    assume {:verifier.code 0} true;
    out_$p105 := $M.87;
    goto corral_source_split_8449;

  $bb73:
    assume out_$i104 == 1;
    goto corral_source_split_8448;

  corral_source_split_8365:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb73, $bb74;

  corral_source_split_8364:
    assume {:verifier.code 0} true;
    out_$i104 := $eq.i32(out_$i103, 1);
    goto corral_source_split_8365;

  corral_source_split_8363:
    assume {:verifier.code 0} true;
    out_$i103 := $M.91;
    goto corral_source_split_8364;

  $bb38:
    assume out_$i63 == 1;
    goto corral_source_split_8363;

  $bb37:
    assume !(out_$i62 == 1);
    assume {:verifier.code 0} true;
    out_$i63 := $slt.i32(out_$i53, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb38, $bb39;

  $bb89:
    assume !(out_$i124 == 1);
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_8488:
    assume {:verifier.code 0} true;
    goto $bb90;

  corral_source_split_8487:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1579} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8488;

  SeqInstr_504:
    goto corral_source_split_8487;

  SeqInstr_503:
    assume assertsPassed;
    goto SeqInstr_504;

  corral_source_split_8486:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1578} out_vslice_dummy_var_131 := oxu_bus_suspend(out_$p125);
    goto SeqInstr_503;

  corral_source_split_8485:
    assume {:verifier.code 0} true;
    out_$p125 := $M.87;
    goto corral_source_split_8486;

  $bb88:
    assume out_$i124 == 1;
    goto corral_source_split_8485;

  corral_source_split_8483:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb88, $bb89;

  corral_source_split_8482:
    assume {:verifier.code 0} true;
    out_$i124 := $eq.i32(out_$i123, 2);
    goto corral_source_split_8483;

  $bb87:
    assume {:verifier.code 0} true;
    out_$i123 := $M.91;
    goto corral_source_split_8482;

  $bb86:
    assume !(out_$i120 == 1);
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_8480:
    assume {:verifier.code 0} true;
    goto $bb87;

  corral_source_split_8479:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1577} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8480;

  SeqInstr_501:
    goto corral_source_split_8479;

  SeqInstr_500:
    assume assertsPassed;
    goto SeqInstr_501;

  corral_source_split_8478:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1576} out_vslice_dummy_var_130 := oxu_bus_suspend(out_$p121);
    goto SeqInstr_500;

  corral_source_split_8477:
    assume {:verifier.code 0} true;
    out_$p121 := $M.87;
    goto corral_source_split_8478;

  $bb85:
    assume out_$i120 == 1;
    goto corral_source_split_8477;

  corral_source_split_8475:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb85, $bb86;

  corral_source_split_8474:
    assume {:verifier.code 0} true;
    out_$i120 := $eq.i32(out_$i119, 3);
    goto corral_source_split_8475;

  $bb84:
    assume {:verifier.code 0} true;
    out_$i119 := $M.91;
    goto corral_source_split_8474;

  $bb83:
    assume !(out_$i116 == 1);
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_8472:
    assume {:verifier.code 0} true;
    goto $bb84;

  corral_source_split_8471:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1575} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8472;

  SeqInstr_498:
    goto corral_source_split_8471;

  SeqInstr_497:
    assume assertsPassed;
    goto SeqInstr_498;

  corral_source_split_8470:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1574} out_vslice_dummy_var_129 := oxu_bus_suspend(out_$p117);
    goto SeqInstr_497;

  corral_source_split_8469:
    assume {:verifier.code 0} true;
    out_$p117 := $M.87;
    goto corral_source_split_8470;

  $bb82:
    assume out_$i116 == 1;
    goto corral_source_split_8469;

  corral_source_split_8369:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb82, $bb83;

  corral_source_split_8368:
    assume {:verifier.code 0} true;
    out_$i116 := $eq.i32(out_$i115, 1);
    goto corral_source_split_8369;

  corral_source_split_8367:
    assume {:verifier.code 0} true;
    out_$i115 := $M.91;
    goto corral_source_split_8368;

  $bb40:
    assume out_$i64 == 1;
    goto corral_source_split_8367;

  $bb39:
    assume !(out_$i63 == 1);
    assume {:verifier.code 0} true;
    out_$i64 := $slt.i32(out_$i53, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb40, $bb41;

  $bb92:
    assume !(out_$i128 == 1);
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_8493:
    assume {:verifier.code 0} true;
    goto $bb93;

  corral_source_split_8492:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1581} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8493;

  SeqInstr_507:
    goto corral_source_split_8492;

  SeqInstr_506:
    assume assertsPassed;
    goto SeqInstr_507;

  corral_source_split_8491:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1580} oxu_shutdown(out_$p129);
    goto SeqInstr_506;

  corral_source_split_8490:
    assume {:verifier.code 0} true;
    out_$p129 := $M.87;
    goto corral_source_split_8491;

  $bb91:
    assume out_$i128 == 1;
    goto corral_source_split_8490;

  corral_source_split_8373:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb91, $bb92;

  corral_source_split_8372:
    assume {:verifier.code 0} true;
    out_$i128 := $eq.i32(out_$i127, 2);
    goto corral_source_split_8373;

  corral_source_split_8371:
    assume {:verifier.code 0} true;
    out_$i127 := $M.91;
    goto corral_source_split_8372;

  $bb41:
    assume !(out_$i64 == 1);
    goto corral_source_split_8371;

  $bb101:
    assume !(out_$i139 == 1);
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_8514:
    assume {:verifier.code 0} true;
    goto $bb102;

  corral_source_split_8513:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1587} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8514;

  SeqInstr_516:
    goto corral_source_split_8513;

  SeqInstr_515:
    assume assertsPassed;
    goto SeqInstr_516;

  corral_source_split_8512:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1586} out_vslice_dummy_var_134 := oxu_reset(out_$p140);
    goto SeqInstr_515;

  corral_source_split_8511:
    assume {:verifier.code 0} true;
    out_$p140 := $M.87;
    goto corral_source_split_8512;

  $bb100:
    assume out_$i139 == 1;
    goto corral_source_split_8511;

  corral_source_split_8509:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb100, $bb101;

  corral_source_split_8508:
    assume {:verifier.code 0} true;
    out_$i139 := $eq.i32(out_$i138, 2);
    goto corral_source_split_8509;

  $bb99:
    assume {:verifier.code 0} true;
    out_$i138 := $M.91;
    goto corral_source_split_8508;

  $bb98:
    assume !(out_$i135 == 1);
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_8506:
    assume {:verifier.code 0} true;
    goto $bb99;

  corral_source_split_8505:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1585} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8506;

  SeqInstr_513:
    goto corral_source_split_8505;

  SeqInstr_512:
    assume assertsPassed;
    goto SeqInstr_513;

  corral_source_split_8504:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1584} out_vslice_dummy_var_133 := oxu_reset(out_$p136);
    goto SeqInstr_512;

  corral_source_split_8503:
    assume {:verifier.code 0} true;
    out_$p136 := $M.87;
    goto corral_source_split_8504;

  $bb97:
    assume out_$i135 == 1;
    goto corral_source_split_8503;

  corral_source_split_8501:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb97, $bb98;

  corral_source_split_8500:
    assume {:verifier.code 0} true;
    out_$i135 := $eq.i32(out_$i134, 3);
    goto corral_source_split_8501;

  $bb96:
    assume {:verifier.code 0} true;
    out_$i134 := $M.91;
    goto corral_source_split_8500;

  $bb95:
    assume !(out_$i131 == 1);
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_8498:
    assume {:verifier.code 0} true;
    goto $bb96;

  corral_source_split_8497:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1583} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8498;

  SeqInstr_510:
    goto corral_source_split_8497;

  SeqInstr_509:
    assume assertsPassed;
    goto SeqInstr_510;

  corral_source_split_8496:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1582} out_vslice_dummy_var_132 := oxu_reset(out_$p132);
    goto SeqInstr_509;

  corral_source_split_8495:
    assume {:verifier.code 0} true;
    out_$p132 := $M.87;
    goto corral_source_split_8496;

  $bb94:
    assume out_$i131 == 1;
    goto corral_source_split_8495;

  corral_source_split_8353:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb94, $bb95;

  corral_source_split_8352:
    assume {:verifier.code 0} true;
    out_$i131 := $eq.i32(out_$i130, 1);
    goto corral_source_split_8353;

  corral_source_split_8351:
    assume {:verifier.code 0} true;
    out_$i130 := $M.91;
    goto corral_source_split_8352;

  $bb32:
    assume out_$i60 == 1;
    goto corral_source_split_8351;

  $bb21:
    assume out_$i55 == 1;
    assume {:verifier.code 0} true;
    out_$i60 := $slt.i32(out_$i53, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb32, $bb33;

  $bb20:
    assume !(out_$i54 == 1);
    assume {:verifier.code 0} true;
    out_$i55 := $slt.i32(out_$i53, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb21, $bb22;

  $bb110:
    assume !(out_$i151 == 1);
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_8535:
    assume {:verifier.code 0} true;
    goto $bb111;

  corral_source_split_8534:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1593} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8535;

  SeqInstr_525:
    goto corral_source_split_8534;

  SeqInstr_524:
    assume assertsPassed;
    goto SeqInstr_525;

  corral_source_split_8533:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1592} out_vslice_dummy_var_137 := oxu_irq(out_$p152);
    goto SeqInstr_524;

  corral_source_split_8532:
    assume {:verifier.code 0} true;
    out_$p152 := $M.87;
    goto corral_source_split_8533;

  $bb109:
    assume out_$i151 == 1;
    goto corral_source_split_8532;

  corral_source_split_8530:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb109, $bb110;

  corral_source_split_8529:
    assume {:verifier.code 0} true;
    out_$i151 := $eq.i32(out_$i150, 2);
    goto corral_source_split_8530;

  $bb108:
    assume {:verifier.code 0} true;
    out_$i150 := $M.91;
    goto corral_source_split_8529;

  $bb107:
    assume !(out_$i147 == 1);
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_8527:
    assume {:verifier.code 0} true;
    goto $bb108;

  corral_source_split_8526:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1591} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8527;

  SeqInstr_522:
    goto corral_source_split_8526;

  SeqInstr_521:
    assume assertsPassed;
    goto SeqInstr_522;

  corral_source_split_8525:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1590} out_vslice_dummy_var_136 := oxu_irq(out_$p148);
    goto SeqInstr_521;

  corral_source_split_8524:
    assume {:verifier.code 0} true;
    out_$p148 := $M.87;
    goto corral_source_split_8525;

  $bb106:
    assume out_$i147 == 1;
    goto corral_source_split_8524;

  corral_source_split_8522:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb106, $bb107;

  corral_source_split_8521:
    assume {:verifier.code 0} true;
    out_$i147 := $eq.i32(out_$i146, 3);
    goto corral_source_split_8522;

  $bb105:
    assume {:verifier.code 0} true;
    out_$i146 := $M.91;
    goto corral_source_split_8521;

  $bb104:
    assume !(out_$i143 == 1);
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_8519:
    assume {:verifier.code 0} true;
    goto $bb105;

  corral_source_split_8518:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1589} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8519;

  SeqInstr_519:
    goto corral_source_split_8518;

  SeqInstr_518:
    assume assertsPassed;
    goto SeqInstr_519;

  corral_source_split_8517:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1588} out_vslice_dummy_var_135 := oxu_irq(out_$p144);
    goto SeqInstr_518;

  corral_source_split_8516:
    assume {:verifier.code 0} true;
    out_$p144 := $M.87;
    goto corral_source_split_8517;

  $bb103:
    assume out_$i143 == 1;
    goto corral_source_split_8516;

  corral_source_split_8357:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb103, $bb104;

  corral_source_split_8356:
    assume {:verifier.code 0} true;
    out_$i143 := $eq.i32(out_$i142, 1);
    goto corral_source_split_8357;

  corral_source_split_8355:
    assume {:verifier.code 0} true;
    out_$i142 := $M.91;
    goto corral_source_split_8356;

  $bb34:
    assume out_$i61 == 1;
    goto corral_source_split_8355;

  $bb33:
    assume !(out_$i60 == 1);
    assume {:verifier.code 0} true;
    out_$i61 := $slt.i32(out_$i53, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb34, $bb35;

  $bb119:
    assume !(out_$i163 == 1);
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_8556:
    assume {:verifier.code 0} true;
    goto $bb120;

  corral_source_split_8555:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1599} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8556;

  SeqInstr_534:
    goto corral_source_split_8555;

  SeqInstr_533:
    assume assertsPassed;
    goto SeqInstr_534;

  corral_source_split_8554:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1598} out_vslice_dummy_var_140 := oxu_hub_status_data(out_$p164, in_$p14);
    goto SeqInstr_533;

  corral_source_split_8553:
    assume {:verifier.code 0} true;
    out_$p164 := $M.87;
    goto corral_source_split_8554;

  $bb118:
    assume out_$i163 == 1;
    goto corral_source_split_8553;

  corral_source_split_8551:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb118, $bb119;

  corral_source_split_8550:
    assume {:verifier.code 0} true;
    out_$i163 := $eq.i32(out_$i162, 2);
    goto corral_source_split_8551;

  $bb117:
    assume {:verifier.code 0} true;
    out_$i162 := $M.91;
    goto corral_source_split_8550;

  $bb116:
    assume !(out_$i159 == 1);
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_8548:
    assume {:verifier.code 0} true;
    goto $bb117;

  corral_source_split_8547:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1597} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8548;

  SeqInstr_531:
    goto corral_source_split_8547;

  SeqInstr_530:
    assume assertsPassed;
    goto SeqInstr_531;

  corral_source_split_8546:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1596} out_vslice_dummy_var_139 := oxu_hub_status_data(out_$p160, in_$p14);
    goto SeqInstr_530;

  corral_source_split_8545:
    assume {:verifier.code 0} true;
    out_$p160 := $M.87;
    goto corral_source_split_8546;

  $bb115:
    assume out_$i159 == 1;
    goto corral_source_split_8545;

  corral_source_split_8543:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb115, $bb116;

  corral_source_split_8542:
    assume {:verifier.code 0} true;
    out_$i159 := $eq.i32(out_$i158, 3);
    goto corral_source_split_8543;

  $bb114:
    assume {:verifier.code 0} true;
    out_$i158 := $M.91;
    goto corral_source_split_8542;

  $bb113:
    assume !(out_$i155 == 1);
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_8540:
    assume {:verifier.code 0} true;
    goto $bb114;

  corral_source_split_8539:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1595} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8540;

  SeqInstr_528:
    goto corral_source_split_8539;

  SeqInstr_527:
    assume assertsPassed;
    goto SeqInstr_528;

  corral_source_split_8538:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1594} out_vslice_dummy_var_138 := oxu_hub_status_data(out_$p156, in_$p14);
    goto SeqInstr_527;

  corral_source_split_8537:
    assume {:verifier.code 0} true;
    out_$p156 := $M.87;
    goto corral_source_split_8538;

  $bb112:
    assume out_$i155 == 1;
    goto corral_source_split_8537;

  corral_source_split_8361:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb112, $bb113;

  corral_source_split_8360:
    assume {:verifier.code 0} true;
    out_$i155 := $eq.i32(out_$i154, 1);
    goto corral_source_split_8361;

  corral_source_split_8359:
    assume {:verifier.code 0} true;
    out_$i154 := $M.91;
    goto corral_source_split_8360;

  $bb35:
    assume !(out_$i61 == 1);
    goto corral_source_split_8359;

  $bb125:
    assume !(out_$i172 == 1);
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_8575:
    assume {:verifier.code 0} true;
    goto $bb126;

  corral_source_split_8574:
    assume {:verifier.code 0} true;
    $M.93 := out_$i175;
    call {:si_unique_call 1605} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i175);
    goto corral_source_split_8575;

  corral_source_split_8573:
    assume {:verifier.code 0} true;
    out_$i175 := $sub.i32(out_$i174, 1);
    goto corral_source_split_8574;

  corral_source_split_8572:
    assume {:verifier.code 0} true;
    out_$i174 := $M.93;
    goto corral_source_split_8573;

  corral_source_split_8571:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1604} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8572;

  SeqInstr_540:
    goto corral_source_split_8571;

  SeqInstr_539:
    assume assertsPassed;
    goto SeqInstr_540;

  corral_source_split_8570:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1603} oxu_stop(out_$p173);
    goto SeqInstr_539;

  corral_source_split_8569:
    assume {:verifier.code 0} true;
    out_$p173 := $M.87;
    goto corral_source_split_8570;

  $bb124:
    assume out_$i172 == 1;
    goto corral_source_split_8569;

  corral_source_split_8567:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb124, $bb125;

  corral_source_split_8566:
    assume {:verifier.code 0} true;
    out_$i172 := $eq.i32(out_$i171, 2);
    goto corral_source_split_8567;

  $bb123:
    assume {:verifier.code 0} true;
    out_$i171 := $M.91;
    goto corral_source_split_8566;

  $bb122:
    assume !(out_$i167 == 1);
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_8564:
    assume {:verifier.code 0} true;
    goto $bb123;

  corral_source_split_8563:
    assume {:verifier.code 0} true;
    $M.93 := out_$i170;
    call {:si_unique_call 1602} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i170);
    goto corral_source_split_8564;

  corral_source_split_8562:
    assume {:verifier.code 0} true;
    out_$i170 := $sub.i32(out_$i169, 1);
    goto corral_source_split_8563;

  corral_source_split_8561:
    assume {:verifier.code 0} true;
    out_$i169 := $M.93;
    goto corral_source_split_8562;

  corral_source_split_8560:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1601} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8561;

  SeqInstr_537:
    goto corral_source_split_8560;

  SeqInstr_536:
    assume assertsPassed;
    goto SeqInstr_537;

  corral_source_split_8559:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1600} oxu_stop(out_$p168);
    goto SeqInstr_536;

  corral_source_split_8558:
    assume {:verifier.code 0} true;
    out_$p168 := $M.87;
    goto corral_source_split_8559;

  $bb121:
    assume out_$i167 == 1;
    goto corral_source_split_8558;

  corral_source_split_8345:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb121, $bb122;

  corral_source_split_8344:
    assume {:verifier.code 0} true;
    out_$i167 := $eq.i32(out_$i166, 3);
    goto corral_source_split_8345;

  corral_source_split_8343:
    assume {:verifier.code 0} true;
    out_$i166 := $M.91;
    goto corral_source_split_8344;

  $bb30:
    assume out_$i59 == 1;
    goto corral_source_split_8343;

  $bb23:
    assume out_$i56 == 1;
    assume {:verifier.code 0} true;
    out_$i59 := $slt.i32(out_$i53, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb30, $bb31;

  $bb22:
    assume !(out_$i55 == 1);
    assume {:verifier.code 0} true;
    out_$i56 := $slt.i32(out_$i53, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb23, $bb24;

  $bb134:
    assume !(out_$i189 == 1);
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_8602:
    assume {:verifier.code 0} true;
    goto $bb135;

  corral_source_split_8601:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1611} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8602;

  SeqInstr_549:
    goto corral_source_split_8601;

  SeqInstr_548:
    assume assertsPassed;
    goto SeqInstr_549;

  corral_source_split_8600:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1610} out_vslice_dummy_var_143 := oxu_urb_enqueue(out_$p190, out_$p191, out_$i192);
    goto SeqInstr_548;

  corral_source_split_8599:
    assume {:verifier.code 0} true;
    out_$i192 := $load.i32($M.85, in_$p2);
    goto corral_source_split_8600;

  corral_source_split_8598:
    assume {:verifier.code 0} true;
    out_$p191 := $M.86;
    goto corral_source_split_8599;

  corral_source_split_8597:
    assume {:verifier.code 0} true;
    out_$p190 := $M.87;
    goto corral_source_split_8598;

  $bb133:
    assume out_$i189 == 1;
    goto corral_source_split_8597;

  corral_source_split_8595:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb133, $bb134;

  corral_source_split_8594:
    assume {:verifier.code 0} true;
    out_$i189 := $eq.i32(out_$i188, 2);
    goto corral_source_split_8595;

  $bb132:
    assume {:verifier.code 0} true;
    out_$i188 := $M.91;
    goto corral_source_split_8594;

  $bb131:
    assume !(out_$i183 == 1);
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_8592:
    assume {:verifier.code 0} true;
    goto $bb132;

  corral_source_split_8591:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1609} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8592;

  SeqInstr_546:
    goto corral_source_split_8591;

  SeqInstr_545:
    assume assertsPassed;
    goto SeqInstr_546;

  corral_source_split_8590:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1608} out_vslice_dummy_var_142 := oxu_urb_enqueue(out_$p184, out_$p185, out_$i186);
    goto SeqInstr_545;

  corral_source_split_8589:
    assume {:verifier.code 0} true;
    out_$i186 := $load.i32($M.85, in_$p2);
    goto corral_source_split_8590;

  corral_source_split_8588:
    assume {:verifier.code 0} true;
    out_$p185 := $M.86;
    goto corral_source_split_8589;

  corral_source_split_8587:
    assume {:verifier.code 0} true;
    out_$p184 := $M.87;
    goto corral_source_split_8588;

  $bb130:
    assume out_$i183 == 1;
    goto corral_source_split_8587;

  corral_source_split_8585:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb130, $bb131;

  corral_source_split_8584:
    assume {:verifier.code 0} true;
    out_$i183 := $eq.i32(out_$i182, 3);
    goto corral_source_split_8585;

  $bb129:
    assume {:verifier.code 0} true;
    out_$i182 := $M.91;
    goto corral_source_split_8584;

  $bb128:
    assume !(out_$i177 == 1);
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_8582:
    assume {:verifier.code 0} true;
    goto $bb129;

  corral_source_split_8581:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1607} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8582;

  SeqInstr_543:
    goto corral_source_split_8581;

  SeqInstr_542:
    assume assertsPassed;
    goto SeqInstr_543;

  corral_source_split_8580:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1606} out_vslice_dummy_var_141 := oxu_urb_enqueue(out_$p178, out_$p179, out_$i180);
    goto SeqInstr_542;

  corral_source_split_8579:
    assume {:verifier.code 0} true;
    out_$i180 := $load.i32($M.85, in_$p2);
    goto corral_source_split_8580;

  corral_source_split_8578:
    assume {:verifier.code 0} true;
    out_$p179 := $M.86;
    goto corral_source_split_8579;

  corral_source_split_8577:
    assume {:verifier.code 0} true;
    out_$p178 := $M.87;
    goto corral_source_split_8578;

  $bb127:
    assume out_$i177 == 1;
    goto corral_source_split_8577;

  corral_source_split_8349:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb127, $bb128;

  corral_source_split_8348:
    assume {:verifier.code 0} true;
    out_$i177 := $eq.i32(out_$i176, 1);
    goto corral_source_split_8349;

  corral_source_split_8347:
    assume {:verifier.code 0} true;
    out_$i176 := $M.91;
    goto corral_source_split_8348;

  $bb31:
    assume !(out_$i59 == 1);
    goto corral_source_split_8347;

  $bb143:
    assume !(out_$i227 == 1);
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_8659:
    assume {:verifier.code 0} true;
    goto $bb144;

  corral_source_split_8658:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1617} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8659;

  SeqInstr_558:
    goto corral_source_split_8658;

  SeqInstr_557:
    assume assertsPassed;
    goto SeqInstr_558;

  corral_source_split_8657:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1616} out_vslice_dummy_var_146 := oxu_hub_control(out_$p228, out_$i231, out_$i234, out_$i237, in_$p15, out_$i240);
    goto SeqInstr_557;

  corral_source_split_8656:
    assume {:verifier.code 0} true;
    out_$i240 := $trunc.i32.i16(out_$i239);
    goto corral_source_split_8657;

  corral_source_split_8655:
    assume {:verifier.code 0} true;
    out_$i239 := $zext.i16.i32(out_$i238);
    goto corral_source_split_8656;

  corral_source_split_8654:
    assume {:verifier.code 0} true;
    out_$i238 := $load.i16($M.85, in_$p1);
    goto corral_source_split_8655;

  corral_source_split_8653:
    assume {:verifier.code 0} true;
    out_$i237 := $trunc.i32.i16(out_$i236);
    goto corral_source_split_8654;

  corral_source_split_8652:
    assume {:verifier.code 0} true;
    out_$i236 := $zext.i16.i32(out_$i235);
    goto corral_source_split_8653;

  corral_source_split_8651:
    assume {:verifier.code 0} true;
    out_$i235 := $load.i16($M.85, in_$p4);
    goto corral_source_split_8652;

  corral_source_split_8650:
    assume {:verifier.code 0} true;
    out_$i234 := $trunc.i32.i16(out_$i233);
    goto corral_source_split_8651;

  corral_source_split_8649:
    assume {:verifier.code 0} true;
    out_$i233 := $zext.i16.i32(out_$i232);
    goto corral_source_split_8650;

  corral_source_split_8648:
    assume {:verifier.code 0} true;
    out_$i232 := $load.i16($M.85, in_$p5);
    goto corral_source_split_8649;

  corral_source_split_8647:
    assume {:verifier.code 0} true;
    out_$i231 := $trunc.i32.i16(out_$i230);
    goto corral_source_split_8648;

  corral_source_split_8646:
    assume {:verifier.code 0} true;
    out_$i230 := $zext.i16.i32(out_$i229);
    goto corral_source_split_8647;

  corral_source_split_8645:
    assume {:verifier.code 0} true;
    out_$i229 := $load.i16($M.85, in_$p0);
    goto corral_source_split_8646;

  corral_source_split_8644:
    assume {:verifier.code 0} true;
    out_$p228 := $M.87;
    goto corral_source_split_8645;

  $bb142:
    assume out_$i227 == 1;
    goto corral_source_split_8644;

  corral_source_split_8642:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb142, $bb143;

  corral_source_split_8641:
    assume {:verifier.code 0} true;
    out_$i227 := $eq.i32(out_$i226, 2);
    goto corral_source_split_8642;

  $bb141:
    assume {:verifier.code 0} true;
    out_$i226 := $M.91;
    goto corral_source_split_8641;

  $bb140:
    assume !(out_$i211 == 1);
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8639:
    assume {:verifier.code 0} true;
    goto $bb141;

  corral_source_split_8638:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1615} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8639;

  SeqInstr_555:
    goto corral_source_split_8638;

  SeqInstr_554:
    assume assertsPassed;
    goto SeqInstr_555;

  corral_source_split_8637:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1614} out_vslice_dummy_var_145 := oxu_hub_control(out_$p212, out_$i215, out_$i218, out_$i221, in_$p15, out_$i224);
    goto SeqInstr_554;

  corral_source_split_8636:
    assume {:verifier.code 0} true;
    out_$i224 := $trunc.i32.i16(out_$i223);
    goto corral_source_split_8637;

  corral_source_split_8635:
    assume {:verifier.code 0} true;
    out_$i223 := $zext.i16.i32(out_$i222);
    goto corral_source_split_8636;

  corral_source_split_8634:
    assume {:verifier.code 0} true;
    out_$i222 := $load.i16($M.85, in_$p1);
    goto corral_source_split_8635;

  corral_source_split_8633:
    assume {:verifier.code 0} true;
    out_$i221 := $trunc.i32.i16(out_$i220);
    goto corral_source_split_8634;

  corral_source_split_8632:
    assume {:verifier.code 0} true;
    out_$i220 := $zext.i16.i32(out_$i219);
    goto corral_source_split_8633;

  corral_source_split_8631:
    assume {:verifier.code 0} true;
    out_$i219 := $load.i16($M.85, in_$p4);
    goto corral_source_split_8632;

  corral_source_split_8630:
    assume {:verifier.code 0} true;
    out_$i218 := $trunc.i32.i16(out_$i217);
    goto corral_source_split_8631;

  corral_source_split_8629:
    assume {:verifier.code 0} true;
    out_$i217 := $zext.i16.i32(out_$i216);
    goto corral_source_split_8630;

  corral_source_split_8628:
    assume {:verifier.code 0} true;
    out_$i216 := $load.i16($M.85, in_$p5);
    goto corral_source_split_8629;

  corral_source_split_8627:
    assume {:verifier.code 0} true;
    out_$i215 := $trunc.i32.i16(out_$i214);
    goto corral_source_split_8628;

  corral_source_split_8626:
    assume {:verifier.code 0} true;
    out_$i214 := $zext.i16.i32(out_$i213);
    goto corral_source_split_8627;

  corral_source_split_8625:
    assume {:verifier.code 0} true;
    out_$i213 := $load.i16($M.85, in_$p0);
    goto corral_source_split_8626;

  corral_source_split_8624:
    assume {:verifier.code 0} true;
    out_$p212 := $M.87;
    goto corral_source_split_8625;

  $bb139:
    assume out_$i211 == 1;
    goto corral_source_split_8624;

  corral_source_split_8622:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb139, $bb140;

  corral_source_split_8621:
    assume {:verifier.code 0} true;
    out_$i211 := $eq.i32(out_$i210, 3);
    goto corral_source_split_8622;

  $bb138:
    assume {:verifier.code 0} true;
    out_$i210 := $M.91;
    goto corral_source_split_8621;

  $bb137:
    assume !(out_$i195 == 1);
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_8619:
    assume {:verifier.code 0} true;
    goto $bb138;

  corral_source_split_8618:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1613} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8619;

  SeqInstr_552:
    goto corral_source_split_8618;

  SeqInstr_551:
    assume assertsPassed;
    goto SeqInstr_552;

  corral_source_split_8617:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1612} out_vslice_dummy_var_144 := oxu_hub_control(out_$p196, out_$i199, out_$i202, out_$i205, in_$p15, out_$i208);
    goto SeqInstr_551;

  corral_source_split_8616:
    assume {:verifier.code 0} true;
    out_$i208 := $trunc.i32.i16(out_$i207);
    goto corral_source_split_8617;

  corral_source_split_8615:
    assume {:verifier.code 0} true;
    out_$i207 := $zext.i16.i32(out_$i206);
    goto corral_source_split_8616;

  corral_source_split_8614:
    assume {:verifier.code 0} true;
    out_$i206 := $load.i16($M.85, in_$p1);
    goto corral_source_split_8615;

  corral_source_split_8613:
    assume {:verifier.code 0} true;
    out_$i205 := $trunc.i32.i16(out_$i204);
    goto corral_source_split_8614;

  corral_source_split_8612:
    assume {:verifier.code 0} true;
    out_$i204 := $zext.i16.i32(out_$i203);
    goto corral_source_split_8613;

  corral_source_split_8611:
    assume {:verifier.code 0} true;
    out_$i203 := $load.i16($M.85, in_$p4);
    goto corral_source_split_8612;

  corral_source_split_8610:
    assume {:verifier.code 0} true;
    out_$i202 := $trunc.i32.i16(out_$i201);
    goto corral_source_split_8611;

  corral_source_split_8609:
    assume {:verifier.code 0} true;
    out_$i201 := $zext.i16.i32(out_$i200);
    goto corral_source_split_8610;

  corral_source_split_8608:
    assume {:verifier.code 0} true;
    out_$i200 := $load.i16($M.85, in_$p5);
    goto corral_source_split_8609;

  corral_source_split_8607:
    assume {:verifier.code 0} true;
    out_$i199 := $trunc.i32.i16(out_$i198);
    goto corral_source_split_8608;

  corral_source_split_8606:
    assume {:verifier.code 0} true;
    out_$i198 := $zext.i16.i32(out_$i197);
    goto corral_source_split_8607;

  corral_source_split_8605:
    assume {:verifier.code 0} true;
    out_$i197 := $load.i16($M.85, in_$p0);
    goto corral_source_split_8606;

  corral_source_split_8604:
    assume {:verifier.code 0} true;
    out_$p196 := $M.87;
    goto corral_source_split_8605;

  $bb136:
    assume out_$i195 == 1;
    goto corral_source_split_8604;

  corral_source_split_8337:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb136, $bb137;

  corral_source_split_8336:
    assume {:verifier.code 0} true;
    out_$i195 := $eq.i32(out_$i194, 1);
    goto corral_source_split_8337;

  corral_source_split_8335:
    assume {:verifier.code 0} true;
    out_$i194 := $M.91;
    goto corral_source_split_8336;

  $bb25:
    assume out_$i57 == 1;
    goto corral_source_split_8335;

  $bb24:
    assume !(out_$i56 == 1);
    assume {:verifier.code 0} true;
    out_$i57 := $slt.i32(out_$i53, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb25, $bb26;

  $bb152:
    assume !(out_$i251 == 1);
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_8680:
    assume {:verifier.code 0} true;
    goto $bb153;

  corral_source_split_8679:
    assume {:verifier.code 0} true;
    $M.91 := 2;
    call {:si_unique_call 1623} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(2);
    goto corral_source_split_8680;

  SeqInstr_567:
    goto corral_source_split_8679;

  SeqInstr_566:
    assume assertsPassed;
    goto SeqInstr_567;

  corral_source_split_8678:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1622} out_vslice_dummy_var_149 := oxu_get_frame(out_$p252);
    goto SeqInstr_566;

  corral_source_split_8677:
    assume {:verifier.code 0} true;
    out_$p252 := $M.87;
    goto corral_source_split_8678;

  $bb151:
    assume out_$i251 == 1;
    goto corral_source_split_8677;

  corral_source_split_8675:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb151, $bb152;

  corral_source_split_8674:
    assume {:verifier.code 0} true;
    out_$i251 := $eq.i32(out_$i250, 2);
    goto corral_source_split_8675;

  $bb150:
    assume {:verifier.code 0} true;
    out_$i250 := $M.91;
    goto corral_source_split_8674;

  $bb149:
    assume !(out_$i247 == 1);
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_8672:
    assume {:verifier.code 0} true;
    goto $bb150;

  corral_source_split_8671:
    assume {:verifier.code 0} true;
    $M.91 := 3;
    call {:si_unique_call 1621} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(3);
    goto corral_source_split_8672;

  SeqInstr_564:
    goto corral_source_split_8671;

  SeqInstr_563:
    assume assertsPassed;
    goto SeqInstr_564;

  corral_source_split_8670:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1620} out_vslice_dummy_var_148 := oxu_get_frame(out_$p248);
    goto SeqInstr_563;

  corral_source_split_8669:
    assume {:verifier.code 0} true;
    out_$p248 := $M.87;
    goto corral_source_split_8670;

  $bb148:
    assume out_$i247 == 1;
    goto corral_source_split_8669;

  corral_source_split_8667:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb148, $bb149;

  corral_source_split_8666:
    assume {:verifier.code 0} true;
    out_$i247 := $eq.i32(out_$i246, 3);
    goto corral_source_split_8667;

  $bb147:
    assume {:verifier.code 0} true;
    out_$i246 := $M.91;
    goto corral_source_split_8666;

  $bb146:
    assume !(out_$i243 == 1);
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_8664:
    assume {:verifier.code 0} true;
    goto $bb147;

  corral_source_split_8663:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1619} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8664;

  SeqInstr_561:
    goto corral_source_split_8663;

  SeqInstr_560:
    assume assertsPassed;
    goto SeqInstr_561;

  corral_source_split_8662:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1618} out_vslice_dummy_var_147 := oxu_get_frame(out_$p244);
    goto SeqInstr_560;

  corral_source_split_8661:
    assume {:verifier.code 0} true;
    out_$p244 := $M.87;
    goto corral_source_split_8662;

  $bb145:
    assume out_$i243 == 1;
    goto corral_source_split_8661;

  corral_source_split_8341:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb145, $bb146;

  corral_source_split_8340:
    assume {:verifier.code 0} true;
    out_$i243 := $eq.i32(out_$i242, 1);
    goto corral_source_split_8341;

  corral_source_split_8339:
    assume {:verifier.code 0} true;
    out_$i242 := $M.91;
    goto corral_source_split_8340;

  $bb27:
    assume out_$i58 == 1;
    goto corral_source_split_8339;

  $bb26:
    assume !(out_$i57 == 1);
    assume {:verifier.code 0} true;
    out_$i58 := $eq.i32(out_$i53, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb27, $bb28;

  corral_source_split_8682:
    assume {:verifier.code 0} true;
    goto $bb155;

  $bb154:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1624} ldv_stop();
    goto corral_source_split_8682;

  $bb29:
    assume {:verifier.code 0} true;
    goto $bb154;

  $bb28:
    assume {:verifier.code 0} true;
    assume !(out_$i58 == 1);
    goto $bb29;

  $bb47:
    assume {:verifier.code 0} true;
    assume !(out_$i67 == 1);
    goto $bb29;

  $bb159:
    assume !(out_$i255 == 1);
    assume {:verifier.code 0} true;
    goto $bb160;

  corral_source_split_8685:
    assume {:verifier.code 0} true;
    goto $bb160;

  SeqInstr_570:
    goto corral_source_split_8685;

  SeqInstr_569:
    assume assertsPassed;
    goto SeqInstr_570;

  corral_source_split_8684:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1625} choose_timer_1();
    goto SeqInstr_569;

  $bb158:
    assume out_$i255 == 1;
    goto corral_source_split_8684;

  corral_source_split_8327:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb158, $bb159;

  corral_source_split_8326:
    assume {:verifier.code 0} true;
    out_$i255 := $ne.i32(out_$i254, 0);
    goto corral_source_split_8327;

  corral_source_split_8325:
    assume {:verifier.code 0} true;
    out_$i254 := $M.92;
    goto corral_source_split_8326;

  $bb13:
    assume !(out_$i49 == 1);
    goto corral_source_split_8325;

  $bb162:
    assume !(out_$i257 == 1);
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb178:
    assume {:verifier.code 0} true;
    goto $bb190;

  $bb189:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb187:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb177:
    assume {:verifier.code 0} true;
    goto $bb178;

  $bb173:
    assume {:verifier.code 0} true;
    goto $bb177;

  $bb172:
    assume {:verifier.code 0} true;
    assume !(out_$i263 == 1);
    goto $bb173;

  $bb175:
    assume {:verifier.code 0} true;
    assume !(out_$i265 == 1);
    goto $bb173;

  corral_source_split_8699:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb175;

  corral_source_split_8698:
    assume {:verifier.code 0} true;
    out_$i265 := $eq.i32(out_$i264, 0);
    goto corral_source_split_8699;

  corral_source_split_8697:
    assume {:verifier.code 0} true;
    out_$i264 := $M.93;
    goto corral_source_split_8698;

  $bb171:
    assume out_$i263 == 1;
    goto corral_source_split_8697;

  corral_source_split_8695:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb171, $bb172;

  corral_source_split_8694:
    assume {:verifier.code 0} true;
    out_$i263 := $eq.i32(out_$i262, 3);
    goto corral_source_split_8695;

  corral_source_split_8693:
    assume {:verifier.code 0} true;
    out_$i262 := $M.94;
    goto corral_source_split_8694;

  $bb169:
    assume out_$i261 == 1;
    goto corral_source_split_8693;

  $bb164:
    assume out_$i259 == 1;
    assume {:verifier.code 0} true;
    out_$i261 := $eq.i32(out_$i258, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb169, $bb170;

  $bb163:
    assume {:verifier.code 0} true;
    out_$i259 := $slt.i32(out_$i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb164, $bb165;

  corral_source_split_8687:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1626} out_$i258 := __VERIFIER_nondet_int();
    call {:si_unique_call 1627} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i258);
    call {:si_unique_call 1628} {:cexpr "tmp___7"} boogie_si_record_i32(out_$i258);
    assume {:verifier.code 0} true;
    goto $bb163;

  $bb161:
    assume out_$i257 == 1;
    goto corral_source_split_8687;

  corral_source_split_8315:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb161, $bb162;

  corral_source_split_8314:
    assume {:verifier.code 0} true;
    out_$i257 := $ne.i32(out_$i256, 0);
    goto corral_source_split_8315;

  corral_source_split_8313:
    assume {:verifier.code 0} true;
    out_$i256 := $M.94;
    goto corral_source_split_8314;

  $bb5:
    assume out_$i46 == 1;
    goto corral_source_split_8313;

  $bb4:
    assume !(out_$i45 == 1);
    assume {:verifier.code 0} true;
    out_$i46 := $slt.i32(out_$i44, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb5, $bb6;

  $bb180:
    assume !(out_$i267 == 1);
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb186:
    assume {:verifier.code 0} true;
    goto $bb187;

  $bb185:
    assume !(out_$i272 == 1);
    assume {:verifier.code 0} true;
    goto $bb186;

  corral_source_split_8721:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb185;

  corral_source_split_8720:
    assume {:verifier.code 0} true;
    out_$i272 := $ne.i32(out_$i271, 0);
    goto corral_source_split_8721;

  $bb183:
    assume {:verifier.code 0} true;
    out_$i271 := $M.98;
    goto corral_source_split_8720;

  $bb182:
    assume !(out_$i270 == 1);
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_8718:
    assume {:verifier.code 0} true;
    goto $bb183;

  corral_source_split_8717:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1638} ldv_initialize_hc_driver_4();
    goto corral_source_split_8718;

  corral_source_split_8716:
    assume {:verifier.code 0} true;
    $M.91 := 1;
    call {:si_unique_call 1637} {:cexpr "ldv_state_variable_4"} boogie_si_record_i32(1);
    goto corral_source_split_8717;

  corral_source_split_8715:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1636} ldv_initialize_hc_driver_3();
    goto corral_source_split_8716;

  corral_source_split_8714:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1635} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8715;

  corral_source_split_8713:
    assume {:verifier.code 0} true;
    $M.94 := 3;
    call {:si_unique_call 1634} {:cexpr "ldv_state_variable_0"} boogie_si_record_i32(3);
    goto corral_source_split_8714;

  $bb181:
    assume out_$i270 == 1;
    goto corral_source_split_8713;

  corral_source_split_8711:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb181, $bb182;

  corral_source_split_8710:
    assume {:verifier.code 0} true;
    out_$i270 := $eq.i32(out_$i269, 0);
    goto corral_source_split_8711;

  corral_source_split_8709:
    assume {:verifier.code 0} true;
    out_$i269 := $M.98;
    goto corral_source_split_8710;

  corral_source_split_8708:
    assume {:verifier.code 0} true;
    $M.98 := out_$i268;
    call {:si_unique_call 1633} {:cexpr "ldv_retval_1"} boogie_si_record_i32(out_$i268);
    goto corral_source_split_8709;

  corral_source_split_8707:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1632} out_$i268 := oxu_driver_init();
    goto corral_source_split_8708;

  $bb179:
    assume out_$i267 == 1;
    goto corral_source_split_8707;

  corral_source_split_8691:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb179, $bb180;

  corral_source_split_8690:
    assume {:verifier.code 0} true;
    out_$i267 := $eq.i32(out_$i266, 1);
    goto corral_source_split_8691;

  corral_source_split_8689:
    assume {:verifier.code 0} true;
    out_$i266 := $M.94;
    goto corral_source_split_8690;

  $bb166:
    assume out_$i260 == 1;
    goto corral_source_split_8689;

  $bb165:
    assume !(out_$i259 == 1);
    assume {:verifier.code 0} true;
    out_$i260 := $eq.i32(out_$i258, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb166, $bb167;

  corral_source_split_8726:
    assume {:verifier.code 0} true;
    goto $bb189;

  $bb188:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1640} ldv_stop();
    goto corral_source_split_8726;

  $bb168:
    assume {:verifier.code 0} true;
    goto $bb188;

  $bb167:
    assume {:verifier.code 0} true;
    assume !(out_$i260 == 1);
    goto $bb168;

  $bb170:
    assume {:verifier.code 0} true;
    assume !(out_$i261 == 1);
    goto $bb168;

  $bb192:
    assume !(out_$i274 == 1);
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb229:
    assume {:verifier.code 0} true;
    goto $bb331;

  $bb330:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb328:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb319:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb310:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb301:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb295:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb286:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb277:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb268:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb265:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb256:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb247:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb238:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb228:
    assume {:verifier.code 0} true;
    goto $bb229;

  $bb224:
    assume !(out_$i291 == 1);
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb227:
    assume {:verifier.code 0} true;
    goto $bb228;

  $bb226:
    assume !(out_$i295 == 1);
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_8793:
    assume {:verifier.code 0} true;
    goto $bb227;

  corral_source_split_8792:
    assume {:verifier.code 0} true;
    $M.93 := out_$i297;
    call {:si_unique_call 1647} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i297);
    goto corral_source_split_8793;

  corral_source_split_8791:
    assume {:verifier.code 0} true;
    out_$i297 := $add.i32(out_$i296, 1);
    goto corral_source_split_8792;

  corral_source_split_8790:
    assume {:verifier.code 0} true;
    out_$i296 := $M.93;
    goto corral_source_split_8791;

  corral_source_split_8789:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1646} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8790;

  $bb225:
    assume out_$i295 == 1;
    goto corral_source_split_8789;

  corral_source_split_8787:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb225, $bb226;

  corral_source_split_8786:
    assume {:verifier.code 0} true;
    out_$i295 := $eq.i32(out_$i294, 0);
    goto corral_source_split_8787;

  corral_source_split_8785:
    assume {:verifier.code 0} true;
    out_$i294 := $M.99;
    goto corral_source_split_8786;

  corral_source_split_8784:
    assume {:verifier.code 0} true;
    $M.99 := out_$i293;
    call {:si_unique_call 1645} {:cexpr "ldv_retval_2"} boogie_si_record_i32(out_$i293);
    goto corral_source_split_8785;

  SeqInstr_573:
    goto corral_source_split_8784;

  SeqInstr_572:
    assume assertsPassed;
    goto SeqInstr_573;

  corral_source_split_8783:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1644} out_$i293 := oxu_run(out_$p292);
    goto SeqInstr_572;

  corral_source_split_8782:
    assume {:verifier.code 0} true;
    out_$p292 := $M.87;
    goto corral_source_split_8783;

  $bb223:
    assume out_$i291 == 1;
    goto corral_source_split_8782;

  corral_source_split_8780:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb223, $bb224;

  corral_source_split_8779:
    assume {:verifier.code 0} true;
    out_$i291 := $eq.i32(out_$i290, 1);
    goto corral_source_split_8780;

  corral_source_split_8778:
    assume {:verifier.code 0} true;
    out_$i290 := $M.95;
    goto corral_source_split_8779;

  $bb221:
    assume out_$i289 == 1;
    goto corral_source_split_8778;

  $bb217:
    assume out_$i287 == 1;
    assume {:verifier.code 0} true;
    out_$i289 := $eq.i32(out_$i275, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb221, $bb222;

  $bb211:
    assume out_$i284 == 1;
    assume {:verifier.code 0} true;
    out_$i287 := $slt.i32(out_$i275, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb217, $bb218;

  $bb194:
    assume out_$i276 == 1;
    assume {:verifier.code 0} true;
    out_$i284 := $slt.i32(out_$i275, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb211, $bb212;

  $bb193:
    assume {:verifier.code 0} true;
    out_$i276 := $slt.i32(out_$i275, 6);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb194, $bb195;

  corral_source_split_8728:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1641} out_$i275 := __VERIFIER_nondet_int();
    call {:si_unique_call 1642} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i275);
    call {:si_unique_call 1643} {:cexpr "tmp___8"} boogie_si_record_i32(out_$i275);
    assume {:verifier.code 0} true;
    goto $bb193;

  $bb191:
    assume out_$i274 == 1;
    goto corral_source_split_8728;

  corral_source_split_8319:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb191, $bb192;

  corral_source_split_8318:
    assume {:verifier.code 0} true;
    out_$i274 := $ne.i32(out_$i273, 0);
    goto corral_source_split_8319;

  corral_source_split_8317:
    assume {:verifier.code 0} true;
    out_$i273 := $M.95;
    goto corral_source_split_8318;

  $bb7:
    assume out_$i47 == 1;
    goto corral_source_split_8317;

  $bb6:
    assume !(out_$i46 == 1);
    assume {:verifier.code 0} true;
    out_$i47 := $slt.i32(out_$i44, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb7, $bb8;

  $bb237:
    assume !(out_$i311 == 1);
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_8820:
    assume {:verifier.code 0} true;
    goto $bb238;

  corral_source_split_8819:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1653} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8820;

  SeqInstr_582:
    goto corral_source_split_8819;

  SeqInstr_581:
    assume assertsPassed;
    goto SeqInstr_582;

  corral_source_split_8818:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1652} out_vslice_dummy_var_152 := oxu_urb_dequeue(out_$p312, out_$p313, out_$i314);
    goto SeqInstr_581;

  corral_source_split_8817:
    assume {:verifier.code 0} true;
    out_$i314 := $load.i32($M.85, in_$p8);
    goto corral_source_split_8818;

  corral_source_split_8816:
    assume {:verifier.code 0} true;
    out_$p313 := $M.86;
    goto corral_source_split_8817;

  corral_source_split_8815:
    assume {:verifier.code 0} true;
    out_$p312 := $M.87;
    goto corral_source_split_8816;

  $bb236:
    assume out_$i311 == 1;
    goto corral_source_split_8815;

  corral_source_split_8813:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb236, $bb237;

  corral_source_split_8812:
    assume {:verifier.code 0} true;
    out_$i311 := $eq.i32(out_$i310, 2);
    goto corral_source_split_8813;

  $bb235:
    assume {:verifier.code 0} true;
    out_$i310 := $M.95;
    goto corral_source_split_8812;

  $bb234:
    assume !(out_$i305 == 1);
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_8810:
    assume {:verifier.code 0} true;
    goto $bb235;

  corral_source_split_8809:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1651} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8810;

  SeqInstr_579:
    goto corral_source_split_8809;

  SeqInstr_578:
    assume assertsPassed;
    goto SeqInstr_579;

  corral_source_split_8808:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1650} out_vslice_dummy_var_151 := oxu_urb_dequeue(out_$p306, out_$p307, out_$i308);
    goto SeqInstr_578;

  corral_source_split_8807:
    assume {:verifier.code 0} true;
    out_$i308 := $load.i32($M.85, in_$p8);
    goto corral_source_split_8808;

  corral_source_split_8806:
    assume {:verifier.code 0} true;
    out_$p307 := $M.86;
    goto corral_source_split_8807;

  corral_source_split_8805:
    assume {:verifier.code 0} true;
    out_$p306 := $M.87;
    goto corral_source_split_8806;

  $bb233:
    assume out_$i305 == 1;
    goto corral_source_split_8805;

  corral_source_split_8803:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb233, $bb234;

  corral_source_split_8802:
    assume {:verifier.code 0} true;
    out_$i305 := $eq.i32(out_$i304, 3);
    goto corral_source_split_8803;

  $bb232:
    assume {:verifier.code 0} true;
    out_$i304 := $M.95;
    goto corral_source_split_8802;

  $bb231:
    assume !(out_$i299 == 1);
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_8800:
    assume {:verifier.code 0} true;
    goto $bb232;

  corral_source_split_8799:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1649} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8800;

  SeqInstr_576:
    goto corral_source_split_8799;

  SeqInstr_575:
    assume assertsPassed;
    goto SeqInstr_576;

  corral_source_split_8798:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1648} out_vslice_dummy_var_150 := oxu_urb_dequeue(out_$p300, out_$p301, out_$i302);
    goto SeqInstr_575;

  corral_source_split_8797:
    assume {:verifier.code 0} true;
    out_$i302 := $load.i32($M.85, in_$p8);
    goto corral_source_split_8798;

  corral_source_split_8796:
    assume {:verifier.code 0} true;
    out_$p301 := $M.86;
    goto corral_source_split_8797;

  corral_source_split_8795:
    assume {:verifier.code 0} true;
    out_$p300 := $M.87;
    goto corral_source_split_8796;

  $bb230:
    assume out_$i299 == 1;
    goto corral_source_split_8795;

  corral_source_split_8772:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb230, $bb231;

  corral_source_split_8771:
    assume {:verifier.code 0} true;
    out_$i299 := $eq.i32(out_$i298, 1);
    goto corral_source_split_8772;

  corral_source_split_8770:
    assume {:verifier.code 0} true;
    out_$i298 := $M.95;
    goto corral_source_split_8771;

  $bb219:
    assume out_$i288 == 1;
    goto corral_source_split_8770;

  $bb218:
    assume !(out_$i287 == 1);
    assume {:verifier.code 0} true;
    out_$i288 := $slt.i32(out_$i275, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb219, $bb220;

  $bb246:
    assume !(out_$i323 == 1);
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_8841:
    assume {:verifier.code 0} true;
    goto $bb247;

  corral_source_split_8840:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1659} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8841;

  SeqInstr_591:
    goto corral_source_split_8840;

  SeqInstr_590:
    assume assertsPassed;
    goto SeqInstr_591;

  corral_source_split_8839:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1658} oxu_endpoint_disable(out_$p324, in_$p17);
    goto SeqInstr_590;

  corral_source_split_8838:
    assume {:verifier.code 0} true;
    out_$p324 := $M.87;
    goto corral_source_split_8839;

  $bb245:
    assume out_$i323 == 1;
    goto corral_source_split_8838;

  corral_source_split_8836:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb245, $bb246;

  corral_source_split_8835:
    assume {:verifier.code 0} true;
    out_$i323 := $eq.i32(out_$i322, 2);
    goto corral_source_split_8836;

  $bb244:
    assume {:verifier.code 0} true;
    out_$i322 := $M.95;
    goto corral_source_split_8835;

  $bb243:
    assume !(out_$i320 == 1);
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_8833:
    assume {:verifier.code 0} true;
    goto $bb244;

  corral_source_split_8832:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1657} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8833;

  SeqInstr_588:
    goto corral_source_split_8832;

  SeqInstr_587:
    assume assertsPassed;
    goto SeqInstr_588;

  corral_source_split_8831:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1656} oxu_endpoint_disable(out_$p321, in_$p17);
    goto SeqInstr_587;

  corral_source_split_8830:
    assume {:verifier.code 0} true;
    out_$p321 := $M.87;
    goto corral_source_split_8831;

  $bb242:
    assume out_$i320 == 1;
    goto corral_source_split_8830;

  corral_source_split_8828:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb242, $bb243;

  corral_source_split_8827:
    assume {:verifier.code 0} true;
    out_$i320 := $eq.i32(out_$i319, 3);
    goto corral_source_split_8828;

  $bb241:
    assume {:verifier.code 0} true;
    out_$i319 := $M.95;
    goto corral_source_split_8827;

  $bb240:
    assume !(out_$i317 == 1);
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8825:
    assume {:verifier.code 0} true;
    goto $bb241;

  corral_source_split_8824:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1655} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8825;

  SeqInstr_585:
    goto corral_source_split_8824;

  SeqInstr_584:
    assume assertsPassed;
    goto SeqInstr_585;

  corral_source_split_8823:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1654} oxu_endpoint_disable(out_$p318, in_$p17);
    goto SeqInstr_584;

  corral_source_split_8822:
    assume {:verifier.code 0} true;
    out_$p318 := $M.87;
    goto corral_source_split_8823;

  $bb239:
    assume out_$i317 == 1;
    goto corral_source_split_8822;

  corral_source_split_8776:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb239, $bb240;

  corral_source_split_8775:
    assume {:verifier.code 0} true;
    out_$i317 := $eq.i32(out_$i316, 1);
    goto corral_source_split_8776;

  corral_source_split_8774:
    assume {:verifier.code 0} true;
    out_$i316 := $M.95;
    goto corral_source_split_8775;

  $bb220:
    assume !(out_$i288 == 1);
    goto corral_source_split_8774;

  $bb255:
    assume !(out_$i334 == 1);
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_8862:
    assume {:verifier.code 0} true;
    goto $bb256;

  corral_source_split_8861:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1665} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8862;

  SeqInstr_600:
    goto corral_source_split_8861;

  SeqInstr_599:
    assume assertsPassed;
    goto SeqInstr_600;

  corral_source_split_8860:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1664} out_vslice_dummy_var_155 := oxu_bus_resume(out_$p335);
    goto SeqInstr_599;

  corral_source_split_8859:
    assume {:verifier.code 0} true;
    out_$p335 := $M.87;
    goto corral_source_split_8860;

  $bb254:
    assume out_$i334 == 1;
    goto corral_source_split_8859;

  corral_source_split_8857:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb254, $bb255;

  corral_source_split_8856:
    assume {:verifier.code 0} true;
    out_$i334 := $eq.i32(out_$i333, 2);
    goto corral_source_split_8857;

  $bb253:
    assume {:verifier.code 0} true;
    out_$i333 := $M.95;
    goto corral_source_split_8856;

  $bb252:
    assume !(out_$i330 == 1);
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_8854:
    assume {:verifier.code 0} true;
    goto $bb253;

  corral_source_split_8853:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1663} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8854;

  SeqInstr_597:
    goto corral_source_split_8853;

  SeqInstr_596:
    assume assertsPassed;
    goto SeqInstr_597;

  corral_source_split_8852:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1662} out_vslice_dummy_var_154 := oxu_bus_resume(out_$p331);
    goto SeqInstr_596;

  corral_source_split_8851:
    assume {:verifier.code 0} true;
    out_$p331 := $M.87;
    goto corral_source_split_8852;

  $bb251:
    assume out_$i330 == 1;
    goto corral_source_split_8851;

  corral_source_split_8849:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb251, $bb252;

  corral_source_split_8848:
    assume {:verifier.code 0} true;
    out_$i330 := $eq.i32(out_$i329, 3);
    goto corral_source_split_8849;

  $bb250:
    assume {:verifier.code 0} true;
    out_$i329 := $M.95;
    goto corral_source_split_8848;

  $bb249:
    assume !(out_$i326 == 1);
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_8846:
    assume {:verifier.code 0} true;
    goto $bb250;

  corral_source_split_8845:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1661} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8846;

  SeqInstr_594:
    goto corral_source_split_8845;

  SeqInstr_593:
    assume assertsPassed;
    goto SeqInstr_594;

  corral_source_split_8844:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1660} out_vslice_dummy_var_153 := oxu_bus_resume(out_$p327);
    goto SeqInstr_593;

  corral_source_split_8843:
    assume {:verifier.code 0} true;
    out_$p327 := $M.87;
    goto corral_source_split_8844;

  $bb248:
    assume out_$i326 == 1;
    goto corral_source_split_8843;

  corral_source_split_8760:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb248, $bb249;

  corral_source_split_8759:
    assume {:verifier.code 0} true;
    out_$i326 := $eq.i32(out_$i325, 1);
    goto corral_source_split_8760;

  corral_source_split_8758:
    assume {:verifier.code 0} true;
    out_$i325 := $M.95;
    goto corral_source_split_8759;

  $bb213:
    assume out_$i285 == 1;
    goto corral_source_split_8758;

  $bb212:
    assume !(out_$i284 == 1);
    assume {:verifier.code 0} true;
    out_$i285 := $slt.i32(out_$i275, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb213, $bb214;

  $bb264:
    assume !(out_$i346 == 1);
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_8883:
    assume {:verifier.code 0} true;
    goto $bb265;

  corral_source_split_8882:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1671} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8883;

  SeqInstr_609:
    goto corral_source_split_8882;

  SeqInstr_608:
    assume assertsPassed;
    goto SeqInstr_609;

  corral_source_split_8881:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1670} out_vslice_dummy_var_158 := oxu_bus_suspend(out_$p347);
    goto SeqInstr_608;

  corral_source_split_8880:
    assume {:verifier.code 0} true;
    out_$p347 := $M.87;
    goto corral_source_split_8881;

  $bb263:
    assume out_$i346 == 1;
    goto corral_source_split_8880;

  corral_source_split_8878:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb263, $bb264;

  corral_source_split_8877:
    assume {:verifier.code 0} true;
    out_$i346 := $eq.i32(out_$i345, 2);
    goto corral_source_split_8878;

  $bb262:
    assume {:verifier.code 0} true;
    out_$i345 := $M.95;
    goto corral_source_split_8877;

  $bb261:
    assume !(out_$i342 == 1);
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_8875:
    assume {:verifier.code 0} true;
    goto $bb262;

  corral_source_split_8874:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1669} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8875;

  SeqInstr_606:
    goto corral_source_split_8874;

  SeqInstr_605:
    assume assertsPassed;
    goto SeqInstr_606;

  corral_source_split_8873:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1668} out_vslice_dummy_var_157 := oxu_bus_suspend(out_$p343);
    goto SeqInstr_605;

  corral_source_split_8872:
    assume {:verifier.code 0} true;
    out_$p343 := $M.87;
    goto corral_source_split_8873;

  $bb260:
    assume out_$i342 == 1;
    goto corral_source_split_8872;

  corral_source_split_8870:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb260, $bb261;

  corral_source_split_8869:
    assume {:verifier.code 0} true;
    out_$i342 := $eq.i32(out_$i341, 3);
    goto corral_source_split_8870;

  $bb259:
    assume {:verifier.code 0} true;
    out_$i341 := $M.95;
    goto corral_source_split_8869;

  $bb258:
    assume !(out_$i338 == 1);
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_8867:
    assume {:verifier.code 0} true;
    goto $bb259;

  corral_source_split_8866:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1667} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8867;

  SeqInstr_603:
    goto corral_source_split_8866;

  SeqInstr_602:
    assume assertsPassed;
    goto SeqInstr_603;

  corral_source_split_8865:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1666} out_vslice_dummy_var_156 := oxu_bus_suspend(out_$p339);
    goto SeqInstr_602;

  corral_source_split_8864:
    assume {:verifier.code 0} true;
    out_$p339 := $M.87;
    goto corral_source_split_8865;

  $bb257:
    assume out_$i338 == 1;
    goto corral_source_split_8864;

  corral_source_split_8764:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb257, $bb258;

  corral_source_split_8763:
    assume {:verifier.code 0} true;
    out_$i338 := $eq.i32(out_$i337, 1);
    goto corral_source_split_8764;

  corral_source_split_8762:
    assume {:verifier.code 0} true;
    out_$i337 := $M.95;
    goto corral_source_split_8763;

  $bb215:
    assume out_$i286 == 1;
    goto corral_source_split_8762;

  $bb214:
    assume !(out_$i285 == 1);
    assume {:verifier.code 0} true;
    out_$i286 := $slt.i32(out_$i275, 5);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb215, $bb216;

  $bb267:
    assume !(out_$i350 == 1);
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_8888:
    assume {:verifier.code 0} true;
    goto $bb268;

  corral_source_split_8887:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1673} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8888;

  SeqInstr_612:
    goto corral_source_split_8887;

  SeqInstr_611:
    assume assertsPassed;
    goto SeqInstr_612;

  corral_source_split_8886:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1672} oxu_shutdown(out_$p351);
    goto SeqInstr_611;

  corral_source_split_8885:
    assume {:verifier.code 0} true;
    out_$p351 := $M.87;
    goto corral_source_split_8886;

  $bb266:
    assume out_$i350 == 1;
    goto corral_source_split_8885;

  corral_source_split_8768:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb266, $bb267;

  corral_source_split_8767:
    assume {:verifier.code 0} true;
    out_$i350 := $eq.i32(out_$i349, 2);
    goto corral_source_split_8768;

  corral_source_split_8766:
    assume {:verifier.code 0} true;
    out_$i349 := $M.95;
    goto corral_source_split_8767;

  $bb216:
    assume !(out_$i286 == 1);
    goto corral_source_split_8766;

  $bb276:
    assume !(out_$i361 == 1);
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_8909:
    assume {:verifier.code 0} true;
    goto $bb277;

  corral_source_split_8908:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1679} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8909;

  SeqInstr_621:
    goto corral_source_split_8908;

  SeqInstr_620:
    assume assertsPassed;
    goto SeqInstr_621;

  corral_source_split_8907:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1678} out_vslice_dummy_var_161 := oxu_reset(out_$p362);
    goto SeqInstr_620;

  corral_source_split_8906:
    assume {:verifier.code 0} true;
    out_$p362 := $M.87;
    goto corral_source_split_8907;

  $bb275:
    assume out_$i361 == 1;
    goto corral_source_split_8906;

  corral_source_split_8904:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb275, $bb276;

  corral_source_split_8903:
    assume {:verifier.code 0} true;
    out_$i361 := $eq.i32(out_$i360, 2);
    goto corral_source_split_8904;

  $bb274:
    assume {:verifier.code 0} true;
    out_$i360 := $M.95;
    goto corral_source_split_8903;

  $bb273:
    assume !(out_$i357 == 1);
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_8901:
    assume {:verifier.code 0} true;
    goto $bb274;

  corral_source_split_8900:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1677} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8901;

  SeqInstr_618:
    goto corral_source_split_8900;

  SeqInstr_617:
    assume assertsPassed;
    goto SeqInstr_618;

  corral_source_split_8899:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1676} out_vslice_dummy_var_160 := oxu_reset(out_$p358);
    goto SeqInstr_617;

  corral_source_split_8898:
    assume {:verifier.code 0} true;
    out_$p358 := $M.87;
    goto corral_source_split_8899;

  $bb272:
    assume out_$i357 == 1;
    goto corral_source_split_8898;

  corral_source_split_8896:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb272, $bb273;

  corral_source_split_8895:
    assume {:verifier.code 0} true;
    out_$i357 := $eq.i32(out_$i356, 3);
    goto corral_source_split_8896;

  $bb271:
    assume {:verifier.code 0} true;
    out_$i356 := $M.95;
    goto corral_source_split_8895;

  $bb270:
    assume !(out_$i353 == 1);
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_8893:
    assume {:verifier.code 0} true;
    goto $bb271;

  corral_source_split_8892:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1675} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8893;

  SeqInstr_615:
    goto corral_source_split_8892;

  SeqInstr_614:
    assume assertsPassed;
    goto SeqInstr_615;

  corral_source_split_8891:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1674} out_vslice_dummy_var_159 := oxu_reset(out_$p354);
    goto SeqInstr_614;

  corral_source_split_8890:
    assume {:verifier.code 0} true;
    out_$p354 := $M.87;
    goto corral_source_split_8891;

  $bb269:
    assume out_$i353 == 1;
    goto corral_source_split_8890;

  corral_source_split_8748:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb269, $bb270;

  corral_source_split_8747:
    assume {:verifier.code 0} true;
    out_$i353 := $eq.i32(out_$i352, 1);
    goto corral_source_split_8748;

  corral_source_split_8746:
    assume {:verifier.code 0} true;
    out_$i352 := $M.95;
    goto corral_source_split_8747;

  $bb207:
    assume out_$i282 == 1;
    goto corral_source_split_8746;

  $bb196:
    assume out_$i277 == 1;
    assume {:verifier.code 0} true;
    out_$i282 := $slt.i32(out_$i275, 7);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb207, $bb208;

  $bb195:
    assume !(out_$i276 == 1);
    assume {:verifier.code 0} true;
    out_$i277 := $slt.i32(out_$i275, 9);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb196, $bb197;

  $bb285:
    assume !(out_$i373 == 1);
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_8930:
    assume {:verifier.code 0} true;
    goto $bb286;

  corral_source_split_8929:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1685} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8930;

  SeqInstr_630:
    goto corral_source_split_8929;

  SeqInstr_629:
    assume assertsPassed;
    goto SeqInstr_630;

  corral_source_split_8928:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1684} out_vslice_dummy_var_164 := oxu_hub_status_data(out_$p374, in_$p18);
    goto SeqInstr_629;

  corral_source_split_8927:
    assume {:verifier.code 0} true;
    out_$p374 := $M.87;
    goto corral_source_split_8928;

  $bb284:
    assume out_$i373 == 1;
    goto corral_source_split_8927;

  corral_source_split_8925:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb284, $bb285;

  corral_source_split_8924:
    assume {:verifier.code 0} true;
    out_$i373 := $eq.i32(out_$i372, 2);
    goto corral_source_split_8925;

  $bb283:
    assume {:verifier.code 0} true;
    out_$i372 := $M.95;
    goto corral_source_split_8924;

  $bb282:
    assume !(out_$i369 == 1);
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_8922:
    assume {:verifier.code 0} true;
    goto $bb283;

  corral_source_split_8921:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1683} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8922;

  SeqInstr_627:
    goto corral_source_split_8921;

  SeqInstr_626:
    assume assertsPassed;
    goto SeqInstr_627;

  corral_source_split_8920:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1682} out_vslice_dummy_var_163 := oxu_hub_status_data(out_$p370, in_$p18);
    goto SeqInstr_626;

  corral_source_split_8919:
    assume {:verifier.code 0} true;
    out_$p370 := $M.87;
    goto corral_source_split_8920;

  $bb281:
    assume out_$i369 == 1;
    goto corral_source_split_8919;

  corral_source_split_8917:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb281, $bb282;

  corral_source_split_8916:
    assume {:verifier.code 0} true;
    out_$i369 := $eq.i32(out_$i368, 3);
    goto corral_source_split_8917;

  $bb280:
    assume {:verifier.code 0} true;
    out_$i368 := $M.95;
    goto corral_source_split_8916;

  $bb279:
    assume !(out_$i365 == 1);
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_8914:
    assume {:verifier.code 0} true;
    goto $bb280;

  corral_source_split_8913:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1681} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8914;

  SeqInstr_624:
    goto corral_source_split_8913;

  SeqInstr_623:
    assume assertsPassed;
    goto SeqInstr_624;

  corral_source_split_8912:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1680} out_vslice_dummy_var_162 := oxu_hub_status_data(out_$p366, in_$p18);
    goto SeqInstr_623;

  corral_source_split_8911:
    assume {:verifier.code 0} true;
    out_$p366 := $M.87;
    goto corral_source_split_8912;

  $bb278:
    assume out_$i365 == 1;
    goto corral_source_split_8911;

  corral_source_split_8752:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb278, $bb279;

  corral_source_split_8751:
    assume {:verifier.code 0} true;
    out_$i365 := $eq.i32(out_$i364, 1);
    goto corral_source_split_8752;

  corral_source_split_8750:
    assume {:verifier.code 0} true;
    out_$i364 := $M.95;
    goto corral_source_split_8751;

  $bb209:
    assume out_$i283 == 1;
    goto corral_source_split_8750;

  $bb208:
    assume !(out_$i282 == 1);
    assume {:verifier.code 0} true;
    out_$i283 := $slt.i32(out_$i275, 8);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb209, $bb210;

  $bb294:
    assume !(out_$i385 == 1);
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_8951:
    assume {:verifier.code 0} true;
    goto $bb295;

  corral_source_split_8950:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1691} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8951;

  SeqInstr_639:
    goto corral_source_split_8950;

  SeqInstr_638:
    assume assertsPassed;
    goto SeqInstr_639;

  corral_source_split_8949:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1690} out_vslice_dummy_var_167 := oxu_irq(out_$p386);
    goto SeqInstr_638;

  corral_source_split_8948:
    assume {:verifier.code 0} true;
    out_$p386 := $M.87;
    goto corral_source_split_8949;

  $bb293:
    assume out_$i385 == 1;
    goto corral_source_split_8948;

  corral_source_split_8946:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb293, $bb294;

  corral_source_split_8945:
    assume {:verifier.code 0} true;
    out_$i385 := $eq.i32(out_$i384, 2);
    goto corral_source_split_8946;

  $bb292:
    assume {:verifier.code 0} true;
    out_$i384 := $M.95;
    goto corral_source_split_8945;

  $bb291:
    assume !(out_$i381 == 1);
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_8943:
    assume {:verifier.code 0} true;
    goto $bb292;

  corral_source_split_8942:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1689} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8943;

  SeqInstr_636:
    goto corral_source_split_8942;

  SeqInstr_635:
    assume assertsPassed;
    goto SeqInstr_636;

  corral_source_split_8941:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1688} out_vslice_dummy_var_166 := oxu_irq(out_$p382);
    goto SeqInstr_635;

  corral_source_split_8940:
    assume {:verifier.code 0} true;
    out_$p382 := $M.87;
    goto corral_source_split_8941;

  $bb290:
    assume out_$i381 == 1;
    goto corral_source_split_8940;

  corral_source_split_8938:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb290, $bb291;

  corral_source_split_8937:
    assume {:verifier.code 0} true;
    out_$i381 := $eq.i32(out_$i380, 3);
    goto corral_source_split_8938;

  $bb289:
    assume {:verifier.code 0} true;
    out_$i380 := $M.95;
    goto corral_source_split_8937;

  $bb288:
    assume !(out_$i377 == 1);
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_8935:
    assume {:verifier.code 0} true;
    goto $bb289;

  corral_source_split_8934:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1687} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8935;

  SeqInstr_633:
    goto corral_source_split_8934;

  SeqInstr_632:
    assume assertsPassed;
    goto SeqInstr_633;

  corral_source_split_8933:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1686} out_vslice_dummy_var_165 := oxu_irq(out_$p378);
    goto SeqInstr_632;

  corral_source_split_8932:
    assume {:verifier.code 0} true;
    out_$p378 := $M.87;
    goto corral_source_split_8933;

  $bb287:
    assume out_$i377 == 1;
    goto corral_source_split_8932;

  corral_source_split_8756:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb287, $bb288;

  corral_source_split_8755:
    assume {:verifier.code 0} true;
    out_$i377 := $eq.i32(out_$i376, 1);
    goto corral_source_split_8756;

  corral_source_split_8754:
    assume {:verifier.code 0} true;
    out_$i376 := $M.95;
    goto corral_source_split_8755;

  $bb210:
    assume !(out_$i283 == 1);
    goto corral_source_split_8754;

  $bb300:
    assume !(out_$i394 == 1);
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_8970:
    assume {:verifier.code 0} true;
    goto $bb301;

  corral_source_split_8969:
    assume {:verifier.code 0} true;
    $M.93 := out_$i397;
    call {:si_unique_call 1697} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i397);
    goto corral_source_split_8970;

  corral_source_split_8968:
    assume {:verifier.code 0} true;
    out_$i397 := $sub.i32(out_$i396, 1);
    goto corral_source_split_8969;

  corral_source_split_8967:
    assume {:verifier.code 0} true;
    out_$i396 := $M.93;
    goto corral_source_split_8968;

  corral_source_split_8966:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1696} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8967;

  SeqInstr_645:
    goto corral_source_split_8966;

  SeqInstr_644:
    assume assertsPassed;
    goto SeqInstr_645;

  corral_source_split_8965:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1695} oxu_stop(out_$p395);
    goto SeqInstr_644;

  corral_source_split_8964:
    assume {:verifier.code 0} true;
    out_$p395 := $M.87;
    goto corral_source_split_8965;

  $bb299:
    assume out_$i394 == 1;
    goto corral_source_split_8964;

  corral_source_split_8962:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb299, $bb300;

  corral_source_split_8961:
    assume {:verifier.code 0} true;
    out_$i394 := $eq.i32(out_$i393, 2);
    goto corral_source_split_8962;

  $bb298:
    assume {:verifier.code 0} true;
    out_$i393 := $M.95;
    goto corral_source_split_8961;

  $bb297:
    assume !(out_$i389 == 1);
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_8959:
    assume {:verifier.code 0} true;
    goto $bb298;

  corral_source_split_8958:
    assume {:verifier.code 0} true;
    $M.93 := out_$i392;
    call {:si_unique_call 1694} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i392);
    goto corral_source_split_8959;

  corral_source_split_8957:
    assume {:verifier.code 0} true;
    out_$i392 := $sub.i32(out_$i391, 1);
    goto corral_source_split_8958;

  corral_source_split_8956:
    assume {:verifier.code 0} true;
    out_$i391 := $M.93;
    goto corral_source_split_8957;

  corral_source_split_8955:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1693} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8956;

  SeqInstr_642:
    goto corral_source_split_8955;

  SeqInstr_641:
    assume assertsPassed;
    goto SeqInstr_642;

  corral_source_split_8954:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1692} oxu_stop(out_$p390);
    goto SeqInstr_641;

  corral_source_split_8953:
    assume {:verifier.code 0} true;
    out_$p390 := $M.87;
    goto corral_source_split_8954;

  $bb296:
    assume out_$i389 == 1;
    goto corral_source_split_8953;

  corral_source_split_8740:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb296, $bb297;

  corral_source_split_8739:
    assume {:verifier.code 0} true;
    out_$i389 := $eq.i32(out_$i388, 3);
    goto corral_source_split_8740;

  corral_source_split_8738:
    assume {:verifier.code 0} true;
    out_$i388 := $M.95;
    goto corral_source_split_8739;

  $bb205:
    assume out_$i281 == 1;
    goto corral_source_split_8738;

  $bb198:
    assume out_$i278 == 1;
    assume {:verifier.code 0} true;
    out_$i281 := $slt.i32(out_$i275, 10);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb205, $bb206;

  $bb197:
    assume !(out_$i277 == 1);
    assume {:verifier.code 0} true;
    out_$i278 := $slt.i32(out_$i275, 11);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb198, $bb199;

  $bb309:
    assume !(out_$i411 == 1);
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_8997:
    assume {:verifier.code 0} true;
    goto $bb310;

  corral_source_split_8996:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1703} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_8997;

  SeqInstr_654:
    goto corral_source_split_8996;

  SeqInstr_653:
    assume assertsPassed;
    goto SeqInstr_654;

  corral_source_split_8995:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1702} out_vslice_dummy_var_170 := oxu_urb_enqueue(out_$p412, out_$p413, out_$i414);
    goto SeqInstr_653;

  corral_source_split_8994:
    assume {:verifier.code 0} true;
    out_$i414 := $load.i32($M.85, in_$p9);
    goto corral_source_split_8995;

  corral_source_split_8993:
    assume {:verifier.code 0} true;
    out_$p413 := $M.86;
    goto corral_source_split_8994;

  corral_source_split_8992:
    assume {:verifier.code 0} true;
    out_$p412 := $M.87;
    goto corral_source_split_8993;

  $bb308:
    assume out_$i411 == 1;
    goto corral_source_split_8992;

  corral_source_split_8990:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb308, $bb309;

  corral_source_split_8989:
    assume {:verifier.code 0} true;
    out_$i411 := $eq.i32(out_$i410, 2);
    goto corral_source_split_8990;

  $bb307:
    assume {:verifier.code 0} true;
    out_$i410 := $M.95;
    goto corral_source_split_8989;

  $bb306:
    assume !(out_$i405 == 1);
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_8987:
    assume {:verifier.code 0} true;
    goto $bb307;

  corral_source_split_8986:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1701} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_8987;

  SeqInstr_651:
    goto corral_source_split_8986;

  SeqInstr_650:
    assume assertsPassed;
    goto SeqInstr_651;

  corral_source_split_8985:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1700} out_vslice_dummy_var_169 := oxu_urb_enqueue(out_$p406, out_$p407, out_$i408);
    goto SeqInstr_650;

  corral_source_split_8984:
    assume {:verifier.code 0} true;
    out_$i408 := $load.i32($M.85, in_$p9);
    goto corral_source_split_8985;

  corral_source_split_8983:
    assume {:verifier.code 0} true;
    out_$p407 := $M.86;
    goto corral_source_split_8984;

  corral_source_split_8982:
    assume {:verifier.code 0} true;
    out_$p406 := $M.87;
    goto corral_source_split_8983;

  $bb305:
    assume out_$i405 == 1;
    goto corral_source_split_8982;

  corral_source_split_8980:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb305, $bb306;

  corral_source_split_8979:
    assume {:verifier.code 0} true;
    out_$i405 := $eq.i32(out_$i404, 3);
    goto corral_source_split_8980;

  $bb304:
    assume {:verifier.code 0} true;
    out_$i404 := $M.95;
    goto corral_source_split_8979;

  $bb303:
    assume !(out_$i399 == 1);
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_8977:
    assume {:verifier.code 0} true;
    goto $bb304;

  corral_source_split_8976:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1699} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_8977;

  SeqInstr_648:
    goto corral_source_split_8976;

  SeqInstr_647:
    assume assertsPassed;
    goto SeqInstr_648;

  corral_source_split_8975:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1698} out_vslice_dummy_var_168 := oxu_urb_enqueue(out_$p400, out_$p401, out_$i402);
    goto SeqInstr_647;

  corral_source_split_8974:
    assume {:verifier.code 0} true;
    out_$i402 := $load.i32($M.85, in_$p9);
    goto corral_source_split_8975;

  corral_source_split_8973:
    assume {:verifier.code 0} true;
    out_$p401 := $M.86;
    goto corral_source_split_8974;

  corral_source_split_8972:
    assume {:verifier.code 0} true;
    out_$p400 := $M.87;
    goto corral_source_split_8973;

  $bb302:
    assume out_$i399 == 1;
    goto corral_source_split_8972;

  corral_source_split_8744:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb302, $bb303;

  corral_source_split_8743:
    assume {:verifier.code 0} true;
    out_$i399 := $eq.i32(out_$i398, 1);
    goto corral_source_split_8744;

  corral_source_split_8742:
    assume {:verifier.code 0} true;
    out_$i398 := $M.95;
    goto corral_source_split_8743;

  $bb206:
    assume !(out_$i281 == 1);
    goto corral_source_split_8742;

  $bb318:
    assume !(out_$i449 == 1);
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_9054:
    assume {:verifier.code 0} true;
    goto $bb319;

  corral_source_split_9053:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1709} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9054;

  SeqInstr_663:
    goto corral_source_split_9053;

  SeqInstr_662:
    assume assertsPassed;
    goto SeqInstr_663;

  corral_source_split_9052:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1708} out_vslice_dummy_var_173 := oxu_hub_control(out_$p450, out_$i453, out_$i456, out_$i459, in_$p19, out_$i462);
    goto SeqInstr_662;

  corral_source_split_9051:
    assume {:verifier.code 0} true;
    out_$i462 := $trunc.i32.i16(out_$i461);
    goto corral_source_split_9052;

  corral_source_split_9050:
    assume {:verifier.code 0} true;
    out_$i461 := $zext.i16.i32(out_$i460);
    goto corral_source_split_9051;

  corral_source_split_9049:
    assume {:verifier.code 0} true;
    out_$i460 := $load.i16($M.85, in_$p11);
    goto corral_source_split_9050;

  corral_source_split_9048:
    assume {:verifier.code 0} true;
    out_$i459 := $trunc.i32.i16(out_$i458);
    goto corral_source_split_9049;

  corral_source_split_9047:
    assume {:verifier.code 0} true;
    out_$i458 := $zext.i16.i32(out_$i457);
    goto corral_source_split_9048;

  corral_source_split_9046:
    assume {:verifier.code 0} true;
    out_$i457 := $load.i16($M.85, in_$p10);
    goto corral_source_split_9047;

  corral_source_split_9045:
    assume {:verifier.code 0} true;
    out_$i456 := $trunc.i32.i16(out_$i455);
    goto corral_source_split_9046;

  corral_source_split_9044:
    assume {:verifier.code 0} true;
    out_$i455 := $zext.i16.i32(out_$i454);
    goto corral_source_split_9045;

  corral_source_split_9043:
    assume {:verifier.code 0} true;
    out_$i454 := $load.i16($M.85, in_$p6);
    goto corral_source_split_9044;

  corral_source_split_9042:
    assume {:verifier.code 0} true;
    out_$i453 := $trunc.i32.i16(out_$i452);
    goto corral_source_split_9043;

  corral_source_split_9041:
    assume {:verifier.code 0} true;
    out_$i452 := $zext.i16.i32(out_$i451);
    goto corral_source_split_9042;

  corral_source_split_9040:
    assume {:verifier.code 0} true;
    out_$i451 := $load.i16($M.85, in_$p7);
    goto corral_source_split_9041;

  corral_source_split_9039:
    assume {:verifier.code 0} true;
    out_$p450 := $M.87;
    goto corral_source_split_9040;

  $bb317:
    assume out_$i449 == 1;
    goto corral_source_split_9039;

  corral_source_split_9037:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb317, $bb318;

  corral_source_split_9036:
    assume {:verifier.code 0} true;
    out_$i449 := $eq.i32(out_$i448, 2);
    goto corral_source_split_9037;

  $bb316:
    assume {:verifier.code 0} true;
    out_$i448 := $M.95;
    goto corral_source_split_9036;

  $bb315:
    assume !(out_$i433 == 1);
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_9034:
    assume {:verifier.code 0} true;
    goto $bb316;

  corral_source_split_9033:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1707} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9034;

  SeqInstr_660:
    goto corral_source_split_9033;

  SeqInstr_659:
    assume assertsPassed;
    goto SeqInstr_660;

  corral_source_split_9032:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1706} out_vslice_dummy_var_172 := oxu_hub_control(out_$p434, out_$i437, out_$i440, out_$i443, in_$p19, out_$i446);
    goto SeqInstr_659;

  corral_source_split_9031:
    assume {:verifier.code 0} true;
    out_$i446 := $trunc.i32.i16(out_$i445);
    goto corral_source_split_9032;

  corral_source_split_9030:
    assume {:verifier.code 0} true;
    out_$i445 := $zext.i16.i32(out_$i444);
    goto corral_source_split_9031;

  corral_source_split_9029:
    assume {:verifier.code 0} true;
    out_$i444 := $load.i16($M.85, in_$p11);
    goto corral_source_split_9030;

  corral_source_split_9028:
    assume {:verifier.code 0} true;
    out_$i443 := $trunc.i32.i16(out_$i442);
    goto corral_source_split_9029;

  corral_source_split_9027:
    assume {:verifier.code 0} true;
    out_$i442 := $zext.i16.i32(out_$i441);
    goto corral_source_split_9028;

  corral_source_split_9026:
    assume {:verifier.code 0} true;
    out_$i441 := $load.i16($M.85, in_$p10);
    goto corral_source_split_9027;

  corral_source_split_9025:
    assume {:verifier.code 0} true;
    out_$i440 := $trunc.i32.i16(out_$i439);
    goto corral_source_split_9026;

  corral_source_split_9024:
    assume {:verifier.code 0} true;
    out_$i439 := $zext.i16.i32(out_$i438);
    goto corral_source_split_9025;

  corral_source_split_9023:
    assume {:verifier.code 0} true;
    out_$i438 := $load.i16($M.85, in_$p6);
    goto corral_source_split_9024;

  corral_source_split_9022:
    assume {:verifier.code 0} true;
    out_$i437 := $trunc.i32.i16(out_$i436);
    goto corral_source_split_9023;

  corral_source_split_9021:
    assume {:verifier.code 0} true;
    out_$i436 := $zext.i16.i32(out_$i435);
    goto corral_source_split_9022;

  corral_source_split_9020:
    assume {:verifier.code 0} true;
    out_$i435 := $load.i16($M.85, in_$p7);
    goto corral_source_split_9021;

  corral_source_split_9019:
    assume {:verifier.code 0} true;
    out_$p434 := $M.87;
    goto corral_source_split_9020;

  $bb314:
    assume out_$i433 == 1;
    goto corral_source_split_9019;

  corral_source_split_9017:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb314, $bb315;

  corral_source_split_9016:
    assume {:verifier.code 0} true;
    out_$i433 := $eq.i32(out_$i432, 3);
    goto corral_source_split_9017;

  $bb313:
    assume {:verifier.code 0} true;
    out_$i432 := $M.95;
    goto corral_source_split_9016;

  $bb312:
    assume !(out_$i417 == 1);
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_9014:
    assume {:verifier.code 0} true;
    goto $bb313;

  corral_source_split_9013:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1705} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9014;

  SeqInstr_657:
    goto corral_source_split_9013;

  SeqInstr_656:
    assume assertsPassed;
    goto SeqInstr_657;

  corral_source_split_9012:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1704} out_vslice_dummy_var_171 := oxu_hub_control(out_$p418, out_$i421, out_$i424, out_$i427, in_$p19, out_$i430);
    goto SeqInstr_656;

  corral_source_split_9011:
    assume {:verifier.code 0} true;
    out_$i430 := $trunc.i32.i16(out_$i429);
    goto corral_source_split_9012;

  corral_source_split_9010:
    assume {:verifier.code 0} true;
    out_$i429 := $zext.i16.i32(out_$i428);
    goto corral_source_split_9011;

  corral_source_split_9009:
    assume {:verifier.code 0} true;
    out_$i428 := $load.i16($M.85, in_$p11);
    goto corral_source_split_9010;

  corral_source_split_9008:
    assume {:verifier.code 0} true;
    out_$i427 := $trunc.i32.i16(out_$i426);
    goto corral_source_split_9009;

  corral_source_split_9007:
    assume {:verifier.code 0} true;
    out_$i426 := $zext.i16.i32(out_$i425);
    goto corral_source_split_9008;

  corral_source_split_9006:
    assume {:verifier.code 0} true;
    out_$i425 := $load.i16($M.85, in_$p10);
    goto corral_source_split_9007;

  corral_source_split_9005:
    assume {:verifier.code 0} true;
    out_$i424 := $trunc.i32.i16(out_$i423);
    goto corral_source_split_9006;

  corral_source_split_9004:
    assume {:verifier.code 0} true;
    out_$i423 := $zext.i16.i32(out_$i422);
    goto corral_source_split_9005;

  corral_source_split_9003:
    assume {:verifier.code 0} true;
    out_$i422 := $load.i16($M.85, in_$p6);
    goto corral_source_split_9004;

  corral_source_split_9002:
    assume {:verifier.code 0} true;
    out_$i421 := $trunc.i32.i16(out_$i420);
    goto corral_source_split_9003;

  corral_source_split_9001:
    assume {:verifier.code 0} true;
    out_$i420 := $zext.i16.i32(out_$i419);
    goto corral_source_split_9002;

  corral_source_split_9000:
    assume {:verifier.code 0} true;
    out_$i419 := $load.i16($M.85, in_$p7);
    goto corral_source_split_9001;

  corral_source_split_8999:
    assume {:verifier.code 0} true;
    out_$p418 := $M.87;
    goto corral_source_split_9000;

  $bb311:
    assume out_$i417 == 1;
    goto corral_source_split_8999;

  corral_source_split_8732:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb311, $bb312;

  corral_source_split_8731:
    assume {:verifier.code 0} true;
    out_$i417 := $eq.i32(out_$i416, 1);
    goto corral_source_split_8732;

  corral_source_split_8730:
    assume {:verifier.code 0} true;
    out_$i416 := $M.95;
    goto corral_source_split_8731;

  $bb200:
    assume out_$i279 == 1;
    goto corral_source_split_8730;

  $bb199:
    assume !(out_$i278 == 1);
    assume {:verifier.code 0} true;
    out_$i279 := $slt.i32(out_$i275, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb200, $bb201;

  $bb327:
    assume !(out_$i473 == 1);
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_9075:
    assume {:verifier.code 0} true;
    goto $bb328;

  corral_source_split_9074:
    assume {:verifier.code 0} true;
    $M.95 := 2;
    call {:si_unique_call 1715} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(2);
    goto corral_source_split_9075;

  SeqInstr_672:
    goto corral_source_split_9074;

  SeqInstr_671:
    assume assertsPassed;
    goto SeqInstr_672;

  corral_source_split_9073:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1714} out_vslice_dummy_var_176 := oxu_get_frame(out_$p474);
    goto SeqInstr_671;

  corral_source_split_9072:
    assume {:verifier.code 0} true;
    out_$p474 := $M.87;
    goto corral_source_split_9073;

  $bb326:
    assume out_$i473 == 1;
    goto corral_source_split_9072;

  corral_source_split_9070:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb326, $bb327;

  corral_source_split_9069:
    assume {:verifier.code 0} true;
    out_$i473 := $eq.i32(out_$i472, 2);
    goto corral_source_split_9070;

  $bb325:
    assume {:verifier.code 0} true;
    out_$i472 := $M.95;
    goto corral_source_split_9069;

  $bb324:
    assume !(out_$i469 == 1);
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_9067:
    assume {:verifier.code 0} true;
    goto $bb325;

  corral_source_split_9066:
    assume {:verifier.code 0} true;
    $M.95 := 3;
    call {:si_unique_call 1713} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(3);
    goto corral_source_split_9067;

  SeqInstr_669:
    goto corral_source_split_9066;

  SeqInstr_668:
    assume assertsPassed;
    goto SeqInstr_669;

  corral_source_split_9065:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1712} out_vslice_dummy_var_175 := oxu_get_frame(out_$p470);
    goto SeqInstr_668;

  corral_source_split_9064:
    assume {:verifier.code 0} true;
    out_$p470 := $M.87;
    goto corral_source_split_9065;

  $bb323:
    assume out_$i469 == 1;
    goto corral_source_split_9064;

  corral_source_split_9062:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb323, $bb324;

  corral_source_split_9061:
    assume {:verifier.code 0} true;
    out_$i469 := $eq.i32(out_$i468, 3);
    goto corral_source_split_9062;

  $bb322:
    assume {:verifier.code 0} true;
    out_$i468 := $M.95;
    goto corral_source_split_9061;

  $bb321:
    assume !(out_$i465 == 1);
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_9059:
    assume {:verifier.code 0} true;
    goto $bb322;

  corral_source_split_9058:
    assume {:verifier.code 0} true;
    $M.95 := 1;
    call {:si_unique_call 1711} {:cexpr "ldv_state_variable_3"} boogie_si_record_i32(1);
    goto corral_source_split_9059;

  SeqInstr_666:
    goto corral_source_split_9058;

  SeqInstr_665:
    assume assertsPassed;
    goto SeqInstr_666;

  corral_source_split_9057:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1710} out_vslice_dummy_var_174 := oxu_get_frame(out_$p466);
    goto SeqInstr_665;

  corral_source_split_9056:
    assume {:verifier.code 0} true;
    out_$p466 := $M.87;
    goto corral_source_split_9057;

  $bb320:
    assume out_$i465 == 1;
    goto corral_source_split_9056;

  corral_source_split_8736:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb320, $bb321;

  corral_source_split_8735:
    assume {:verifier.code 0} true;
    out_$i465 := $eq.i32(out_$i464, 1);
    goto corral_source_split_8736;

  corral_source_split_8734:
    assume {:verifier.code 0} true;
    out_$i464 := $M.95;
    goto corral_source_split_8735;

  $bb202:
    assume out_$i280 == 1;
    goto corral_source_split_8734;

  $bb201:
    assume !(out_$i279 == 1);
    assume {:verifier.code 0} true;
    out_$i280 := $eq.i32(out_$i275, 12);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb202, $bb203;

  corral_source_split_9077:
    assume {:verifier.code 0} true;
    goto $bb330;

  $bb329:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1716} ldv_stop();
    goto corral_source_split_9077;

  $bb204:
    assume {:verifier.code 0} true;
    goto $bb329;

  $bb203:
    assume {:verifier.code 0} true;
    assume !(out_$i280 == 1);
    goto $bb204;

  $bb222:
    assume {:verifier.code 0} true;
    assume !(out_$i289 == 1);
    goto $bb204;

  $bb333:
    assume !(out_$i477 == 1);
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb354:
    assume {:verifier.code 0} true;
    goto $bb390;

  $bb389:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb387:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb381:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb375:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb357:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb353:
    assume {:verifier.code 0} true;
    goto $bb354;

  $bb349:
    assume !(out_$i486 == 1);
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb352:
    assume {:verifier.code 0} true;
    goto $bb353;

  $bb351:
    assume !(out_$i490 == 1);
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_9113:
    assume {:verifier.code 0} true;
    goto $bb352;

  corral_source_split_9112:
    assume {:verifier.code 0} true;
    $M.101 := 1;
    call {:si_unique_call 1724} {:cexpr "probed_2"} boogie_si_record_i32(1);
    goto corral_source_split_9113;

  corral_source_split_9111:
    assume {:verifier.code 0} true;
    $M.93 := out_$i492;
    call {:si_unique_call 1723} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i492);
    goto corral_source_split_9112;

  corral_source_split_9110:
    assume {:verifier.code 0} true;
    out_$i492 := $add.i32(out_$i491, 1);
    goto corral_source_split_9111;

  corral_source_split_9109:
    assume {:verifier.code 0} true;
    out_$i491 := $M.93;
    goto corral_source_split_9110;

  corral_source_split_9108:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1722} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9109;

  $bb350:
    assume out_$i490 == 1;
    goto corral_source_split_9108;

  corral_source_split_9106:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb350, $bb351;

  corral_source_split_9105:
    assume {:verifier.code 0} true;
    out_$i490 := $eq.i32(out_$i489, 0);
    goto corral_source_split_9106;

  corral_source_split_9104:
    assume {:verifier.code 0} true;
    out_$i489 := $M.100;
    goto corral_source_split_9105;

  corral_source_split_9103:
    assume {:verifier.code 0} true;
    $M.100 := out_$i488;
    call {:si_unique_call 1721} {:cexpr "ldv_retval_6"} boogie_si_record_i32(out_$i488);
    goto corral_source_split_9104;

  SeqInstr_675:
    goto corral_source_split_9103;

  SeqInstr_674:
    assume assertsPassed;
    goto SeqInstr_675;

  corral_source_split_9102:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1720} out_$i488 := oxu_drv_probe(out_$p487);
    goto SeqInstr_674;

  corral_source_split_9101:
    assume {:verifier.code 0} true;
    out_$p487 := $M.90;
    goto corral_source_split_9102;

  $bb348:
    assume out_$i486 == 1;
    goto corral_source_split_9101;

  corral_source_split_9099:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb348, $bb349;

  corral_source_split_9098:
    assume {:verifier.code 0} true;
    out_$i486 := $eq.i32(out_$i485, 1);
    goto corral_source_split_9099;

  corral_source_split_9097:
    assume {:verifier.code 0} true;
    out_$i485 := $M.96;
    goto corral_source_split_9098;

  $bb346:
    assume out_$i484 == 1;
    goto corral_source_split_9097;

  $bb344:
    assume out_$i483 == 1;
    assume {:verifier.code 0} true;
    out_$i484 := $eq.i32(out_$i478, 0);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb346, $bb347;

  $bb335:
    assume out_$i479 == 1;
    assume {:verifier.code 0} true;
    out_$i483 := $slt.i32(out_$i478, 1);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb344, $bb345;

  $bb334:
    assume {:verifier.code 0} true;
    out_$i479 := $slt.i32(out_$i478, 2);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb335, $bb336;

  corral_source_split_9079:
    assume {:verifier.code 1} true;
    call {:si_unique_call 1717} out_$i478 := __VERIFIER_nondet_int();
    call {:si_unique_call 1718} {:cexpr "smack:ext:__VERIFIER_nondet_int"} boogie_si_record_i32(out_$i478);
    call {:si_unique_call 1719} {:cexpr "tmp___9"} boogie_si_record_i32(out_$i478);
    assume {:verifier.code 0} true;
    goto $bb334;

  $bb332:
    assume out_$i477 == 1;
    goto corral_source_split_9079;

  corral_source_split_8323:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb332, $bb333;

  corral_source_split_8322:
    assume {:verifier.code 0} true;
    out_$i477 := $ne.i32(out_$i476, 0);
    goto corral_source_split_8323;

  corral_source_split_8321:
    assume {:verifier.code 0} true;
    out_$i476 := $M.96;
    goto corral_source_split_8322;

  $bb9:
    assume out_$i48 == 1;
    goto corral_source_split_8321;

  $bb8:
    assume !(out_$i47 == 1);
    assume {:verifier.code 0} true;
    out_$i48 := $eq.i32(out_$i44, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb9, $bb10;

  $bb356:
    assume !(out_$i494 == 1);
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_9118:
    assume {:verifier.code 0} true;
    goto $bb357;

  corral_source_split_9117:
    assume {:verifier.code 0} true;
    $M.96 := 3;
    call {:si_unique_call 1726} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(3);
    goto corral_source_split_9118;

  corral_source_split_9116:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1725} oxu_drv_shutdown(out_$p495);
    goto corral_source_split_9117;

  corral_source_split_9115:
    assume {:verifier.code 0} true;
    out_$p495 := $M.90;
    goto corral_source_split_9116;

  $bb355:
    assume out_$i494 == 1;
    goto corral_source_split_9115;

  corral_source_split_9095:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb355, $bb356;

  corral_source_split_9094:
    assume {:verifier.code 0} true;
    out_$i494 := $eq.i32(out_$i493, 2);
    goto corral_source_split_9095;

  corral_source_split_9093:
    assume {:verifier.code 0} true;
    out_$i493 := $M.96;
    goto corral_source_split_9094;

  $bb345:
    assume !(out_$i483 == 1);
    goto corral_source_split_9093;

  $bb369:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb374:
    assume {:verifier.code 0} true;
    goto $bb375;

  $bb373:
    assume !(out_$i513 == 1);
    assume {:verifier.code 0} true;
    goto $bb374;

  corral_source_split_9157:
    assume {:verifier.code 0} true;
    goto $bb374;

  corral_source_split_9156:
    assume {:verifier.code 0} true;
    $M.101 := 0;
    call {:si_unique_call 1736} {:cexpr "probed_2"} boogie_si_record_i32(0);
    goto corral_source_split_9157;

  corral_source_split_9155:
    assume {:verifier.code 0} true;
    $M.93 := out_$i515;
    call {:si_unique_call 1735} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i515);
    goto corral_source_split_9156;

  corral_source_split_9154:
    assume {:verifier.code 0} true;
    out_$i515 := $sub.i32(out_$i514, 1);
    goto corral_source_split_9155;

  corral_source_split_9153:
    assume {:verifier.code 0} true;
    out_$i514 := $M.93;
    goto corral_source_split_9154;

  corral_source_split_9152:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1734} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9153;

  $bb372:
    assume out_$i513 == 1;
    goto corral_source_split_9152;

  corral_source_split_9150:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb372, $bb373;

  corral_source_split_9149:
    assume {:verifier.code 0} true;
    out_$i513 := $eq.i32(out_$i512, 0);
    goto corral_source_split_9150;

  corral_source_split_9148:
    assume {:verifier.code 0} true;
    out_$i512 := $M.102;
    goto corral_source_split_9149;

  corral_source_split_9147:
    assume {:verifier.code 0} true;
    $M.102 := out_$i511;
    call {:si_unique_call 1733} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i511);
    goto corral_source_split_9148;

  corral_source_split_9146:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1732} out_$i511 := oxu_drv_remove(out_$p510);
    goto corral_source_split_9147;

  corral_source_split_9145:
    assume {:verifier.code 0} true;
    out_$p510 := $M.90;
    goto corral_source_split_9146;

  $bb370:
    assume out_$i509 == 1;
    goto corral_source_split_9145;

  corral_source_split_9143:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb370, $bb371;

  corral_source_split_9142:
    assume {:verifier.code 0} true;
    out_$i509 := $eq.i32(out_$i508, 1);
    goto corral_source_split_9143;

  corral_source_split_9141:
    assume {:verifier.code 0} true;
    out_$i508 := $M.101;
    goto corral_source_split_9142;

  $bb367:
    assume out_$i507 == 1;
    goto corral_source_split_9141;

  corral_source_split_9139:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb367, $bb368;

  corral_source_split_9138:
    assume {:verifier.code 0} true;
    out_$i507 := $eq.i32(out_$i506, 2);
    goto corral_source_split_9139;

  $bb366:
    assume {:verifier.code 0} true;
    out_$i506 := $M.96;
    goto corral_source_split_9138;

  $bb360:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb365:
    assume {:verifier.code 0} true;
    goto $bb366;

  $bb364:
    assume !(out_$i503 == 1);
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_9136:
    assume {:verifier.code 0} true;
    goto $bb365;

  corral_source_split_9135:
    assume {:verifier.code 0} true;
    $M.101 := 0;
    call {:si_unique_call 1731} {:cexpr "probed_2"} boogie_si_record_i32(0);
    goto corral_source_split_9136;

  corral_source_split_9134:
    assume {:verifier.code 0} true;
    $M.93 := out_$i505;
    call {:si_unique_call 1730} {:cexpr "ref_cnt"} boogie_si_record_i32(out_$i505);
    goto corral_source_split_9135;

  corral_source_split_9133:
    assume {:verifier.code 0} true;
    out_$i505 := $sub.i32(out_$i504, 1);
    goto corral_source_split_9134;

  corral_source_split_9132:
    assume {:verifier.code 0} true;
    out_$i504 := $M.93;
    goto corral_source_split_9133;

  corral_source_split_9131:
    assume {:verifier.code 0} true;
    $M.96 := 1;
    call {:si_unique_call 1729} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(1);
    goto corral_source_split_9132;

  $bb363:
    assume out_$i503 == 1;
    goto corral_source_split_9131;

  corral_source_split_9129:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb363, $bb364;

  corral_source_split_9128:
    assume {:verifier.code 0} true;
    out_$i503 := $eq.i32(out_$i502, 0);
    goto corral_source_split_9129;

  corral_source_split_9127:
    assume {:verifier.code 0} true;
    out_$i502 := $M.102;
    goto corral_source_split_9128;

  corral_source_split_9126:
    assume {:verifier.code 0} true;
    $M.102 := out_$i501;
    call {:si_unique_call 1728} {:cexpr "ldv_retval_5"} boogie_si_record_i32(out_$i501);
    goto corral_source_split_9127;

  corral_source_split_9125:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1727} out_$i501 := oxu_drv_remove(out_$p500);
    goto corral_source_split_9126;

  corral_source_split_9124:
    assume {:verifier.code 0} true;
    out_$p500 := $M.90;
    goto corral_source_split_9125;

  $bb361:
    assume out_$i499 == 1;
    goto corral_source_split_9124;

  corral_source_split_9122:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb361, $bb362;

  corral_source_split_9121:
    assume {:verifier.code 0} true;
    out_$i499 := $eq.i32(out_$i498, 1);
    goto corral_source_split_9122;

  corral_source_split_9120:
    assume {:verifier.code 0} true;
    out_$i498 := $M.101;
    goto corral_source_split_9121;

  $bb358:
    assume out_$i497 == 1;
    goto corral_source_split_9120;

  corral_source_split_9083:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb358, $bb359;

  corral_source_split_9082:
    assume {:verifier.code 0} true;
    out_$i497 := $eq.i32(out_$i496, 1);
    goto corral_source_split_9083;

  corral_source_split_9081:
    assume {:verifier.code 0} true;
    out_$i496 := $M.96;
    goto corral_source_split_9082;

  $bb337:
    assume out_$i480 == 1;
    goto corral_source_split_9081;

  $bb336:
    assume !(out_$i479 == 1);
    assume {:verifier.code 0} true;
    out_$i480 := $slt.i32(out_$i478, 3);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb337, $bb338;

  $bb359:
    assume {:verifier.code 0} true;
    assume !(out_$i497 == 1);
    goto $bb360;

  $bb362:
    assume {:verifier.code 0} true;
    assume !(out_$i499 == 1);
    goto $bb360;

  $bb368:
    assume {:verifier.code 0} true;
    assume !(out_$i507 == 1);
    goto $bb369;

  $bb371:
    assume {:verifier.code 0} true;
    assume !(out_$i509 == 1);
    goto $bb369;

  $bb377:
    assume !(out_$i517 == 1);
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb380:
    assume {:verifier.code 0} true;
    goto $bb381;

  $bb379:
    assume !(out_$i520 == 1);
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_9166:
    assume {:verifier.code 0} true;
    goto $bb380;

  corral_source_split_9165:
    assume {:verifier.code 0} true;
    $M.96 := 2;
    call {:si_unique_call 1739} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(2);
    goto corral_source_split_9166;

  $bb378:
    assume out_$i520 == 1;
    goto corral_source_split_9165;

  corral_source_split_9163:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb378, $bb379;

  corral_source_split_9162:
    assume {:verifier.code 0} true;
    out_$i520 := $eq.i32(out_$i519, 0);
    goto corral_source_split_9163;

  corral_source_split_9161:
    assume {:verifier.code 0} true;
    out_$i519 := $M.103;
    goto corral_source_split_9162;

  corral_source_split_9160:
    assume {:verifier.code 0} true;
    $M.103 := out_$i518;
    call {:si_unique_call 1738} {:cexpr "ldv_retval_4"} boogie_si_record_i32(out_$i518);
    goto corral_source_split_9161;

  corral_source_split_9159:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1737} out_$i518 := ldv_resume_2();
    goto corral_source_split_9160;

  $bb376:
    assume out_$i517 == 1;
    goto corral_source_split_9159;

  corral_source_split_9087:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb376, $bb377;

  corral_source_split_9086:
    assume {:verifier.code 0} true;
    out_$i517 := $eq.i32(out_$i516, 4);
    goto corral_source_split_9087;

  corral_source_split_9085:
    assume {:verifier.code 0} true;
    out_$i516 := $M.96;
    goto corral_source_split_9086;

  $bb339:
    assume out_$i481 == 1;
    goto corral_source_split_9085;

  $bb338:
    assume !(out_$i480 == 1);
    assume {:verifier.code 0} true;
    out_$i481 := $slt.i32(out_$i478, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb339, $bb340;

  $bb383:
    assume !(out_$i522 == 1);
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb386:
    assume {:verifier.code 0} true;
    goto $bb387;

  $bb385:
    assume !(out_$i525 == 1);
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_9175:
    assume {:verifier.code 0} true;
    goto $bb386;

  corral_source_split_9174:
    assume {:verifier.code 0} true;
    $M.96 := 4;
    call {:si_unique_call 1742} {:cexpr "ldv_state_variable_2"} boogie_si_record_i32(4);
    goto corral_source_split_9175;

  $bb384:
    assume out_$i525 == 1;
    goto corral_source_split_9174;

  corral_source_split_9172:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb384, $bb385;

  corral_source_split_9171:
    assume {:verifier.code 0} true;
    out_$i525 := $eq.i32(out_$i524, 0);
    goto corral_source_split_9172;

  corral_source_split_9170:
    assume {:verifier.code 0} true;
    out_$i524 := $M.104;
    goto corral_source_split_9171;

  corral_source_split_9169:
    assume {:verifier.code 0} true;
    $M.104 := out_$i523;
    call {:si_unique_call 1741} {:cexpr "ldv_retval_3"} boogie_si_record_i32(out_$i523);
    goto corral_source_split_9170;

  corral_source_split_9168:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1740} out_$i523 := ldv_suspend_2();
    goto corral_source_split_9169;

  $bb382:
    assume out_$i522 == 1;
    goto corral_source_split_9168;

  corral_source_split_9091:
    assume {:verifier.code 0} true;
    assume true;
    goto $bb382, $bb383;

  corral_source_split_9090:
    assume {:verifier.code 0} true;
    out_$i522 := $eq.i32(out_$i521, 3);
    goto corral_source_split_9091;

  corral_source_split_9089:
    assume {:verifier.code 0} true;
    out_$i521 := $M.96;
    goto corral_source_split_9090;

  $bb341:
    assume out_$i482 == 1;
    goto corral_source_split_9089;

  $bb340:
    assume !(out_$i481 == 1);
    assume {:verifier.code 0} true;
    out_$i482 := $eq.i32(out_$i478, 4);
    assume {:verifier.code 0} true;
    assume true;
    goto $bb341, $bb342;

  corral_source_split_9177:
    assume {:verifier.code 0} true;
    goto $bb389;

  $bb388:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1743} ldv_stop();
    goto corral_source_split_9177;

  $bb343:
    assume {:verifier.code 0} true;
    goto $bb388;

  $bb342:
    assume {:verifier.code 0} true;
    assume !(out_$i482 == 1);
    goto $bb343;

  $bb347:
    assume {:verifier.code 0} true;
    assume !(out_$i484 == 1);
    goto $bb343;

  corral_source_split_9179:
    assume {:verifier.code 0} true;
    goto $bb392;

  $bb391:
    assume {:verifier.code 0} true;
    call {:si_unique_call 1744} ldv_stop();
    goto corral_source_split_9179;

  $bb11:
    assume {:verifier.code 0} true;
    goto $bb391;

  $bb10:
    assume {:verifier.code 0} true;
    assume !(out_$i48 == 1);
    goto $bb11;

  $bb15:
    assume {:verifier.code 0} true;
    assume !(out_$i50 == 1);
    goto $bb11;

  $bb157_dummy:
    call {:si_unique_call 1} out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$p105, out_$i107, out_$i108, out_$p109, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$p117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i188, out_$i189, out_$p190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$p292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$p300, out_$p301, out_$i302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i308, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i316, out_$i317, out_$p318, out_$i319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i380, out_$i381, out_$p382, out_$i384, out_$i385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i393, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400, out_$p401, out_$i402, out_$i404, out_$i405, out_$p406, out_$p407, out_$i408, out_$i410, out_$i411, out_$p412, out_$p413, out_$i414, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$p474, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$p495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$p510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176 := main_loop_$bb1(in_$p0, in_$p1, in_$p2, in_$p3, in_$p4, in_$p5, in_$p6, in_$p7, in_$p8, in_$p9, in_$p10, in_$p11, in_$p13, in_$p14, in_$p15, in_$p17, in_$p18, in_$p19, out_$i44, out_$i45, out_$i46, out_$i47, out_$i48, out_$i49, out_$i50, out_$i51, out_$i52, out_$i53, out_$i54, out_$i55, out_$i56, out_$i57, out_$i58, out_$i59, out_$i60, out_$i61, out_$i62, out_$i63, out_$i64, out_$i65, out_$i66, out_$i67, out_$i68, out_$i69, out_$p70, out_$i71, out_$i72, out_$i73, out_$i74, out_$i75, out_$i76, out_$i77, out_$p78, out_$p79, out_$i80, out_$i82, out_$i83, out_$p84, out_$p85, out_$i86, out_$i88, out_$i89, out_$p90, out_$p91, out_$i92, out_$i94, out_$i95, out_$p96, out_$i97, out_$i98, out_$p99, out_$i100, out_$i101, out_$p102, out_$i103, out_$i104, out_$p105, out_$i107, out_$i108, out_$p109, out_$i111, out_$i112, out_$p113, out_$i115, out_$i116, out_$p117, out_$i119, out_$i120, out_$p121, out_$i123, out_$i124, out_$p125, out_$i127, out_$i128, out_$p129, out_$i130, out_$i131, out_$p132, out_$i134, out_$i135, out_$p136, out_$i138, out_$i139, out_$p140, out_$i142, out_$i143, out_$p144, out_$i146, out_$i147, out_$p148, out_$i150, out_$i151, out_$p152, out_$i154, out_$i155, out_$p156, out_$i158, out_$i159, out_$p160, out_$i162, out_$i163, out_$p164, out_$i166, out_$i167, out_$p168, out_$i169, out_$i170, out_$i171, out_$i172, out_$p173, out_$i174, out_$i175, out_$i176, out_$i177, out_$p178, out_$p179, out_$i180, out_$i182, out_$i183, out_$p184, out_$p185, out_$i186, out_$i188, out_$i189, out_$p190, out_$p191, out_$i192, out_$i194, out_$i195, out_$p196, out_$i197, out_$i198, out_$i199, out_$i200, out_$i201, out_$i202, out_$i203, out_$i204, out_$i205, out_$i206, out_$i207, out_$i208, out_$i210, out_$i211, out_$p212, out_$i213, out_$i214, out_$i215, out_$i216, out_$i217, out_$i218, out_$i219, out_$i220, out_$i221, out_$i222, out_$i223, out_$i224, out_$i226, out_$i227, out_$p228, out_$i229, out_$i230, out_$i231, out_$i232, out_$i233, out_$i234, out_$i235, out_$i236, out_$i237, out_$i238, out_$i239, out_$i240, out_$i242, out_$i243, out_$p244, out_$i246, out_$i247, out_$p248, out_$i250, out_$i251, out_$p252, out_$i254, out_$i255, out_$i256, out_$i257, out_$i258, out_$i259, out_$i260, out_$i261, out_$i262, out_$i263, out_$i264, out_$i265, out_$i266, out_$i267, out_$i268, out_$i269, out_$i270, out_$i271, out_$i272, out_$i273, out_$i274, out_$i275, out_$i276, out_$i277, out_$i278, out_$i279, out_$i280, out_$i281, out_$i282, out_$i283, out_$i284, out_$i285, out_$i286, out_$i287, out_$i288, out_$i289, out_$i290, out_$i291, out_$p292, out_$i293, out_$i294, out_$i295, out_$i296, out_$i297, out_$i298, out_$i299, out_$p300, out_$p301, out_$i302, out_$i304, out_$i305, out_$p306, out_$p307, out_$i308, out_$i310, out_$i311, out_$p312, out_$p313, out_$i314, out_$i316, out_$i317, out_$p318, out_$i319, out_$i320, out_$p321, out_$i322, out_$i323, out_$p324, out_$i325, out_$i326, out_$p327, out_$i329, out_$i330, out_$p331, out_$i333, out_$i334, out_$p335, out_$i337, out_$i338, out_$p339, out_$i341, out_$i342, out_$p343, out_$i345, out_$i346, out_$p347, out_$i349, out_$i350, out_$p351, out_$i352, out_$i353, out_$p354, out_$i356, out_$i357, out_$p358, out_$i360, out_$i361, out_$p362, out_$i364, out_$i365, out_$p366, out_$i368, out_$i369, out_$p370, out_$i372, out_$i373, out_$p374, out_$i376, out_$i377, out_$p378, out_$i380, out_$i381, out_$p382, out_$i384, out_$i385, out_$p386, out_$i388, out_$i389, out_$p390, out_$i391, out_$i392, out_$i393, out_$i394, out_$p395, out_$i396, out_$i397, out_$i398, out_$i399, out_$p400, out_$p401, out_$i402, out_$i404, out_$i405, out_$p406, out_$p407, out_$i408, out_$i410, out_$i411, out_$p412, out_$p413, out_$i414, out_$i416, out_$i417, out_$p418, out_$i419, out_$i420, out_$i421, out_$i422, out_$i423, out_$i424, out_$i425, out_$i426, out_$i427, out_$i428, out_$i429, out_$i430, out_$i432, out_$i433, out_$p434, out_$i435, out_$i436, out_$i437, out_$i438, out_$i439, out_$i440, out_$i441, out_$i442, out_$i443, out_$i444, out_$i445, out_$i446, out_$i448, out_$i449, out_$p450, out_$i451, out_$i452, out_$i453, out_$i454, out_$i455, out_$i456, out_$i457, out_$i458, out_$i459, out_$i460, out_$i461, out_$i462, out_$i464, out_$i465, out_$p466, out_$i468, out_$i469, out_$p470, out_$i472, out_$i473, out_$p474, out_$i476, out_$i477, out_$i478, out_$i479, out_$i480, out_$i481, out_$i482, out_$i483, out_$i484, out_$i485, out_$i486, out_$p487, out_$i488, out_$i489, out_$i490, out_$i491, out_$i492, out_$i493, out_$i494, out_$p495, out_$i496, out_$i497, out_$i498, out_$i499, out_$p500, out_$i501, out_$i502, out_$i503, out_$i504, out_$i505, out_$i506, out_$i507, out_$i508, out_$i509, out_$p510, out_$i511, out_$i512, out_$i513, out_$i514, out_$i515, out_$i516, out_$i517, out_$i518, out_$i519, out_$i520, out_$i521, out_$i522, out_$i523, out_$i524, out_$i525, out_vslice_dummy_var_123, out_vslice_dummy_var_124, out_vslice_dummy_var_125, out_vslice_dummy_var_126, out_vslice_dummy_var_127, out_vslice_dummy_var_128, out_vslice_dummy_var_129, out_vslice_dummy_var_130, out_vslice_dummy_var_131, out_vslice_dummy_var_132, out_vslice_dummy_var_133, out_vslice_dummy_var_134, out_vslice_dummy_var_135, out_vslice_dummy_var_136, out_vslice_dummy_var_137, out_vslice_dummy_var_138, out_vslice_dummy_var_139, out_vslice_dummy_var_140, out_vslice_dummy_var_141, out_vslice_dummy_var_142, out_vslice_dummy_var_143, out_vslice_dummy_var_144, out_vslice_dummy_var_145, out_vslice_dummy_var_146, out_vslice_dummy_var_147, out_vslice_dummy_var_148, out_vslice_dummy_var_149, out_vslice_dummy_var_150, out_vslice_dummy_var_151, out_vslice_dummy_var_152, out_vslice_dummy_var_153, out_vslice_dummy_var_154, out_vslice_dummy_var_155, out_vslice_dummy_var_156, out_vslice_dummy_var_157, out_vslice_dummy_var_158, out_vslice_dummy_var_159, out_vslice_dummy_var_160, out_vslice_dummy_var_161, out_vslice_dummy_var_162, out_vslice_dummy_var_163, out_vslice_dummy_var_164, out_vslice_dummy_var_165, out_vslice_dummy_var_166, out_vslice_dummy_var_167, out_vslice_dummy_var_168, out_vslice_dummy_var_169, out_vslice_dummy_var_170, out_vslice_dummy_var_171, out_vslice_dummy_var_172, out_vslice_dummy_var_173, out_vslice_dummy_var_174, out_vslice_dummy_var_175, out_vslice_dummy_var_176);
    return;

  exit:
    return;
}



procedure main_loop_$bb1(in_$p0: ref, in_$p1: ref, in_$p2: ref, in_$p3: ref, in_$p4: ref, in_$p5: ref, in_$p6: ref, in_$p7: ref, in_$p8: ref, in_$p9: ref, in_$p10: ref, in_$p11: ref, in_$p13: ref, in_$p14: ref, in_$p15: ref, in_$p17: ref, in_$p18: ref, in_$p19: ref, in_$i44: i32, in_$i45: i1, in_$i46: i1, in_$i47: i1, in_$i48: i1, in_$i49: i1, in_$i50: i1, in_$i51: i32, in_$i52: i1, in_$i53: i32, in_$i54: i1, in_$i55: i1, in_$i56: i1, in_$i57: i1, in_$i58: i1, in_$i59: i1, in_$i60: i1, in_$i61: i1, in_$i62: i1, in_$i63: i1, in_$i64: i1, in_$i65: i1, in_$i66: i1, in_$i67: i1, in_$i68: i32, in_$i69: i1, in_$p70: ref, in_$i71: i32, in_$i72: i32, in_$i73: i1, in_$i74: i32, in_$i75: i32, in_$i76: i32, in_$i77: i1, in_$p78: ref, in_$p79: ref, in_$i80: i32, in_$i82: i32, in_$i83: i1, in_$p84: ref, in_$p85: ref, in_$i86: i32, in_$i88: i32, in_$i89: i1, in_$p90: ref, in_$p91: ref, in_$i92: i32, in_$i94: i32, in_$i95: i1, in_$p96: ref, in_$i97: i32, in_$i98: i1, in_$p99: ref, in_$i100: i32, in_$i101: i1, in_$p102: ref, in_$i103: i32, in_$i104: i1, in_$p105: ref, in_$i107: i32, in_$i108: i1, in_$p109: ref, in_$i111: i32, in_$i112: i1, in_$p113: ref, in_$i115: i32, in_$i116: i1, in_$p117: ref, in_$i119: i32, in_$i120: i1, in_$p121: ref, in_$i123: i32, in_$i124: i1, in_$p125: ref, in_$i127: i32, in_$i128: i1, in_$p129: ref, in_$i130: i32, in_$i131: i1, in_$p132: ref, in_$i134: i32, in_$i135: i1, in_$p136: ref, in_$i138: i32, in_$i139: i1, in_$p140: ref, in_$i142: i32, in_$i143: i1, in_$p144: ref, in_$i146: i32, in_$i147: i1, in_$p148: ref, in_$i150: i32, in_$i151: i1, in_$p152: ref, in_$i154: i32, in_$i155: i1, in_$p156: ref, in_$i158: i32, in_$i159: i1, in_$p160: ref, in_$i162: i32, in_$i163: i1, in_$p164: ref, in_$i166: i32, in_$i167: i1, in_$p168: ref, in_$i169: i32, in_$i170: i32, in_$i171: i32, in_$i172: i1, in_$p173: ref, in_$i174: i32, in_$i175: i32, in_$i176: i32, in_$i177: i1, in_$p178: ref, in_$p179: ref, in_$i180: i32, in_$i182: i32, in_$i183: i1, in_$p184: ref, in_$p185: ref, in_$i186: i32, in_$i188: i32, in_$i189: i1, in_$p190: ref, in_$p191: ref, in_$i192: i32, in_$i194: i32, in_$i195: i1, in_$p196: ref, in_$i197: i16, in_$i198: i32, in_$i199: i16, in_$i200: i16, in_$i201: i32, in_$i202: i16, in_$i203: i16, in_$i204: i32, in_$i205: i16, in_$i206: i16, in_$i207: i32, in_$i208: i16, in_$i210: i32, in_$i211: i1, in_$p212: ref, in_$i213: i16, in_$i214: i32, in_$i215: i16, in_$i216: i16, in_$i217: i32, in_$i218: i16, in_$i219: i16, in_$i220: i32, in_$i221: i16, in_$i222: i16, in_$i223: i32, in_$i224: i16, in_$i226: i32, in_$i227: i1, in_$p228: ref, in_$i229: i16, in_$i230: i32, in_$i231: i16, in_$i232: i16, in_$i233: i32, in_$i234: i16, in_$i235: i16, in_$i236: i32, in_$i237: i16, in_$i238: i16, in_$i239: i32, in_$i240: i16, in_$i242: i32, in_$i243: i1, in_$p244: ref, in_$i246: i32, in_$i247: i1, in_$p248: ref, in_$i250: i32, in_$i251: i1, in_$p252: ref, in_$i254: i32, in_$i255: i1, in_$i256: i32, in_$i257: i1, in_$i258: i32, in_$i259: i1, in_$i260: i1, in_$i261: i1, in_$i262: i32, in_$i263: i1, in_$i264: i32, in_$i265: i1, in_$i266: i32, in_$i267: i1, in_$i268: i32, in_$i269: i32, in_$i270: i1, in_$i271: i32, in_$i272: i1, in_$i273: i32, in_$i274: i1, in_$i275: i32, in_$i276: i1, in_$i277: i1, in_$i278: i1, in_$i279: i1, in_$i280: i1, in_$i281: i1, in_$i282: i1, in_$i283: i1, in_$i284: i1, in_$i285: i1, in_$i286: i1, in_$i287: i1, in_$i288: i1, in_$i289: i1, in_$i290: i32, in_$i291: i1, in_$p292: ref, in_$i293: i32, in_$i294: i32, in_$i295: i1, in_$i296: i32, in_$i297: i32, in_$i298: i32, in_$i299: i1, in_$p300: ref, in_$p301: ref, in_$i302: i32, in_$i304: i32, in_$i305: i1, in_$p306: ref, in_$p307: ref, in_$i308: i32, in_$i310: i32, in_$i311: i1, in_$p312: ref, in_$p313: ref, in_$i314: i32, in_$i316: i32, in_$i317: i1, in_$p318: ref, in_$i319: i32, in_$i320: i1, in_$p321: ref, in_$i322: i32, in_$i323: i1, in_$p324: ref, in_$i325: i32, in_$i326: i1, in_$p327: ref, in_$i329: i32, in_$i330: i1, in_$p331: ref, in_$i333: i32, in_$i334: i1, in_$p335: ref, in_$i337: i32, in_$i338: i1, in_$p339: ref, in_$i341: i32, in_$i342: i1, in_$p343: ref, in_$i345: i32, in_$i346: i1, in_$p347: ref, in_$i349: i32, in_$i350: i1, in_$p351: ref, in_$i352: i32, in_$i353: i1, in_$p354: ref, in_$i356: i32, in_$i357: i1, in_$p358: ref, in_$i360: i32, in_$i361: i1, in_$p362: ref, in_$i364: i32, in_$i365: i1, in_$p366: ref, in_$i368: i32, in_$i369: i1, in_$p370: ref, in_$i372: i32, in_$i373: i1, in_$p374: ref, in_$i376: i32, in_$i377: i1, in_$p378: ref, in_$i380: i32, in_$i381: i1, in_$p382: ref, in_$i384: i32, in_$i385: i1, in_$p386: ref, in_$i388: i32, in_$i389: i1, in_$p390: ref, in_$i391: i32, in_$i392: i32, in_$i393: i32, in_$i394: i1, in_$p395: ref, in_$i396: i32, in_$i397: i32, in_$i398: i32, in_$i399: i1, in_$p400: ref, in_$p401: ref, in_$i402: i32, in_$i404: i32, in_$i405: i1, in_$p406: ref, in_$p407: ref, in_$i408: i32, in_$i410: i32, in_$i411: i1, in_$p412: ref, in_$p413: ref, in_$i414: i32, in_$i416: i32, in_$i417: i1, in_$p418: ref, in_$i419: i16, in_$i420: i32, in_$i421: i16, in_$i422: i16, in_$i423: i32, in_$i424: i16, in_$i425: i16, in_$i426: i32, in_$i427: i16, in_$i428: i16, in_$i429: i32, in_$i430: i16, in_$i432: i32, in_$i433: i1, in_$p434: ref, in_$i435: i16, in_$i436: i32, in_$i437: i16, in_$i438: i16, in_$i439: i32, in_$i440: i16, in_$i441: i16, in_$i442: i32, in_$i443: i16, in_$i444: i16, in_$i445: i32, in_$i446: i16, in_$i448: i32, in_$i449: i1, in_$p450: ref, in_$i451: i16, in_$i452: i32, in_$i453: i16, in_$i454: i16, in_$i455: i32, in_$i456: i16, in_$i457: i16, in_$i458: i32, in_$i459: i16, in_$i460: i16, in_$i461: i32, in_$i462: i16, in_$i464: i32, in_$i465: i1, in_$p466: ref, in_$i468: i32, in_$i469: i1, in_$p470: ref, in_$i472: i32, in_$i473: i1, in_$p474: ref, in_$i476: i32, in_$i477: i1, in_$i478: i32, in_$i479: i1, in_$i480: i1, in_$i481: i1, in_$i482: i1, in_$i483: i1, in_$i484: i1, in_$i485: i32, in_$i486: i1, in_$p487: ref, in_$i488: i32, in_$i489: i32, in_$i490: i1, in_$i491: i32, in_$i492: i32, in_$i493: i32, in_$i494: i1, in_$p495: ref, in_$i496: i32, in_$i497: i1, in_$i498: i32, in_$i499: i1, in_$p500: ref, in_$i501: i32, in_$i502: i32, in_$i503: i1, in_$i504: i32, in_$i505: i32, in_$i506: i32, in_$i507: i1, in_$i508: i32, in_$i509: i1, in_$p510: ref, in_$i511: i32, in_$i512: i32, in_$i513: i1, in_$i514: i32, in_$i515: i32, in_$i516: i32, in_$i517: i1, in_$i518: i32, in_$i519: i32, in_$i520: i1, in_$i521: i32, in_$i522: i1, in_$i523: i32, in_$i524: i32, in_$i525: i1, in_vslice_dummy_var_123: i32, in_vslice_dummy_var_124: i32, in_vslice_dummy_var_125: i32, in_vslice_dummy_var_126: i32, in_vslice_dummy_var_127: i32, in_vslice_dummy_var_128: i32, in_vslice_dummy_var_129: i32, in_vslice_dummy_var_130: i32, in_vslice_dummy_var_131: i32, in_vslice_dummy_var_132: i32, in_vslice_dummy_var_133: i32, in_vslice_dummy_var_134: i32, in_vslice_dummy_var_135: i32, in_vslice_dummy_var_136: i32, in_vslice_dummy_var_137: i32, in_vslice_dummy_var_138: i32, in_vslice_dummy_var_139: i32, in_vslice_dummy_var_140: i32, in_vslice_dummy_var_141: i32, in_vslice_dummy_var_142: i32, in_vslice_dummy_var_143: i32, in_vslice_dummy_var_144: i32, in_vslice_dummy_var_145: i32, in_vslice_dummy_var_146: i32, in_vslice_dummy_var_147: i32, in_vslice_dummy_var_148: i32, in_vslice_dummy_var_149: i32, in_vslice_dummy_var_150: i32, in_vslice_dummy_var_151: i32, in_vslice_dummy_var_152: i32, in_vslice_dummy_var_153: i32, in_vslice_dummy_var_154: i32, in_vslice_dummy_var_155: i32, in_vslice_dummy_var_156: i32, in_vslice_dummy_var_157: i32, in_vslice_dummy_var_158: i32, in_vslice_dummy_var_159: i32, in_vslice_dummy_var_160: i32, in_vslice_dummy_var_161: i32, in_vslice_dummy_var_162: i32, in_vslice_dummy_var_163: i32, in_vslice_dummy_var_164: i32, in_vslice_dummy_var_165: i32, in_vslice_dummy_var_166: i32, in_vslice_dummy_var_167: i32, in_vslice_dummy_var_168: i32, in_vslice_dummy_var_169: i32, in_vslice_dummy_var_170: i32, in_vslice_dummy_var_171: i32, in_vslice_dummy_var_172: i32, in_vslice_dummy_var_173: i32, in_vslice_dummy_var_174: i32, in_vslice_dummy_var_175: i32, in_vslice_dummy_var_176: i32) returns (out_$i44: i32, out_$i45: i1, out_$i46: i1, out_$i47: i1, out_$i48: i1, out_$i49: i1, out_$i50: i1, out_$i51: i32, out_$i52: i1, out_$i53: i32, out_$i54: i1, out_$i55: i1, out_$i56: i1, out_$i57: i1, out_$i58: i1, out_$i59: i1, out_$i60: i1, out_$i61: i1, out_$i62: i1, out_$i63: i1, out_$i64: i1, out_$i65: i1, out_$i66: i1, out_$i67: i1, out_$i68: i32, out_$i69: i1, out_$p70: ref, out_$i71: i32, out_$i72: i32, out_$i73: i1, out_$i74: i32, out_$i75: i32, out_$i76: i32, out_$i77: i1, out_$p78: ref, out_$p79: ref, out_$i80: i32, out_$i82: i32, out_$i83: i1, out_$p84: ref, out_$p85: ref, out_$i86: i32, out_$i88: i32, out_$i89: i1, out_$p90: ref, out_$p91: ref, out_$i92: i32, out_$i94: i32, out_$i95: i1, out_$p96: ref, out_$i97: i32, out_$i98: i1, out_$p99: ref, out_$i100: i32, out_$i101: i1, out_$p102: ref, out_$i103: i32, out_$i104: i1, out_$p105: ref, out_$i107: i32, out_$i108: i1, out_$p109: ref, out_$i111: i32, out_$i112: i1, out_$p113: ref, out_$i115: i32, out_$i116: i1, out_$p117: ref, out_$i119: i32, out_$i120: i1, out_$p121: ref, out_$i123: i32, out_$i124: i1, out_$p125: ref, out_$i127: i32, out_$i128: i1, out_$p129: ref, out_$i130: i32, out_$i131: i1, out_$p132: ref, out_$i134: i32, out_$i135: i1, out_$p136: ref, out_$i138: i32, out_$i139: i1, out_$p140: ref, out_$i142: i32, out_$i143: i1, out_$p144: ref, out_$i146: i32, out_$i147: i1, out_$p148: ref, out_$i150: i32, out_$i151: i1, out_$p152: ref, out_$i154: i32, out_$i155: i1, out_$p156: ref, out_$i158: i32, out_$i159: i1, out_$p160: ref, out_$i162: i32, out_$i163: i1, out_$p164: ref, out_$i166: i32, out_$i167: i1, out_$p168: ref, out_$i169: i32, out_$i170: i32, out_$i171: i32, out_$i172: i1, out_$p173: ref, out_$i174: i32, out_$i175: i32, out_$i176: i32, out_$i177: i1, out_$p178: ref, out_$p179: ref, out_$i180: i32, out_$i182: i32, out_$i183: i1, out_$p184: ref, out_$p185: ref, out_$i186: i32, out_$i188: i32, out_$i189: i1, out_$p190: ref, out_$p191: ref, out_$i192: i32, out_$i194: i32, out_$i195: i1, out_$p196: ref, out_$i197: i16, out_$i198: i32, out_$i199: i16, out_$i200: i16, out_$i201: i32, out_$i202: i16, out_$i203: i16, out_$i204: i32, out_$i205: i16, out_$i206: i16, out_$i207: i32, out_$i208: i16, out_$i210: i32, out_$i211: i1, out_$p212: ref, out_$i213: i16, out_$i214: i32, out_$i215: i16, out_$i216: i16, out_$i217: i32, out_$i218: i16, out_$i219: i16, out_$i220: i32, out_$i221: i16, out_$i222: i16, out_$i223: i32, out_$i224: i16, out_$i226: i32, out_$i227: i1, out_$p228: ref, out_$i229: i16, out_$i230: i32, out_$i231: i16, out_$i232: i16, out_$i233: i32, out_$i234: i16, out_$i235: i16, out_$i236: i32, out_$i237: i16, out_$i238: i16, out_$i239: i32, out_$i240: i16, out_$i242: i32, out_$i243: i1, out_$p244: ref, out_$i246: i32, out_$i247: i1, out_$p248: ref, out_$i250: i32, out_$i251: i1, out_$p252: ref, out_$i254: i32, out_$i255: i1, out_$i256: i32, out_$i257: i1, out_$i258: i32, out_$i259: i1, out_$i260: i1, out_$i261: i1, out_$i262: i32, out_$i263: i1, out_$i264: i32, out_$i265: i1, out_$i266: i32, out_$i267: i1, out_$i268: i32, out_$i269: i32, out_$i270: i1, out_$i271: i32, out_$i272: i1, out_$i273: i32, out_$i274: i1, out_$i275: i32, out_$i276: i1, out_$i277: i1, out_$i278: i1, out_$i279: i1, out_$i280: i1, out_$i281: i1, out_$i282: i1, out_$i283: i1, out_$i284: i1, out_$i285: i1, out_$i286: i1, out_$i287: i1, out_$i288: i1, out_$i289: i1, out_$i290: i32, out_$i291: i1, out_$p292: ref, out_$i293: i32, out_$i294: i32, out_$i295: i1, out_$i296: i32, out_$i297: i32, out_$i298: i32, out_$i299: i1, out_$p300: ref, out_$p301: ref, out_$i302: i32, out_$i304: i32, out_$i305: i1, out_$p306: ref, out_$p307: ref, out_$i308: i32, out_$i310: i32, out_$i311: i1, out_$p312: ref, out_$p313: ref, out_$i314: i32, out_$i316: i32, out_$i317: i1, out_$p318: ref, out_$i319: i32, out_$i320: i1, out_$p321: ref, out_$i322: i32, out_$i323: i1, out_$p324: ref, out_$i325: i32, out_$i326: i1, out_$p327: ref, out_$i329: i32, out_$i330: i1, out_$p331: ref, out_$i333: i32, out_$i334: i1, out_$p335: ref, out_$i337: i32, out_$i338: i1, out_$p339: ref, out_$i341: i32, out_$i342: i1, out_$p343: ref, out_$i345: i32, out_$i346: i1, out_$p347: ref, out_$i349: i32, out_$i350: i1, out_$p351: ref, out_$i352: i32, out_$i353: i1, out_$p354: ref, out_$i356: i32, out_$i357: i1, out_$p358: ref, out_$i360: i32, out_$i361: i1, out_$p362: ref, out_$i364: i32, out_$i365: i1, out_$p366: ref, out_$i368: i32, out_$i369: i1, out_$p370: ref, out_$i372: i32, out_$i373: i1, out_$p374: ref, out_$i376: i32, out_$i377: i1, out_$p378: ref, out_$i380: i32, out_$i381: i1, out_$p382: ref, out_$i384: i32, out_$i385: i1, out_$p386: ref, out_$i388: i32, out_$i389: i1, out_$p390: ref, out_$i391: i32, out_$i392: i32, out_$i393: i32, out_$i394: i1, out_$p395: ref, out_$i396: i32, out_$i397: i32, out_$i398: i32, out_$i399: i1, out_$p400: ref, out_$p401: ref, out_$i402: i32, out_$i404: i32, out_$i405: i1, out_$p406: ref, out_$p407: ref, out_$i408: i32, out_$i410: i32, out_$i411: i1, out_$p412: ref, out_$p413: ref, out_$i414: i32, out_$i416: i32, out_$i417: i1, out_$p418: ref, out_$i419: i16, out_$i420: i32, out_$i421: i16, out_$i422: i16, out_$i423: i32, out_$i424: i16, out_$i425: i16, out_$i426: i32, out_$i427: i16, out_$i428: i16, out_$i429: i32, out_$i430: i16, out_$i432: i32, out_$i433: i1, out_$p434: ref, out_$i435: i16, out_$i436: i32, out_$i437: i16, out_$i438: i16, out_$i439: i32, out_$i440: i16, out_$i441: i16, out_$i442: i32, out_$i443: i16, out_$i444: i16, out_$i445: i32, out_$i446: i16, out_$i448: i32, out_$i449: i1, out_$p450: ref, out_$i451: i16, out_$i452: i32, out_$i453: i16, out_$i454: i16, out_$i455: i32, out_$i456: i16, out_$i457: i16, out_$i458: i32, out_$i459: i16, out_$i460: i16, out_$i461: i32, out_$i462: i16, out_$i464: i32, out_$i465: i1, out_$p466: ref, out_$i468: i32, out_$i469: i1, out_$p470: ref, out_$i472: i32, out_$i473: i1, out_$p474: ref, out_$i476: i32, out_$i477: i1, out_$i478: i32, out_$i479: i1, out_$i480: i1, out_$i481: i1, out_$i482: i1, out_$i483: i1, out_$i484: i1, out_$i485: i32, out_$i486: i1, out_$p487: ref, out_$i488: i32, out_$i489: i32, out_$i490: i1, out_$i491: i32, out_$i492: i32, out_$i493: i32, out_$i494: i1, out_$p495: ref, out_$i496: i32, out_$i497: i1, out_$i498: i32, out_$i499: i1, out_$p500: ref, out_$i501: i32, out_$i502: i32, out_$i503: i1, out_$i504: i32, out_$i505: i32, out_$i506: i32, out_$i507: i1, out_$i508: i32, out_$i509: i1, out_$p510: ref, out_$i511: i32, out_$i512: i32, out_$i513: i1, out_$i514: i32, out_$i515: i32, out_$i516: i32, out_$i517: i1, out_$i518: i32, out_$i519: i32, out_$i520: i1, out_$i521: i32, out_$i522: i1, out_$i523: i32, out_$i524: i32, out_$i525: i1, out_vslice_dummy_var_123: i32, out_vslice_dummy_var_124: i32, out_vslice_dummy_var_125: i32, out_vslice_dummy_var_126: i32, out_vslice_dummy_var_127: i32, out_vslice_dummy_var_128: i32, out_vslice_dummy_var_129: i32, out_vslice_dummy_var_130: i32, out_vslice_dummy_var_131: i32, out_vslice_dummy_var_132: i32, out_vslice_dummy_var_133: i32, out_vslice_dummy_var_134: i32, out_vslice_dummy_var_135: i32, out_vslice_dummy_var_136: i32, out_vslice_dummy_var_137: i32, out_vslice_dummy_var_138: i32, out_vslice_dummy_var_139: i32, out_vslice_dummy_var_140: i32, out_vslice_dummy_var_141: i32, out_vslice_dummy_var_142: i32, out_vslice_dummy_var_143: i32, out_vslice_dummy_var_144: i32, out_vslice_dummy_var_145: i32, out_vslice_dummy_var_146: i32, out_vslice_dummy_var_147: i32, out_vslice_dummy_var_148: i32, out_vslice_dummy_var_149: i32, out_vslice_dummy_var_150: i32, out_vslice_dummy_var_151: i32, out_vslice_dummy_var_152: i32, out_vslice_dummy_var_153: i32, out_vslice_dummy_var_154: i32, out_vslice_dummy_var_155: i32, out_vslice_dummy_var_156: i32, out_vslice_dummy_var_157: i32, out_vslice_dummy_var_158: i32, out_vslice_dummy_var_159: i32, out_vslice_dummy_var_160: i32, out_vslice_dummy_var_161: i32, out_vslice_dummy_var_162: i32, out_vslice_dummy_var_163: i32, out_vslice_dummy_var_164: i32, out_vslice_dummy_var_165: i32, out_vslice_dummy_var_166: i32, out_vslice_dummy_var_167: i32, out_vslice_dummy_var_168: i32, out_vslice_dummy_var_169: i32, out_vslice_dummy_var_170: i32, out_vslice_dummy_var_171: i32, out_vslice_dummy_var_172: i32, out_vslice_dummy_var_173: i32, out_vslice_dummy_var_174: i32, out_vslice_dummy_var_175: i32, out_vslice_dummy_var_176: i32);
  modifies $M.93, $M.91, $M.97, $M.0, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.63, $CurrAddr, $M.27, $M.29, $M.31, $M.33, $M.22, $M.66, $M.68, $M.69, $M.70, $M.71, $M.72, $M.75, $M.76, $M.77, $M.24, $M.25, $M.8, $M.28, $M.30, $M.32, $M.34, $M.39, $M.60, $M.48, $M.50, $M.46, $M.57, $M.47, $M.58, $M.59, assertsPassed, $M.86, $M.87, $M.95, $M.94, $M.98, $M.96, $M.90, $M.99, $M.101, $M.100, $M.102, $M.103, $M.104;


